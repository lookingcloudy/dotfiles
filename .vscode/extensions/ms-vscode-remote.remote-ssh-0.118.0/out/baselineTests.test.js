/*! For license information please see baselineTests.test.js.LICENSE.txt */
(()=>{var __webpack_modules__={8583:n=>{var l=function(){var n,l,e,t,u,r,o,i,s=[],a=["0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f"],c="1a",d=!1,h="chongo <Landon Curt Noll> /\\../\\",f=52,p={32:{offset:0},64:{offset:[0,0,0,0]},128:{offset:[0,0,0,0,0,0,0,0]},256:{offset:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},512:{offset:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},1024:{offset:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}};for(n=0;n<256;n++)s[n]=(n>>4&15).toString(16)+(15&n).toString(16);function m(n,l){var e,t,u,r=[0],o="";for(t=0;t<n.length;t+=2){for(e=parseInt(n.substr(t,2),16),u=0;u<r.length;u++)e+=r[u]<<8,r[u]=e%l,e=e/l|0;for(;e>0;)r.push(e%l),e=e/l|0}for(t=r.length-1;t>=0;--t)o+="0123456789abcdefghijklmnopqrstuvwxyz"[r[t]];return o}function g(n,l){return{bits:l,value:n,dec:function(){return m(n,10)},hex:function(){return n},str:function(){return m(n,36)}}}function y(n,l){return{bits:l,value:n,dec:function(){return n.toString()},hex:function(){return s[n>>>24]+s[n>>>16&255]+s[n>>>8&255]+s[255&n]},str:function(){return n.toString(36)}}}function v(n,l){return{bits:l,value:n,dec:function(){return n.toString()},hex:function(){return("0000000000000000"+n.toString(16)).substr(-13)},str:function(){return n.toString(36)}}}function w(n,s){var a="object"==typeof n?JSON.stringify(n):n;switch(s||f){case 32:return l(a);case 64:return t(a);case 128:return u(a);case 256:return r(a);case 512:return o(a);case 1024:return i(a);default:return e(a)}}function b(n){if("1a"===n)c=n,l=d?_:D,e=d?P:x,t=d?R:A,u=d?j:L,r=d?H:N,o=d?z:q,i=d?X:G;else{if("1"!==n)throw new Error("Supported FNV versions: 1, 1a");c=n,l=d?k:E,e=d?I:T,t=d?F:O,u=d?M:$,r=d?U:B,o=d?V:W,i=d?J:K}}function S(n){n?(d=!0,l="1a"==c?_:k,e="1a"==c?P:I,t="1a"==c?R:F,u="1a"==c?j:M,r="1a"==c?H:U,o="1a"==c?z:V,i="1a"==c?X:J):(d=!1,l="1a"==c?D:E,e="1a"==c?x:T,t="1a"==c?A:O,u="1a"==c?L:$,r="1a"==c?N:B,o="1a"==c?q:W,i="1a"==c?G:K)}function C(n){var l,e,t=c;for(var u in(n=n||0===n?n:h)===h&&b("1"),p){for(p[u].offset=[],e=0;e<u/16;e++)p[u].offset[e]=0;for(l=w(n,parseInt(u,10)).hex(),e=0;e<u/16;e++)p[u].offset[e]=parseInt(l.substr(4*e,4),16)}b(t)}function D(n){var l,e=n.length-3,t=p[32].offset,u=0,r=0|t[1],o=0,i=0|t[0];for(l=0;l<e;)o=403*i,o+=(r^=n.charCodeAt(l++))<<8,r=65535&(u=403*r),o=403*(i=o+(u>>>16)&65535),o+=(r^=n.charCodeAt(l++))<<8,r=65535&(u=403*r),o=403*(i=o+(u>>>16)&65535),o+=(r^=n.charCodeAt(l++))<<8,r=65535&(u=403*r),o=403*(i=o+(u>>>16)&65535),i=(o+=(r^=n.charCodeAt(l++))<<8)+((u=403*r)>>>16)&65535,r=65535&u;for(;l<e+3;)o=403*i,i=(o+=(r^=n.charCodeAt(l++))<<8)+((u=403*r)>>>16)&65535,r=65535&u;return y((i<<16>>>0)+r,32)}function E(n){var l,e=n.length-3,t=p[32].offset,u=0,r=0|t[1],o=0,i=0|t[0];for(l=0;l<e;)o=403*i,o+=r<<8,r=65535&(u=403*r),o=403*(i=o+(u>>>16)&65535),o+=(r^=n.charCodeAt(l++))<<8,r=65535&(u=403*r),o=403*(i=o+(u>>>16)&65535),o+=(r^=n.charCodeAt(l++))<<8,r=65535&(u=403*r),o=403*(i=o+(u>>>16)&65535),i=(o+=(r^=n.charCodeAt(l++))<<8)+((u=403*r)>>>16)&65535,r=65535&u,r^=n.charCodeAt(l++);for(;l<e+3;)o=403*i,i=(o+=r<<8)+((u=403*r)>>>16)&65535,r=65535&u,r^=n.charCodeAt(l++);return y((i<<16>>>0)+r,32)}function _(n){var l,e,t=n.length,u=p[32].offset,r=0,o=0|u[1],i=0,s=0|u[0];for(e=0;e<t;e++)(l=n.charCodeAt(e))<128?o^=l:l<2048?(i=403*s,s=(i+=(o^=l>>6|192)<<8)+((r=403*o)>>>16)&65535,o=65535&r,o^=63&l|128):55296==(64512&l)&&e+1<t&&56320==(64512&n.charCodeAt(e+1))?(i=403*s,i+=(o^=(l=65536+((1023&l)<<10)+(1023&n.charCodeAt(++e)))>>18|240)<<8,o=65535&(r=403*o),i=403*(s=i+(r>>>16)&65535),i+=(o^=l>>12&63|128)<<8,o=65535&(r=403*o),i=403*(s=i+(r>>>16)&65535),s=(i+=(o^=l>>6&63|128)<<8)+((r=403*o)>>>16)&65535,o=65535&r,o^=63&l|128):(i=403*s,i+=(o^=l>>12|224)<<8,o=65535&(r=403*o),i=403*(s=i+(r>>>16)&65535),s=(i+=(o^=l>>6&63|128)<<8)+((r=403*o)>>>16)&65535,o=65535&r,o^=63&l|128),i=403*s,s=(i+=o<<8)+((r=403*o)>>>16)&65535,o=65535&r;return y((s<<16>>>0)+o,32)}function k(n){var l,e,t=n.length,u=p[32].offset,r=0,o=0|u[1],i=0,s=0|u[0];for(e=0;e<t;e++)i=403*s,s=(i+=o<<8)+((r=403*o)>>>16)&65535,o=65535&r,(l=n.charCodeAt(e))<128?o^=l:l<2048?(i=403*s,s=(i+=(o^=l>>6|192)<<8)+((r=403*o)>>>16)&65535,o=65535&r,o^=63&l|128):55296==(64512&l)&&e+1<t&&56320==(64512&n.charCodeAt(e+1))?(i=403*s,i+=(o^=(l=65536+((1023&l)<<10)+(1023&n.charCodeAt(++e)))>>18|240)<<8,o=65535&(r=403*o),i=403*(s=i+(r>>>16)&65535),i+=(o^=l>>12&63|128)<<8,o=65535&(r=403*o),i=403*(s=i+(r>>>16)&65535),s=(i+=(o^=l>>6&63|128)<<8)+((r=403*o)>>>16)&65535,o=65535&r,o^=63&l|128):(i=403*s,i+=(o^=l>>12|224)<<8,o=65535&(r=403*o),i=403*(s=i+(r>>>16)&65535),s=(i+=(o^=l>>6&63|128)<<8)+((r=403*o)>>>16)&65535,o=65535&r,o^=63&l|128);return y((s<<16>>>0)+o,32)}function x(n){var l,e=n.length-3,t=p[64].offset,u=0,r=0|t[3],o=0,i=0|t[2],s=0,a=0|t[1],c=0,d=0|t[0];for(l=0;l<e;)o=435*i,s=435*a,c=435*d,s+=(r^=n.charCodeAt(l++))<<8,r=65535&(u=435*r),d=(c+=i<<8)+((s+=(o+=u>>>16)>>>16)>>>16)&65535,o=435*(i=65535&o),s=435*(a=65535&s),c=435*d,s+=(r^=n.charCodeAt(l++))<<8,r=65535&(u=435*r),d=(c+=i<<8)+((s+=(o+=u>>>16)>>>16)>>>16)&65535,o=435*(i=65535&o),s=435*(a=65535&s),c=435*d,s+=(r^=n.charCodeAt(l++))<<8,r=65535&(u=435*r),d=(c+=i<<8)+((s+=(o+=u>>>16)>>>16)>>>16)&65535,o=435*(i=65535&o),s=435*(a=65535&s),c=435*d,s+=(r^=n.charCodeAt(l++))<<8,c+=i<<8,r=65535&(u=435*r),i=65535&(o+=u>>>16),d=c+((s+=o>>>16)>>>16)&65535,a=65535&s;for(;l<e+3;)o=435*i,s=435*a,c=435*d,s+=(r^=n.charCodeAt(l++))<<8,c+=i<<8,r=65535&(u=435*r),i=65535&(o+=u>>>16),d=c+((s+=o>>>16)>>>16)&65535,a=65535&s;return v(281474976710656*(15&d)+4294967296*a+65536*i+(r^d>>4),52)}function T(n){var l,e=n.length-3,t=p[64].offset,u=0,r=0|t[3],o=0,i=0|t[2],s=0,a=0|t[1],c=0,d=0|t[0];for(l=0;l<e;)o=435*i,s=435*a,c=435*d,s+=r<<8,r=65535&(u=435*r),d=(c+=i<<8)+((s+=(o+=u>>>16)>>>16)>>>16)&65535,o=435*(i=65535&o),s=435*(a=65535&s),c=435*d,s+=(r^=n.charCodeAt(l++))<<8,r=65535&(u=435*r),d=(c+=i<<8)+((s+=(o+=u>>>16)>>>16)>>>16)&65535,o=435*(i=65535&o),s=435*(a=65535&s),c=435*d,s+=(r^=n.charCodeAt(l++))<<8,r=65535&(u=435*r),d=(c+=i<<8)+((s+=(o+=u>>>16)>>>16)>>>16)&65535,o=435*(i=65535&o),s=435*(a=65535&s),c=435*d,s+=(r^=n.charCodeAt(l++))<<8,c+=i<<8,r=65535&(u=435*r),i=65535&(o+=u>>>16),d=c+((s+=o>>>16)>>>16)&65535,a=65535&s,r^=n.charCodeAt(l++);for(;l<e+3;)o=435*i,s=435*a,c=435*d,s+=r<<8,c+=i<<8,r=65535&(u=435*r),i=65535&(o+=u>>>16),d=c+((s+=o>>>16)>>>16)&65535,a=65535&s,r^=n.charCodeAt(l++);return v(281474976710656*(15&d)+4294967296*a+65536*i+(r^d>>4),52)}function P(n){var l,e,t=n.length,u=p[64].offset,r=0,o=0|u[3],i=0,s=0|u[2],a=0,c=0|u[1],d=0,h=0|u[0];for(e=0;e<t;e++)(l=n.charCodeAt(e))<128?o^=l:l<2048?(i=435*s,a=435*c,d=435*h,a+=(o^=l>>6|192)<<8,d+=s<<8,o=65535&(r=435*o),s=65535&(i+=r>>>16),h=d+((a+=i>>>16)>>>16)&65535,c=65535&a,o^=63&l|128):55296==(64512&l)&&e+1<t&&56320==(64512&n.charCodeAt(e+1))?(i=435*s,a=435*c,d=435*h,a+=(o^=(l=65536+((1023&l)<<10)+(1023&n.charCodeAt(++e)))>>18|240)<<8,o=65535&(r=435*o),h=(d+=s<<8)+((a+=(i+=r>>>16)>>>16)>>>16)&65535,i=435*(s=65535&i),a=435*(c=65535&a),d=435*h,a+=(o^=l>>12&63|128)<<8,o=65535&(r=435*o),h=(d+=s<<8)+((a+=(i+=r>>>16)>>>16)>>>16)&65535,i=435*(s=65535&i),a=435*(c=65535&a),d=435*h,a+=(o^=l>>6&63|128)<<8,d+=s<<8,o=65535&(r=435*o),s=65535&(i+=r>>>16),h=d+((a+=i>>>16)>>>16)&65535,c=65535&a,o^=63&l|128):(i=435*s,a=435*c,d=435*h,a+=(o^=l>>12|224)<<8,o=65535&(r=435*o),h=(d+=s<<8)+((a+=(i+=r>>>16)>>>16)>>>16)&65535,i=435*(s=65535&i),a=435*(c=65535&a),d=435*h,a+=(o^=l>>6&63|128)<<8,d+=s<<8,o=65535&(r=435*o),s=65535&(i+=r>>>16),h=d+((a+=i>>>16)>>>16)&65535,c=65535&a,o^=63&l|128),i=435*s,a=435*c,d=435*h,a+=o<<8,d+=s<<8,o=65535&(r=435*o),s=65535&(i+=r>>>16),h=d+((a+=i>>>16)>>>16)&65535,c=65535&a;return v(281474976710656*(15&h)+4294967296*c+65536*s+(o^h>>4),52)}function I(n){var l,e,t=n.length,u=p[64].offset,r=0,o=0|u[3],i=0,s=0|u[2],a=0,c=0|u[1],d=0,h=0|u[0];for(e=0;e<t;e++)i=435*s,a=435*c,d=435*h,a+=o<<8,d+=s<<8,o=65535&(r=435*o),s=65535&(i+=r>>>16),h=d+((a+=i>>>16)>>>16)&65535,c=65535&a,(l=n.charCodeAt(e))<128?o^=l:l<2048?(i=435*s,a=435*c,d=435*h,a+=(o^=l>>6|192)<<8,d+=s<<8,o=65535&(r=435*o),s=65535&(i+=r>>>16),h=d+((a+=i>>>16)>>>16)&65535,c=65535&a,o^=63&l|128):55296==(64512&l)&&e+1<t&&56320==(64512&n.charCodeAt(e+1))?(i=435*s,a=435*c,d=435*h,a+=(o^=(l=65536+((1023&l)<<10)+(1023&n.charCodeAt(++e)))>>18|240)<<8,o=65535&(r=435*o),h=(d+=s<<8)+((a+=(i+=r>>>16)>>>16)>>>16)&65535,i=435*(s=65535&i),a=435*(c=65535&a),d=435*h,a+=(o^=l>>12&63|128)<<8,o=65535&(r=435*o),h=(d+=s<<8)+((a+=(i+=r>>>16)>>>16)>>>16)&65535,i=435*(s=65535&i),a=435*(c=65535&a),d=435*h,a+=(o^=l>>6&63|128)<<8,d+=s<<8,o=65535&(r=435*o),s=65535&(i+=r>>>16),h=d+((a+=i>>>16)>>>16)&65535,c=65535&a,o^=63&l|128):(i=435*s,a=435*c,d=435*h,a+=(o^=l>>12|224)<<8,o=65535&(r=435*o),h=(d+=s<<8)+((a+=(i+=r>>>16)>>>16)>>>16)&65535,i=435*(s=65535&i),a=435*(c=65535&a),d=435*h,a+=(o^=l>>6&63|128)<<8,d+=s<<8,o=65535&(r=435*o),s=65535&(i+=r>>>16),h=d+((a+=i>>>16)>>>16)&65535,c=65535&a,o^=63&l|128);return v(281474976710656*(15&h)+4294967296*c+65536*s+(o^h>>4),52)}function A(n){var l,e=n.length-3,t=p[64].offset,u=0,r=0|t[3],o=0,i=0|t[2],a=0,c=0|t[1],d=0,h=0|t[0];for(l=0;l<e;)o=435*i,a=435*c,d=435*h,a+=(r^=n.charCodeAt(l++))<<8,r=65535&(u=435*r),h=(d+=i<<8)+((a+=(o+=u>>>16)>>>16)>>>16)&65535,o=435*(i=65535&o),a=435*(c=65535&a),d=435*h,a+=(r^=n.charCodeAt(l++))<<8,r=65535&(u=435*r),h=(d+=i<<8)+((a+=(o+=u>>>16)>>>16)>>>16)&65535,o=435*(i=65535&o),a=435*(c=65535&a),d=435*h,a+=(r^=n.charCodeAt(l++))<<8,r=65535&(u=435*r),h=(d+=i<<8)+((a+=(o+=u>>>16)>>>16)>>>16)&65535,o=435*(i=65535&o),a=435*(c=65535&a),d=435*h,a+=(r^=n.charCodeAt(l++))<<8,d+=i<<8,r=65535&(u=435*r),i=65535&(o+=u>>>16),h=d+((a+=o>>>16)>>>16)&65535,c=65535&a;for(;l<e+3;)o=435*i,a=435*c,d=435*h,a+=(r^=n.charCodeAt(l++))<<8,d+=i<<8,r=65535&(u=435*r),i=65535&(o+=u>>>16),h=d+((a+=o>>>16)>>>16)&65535,c=65535&a;return g(s[h>>8]+s[255&h]+s[c>>8]+s[255&c]+s[i>>8]+s[255&i]+s[r>>8]+s[255&r],64)}function O(n){var l,e=n.length-3,t=p[64].offset,u=0,r=0|t[3],o=0,i=0|t[2],a=0,c=0|t[1],d=0,h=0|t[0];for(l=0;l<e;)o=435*i,a=435*c,d=435*h,a+=r<<8,r=65535&(u=435*r),h=(d+=i<<8)+((a+=(o+=u>>>16)>>>16)>>>16)&65535,o=435*(i=65535&o),a=435*(c=65535&a),d=435*h,a+=(r^=n.charCodeAt(l++))<<8,r=65535&(u=435*r),h=(d+=i<<8)+((a+=(o+=u>>>16)>>>16)>>>16)&65535,o=435*(i=65535&o),a=435*(c=65535&a),d=435*h,a+=(r^=n.charCodeAt(l++))<<8,r=65535&(u=435*r),h=(d+=i<<8)+((a+=(o+=u>>>16)>>>16)>>>16)&65535,o=435*(i=65535&o),a=435*(c=65535&a),d=435*h,a+=(r^=n.charCodeAt(l++))<<8,d+=i<<8,r=65535&(u=435*r),i=65535&(o+=u>>>16),h=d+((a+=o>>>16)>>>16)&65535,c=65535&a,r^=n.charCodeAt(l++);for(;l<e+3;)o=435*i,a=435*c,d=435*h,a+=r<<8,d+=i<<8,r=65535&(u=435*r),i=65535&(o+=u>>>16),h=d+((a+=o>>>16)>>>16)&65535,c=65535&a,r^=n.charCodeAt(l++);return g(s[h>>8]+s[255&h]+s[c>>8]+s[255&c]+s[i>>8]+s[255&i]+s[r>>8]+s[255&r],64)}function R(n){var l,e,t=n.length,u=p[64].offset,r=0,o=0|u[3],i=0,a=0|u[2],c=0,d=0|u[1],h=0,f=0|u[0];for(e=0;e<t;e++)(l=n.charCodeAt(e))<128?o^=l:l<2048?(i=435*a,c=435*d,h=435*f,c+=(o^=l>>6|192)<<8,h+=a<<8,o=65535&(r=435*o),a=65535&(i+=r>>>16),f=h+((c+=i>>>16)>>>16)&65535,d=65535&c,o^=63&l|128):55296==(64512&l)&&e+1<t&&56320==(64512&n.charCodeAt(e+1))?(i=435*a,c=435*d,h=435*f,c+=(o^=(l=65536+((1023&l)<<10)+(1023&n.charCodeAt(++e)))>>18|240)<<8,o=65535&(r=435*o),f=(h+=a<<8)+((c+=(i+=r>>>16)>>>16)>>>16)&65535,i=435*(a=65535&i),c=435*(d=65535&c),h=435*f,c+=(o^=l>>12&63|128)<<8,o=65535&(r=435*o),f=(h+=a<<8)+((c+=(i+=r>>>16)>>>16)>>>16)&65535,i=435*(a=65535&i),c=435*(d=65535&c),h=435*f,c+=(o^=l>>6&63|128)<<8,h+=a<<8,o=65535&(r=435*o),a=65535&(i+=r>>>16),f=h+((c+=i>>>16)>>>16)&65535,d=65535&c,o^=63&l|128):(i=435*a,c=435*d,h=435*f,c+=(o^=l>>12|224)<<8,o=65535&(r=435*o),f=(h+=a<<8)+((c+=(i+=r>>>16)>>>16)>>>16)&65535,i=435*(a=65535&i),c=435*(d=65535&c),h=435*f,c+=(o^=l>>6&63|128)<<8,h+=a<<8,o=65535&(r=435*o),a=65535&(i+=r>>>16),f=h+((c+=i>>>16)>>>16)&65535,d=65535&c,o^=63&l|128),i=435*a,c=435*d,h=435*f,c+=o<<8,h+=a<<8,o=65535&(r=435*o),a=65535&(i+=r>>>16),f=h+((c+=i>>>16)>>>16)&65535,d=65535&c;return g(s[f>>8]+s[255&f]+s[d>>8]+s[255&d]+s[a>>8]+s[255&a]+s[o>>8]+s[255&o],64)}function F(n){var l,e,t=n.length,u=p[64].offset,r=0,o=0|u[3],i=0,a=0|u[2],c=0,d=0|u[1],h=0,f=0|u[0];for(e=0;e<t;e++)i=435*a,c=435*d,h=435*f,c+=o<<8,h+=a<<8,o=65535&(r=435*o),a=65535&(i+=r>>>16),f=h+((c+=i>>>16)>>>16)&65535,d=65535&c,(l=n.charCodeAt(e))<128?o^=l:l<2048?(i=435*a,c=435*d,h=435*f,c+=(o^=l>>6|192)<<8,h+=a<<8,o=65535&(r=435*o),a=65535&(i+=r>>>16),f=h+((c+=i>>>16)>>>16)&65535,d=65535&c,o^=63&l|128):55296==(64512&l)&&e+1<t&&56320==(64512&n.charCodeAt(e+1))?(i=435*a,c=435*d,h=435*f,c+=(o^=(l=65536+((1023&l)<<10)+(1023&n.charCodeAt(++e)))>>18|240)<<8,o=65535&(r=435*o),f=(h+=a<<8)+((c+=(i+=r>>>16)>>>16)>>>16)&65535,i=435*(a=65535&i),c=435*(d=65535&c),h=435*f,c+=(o^=l>>12&63|128)<<8,o=65535&(r=435*o),f=(h+=a<<8)+((c+=(i+=r>>>16)>>>16)>>>16)&65535,i=435*(a=65535&i),c=435*(d=65535&c),h=435*f,c+=(o^=l>>6&63|128)<<8,h+=a<<8,o=65535&(r=435*o),a=65535&(i+=r>>>16),f=h+((c+=i>>>16)>>>16)&65535,d=65535&c,o^=63&l|128):(i=435*a,c=435*d,h=435*f,c+=(o^=l>>12|224)<<8,o=65535&(r=435*o),f=(h+=a<<8)+((c+=(i+=r>>>16)>>>16)>>>16)&65535,i=435*(a=65535&i),c=435*(d=65535&c),h=435*f,c+=(o^=l>>6&63|128)<<8,h+=a<<8,o=65535&(r=435*o),a=65535&(i+=r>>>16),f=h+((c+=i>>>16)>>>16)&65535,d=65535&c,o^=63&l|128);return g(s[f>>8]+s[255&f]+s[d>>8]+s[255&d]+s[a>>8]+s[255&a]+s[o>>8]+s[255&o],64)}function L(n){var l,e=n.length-3,t=p[128].offset,u=0,r=0|t[7],o=0,i=0|t[6],a=0,c=0|t[5],d=0,h=0|t[4],f=0,m=0|t[3],y=0,v=0|t[2],w=0,b=0|t[1],S=0,C=0|t[0];for(l=0;l<e;)o=315*i,a=315*c,d=315*h,f=315*m,y=315*v,w=315*b,S=315*C,y+=(r^=n.charCodeAt(l++))<<8,w+=i<<8,r=65535&(u=315*r),C=(S+=c<<8)+((w+=(y+=(f+=(d+=(a+=(o+=u>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)&65535,o=315*(i=65535&o),a=315*(c=65535&a),d=315*(h=65535&d),f=315*(m=65535&f),y=315*(v=65535&y),w=315*(b=65535&w),S=315*C,y+=(r^=n.charCodeAt(l++))<<8,w+=i<<8,r=65535&(u=315*r),C=(S+=c<<8)+((w+=(y+=(f+=(d+=(a+=(o+=u>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)&65535,o=315*(i=65535&o),a=315*(c=65535&a),d=315*(h=65535&d),f=315*(m=65535&f),y=315*(v=65535&y),w=315*(b=65535&w),S=315*C,y+=(r^=n.charCodeAt(l++))<<8,w+=i<<8,r=65535&(u=315*r),C=(S+=c<<8)+((w+=(y+=(f+=(d+=(a+=(o+=u>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)&65535,o=315*(i=65535&o),a=315*(c=65535&a),d=315*(h=65535&d),f=315*(m=65535&f),y=315*(v=65535&y),w=315*(b=65535&w),S=315*C,y+=(r^=n.charCodeAt(l++))<<8,w+=i<<8,S+=c<<8,r=65535&(u=315*r),i=65535&(o+=u>>>16),c=65535&(a+=o>>>16),h=65535&(d+=a>>>16),m=65535&(f+=d>>>16),v=65535&(y+=f>>>16),C=S+((w+=y>>>16)>>>16)&65535,b=65535&w;for(;l<e+3;)o=315*i,a=315*c,d=315*h,f=315*m,y=315*v,w=315*b,S=315*C,y+=(r^=n.charCodeAt(l++))<<8,w+=i<<8,S+=c<<8,r=65535&(u=315*r),i=65535&(o+=u>>>16),c=65535&(a+=o>>>16),h=65535&(d+=a>>>16),m=65535&(f+=d>>>16),v=65535&(y+=f>>>16),C=S+((w+=y>>>16)>>>16)&65535,b=65535&w;return g(s[C>>8]+s[255&C]+s[b>>8]+s[255&b]+s[v>>8]+s[255&v]+s[m>>8]+s[255&m]+s[h>>8]+s[255&h]+s[c>>8]+s[255&c]+s[i>>8]+s[255&i]+s[r>>8]+s[255&r],128)}function $(n){var l,e=n.length-3,t=p[128].offset,u=0,r=0|t[7],o=0,i=0|t[6],a=0,c=0|t[5],d=0,h=0|t[4],f=0,m=0|t[3],y=0,v=0|t[2],w=0,b=0|t[1],S=0,C=0|t[0];for(l=0;l<e;)o=315*i,a=315*c,d=315*h,f=315*m,y=315*v,w=315*b,S=315*C,y+=r<<8,w+=i<<8,r=65535&(u=315*r),C=(S+=c<<8)+((w+=(y+=(f+=(d+=(a+=(o+=u>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)&65535,o=315*(i=65535&o),a=315*(c=65535&a),d=315*(h=65535&d),f=315*(m=65535&f),y=315*(v=65535&y),w=315*(b=65535&w),S=315*C,y+=(r^=n.charCodeAt(l++))<<8,w+=i<<8,r=65535&(u=315*r),C=(S+=c<<8)+((w+=(y+=(f+=(d+=(a+=(o+=u>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)&65535,o=315*(i=65535&o),a=315*(c=65535&a),d=315*(h=65535&d),f=315*(m=65535&f),y=315*(v=65535&y),w=315*(b=65535&w),S=315*C,y+=(r^=n.charCodeAt(l++))<<8,w+=i<<8,r=65535&(u=315*r),C=(S+=c<<8)+((w+=(y+=(f+=(d+=(a+=(o+=u>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)&65535,o=315*(i=65535&o),a=315*(c=65535&a),d=315*(h=65535&d),f=315*(m=65535&f),y=315*(v=65535&y),w=315*(b=65535&w),S=315*C,y+=(r^=n.charCodeAt(l++))<<8,w+=i<<8,S+=c<<8,r=65535&(u=315*r),i=65535&(o+=u>>>16),c=65535&(a+=o>>>16),h=65535&(d+=a>>>16),m=65535&(f+=d>>>16),v=65535&(y+=f>>>16),C=S+((w+=y>>>16)>>>16)&65535,b=65535&w,r^=n.charCodeAt(l++);for(;l<e+3;)o=315*i,a=315*c,d=315*h,f=315*m,y=315*v,w=315*b,S=315*C,y+=r<<8,w+=i<<8,S+=c<<8,r=65535&(u=315*r),i=65535&(o+=u>>>16),c=65535&(a+=o>>>16),h=65535&(d+=a>>>16),m=65535&(f+=d>>>16),v=65535&(y+=f>>>16),C=S+((w+=y>>>16)>>>16)&65535,b=65535&w,r^=n.charCodeAt(l++);return g(s[C>>8]+s[255&C]+s[b>>8]+s[255&b]+s[v>>8]+s[255&v]+s[m>>8]+s[255&m]+s[h>>8]+s[255&h]+s[c>>8]+s[255&c]+s[i>>8]+s[255&i]+s[r>>8]+s[255&r],128)}function j(n){var l,e,t=n.length,u=p[128].offset,r=0,o=0|u[7],i=0,a=0|u[6],c=0,d=0|u[5],h=0,f=0|u[4],m=0,y=0|u[3],v=0,w=0|u[2],b=0,S=0|u[1],C=0,D=0|u[0];for(e=0;e<t;e++)(l=n.charCodeAt(e))<128?o^=l:l<2048?(i=315*a,c=315*d,h=315*f,m=315*y,v=315*w,b=315*S,C=315*D,v+=(o^=l>>6|192)<<8,b+=a<<8,C+=d<<8,o=65535&(r=315*o),a=65535&(i+=r>>>16),d=65535&(c+=i>>>16),f=65535&(h+=c>>>16),y=65535&(m+=h>>>16),w=65535&(v+=m>>>16),D=C+((b+=v>>>16)>>>16)&65535,S=65535&b,o^=63&l|128):55296==(64512&l)&&e+1<t&&56320==(64512&n.charCodeAt(e+1))?(i=315*a,c=315*d,h=315*f,m=315*y,v=315*w,b=315*S,C=315*D,v+=(o^=(l=65536+((1023&l)<<10)+(1023&n.charCodeAt(++e)))>>18|240)<<8,b+=a<<8,o=65535&(r=315*o),D=(C+=d<<8)+((b+=(v+=(m+=(h+=(c+=(i+=r>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)&65535,i=315*(a=65535&i),c=315*(d=65535&c),h=315*(f=65535&h),m=315*(y=65535&m),v=315*(w=65535&v),b=315*(S=65535&b),C=315*D,v+=(o^=l>>12&63|128)<<8,b+=a<<8,o=65535&(r=315*o),D=(C+=d<<8)+((b+=(v+=(m+=(h+=(c+=(i+=r>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)&65535,i=315*(a=65535&i),c=315*(d=65535&c),h=315*(f=65535&h),m=315*(y=65535&m),v=315*(w=65535&v),b=315*(S=65535&b),C=315*D,v+=(o^=l>>6&63|128)<<8,b+=a<<8,C+=d<<8,o=65535&(r=315*o),a=65535&(i+=r>>>16),d=65535&(c+=i>>>16),f=65535&(h+=c>>>16),y=65535&(m+=h>>>16),w=65535&(v+=m>>>16),D=C+((b+=v>>>16)>>>16)&65535,S=65535&b,o^=63&l|128):(i=315*a,c=315*d,h=315*f,m=315*y,v=315*w,b=315*S,C=315*D,v+=(o^=l>>12|224)<<8,b+=a<<8,o=65535&(r=315*o),D=(C+=d<<8)+((b+=(v+=(m+=(h+=(c+=(i+=r>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)&65535,i=315*(a=65535&i),c=315*(d=65535&c),h=315*(f=65535&h),m=315*(y=65535&m),v=315*(w=65535&v),b=315*(S=65535&b),C=315*D,v+=(o^=l>>6&63|128)<<8,b+=a<<8,C+=d<<8,o=65535&(r=315*o),a=65535&(i+=r>>>16),d=65535&(c+=i>>>16),f=65535&(h+=c>>>16),y=65535&(m+=h>>>16),w=65535&(v+=m>>>16),D=C+((b+=v>>>16)>>>16)&65535,S=65535&b,o^=63&l|128),i=315*a,c=315*d,h=315*f,m=315*y,v=315*w,b=315*S,C=315*D,v+=o<<8,b+=a<<8,C+=d<<8,o=65535&(r=315*o),a=65535&(i+=r>>>16),d=65535&(c+=i>>>16),f=65535&(h+=c>>>16),y=65535&(m+=h>>>16),w=65535&(v+=m>>>16),D=C+((b+=v>>>16)>>>16)&65535,S=65535&b;return g(s[D>>8]+s[255&D]+s[S>>8]+s[255&S]+s[w>>8]+s[255&w]+s[y>>8]+s[255&y]+s[f>>8]+s[255&f]+s[d>>8]+s[255&d]+s[a>>8]+s[255&a]+s[o>>8]+s[255&o],128)}function M(n){var l,e,t=n.length,u=p[128].offset,r=0,o=0|u[7],i=0,a=0|u[6],c=0,d=0|u[5],h=0,f=0|u[4],m=0,y=0|u[3],v=0,w=0|u[2],b=0,S=0|u[1],C=0,D=0|u[0];for(e=0;e<t;e++)i=315*a,c=315*d,h=315*f,m=315*y,v=315*w,b=315*S,C=315*D,v+=o<<8,b+=a<<8,C+=d<<8,o=65535&(r=315*o),a=65535&(i+=r>>>16),d=65535&(c+=i>>>16),f=65535&(h+=c>>>16),y=65535&(m+=h>>>16),w=65535&(v+=m>>>16),D=C+((b+=v>>>16)>>>16)&65535,S=65535&b,(l=n.charCodeAt(e))<128?o^=l:l<2048?(i=315*a,c=315*d,h=315*f,m=315*y,v=315*w,b=315*S,C=315*D,v+=(o^=l>>6|192)<<8,b+=a<<8,C+=d<<8,o=65535&(r=315*o),a=65535&(i+=r>>>16),d=65535&(c+=i>>>16),f=65535&(h+=c>>>16),y=65535&(m+=h>>>16),w=65535&(v+=m>>>16),D=C+((b+=v>>>16)>>>16)&65535,S=65535&b,o^=63&l|128):55296==(64512&l)&&e+1<t&&56320==(64512&n.charCodeAt(e+1))?(i=315*a,c=315*d,h=315*f,m=315*y,v=315*w,b=315*S,C=315*D,v+=(o^=(l=65536+((1023&l)<<10)+(1023&n.charCodeAt(++e)))>>18|240)<<8,b+=a<<8,o=65535&(r=315*o),D=(C+=d<<8)+((b+=(v+=(m+=(h+=(c+=(i+=r>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)&65535,i=315*(a=65535&i),c=315*(d=65535&c),h=315*(f=65535&h),m=315*(y=65535&m),v=315*(w=65535&v),b=315*(S=65535&b),C=315*D,v+=(o^=l>>12&63|128)<<8,b+=a<<8,o=65535&(r=315*o),D=(C+=d<<8)+((b+=(v+=(m+=(h+=(c+=(i+=r>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)&65535,i=315*(a=65535&i),c=315*(d=65535&c),h=315*(f=65535&h),m=315*(y=65535&m),v=315*(w=65535&v),b=315*(S=65535&b),C=315*D,v+=(o^=l>>6&63|128)<<8,b+=a<<8,C+=d<<8,o=65535&(r=315*o),a=65535&(i+=r>>>16),d=65535&(c+=i>>>16),f=65535&(h+=c>>>16),y=65535&(m+=h>>>16),w=65535&(v+=m>>>16),D=C+((b+=v>>>16)>>>16)&65535,S=65535&b,o^=63&l|128):(i=315*a,c=315*d,h=315*f,m=315*y,v=315*w,b=315*S,C=315*D,v+=(o^=l>>12|224)<<8,b+=a<<8,o=65535&(r=315*o),D=(C+=d<<8)+((b+=(v+=(m+=(h+=(c+=(i+=r>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)&65535,i=315*(a=65535&i),c=315*(d=65535&c),h=315*(f=65535&h),m=315*(y=65535&m),v=315*(w=65535&v),b=315*(S=65535&b),C=315*D,v+=(o^=l>>6&63|128)<<8,b+=a<<8,C+=d<<8,o=65535&(r=315*o),a=65535&(i+=r>>>16),d=65535&(c+=i>>>16),f=65535&(h+=c>>>16),y=65535&(m+=h>>>16),w=65535&(v+=m>>>16),D=C+((b+=v>>>16)>>>16)&65535,S=65535&b,o^=63&l|128);return g(s[D>>8]+s[255&D]+s[S>>8]+s[255&S]+s[w>>8]+s[255&w]+s[y>>8]+s[255&y]+s[f>>8]+s[255&f]+s[d>>8]+s[255&d]+s[a>>8]+s[255&a]+s[o>>8]+s[255&o],128)}function N(n){var l,e=n.length-3,t=p[256].offset,u=0,r=0|t[15],o=0,i=0|t[14],a=0,c=0|t[13],d=0,h=0|t[12],f=0,m=0|t[11],y=0,v=0|t[10],w=0,b=0|t[9],S=0,C=0|t[8],D=0,E=0|t[7],_=0,k=0|t[6],x=0,T=0|t[5],P=0,I=0|t[4],A=0,O=0|t[3],R=0,F=0|t[2],L=0,$=0|t[1],j=0,M=0|t[0];for(l=0;l<e;)o=355*i,a=355*c,d=355*h,f=355*m,y=355*v,w=355*b,S=355*C,D=355*E,_=355*k,x=355*T,P=355*I,A=355*O,R=355*F,L=355*$,j=355*M,x+=(r^=n.charCodeAt(l++))<<8,P+=i<<8,A+=c<<8,R+=h<<8,L+=m<<8,r=65535&(u=355*r),M=(j+=v<<8)+((L+=(R+=(A+=(P+=(x+=(_+=(D+=(S+=(w+=(y+=(f+=(d+=(a+=(o+=u>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)&65535,o=355*(i=65535&o),a=355*(c=65535&a),d=355*(h=65535&d),f=355*(m=65535&f),y=355*(v=65535&y),w=355*(b=65535&w),S=355*(C=65535&S),D=355*(E=65535&D),_=355*(k=65535&_),x=355*(T=65535&x),P=355*(I=65535&P),A=355*(O=65535&A),R=355*(F=65535&R),L=355*($=65535&L),j=355*M,x+=(r^=n.charCodeAt(l++))<<8,P+=i<<8,A+=c<<8,R+=h<<8,L+=m<<8,r=65535&(u=355*r),M=(j+=v<<8)+((L+=(R+=(A+=(P+=(x+=(_+=(D+=(S+=(w+=(y+=(f+=(d+=(a+=(o+=u>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)&65535,o=355*(i=65535&o),a=355*(c=65535&a),d=355*(h=65535&d),f=355*(m=65535&f),y=355*(v=65535&y),w=355*(b=65535&w),S=355*(C=65535&S),D=355*(E=65535&D),_=355*(k=65535&_),x=355*(T=65535&x),P=355*(I=65535&P),A=355*(O=65535&A),R=355*(F=65535&R),L=355*($=65535&L),j=355*M,x+=(r^=n.charCodeAt(l++))<<8,P+=i<<8,A+=c<<8,R+=h<<8,L+=m<<8,r=65535&(u=355*r),M=(j+=v<<8)+((L+=(R+=(A+=(P+=(x+=(_+=(D+=(S+=(w+=(y+=(f+=(d+=(a+=(o+=u>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)&65535,o=355*(i=65535&o),a=355*(c=65535&a),d=355*(h=65535&d),f=355*(m=65535&f),y=355*(v=65535&y),w=355*(b=65535&w),S=355*(C=65535&S),D=355*(E=65535&D),_=355*(k=65535&_),x=355*(T=65535&x),P=355*(I=65535&P),A=355*(O=65535&A),R=355*(F=65535&R),L=355*($=65535&L),j=355*M,x+=(r^=n.charCodeAt(l++))<<8,P+=i<<8,A+=c<<8,R+=h<<8,L+=m<<8,j+=v<<8,r=65535&(u=355*r),i=65535&(o+=u>>>16),c=65535&(a+=o>>>16),h=65535&(d+=a>>>16),m=65535&(f+=d>>>16),v=65535&(y+=f>>>16),b=65535&(w+=y>>>16),C=65535&(S+=w>>>16),E=65535&(D+=S>>>16),k=65535&(_+=D>>>16),T=65535&(x+=_>>>16),I=65535&(P+=x>>>16),O=65535&(A+=P>>>16),F=65535&(R+=A>>>16),M=j+((L+=R>>>16)>>>16)&65535,$=65535&L;for(;l<e+3;)o=355*i,a=355*c,d=355*h,f=355*m,y=355*v,w=355*b,S=355*C,D=355*E,_=355*k,x=355*T,P=355*I,A=355*O,R=355*F,L=355*$,j=355*M,x+=(r^=n.charCodeAt(l++))<<8,P+=i<<8,A+=c<<8,R+=h<<8,L+=m<<8,j+=v<<8,r=65535&(u=355*r),i=65535&(o+=u>>>16),c=65535&(a+=o>>>16),h=65535&(d+=a>>>16),m=65535&(f+=d>>>16),v=65535&(y+=f>>>16),b=65535&(w+=y>>>16),C=65535&(S+=w>>>16),E=65535&(D+=S>>>16),k=65535&(_+=D>>>16),T=65535&(x+=_>>>16),I=65535&(P+=x>>>16),O=65535&(A+=P>>>16),F=65535&(R+=A>>>16),M=j+((L+=R>>>16)>>>16)&65535,$=65535&L;return g(s[M>>8]+s[255&M]+s[$>>8]+s[255&$]+s[F>>8]+s[255&F]+s[O>>8]+s[255&O]+s[I>>8]+s[255&I]+s[T>>8]+s[255&T]+s[k>>8]+s[255&k]+s[E>>8]+s[255&E]+s[C>>8]+s[255&C]+s[b>>8]+s[255&b]+s[v>>8]+s[255&v]+s[m>>8]+s[255&m]+s[h>>8]+s[255&h]+s[c>>8]+s[255&c]+s[i>>8]+s[255&i]+s[r>>8]+s[255&r],256)}function B(n){var l,e=n.length-3,t=p[256].offset,u=0,r=0|t[15],o=0,i=0|t[14],a=0,c=0|t[13],d=0,h=0|t[12],f=0,m=0|t[11],y=0,v=0|t[10],w=0,b=0|t[9],S=0,C=0|t[8],D=0,E=0|t[7],_=0,k=0|t[6],x=0,T=0|t[5],P=0,I=0|t[4],A=0,O=0|t[3],R=0,F=0|t[2],L=0,$=0|t[1],j=0,M=0|t[0];for(l=0;l<e;)o=355*i,a=355*c,d=355*h,f=355*m,y=355*v,w=355*b,S=355*C,D=355*E,_=355*k,x=355*T,P=355*I,A=355*O,R=355*F,L=355*$,j=355*M,x+=r<<8,P+=i<<8,A+=c<<8,R+=h<<8,L+=m<<8,r=65535&(u=355*r),M=(j+=v<<8)+((L+=(R+=(A+=(P+=(x+=(_+=(D+=(S+=(w+=(y+=(f+=(d+=(a+=(o+=u>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)&65535,o=355*(i=65535&o),a=355*(c=65535&a),d=355*(h=65535&d),f=355*(m=65535&f),y=355*(v=65535&y),w=355*(b=65535&w),S=355*(C=65535&S),D=355*(E=65535&D),_=355*(k=65535&_),x=355*(T=65535&x),P=355*(I=65535&P),A=355*(O=65535&A),R=355*(F=65535&R),L=355*($=65535&L),j=355*M,x+=(r^=n.charCodeAt(l++))<<8,P+=i<<8,A+=c<<8,R+=h<<8,L+=m<<8,r=65535&(u=355*r),M=(j+=v<<8)+((L+=(R+=(A+=(P+=(x+=(_+=(D+=(S+=(w+=(y+=(f+=(d+=(a+=(o+=u>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)&65535,o=355*(i=65535&o),a=355*(c=65535&a),d=355*(h=65535&d),f=355*(m=65535&f),y=355*(v=65535&y),w=355*(b=65535&w),S=355*(C=65535&S),D=355*(E=65535&D),_=355*(k=65535&_),x=355*(T=65535&x),P=355*(I=65535&P),A=355*(O=65535&A),R=355*(F=65535&R),L=355*($=65535&L),j=355*M,x+=(r^=n.charCodeAt(l++))<<8,P+=i<<8,A+=c<<8,R+=h<<8,L+=m<<8,r=65535&(u=355*r),M=(j+=v<<8)+((L+=(R+=(A+=(P+=(x+=(_+=(D+=(S+=(w+=(y+=(f+=(d+=(a+=(o+=u>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)&65535,o=355*(i=65535&o),a=355*(c=65535&a),d=355*(h=65535&d),f=355*(m=65535&f),y=355*(v=65535&y),w=355*(b=65535&w),S=355*(C=65535&S),D=355*(E=65535&D),_=355*(k=65535&_),x=355*(T=65535&x),P=355*(I=65535&P),A=355*(O=65535&A),R=355*(F=65535&R),L=355*($=65535&L),j=355*M,x+=(r^=n.charCodeAt(l++))<<8,P+=i<<8,A+=c<<8,R+=h<<8,L+=m<<8,j+=v<<8,r=65535&(u=355*r),i=65535&(o+=u>>>16),c=65535&(a+=o>>>16),h=65535&(d+=a>>>16),m=65535&(f+=d>>>16),v=65535&(y+=f>>>16),b=65535&(w+=y>>>16),C=65535&(S+=w>>>16),E=65535&(D+=S>>>16),k=65535&(_+=D>>>16),T=65535&(x+=_>>>16),I=65535&(P+=x>>>16),O=65535&(A+=P>>>16),F=65535&(R+=A>>>16),M=j+((L+=R>>>16)>>>16)&65535,$=65535&L,r^=n.charCodeAt(l++);for(;l<e+3;)o=355*i,a=355*c,d=355*h,f=355*m,y=355*v,w=355*b,S=355*C,D=355*E,_=355*k,x=355*T,P=355*I,A=355*O,R=355*F,L=355*$,j=355*M,x+=r<<8,P+=i<<8,A+=c<<8,R+=h<<8,L+=m<<8,j+=v<<8,r=65535&(u=355*r),i=65535&(o+=u>>>16),c=65535&(a+=o>>>16),h=65535&(d+=a>>>16),m=65535&(f+=d>>>16),v=65535&(y+=f>>>16),b=65535&(w+=y>>>16),C=65535&(S+=w>>>16),E=65535&(D+=S>>>16),k=65535&(_+=D>>>16),T=65535&(x+=_>>>16),I=65535&(P+=x>>>16),O=65535&(A+=P>>>16),F=65535&(R+=A>>>16),M=j+((L+=R>>>16)>>>16)&65535,$=65535&L,r^=n.charCodeAt(l++);return g(s[M>>8]+s[255&M]+s[$>>8]+s[255&$]+s[F>>8]+s[255&F]+s[O>>8]+s[255&O]+s[I>>8]+s[255&I]+s[T>>8]+s[255&T]+s[k>>8]+s[255&k]+s[E>>8]+s[255&E]+s[C>>8]+s[255&C]+s[b>>8]+s[255&b]+s[v>>8]+s[255&v]+s[m>>8]+s[255&m]+s[h>>8]+s[255&h]+s[c>>8]+s[255&c]+s[i>>8]+s[255&i]+s[r>>8]+s[255&r],256)}function H(n){var l,e,t=n.length,u=p[256].offset,r=0,o=0|u[15],i=0,a=0|u[14],c=0,d=0|u[13],h=0,f=0|u[12],m=0,y=0|u[11],v=0,w=0|u[10],b=0,S=0|u[9],C=0,D=0|u[8],E=0,_=0|u[7],k=0,x=0|u[6],T=0,P=0|u[5],I=0,A=0|u[4],O=0,R=0|u[3],F=0,L=0|u[2],$=0,j=0|u[1],M=0,N=0|u[0];for(e=0;e<t;e++)(l=n.charCodeAt(e))<128?o^=l:l<2048?(i=355*a,c=355*d,h=355*f,m=355*y,v=355*w,b=355*S,C=355*D,E=355*_,k=355*x,T=355*P,I=355*A,O=355*R,F=355*L,$=355*j,M=355*N,T+=(o^=l>>6|192)<<8,I+=a<<8,O+=d<<8,F+=f<<8,$+=y<<8,M+=w<<8,o=65535&(r=355*o),a=65535&(i+=r>>>16),d=65535&(c+=i>>>16),f=65535&(h+=c>>>16),y=65535&(m+=h>>>16),w=65535&(v+=m>>>16),S=65535&(b+=v>>>16),D=65535&(C+=b>>>16),_=65535&(E+=C>>>16),x=65535&(k+=E>>>16),P=65535&(T+=k>>>16),A=65535&(I+=T>>>16),R=65535&(O+=I>>>16),L=65535&(F+=O>>>16),N=M+(($+=F>>>16)>>>16)&65535,j=65535&$,o^=63&l|128):55296==(64512&l)&&e+1<t&&56320==(64512&n.charCodeAt(e+1))?(i=355*a,c=355*d,h=355*f,m=355*y,v=355*w,b=355*S,C=355*D,E=355*_,k=355*x,T=355*P,I=355*A,O=355*R,F=355*L,$=355*j,M=355*N,T+=(o^=(l=65536+((1023&l)<<10)+(1023&n.charCodeAt(++e)))>>18|240)<<8,I+=a<<8,O+=d<<8,F+=f<<8,$+=y<<8,o=65535&(r=355*o),N=(M+=w<<8)+(($+=(F+=(O+=(I+=(T+=(k+=(E+=(C+=(b+=(v+=(m+=(h+=(c+=(i+=r>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)&65535,i=355*(a=65535&i),c=355*(d=65535&c),h=355*(f=65535&h),m=355*(y=65535&m),v=355*(w=65535&v),b=355*(S=65535&b),C=355*(D=65535&C),E=355*(_=65535&E),k=355*(x=65535&k),T=355*(P=65535&T),I=355*(A=65535&I),O=355*(R=65535&O),F=355*(L=65535&F),$=355*(j=65535&$),M=355*N,T+=(o^=l>>12&63|128)<<8,I+=a<<8,O+=d<<8,F+=f<<8,$+=y<<8,o=65535&(r=355*o),N=(M+=w<<8)+(($+=(F+=(O+=(I+=(T+=(k+=(E+=(C+=(b+=(v+=(m+=(h+=(c+=(i+=r>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)&65535,i=355*(a=65535&i),c=355*(d=65535&c),h=355*(f=65535&h),m=355*(y=65535&m),v=355*(w=65535&v),b=355*(S=65535&b),C=355*(D=65535&C),E=355*(_=65535&E),k=355*(x=65535&k),T=355*(P=65535&T),I=355*(A=65535&I),O=355*(R=65535&O),F=355*(L=65535&F),$=355*(j=65535&$),M=355*N,T+=(o^=l>>6&63|128)<<8,I+=a<<8,O+=d<<8,F+=f<<8,$+=y<<8,M+=w<<8,o=65535&(r=355*o),a=65535&(i+=r>>>16),d=65535&(c+=i>>>16),f=65535&(h+=c>>>16),y=65535&(m+=h>>>16),w=65535&(v+=m>>>16),S=65535&(b+=v>>>16),D=65535&(C+=b>>>16),_=65535&(E+=C>>>16),x=65535&(k+=E>>>16),P=65535&(T+=k>>>16),A=65535&(I+=T>>>16),R=65535&(O+=I>>>16),L=65535&(F+=O>>>16),N=M+(($+=F>>>16)>>>16)&65535,j=65535&$,o^=63&l|128):(i=355*a,c=355*d,h=355*f,m=355*y,v=355*w,b=355*S,C=355*D,E=355*_,k=355*x,T=355*P,I=355*A,O=355*R,F=355*L,$=355*j,M=355*N,T+=(o^=l>>12|224)<<8,I+=a<<8,O+=d<<8,F+=f<<8,$+=y<<8,o=65535&(r=355*o),N=(M+=w<<8)+(($+=(F+=(O+=(I+=(T+=(k+=(E+=(C+=(b+=(v+=(m+=(h+=(c+=(i+=r>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)&65535,i=355*(a=65535&i),c=355*(d=65535&c),h=355*(f=65535&h),m=355*(y=65535&m),v=355*(w=65535&v),b=355*(S=65535&b),C=355*(D=65535&C),E=355*(_=65535&E),k=355*(x=65535&k),T=355*(P=65535&T),I=355*(A=65535&I),O=355*(R=65535&O),F=355*(L=65535&F),$=355*(j=65535&$),M=355*N,T+=(o^=l>>6&63|128)<<8,I+=a<<8,O+=d<<8,F+=f<<8,$+=y<<8,M+=w<<8,o=65535&(r=355*o),a=65535&(i+=r>>>16),d=65535&(c+=i>>>16),f=65535&(h+=c>>>16),y=65535&(m+=h>>>16),w=65535&(v+=m>>>16),S=65535&(b+=v>>>16),D=65535&(C+=b>>>16),_=65535&(E+=C>>>16),x=65535&(k+=E>>>16),P=65535&(T+=k>>>16),A=65535&(I+=T>>>16),R=65535&(O+=I>>>16),L=65535&(F+=O>>>16),N=M+(($+=F>>>16)>>>16)&65535,j=65535&$,o^=63&l|128),i=355*a,c=355*d,h=355*f,m=355*y,v=355*w,b=355*S,C=355*D,E=355*_,k=355*x,T=355*P,I=355*A,O=355*R,F=355*L,$=355*j,M=355*N,T+=o<<8,I+=a<<8,O+=d<<8,F+=f<<8,$+=y<<8,M+=w<<8,o=65535&(r=355*o),a=65535&(i+=r>>>16),d=65535&(c+=i>>>16),f=65535&(h+=c>>>16),y=65535&(m+=h>>>16),w=65535&(v+=m>>>16),S=65535&(b+=v>>>16),D=65535&(C+=b>>>16),_=65535&(E+=C>>>16),x=65535&(k+=E>>>16),P=65535&(T+=k>>>16),A=65535&(I+=T>>>16),R=65535&(O+=I>>>16),L=65535&(F+=O>>>16),N=M+(($+=F>>>16)>>>16)&65535,j=65535&$;return g(s[N>>8]+s[255&N]+s[j>>8]+s[255&j]+s[L>>8]+s[255&L]+s[R>>8]+s[255&R]+s[A>>8]+s[255&A]+s[P>>8]+s[255&P]+s[x>>8]+s[255&x]+s[_>>8]+s[255&_]+s[D>>8]+s[255&D]+s[S>>8]+s[255&S]+s[w>>8]+s[255&w]+s[y>>8]+s[255&y]+s[f>>8]+s[255&f]+s[d>>8]+s[255&d]+s[a>>8]+s[255&a]+s[o>>8]+s[255&o],256)}function U(n){var l,e,t=n.length,u=p[256].offset,r=0,o=0|u[15],i=0,a=0|u[14],c=0,d=0|u[13],h=0,f=0|u[12],m=0,y=0|u[11],v=0,w=0|u[10],b=0,S=0|u[9],C=0,D=0|u[8],E=0,_=0|u[7],k=0,x=0|u[6],T=0,P=0|u[5],I=0,A=0|u[4],O=0,R=0|u[3],F=0,L=0|u[2],$=0,j=0|u[1],M=0,N=0|u[0];for(e=0;e<t;e++)i=355*a,c=355*d,h=355*f,m=355*y,v=355*w,b=355*S,C=355*D,E=355*_,k=355*x,T=355*P,I=355*A,O=355*R,F=355*L,$=355*j,M=355*N,T+=o<<8,I+=a<<8,O+=d<<8,F+=f<<8,$+=y<<8,M+=w<<8,o=65535&(r=355*o),a=65535&(i+=r>>>16),d=65535&(c+=i>>>16),f=65535&(h+=c>>>16),y=65535&(m+=h>>>16),w=65535&(v+=m>>>16),S=65535&(b+=v>>>16),D=65535&(C+=b>>>16),_=65535&(E+=C>>>16),x=65535&(k+=E>>>16),P=65535&(T+=k>>>16),A=65535&(I+=T>>>16),R=65535&(O+=I>>>16),L=65535&(F+=O>>>16),N=M+(($+=F>>>16)>>>16)&65535,j=65535&$,(l=n.charCodeAt(e))<128?o^=l:l<2048?(i=355*a,c=355*d,h=355*f,m=355*y,v=355*w,b=355*S,C=355*D,E=355*_,k=355*x,T=355*P,I=355*A,O=355*R,F=355*L,$=355*j,M=355*N,T+=(o^=l>>6|192)<<8,I+=a<<8,O+=d<<8,F+=f<<8,$+=y<<8,M+=w<<8,o=65535&(r=355*o),a=65535&(i+=r>>>16),d=65535&(c+=i>>>16),f=65535&(h+=c>>>16),y=65535&(m+=h>>>16),w=65535&(v+=m>>>16),S=65535&(b+=v>>>16),D=65535&(C+=b>>>16),_=65535&(E+=C>>>16),x=65535&(k+=E>>>16),P=65535&(T+=k>>>16),A=65535&(I+=T>>>16),R=65535&(O+=I>>>16),L=65535&(F+=O>>>16),N=M+(($+=F>>>16)>>>16)&65535,j=65535&$,o^=63&l|128):55296==(64512&l)&&e+1<t&&56320==(64512&n.charCodeAt(e+1))?(i=355*a,c=355*d,h=355*f,m=355*y,v=355*w,b=355*S,C=355*D,E=355*_,k=355*x,T=355*P,I=355*A,O=355*R,F=355*L,$=355*j,M=355*N,T+=(o^=(l=65536+((1023&l)<<10)+(1023&n.charCodeAt(++e)))>>18|240)<<8,I+=a<<8,O+=d<<8,F+=f<<8,$+=y<<8,o=65535&(r=355*o),N=(M+=w<<8)+(($+=(F+=(O+=(I+=(T+=(k+=(E+=(C+=(b+=(v+=(m+=(h+=(c+=(i+=r>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)&65535,i=355*(a=65535&i),c=355*(d=65535&c),h=355*(f=65535&h),m=355*(y=65535&m),v=355*(w=65535&v),b=355*(S=65535&b),C=355*(D=65535&C),E=355*(_=65535&E),k=355*(x=65535&k),T=355*(P=65535&T),I=355*(A=65535&I),O=355*(R=65535&O),F=355*(L=65535&F),$=355*(j=65535&$),M=355*N,T+=(o^=l>>12&63|128)<<8,I+=a<<8,O+=d<<8,F+=f<<8,$+=y<<8,o=65535&(r=355*o),N=(M+=w<<8)+(($+=(F+=(O+=(I+=(T+=(k+=(E+=(C+=(b+=(v+=(m+=(h+=(c+=(i+=r>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)&65535,i=355*(a=65535&i),c=355*(d=65535&c),h=355*(f=65535&h),m=355*(y=65535&m),v=355*(w=65535&v),b=355*(S=65535&b),C=355*(D=65535&C),E=355*(_=65535&E),k=355*(x=65535&k),T=355*(P=65535&T),I=355*(A=65535&I),O=355*(R=65535&O),F=355*(L=65535&F),$=355*(j=65535&$),M=355*N,T+=(o^=l>>6&63|128)<<8,I+=a<<8,O+=d<<8,F+=f<<8,$+=y<<8,M+=w<<8,o=65535&(r=355*o),a=65535&(i+=r>>>16),d=65535&(c+=i>>>16),f=65535&(h+=c>>>16),y=65535&(m+=h>>>16),w=65535&(v+=m>>>16),S=65535&(b+=v>>>16),D=65535&(C+=b>>>16),_=65535&(E+=C>>>16),x=65535&(k+=E>>>16),P=65535&(T+=k>>>16),A=65535&(I+=T>>>16),R=65535&(O+=I>>>16),L=65535&(F+=O>>>16),N=M+(($+=F>>>16)>>>16)&65535,j=65535&$,o^=63&l|128):(i=355*a,c=355*d,h=355*f,m=355*y,v=355*w,b=355*S,C=355*D,E=355*_,k=355*x,T=355*P,I=355*A,O=355*R,F=355*L,$=355*j,M=355*N,T+=(o^=l>>12|224)<<8,I+=a<<8,O+=d<<8,F+=f<<8,$+=y<<8,o=65535&(r=355*o),N=(M+=w<<8)+(($+=(F+=(O+=(I+=(T+=(k+=(E+=(C+=(b+=(v+=(m+=(h+=(c+=(i+=r>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)&65535,i=355*(a=65535&i),c=355*(d=65535&c),h=355*(f=65535&h),m=355*(y=65535&m),v=355*(w=65535&v),b=355*(S=65535&b),C=355*(D=65535&C),E=355*(_=65535&E),k=355*(x=65535&k),T=355*(P=65535&T),I=355*(A=65535&I),O=355*(R=65535&O),F=355*(L=65535&F),$=355*(j=65535&$),M=355*N,T+=(o^=l>>6&63|128)<<8,I+=a<<8,O+=d<<8,F+=f<<8,$+=y<<8,M+=w<<8,o=65535&(r=355*o),a=65535&(i+=r>>>16),d=65535&(c+=i>>>16),f=65535&(h+=c>>>16),y=65535&(m+=h>>>16),w=65535&(v+=m>>>16),S=65535&(b+=v>>>16),D=65535&(C+=b>>>16),_=65535&(E+=C>>>16),x=65535&(k+=E>>>16),P=65535&(T+=k>>>16),A=65535&(I+=T>>>16),R=65535&(O+=I>>>16),L=65535&(F+=O>>>16),N=M+(($+=F>>>16)>>>16)&65535,j=65535&$,o^=63&l|128);return g(s[N>>8]+s[255&N]+s[j>>8]+s[255&j]+s[L>>8]+s[255&L]+s[R>>8]+s[255&R]+s[A>>8]+s[255&A]+s[P>>8]+s[255&P]+s[x>>8]+s[255&x]+s[_>>8]+s[255&_]+s[D>>8]+s[255&D]+s[S>>8]+s[255&S]+s[w>>8]+s[255&w]+s[y>>8]+s[255&y]+s[f>>8]+s[255&f]+s[d>>8]+s[255&d]+s[a>>8]+s[255&a]+s[o>>8]+s[255&o],256)}function q(n){var l,e=n.length-3,t=p[512].offset,u=0,r=0|t[31],o=0,i=0|t[30],a=0,c=0|t[29],d=0,h=0|t[28],f=0,m=0|t[27],y=0,v=0|t[26],w=0,b=0|t[25],S=0,C=0|t[24],D=0,E=0|t[23],_=0,k=0|t[22],x=0,T=0|t[21],P=0,I=0|t[20],A=0,O=0|t[19],R=0,F=0|t[18],L=0,$=0|t[17],j=0,M=0|t[16],N=0,B=0|t[15],H=0,U=0|t[14],q=0,W=0|t[13],z=0,V=0|t[12],G=0,K=0|t[11],X=0,J=0|t[10],Z=0,Y=0|t[9],Q=0,nn=0|t[8],ln=0,en=0|t[7],tn=0,un=0|t[6],rn=0,on=0|t[5],sn=0,an=0|t[4],cn=0,dn=0|t[3],hn=0,fn=0|t[2],pn=0,mn=0|t[1],gn=0,yn=0|t[0];for(l=0;l<e;)o=343*i,a=343*c,d=343*h,f=343*m,y=343*v,w=343*b,S=343*C,D=343*E,_=343*k,x=343*T,P=343*I,A=343*O,R=343*F,L=343*$,j=343*M,N=343*B,H=343*U,q=343*W,z=343*V,G=343*K,X=343*J,Z=343*Y,Q=343*nn,ln=343*en,tn=343*un,rn=343*on,sn=343*an,cn=343*dn,hn=343*fn,pn=343*mn,gn=343*yn,X+=(r^=n.charCodeAt(l++))<<8,Z+=i<<8,Q+=c<<8,ln+=h<<8,tn+=m<<8,rn+=v<<8,sn+=b<<8,cn+=C<<8,hn+=E<<8,pn+=k<<8,r=65535&(u=343*r),yn=(gn+=T<<8)+((pn+=(hn+=(cn+=(sn+=(rn+=(tn+=(ln+=(Q+=(Z+=(X+=(G+=(z+=(q+=(H+=(N+=(j+=(L+=(R+=(A+=(P+=(x+=(_+=(D+=(S+=(w+=(y+=(f+=(d+=(a+=(o+=u>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)&65535,o=343*(i=65535&o),a=343*(c=65535&a),d=343*(h=65535&d),f=343*(m=65535&f),y=343*(v=65535&y),w=343*(b=65535&w),S=343*(C=65535&S),D=343*(E=65535&D),_=343*(k=65535&_),x=343*(T=65535&x),P=343*(I=65535&P),A=343*(O=65535&A),R=343*(F=65535&R),L=343*($=65535&L),j=343*(M=65535&j),N=343*(B=65535&N),H=343*(U=65535&H),q=343*(W=65535&q),z=343*(V=65535&z),G=343*(K=65535&G),X=343*(J=65535&X),Z=343*(Y=65535&Z),Q=343*(nn=65535&Q),ln=343*(en=65535&ln),tn=343*(un=65535&tn),rn=343*(on=65535&rn),sn=343*(an=65535&sn),cn=343*(dn=65535&cn),hn=343*(fn=65535&hn),pn=343*(mn=65535&pn),gn=343*yn,X+=(r^=n.charCodeAt(l++))<<8,Z+=i<<8,Q+=c<<8,ln+=h<<8,tn+=m<<8,rn+=v<<8,sn+=b<<8,cn+=C<<8,hn+=E<<8,pn+=k<<8,r=65535&(u=343*r),yn=(gn+=T<<8)+((pn+=(hn+=(cn+=(sn+=(rn+=(tn+=(ln+=(Q+=(Z+=(X+=(G+=(z+=(q+=(H+=(N+=(j+=(L+=(R+=(A+=(P+=(x+=(_+=(D+=(S+=(w+=(y+=(f+=(d+=(a+=(o+=u>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)&65535,o=343*(i=65535&o),a=343*(c=65535&a),d=343*(h=65535&d),f=343*(m=65535&f),y=343*(v=65535&y),w=343*(b=65535&w),S=343*(C=65535&S),D=343*(E=65535&D),_=343*(k=65535&_),x=343*(T=65535&x),P=343*(I=65535&P),A=343*(O=65535&A),R=343*(F=65535&R),L=343*($=65535&L),j=343*(M=65535&j),N=343*(B=65535&N),H=343*(U=65535&H),q=343*(W=65535&q),z=343*(V=65535&z),G=343*(K=65535&G),X=343*(J=65535&X),Z=343*(Y=65535&Z),Q=343*(nn=65535&Q),ln=343*(en=65535&ln),tn=343*(un=65535&tn),rn=343*(on=65535&rn),sn=343*(an=65535&sn),cn=343*(dn=65535&cn),hn=343*(fn=65535&hn),pn=343*(mn=65535&pn),gn=343*yn,X+=(r^=n.charCodeAt(l++))<<8,Z+=i<<8,Q+=c<<8,ln+=h<<8,tn+=m<<8,rn+=v<<8,sn+=b<<8,cn+=C<<8,hn+=E<<8,pn+=k<<8,r=65535&(u=343*r),yn=(gn+=T<<8)+((pn+=(hn+=(cn+=(sn+=(rn+=(tn+=(ln+=(Q+=(Z+=(X+=(G+=(z+=(q+=(H+=(N+=(j+=(L+=(R+=(A+=(P+=(x+=(_+=(D+=(S+=(w+=(y+=(f+=(d+=(a+=(o+=u>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)&65535,o=343*(i=65535&o),a=343*(c=65535&a),d=343*(h=65535&d),f=343*(m=65535&f),y=343*(v=65535&y),w=343*(b=65535&w),S=343*(C=65535&S),D=343*(E=65535&D),_=343*(k=65535&_),x=343*(T=65535&x),P=343*(I=65535&P),A=343*(O=65535&A),R=343*(F=65535&R),L=343*($=65535&L),j=343*(M=65535&j),N=343*(B=65535&N),H=343*(U=65535&H),q=343*(W=65535&q),z=343*(V=65535&z),G=343*(K=65535&G),X=343*(J=65535&X),Z=343*(Y=65535&Z),Q=343*(nn=65535&Q),ln=343*(en=65535&ln),tn=343*(un=65535&tn),rn=343*(on=65535&rn),sn=343*(an=65535&sn),cn=343*(dn=65535&cn),hn=343*(fn=65535&hn),pn=343*(mn=65535&pn),gn=343*yn,X+=(r^=n.charCodeAt(l++))<<8,Z+=i<<8,Q+=c<<8,ln+=h<<8,tn+=m<<8,rn+=v<<8,sn+=b<<8,cn+=C<<8,hn+=E<<8,pn+=k<<8,gn+=T<<8,r=65535&(u=343*r),i=65535&(o+=u>>>16),c=65535&(a+=o>>>16),h=65535&(d+=a>>>16),m=65535&(f+=d>>>16),v=65535&(y+=f>>>16),b=65535&(w+=y>>>16),C=65535&(S+=w>>>16),E=65535&(D+=S>>>16),k=65535&(_+=D>>>16),T=65535&(x+=_>>>16),I=65535&(P+=x>>>16),O=65535&(A+=P>>>16),F=65535&(R+=A>>>16),$=65535&(L+=R>>>16),M=65535&(j+=L>>>16),B=65535&(N+=j>>>16),U=65535&(H+=N>>>16),W=65535&(q+=H>>>16),V=65535&(z+=q>>>16),K=65535&(G+=z>>>16),J=65535&(X+=G>>>16),Y=65535&(Z+=X>>>16),nn=65535&(Q+=Z>>>16),en=65535&(ln+=Q>>>16),un=65535&(tn+=ln>>>16),on=65535&(rn+=tn>>>16),an=65535&(sn+=rn>>>16),dn=65535&(cn+=sn>>>16),fn=65535&(hn+=cn>>>16),yn=gn+((pn+=hn>>>16)>>>16)&65535,mn=65535&pn;for(;l<e+3;)o=343*i,a=343*c,d=343*h,f=343*m,y=343*v,w=343*b,S=343*C,D=343*E,_=343*k,x=343*T,P=343*I,A=343*O,R=343*F,L=343*$,j=343*M,N=343*B,H=343*U,q=343*W,z=343*V,G=343*K,X=343*J,Z=343*Y,Q=343*nn,ln=343*en,tn=343*un,rn=343*on,sn=343*an,cn=343*dn,hn=343*fn,pn=343*mn,gn=343*yn,X+=(r^=n.charCodeAt(l++))<<8,Z+=i<<8,Q+=c<<8,ln+=h<<8,tn+=m<<8,rn+=v<<8,sn+=b<<8,cn+=C<<8,hn+=E<<8,pn+=k<<8,gn+=T<<8,r=65535&(u=343*r),i=65535&(o+=u>>>16),c=65535&(a+=o>>>16),h=65535&(d+=a>>>16),m=65535&(f+=d>>>16),v=65535&(y+=f>>>16),b=65535&(w+=y>>>16),C=65535&(S+=w>>>16),E=65535&(D+=S>>>16),k=65535&(_+=D>>>16),T=65535&(x+=_>>>16),I=65535&(P+=x>>>16),O=65535&(A+=P>>>16),F=65535&(R+=A>>>16),$=65535&(L+=R>>>16),M=65535&(j+=L>>>16),B=65535&(N+=j>>>16),U=65535&(H+=N>>>16),W=65535&(q+=H>>>16),V=65535&(z+=q>>>16),K=65535&(G+=z>>>16),J=65535&(X+=G>>>16),Y=65535&(Z+=X>>>16),nn=65535&(Q+=Z>>>16),en=65535&(ln+=Q>>>16),un=65535&(tn+=ln>>>16),on=65535&(rn+=tn>>>16),an=65535&(sn+=rn>>>16),dn=65535&(cn+=sn>>>16),fn=65535&(hn+=cn>>>16),yn=gn+((pn+=hn>>>16)>>>16)&65535,mn=65535&pn;return g(s[yn>>8]+s[255&yn]+s[mn>>8]+s[255&mn]+s[fn>>8]+s[255&fn]+s[dn>>8]+s[255&dn]+s[an>>8]+s[255&an]+s[on>>8]+s[255&on]+s[un>>8]+s[255&un]+s[en>>8]+s[255&en]+s[nn>>8]+s[255&nn]+s[Y>>8]+s[255&Y]+s[J>>8]+s[255&J]+s[K>>8]+s[255&K]+s[V>>8]+s[255&V]+s[W>>8]+s[255&W]+s[U>>8]+s[255&U]+s[B>>8]+s[255&B]+s[M>>8]+s[255&M]+s[$>>8]+s[255&$]+s[F>>8]+s[255&F]+s[O>>8]+s[255&O]+s[I>>8]+s[255&I]+s[T>>8]+s[255&T]+s[k>>8]+s[255&k]+s[E>>8]+s[255&E]+s[C>>8]+s[255&C]+s[b>>8]+s[255&b]+s[v>>8]+s[255&v]+s[m>>8]+s[255&m]+s[h>>8]+s[255&h]+s[c>>8]+s[255&c]+s[i>>8]+s[255&i]+s[r>>8]+s[255&r],512)}function W(n){var l,e=n.length-3,t=p[512].offset,u=0,r=0|t[31],o=0,i=0|t[30],a=0,c=0|t[29],d=0,h=0|t[28],f=0,m=0|t[27],y=0,v=0|t[26],w=0,b=0|t[25],S=0,C=0|t[24],D=0,E=0|t[23],_=0,k=0|t[22],x=0,T=0|t[21],P=0,I=0|t[20],A=0,O=0|t[19],R=0,F=0|t[18],L=0,$=0|t[17],j=0,M=0|t[16],N=0,B=0|t[15],H=0,U=0|t[14],q=0,W=0|t[13],z=0,V=0|t[12],G=0,K=0|t[11],X=0,J=0|t[10],Z=0,Y=0|t[9],Q=0,nn=0|t[8],ln=0,en=0|t[7],tn=0,un=0|t[6],rn=0,on=0|t[5],sn=0,an=0|t[4],cn=0,dn=0|t[3],hn=0,fn=0|t[2],pn=0,mn=0|t[1],gn=0,yn=0|t[0];for(l=0;l<e;)o=343*i,a=343*c,d=343*h,f=343*m,y=343*v,w=343*b,S=343*C,D=343*E,_=343*k,x=343*T,P=343*I,A=343*O,R=343*F,L=343*$,j=343*M,N=343*B,H=343*U,q=343*W,z=343*V,G=343*K,X=343*J,Z=343*Y,Q=343*nn,ln=343*en,tn=343*un,rn=343*on,sn=343*an,cn=343*dn,hn=343*fn,pn=343*mn,gn=343*yn,X+=r<<8,Z+=i<<8,Q+=c<<8,ln+=h<<8,tn+=m<<8,rn+=v<<8,sn+=b<<8,cn+=C<<8,hn+=E<<8,pn+=k<<8,r=65535&(u=343*r),yn=(gn+=T<<8)+((pn+=(hn+=(cn+=(sn+=(rn+=(tn+=(ln+=(Q+=(Z+=(X+=(G+=(z+=(q+=(H+=(N+=(j+=(L+=(R+=(A+=(P+=(x+=(_+=(D+=(S+=(w+=(y+=(f+=(d+=(a+=(o+=u>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)&65535,o=343*(i=65535&o),a=343*(c=65535&a),d=343*(h=65535&d),f=343*(m=65535&f),y=343*(v=65535&y),w=343*(b=65535&w),S=343*(C=65535&S),D=343*(E=65535&D),_=343*(k=65535&_),x=343*(T=65535&x),P=343*(I=65535&P),A=343*(O=65535&A),R=343*(F=65535&R),L=343*($=65535&L),j=343*(M=65535&j),N=343*(B=65535&N),H=343*(U=65535&H),q=343*(W=65535&q),z=343*(V=65535&z),G=343*(K=65535&G),X=343*(J=65535&X),Z=343*(Y=65535&Z),Q=343*(nn=65535&Q),ln=343*(en=65535&ln),tn=343*(un=65535&tn),rn=343*(on=65535&rn),sn=343*(an=65535&sn),cn=343*(dn=65535&cn),hn=343*(fn=65535&hn),pn=343*(mn=65535&pn),gn=343*yn,X+=(r^=n.charCodeAt(l++))<<8,Z+=i<<8,Q+=c<<8,ln+=h<<8,tn+=m<<8,rn+=v<<8,sn+=b<<8,cn+=C<<8,hn+=E<<8,pn+=k<<8,r=65535&(u=343*r),yn=(gn+=T<<8)+((pn+=(hn+=(cn+=(sn+=(rn+=(tn+=(ln+=(Q+=(Z+=(X+=(G+=(z+=(q+=(H+=(N+=(j+=(L+=(R+=(A+=(P+=(x+=(_+=(D+=(S+=(w+=(y+=(f+=(d+=(a+=(o+=u>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)&65535,o=343*(i=65535&o),a=343*(c=65535&a),d=343*(h=65535&d),f=343*(m=65535&f),y=343*(v=65535&y),w=343*(b=65535&w),S=343*(C=65535&S),D=343*(E=65535&D),_=343*(k=65535&_),x=343*(T=65535&x),P=343*(I=65535&P),A=343*(O=65535&A),R=343*(F=65535&R),L=343*($=65535&L),j=343*(M=65535&j),N=343*(B=65535&N),H=343*(U=65535&H),q=343*(W=65535&q),z=343*(V=65535&z),G=343*(K=65535&G),X=343*(J=65535&X),Z=343*(Y=65535&Z),Q=343*(nn=65535&Q),ln=343*(en=65535&ln),tn=343*(un=65535&tn),rn=343*(on=65535&rn),sn=343*(an=65535&sn),cn=343*(dn=65535&cn),hn=343*(fn=65535&hn),pn=343*(mn=65535&pn),gn=343*yn,X+=(r^=n.charCodeAt(l++))<<8,Z+=i<<8,Q+=c<<8,ln+=h<<8,tn+=m<<8,rn+=v<<8,sn+=b<<8,cn+=C<<8,hn+=E<<8,pn+=k<<8,r=65535&(u=343*r),yn=(gn+=T<<8)+((pn+=(hn+=(cn+=(sn+=(rn+=(tn+=(ln+=(Q+=(Z+=(X+=(G+=(z+=(q+=(H+=(N+=(j+=(L+=(R+=(A+=(P+=(x+=(_+=(D+=(S+=(w+=(y+=(f+=(d+=(a+=(o+=u>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)&65535,o=343*(i=65535&o),a=343*(c=65535&a),d=343*(h=65535&d),f=343*(m=65535&f),y=343*(v=65535&y),w=343*(b=65535&w),S=343*(C=65535&S),D=343*(E=65535&D),_=343*(k=65535&_),x=343*(T=65535&x),P=343*(I=65535&P),A=343*(O=65535&A),R=343*(F=65535&R),L=343*($=65535&L),j=343*(M=65535&j),N=343*(B=65535&N),H=343*(U=65535&H),q=343*(W=65535&q),z=343*(V=65535&z),G=343*(K=65535&G),X=343*(J=65535&X),Z=343*(Y=65535&Z),Q=343*(nn=65535&Q),ln=343*(en=65535&ln),tn=343*(un=65535&tn),rn=343*(on=65535&rn),sn=343*(an=65535&sn),cn=343*(dn=65535&cn),hn=343*(fn=65535&hn),pn=343*(mn=65535&pn),gn=343*yn,X+=(r^=n.charCodeAt(l++))<<8,Z+=i<<8,Q+=c<<8,ln+=h<<8,tn+=m<<8,rn+=v<<8,sn+=b<<8,cn+=C<<8,hn+=E<<8,pn+=k<<8,gn+=T<<8,r=65535&(u=343*r),i=65535&(o+=u>>>16),c=65535&(a+=o>>>16),h=65535&(d+=a>>>16),m=65535&(f+=d>>>16),v=65535&(y+=f>>>16),b=65535&(w+=y>>>16),C=65535&(S+=w>>>16),E=65535&(D+=S>>>16),k=65535&(_+=D>>>16),T=65535&(x+=_>>>16),I=65535&(P+=x>>>16),O=65535&(A+=P>>>16),F=65535&(R+=A>>>16),$=65535&(L+=R>>>16),M=65535&(j+=L>>>16),B=65535&(N+=j>>>16),U=65535&(H+=N>>>16),W=65535&(q+=H>>>16),V=65535&(z+=q>>>16),K=65535&(G+=z>>>16),J=65535&(X+=G>>>16),Y=65535&(Z+=X>>>16),nn=65535&(Q+=Z>>>16),en=65535&(ln+=Q>>>16),un=65535&(tn+=ln>>>16),on=65535&(rn+=tn>>>16),an=65535&(sn+=rn>>>16),dn=65535&(cn+=sn>>>16),fn=65535&(hn+=cn>>>16),yn=gn+((pn+=hn>>>16)>>>16)&65535,mn=65535&pn,r^=n.charCodeAt(l++);for(;l<e+3;)o=343*i,a=343*c,d=343*h,f=343*m,y=343*v,w=343*b,S=343*C,D=343*E,_=343*k,x=343*T,P=343*I,A=343*O,R=343*F,L=343*$,j=343*M,N=343*B,H=343*U,q=343*W,z=343*V,G=343*K,X=343*J,Z=343*Y,Q=343*nn,ln=343*en,tn=343*un,rn=343*on,sn=343*an,cn=343*dn,hn=343*fn,pn=343*mn,gn=343*yn,X+=r<<8,Z+=i<<8,Q+=c<<8,ln+=h<<8,tn+=m<<8,rn+=v<<8,sn+=b<<8,cn+=C<<8,hn+=E<<8,pn+=k<<8,gn+=T<<8,r=65535&(u=343*r),i=65535&(o+=u>>>16),c=65535&(a+=o>>>16),h=65535&(d+=a>>>16),m=65535&(f+=d>>>16),v=65535&(y+=f>>>16),b=65535&(w+=y>>>16),C=65535&(S+=w>>>16),E=65535&(D+=S>>>16),k=65535&(_+=D>>>16),T=65535&(x+=_>>>16),I=65535&(P+=x>>>16),O=65535&(A+=P>>>16),F=65535&(R+=A>>>16),$=65535&(L+=R>>>16),M=65535&(j+=L>>>16),B=65535&(N+=j>>>16),U=65535&(H+=N>>>16),W=65535&(q+=H>>>16),V=65535&(z+=q>>>16),K=65535&(G+=z>>>16),J=65535&(X+=G>>>16),Y=65535&(Z+=X>>>16),nn=65535&(Q+=Z>>>16),en=65535&(ln+=Q>>>16),un=65535&(tn+=ln>>>16),on=65535&(rn+=tn>>>16),an=65535&(sn+=rn>>>16),dn=65535&(cn+=sn>>>16),fn=65535&(hn+=cn>>>16),yn=gn+((pn+=hn>>>16)>>>16)&65535,mn=65535&pn,r^=n.charCodeAt(l++);return g(s[yn>>8]+s[255&yn]+s[mn>>8]+s[255&mn]+s[fn>>8]+s[255&fn]+s[dn>>8]+s[255&dn]+s[an>>8]+s[255&an]+s[on>>8]+s[255&on]+s[un>>8]+s[255&un]+s[en>>8]+s[255&en]+s[nn>>8]+s[255&nn]+s[Y>>8]+s[255&Y]+s[J>>8]+s[255&J]+s[K>>8]+s[255&K]+s[V>>8]+s[255&V]+s[W>>8]+s[255&W]+s[U>>8]+s[255&U]+s[B>>8]+s[255&B]+s[M>>8]+s[255&M]+s[$>>8]+s[255&$]+s[F>>8]+s[255&F]+s[O>>8]+s[255&O]+s[I>>8]+s[255&I]+s[T>>8]+s[255&T]+s[k>>8]+s[255&k]+s[E>>8]+s[255&E]+s[C>>8]+s[255&C]+s[b>>8]+s[255&b]+s[v>>8]+s[255&v]+s[m>>8]+s[255&m]+s[h>>8]+s[255&h]+s[c>>8]+s[255&c]+s[i>>8]+s[255&i]+s[r>>8]+s[255&r],512)}function z(n){var l,e,t=n.length,u=p[512].offset,r=0,o=0|u[31],i=0,a=0|u[30],c=0,d=0|u[29],h=0,f=0|u[28],m=0,y=0|u[27],v=0,w=0|u[26],b=0,S=0|u[25],C=0,D=0|u[24],E=0,_=0|u[23],k=0,x=0|u[22],T=0,P=0|u[21],I=0,A=0|u[20],O=0,R=0|u[19],F=0,L=0|u[18],$=0,j=0|u[17],M=0,N=0|u[16],B=0,H=0|u[15],U=0,q=0|u[14],W=0,z=0|u[13],V=0,G=0|u[12],K=0,X=0|u[11],J=0,Z=0|u[10],Y=0,Q=0|u[9],nn=0,ln=0|u[8],en=0,tn=0|u[7],un=0,rn=0|u[6],on=0,sn=0|u[5],an=0,cn=0|u[4],dn=0,hn=0|u[3],fn=0,pn=0|u[2],mn=0,gn=0|u[1],yn=0,vn=0|u[0];for(e=0;e<t;e++)(l=n.charCodeAt(e))<128?o^=l:l<2048?(i=343*a,c=343*d,h=343*f,m=343*y,v=343*w,b=343*S,C=343*D,E=343*_,k=343*x,T=343*P,I=343*A,O=343*R,F=343*L,$=343*j,M=343*N,B=343*H,U=343*q,W=343*z,V=343*G,K=343*X,J=343*Z,Y=343*Q,nn=343*ln,en=343*tn,un=343*rn,on=343*sn,an=343*cn,dn=343*hn,fn=343*pn,mn=343*gn,yn=343*vn,J+=(o^=l>>6|192)<<8,Y+=a<<8,nn+=d<<8,en+=f<<8,un+=y<<8,on+=w<<8,an+=S<<8,dn+=D<<8,fn+=_<<8,mn+=x<<8,yn+=P<<8,o=65535&(r=343*o),a=65535&(i+=r>>>16),d=65535&(c+=i>>>16),f=65535&(h+=c>>>16),y=65535&(m+=h>>>16),w=65535&(v+=m>>>16),S=65535&(b+=v>>>16),D=65535&(C+=b>>>16),_=65535&(E+=C>>>16),x=65535&(k+=E>>>16),P=65535&(T+=k>>>16),A=65535&(I+=T>>>16),R=65535&(O+=I>>>16),L=65535&(F+=O>>>16),j=65535&($+=F>>>16),N=65535&(M+=$>>>16),H=65535&(B+=M>>>16),q=65535&(U+=B>>>16),z=65535&(W+=U>>>16),G=65535&(V+=W>>>16),X=65535&(K+=V>>>16),Z=65535&(J+=K>>>16),Q=65535&(Y+=J>>>16),ln=65535&(nn+=Y>>>16),tn=65535&(en+=nn>>>16),rn=65535&(un+=en>>>16),sn=65535&(on+=un>>>16),cn=65535&(an+=on>>>16),hn=65535&(dn+=an>>>16),pn=65535&(fn+=dn>>>16),vn=yn+((mn+=fn>>>16)>>>16)&65535,gn=65535&mn,o^=63&l|128):55296==(64512&l)&&e+1<t&&56320==(64512&n.charCodeAt(e+1))?(i=343*a,c=343*d,h=343*f,m=343*y,v=343*w,b=343*S,C=343*D,E=343*_,k=343*x,T=343*P,I=343*A,O=343*R,F=343*L,$=343*j,M=343*N,B=343*H,U=343*q,W=343*z,V=343*G,K=343*X,J=343*Z,Y=343*Q,nn=343*ln,en=343*tn,un=343*rn,on=343*sn,an=343*cn,dn=343*hn,fn=343*pn,mn=343*gn,yn=343*vn,J+=(o^=(l=65536+((1023&l)<<10)+(1023&n.charCodeAt(++e)))>>18|240)<<8,Y+=a<<8,nn+=d<<8,en+=f<<8,un+=y<<8,on+=w<<8,an+=S<<8,dn+=D<<8,fn+=_<<8,mn+=x<<8,o=65535&(r=343*o),vn=(yn+=P<<8)+((mn+=(fn+=(dn+=(an+=(on+=(un+=(en+=(nn+=(Y+=(J+=(K+=(V+=(W+=(U+=(B+=(M+=($+=(F+=(O+=(I+=(T+=(k+=(E+=(C+=(b+=(v+=(m+=(h+=(c+=(i+=r>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)&65535,i=343*(a=65535&i),c=343*(d=65535&c),h=343*(f=65535&h),m=343*(y=65535&m),v=343*(w=65535&v),b=343*(S=65535&b),C=343*(D=65535&C),E=343*(_=65535&E),k=343*(x=65535&k),T=343*(P=65535&T),I=343*(A=65535&I),O=343*(R=65535&O),F=343*(L=65535&F),$=343*(j=65535&$),M=343*(N=65535&M),B=343*(H=65535&B),U=343*(q=65535&U),W=343*(z=65535&W),V=343*(G=65535&V),K=343*(X=65535&K),J=343*(Z=65535&J),Y=343*(Q=65535&Y),nn=343*(ln=65535&nn),en=343*(tn=65535&en),un=343*(rn=65535&un),on=343*(sn=65535&on),an=343*(cn=65535&an),dn=343*(hn=65535&dn),fn=343*(pn=65535&fn),mn=343*(gn=65535&mn),yn=343*vn,J+=(o^=l>>12&63|128)<<8,Y+=a<<8,nn+=d<<8,en+=f<<8,un+=y<<8,on+=w<<8,an+=S<<8,dn+=D<<8,fn+=_<<8,mn+=x<<8,o=65535&(r=343*o),vn=(yn+=P<<8)+((mn+=(fn+=(dn+=(an+=(on+=(un+=(en+=(nn+=(Y+=(J+=(K+=(V+=(W+=(U+=(B+=(M+=($+=(F+=(O+=(I+=(T+=(k+=(E+=(C+=(b+=(v+=(m+=(h+=(c+=(i+=r>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)&65535,i=343*(a=65535&i),c=343*(d=65535&c),h=343*(f=65535&h),m=343*(y=65535&m),v=343*(w=65535&v),b=343*(S=65535&b),C=343*(D=65535&C),E=343*(_=65535&E),k=343*(x=65535&k),T=343*(P=65535&T),I=343*(A=65535&I),O=343*(R=65535&O),F=343*(L=65535&F),$=343*(j=65535&$),M=343*(N=65535&M),B=343*(H=65535&B),U=343*(q=65535&U),W=343*(z=65535&W),V=343*(G=65535&V),K=343*(X=65535&K),J=343*(Z=65535&J),Y=343*(Q=65535&Y),nn=343*(ln=65535&nn),en=343*(tn=65535&en),un=343*(rn=65535&un),on=343*(sn=65535&on),an=343*(cn=65535&an),dn=343*(hn=65535&dn),fn=343*(pn=65535&fn),mn=343*(gn=65535&mn),yn=343*vn,J+=(o^=l>>6&63|128)<<8,Y+=a<<8,nn+=d<<8,en+=f<<8,un+=y<<8,on+=w<<8,an+=S<<8,dn+=D<<8,fn+=_<<8,mn+=x<<8,yn+=P<<8,o=65535&(r=343*o),a=65535&(i+=r>>>16),d=65535&(c+=i>>>16),f=65535&(h+=c>>>16),y=65535&(m+=h>>>16),w=65535&(v+=m>>>16),S=65535&(b+=v>>>16),D=65535&(C+=b>>>16),_=65535&(E+=C>>>16),x=65535&(k+=E>>>16),P=65535&(T+=k>>>16),A=65535&(I+=T>>>16),R=65535&(O+=I>>>16),L=65535&(F+=O>>>16),j=65535&($+=F>>>16),N=65535&(M+=$>>>16),H=65535&(B+=M>>>16),q=65535&(U+=B>>>16),z=65535&(W+=U>>>16),G=65535&(V+=W>>>16),X=65535&(K+=V>>>16),Z=65535&(J+=K>>>16),Q=65535&(Y+=J>>>16),ln=65535&(nn+=Y>>>16),tn=65535&(en+=nn>>>16),rn=65535&(un+=en>>>16),sn=65535&(on+=un>>>16),cn=65535&(an+=on>>>16),hn=65535&(dn+=an>>>16),pn=65535&(fn+=dn>>>16),vn=yn+((mn+=fn>>>16)>>>16)&65535,gn=65535&mn,o^=63&l|128):(i=343*a,c=343*d,h=343*f,m=343*y,v=343*w,b=343*S,C=343*D,E=343*_,k=343*x,T=343*P,I=343*A,O=343*R,F=343*L,$=343*j,M=343*N,B=343*H,U=343*q,W=343*z,V=343*G,K=343*X,J=343*Z,Y=343*Q,nn=343*ln,en=343*tn,un=343*rn,on=343*sn,an=343*cn,dn=343*hn,fn=343*pn,mn=343*gn,yn=343*vn,J+=(o^=l>>12|224)<<8,Y+=a<<8,nn+=d<<8,en+=f<<8,un+=y<<8,on+=w<<8,an+=S<<8,dn+=D<<8,fn+=_<<8,mn+=x<<8,o=65535&(r=343*o),vn=(yn+=P<<8)+((mn+=(fn+=(dn+=(an+=(on+=(un+=(en+=(nn+=(Y+=(J+=(K+=(V+=(W+=(U+=(B+=(M+=($+=(F+=(O+=(I+=(T+=(k+=(E+=(C+=(b+=(v+=(m+=(h+=(c+=(i+=r>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)&65535,i=343*(a=65535&i),c=343*(d=65535&c),h=343*(f=65535&h),m=343*(y=65535&m),v=343*(w=65535&v),b=343*(S=65535&b),C=343*(D=65535&C),E=343*(_=65535&E),k=343*(x=65535&k),T=343*(P=65535&T),I=343*(A=65535&I),O=343*(R=65535&O),F=343*(L=65535&F),$=343*(j=65535&$),M=343*(N=65535&M),B=343*(H=65535&B),U=343*(q=65535&U),W=343*(z=65535&W),V=343*(G=65535&V),K=343*(X=65535&K),J=343*(Z=65535&J),Y=343*(Q=65535&Y),nn=343*(ln=65535&nn),en=343*(tn=65535&en),un=343*(rn=65535&un),on=343*(sn=65535&on),an=343*(cn=65535&an),dn=343*(hn=65535&dn),fn=343*(pn=65535&fn),mn=343*(gn=65535&mn),yn=343*vn,J+=(o^=l>>6&63|128)<<8,Y+=a<<8,nn+=d<<8,en+=f<<8,un+=y<<8,on+=w<<8,an+=S<<8,dn+=D<<8,fn+=_<<8,mn+=x<<8,yn+=P<<8,o=65535&(r=343*o),a=65535&(i+=r>>>16),d=65535&(c+=i>>>16),f=65535&(h+=c>>>16),y=65535&(m+=h>>>16),w=65535&(v+=m>>>16),S=65535&(b+=v>>>16),D=65535&(C+=b>>>16),_=65535&(E+=C>>>16),x=65535&(k+=E>>>16),P=65535&(T+=k>>>16),A=65535&(I+=T>>>16),R=65535&(O+=I>>>16),L=65535&(F+=O>>>16),j=65535&($+=F>>>16),N=65535&(M+=$>>>16),H=65535&(B+=M>>>16),q=65535&(U+=B>>>16),z=65535&(W+=U>>>16),G=65535&(V+=W>>>16),X=65535&(K+=V>>>16),Z=65535&(J+=K>>>16),Q=65535&(Y+=J>>>16),ln=65535&(nn+=Y>>>16),tn=65535&(en+=nn>>>16),rn=65535&(un+=en>>>16),sn=65535&(on+=un>>>16),cn=65535&(an+=on>>>16),hn=65535&(dn+=an>>>16),pn=65535&(fn+=dn>>>16),vn=yn+((mn+=fn>>>16)>>>16)&65535,gn=65535&mn,o^=63&l|128),i=343*a,c=343*d,h=343*f,m=343*y,v=343*w,b=343*S,C=343*D,E=343*_,k=343*x,T=343*P,I=343*A,O=343*R,F=343*L,$=343*j,M=343*N,B=343*H,U=343*q,W=343*z,V=343*G,K=343*X,J=343*Z,Y=343*Q,nn=343*ln,en=343*tn,un=343*rn,on=343*sn,an=343*cn,dn=343*hn,fn=343*pn,mn=343*gn,yn=343*vn,J+=o<<8,Y+=a<<8,nn+=d<<8,en+=f<<8,un+=y<<8,on+=w<<8,an+=S<<8,dn+=D<<8,fn+=_<<8,mn+=x<<8,yn+=P<<8,o=65535&(r=343*o),a=65535&(i+=r>>>16),d=65535&(c+=i>>>16),f=65535&(h+=c>>>16),y=65535&(m+=h>>>16),w=65535&(v+=m>>>16),S=65535&(b+=v>>>16),D=65535&(C+=b>>>16),_=65535&(E+=C>>>16),x=65535&(k+=E>>>16),P=65535&(T+=k>>>16),A=65535&(I+=T>>>16),R=65535&(O+=I>>>16),L=65535&(F+=O>>>16),j=65535&($+=F>>>16),N=65535&(M+=$>>>16),H=65535&(B+=M>>>16),q=65535&(U+=B>>>16),z=65535&(W+=U>>>16),G=65535&(V+=W>>>16),X=65535&(K+=V>>>16),Z=65535&(J+=K>>>16),Q=65535&(Y+=J>>>16),ln=65535&(nn+=Y>>>16),tn=65535&(en+=nn>>>16),rn=65535&(un+=en>>>16),sn=65535&(on+=un>>>16),cn=65535&(an+=on>>>16),hn=65535&(dn+=an>>>16),pn=65535&(fn+=dn>>>16),vn=yn+((mn+=fn>>>16)>>>16)&65535,gn=65535&mn;return g(s[vn>>8]+s[255&vn]+s[gn>>8]+s[255&gn]+s[pn>>8]+s[255&pn]+s[hn>>8]+s[255&hn]+s[cn>>8]+s[255&cn]+s[sn>>8]+s[255&sn]+s[rn>>8]+s[255&rn]+s[tn>>8]+s[255&tn]+s[ln>>8]+s[255&ln]+s[Q>>8]+s[255&Q]+s[Z>>8]+s[255&Z]+s[X>>8]+s[255&X]+s[G>>8]+s[255&G]+s[z>>8]+s[255&z]+s[q>>8]+s[255&q]+s[H>>8]+s[255&H]+s[N>>8]+s[255&N]+s[j>>8]+s[255&j]+s[L>>8]+s[255&L]+s[R>>8]+s[255&R]+s[A>>8]+s[255&A]+s[P>>8]+s[255&P]+s[x>>8]+s[255&x]+s[_>>8]+s[255&_]+s[D>>8]+s[255&D]+s[S>>8]+s[255&S]+s[w>>8]+s[255&w]+s[y>>8]+s[255&y]+s[f>>8]+s[255&f]+s[d>>8]+s[255&d]+s[a>>8]+s[255&a]+s[o>>8]+s[255&o],512)}function V(n){var l,e,t=n.length,u=p[512].offset,r=0,o=0|u[31],i=0,a=0|u[30],c=0,d=0|u[29],h=0,f=0|u[28],m=0,y=0|u[27],v=0,w=0|u[26],b=0,S=0|u[25],C=0,D=0|u[24],E=0,_=0|u[23],k=0,x=0|u[22],T=0,P=0|u[21],I=0,A=0|u[20],O=0,R=0|u[19],F=0,L=0|u[18],$=0,j=0|u[17],M=0,N=0|u[16],B=0,H=0|u[15],U=0,q=0|u[14],W=0,z=0|u[13],V=0,G=0|u[12],K=0,X=0|u[11],J=0,Z=0|u[10],Y=0,Q=0|u[9],nn=0,ln=0|u[8],en=0,tn=0|u[7],un=0,rn=0|u[6],on=0,sn=0|u[5],an=0,cn=0|u[4],dn=0,hn=0|u[3],fn=0,pn=0|u[2],mn=0,gn=0|u[1],yn=0,vn=0|u[0];for(e=0;e<t;e++)i=343*a,c=343*d,h=343*f,m=343*y,v=343*w,b=343*S,C=343*D,E=343*_,k=343*x,T=343*P,I=343*A,O=343*R,F=343*L,$=343*j,M=343*N,B=343*H,U=343*q,W=343*z,V=343*G,K=343*X,J=343*Z,Y=343*Q,nn=343*ln,en=343*tn,un=343*rn,on=343*sn,an=343*cn,dn=343*hn,fn=343*pn,mn=343*gn,yn=343*vn,J+=o<<8,Y+=a<<8,nn+=d<<8,en+=f<<8,un+=y<<8,on+=w<<8,an+=S<<8,dn+=D<<8,fn+=_<<8,mn+=x<<8,yn+=P<<8,o=65535&(r=343*o),a=65535&(i+=r>>>16),d=65535&(c+=i>>>16),f=65535&(h+=c>>>16),y=65535&(m+=h>>>16),w=65535&(v+=m>>>16),S=65535&(b+=v>>>16),D=65535&(C+=b>>>16),_=65535&(E+=C>>>16),x=65535&(k+=E>>>16),P=65535&(T+=k>>>16),A=65535&(I+=T>>>16),R=65535&(O+=I>>>16),L=65535&(F+=O>>>16),j=65535&($+=F>>>16),N=65535&(M+=$>>>16),H=65535&(B+=M>>>16),q=65535&(U+=B>>>16),z=65535&(W+=U>>>16),G=65535&(V+=W>>>16),X=65535&(K+=V>>>16),Z=65535&(J+=K>>>16),Q=65535&(Y+=J>>>16),ln=65535&(nn+=Y>>>16),tn=65535&(en+=nn>>>16),rn=65535&(un+=en>>>16),sn=65535&(on+=un>>>16),cn=65535&(an+=on>>>16),hn=65535&(dn+=an>>>16),pn=65535&(fn+=dn>>>16),vn=yn+((mn+=fn>>>16)>>>16)&65535,gn=65535&mn,(l=n.charCodeAt(e))<128?o^=l:l<2048?(i=343*a,c=343*d,h=343*f,m=343*y,v=343*w,b=343*S,C=343*D,E=343*_,k=343*x,T=343*P,I=343*A,O=343*R,F=343*L,$=343*j,M=343*N,B=343*H,U=343*q,W=343*z,V=343*G,K=343*X,J=343*Z,Y=343*Q,nn=343*ln,en=343*tn,un=343*rn,on=343*sn,an=343*cn,dn=343*hn,fn=343*pn,mn=343*gn,yn=343*vn,J+=(o^=l>>6|192)<<8,Y+=a<<8,nn+=d<<8,en+=f<<8,un+=y<<8,on+=w<<8,an+=S<<8,dn+=D<<8,fn+=_<<8,mn+=x<<8,yn+=P<<8,o=65535&(r=343*o),a=65535&(i+=r>>>16),d=65535&(c+=i>>>16),f=65535&(h+=c>>>16),y=65535&(m+=h>>>16),w=65535&(v+=m>>>16),S=65535&(b+=v>>>16),D=65535&(C+=b>>>16),_=65535&(E+=C>>>16),x=65535&(k+=E>>>16),P=65535&(T+=k>>>16),A=65535&(I+=T>>>16),R=65535&(O+=I>>>16),L=65535&(F+=O>>>16),j=65535&($+=F>>>16),N=65535&(M+=$>>>16),H=65535&(B+=M>>>16),q=65535&(U+=B>>>16),z=65535&(W+=U>>>16),G=65535&(V+=W>>>16),X=65535&(K+=V>>>16),Z=65535&(J+=K>>>16),Q=65535&(Y+=J>>>16),ln=65535&(nn+=Y>>>16),tn=65535&(en+=nn>>>16),rn=65535&(un+=en>>>16),sn=65535&(on+=un>>>16),cn=65535&(an+=on>>>16),hn=65535&(dn+=an>>>16),pn=65535&(fn+=dn>>>16),vn=yn+((mn+=fn>>>16)>>>16)&65535,gn=65535&mn,o^=63&l|128):55296==(64512&l)&&e+1<t&&56320==(64512&n.charCodeAt(e+1))?(i=343*a,c=343*d,h=343*f,m=343*y,v=343*w,b=343*S,C=343*D,E=343*_,k=343*x,T=343*P,I=343*A,O=343*R,F=343*L,$=343*j,M=343*N,B=343*H,U=343*q,W=343*z,V=343*G,K=343*X,J=343*Z,Y=343*Q,nn=343*ln,en=343*tn,un=343*rn,on=343*sn,an=343*cn,dn=343*hn,fn=343*pn,mn=343*gn,yn=343*vn,J+=(o^=(l=65536+((1023&l)<<10)+(1023&n.charCodeAt(++e)))>>18|240)<<8,Y+=a<<8,nn+=d<<8,en+=f<<8,un+=y<<8,on+=w<<8,an+=S<<8,dn+=D<<8,fn+=_<<8,mn+=x<<8,o=65535&(r=343*o),vn=(yn+=P<<8)+((mn+=(fn+=(dn+=(an+=(on+=(un+=(en+=(nn+=(Y+=(J+=(K+=(V+=(W+=(U+=(B+=(M+=($+=(F+=(O+=(I+=(T+=(k+=(E+=(C+=(b+=(v+=(m+=(h+=(c+=(i+=r>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)&65535,i=343*(a=65535&i),c=343*(d=65535&c),h=343*(f=65535&h),m=343*(y=65535&m),v=343*(w=65535&v),b=343*(S=65535&b),C=343*(D=65535&C),E=343*(_=65535&E),k=343*(x=65535&k),T=343*(P=65535&T),I=343*(A=65535&I),O=343*(R=65535&O),F=343*(L=65535&F),$=343*(j=65535&$),M=343*(N=65535&M),B=343*(H=65535&B),U=343*(q=65535&U),W=343*(z=65535&W),V=343*(G=65535&V),K=343*(X=65535&K),J=343*(Z=65535&J),Y=343*(Q=65535&Y),nn=343*(ln=65535&nn),en=343*(tn=65535&en),un=343*(rn=65535&un),on=343*(sn=65535&on),an=343*(cn=65535&an),dn=343*(hn=65535&dn),fn=343*(pn=65535&fn),mn=343*(gn=65535&mn),yn=343*vn,J+=(o^=l>>12&63|128)<<8,Y+=a<<8,nn+=d<<8,en+=f<<8,un+=y<<8,on+=w<<8,an+=S<<8,dn+=D<<8,fn+=_<<8,mn+=x<<8,o=65535&(r=343*o),vn=(yn+=P<<8)+((mn+=(fn+=(dn+=(an+=(on+=(un+=(en+=(nn+=(Y+=(J+=(K+=(V+=(W+=(U+=(B+=(M+=($+=(F+=(O+=(I+=(T+=(k+=(E+=(C+=(b+=(v+=(m+=(h+=(c+=(i+=r>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)&65535,i=343*(a=65535&i),c=343*(d=65535&c),h=343*(f=65535&h),m=343*(y=65535&m),v=343*(w=65535&v),b=343*(S=65535&b),C=343*(D=65535&C),E=343*(_=65535&E),k=343*(x=65535&k),T=343*(P=65535&T),I=343*(A=65535&I),O=343*(R=65535&O),F=343*(L=65535&F),$=343*(j=65535&$),M=343*(N=65535&M),B=343*(H=65535&B),U=343*(q=65535&U),W=343*(z=65535&W),V=343*(G=65535&V),K=343*(X=65535&K),J=343*(Z=65535&J),Y=343*(Q=65535&Y),nn=343*(ln=65535&nn),en=343*(tn=65535&en),un=343*(rn=65535&un),on=343*(sn=65535&on),an=343*(cn=65535&an),dn=343*(hn=65535&dn),fn=343*(pn=65535&fn),mn=343*(gn=65535&mn),yn=343*vn,J+=(o^=l>>6&63|128)<<8,Y+=a<<8,nn+=d<<8,en+=f<<8,un+=y<<8,on+=w<<8,an+=S<<8,dn+=D<<8,fn+=_<<8,mn+=x<<8,yn+=P<<8,o=65535&(r=343*o),a=65535&(i+=r>>>16),d=65535&(c+=i>>>16),f=65535&(h+=c>>>16),y=65535&(m+=h>>>16),w=65535&(v+=m>>>16),S=65535&(b+=v>>>16),D=65535&(C+=b>>>16),_=65535&(E+=C>>>16),x=65535&(k+=E>>>16),P=65535&(T+=k>>>16),A=65535&(I+=T>>>16),R=65535&(O+=I>>>16),L=65535&(F+=O>>>16),j=65535&($+=F>>>16),N=65535&(M+=$>>>16),H=65535&(B+=M>>>16),q=65535&(U+=B>>>16),z=65535&(W+=U>>>16),G=65535&(V+=W>>>16),X=65535&(K+=V>>>16),Z=65535&(J+=K>>>16),Q=65535&(Y+=J>>>16),ln=65535&(nn+=Y>>>16),tn=65535&(en+=nn>>>16),rn=65535&(un+=en>>>16),sn=65535&(on+=un>>>16),cn=65535&(an+=on>>>16),hn=65535&(dn+=an>>>16),pn=65535&(fn+=dn>>>16),vn=yn+((mn+=fn>>>16)>>>16)&65535,gn=65535&mn,o^=63&l|128):(i=343*a,c=343*d,h=343*f,m=343*y,v=343*w,b=343*S,C=343*D,E=343*_,k=343*x,T=343*P,I=343*A,O=343*R,F=343*L,$=343*j,M=343*N,B=343*H,U=343*q,W=343*z,V=343*G,K=343*X,J=343*Z,Y=343*Q,nn=343*ln,en=343*tn,un=343*rn,on=343*sn,an=343*cn,dn=343*hn,fn=343*pn,mn=343*gn,yn=343*vn,J+=(o^=l>>12|224)<<8,Y+=a<<8,nn+=d<<8,en+=f<<8,un+=y<<8,on+=w<<8,an+=S<<8,dn+=D<<8,fn+=_<<8,mn+=x<<8,o=65535&(r=343*o),vn=(yn+=P<<8)+((mn+=(fn+=(dn+=(an+=(on+=(un+=(en+=(nn+=(Y+=(J+=(K+=(V+=(W+=(U+=(B+=(M+=($+=(F+=(O+=(I+=(T+=(k+=(E+=(C+=(b+=(v+=(m+=(h+=(c+=(i+=r>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)&65535,i=343*(a=65535&i),c=343*(d=65535&c),h=343*(f=65535&h),m=343*(y=65535&m),v=343*(w=65535&v),b=343*(S=65535&b),C=343*(D=65535&C),E=343*(_=65535&E),k=343*(x=65535&k),T=343*(P=65535&T),I=343*(A=65535&I),O=343*(R=65535&O),F=343*(L=65535&F),$=343*(j=65535&$),M=343*(N=65535&M),B=343*(H=65535&B),U=343*(q=65535&U),W=343*(z=65535&W),V=343*(G=65535&V),K=343*(X=65535&K),J=343*(Z=65535&J),Y=343*(Q=65535&Y),nn=343*(ln=65535&nn),en=343*(tn=65535&en),un=343*(rn=65535&un),on=343*(sn=65535&on),an=343*(cn=65535&an),dn=343*(hn=65535&dn),fn=343*(pn=65535&fn),mn=343*(gn=65535&mn),yn=343*vn,J+=(o^=l>>6&63|128)<<8,Y+=a<<8,nn+=d<<8,en+=f<<8,un+=y<<8,on+=w<<8,an+=S<<8,dn+=D<<8,fn+=_<<8,mn+=x<<8,yn+=P<<8,o=65535&(r=343*o),a=65535&(i+=r>>>16),d=65535&(c+=i>>>16),f=65535&(h+=c>>>16),y=65535&(m+=h>>>16),w=65535&(v+=m>>>16),S=65535&(b+=v>>>16),D=65535&(C+=b>>>16),_=65535&(E+=C>>>16),x=65535&(k+=E>>>16),P=65535&(T+=k>>>16),A=65535&(I+=T>>>16),R=65535&(O+=I>>>16),L=65535&(F+=O>>>16),j=65535&($+=F>>>16),N=65535&(M+=$>>>16),H=65535&(B+=M>>>16),q=65535&(U+=B>>>16),z=65535&(W+=U>>>16),G=65535&(V+=W>>>16),X=65535&(K+=V>>>16),Z=65535&(J+=K>>>16),Q=65535&(Y+=J>>>16),ln=65535&(nn+=Y>>>16),tn=65535&(en+=nn>>>16),rn=65535&(un+=en>>>16),sn=65535&(on+=un>>>16),cn=65535&(an+=on>>>16),hn=65535&(dn+=an>>>16),pn=65535&(fn+=dn>>>16),vn=yn+((mn+=fn>>>16)>>>16)&65535,gn=65535&mn,o^=63&l|128);return g(s[vn>>8]+s[255&vn]+s[gn>>8]+s[255&gn]+s[pn>>8]+s[255&pn]+s[hn>>8]+s[255&hn]+s[cn>>8]+s[255&cn]+s[sn>>8]+s[255&sn]+s[rn>>8]+s[255&rn]+s[tn>>8]+s[255&tn]+s[ln>>8]+s[255&ln]+s[Q>>8]+s[255&Q]+s[Z>>8]+s[255&Z]+s[X>>8]+s[255&X]+s[G>>8]+s[255&G]+s[z>>8]+s[255&z]+s[q>>8]+s[255&q]+s[H>>8]+s[255&H]+s[N>>8]+s[255&N]+s[j>>8]+s[255&j]+s[L>>8]+s[255&L]+s[R>>8]+s[255&R]+s[A>>8]+s[255&A]+s[P>>8]+s[255&P]+s[x>>8]+s[255&x]+s[_>>8]+s[255&_]+s[D>>8]+s[255&D]+s[S>>8]+s[255&S]+s[w>>8]+s[255&w]+s[y>>8]+s[255&y]+s[f>>8]+s[255&f]+s[d>>8]+s[255&d]+s[a>>8]+s[255&a]+s[o>>8]+s[255&o],512)}function G(n){var l,e=n.length-3,t=p[1024].offset,u=0,r=0|t[63],o=0,i=0|t[62],a=0,c=0|t[61],d=0,h=0|t[60],f=0,m=0|t[59],y=0,v=0|t[58],w=0,b=0|t[57],S=0,C=0|t[56],D=0,E=0|t[55],_=0,k=0|t[54],x=0,T=0|t[53],P=0,I=0|t[52],A=0,O=0|t[51],R=0,F=0|t[50],L=0,$=0|t[49],j=0,M=0|t[48],N=0,B=0|t[47],H=0,U=0|t[46],q=0,W=0|t[45],z=0,V=0|t[44],G=0,K=0|t[43],X=0,J=0|t[42],Z=0,Y=0|t[41],Q=0,nn=0|t[40],ln=0,en=0|t[39],tn=0,un=0|t[38],rn=0,on=0|t[37],sn=0,an=0|t[36],cn=0,dn=0|t[35],hn=0,fn=0|t[34],pn=0,mn=0|t[33],gn=0,yn=0|t[32],vn=0,wn=0|t[31],bn=0,Sn=0|t[30],Cn=0,Dn=0|t[29],En=0,_n=0|t[28],kn=0,xn=0|t[27],Tn=0,Pn=0|t[26],In=0,An=0|t[25],On=0,Rn=0|t[24],Fn=0,Ln=0|t[23],$n=0,jn=0|t[22],Mn=0,Nn=0|t[21],Bn=0,Hn=0|t[20],Un=0,qn=0|t[19],Wn=0,zn=0|t[18],Vn=0,Gn=0|t[17],Kn=0,Xn=0|t[16],Jn=0,Zn=0|t[15],Yn=0,Qn=0|t[14],nl=0,ll=0|t[13],el=0,tl=0|t[12],ul=0,rl=0|t[11],ol=0,il=0|t[10],sl=0,al=0|t[9],cl=0,dl=0|t[8],hl=0,fl=0|t[7],pl=0,ml=0|t[6],gl=0,yl=0|t[5],vl=0,wl=0|t[4],bl=0,Sl=0|t[3],Cl=0,Dl=0|t[2],El=0,_l=0|t[1],kl=0,xl=0|t[0];for(l=0;l<e;)o=397*i,a=397*c,d=397*h,f=397*m,y=397*v,w=397*b,S=397*C,D=397*E,_=397*k,x=397*T,P=397*I,A=397*O,R=397*F,L=397*$,j=397*M,N=397*B,H=397*U,q=397*W,z=397*V,G=397*K,X=397*J,Z=397*Y,Q=397*nn,ln=397*en,tn=397*un,rn=397*on,sn=397*an,cn=397*dn,hn=397*fn,pn=397*mn,gn=397*yn,vn=397*wn,bn=397*Sn,Cn=397*Dn,En=397*_n,kn=397*xn,Tn=397*Pn,In=397*An,On=397*Rn,Fn=397*Ln,$n=397*jn,Mn=397*Nn,Bn=397*Hn,Un=397*qn,Wn=397*zn,Vn=397*Gn,Kn=397*Xn,Jn=397*Zn,Yn=397*Qn,nl=397*ll,el=397*tl,ul=397*rl,ol=397*il,sl=397*al,cl=397*dl,hl=397*fl,pl=397*ml,gl=397*yl,vl=397*wl,bl=397*Sl,Cl=397*Dl,El=397*_l,kl=397*xl,Mn+=(r^=n.charCodeAt(l++))<<8,Bn+=i<<8,Un+=c<<8,Wn+=h<<8,Vn+=m<<8,Kn+=v<<8,Jn+=b<<8,Yn+=C<<8,nl+=E<<8,el+=k<<8,ul+=T<<8,ol+=I<<8,sl+=O<<8,cl+=F<<8,hl+=$<<8,pl+=M<<8,gl+=B<<8,vl+=U<<8,bl+=W<<8,Cl+=V<<8,El+=K<<8,r=65535&(u=397*r),xl=(kl+=J<<8)+((El+=(Cl+=(bl+=(vl+=(gl+=(pl+=(hl+=(cl+=(sl+=(ol+=(ul+=(el+=(nl+=(Yn+=(Jn+=(Kn+=(Vn+=(Wn+=(Un+=(Bn+=(Mn+=($n+=(Fn+=(On+=(In+=(Tn+=(kn+=(En+=(Cn+=(bn+=(vn+=(gn+=(pn+=(hn+=(cn+=(sn+=(rn+=(tn+=(ln+=(Q+=(Z+=(X+=(G+=(z+=(q+=(H+=(N+=(j+=(L+=(R+=(A+=(P+=(x+=(_+=(D+=(S+=(w+=(y+=(f+=(d+=(a+=(o+=u>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)&65535,o=397*(i=65535&o),a=397*(c=65535&a),d=397*(h=65535&d),f=397*(m=65535&f),y=397*(v=65535&y),w=397*(b=65535&w),S=397*(C=65535&S),D=397*(E=65535&D),_=397*(k=65535&_),x=397*(T=65535&x),P=397*(I=65535&P),A=397*(O=65535&A),R=397*(F=65535&R),L=397*($=65535&L),j=397*(M=65535&j),N=397*(B=65535&N),H=397*(U=65535&H),q=397*(W=65535&q),z=397*(V=65535&z),G=397*(K=65535&G),X=397*(J=65535&X),Z=397*(Y=65535&Z),Q=397*(nn=65535&Q),ln=397*(en=65535&ln),tn=397*(un=65535&tn),rn=397*(on=65535&rn),sn=397*(an=65535&sn),cn=397*(dn=65535&cn),hn=397*(fn=65535&hn),pn=397*(mn=65535&pn),gn=397*(yn=65535&gn),vn=397*(wn=65535&vn),bn=397*(Sn=65535&bn),Cn=397*(Dn=65535&Cn),En=397*(_n=65535&En),kn=397*(xn=65535&kn),Tn=397*(Pn=65535&Tn),In=397*(An=65535&In),On=397*(Rn=65535&On),Fn=397*(Ln=65535&Fn),$n=397*(jn=65535&$n),Mn=397*(Nn=65535&Mn),Bn=397*(Hn=65535&Bn),Un=397*(qn=65535&Un),Wn=397*(zn=65535&Wn),Vn=397*(Gn=65535&Vn),Kn=397*(Xn=65535&Kn),Jn=397*(Zn=65535&Jn),Yn=397*(Qn=65535&Yn),nl=397*(ll=65535&nl),el=397*(tl=65535&el),ul=397*(rl=65535&ul),ol=397*(il=65535&ol),sl=397*(al=65535&sl),cl=397*(dl=65535&cl),hl=397*(fl=65535&hl),pl=397*(ml=65535&pl),gl=397*(yl=65535&gl),vl=397*(wl=65535&vl),bl=397*(Sl=65535&bl),Cl=397*(Dl=65535&Cl),El=397*(_l=65535&El),kl=397*xl,Mn+=(r^=n.charCodeAt(l++))<<8,Bn+=i<<8,Un+=c<<8,Wn+=h<<8,Vn+=m<<8,Kn+=v<<8,Jn+=b<<8,Yn+=C<<8,nl+=E<<8,el+=k<<8,ul+=T<<8,ol+=I<<8,sl+=O<<8,cl+=F<<8,hl+=$<<8,pl+=M<<8,gl+=B<<8,vl+=U<<8,bl+=W<<8,Cl+=V<<8,El+=K<<8,r=65535&(u=397*r),xl=(kl+=J<<8)+((El+=(Cl+=(bl+=(vl+=(gl+=(pl+=(hl+=(cl+=(sl+=(ol+=(ul+=(el+=(nl+=(Yn+=(Jn+=(Kn+=(Vn+=(Wn+=(Un+=(Bn+=(Mn+=($n+=(Fn+=(On+=(In+=(Tn+=(kn+=(En+=(Cn+=(bn+=(vn+=(gn+=(pn+=(hn+=(cn+=(sn+=(rn+=(tn+=(ln+=(Q+=(Z+=(X+=(G+=(z+=(q+=(H+=(N+=(j+=(L+=(R+=(A+=(P+=(x+=(_+=(D+=(S+=(w+=(y+=(f+=(d+=(a+=(o+=u>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)&65535,o=397*(i=65535&o),a=397*(c=65535&a),d=397*(h=65535&d),f=397*(m=65535&f),y=397*(v=65535&y),w=397*(b=65535&w),S=397*(C=65535&S),D=397*(E=65535&D),_=397*(k=65535&_),x=397*(T=65535&x),P=397*(I=65535&P),A=397*(O=65535&A),R=397*(F=65535&R),L=397*($=65535&L),j=397*(M=65535&j),N=397*(B=65535&N),H=397*(U=65535&H),q=397*(W=65535&q),z=397*(V=65535&z),G=397*(K=65535&G),X=397*(J=65535&X),Z=397*(Y=65535&Z),Q=397*(nn=65535&Q),ln=397*(en=65535&ln),tn=397*(un=65535&tn),rn=397*(on=65535&rn),sn=397*(an=65535&sn),cn=397*(dn=65535&cn),hn=397*(fn=65535&hn),pn=397*(mn=65535&pn),gn=397*(yn=65535&gn),vn=397*(wn=65535&vn),bn=397*(Sn=65535&bn),Cn=397*(Dn=65535&Cn),En=397*(_n=65535&En),kn=397*(xn=65535&kn),Tn=397*(Pn=65535&Tn),In=397*(An=65535&In),On=397*(Rn=65535&On),Fn=397*(Ln=65535&Fn),$n=397*(jn=65535&$n),Mn=397*(Nn=65535&Mn),Bn=397*(Hn=65535&Bn),Un=397*(qn=65535&Un),Wn=397*(zn=65535&Wn),Vn=397*(Gn=65535&Vn),Kn=397*(Xn=65535&Kn),Jn=397*(Zn=65535&Jn),Yn=397*(Qn=65535&Yn),nl=397*(ll=65535&nl),el=397*(tl=65535&el),ul=397*(rl=65535&ul),ol=397*(il=65535&ol),sl=397*(al=65535&sl),cl=397*(dl=65535&cl),hl=397*(fl=65535&hl),pl=397*(ml=65535&pl),gl=397*(yl=65535&gl),vl=397*(wl=65535&vl),bl=397*(Sl=65535&bl),Cl=397*(Dl=65535&Cl),El=397*(_l=65535&El),kl=397*xl,Mn+=(r^=n.charCodeAt(l++))<<8,Bn+=i<<8,Un+=c<<8,Wn+=h<<8,Vn+=m<<8,Kn+=v<<8,Jn+=b<<8,Yn+=C<<8,nl+=E<<8,el+=k<<8,ul+=T<<8,ol+=I<<8,sl+=O<<8,cl+=F<<8,hl+=$<<8,pl+=M<<8,gl+=B<<8,vl+=U<<8,bl+=W<<8,Cl+=V<<8,El+=K<<8,r=65535&(u=397*r),xl=(kl+=J<<8)+((El+=(Cl+=(bl+=(vl+=(gl+=(pl+=(hl+=(cl+=(sl+=(ol+=(ul+=(el+=(nl+=(Yn+=(Jn+=(Kn+=(Vn+=(Wn+=(Un+=(Bn+=(Mn+=($n+=(Fn+=(On+=(In+=(Tn+=(kn+=(En+=(Cn+=(bn+=(vn+=(gn+=(pn+=(hn+=(cn+=(sn+=(rn+=(tn+=(ln+=(Q+=(Z+=(X+=(G+=(z+=(q+=(H+=(N+=(j+=(L+=(R+=(A+=(P+=(x+=(_+=(D+=(S+=(w+=(y+=(f+=(d+=(a+=(o+=u>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)&65535,o=397*(i=65535&o),a=397*(c=65535&a),d=397*(h=65535&d),f=397*(m=65535&f),y=397*(v=65535&y),w=397*(b=65535&w),S=397*(C=65535&S),D=397*(E=65535&D),_=397*(k=65535&_),x=397*(T=65535&x),P=397*(I=65535&P),A=397*(O=65535&A),R=397*(F=65535&R),L=397*($=65535&L),j=397*(M=65535&j),N=397*(B=65535&N),H=397*(U=65535&H),q=397*(W=65535&q),z=397*(V=65535&z),G=397*(K=65535&G),X=397*(J=65535&X),Z=397*(Y=65535&Z),Q=397*(nn=65535&Q),ln=397*(en=65535&ln),tn=397*(un=65535&tn),rn=397*(on=65535&rn),sn=397*(an=65535&sn),cn=397*(dn=65535&cn),hn=397*(fn=65535&hn),pn=397*(mn=65535&pn),gn=397*(yn=65535&gn),vn=397*(wn=65535&vn),bn=397*(Sn=65535&bn),Cn=397*(Dn=65535&Cn),En=397*(_n=65535&En),kn=397*(xn=65535&kn),Tn=397*(Pn=65535&Tn),In=397*(An=65535&In),On=397*(Rn=65535&On),Fn=397*(Ln=65535&Fn),$n=397*(jn=65535&$n),Mn=397*(Nn=65535&Mn),Bn=397*(Hn=65535&Bn),Un=397*(qn=65535&Un),Wn=397*(zn=65535&Wn),Vn=397*(Gn=65535&Vn),Kn=397*(Xn=65535&Kn),Jn=397*(Zn=65535&Jn),Yn=397*(Qn=65535&Yn),nl=397*(ll=65535&nl),el=397*(tl=65535&el),ul=397*(rl=65535&ul),ol=397*(il=65535&ol),sl=397*(al=65535&sl),cl=397*(dl=65535&cl),hl=397*(fl=65535&hl),pl=397*(ml=65535&pl),gl=397*(yl=65535&gl),vl=397*(wl=65535&vl),bl=397*(Sl=65535&bl),Cl=397*(Dl=65535&Cl),El=397*(_l=65535&El),kl=397*xl,Mn+=(r^=n.charCodeAt(l++))<<8,Bn+=i<<8,Un+=c<<8,Wn+=h<<8,Vn+=m<<8,Kn+=v<<8,Jn+=b<<8,Yn+=C<<8,nl+=E<<8,el+=k<<8,ul+=T<<8,ol+=I<<8,sl+=O<<8,cl+=F<<8,hl+=$<<8,pl+=M<<8,gl+=B<<8,vl+=U<<8,bl+=W<<8,Cl+=V<<8,El+=K<<8,kl+=J<<8,r=65535&(u=397*r),i=65535&(o+=u>>>16),c=65535&(a+=o>>>16),h=65535&(d+=a>>>16),m=65535&(f+=d>>>16),v=65535&(y+=f>>>16),b=65535&(w+=y>>>16),C=65535&(S+=w>>>16),E=65535&(D+=S>>>16),k=65535&(_+=D>>>16),T=65535&(x+=_>>>16),I=65535&(P+=x>>>16),O=65535&(A+=P>>>16),F=65535&(R+=A>>>16),$=65535&(L+=R>>>16),M=65535&(j+=L>>>16),B=65535&(N+=j>>>16),U=65535&(H+=N>>>16),W=65535&(q+=H>>>16),V=65535&(z+=q>>>16),K=65535&(G+=z>>>16),J=65535&(X+=G>>>16),Y=65535&(Z+=X>>>16),nn=65535&(Q+=Z>>>16),en=65535&(ln+=Q>>>16),un=65535&(tn+=ln>>>16),on=65535&(rn+=tn>>>16),an=65535&(sn+=rn>>>16),dn=65535&(cn+=sn>>>16),fn=65535&(hn+=cn>>>16),mn=65535&(pn+=hn>>>16),yn=65535&(gn+=pn>>>16),wn=65535&(vn+=gn>>>16),Sn=65535&(bn+=vn>>>16),Dn=65535&(Cn+=bn>>>16),_n=65535&(En+=Cn>>>16),xn=65535&(kn+=En>>>16),Pn=65535&(Tn+=kn>>>16),An=65535&(In+=Tn>>>16),Rn=65535&(On+=In>>>16),Ln=65535&(Fn+=On>>>16),jn=65535&($n+=Fn>>>16),Nn=65535&(Mn+=$n>>>16),Hn=65535&(Bn+=Mn>>>16),qn=65535&(Un+=Bn>>>16),zn=65535&(Wn+=Un>>>16),Gn=65535&(Vn+=Wn>>>16),Xn=65535&(Kn+=Vn>>>16),Zn=65535&(Jn+=Kn>>>16),Qn=65535&(Yn+=Jn>>>16),ll=65535&(nl+=Yn>>>16),tl=65535&(el+=nl>>>16),rl=65535&(ul+=el>>>16),il=65535&(ol+=ul>>>16),al=65535&(sl+=ol>>>16),dl=65535&(cl+=sl>>>16),fl=65535&(hl+=cl>>>16),ml=65535&(pl+=hl>>>16),yl=65535&(gl+=pl>>>16),wl=65535&(vl+=gl>>>16),Sl=65535&(bl+=vl>>>16),Dl=65535&(Cl+=bl>>>16),xl=kl+((El+=Cl>>>16)>>>16)&65535,_l=65535&El;for(;l<e+3;)o=397*i,a=397*c,d=397*h,f=397*m,y=397*v,w=397*b,S=397*C,D=397*E,_=397*k,x=397*T,P=397*I,A=397*O,R=397*F,L=397*$,j=397*M,N=397*B,H=397*U,q=397*W,z=397*V,G=397*K,X=397*J,Z=397*Y,Q=397*nn,ln=397*en,tn=397*un,rn=397*on,sn=397*an,cn=397*dn,hn=397*fn,pn=397*mn,gn=397*yn,vn=397*wn,bn=397*Sn,Cn=397*Dn,En=397*_n,kn=397*xn,Tn=397*Pn,In=397*An,On=397*Rn,Fn=397*Ln,$n=397*jn,Mn=397*Nn,Bn=397*Hn,Un=397*qn,Wn=397*zn,Vn=397*Gn,Kn=397*Xn,Jn=397*Zn,Yn=397*Qn,nl=397*ll,el=397*tl,ul=397*rl,ol=397*il,sl=397*al,cl=397*dl,hl=397*fl,pl=397*ml,gl=397*yl,vl=397*wl,bl=397*Sl,Cl=397*Dl,El=397*_l,kl=397*xl,Mn+=(r^=n.charCodeAt(l++))<<8,Bn+=i<<8,Un+=c<<8,Wn+=h<<8,Vn+=m<<8,Kn+=v<<8,Jn+=b<<8,Yn+=C<<8,nl+=E<<8,el+=k<<8,ul+=T<<8,ol+=I<<8,sl+=O<<8,cl+=F<<8,hl+=$<<8,pl+=M<<8,gl+=B<<8,vl+=U<<8,bl+=W<<8,Cl+=V<<8,El+=K<<8,kl+=J<<8,r=65535&(u=397*r),i=65535&(o+=u>>>16),c=65535&(a+=o>>>16),h=65535&(d+=a>>>16),m=65535&(f+=d>>>16),v=65535&(y+=f>>>16),b=65535&(w+=y>>>16),C=65535&(S+=w>>>16),E=65535&(D+=S>>>16),k=65535&(_+=D>>>16),T=65535&(x+=_>>>16),I=65535&(P+=x>>>16),O=65535&(A+=P>>>16),F=65535&(R+=A>>>16),$=65535&(L+=R>>>16),M=65535&(j+=L>>>16),B=65535&(N+=j>>>16),U=65535&(H+=N>>>16),W=65535&(q+=H>>>16),V=65535&(z+=q>>>16),K=65535&(G+=z>>>16),J=65535&(X+=G>>>16),Y=65535&(Z+=X>>>16),nn=65535&(Q+=Z>>>16),en=65535&(ln+=Q>>>16),un=65535&(tn+=ln>>>16),on=65535&(rn+=tn>>>16),an=65535&(sn+=rn>>>16),dn=65535&(cn+=sn>>>16),fn=65535&(hn+=cn>>>16),mn=65535&(pn+=hn>>>16),yn=65535&(gn+=pn>>>16),wn=65535&(vn+=gn>>>16),Sn=65535&(bn+=vn>>>16),Dn=65535&(Cn+=bn>>>16),_n=65535&(En+=Cn>>>16),xn=65535&(kn+=En>>>16),Pn=65535&(Tn+=kn>>>16),An=65535&(In+=Tn>>>16),Rn=65535&(On+=In>>>16),Ln=65535&(Fn+=On>>>16),jn=65535&($n+=Fn>>>16),Nn=65535&(Mn+=$n>>>16),Hn=65535&(Bn+=Mn>>>16),qn=65535&(Un+=Bn>>>16),zn=65535&(Wn+=Un>>>16),Gn=65535&(Vn+=Wn>>>16),Xn=65535&(Kn+=Vn>>>16),Zn=65535&(Jn+=Kn>>>16),Qn=65535&(Yn+=Jn>>>16),ll=65535&(nl+=Yn>>>16),tl=65535&(el+=nl>>>16),rl=65535&(ul+=el>>>16),il=65535&(ol+=ul>>>16),al=65535&(sl+=ol>>>16),dl=65535&(cl+=sl>>>16),fl=65535&(hl+=cl>>>16),ml=65535&(pl+=hl>>>16),yl=65535&(gl+=pl>>>16),wl=65535&(vl+=gl>>>16),Sl=65535&(bl+=vl>>>16),Dl=65535&(Cl+=bl>>>16),xl=kl+((El+=Cl>>>16)>>>16)&65535,_l=65535&El;return g(s[xl>>8]+s[255&xl]+s[_l>>8]+s[255&_l]+s[Dl>>8]+s[255&Dl]+s[Sl>>8]+s[255&Sl]+s[wl>>8]+s[255&wl]+s[yl>>8]+s[255&yl]+s[ml>>8]+s[255&ml]+s[fl>>8]+s[255&fl]+s[dl>>8]+s[255&dl]+s[al>>8]+s[255&al]+s[il>>8]+s[255&il]+s[rl>>8]+s[255&rl]+s[tl>>8]+s[255&tl]+s[ll>>8]+s[255&ll]+s[Qn>>8]+s[255&Qn]+s[Zn>>8]+s[255&Zn]+s[Xn>>8]+s[255&Xn]+s[Gn>>8]+s[255&Gn]+s[zn>>8]+s[255&zn]+s[qn>>8]+s[255&qn]+s[Hn>>8]+s[255&Hn]+s[Nn>>8]+s[255&Nn]+s[jn>>8]+s[255&jn]+s[Ln>>8]+s[255&Ln]+s[Rn>>8]+s[255&Rn]+s[An>>8]+s[255&An]+s[Pn>>8]+s[255&Pn]+s[xn>>8]+s[255&xn]+s[_n>>8]+s[255&_n]+s[Dn>>8]+s[255&Dn]+s[Sn>>8]+s[255&Sn]+s[wn>>8]+s[255&wn]+s[yn>>8]+s[255&yn]+s[mn>>8]+s[255&mn]+s[fn>>8]+s[255&fn]+s[dn>>8]+s[255&dn]+s[an>>8]+s[255&an]+s[on>>8]+s[255&on]+s[un>>8]+s[255&un]+s[en>>8]+s[255&en]+s[nn>>8]+s[255&nn]+s[Y>>8]+s[255&Y]+s[J>>8]+s[255&J]+s[K>>8]+s[255&K]+s[V>>8]+s[255&V]+s[W>>8]+s[255&W]+s[U>>8]+s[255&U]+s[B>>8]+s[255&B]+s[M>>8]+s[255&M]+s[$>>8]+s[255&$]+s[F>>8]+s[255&F]+s[O>>8]+s[255&O]+s[I>>8]+s[255&I]+s[T>>8]+s[255&T]+s[k>>8]+s[255&k]+s[E>>8]+s[255&E]+s[C>>8]+s[255&C]+s[b>>8]+s[255&b]+s[v>>8]+s[255&v]+s[m>>8]+s[255&m]+s[h>>8]+s[255&h]+s[c>>8]+s[255&c]+s[i>>8]+s[255&i]+s[r>>8]+s[255&r],1024)}function K(n){var l,e=n.length-3,t=p[1024].offset,u=0,r=0|t[63],o=0,i=0|t[62],a=0,c=0|t[61],d=0,h=0|t[60],f=0,m=0|t[59],y=0,v=0|t[58],w=0,b=0|t[57],S=0,C=0|t[56],D=0,E=0|t[55],_=0,k=0|t[54],x=0,T=0|t[53],P=0,I=0|t[52],A=0,O=0|t[51],R=0,F=0|t[50],L=0,$=0|t[49],j=0,M=0|t[48],N=0,B=0|t[47],H=0,U=0|t[46],q=0,W=0|t[45],z=0,V=0|t[44],G=0,K=0|t[43],X=0,J=0|t[42],Z=0,Y=0|t[41],Q=0,nn=0|t[40],ln=0,en=0|t[39],tn=0,un=0|t[38],rn=0,on=0|t[37],sn=0,an=0|t[36],cn=0,dn=0|t[35],hn=0,fn=0|t[34],pn=0,mn=0|t[33],gn=0,yn=0|t[32],vn=0,wn=0|t[31],bn=0,Sn=0|t[30],Cn=0,Dn=0|t[29],En=0,_n=0|t[28],kn=0,xn=0|t[27],Tn=0,Pn=0|t[26],In=0,An=0|t[25],On=0,Rn=0|t[24],Fn=0,Ln=0|t[23],$n=0,jn=0|t[22],Mn=0,Nn=0|t[21],Bn=0,Hn=0|t[20],Un=0,qn=0|t[19],Wn=0,zn=0|t[18],Vn=0,Gn=0|t[17],Kn=0,Xn=0|t[16],Jn=0,Zn=0|t[15],Yn=0,Qn=0|t[14],nl=0,ll=0|t[13],el=0,tl=0|t[12],ul=0,rl=0|t[11],ol=0,il=0|t[10],sl=0,al=0|t[9],cl=0,dl=0|t[8],hl=0,fl=0|t[7],pl=0,ml=0|t[6],gl=0,yl=0|t[5],vl=0,wl=0|t[4],bl=0,Sl=0|t[3],Cl=0,Dl=0|t[2],El=0,_l=0|t[1],kl=0,xl=0|t[0];for(l=0;l<e;)o=397*i,a=397*c,d=397*h,f=397*m,y=397*v,w=397*b,S=397*C,D=397*E,_=397*k,x=397*T,P=397*I,A=397*O,R=397*F,L=397*$,j=397*M,N=397*B,H=397*U,q=397*W,z=397*V,G=397*K,X=397*J,Z=397*Y,Q=397*nn,ln=397*en,tn=397*un,rn=397*on,sn=397*an,cn=397*dn,hn=397*fn,pn=397*mn,gn=397*yn,vn=397*wn,bn=397*Sn,Cn=397*Dn,En=397*_n,kn=397*xn,Tn=397*Pn,In=397*An,On=397*Rn,Fn=397*Ln,$n=397*jn,Mn=397*Nn,Bn=397*Hn,Un=397*qn,Wn=397*zn,Vn=397*Gn,Kn=397*Xn,Jn=397*Zn,Yn=397*Qn,nl=397*ll,el=397*tl,ul=397*rl,ol=397*il,sl=397*al,cl=397*dl,hl=397*fl,pl=397*ml,gl=397*yl,vl=397*wl,bl=397*Sl,Cl=397*Dl,El=397*_l,kl=397*xl,Mn+=r<<8,Bn+=i<<8,Un+=c<<8,Wn+=h<<8,Vn+=m<<8,Kn+=v<<8,Jn+=b<<8,Yn+=C<<8,nl+=E<<8,el+=k<<8,ul+=T<<8,ol+=I<<8,sl+=O<<8,cl+=F<<8,hl+=$<<8,pl+=M<<8,gl+=B<<8,vl+=U<<8,bl+=W<<8,Cl+=V<<8,El+=K<<8,r=65535&(u=397*r),xl=(kl+=J<<8)+((El+=(Cl+=(bl+=(vl+=(gl+=(pl+=(hl+=(cl+=(sl+=(ol+=(ul+=(el+=(nl+=(Yn+=(Jn+=(Kn+=(Vn+=(Wn+=(Un+=(Bn+=(Mn+=($n+=(Fn+=(On+=(In+=(Tn+=(kn+=(En+=(Cn+=(bn+=(vn+=(gn+=(pn+=(hn+=(cn+=(sn+=(rn+=(tn+=(ln+=(Q+=(Z+=(X+=(G+=(z+=(q+=(H+=(N+=(j+=(L+=(R+=(A+=(P+=(x+=(_+=(D+=(S+=(w+=(y+=(f+=(d+=(a+=(o+=u>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)&65535,o=397*(i=65535&o),a=397*(c=65535&a),d=397*(h=65535&d),f=397*(m=65535&f),y=397*(v=65535&y),w=397*(b=65535&w),S=397*(C=65535&S),D=397*(E=65535&D),_=397*(k=65535&_),x=397*(T=65535&x),P=397*(I=65535&P),A=397*(O=65535&A),R=397*(F=65535&R),L=397*($=65535&L),j=397*(M=65535&j),N=397*(B=65535&N),H=397*(U=65535&H),q=397*(W=65535&q),z=397*(V=65535&z),G=397*(K=65535&G),X=397*(J=65535&X),Z=397*(Y=65535&Z),Q=397*(nn=65535&Q),ln=397*(en=65535&ln),tn=397*(un=65535&tn),rn=397*(on=65535&rn),sn=397*(an=65535&sn),cn=397*(dn=65535&cn),hn=397*(fn=65535&hn),pn=397*(mn=65535&pn),gn=397*(yn=65535&gn),vn=397*(wn=65535&vn),bn=397*(Sn=65535&bn),Cn=397*(Dn=65535&Cn),En=397*(_n=65535&En),kn=397*(xn=65535&kn),Tn=397*(Pn=65535&Tn),In=397*(An=65535&In),On=397*(Rn=65535&On),Fn=397*(Ln=65535&Fn),$n=397*(jn=65535&$n),Mn=397*(Nn=65535&Mn),Bn=397*(Hn=65535&Bn),Un=397*(qn=65535&Un),Wn=397*(zn=65535&Wn),Vn=397*(Gn=65535&Vn),Kn=397*(Xn=65535&Kn),Jn=397*(Zn=65535&Jn),Yn=397*(Qn=65535&Yn),nl=397*(ll=65535&nl),el=397*(tl=65535&el),ul=397*(rl=65535&ul),ol=397*(il=65535&ol),sl=397*(al=65535&sl),cl=397*(dl=65535&cl),hl=397*(fl=65535&hl),pl=397*(ml=65535&pl),gl=397*(yl=65535&gl),vl=397*(wl=65535&vl),bl=397*(Sl=65535&bl),Cl=397*(Dl=65535&Cl),El=397*(_l=65535&El),kl=397*xl,Mn+=(r^=n.charCodeAt(l++))<<8,Bn+=i<<8,Un+=c<<8,Wn+=h<<8,Vn+=m<<8,Kn+=v<<8,Jn+=b<<8,Yn+=C<<8,nl+=E<<8,el+=k<<8,ul+=T<<8,ol+=I<<8,sl+=O<<8,cl+=F<<8,hl+=$<<8,pl+=M<<8,gl+=B<<8,vl+=U<<8,bl+=W<<8,Cl+=V<<8,El+=K<<8,r=65535&(u=397*r),xl=(kl+=J<<8)+((El+=(Cl+=(bl+=(vl+=(gl+=(pl+=(hl+=(cl+=(sl+=(ol+=(ul+=(el+=(nl+=(Yn+=(Jn+=(Kn+=(Vn+=(Wn+=(Un+=(Bn+=(Mn+=($n+=(Fn+=(On+=(In+=(Tn+=(kn+=(En+=(Cn+=(bn+=(vn+=(gn+=(pn+=(hn+=(cn+=(sn+=(rn+=(tn+=(ln+=(Q+=(Z+=(X+=(G+=(z+=(q+=(H+=(N+=(j+=(L+=(R+=(A+=(P+=(x+=(_+=(D+=(S+=(w+=(y+=(f+=(d+=(a+=(o+=u>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)&65535,o=397*(i=65535&o),a=397*(c=65535&a),d=397*(h=65535&d),f=397*(m=65535&f),y=397*(v=65535&y),w=397*(b=65535&w),S=397*(C=65535&S),D=397*(E=65535&D),_=397*(k=65535&_),x=397*(T=65535&x),P=397*(I=65535&P),A=397*(O=65535&A),R=397*(F=65535&R),L=397*($=65535&L),j=397*(M=65535&j),N=397*(B=65535&N),H=397*(U=65535&H),q=397*(W=65535&q),z=397*(V=65535&z),G=397*(K=65535&G),X=397*(J=65535&X),Z=397*(Y=65535&Z),Q=397*(nn=65535&Q),ln=397*(en=65535&ln),tn=397*(un=65535&tn),rn=397*(on=65535&rn),sn=397*(an=65535&sn),cn=397*(dn=65535&cn),hn=397*(fn=65535&hn),pn=397*(mn=65535&pn),gn=397*(yn=65535&gn),vn=397*(wn=65535&vn),bn=397*(Sn=65535&bn),Cn=397*(Dn=65535&Cn),En=397*(_n=65535&En),kn=397*(xn=65535&kn),Tn=397*(Pn=65535&Tn),In=397*(An=65535&In),On=397*(Rn=65535&On),Fn=397*(Ln=65535&Fn),$n=397*(jn=65535&$n),Mn=397*(Nn=65535&Mn),Bn=397*(Hn=65535&Bn),Un=397*(qn=65535&Un),Wn=397*(zn=65535&Wn),Vn=397*(Gn=65535&Vn),Kn=397*(Xn=65535&Kn),Jn=397*(Zn=65535&Jn),Yn=397*(Qn=65535&Yn),nl=397*(ll=65535&nl),el=397*(tl=65535&el),ul=397*(rl=65535&ul),ol=397*(il=65535&ol),sl=397*(al=65535&sl),cl=397*(dl=65535&cl),hl=397*(fl=65535&hl),pl=397*(ml=65535&pl),gl=397*(yl=65535&gl),vl=397*(wl=65535&vl),bl=397*(Sl=65535&bl),Cl=397*(Dl=65535&Cl),El=397*(_l=65535&El),kl=397*xl,Mn+=(r^=n.charCodeAt(l++))<<8,Bn+=i<<8,Un+=c<<8,Wn+=h<<8,Vn+=m<<8,Kn+=v<<8,Jn+=b<<8,Yn+=C<<8,nl+=E<<8,el+=k<<8,ul+=T<<8,ol+=I<<8,sl+=O<<8,cl+=F<<8,hl+=$<<8,pl+=M<<8,gl+=B<<8,vl+=U<<8,bl+=W<<8,Cl+=V<<8,El+=K<<8,r=65535&(u=397*r),xl=(kl+=J<<8)+((El+=(Cl+=(bl+=(vl+=(gl+=(pl+=(hl+=(cl+=(sl+=(ol+=(ul+=(el+=(nl+=(Yn+=(Jn+=(Kn+=(Vn+=(Wn+=(Un+=(Bn+=(Mn+=($n+=(Fn+=(On+=(In+=(Tn+=(kn+=(En+=(Cn+=(bn+=(vn+=(gn+=(pn+=(hn+=(cn+=(sn+=(rn+=(tn+=(ln+=(Q+=(Z+=(X+=(G+=(z+=(q+=(H+=(N+=(j+=(L+=(R+=(A+=(P+=(x+=(_+=(D+=(S+=(w+=(y+=(f+=(d+=(a+=(o+=u>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)&65535,o=397*(i=65535&o),a=397*(c=65535&a),d=397*(h=65535&d),f=397*(m=65535&f),y=397*(v=65535&y),w=397*(b=65535&w),S=397*(C=65535&S),D=397*(E=65535&D),_=397*(k=65535&_),x=397*(T=65535&x),P=397*(I=65535&P),A=397*(O=65535&A),R=397*(F=65535&R),L=397*($=65535&L),j=397*(M=65535&j),N=397*(B=65535&N),H=397*(U=65535&H),q=397*(W=65535&q),z=397*(V=65535&z),G=397*(K=65535&G),X=397*(J=65535&X),Z=397*(Y=65535&Z),Q=397*(nn=65535&Q),ln=397*(en=65535&ln),tn=397*(un=65535&tn),rn=397*(on=65535&rn),sn=397*(an=65535&sn),cn=397*(dn=65535&cn),hn=397*(fn=65535&hn),pn=397*(mn=65535&pn),gn=397*(yn=65535&gn),vn=397*(wn=65535&vn),bn=397*(Sn=65535&bn),Cn=397*(Dn=65535&Cn),En=397*(_n=65535&En),kn=397*(xn=65535&kn),Tn=397*(Pn=65535&Tn),In=397*(An=65535&In),On=397*(Rn=65535&On),Fn=397*(Ln=65535&Fn),$n=397*(jn=65535&$n),Mn=397*(Nn=65535&Mn),Bn=397*(Hn=65535&Bn),Un=397*(qn=65535&Un),Wn=397*(zn=65535&Wn),Vn=397*(Gn=65535&Vn),Kn=397*(Xn=65535&Kn),Jn=397*(Zn=65535&Jn),Yn=397*(Qn=65535&Yn),nl=397*(ll=65535&nl),el=397*(tl=65535&el),ul=397*(rl=65535&ul),ol=397*(il=65535&ol),sl=397*(al=65535&sl),cl=397*(dl=65535&cl),hl=397*(fl=65535&hl),pl=397*(ml=65535&pl),gl=397*(yl=65535&gl),vl=397*(wl=65535&vl),bl=397*(Sl=65535&bl),Cl=397*(Dl=65535&Cl),El=397*(_l=65535&El),kl=397*xl,Mn+=(r^=n.charCodeAt(l++))<<8,Bn+=i<<8,Un+=c<<8,Wn+=h<<8,Vn+=m<<8,Kn+=v<<8,Jn+=b<<8,Yn+=C<<8,nl+=E<<8,el+=k<<8,ul+=T<<8,ol+=I<<8,sl+=O<<8,cl+=F<<8,hl+=$<<8,pl+=M<<8,gl+=B<<8,vl+=U<<8,bl+=W<<8,Cl+=V<<8,El+=K<<8,kl+=J<<8,r=65535&(u=397*r),i=65535&(o+=u>>>16),c=65535&(a+=o>>>16),h=65535&(d+=a>>>16),m=65535&(f+=d>>>16),v=65535&(y+=f>>>16),b=65535&(w+=y>>>16),C=65535&(S+=w>>>16),E=65535&(D+=S>>>16),k=65535&(_+=D>>>16),T=65535&(x+=_>>>16),I=65535&(P+=x>>>16),O=65535&(A+=P>>>16),F=65535&(R+=A>>>16),$=65535&(L+=R>>>16),M=65535&(j+=L>>>16),B=65535&(N+=j>>>16),U=65535&(H+=N>>>16),W=65535&(q+=H>>>16),V=65535&(z+=q>>>16),K=65535&(G+=z>>>16),J=65535&(X+=G>>>16),Y=65535&(Z+=X>>>16),nn=65535&(Q+=Z>>>16),en=65535&(ln+=Q>>>16),un=65535&(tn+=ln>>>16),on=65535&(rn+=tn>>>16),an=65535&(sn+=rn>>>16),dn=65535&(cn+=sn>>>16),fn=65535&(hn+=cn>>>16),mn=65535&(pn+=hn>>>16),yn=65535&(gn+=pn>>>16),wn=65535&(vn+=gn>>>16),Sn=65535&(bn+=vn>>>16),Dn=65535&(Cn+=bn>>>16),_n=65535&(En+=Cn>>>16),xn=65535&(kn+=En>>>16),Pn=65535&(Tn+=kn>>>16),An=65535&(In+=Tn>>>16),Rn=65535&(On+=In>>>16),Ln=65535&(Fn+=On>>>16),jn=65535&($n+=Fn>>>16),Nn=65535&(Mn+=$n>>>16),Hn=65535&(Bn+=Mn>>>16),qn=65535&(Un+=Bn>>>16),zn=65535&(Wn+=Un>>>16),Gn=65535&(Vn+=Wn>>>16),Xn=65535&(Kn+=Vn>>>16),Zn=65535&(Jn+=Kn>>>16),Qn=65535&(Yn+=Jn>>>16),ll=65535&(nl+=Yn>>>16),tl=65535&(el+=nl>>>16),rl=65535&(ul+=el>>>16),il=65535&(ol+=ul>>>16),al=65535&(sl+=ol>>>16),dl=65535&(cl+=sl>>>16),fl=65535&(hl+=cl>>>16),ml=65535&(pl+=hl>>>16),yl=65535&(gl+=pl>>>16),wl=65535&(vl+=gl>>>16),Sl=65535&(bl+=vl>>>16),Dl=65535&(Cl+=bl>>>16),xl=kl+((El+=Cl>>>16)>>>16)&65535,_l=65535&El,r^=n.charCodeAt(l++);for(;l<e+3;)o=397*i,a=397*c,d=397*h,f=397*m,y=397*v,w=397*b,S=397*C,D=397*E,_=397*k,x=397*T,P=397*I,A=397*O,R=397*F,L=397*$,j=397*M,N=397*B,H=397*U,q=397*W,z=397*V,G=397*K,X=397*J,Z=397*Y,Q=397*nn,ln=397*en,tn=397*un,rn=397*on,sn=397*an,cn=397*dn,hn=397*fn,pn=397*mn,gn=397*yn,vn=397*wn,bn=397*Sn,Cn=397*Dn,En=397*_n,kn=397*xn,Tn=397*Pn,In=397*An,On=397*Rn,Fn=397*Ln,$n=397*jn,Mn=397*Nn,Bn=397*Hn,Un=397*qn,Wn=397*zn,Vn=397*Gn,Kn=397*Xn,Jn=397*Zn,Yn=397*Qn,nl=397*ll,el=397*tl,ul=397*rl,ol=397*il,sl=397*al,cl=397*dl,hl=397*fl,pl=397*ml,gl=397*yl,vl=397*wl,bl=397*Sl,Cl=397*Dl,El=397*_l,kl=397*xl,Mn+=r<<8,Bn+=i<<8,Un+=c<<8,Wn+=h<<8,Vn+=m<<8,Kn+=v<<8,Jn+=b<<8,Yn+=C<<8,nl+=E<<8,el+=k<<8,ul+=T<<8,ol+=I<<8,sl+=O<<8,cl+=F<<8,hl+=$<<8,pl+=M<<8,gl+=B<<8,vl+=U<<8,bl+=W<<8,Cl+=V<<8,El+=K<<8,kl+=J<<8,r=65535&(u=397*r),i=65535&(o+=u>>>16),c=65535&(a+=o>>>16),h=65535&(d+=a>>>16),m=65535&(f+=d>>>16),v=65535&(y+=f>>>16),b=65535&(w+=y>>>16),C=65535&(S+=w>>>16),E=65535&(D+=S>>>16),k=65535&(_+=D>>>16),T=65535&(x+=_>>>16),I=65535&(P+=x>>>16),O=65535&(A+=P>>>16),F=65535&(R+=A>>>16),$=65535&(L+=R>>>16),M=65535&(j+=L>>>16),B=65535&(N+=j>>>16),U=65535&(H+=N>>>16),W=65535&(q+=H>>>16),V=65535&(z+=q>>>16),K=65535&(G+=z>>>16),J=65535&(X+=G>>>16),Y=65535&(Z+=X>>>16),nn=65535&(Q+=Z>>>16),en=65535&(ln+=Q>>>16),un=65535&(tn+=ln>>>16),on=65535&(rn+=tn>>>16),an=65535&(sn+=rn>>>16),dn=65535&(cn+=sn>>>16),fn=65535&(hn+=cn>>>16),mn=65535&(pn+=hn>>>16),yn=65535&(gn+=pn>>>16),wn=65535&(vn+=gn>>>16),Sn=65535&(bn+=vn>>>16),Dn=65535&(Cn+=bn>>>16),_n=65535&(En+=Cn>>>16),xn=65535&(kn+=En>>>16),Pn=65535&(Tn+=kn>>>16),An=65535&(In+=Tn>>>16),Rn=65535&(On+=In>>>16),Ln=65535&(Fn+=On>>>16),jn=65535&($n+=Fn>>>16),Nn=65535&(Mn+=$n>>>16),Hn=65535&(Bn+=Mn>>>16),qn=65535&(Un+=Bn>>>16),zn=65535&(Wn+=Un>>>16),Gn=65535&(Vn+=Wn>>>16),Xn=65535&(Kn+=Vn>>>16),Zn=65535&(Jn+=Kn>>>16),Qn=65535&(Yn+=Jn>>>16),ll=65535&(nl+=Yn>>>16),tl=65535&(el+=nl>>>16),rl=65535&(ul+=el>>>16),il=65535&(ol+=ul>>>16),al=65535&(sl+=ol>>>16),dl=65535&(cl+=sl>>>16),fl=65535&(hl+=cl>>>16),ml=65535&(pl+=hl>>>16),yl=65535&(gl+=pl>>>16),wl=65535&(vl+=gl>>>16),Sl=65535&(bl+=vl>>>16),Dl=65535&(Cl+=bl>>>16),xl=kl+((El+=Cl>>>16)>>>16)&65535,_l=65535&El,r^=n.charCodeAt(l++);return g(s[xl>>8]+s[255&xl]+s[_l>>8]+s[255&_l]+s[Dl>>8]+s[255&Dl]+s[Sl>>8]+s[255&Sl]+s[wl>>8]+s[255&wl]+s[yl>>8]+s[255&yl]+s[ml>>8]+s[255&ml]+s[fl>>8]+s[255&fl]+s[dl>>8]+s[255&dl]+s[al>>8]+s[255&al]+s[il>>8]+s[255&il]+s[rl>>8]+s[255&rl]+s[tl>>8]+s[255&tl]+s[ll>>8]+s[255&ll]+s[Qn>>8]+s[255&Qn]+s[Zn>>8]+s[255&Zn]+s[Xn>>8]+s[255&Xn]+s[Gn>>8]+s[255&Gn]+s[zn>>8]+s[255&zn]+s[qn>>8]+s[255&qn]+s[Hn>>8]+s[255&Hn]+s[Nn>>8]+s[255&Nn]+s[jn>>8]+s[255&jn]+s[Ln>>8]+s[255&Ln]+s[Rn>>8]+s[255&Rn]+s[An>>8]+s[255&An]+s[Pn>>8]+s[255&Pn]+s[xn>>8]+s[255&xn]+s[_n>>8]+s[255&_n]+s[Dn>>8]+s[255&Dn]+s[Sn>>8]+s[255&Sn]+s[wn>>8]+s[255&wn]+s[yn>>8]+s[255&yn]+s[mn>>8]+s[255&mn]+s[fn>>8]+s[255&fn]+s[dn>>8]+s[255&dn]+s[an>>8]+s[255&an]+s[on>>8]+s[255&on]+s[un>>8]+s[255&un]+s[en>>8]+s[255&en]+s[nn>>8]+s[255&nn]+s[Y>>8]+s[255&Y]+s[J>>8]+s[255&J]+s[K>>8]+s[255&K]+s[V>>8]+s[255&V]+s[W>>8]+s[255&W]+s[U>>8]+s[255&U]+s[B>>8]+s[255&B]+s[M>>8]+s[255&M]+s[$>>8]+s[255&$]+s[F>>8]+s[255&F]+s[O>>8]+s[255&O]+s[I>>8]+s[255&I]+s[T>>8]+s[255&T]+s[k>>8]+s[255&k]+s[E>>8]+s[255&E]+s[C>>8]+s[255&C]+s[b>>8]+s[255&b]+s[v>>8]+s[255&v]+s[m>>8]+s[255&m]+s[h>>8]+s[255&h]+s[c>>8]+s[255&c]+s[i>>8]+s[255&i]+s[r>>8]+s[255&r],1024)}function X(n){var l,e,t=n.length,u=p[1024].offset,r=0,o=0|u[63],i=0,a=0|u[62],c=0,d=0|u[61],h=0,f=0|u[60],m=0,y=0|u[59],v=0,w=0|u[58],b=0,S=0|u[57],C=0,D=0|u[56],E=0,_=0|u[55],k=0,x=0|u[54],T=0,P=0|u[53],I=0,A=0|u[52],O=0,R=0|u[51],F=0,L=0|u[50],$=0,j=0|u[49],M=0,N=0|u[48],B=0,H=0|u[47],U=0,q=0|u[46],W=0,z=0|u[45],V=0,G=0|u[44],K=0,X=0|u[43],J=0,Z=0|u[42],Y=0,Q=0|u[41],nn=0,ln=0|u[40],en=0,tn=0|u[39],un=0,rn=0|u[38],on=0,sn=0|u[37],an=0,cn=0|u[36],dn=0,hn=0|u[35],fn=0,pn=0|u[34],mn=0,gn=0|u[33],yn=0,vn=0|u[32],wn=0,bn=0|u[31],Sn=0,Cn=0|u[30],Dn=0,En=0|u[29],_n=0,kn=0|u[28],xn=0,Tn=0|u[27],Pn=0,In=0|u[26],An=0,On=0|u[25],Rn=0,Fn=0|u[24],Ln=0,$n=0|u[23],jn=0,Mn=0|u[22],Nn=0,Bn=0|u[21],Hn=0,Un=0|u[20],qn=0,Wn=0|u[19],zn=0,Vn=0|u[18],Gn=0,Kn=0|u[17],Xn=0,Jn=0|u[16],Zn=0,Yn=0|u[15],Qn=0,nl=0|u[14],ll=0,el=0|u[13],tl=0,ul=0|u[12],rl=0,ol=0|u[11],il=0,sl=0|u[10],al=0,cl=0|u[9],dl=0,hl=0|u[8],fl=0,pl=0|u[7],ml=0,gl=0|u[6],yl=0,vl=0|u[5],wl=0,bl=0|u[4],Sl=0,Cl=0|u[3],Dl=0,El=0|u[2],_l=0,kl=0|u[1],xl=0,Tl=0|u[0];for(e=0;e<t;e++)(l=n.charCodeAt(e))<128?o^=l:l<2048?(i=397*a,c=397*d,h=397*f,m=397*y,v=397*w,b=397*S,C=397*D,E=397*_,k=397*x,T=397*P,I=397*A,O=397*R,F=397*L,$=397*j,M=397*N,B=397*H,U=397*q,W=397*z,V=397*G,K=397*X,J=397*Z,Y=397*Q,nn=397*ln,en=397*tn,un=397*rn,on=397*sn,an=397*cn,dn=397*hn,fn=397*pn,mn=397*gn,yn=397*vn,wn=397*bn,Sn=397*Cn,Dn=397*En,_n=397*kn,xn=397*Tn,Pn=397*In,An=397*On,Rn=397*Fn,Ln=397*$n,jn=397*Mn,Nn=397*Bn,Hn=397*Un,qn=397*Wn,zn=397*Vn,Gn=397*Kn,Xn=397*Jn,Zn=397*Yn,Qn=397*nl,ll=397*el,tl=397*ul,rl=397*ol,il=397*sl,al=397*cl,dl=397*hl,fl=397*pl,ml=397*gl,yl=397*vl,wl=397*bl,Sl=397*Cl,Dl=397*El,_l=397*kl,xl=397*Tl,Nn+=(o^=l>>6|192)<<8,Hn+=a<<8,qn+=d<<8,zn+=f<<8,Gn+=y<<8,Xn+=w<<8,Zn+=S<<8,Qn+=D<<8,ll+=_<<8,tl+=x<<8,rl+=P<<8,il+=A<<8,al+=R<<8,dl+=L<<8,fl+=j<<8,ml+=N<<8,yl+=H<<8,wl+=q<<8,Sl+=z<<8,Dl+=G<<8,_l+=X<<8,xl+=Z<<8,o=65535&(r=397*o),a=65535&(i+=r>>>16),d=65535&(c+=i>>>16),f=65535&(h+=c>>>16),y=65535&(m+=h>>>16),w=65535&(v+=m>>>16),S=65535&(b+=v>>>16),D=65535&(C+=b>>>16),_=65535&(E+=C>>>16),x=65535&(k+=E>>>16),P=65535&(T+=k>>>16),A=65535&(I+=T>>>16),R=65535&(O+=I>>>16),L=65535&(F+=O>>>16),j=65535&($+=F>>>16),N=65535&(M+=$>>>16),H=65535&(B+=M>>>16),q=65535&(U+=B>>>16),z=65535&(W+=U>>>16),G=65535&(V+=W>>>16),X=65535&(K+=V>>>16),Z=65535&(J+=K>>>16),Q=65535&(Y+=J>>>16),ln=65535&(nn+=Y>>>16),tn=65535&(en+=nn>>>16),rn=65535&(un+=en>>>16),sn=65535&(on+=un>>>16),cn=65535&(an+=on>>>16),hn=65535&(dn+=an>>>16),pn=65535&(fn+=dn>>>16),gn=65535&(mn+=fn>>>16),vn=65535&(yn+=mn>>>16),bn=65535&(wn+=yn>>>16),Cn=65535&(Sn+=wn>>>16),En=65535&(Dn+=Sn>>>16),kn=65535&(_n+=Dn>>>16),Tn=65535&(xn+=_n>>>16),In=65535&(Pn+=xn>>>16),On=65535&(An+=Pn>>>16),Fn=65535&(Rn+=An>>>16),$n=65535&(Ln+=Rn>>>16),Mn=65535&(jn+=Ln>>>16),Bn=65535&(Nn+=jn>>>16),Un=65535&(Hn+=Nn>>>16),Wn=65535&(qn+=Hn>>>16),Vn=65535&(zn+=qn>>>16),Kn=65535&(Gn+=zn>>>16),Jn=65535&(Xn+=Gn>>>16),Yn=65535&(Zn+=Xn>>>16),nl=65535&(Qn+=Zn>>>16),el=65535&(ll+=Qn>>>16),ul=65535&(tl+=ll>>>16),ol=65535&(rl+=tl>>>16),sl=65535&(il+=rl>>>16),cl=65535&(al+=il>>>16),hl=65535&(dl+=al>>>16),pl=65535&(fl+=dl>>>16),gl=65535&(ml+=fl>>>16),vl=65535&(yl+=ml>>>16),bl=65535&(wl+=yl>>>16),Cl=65535&(Sl+=wl>>>16),El=65535&(Dl+=Sl>>>16),Tl=xl+((_l+=Dl>>>16)>>>16)&65535,kl=65535&_l,o^=63&l|128):55296==(64512&l)&&e+1<t&&56320==(64512&n.charCodeAt(e+1))?(i=397*a,c=397*d,h=397*f,m=397*y,v=397*w,b=397*S,C=397*D,E=397*_,k=397*x,T=397*P,I=397*A,O=397*R,F=397*L,$=397*j,M=397*N,B=397*H,U=397*q,W=397*z,V=397*G,K=397*X,J=397*Z,Y=397*Q,nn=397*ln,en=397*tn,un=397*rn,on=397*sn,an=397*cn,dn=397*hn,fn=397*pn,mn=397*gn,yn=397*vn,wn=397*bn,Sn=397*Cn,Dn=397*En,_n=397*kn,xn=397*Tn,Pn=397*In,An=397*On,Rn=397*Fn,Ln=397*$n,jn=397*Mn,Nn=397*Bn,Hn=397*Un,qn=397*Wn,zn=397*Vn,Gn=397*Kn,Xn=397*Jn,Zn=397*Yn,Qn=397*nl,ll=397*el,tl=397*ul,rl=397*ol,il=397*sl,al=397*cl,dl=397*hl,fl=397*pl,ml=397*gl,yl=397*vl,wl=397*bl,Sl=397*Cl,Dl=397*El,_l=397*kl,xl=397*Tl,Nn+=(o^=(l=65536+((1023&l)<<10)+(1023&n.charCodeAt(++e)))>>18|240)<<8,Hn+=a<<8,qn+=d<<8,zn+=f<<8,Gn+=y<<8,Xn+=w<<8,Zn+=S<<8,Qn+=D<<8,ll+=_<<8,tl+=x<<8,rl+=P<<8,il+=A<<8,al+=R<<8,dl+=L<<8,fl+=j<<8,ml+=N<<8,yl+=H<<8,wl+=q<<8,Sl+=z<<8,Dl+=G<<8,_l+=X<<8,o=65535&(r=397*o),Tl=(xl+=Z<<8)+((_l+=(Dl+=(Sl+=(wl+=(yl+=(ml+=(fl+=(dl+=(al+=(il+=(rl+=(tl+=(ll+=(Qn+=(Zn+=(Xn+=(Gn+=(zn+=(qn+=(Hn+=(Nn+=(jn+=(Ln+=(Rn+=(An+=(Pn+=(xn+=(_n+=(Dn+=(Sn+=(wn+=(yn+=(mn+=(fn+=(dn+=(an+=(on+=(un+=(en+=(nn+=(Y+=(J+=(K+=(V+=(W+=(U+=(B+=(M+=($+=(F+=(O+=(I+=(T+=(k+=(E+=(C+=(b+=(v+=(m+=(h+=(c+=(i+=r>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)&65535,i=397*(a=65535&i),c=397*(d=65535&c),h=397*(f=65535&h),m=397*(y=65535&m),v=397*(w=65535&v),b=397*(S=65535&b),C=397*(D=65535&C),E=397*(_=65535&E),k=397*(x=65535&k),T=397*(P=65535&T),I=397*(A=65535&I),O=397*(R=65535&O),F=397*(L=65535&F),$=397*(j=65535&$),M=397*(N=65535&M),B=397*(H=65535&B),U=397*(q=65535&U),W=397*(z=65535&W),V=397*(G=65535&V),K=397*(X=65535&K),J=397*(Z=65535&J),Y=397*(Q=65535&Y),nn=397*(ln=65535&nn),en=397*(tn=65535&en),un=397*(rn=65535&un),on=397*(sn=65535&on),an=397*(cn=65535&an),dn=397*(hn=65535&dn),fn=397*(pn=65535&fn),mn=397*(gn=65535&mn),yn=397*(vn=65535&yn),wn=397*(bn=65535&wn),Sn=397*(Cn=65535&Sn),Dn=397*(En=65535&Dn),_n=397*(kn=65535&_n),xn=397*(Tn=65535&xn),Pn=397*(In=65535&Pn),An=397*(On=65535&An),Rn=397*(Fn=65535&Rn),Ln=397*($n=65535&Ln),jn=397*(Mn=65535&jn),Nn=397*(Bn=65535&Nn),Hn=397*(Un=65535&Hn),qn=397*(Wn=65535&qn),zn=397*(Vn=65535&zn),Gn=397*(Kn=65535&Gn),Xn=397*(Jn=65535&Xn),Zn=397*(Yn=65535&Zn),Qn=397*(nl=65535&Qn),ll=397*(el=65535&ll),tl=397*(ul=65535&tl),rl=397*(ol=65535&rl),il=397*(sl=65535&il),al=397*(cl=65535&al),dl=397*(hl=65535&dl),fl=397*(pl=65535&fl),ml=397*(gl=65535&ml),yl=397*(vl=65535&yl),wl=397*(bl=65535&wl),Sl=397*(Cl=65535&Sl),Dl=397*(El=65535&Dl),_l=397*(kl=65535&_l),xl=397*Tl,Nn+=(o^=l>>12&63|128)<<8,Hn+=a<<8,qn+=d<<8,zn+=f<<8,Gn+=y<<8,Xn+=w<<8,Zn+=S<<8,Qn+=D<<8,ll+=_<<8,tl+=x<<8,rl+=P<<8,il+=A<<8,al+=R<<8,dl+=L<<8,fl+=j<<8,ml+=N<<8,yl+=H<<8,wl+=q<<8,Sl+=z<<8,Dl+=G<<8,_l+=X<<8,o=65535&(r=397*o),Tl=(xl+=Z<<8)+((_l+=(Dl+=(Sl+=(wl+=(yl+=(ml+=(fl+=(dl+=(al+=(il+=(rl+=(tl+=(ll+=(Qn+=(Zn+=(Xn+=(Gn+=(zn+=(qn+=(Hn+=(Nn+=(jn+=(Ln+=(Rn+=(An+=(Pn+=(xn+=(_n+=(Dn+=(Sn+=(wn+=(yn+=(mn+=(fn+=(dn+=(an+=(on+=(un+=(en+=(nn+=(Y+=(J+=(K+=(V+=(W+=(U+=(B+=(M+=($+=(F+=(O+=(I+=(T+=(k+=(E+=(C+=(b+=(v+=(m+=(h+=(c+=(i+=r>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)&65535,i=397*(a=65535&i),c=397*(d=65535&c),h=397*(f=65535&h),m=397*(y=65535&m),v=397*(w=65535&v),b=397*(S=65535&b),C=397*(D=65535&C),E=397*(_=65535&E),k=397*(x=65535&k),T=397*(P=65535&T),I=397*(A=65535&I),O=397*(R=65535&O),F=397*(L=65535&F),$=397*(j=65535&$),M=397*(N=65535&M),B=397*(H=65535&B),U=397*(q=65535&U),W=397*(z=65535&W),V=397*(G=65535&V),K=397*(X=65535&K),J=397*(Z=65535&J),Y=397*(Q=65535&Y),nn=397*(ln=65535&nn),en=397*(tn=65535&en),un=397*(rn=65535&un),on=397*(sn=65535&on),an=397*(cn=65535&an),dn=397*(hn=65535&dn),fn=397*(pn=65535&fn),mn=397*(gn=65535&mn),yn=397*(vn=65535&yn),wn=397*(bn=65535&wn),Sn=397*(Cn=65535&Sn),Dn=397*(En=65535&Dn),_n=397*(kn=65535&_n),xn=397*(Tn=65535&xn),Pn=397*(In=65535&Pn),An=397*(On=65535&An),Rn=397*(Fn=65535&Rn),Ln=397*($n=65535&Ln),jn=397*(Mn=65535&jn),Nn=397*(Bn=65535&Nn),Hn=397*(Un=65535&Hn),qn=397*(Wn=65535&qn),zn=397*(Vn=65535&zn),Gn=397*(Kn=65535&Gn),Xn=397*(Jn=65535&Xn),Zn=397*(Yn=65535&Zn),Qn=397*(nl=65535&Qn),ll=397*(el=65535&ll),tl=397*(ul=65535&tl),rl=397*(ol=65535&rl),il=397*(sl=65535&il),al=397*(cl=65535&al),dl=397*(hl=65535&dl),fl=397*(pl=65535&fl),ml=397*(gl=65535&ml),yl=397*(vl=65535&yl),wl=397*(bl=65535&wl),Sl=397*(Cl=65535&Sl),Dl=397*(El=65535&Dl),_l=397*(kl=65535&_l),xl=397*Tl,Nn+=(o^=l>>6&63|128)<<8,Hn+=a<<8,qn+=d<<8,zn+=f<<8,Gn+=y<<8,Xn+=w<<8,Zn+=S<<8,Qn+=D<<8,ll+=_<<8,tl+=x<<8,rl+=P<<8,il+=A<<8,al+=R<<8,dl+=L<<8,fl+=j<<8,ml+=N<<8,yl+=H<<8,wl+=q<<8,Sl+=z<<8,Dl+=G<<8,_l+=X<<8,xl+=Z<<8,o=65535&(r=397*o),a=65535&(i+=r>>>16),d=65535&(c+=i>>>16),f=65535&(h+=c>>>16),y=65535&(m+=h>>>16),w=65535&(v+=m>>>16),S=65535&(b+=v>>>16),D=65535&(C+=b>>>16),_=65535&(E+=C>>>16),x=65535&(k+=E>>>16),P=65535&(T+=k>>>16),A=65535&(I+=T>>>16),R=65535&(O+=I>>>16),L=65535&(F+=O>>>16),j=65535&($+=F>>>16),N=65535&(M+=$>>>16),H=65535&(B+=M>>>16),q=65535&(U+=B>>>16),z=65535&(W+=U>>>16),G=65535&(V+=W>>>16),X=65535&(K+=V>>>16),Z=65535&(J+=K>>>16),Q=65535&(Y+=J>>>16),ln=65535&(nn+=Y>>>16),tn=65535&(en+=nn>>>16),rn=65535&(un+=en>>>16),sn=65535&(on+=un>>>16),cn=65535&(an+=on>>>16),hn=65535&(dn+=an>>>16),pn=65535&(fn+=dn>>>16),gn=65535&(mn+=fn>>>16),vn=65535&(yn+=mn>>>16),bn=65535&(wn+=yn>>>16),Cn=65535&(Sn+=wn>>>16),En=65535&(Dn+=Sn>>>16),kn=65535&(_n+=Dn>>>16),Tn=65535&(xn+=_n>>>16),In=65535&(Pn+=xn>>>16),On=65535&(An+=Pn>>>16),Fn=65535&(Rn+=An>>>16),$n=65535&(Ln+=Rn>>>16),Mn=65535&(jn+=Ln>>>16),Bn=65535&(Nn+=jn>>>16),Un=65535&(Hn+=Nn>>>16),Wn=65535&(qn+=Hn>>>16),Vn=65535&(zn+=qn>>>16),Kn=65535&(Gn+=zn>>>16),Jn=65535&(Xn+=Gn>>>16),Yn=65535&(Zn+=Xn>>>16),nl=65535&(Qn+=Zn>>>16),el=65535&(ll+=Qn>>>16),ul=65535&(tl+=ll>>>16),ol=65535&(rl+=tl>>>16),sl=65535&(il+=rl>>>16),cl=65535&(al+=il>>>16),hl=65535&(dl+=al>>>16),pl=65535&(fl+=dl>>>16),gl=65535&(ml+=fl>>>16),vl=65535&(yl+=ml>>>16),bl=65535&(wl+=yl>>>16),Cl=65535&(Sl+=wl>>>16),El=65535&(Dl+=Sl>>>16),Tl=xl+((_l+=Dl>>>16)>>>16)&65535,kl=65535&_l,o^=63&l|128):(i=397*a,c=397*d,h=397*f,m=397*y,v=397*w,b=397*S,C=397*D,E=397*_,k=397*x,T=397*P,I=397*A,O=397*R,F=397*L,$=397*j,M=397*N,B=397*H,U=397*q,W=397*z,V=397*G,K=397*X,J=397*Z,Y=397*Q,nn=397*ln,en=397*tn,un=397*rn,on=397*sn,an=397*cn,dn=397*hn,fn=397*pn,mn=397*gn,yn=397*vn,wn=397*bn,Sn=397*Cn,Dn=397*En,_n=397*kn,xn=397*Tn,Pn=397*In,An=397*On,Rn=397*Fn,Ln=397*$n,jn=397*Mn,Nn=397*Bn,Hn=397*Un,qn=397*Wn,zn=397*Vn,Gn=397*Kn,Xn=397*Jn,Zn=397*Yn,Qn=397*nl,ll=397*el,tl=397*ul,rl=397*ol,il=397*sl,al=397*cl,dl=397*hl,fl=397*pl,ml=397*gl,yl=397*vl,wl=397*bl,Sl=397*Cl,Dl=397*El,_l=397*kl,xl=397*Tl,Nn+=(o^=l>>12|224)<<8,Hn+=a<<8,qn+=d<<8,zn+=f<<8,Gn+=y<<8,Xn+=w<<8,Zn+=S<<8,Qn+=D<<8,ll+=_<<8,tl+=x<<8,rl+=P<<8,il+=A<<8,al+=R<<8,dl+=L<<8,fl+=j<<8,ml+=N<<8,yl+=H<<8,wl+=q<<8,Sl+=z<<8,Dl+=G<<8,_l+=X<<8,o=65535&(r=397*o),Tl=(xl+=Z<<8)+((_l+=(Dl+=(Sl+=(wl+=(yl+=(ml+=(fl+=(dl+=(al+=(il+=(rl+=(tl+=(ll+=(Qn+=(Zn+=(Xn+=(Gn+=(zn+=(qn+=(Hn+=(Nn+=(jn+=(Ln+=(Rn+=(An+=(Pn+=(xn+=(_n+=(Dn+=(Sn+=(wn+=(yn+=(mn+=(fn+=(dn+=(an+=(on+=(un+=(en+=(nn+=(Y+=(J+=(K+=(V+=(W+=(U+=(B+=(M+=($+=(F+=(O+=(I+=(T+=(k+=(E+=(C+=(b+=(v+=(m+=(h+=(c+=(i+=r>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)&65535,i=397*(a=65535&i),c=397*(d=65535&c),h=397*(f=65535&h),m=397*(y=65535&m),v=397*(w=65535&v),b=397*(S=65535&b),C=397*(D=65535&C),E=397*(_=65535&E),k=397*(x=65535&k),T=397*(P=65535&T),I=397*(A=65535&I),O=397*(R=65535&O),F=397*(L=65535&F),$=397*(j=65535&$),M=397*(N=65535&M),B=397*(H=65535&B),U=397*(q=65535&U),W=397*(z=65535&W),V=397*(G=65535&V),K=397*(X=65535&K),J=397*(Z=65535&J),Y=397*(Q=65535&Y),nn=397*(ln=65535&nn),en=397*(tn=65535&en),un=397*(rn=65535&un),on=397*(sn=65535&on),an=397*(cn=65535&an),dn=397*(hn=65535&dn),fn=397*(pn=65535&fn),mn=397*(gn=65535&mn),yn=397*(vn=65535&yn),wn=397*(bn=65535&wn),Sn=397*(Cn=65535&Sn),Dn=397*(En=65535&Dn),_n=397*(kn=65535&_n),xn=397*(Tn=65535&xn),Pn=397*(In=65535&Pn),An=397*(On=65535&An),Rn=397*(Fn=65535&Rn),Ln=397*($n=65535&Ln),jn=397*(Mn=65535&jn),Nn=397*(Bn=65535&Nn),Hn=397*(Un=65535&Hn),qn=397*(Wn=65535&qn),zn=397*(Vn=65535&zn),Gn=397*(Kn=65535&Gn),Xn=397*(Jn=65535&Xn),Zn=397*(Yn=65535&Zn),Qn=397*(nl=65535&Qn),ll=397*(el=65535&ll),tl=397*(ul=65535&tl),rl=397*(ol=65535&rl),il=397*(sl=65535&il),al=397*(cl=65535&al),dl=397*(hl=65535&dl),fl=397*(pl=65535&fl),ml=397*(gl=65535&ml),yl=397*(vl=65535&yl),wl=397*(bl=65535&wl),Sl=397*(Cl=65535&Sl),Dl=397*(El=65535&Dl),_l=397*(kl=65535&_l),xl=397*Tl,Nn+=(o^=l>>6&63|128)<<8,Hn+=a<<8,qn+=d<<8,zn+=f<<8,Gn+=y<<8,Xn+=w<<8,Zn+=S<<8,Qn+=D<<8,ll+=_<<8,tl+=x<<8,rl+=P<<8,il+=A<<8,al+=R<<8,dl+=L<<8,fl+=j<<8,ml+=N<<8,yl+=H<<8,wl+=q<<8,Sl+=z<<8,Dl+=G<<8,_l+=X<<8,xl+=Z<<8,o=65535&(r=397*o),a=65535&(i+=r>>>16),d=65535&(c+=i>>>16),f=65535&(h+=c>>>16),y=65535&(m+=h>>>16),w=65535&(v+=m>>>16),S=65535&(b+=v>>>16),D=65535&(C+=b>>>16),_=65535&(E+=C>>>16),x=65535&(k+=E>>>16),P=65535&(T+=k>>>16),A=65535&(I+=T>>>16),R=65535&(O+=I>>>16),L=65535&(F+=O>>>16),j=65535&($+=F>>>16),N=65535&(M+=$>>>16),H=65535&(B+=M>>>16),q=65535&(U+=B>>>16),z=65535&(W+=U>>>16),G=65535&(V+=W>>>16),X=65535&(K+=V>>>16),Z=65535&(J+=K>>>16),Q=65535&(Y+=J>>>16),ln=65535&(nn+=Y>>>16),tn=65535&(en+=nn>>>16),rn=65535&(un+=en>>>16),sn=65535&(on+=un>>>16),cn=65535&(an+=on>>>16),hn=65535&(dn+=an>>>16),pn=65535&(fn+=dn>>>16),gn=65535&(mn+=fn>>>16),vn=65535&(yn+=mn>>>16),bn=65535&(wn+=yn>>>16),Cn=65535&(Sn+=wn>>>16),En=65535&(Dn+=Sn>>>16),kn=65535&(_n+=Dn>>>16),Tn=65535&(xn+=_n>>>16),In=65535&(Pn+=xn>>>16),On=65535&(An+=Pn>>>16),Fn=65535&(Rn+=An>>>16),$n=65535&(Ln+=Rn>>>16),Mn=65535&(jn+=Ln>>>16),Bn=65535&(Nn+=jn>>>16),Un=65535&(Hn+=Nn>>>16),Wn=65535&(qn+=Hn>>>16),Vn=65535&(zn+=qn>>>16),Kn=65535&(Gn+=zn>>>16),Jn=65535&(Xn+=Gn>>>16),Yn=65535&(Zn+=Xn>>>16),nl=65535&(Qn+=Zn>>>16),el=65535&(ll+=Qn>>>16),ul=65535&(tl+=ll>>>16),ol=65535&(rl+=tl>>>16),sl=65535&(il+=rl>>>16),cl=65535&(al+=il>>>16),hl=65535&(dl+=al>>>16),pl=65535&(fl+=dl>>>16),gl=65535&(ml+=fl>>>16),vl=65535&(yl+=ml>>>16),bl=65535&(wl+=yl>>>16),Cl=65535&(Sl+=wl>>>16),El=65535&(Dl+=Sl>>>16),Tl=xl+((_l+=Dl>>>16)>>>16)&65535,kl=65535&_l,o^=63&l|128),i=397*a,c=397*d,h=397*f,m=397*y,v=397*w,b=397*S,C=397*D,E=397*_,k=397*x,T=397*P,I=397*A,O=397*R,F=397*L,$=397*j,M=397*N,B=397*H,U=397*q,W=397*z,V=397*G,K=397*X,J=397*Z,Y=397*Q,nn=397*ln,en=397*tn,un=397*rn,on=397*sn,an=397*cn,dn=397*hn,fn=397*pn,mn=397*gn,yn=397*vn,wn=397*bn,Sn=397*Cn,Dn=397*En,_n=397*kn,xn=397*Tn,Pn=397*In,An=397*On,Rn=397*Fn,Ln=397*$n,jn=397*Mn,Nn=397*Bn,Hn=397*Un,qn=397*Wn,zn=397*Vn,Gn=397*Kn,Xn=397*Jn,Zn=397*Yn,Qn=397*nl,ll=397*el,tl=397*ul,rl=397*ol,il=397*sl,al=397*cl,dl=397*hl,fl=397*pl,ml=397*gl,yl=397*vl,wl=397*bl,Sl=397*Cl,Dl=397*El,_l=397*kl,xl=397*Tl,Nn+=o<<8,Hn+=a<<8,qn+=d<<8,zn+=f<<8,Gn+=y<<8,Xn+=w<<8,Zn+=S<<8,Qn+=D<<8,ll+=_<<8,tl+=x<<8,rl+=P<<8,il+=A<<8,al+=R<<8,dl+=L<<8,fl+=j<<8,ml+=N<<8,yl+=H<<8,wl+=q<<8,Sl+=z<<8,Dl+=G<<8,_l+=X<<8,xl+=Z<<8,o=65535&(r=397*o),a=65535&(i+=r>>>16),d=65535&(c+=i>>>16),f=65535&(h+=c>>>16),y=65535&(m+=h>>>16),w=65535&(v+=m>>>16),S=65535&(b+=v>>>16),D=65535&(C+=b>>>16),_=65535&(E+=C>>>16),x=65535&(k+=E>>>16),P=65535&(T+=k>>>16),A=65535&(I+=T>>>16),R=65535&(O+=I>>>16),L=65535&(F+=O>>>16),j=65535&($+=F>>>16),N=65535&(M+=$>>>16),H=65535&(B+=M>>>16),q=65535&(U+=B>>>16),z=65535&(W+=U>>>16),G=65535&(V+=W>>>16),X=65535&(K+=V>>>16),Z=65535&(J+=K>>>16),Q=65535&(Y+=J>>>16),ln=65535&(nn+=Y>>>16),tn=65535&(en+=nn>>>16),rn=65535&(un+=en>>>16),sn=65535&(on+=un>>>16),cn=65535&(an+=on>>>16),hn=65535&(dn+=an>>>16),pn=65535&(fn+=dn>>>16),gn=65535&(mn+=fn>>>16),vn=65535&(yn+=mn>>>16),bn=65535&(wn+=yn>>>16),Cn=65535&(Sn+=wn>>>16),En=65535&(Dn+=Sn>>>16),kn=65535&(_n+=Dn>>>16),Tn=65535&(xn+=_n>>>16),In=65535&(Pn+=xn>>>16),On=65535&(An+=Pn>>>16),Fn=65535&(Rn+=An>>>16),$n=65535&(Ln+=Rn>>>16),Mn=65535&(jn+=Ln>>>16),Bn=65535&(Nn+=jn>>>16),Un=65535&(Hn+=Nn>>>16),Wn=65535&(qn+=Hn>>>16),Vn=65535&(zn+=qn>>>16),Kn=65535&(Gn+=zn>>>16),Jn=65535&(Xn+=Gn>>>16),Yn=65535&(Zn+=Xn>>>16),nl=65535&(Qn+=Zn>>>16),el=65535&(ll+=Qn>>>16),ul=65535&(tl+=ll>>>16),ol=65535&(rl+=tl>>>16),sl=65535&(il+=rl>>>16),cl=65535&(al+=il>>>16),hl=65535&(dl+=al>>>16),pl=65535&(fl+=dl>>>16),gl=65535&(ml+=fl>>>16),vl=65535&(yl+=ml>>>16),bl=65535&(wl+=yl>>>16),Cl=65535&(Sl+=wl>>>16),El=65535&(Dl+=Sl>>>16),Tl=xl+((_l+=Dl>>>16)>>>16)&65535,kl=65535&_l;return g(s[Tl>>8]+s[255&Tl]+s[kl>>8]+s[255&kl]+s[El>>8]+s[255&El]+s[Cl>>8]+s[255&Cl]+s[bl>>8]+s[255&bl]+s[vl>>8]+s[255&vl]+s[gl>>8]+s[255&gl]+s[pl>>8]+s[255&pl]+s[hl>>8]+s[255&hl]+s[cl>>8]+s[255&cl]+s[sl>>8]+s[255&sl]+s[ol>>8]+s[255&ol]+s[ul>>8]+s[255&ul]+s[el>>8]+s[255&el]+s[nl>>8]+s[255&nl]+s[Yn>>8]+s[255&Yn]+s[Jn>>8]+s[255&Jn]+s[Kn>>8]+s[255&Kn]+s[Vn>>8]+s[255&Vn]+s[Wn>>8]+s[255&Wn]+s[Un>>8]+s[255&Un]+s[Bn>>8]+s[255&Bn]+s[Mn>>8]+s[255&Mn]+s[$n>>8]+s[255&$n]+s[Fn>>8]+s[255&Fn]+s[On>>8]+s[255&On]+s[In>>8]+s[255&In]+s[Tn>>8]+s[255&Tn]+s[kn>>8]+s[255&kn]+s[En>>8]+s[255&En]+s[Cn>>8]+s[255&Cn]+s[bn>>8]+s[255&bn]+s[vn>>8]+s[255&vn]+s[gn>>8]+s[255&gn]+s[pn>>8]+s[255&pn]+s[hn>>8]+s[255&hn]+s[cn>>8]+s[255&cn]+s[sn>>8]+s[255&sn]+s[rn>>8]+s[255&rn]+s[tn>>8]+s[255&tn]+s[ln>>8]+s[255&ln]+s[Q>>8]+s[255&Q]+s[Z>>8]+s[255&Z]+s[X>>8]+s[255&X]+s[G>>8]+s[255&G]+s[z>>8]+s[255&z]+s[q>>8]+s[255&q]+s[H>>8]+s[255&H]+s[N>>8]+s[255&N]+s[j>>8]+s[255&j]+s[L>>8]+s[255&L]+s[R>>8]+s[255&R]+s[A>>8]+s[255&A]+s[P>>8]+s[255&P]+s[x>>8]+s[255&x]+s[_>>8]+s[255&_]+s[D>>8]+s[255&D]+s[S>>8]+s[255&S]+s[w>>8]+s[255&w]+s[y>>8]+s[255&y]+s[f>>8]+s[255&f]+s[d>>8]+s[255&d]+s[a>>8]+s[255&a]+s[o>>8]+s[255&o],1024)}function J(n){var l,e,t=n.length,u=p[1024].offset,r=0,o=0|u[63],i=0,a=0|u[62],c=0,d=0|u[61],h=0,f=0|u[60],m=0,y=0|u[59],v=0,w=0|u[58],b=0,S=0|u[57],C=0,D=0|u[56],E=0,_=0|u[55],k=0,x=0|u[54],T=0,P=0|u[53],I=0,A=0|u[52],O=0,R=0|u[51],F=0,L=0|u[50],$=0,j=0|u[49],M=0,N=0|u[48],B=0,H=0|u[47],U=0,q=0|u[46],W=0,z=0|u[45],V=0,G=0|u[44],K=0,X=0|u[43],J=0,Z=0|u[42],Y=0,Q=0|u[41],nn=0,ln=0|u[40],en=0,tn=0|u[39],un=0,rn=0|u[38],on=0,sn=0|u[37],an=0,cn=0|u[36],dn=0,hn=0|u[35],fn=0,pn=0|u[34],mn=0,gn=0|u[33],yn=0,vn=0|u[32],wn=0,bn=0|u[31],Sn=0,Cn=0|u[30],Dn=0,En=0|u[29],_n=0,kn=0|u[28],xn=0,Tn=0|u[27],Pn=0,In=0|u[26],An=0,On=0|u[25],Rn=0,Fn=0|u[24],Ln=0,$n=0|u[23],jn=0,Mn=0|u[22],Nn=0,Bn=0|u[21],Hn=0,Un=0|u[20],qn=0,Wn=0|u[19],zn=0,Vn=0|u[18],Gn=0,Kn=0|u[17],Xn=0,Jn=0|u[16],Zn=0,Yn=0|u[15],Qn=0,nl=0|u[14],ll=0,el=0|u[13],tl=0,ul=0|u[12],rl=0,ol=0|u[11],il=0,sl=0|u[10],al=0,cl=0|u[9],dl=0,hl=0|u[8],fl=0,pl=0|u[7],ml=0,gl=0|u[6],yl=0,vl=0|u[5],wl=0,bl=0|u[4],Sl=0,Cl=0|u[3],Dl=0,El=0|u[2],_l=0,kl=0|u[1],xl=0,Tl=0|u[0];for(e=0;e<t;e++)i=397*a,c=397*d,h=397*f,m=397*y,v=397*w,b=397*S,C=397*D,E=397*_,k=397*x,T=397*P,I=397*A,O=397*R,F=397*L,$=397*j,M=397*N,B=397*H,U=397*q,W=397*z,V=397*G,K=397*X,J=397*Z,Y=397*Q,nn=397*ln,en=397*tn,un=397*rn,on=397*sn,an=397*cn,dn=397*hn,fn=397*pn,mn=397*gn,yn=397*vn,wn=397*bn,Sn=397*Cn,Dn=397*En,_n=397*kn,xn=397*Tn,Pn=397*In,An=397*On,Rn=397*Fn,Ln=397*$n,jn=397*Mn,Nn=397*Bn,Hn=397*Un,qn=397*Wn,zn=397*Vn,Gn=397*Kn,Xn=397*Jn,Zn=397*Yn,Qn=397*nl,ll=397*el,tl=397*ul,rl=397*ol,il=397*sl,al=397*cl,dl=397*hl,fl=397*pl,ml=397*gl,yl=397*vl,wl=397*bl,Sl=397*Cl,Dl=397*El,_l=397*kl,xl=397*Tl,Nn+=o<<8,Hn+=a<<8,qn+=d<<8,zn+=f<<8,Gn+=y<<8,Xn+=w<<8,Zn+=S<<8,Qn+=D<<8,ll+=_<<8,tl+=x<<8,rl+=P<<8,il+=A<<8,al+=R<<8,dl+=L<<8,fl+=j<<8,ml+=N<<8,yl+=H<<8,wl+=q<<8,Sl+=z<<8,Dl+=G<<8,_l+=X<<8,xl+=Z<<8,o=65535&(r=397*o),a=65535&(i+=r>>>16),d=65535&(c+=i>>>16),f=65535&(h+=c>>>16),y=65535&(m+=h>>>16),w=65535&(v+=m>>>16),S=65535&(b+=v>>>16),D=65535&(C+=b>>>16),_=65535&(E+=C>>>16),x=65535&(k+=E>>>16),P=65535&(T+=k>>>16),A=65535&(I+=T>>>16),R=65535&(O+=I>>>16),L=65535&(F+=O>>>16),j=65535&($+=F>>>16),N=65535&(M+=$>>>16),H=65535&(B+=M>>>16),q=65535&(U+=B>>>16),z=65535&(W+=U>>>16),G=65535&(V+=W>>>16),X=65535&(K+=V>>>16),Z=65535&(J+=K>>>16),Q=65535&(Y+=J>>>16),ln=65535&(nn+=Y>>>16),tn=65535&(en+=nn>>>16),rn=65535&(un+=en>>>16),sn=65535&(on+=un>>>16),cn=65535&(an+=on>>>16),hn=65535&(dn+=an>>>16),pn=65535&(fn+=dn>>>16),gn=65535&(mn+=fn>>>16),vn=65535&(yn+=mn>>>16),bn=65535&(wn+=yn>>>16),Cn=65535&(Sn+=wn>>>16),En=65535&(Dn+=Sn>>>16),kn=65535&(_n+=Dn>>>16),Tn=65535&(xn+=_n>>>16),In=65535&(Pn+=xn>>>16),On=65535&(An+=Pn>>>16),Fn=65535&(Rn+=An>>>16),$n=65535&(Ln+=Rn>>>16),Mn=65535&(jn+=Ln>>>16),Bn=65535&(Nn+=jn>>>16),Un=65535&(Hn+=Nn>>>16),Wn=65535&(qn+=Hn>>>16),Vn=65535&(zn+=qn>>>16),Kn=65535&(Gn+=zn>>>16),Jn=65535&(Xn+=Gn>>>16),Yn=65535&(Zn+=Xn>>>16),nl=65535&(Qn+=Zn>>>16),el=65535&(ll+=Qn>>>16),ul=65535&(tl+=ll>>>16),ol=65535&(rl+=tl>>>16),sl=65535&(il+=rl>>>16),cl=65535&(al+=il>>>16),hl=65535&(dl+=al>>>16),pl=65535&(fl+=dl>>>16),gl=65535&(ml+=fl>>>16),vl=65535&(yl+=ml>>>16),bl=65535&(wl+=yl>>>16),Cl=65535&(Sl+=wl>>>16),El=65535&(Dl+=Sl>>>16),Tl=xl+((_l+=Dl>>>16)>>>16)&65535,kl=65535&_l,(l=n.charCodeAt(e))<128?o^=l:l<2048?(i=397*a,c=397*d,h=397*f,m=397*y,v=397*w,b=397*S,C=397*D,E=397*_,k=397*x,T=397*P,I=397*A,O=397*R,F=397*L,$=397*j,M=397*N,B=397*H,U=397*q,W=397*z,V=397*G,K=397*X,J=397*Z,Y=397*Q,nn=397*ln,en=397*tn,un=397*rn,on=397*sn,an=397*cn,dn=397*hn,fn=397*pn,mn=397*gn,yn=397*vn,wn=397*bn,Sn=397*Cn,Dn=397*En,_n=397*kn,xn=397*Tn,Pn=397*In,An=397*On,Rn=397*Fn,Ln=397*$n,jn=397*Mn,Nn=397*Bn,Hn=397*Un,qn=397*Wn,zn=397*Vn,Gn=397*Kn,Xn=397*Jn,Zn=397*Yn,Qn=397*nl,ll=397*el,tl=397*ul,rl=397*ol,il=397*sl,al=397*cl,dl=397*hl,fl=397*pl,ml=397*gl,yl=397*vl,wl=397*bl,Sl=397*Cl,Dl=397*El,_l=397*kl,xl=397*Tl,Nn+=(o^=l>>6|192)<<8,Hn+=a<<8,qn+=d<<8,zn+=f<<8,Gn+=y<<8,Xn+=w<<8,Zn+=S<<8,Qn+=D<<8,ll+=_<<8,tl+=x<<8,rl+=P<<8,il+=A<<8,al+=R<<8,dl+=L<<8,fl+=j<<8,ml+=N<<8,yl+=H<<8,wl+=q<<8,Sl+=z<<8,Dl+=G<<8,_l+=X<<8,xl+=Z<<8,o=65535&(r=397*o),a=65535&(i+=r>>>16),d=65535&(c+=i>>>16),f=65535&(h+=c>>>16),y=65535&(m+=h>>>16),w=65535&(v+=m>>>16),S=65535&(b+=v>>>16),D=65535&(C+=b>>>16),_=65535&(E+=C>>>16),x=65535&(k+=E>>>16),P=65535&(T+=k>>>16),A=65535&(I+=T>>>16),R=65535&(O+=I>>>16),L=65535&(F+=O>>>16),j=65535&($+=F>>>16),N=65535&(M+=$>>>16),H=65535&(B+=M>>>16),q=65535&(U+=B>>>16),z=65535&(W+=U>>>16),G=65535&(V+=W>>>16),X=65535&(K+=V>>>16),Z=65535&(J+=K>>>16),Q=65535&(Y+=J>>>16),ln=65535&(nn+=Y>>>16),tn=65535&(en+=nn>>>16),rn=65535&(un+=en>>>16),sn=65535&(on+=un>>>16),cn=65535&(an+=on>>>16),hn=65535&(dn+=an>>>16),pn=65535&(fn+=dn>>>16),gn=65535&(mn+=fn>>>16),vn=65535&(yn+=mn>>>16),bn=65535&(wn+=yn>>>16),Cn=65535&(Sn+=wn>>>16),En=65535&(Dn+=Sn>>>16),kn=65535&(_n+=Dn>>>16),Tn=65535&(xn+=_n>>>16),In=65535&(Pn+=xn>>>16),On=65535&(An+=Pn>>>16),Fn=65535&(Rn+=An>>>16),$n=65535&(Ln+=Rn>>>16),Mn=65535&(jn+=Ln>>>16),Bn=65535&(Nn+=jn>>>16),Un=65535&(Hn+=Nn>>>16),Wn=65535&(qn+=Hn>>>16),Vn=65535&(zn+=qn>>>16),Kn=65535&(Gn+=zn>>>16),Jn=65535&(Xn+=Gn>>>16),Yn=65535&(Zn+=Xn>>>16),nl=65535&(Qn+=Zn>>>16),el=65535&(ll+=Qn>>>16),ul=65535&(tl+=ll>>>16),ol=65535&(rl+=tl>>>16),sl=65535&(il+=rl>>>16),cl=65535&(al+=il>>>16),hl=65535&(dl+=al>>>16),pl=65535&(fl+=dl>>>16),gl=65535&(ml+=fl>>>16),vl=65535&(yl+=ml>>>16),bl=65535&(wl+=yl>>>16),Cl=65535&(Sl+=wl>>>16),El=65535&(Dl+=Sl>>>16),Tl=xl+((_l+=Dl>>>16)>>>16)&65535,kl=65535&_l,o^=63&l|128):55296==(64512&l)&&e+1<t&&56320==(64512&n.charCodeAt(e+1))?(i=397*a,c=397*d,h=397*f,m=397*y,v=397*w,b=397*S,C=397*D,E=397*_,k=397*x,T=397*P,I=397*A,O=397*R,F=397*L,$=397*j,M=397*N,B=397*H,U=397*q,W=397*z,V=397*G,K=397*X,J=397*Z,Y=397*Q,nn=397*ln,en=397*tn,un=397*rn,on=397*sn,an=397*cn,dn=397*hn,fn=397*pn,mn=397*gn,yn=397*vn,wn=397*bn,Sn=397*Cn,Dn=397*En,_n=397*kn,xn=397*Tn,Pn=397*In,An=397*On,Rn=397*Fn,Ln=397*$n,jn=397*Mn,Nn=397*Bn,Hn=397*Un,qn=397*Wn,zn=397*Vn,Gn=397*Kn,Xn=397*Jn,Zn=397*Yn,Qn=397*nl,ll=397*el,tl=397*ul,rl=397*ol,il=397*sl,al=397*cl,dl=397*hl,fl=397*pl,ml=397*gl,yl=397*vl,wl=397*bl,Sl=397*Cl,Dl=397*El,_l=397*kl,xl=397*Tl,Nn+=(o^=(l=65536+((1023&l)<<10)+(1023&n.charCodeAt(++e)))>>18|240)<<8,Hn+=a<<8,qn+=d<<8,zn+=f<<8,Gn+=y<<8,Xn+=w<<8,Zn+=S<<8,Qn+=D<<8,ll+=_<<8,tl+=x<<8,rl+=P<<8,il+=A<<8,al+=R<<8,dl+=L<<8,fl+=j<<8,ml+=N<<8,yl+=H<<8,wl+=q<<8,Sl+=z<<8,Dl+=G<<8,_l+=X<<8,o=65535&(r=397*o),Tl=(xl+=Z<<8)+((_l+=(Dl+=(Sl+=(wl+=(yl+=(ml+=(fl+=(dl+=(al+=(il+=(rl+=(tl+=(ll+=(Qn+=(Zn+=(Xn+=(Gn+=(zn+=(qn+=(Hn+=(Nn+=(jn+=(Ln+=(Rn+=(An+=(Pn+=(xn+=(_n+=(Dn+=(Sn+=(wn+=(yn+=(mn+=(fn+=(dn+=(an+=(on+=(un+=(en+=(nn+=(Y+=(J+=(K+=(V+=(W+=(U+=(B+=(M+=($+=(F+=(O+=(I+=(T+=(k+=(E+=(C+=(b+=(v+=(m+=(h+=(c+=(i+=r>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)&65535,i=397*(a=65535&i),c=397*(d=65535&c),h=397*(f=65535&h),m=397*(y=65535&m),v=397*(w=65535&v),b=397*(S=65535&b),C=397*(D=65535&C),E=397*(_=65535&E),k=397*(x=65535&k),T=397*(P=65535&T),I=397*(A=65535&I),O=397*(R=65535&O),F=397*(L=65535&F),$=397*(j=65535&$),M=397*(N=65535&M),B=397*(H=65535&B),U=397*(q=65535&U),W=397*(z=65535&W),V=397*(G=65535&V),K=397*(X=65535&K),J=397*(Z=65535&J),Y=397*(Q=65535&Y),nn=397*(ln=65535&nn),en=397*(tn=65535&en),un=397*(rn=65535&un),on=397*(sn=65535&on),an=397*(cn=65535&an),dn=397*(hn=65535&dn),fn=397*(pn=65535&fn),mn=397*(gn=65535&mn),yn=397*(vn=65535&yn),wn=397*(bn=65535&wn),Sn=397*(Cn=65535&Sn),Dn=397*(En=65535&Dn),_n=397*(kn=65535&_n),xn=397*(Tn=65535&xn),Pn=397*(In=65535&Pn),An=397*(On=65535&An),Rn=397*(Fn=65535&Rn),Ln=397*($n=65535&Ln),jn=397*(Mn=65535&jn),Nn=397*(Bn=65535&Nn),Hn=397*(Un=65535&Hn),qn=397*(Wn=65535&qn),zn=397*(Vn=65535&zn),Gn=397*(Kn=65535&Gn),Xn=397*(Jn=65535&Xn),Zn=397*(Yn=65535&Zn),Qn=397*(nl=65535&Qn),ll=397*(el=65535&ll),tl=397*(ul=65535&tl),rl=397*(ol=65535&rl),il=397*(sl=65535&il),al=397*(cl=65535&al),dl=397*(hl=65535&dl),fl=397*(pl=65535&fl),ml=397*(gl=65535&ml),yl=397*(vl=65535&yl),wl=397*(bl=65535&wl),Sl=397*(Cl=65535&Sl),Dl=397*(El=65535&Dl),_l=397*(kl=65535&_l),xl=397*Tl,Nn+=(o^=l>>12&63|128)<<8,Hn+=a<<8,qn+=d<<8,zn+=f<<8,Gn+=y<<8,Xn+=w<<8,Zn+=S<<8,Qn+=D<<8,ll+=_<<8,tl+=x<<8,rl+=P<<8,il+=A<<8,al+=R<<8,dl+=L<<8,fl+=j<<8,ml+=N<<8,yl+=H<<8,wl+=q<<8,Sl+=z<<8,Dl+=G<<8,_l+=X<<8,o=65535&(r=397*o),Tl=(xl+=Z<<8)+((_l+=(Dl+=(Sl+=(wl+=(yl+=(ml+=(fl+=(dl+=(al+=(il+=(rl+=(tl+=(ll+=(Qn+=(Zn+=(Xn+=(Gn+=(zn+=(qn+=(Hn+=(Nn+=(jn+=(Ln+=(Rn+=(An+=(Pn+=(xn+=(_n+=(Dn+=(Sn+=(wn+=(yn+=(mn+=(fn+=(dn+=(an+=(on+=(un+=(en+=(nn+=(Y+=(J+=(K+=(V+=(W+=(U+=(B+=(M+=($+=(F+=(O+=(I+=(T+=(k+=(E+=(C+=(b+=(v+=(m+=(h+=(c+=(i+=r>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)&65535,i=397*(a=65535&i),c=397*(d=65535&c),h=397*(f=65535&h),m=397*(y=65535&m),v=397*(w=65535&v),b=397*(S=65535&b),C=397*(D=65535&C),E=397*(_=65535&E),k=397*(x=65535&k),T=397*(P=65535&T),I=397*(A=65535&I),O=397*(R=65535&O),F=397*(L=65535&F),$=397*(j=65535&$),M=397*(N=65535&M),B=397*(H=65535&B),U=397*(q=65535&U),W=397*(z=65535&W),V=397*(G=65535&V),K=397*(X=65535&K),J=397*(Z=65535&J),Y=397*(Q=65535&Y),nn=397*(ln=65535&nn),en=397*(tn=65535&en),un=397*(rn=65535&un),on=397*(sn=65535&on),an=397*(cn=65535&an),dn=397*(hn=65535&dn),fn=397*(pn=65535&fn),mn=397*(gn=65535&mn),yn=397*(vn=65535&yn),wn=397*(bn=65535&wn),Sn=397*(Cn=65535&Sn),Dn=397*(En=65535&Dn),_n=397*(kn=65535&_n),xn=397*(Tn=65535&xn),Pn=397*(In=65535&Pn),An=397*(On=65535&An),Rn=397*(Fn=65535&Rn),Ln=397*($n=65535&Ln),jn=397*(Mn=65535&jn),Nn=397*(Bn=65535&Nn),Hn=397*(Un=65535&Hn),qn=397*(Wn=65535&qn),zn=397*(Vn=65535&zn),Gn=397*(Kn=65535&Gn),Xn=397*(Jn=65535&Xn),Zn=397*(Yn=65535&Zn),Qn=397*(nl=65535&Qn),ll=397*(el=65535&ll),tl=397*(ul=65535&tl),rl=397*(ol=65535&rl),il=397*(sl=65535&il),al=397*(cl=65535&al),dl=397*(hl=65535&dl),fl=397*(pl=65535&fl),ml=397*(gl=65535&ml),yl=397*(vl=65535&yl),wl=397*(bl=65535&wl),Sl=397*(Cl=65535&Sl),Dl=397*(El=65535&Dl),_l=397*(kl=65535&_l),xl=397*Tl,Nn+=(o^=l>>6&63|128)<<8,Hn+=a<<8,qn+=d<<8,zn+=f<<8,Gn+=y<<8,Xn+=w<<8,Zn+=S<<8,Qn+=D<<8,ll+=_<<8,tl+=x<<8,rl+=P<<8,il+=A<<8,al+=R<<8,dl+=L<<8,fl+=j<<8,ml+=N<<8,yl+=H<<8,wl+=q<<8,Sl+=z<<8,Dl+=G<<8,_l+=X<<8,xl+=Z<<8,o=65535&(r=397*o),a=65535&(i+=r>>>16),d=65535&(c+=i>>>16),f=65535&(h+=c>>>16),y=65535&(m+=h>>>16),w=65535&(v+=m>>>16),S=65535&(b+=v>>>16),D=65535&(C+=b>>>16),_=65535&(E+=C>>>16),x=65535&(k+=E>>>16),P=65535&(T+=k>>>16),A=65535&(I+=T>>>16),R=65535&(O+=I>>>16),L=65535&(F+=O>>>16),j=65535&($+=F>>>16),N=65535&(M+=$>>>16),H=65535&(B+=M>>>16),q=65535&(U+=B>>>16),z=65535&(W+=U>>>16),G=65535&(V+=W>>>16),X=65535&(K+=V>>>16),Z=65535&(J+=K>>>16),Q=65535&(Y+=J>>>16),ln=65535&(nn+=Y>>>16),tn=65535&(en+=nn>>>16),rn=65535&(un+=en>>>16),sn=65535&(on+=un>>>16),cn=65535&(an+=on>>>16),hn=65535&(dn+=an>>>16),pn=65535&(fn+=dn>>>16),gn=65535&(mn+=fn>>>16),vn=65535&(yn+=mn>>>16),bn=65535&(wn+=yn>>>16),Cn=65535&(Sn+=wn>>>16),En=65535&(Dn+=Sn>>>16),kn=65535&(_n+=Dn>>>16),Tn=65535&(xn+=_n>>>16),In=65535&(Pn+=xn>>>16),On=65535&(An+=Pn>>>16),Fn=65535&(Rn+=An>>>16),$n=65535&(Ln+=Rn>>>16),Mn=65535&(jn+=Ln>>>16),Bn=65535&(Nn+=jn>>>16),Un=65535&(Hn+=Nn>>>16),Wn=65535&(qn+=Hn>>>16),Vn=65535&(zn+=qn>>>16),Kn=65535&(Gn+=zn>>>16),Jn=65535&(Xn+=Gn>>>16),Yn=65535&(Zn+=Xn>>>16),nl=65535&(Qn+=Zn>>>16),el=65535&(ll+=Qn>>>16),ul=65535&(tl+=ll>>>16),ol=65535&(rl+=tl>>>16),sl=65535&(il+=rl>>>16),cl=65535&(al+=il>>>16),hl=65535&(dl+=al>>>16),pl=65535&(fl+=dl>>>16),gl=65535&(ml+=fl>>>16),vl=65535&(yl+=ml>>>16),bl=65535&(wl+=yl>>>16),Cl=65535&(Sl+=wl>>>16),El=65535&(Dl+=Sl>>>16),Tl=xl+((_l+=Dl>>>16)>>>16)&65535,kl=65535&_l,o^=63&l|128):(i=397*a,c=397*d,h=397*f,m=397*y,v=397*w,b=397*S,C=397*D,E=397*_,k=397*x,T=397*P,I=397*A,O=397*R,F=397*L,$=397*j,M=397*N,B=397*H,U=397*q,W=397*z,V=397*G,K=397*X,J=397*Z,Y=397*Q,nn=397*ln,en=397*tn,un=397*rn,on=397*sn,an=397*cn,dn=397*hn,fn=397*pn,mn=397*gn,yn=397*vn,wn=397*bn,Sn=397*Cn,Dn=397*En,_n=397*kn,xn=397*Tn,Pn=397*In,An=397*On,Rn=397*Fn,Ln=397*$n,jn=397*Mn,Nn=397*Bn,Hn=397*Un,qn=397*Wn,zn=397*Vn,Gn=397*Kn,Xn=397*Jn,Zn=397*Yn,Qn=397*nl,ll=397*el,tl=397*ul,rl=397*ol,il=397*sl,al=397*cl,dl=397*hl,fl=397*pl,ml=397*gl,yl=397*vl,wl=397*bl,Sl=397*Cl,Dl=397*El,_l=397*kl,xl=397*Tl,Nn+=(o^=l>>12|224)<<8,Hn+=a<<8,qn+=d<<8,zn+=f<<8,Gn+=y<<8,Xn+=w<<8,Zn+=S<<8,Qn+=D<<8,ll+=_<<8,tl+=x<<8,rl+=P<<8,il+=A<<8,al+=R<<8,dl+=L<<8,fl+=j<<8,ml+=N<<8,yl+=H<<8,wl+=q<<8,Sl+=z<<8,Dl+=G<<8,_l+=X<<8,o=65535&(r=397*o),Tl=(xl+=Z<<8)+((_l+=(Dl+=(Sl+=(wl+=(yl+=(ml+=(fl+=(dl+=(al+=(il+=(rl+=(tl+=(ll+=(Qn+=(Zn+=(Xn+=(Gn+=(zn+=(qn+=(Hn+=(Nn+=(jn+=(Ln+=(Rn+=(An+=(Pn+=(xn+=(_n+=(Dn+=(Sn+=(wn+=(yn+=(mn+=(fn+=(dn+=(an+=(on+=(un+=(en+=(nn+=(Y+=(J+=(K+=(V+=(W+=(U+=(B+=(M+=($+=(F+=(O+=(I+=(T+=(k+=(E+=(C+=(b+=(v+=(m+=(h+=(c+=(i+=r>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)>>>16)&65535,i=397*(a=65535&i),c=397*(d=65535&c),h=397*(f=65535&h),m=397*(y=65535&m),v=397*(w=65535&v),b=397*(S=65535&b),C=397*(D=65535&C),E=397*(_=65535&E),k=397*(x=65535&k),T=397*(P=65535&T),I=397*(A=65535&I),O=397*(R=65535&O),F=397*(L=65535&F),$=397*(j=65535&$),M=397*(N=65535&M),B=397*(H=65535&B),U=397*(q=65535&U),W=397*(z=65535&W),V=397*(G=65535&V),K=397*(X=65535&K),J=397*(Z=65535&J),Y=397*(Q=65535&Y),nn=397*(ln=65535&nn),en=397*(tn=65535&en),un=397*(rn=65535&un),on=397*(sn=65535&on),an=397*(cn=65535&an),dn=397*(hn=65535&dn),fn=397*(pn=65535&fn),mn=397*(gn=65535&mn),yn=397*(vn=65535&yn),wn=397*(bn=65535&wn),Sn=397*(Cn=65535&Sn),Dn=397*(En=65535&Dn),_n=397*(kn=65535&_n),xn=397*(Tn=65535&xn),Pn=397*(In=65535&Pn),An=397*(On=65535&An),Rn=397*(Fn=65535&Rn),Ln=397*($n=65535&Ln),jn=397*(Mn=65535&jn),Nn=397*(Bn=65535&Nn),Hn=397*(Un=65535&Hn),qn=397*(Wn=65535&qn),zn=397*(Vn=65535&zn),Gn=397*(Kn=65535&Gn),Xn=397*(Jn=65535&Xn),Zn=397*(Yn=65535&Zn),Qn=397*(nl=65535&Qn),ll=397*(el=65535&ll),tl=397*(ul=65535&tl),rl=397*(ol=65535&rl),il=397*(sl=65535&il),al=397*(cl=65535&al),dl=397*(hl=65535&dl),fl=397*(pl=65535&fl),ml=397*(gl=65535&ml),yl=397*(vl=65535&yl),wl=397*(bl=65535&wl),Sl=397*(Cl=65535&Sl),Dl=397*(El=65535&Dl),_l=397*(kl=65535&_l),xl=397*Tl,Nn+=(o^=l>>6&63|128)<<8,Hn+=a<<8,qn+=d<<8,zn+=f<<8,Gn+=y<<8,Xn+=w<<8,Zn+=S<<8,Qn+=D<<8,ll+=_<<8,tl+=x<<8,rl+=P<<8,il+=A<<8,al+=R<<8,dl+=L<<8,fl+=j<<8,ml+=N<<8,yl+=H<<8,wl+=q<<8,Sl+=z<<8,Dl+=G<<8,_l+=X<<8,xl+=Z<<8,o=65535&(r=397*o),a=65535&(i+=r>>>16),d=65535&(c+=i>>>16),f=65535&(h+=c>>>16),y=65535&(m+=h>>>16),w=65535&(v+=m>>>16),S=65535&(b+=v>>>16),D=65535&(C+=b>>>16),_=65535&(E+=C>>>16),x=65535&(k+=E>>>16),P=65535&(T+=k>>>16),A=65535&(I+=T>>>16),R=65535&(O+=I>>>16),L=65535&(F+=O>>>16),j=65535&($+=F>>>16),N=65535&(M+=$>>>16),H=65535&(B+=M>>>16),q=65535&(U+=B>>>16),z=65535&(W+=U>>>16),G=65535&(V+=W>>>16),X=65535&(K+=V>>>16),Z=65535&(J+=K>>>16),Q=65535&(Y+=J>>>16),ln=65535&(nn+=Y>>>16),tn=65535&(en+=nn>>>16),rn=65535&(un+=en>>>16),sn=65535&(on+=un>>>16),cn=65535&(an+=on>>>16),hn=65535&(dn+=an>>>16),pn=65535&(fn+=dn>>>16),gn=65535&(mn+=fn>>>16),vn=65535&(yn+=mn>>>16),bn=65535&(wn+=yn>>>16),Cn=65535&(Sn+=wn>>>16),En=65535&(Dn+=Sn>>>16),kn=65535&(_n+=Dn>>>16),Tn=65535&(xn+=_n>>>16),In=65535&(Pn+=xn>>>16),On=65535&(An+=Pn>>>16),Fn=65535&(Rn+=An>>>16),$n=65535&(Ln+=Rn>>>16),Mn=65535&(jn+=Ln>>>16),Bn=65535&(Nn+=jn>>>16),Un=65535&(Hn+=Nn>>>16),Wn=65535&(qn+=Hn>>>16),Vn=65535&(zn+=qn>>>16),Kn=65535&(Gn+=zn>>>16),Jn=65535&(Xn+=Gn>>>16),Yn=65535&(Zn+=Xn>>>16),nl=65535&(Qn+=Zn>>>16),el=65535&(ll+=Qn>>>16),ul=65535&(tl+=ll>>>16),ol=65535&(rl+=tl>>>16),sl=65535&(il+=rl>>>16),cl=65535&(al+=il>>>16),hl=65535&(dl+=al>>>16),pl=65535&(fl+=dl>>>16),gl=65535&(ml+=fl>>>16),vl=65535&(yl+=ml>>>16),bl=65535&(wl+=yl>>>16),Cl=65535&(Sl+=wl>>>16),El=65535&(Dl+=Sl>>>16),Tl=xl+((_l+=Dl>>>16)>>>16)&65535,kl=65535&_l,o^=63&l|128);return g(s[Tl>>8]+s[255&Tl]+s[kl>>8]+s[255&kl]+s[El>>8]+s[255&El]+s[Cl>>8]+s[255&Cl]+s[bl>>8]+s[255&bl]+s[vl>>8]+s[255&vl]+s[gl>>8]+s[255&gl]+s[pl>>8]+s[255&pl]+s[hl>>8]+s[255&hl]+s[cl>>8]+s[255&cl]+s[sl>>8]+s[255&sl]+s[ol>>8]+s[255&ol]+s[ul>>8]+s[255&ul]+s[el>>8]+s[255&el]+s[nl>>8]+s[255&nl]+s[Yn>>8]+s[255&Yn]+s[Jn>>8]+s[255&Jn]+s[Kn>>8]+s[255&Kn]+s[Vn>>8]+s[255&Vn]+s[Wn>>8]+s[255&Wn]+s[Un>>8]+s[255&Un]+s[Bn>>8]+s[255&Bn]+s[Mn>>8]+s[255&Mn]+s[$n>>8]+s[255&$n]+s[Fn>>8]+s[255&Fn]+s[On>>8]+s[255&On]+s[In>>8]+s[255&In]+s[Tn>>8]+s[255&Tn]+s[kn>>8]+s[255&kn]+s[En>>8]+s[255&En]+s[Cn>>8]+s[255&Cn]+s[bn>>8]+s[255&bn]+s[vn>>8]+s[255&vn]+s[gn>>8]+s[255&gn]+s[pn>>8]+s[255&pn]+s[hn>>8]+s[255&hn]+s[cn>>8]+s[255&cn]+s[sn>>8]+s[255&sn]+s[rn>>8]+s[255&rn]+s[tn>>8]+s[255&tn]+s[ln>>8]+s[255&ln]+s[Q>>8]+s[255&Q]+s[Z>>8]+s[255&Z]+s[X>>8]+s[255&X]+s[G>>8]+s[255&G]+s[z>>8]+s[255&z]+s[q>>8]+s[255&q]+s[H>>8]+s[255&H]+s[N>>8]+s[255&N]+s[j>>8]+s[255&j]+s[L>>8]+s[255&L]+s[R>>8]+s[255&R]+s[A>>8]+s[255&A]+s[P>>8]+s[255&P]+s[x>>8]+s[255&x]+s[_>>8]+s[255&_]+s[D>>8]+s[255&D]+s[S>>8]+s[255&S]+s[w>>8]+s[255&w]+s[y>>8]+s[255&y]+s[f>>8]+s[255&f]+s[d>>8]+s[255&d]+s[a>>8]+s[255&a]+s[o>>8]+s[255&o],1024)}return l=D,e=x,t=A,u=L,r=N,o=q,i=G,b("1a"),S(!1),C(),{hash:w,setKeyspace:function(n){if(52!==n&&!p[n])throw new Error("Supported FNV keyspacs: 32, 52, 64, 128, 256, 512, and 1024 bit");f=n},version:b,useUTF8:S,seed:C,fast1a32:function(n){var l,e=n.length-3,t=0,u=40389,r=0,o=33052;for(l=0;l<e;)r=403*o,r+=(u^=n.charCodeAt(l++))<<8,u=65535&(t=403*u),r=403*(o=r+(t>>>16)&65535),r+=(u^=n.charCodeAt(l++))<<8,u=65535&(t=403*u),r=403*(o=r+(t>>>16)&65535),r+=(u^=n.charCodeAt(l++))<<8,u=65535&(t=403*u),r=403*(o=r+(t>>>16)&65535),o=(r+=(u^=n.charCodeAt(l++))<<8)+((t=403*u)>>>16)&65535,u=65535&t;for(;l<e+3;)r=403*o,o=(r+=(u^=n.charCodeAt(l++))<<8)+((t=403*u)>>>16)&65535,u=65535&t;return(o<<16>>>0)+u},fast1a32hex:function(n){var l,e=n.length-3,t=0,u=40389,r=0,o=33052;for(l=0;l<e;)r=403*o,r+=(u^=n.charCodeAt(l++))<<8,u=65535&(t=403*u),r=403*(o=r+(t>>>16)&65535),r+=(u^=n.charCodeAt(l++))<<8,u=65535&(t=403*u),r=403*(o=r+(t>>>16)&65535),r+=(u^=n.charCodeAt(l++))<<8,u=65535&(t=403*u),r=403*(o=r+(t>>>16)&65535),o=(r+=(u^=n.charCodeAt(l++))<<8)+((t=403*u)>>>16)&65535,u=65535&t;for(;l<e+3;)r=403*o,o=(r+=(u^=n.charCodeAt(l++))<<8)+((t=403*u)>>>16)&65535,u=65535&t;return s[o>>>8&255]+s[255&o]+s[u>>>8&255]+s[255&u]},fast1a52:function(n){var l,e=n.length-3,t=0,u=8997,r=0,o=33826,i=0,s=40164,a=0,c=52210;for(l=0;l<e;)r=435*o,i=435*s,a=435*c,i+=(u^=n.charCodeAt(l++))<<8,u=65535&(t=435*u),c=(a+=o<<8)+((i+=(r+=t>>>16)>>>16)>>>16)&65535,r=435*(o=65535&r),i=435*(s=65535&i),a=435*c,i+=(u^=n.charCodeAt(l++))<<8,u=65535&(t=435*u),c=(a+=o<<8)+((i+=(r+=t>>>16)>>>16)>>>16)&65535,r=435*(o=65535&r),i=435*(s=65535&i),a=435*c,i+=(u^=n.charCodeAt(l++))<<8,u=65535&(t=435*u),c=(a+=o<<8)+((i+=(r+=t>>>16)>>>16)>>>16)&65535,r=435*(o=65535&r),i=435*(s=65535&i),a=435*c,i+=(u^=n.charCodeAt(l++))<<8,a+=o<<8,u=65535&(t=435*u),o=65535&(r+=t>>>16),c=a+((i+=r>>>16)>>>16)&65535,s=65535&i;for(;l<e+3;)r=435*o,i=435*s,a=435*c,i+=(u^=n.charCodeAt(l++))<<8,a+=o<<8,u=65535&(t=435*u),o=65535&(r+=t>>>16),c=a+((i+=r>>>16)>>>16)&65535,s=65535&i;return 281474976710656*(15&c)+4294967296*s+65536*o+(u^c>>4)},fast1a52hex:function(n){var l,e=n.length-3,t=0,u=8997,r=0,o=33826,i=0,c=40164,d=0,h=52210;for(l=0;l<e;)r=435*o,i=435*c,d=435*h,i+=(u^=n.charCodeAt(l++))<<8,u=65535&(t=435*u),h=(d+=o<<8)+((i+=(r+=t>>>16)>>>16)>>>16)&65535,r=435*(o=65535&r),i=435*(c=65535&i),d=435*h,i+=(u^=n.charCodeAt(l++))<<8,u=65535&(t=435*u),h=(d+=o<<8)+((i+=(r+=t>>>16)>>>16)>>>16)&65535,r=435*(o=65535&r),i=435*(c=65535&i),d=435*h,i+=(u^=n.charCodeAt(l++))<<8,u=65535&(t=435*u),h=(d+=o<<8)+((i+=(r+=t>>>16)>>>16)>>>16)&65535,r=435*(o=65535&r),i=435*(c=65535&i),d=435*h,i+=(u^=n.charCodeAt(l++))<<8,d+=o<<8,u=65535&(t=435*u),o=65535&(r+=t>>>16),h=d+((i+=r>>>16)>>>16)&65535,c=65535&i;for(;l<e+3;)r=435*o,i=435*c,d=435*h,i+=(u^=n.charCodeAt(l++))<<8,d+=o<<8,u=65535&(t=435*u),o=65535&(r+=t>>>16),h=d+((i+=r>>>16)>>>16)&65535,c=65535&i;return a[15&h]+s[c>>8]+s[255&c]+s[o>>8]+s[255&o]+s[u>>8^h>>12]+s[255&(u^h>>4)]},fast1a64:function(n){var l,e=n.length-3,t=0,u=8997,r=0,o=33826,i=0,a=40164,c=0,d=52210;for(l=0;l<e;)r=435*o,i=435*a,c=435*d,i+=(u^=n.charCodeAt(l++))<<8,u=65535&(t=435*u),d=(c+=o<<8)+((i+=(r+=t>>>16)>>>16)>>>16)&65535,r=435*(o=65535&r),i=435*(a=65535&i),c=435*d,i+=(u^=n.charCodeAt(l++))<<8,u=65535&(t=435*u),d=(c+=o<<8)+((i+=(r+=t>>>16)>>>16)>>>16)&65535,r=435*(o=65535&r),i=435*(a=65535&i),c=435*d,i+=(u^=n.charCodeAt(l++))<<8,u=65535&(t=435*u),d=(c+=o<<8)+((i+=(r+=t>>>16)>>>16)>>>16)&65535,r=435*(o=65535&r),i=435*(a=65535&i),c=435*d,i+=(u^=n.charCodeAt(l++))<<8,c+=o<<8,u=65535&(t=435*u),o=65535&(r+=t>>>16),d=c+((i+=r>>>16)>>>16)&65535,a=65535&i;for(;l<e+3;)r=435*o,i=435*a,c=435*d,i+=(u^=n.charCodeAt(l++))<<8,c+=o<<8,u=65535&(t=435*u),o=65535&(r+=t>>>16),d=c+((i+=r>>>16)>>>16)&65535,a=65535&i;return s[d>>8]+s[255&d]+s[a>>8]+s[255&a]+s[o>>8]+s[255&o]+s[u>>8]+s[255&u]},fast1a32utf:function(n){var l,e,t=n.length,u=0,r=40389,o=0,i=33052;for(e=0;e<t;e++)(l=n.charCodeAt(e))<128?r^=l:l<2048?(o=403*i,i=(o+=(r^=l>>6|192)<<8)+((u=403*r)>>>16)&65535,r=65535&u,r^=63&l|128):55296==(64512&l)&&e+1<t&&56320==(64512&n.charCodeAt(e+1))?(o=403*i,o+=(r^=(l=65536+((1023&l)<<10)+(1023&n.charCodeAt(++e)))>>18|240)<<8,r=65535&(u=403*r),o=403*(i=o+(u>>>16)&65535),o+=(r^=l>>12&63|128)<<8,r=65535&(u=403*r),o=403*(i=o+(u>>>16)&65535),i=(o+=(r^=l>>6&63|128)<<8)+((u=403*r)>>>16)&65535,r=65535&u,r^=63&l|128):(o=403*i,o+=(r^=l>>12|224)<<8,r=65535&(u=403*r),o=403*(i=o+(u>>>16)&65535),i=(o+=(r^=l>>6&63|128)<<8)+((u=403*r)>>>16)&65535,r=65535&u,r^=63&l|128),o=403*i,i=(o+=r<<8)+((u=403*r)>>>16)&65535,r=65535&u;return(i<<16>>>0)+r},fast1a32hexutf:function(n){var l,e,t=n.length,u=0,r=40389,o=0,i=33052;for(e=0;e<t;e++)(l=n.charCodeAt(e))<128?r^=l:l<2048?(o=403*i,i=(o+=(r^=l>>6|192)<<8)+((u=403*r)>>>16)&65535,r=65535&u,r^=63&l|128):55296==(64512&l)&&e+1<t&&56320==(64512&n.charCodeAt(e+1))?(o=403*i,o+=(r^=(l=65536+((1023&l)<<10)+(1023&n.charCodeAt(++e)))>>18|240)<<8,r=65535&(u=403*r),o=403*(i=o+(u>>>16)&65535),o+=(r^=l>>12&63|128)<<8,r=65535&(u=403*r),o=403*(i=o+(u>>>16)&65535),i=(o+=(r^=l>>6&63|128)<<8)+((u=403*r)>>>16)&65535,r=65535&u,r^=63&l|128):(o=403*i,o+=(r^=l>>12|224)<<8,r=65535&(u=403*r),o=403*(i=o+(u>>>16)&65535),i=(o+=(r^=l>>6&63|128)<<8)+((u=403*r)>>>16)&65535,r=65535&u,r^=63&l|128),o=403*i,i=(o+=r<<8)+((u=403*r)>>>16)&65535,r=65535&u;return s[i>>>8&255]+s[255&i]+s[r>>>8&255]+s[255&r]},fast1a52utf:function(n){var l,e,t=n.length,u=0,r=8997,o=0,i=33826,s=0,a=40164,c=0,d=52210;for(e=0;e<t;e++)(l=n.charCodeAt(e))<128?r^=l:l<2048?(o=435*i,s=435*a,c=435*d,s+=(r^=l>>6|192)<<8,c+=i<<8,r=65535&(u=435*r),i=65535&(o+=u>>>16),d=c+((s+=o>>>16)>>>16)&65535,a=65535&s,r^=63&l|128):55296==(64512&l)&&e+1<t&&56320==(64512&n.charCodeAt(e+1))?(o=435*i,s=435*a,c=435*d,s+=(r^=(l=65536+((1023&l)<<10)+(1023&n.charCodeAt(++e)))>>18|240)<<8,r=65535&(u=435*r),d=(c+=i<<8)+((s+=(o+=u>>>16)>>>16)>>>16)&65535,o=435*(i=65535&o),s=435*(a=65535&s),c=435*d,s+=(r^=l>>12&63|128)<<8,r=65535&(u=435*r),d=(c+=i<<8)+((s+=(o+=u>>>16)>>>16)>>>16)&65535,o=435*(i=65535&o),s=435*(a=65535&s),c=435*d,s+=(r^=l>>6&63|128)<<8,c+=i<<8,r=65535&(u=435*r),i=65535&(o+=u>>>16),d=c+((s+=o>>>16)>>>16)&65535,a=65535&s,r^=63&l|128):(o=435*i,s=435*a,c=435*d,s+=(r^=l>>12|224)<<8,r=65535&(u=435*r),d=(c+=i<<8)+((s+=(o+=u>>>16)>>>16)>>>16)&65535,o=435*(i=65535&o),s=435*(a=65535&s),c=435*d,s+=(r^=l>>6&63|128)<<8,c+=i<<8,r=65535&(u=435*r),i=65535&(o+=u>>>16),d=c+((s+=o>>>16)>>>16)&65535,a=65535&s,r^=63&l|128),o=435*i,s=435*a,c=435*d,s+=r<<8,c+=i<<8,r=65535&(u=435*r),i=65535&(o+=u>>>16),d=c+((s+=o>>>16)>>>16)&65535,a=65535&s;return 281474976710656*(15&d)+4294967296*a+65536*i+(r^d>>4)},fast1a52hexutf:function(n){var l,e,t=n.length,u=0,r=8997,o=0,i=33826,c=0,d=40164,h=0,f=52210;for(e=0;e<t;e++)(l=n.charCodeAt(e))<128?r^=l:l<2048?(o=435*i,c=435*d,h=435*f,c+=(r^=l>>6|192)<<8,h+=i<<8,r=65535&(u=435*r),i=65535&(o+=u>>>16),f=h+((c+=o>>>16)>>>16)&65535,d=65535&c,r^=63&l|128):55296==(64512&l)&&e+1<t&&56320==(64512&n.charCodeAt(e+1))?(o=435*i,c=435*d,h=435*f,c+=(r^=(l=65536+((1023&l)<<10)+(1023&n.charCodeAt(++e)))>>18|240)<<8,r=65535&(u=435*r),f=(h+=i<<8)+((c+=(o+=u>>>16)>>>16)>>>16)&65535,o=435*(i=65535&o),c=435*(d=65535&c),h=435*f,c+=(r^=l>>12&63|128)<<8,r=65535&(u=435*r),f=(h+=i<<8)+((c+=(o+=u>>>16)>>>16)>>>16)&65535,o=435*(i=65535&o),c=435*(d=65535&c),h=435*f,c+=(r^=l>>6&63|128)<<8,h+=i<<8,r=65535&(u=435*r),i=65535&(o+=u>>>16),f=h+((c+=o>>>16)>>>16)&65535,d=65535&c,r^=63&l|128):(o=435*i,c=435*d,h=435*f,c+=(r^=l>>12|224)<<8,r=65535&(u=435*r),f=(h+=i<<8)+((c+=(o+=u>>>16)>>>16)>>>16)&65535,o=435*(i=65535&o),c=435*(d=65535&c),h=435*f,c+=(r^=l>>6&63|128)<<8,h+=i<<8,r=65535&(u=435*r),i=65535&(o+=u>>>16),f=h+((c+=o>>>16)>>>16)&65535,d=65535&c,r^=63&l|128),o=435*i,c=435*d,h=435*f,c+=r<<8,h+=i<<8,r=65535&(u=435*r),i=65535&(o+=u>>>16),f=h+((c+=o>>>16)>>>16)&65535,d=65535&c;return a[15&f]+s[d>>8]+s[255&d]+s[i>>8]+s[255&i]+s[r>>8^f>>12]+s[255&(r^f>>4)]},fast1a64utf:function(n){var l,e,t=n.length,u=0,r=8997,o=0,i=33826,a=0,c=40164,d=0,h=52210;for(e=0;e<t;e++)(l=n.charCodeAt(e))<128?r^=l:l<2048?(o=435*i,a=435*c,d=435*h,a+=(r^=l>>6|192)<<8,d+=i<<8,r=65535&(u=435*r),i=65535&(o+=u>>>16),h=d+((a+=o>>>16)>>>16)&65535,c=65535&a,r^=63&l|128):55296==(64512&l)&&e+1<t&&56320==(64512&n.charCodeAt(e+1))?(o=435*i,a=435*c,d=435*h,a+=(r^=(l=65536+((1023&l)<<10)+(1023&n.charCodeAt(++e)))>>18|240)<<8,r=65535&(u=435*r),h=(d+=i<<8)+((a+=(o+=u>>>16)>>>16)>>>16)&65535,o=435*(i=65535&o),a=435*(c=65535&a),d=435*h,a+=(r^=l>>12&63|128)<<8,r=65535&(u=435*r),h=(d+=i<<8)+((a+=(o+=u>>>16)>>>16)>>>16)&65535,o=435*(i=65535&o),a=435*(c=65535&a),d=435*h,a+=(r^=l>>6&63|128)<<8,d+=i<<8,r=65535&(u=435*r),i=65535&(o+=u>>>16),h=d+((a+=o>>>16)>>>16)&65535,c=65535&a,r^=63&l|128):(o=435*i,a=435*c,d=435*h,a+=(r^=l>>12|224)<<8,r=65535&(u=435*r),h=(d+=i<<8)+((a+=(o+=u>>>16)>>>16)>>>16)&65535,o=435*(i=65535&o),a=435*(c=65535&a),d=435*h,a+=(r^=l>>6&63|128)<<8,d+=i<<8,r=65535&(u=435*r),i=65535&(o+=u>>>16),h=d+((a+=o>>>16)>>>16)&65535,c=65535&a,r^=63&l|128),o=435*i,a=435*c,d=435*h,a+=r<<8,d+=i<<8,r=65535&(u=435*r),i=65535&(o+=u>>>16),h=d+((a+=o>>>16)>>>16)&65535,c=65535&a;return s[h>>8]+s[255&h]+s[c>>8]+s[255&c]+s[i>>8]+s[255&i]+s[r>>8]+s[255&r]}}}();void 0!==n.exports&&(n.exports=l)},670:(n,l,e)=>{"use strict";e.r(l),e.d(l,{AppInsightsCore:()=>g,BaseTelemetryPlugin:()=>L.s,DiagnosticLogger:()=>a.wq,EventLatency:()=>w,EventPersistence:()=>S,EventPropertyType:()=>b,EventsDiscardedReason:()=>j.x,FullVersionString:()=>f.xE,InternalAppInsightsCore:()=>c._,LoggingSeverity:()=>R,MinChannelPriorty:()=>O,NotificationManager:()=>F.h,PerfEvent:()=>o.Q6,PerfManager:()=>o.NS,ProcessTelemetryContext:()=>$.W0,TraceLevel:()=>C,Undefined:()=>Q.bA,ValueKind:()=>v,ValueSanitizer:()=>A,Version:()=>f.Rx,_InternalLogMessage:()=>a.WD,__getRegisteredEvents:()=>N.El,_logInternalMessage:()=>a.Oc,_throwInternal:()=>a.ZP,_warnToConsole:()=>a.OG,addEventHandler:()=>N.So,addEventListeners:()=>N.lQ,addPageHideEventListener:()=>N.Fc,addPageShowEventListener:()=>N.oS,addPageUnloadEventListener:()=>N.ee,areCookiesSupported:()=>nn.gi,arrForEach:()=>P.I,arrIndexOf:()=>x.r,arrMap:()=>W.W,arrReduce:()=>z.K,attachEvent:()=>N.Q3,blockDynamicConversion:()=>un.V9,cookieAvailable:()=>nn.gi,createCookieMgr:()=>nn.xN,createDynamicConfig:()=>i.e,createEnumStyle:()=>y.H,createGuid:()=>f.gj,createProcessTelemetryContext:()=>$.i8,createTraceParent:()=>tn.wk,createUniqueNamespace:()=>ln.Z,createUnloadHandlerContainer:()=>en.P,dateNow:()=>G.f,detachEvent:()=>N.Ym,disallowsSameSiteNone:()=>nn.It,doPerf:()=>o.r2,dumpObj:()=>s.m,eventOff:()=>N.ML,eventOn:()=>N.mB,extend:()=>f.X$,findW3cTraceParent:()=>tn.ef,forceDynamicConversion:()=>un.Hf,formatTraceParent:()=>tn.L0,generateW3CId:()=>K.cL,getCommonSchemaMetaData:()=>f.Go,getConsole:()=>Y.U5,getCookieValue:()=>f.UM,getCrypto:()=>Y.MY,getDocument:()=>Z.YE,getDynamicConfigHandler:()=>un.QA,getExceptionName:()=>B.lL,getFieldValueType:()=>f.cq,getGlobal:()=>Z.mS,getGlobalInst:()=>Z.zS,getHistory:()=>Z.JK,getIEVersion:()=>Y.L0,getISOString:()=>B._u,getJSON:()=>Y.hm,getLocation:()=>Y.g$,getMsCrypto:()=>Y.iN,getNavigator:()=>Z.w3,getPerformance:()=>X.FJ,getSetValue:()=>B.c2,getTenantId:()=>f.EO,getTime:()=>f.WB,getWindow:()=>Z.zk,hasDocument:()=>Z.Wt,hasHistory:()=>Z.tw,hasJSON:()=>Y.Z,hasNavigator:()=>Z.w9,hasOwnProperty:()=>M.v,hasWindow:()=>Z.Vd,isArray:()=>D.cy,isArrayValid:()=>f.wJ,isBeaconsSupported:()=>Y.Uf,isBoolean:()=>D.Lm,isChromium:()=>f.F2,isDate:()=>D.$P,isDocumentObjectAvailable:()=>f.g8,isError:()=>D.bJ,isFetchSupported:()=>Y.R7,isFunction:()=>D.Tn,isGreaterThanZero:()=>f.ei,isIE:()=>Y.lT,isLatency:()=>f.Hh,isNotTruthy:()=>D.wo,isNullOrUndefined:()=>D.hX,isNumber:()=>D.Et,isObject:()=>D.Gv,isReactNative:()=>Y.lV,isSampledFlag:()=>tn.N7,isString:()=>D.Kg,isTruthy:()=>D.zz,isTypeof:()=>D.Ed,isUint8ArrayAvailable:()=>f.h3,isUndefined:()=>D.b0,isValidSpanId:()=>tn.wN,isValidTraceId:()=>tn.hX,isValidTraceParent:()=>tn.mJ,isValueAssigned:()=>f.yD,isValueKind:()=>f.m0,isWindowObjectAvailable:()=>f.P$,isXhrSupported:()=>Y.xk,mergeEvtNamespace:()=>N.Hm,newGuid:()=>K.aq,newId:()=>J.Si,normalizeJsName:()=>B.cH,objDefineAccessors:()=>V.r,objForEachKey:()=>E.z,objFreeze:()=>d.N6,objKeys:()=>d.cG,objSeal:()=>d.js,onConfigChange:()=>i.a,openXhr:()=>f.H$,optimizeObject:()=>B.hW,parseTraceParent:()=>tn.ZI,perfNow:()=>X.UU,proxyAssign:()=>B.qz,proxyFunctionAs:()=>B.RF,proxyFunctions:()=>B.o$,random32:()=>J.VN,randomValue:()=>J.Z1,removeEventHandler:()=>N.zh,removeEventListeners:()=>N.Wg,removePageHideEventListener:()=>N.sq,removePageShowEventListener:()=>N.vF,removePageUnloadEventListener:()=>N.Ds,safeGetCookieMgr:()=>nn.um,safeGetLogger:()=>a.y0,sanitizeProperty:()=>f.TC,setEnableEnvMocks:()=>Y.cU,setProcessTelemetryTimings:()=>f.u9,setValue:()=>B.KY,strContains:()=>B.Ju,strEndsWith:()=>U.C,strFunction:()=>Q.hW,strObject:()=>Q._1,strPrototype:()=>Q.vR,strStartsWith:()=>H.t,strTrim:()=>q.EH,strUndefined:()=>Q.bA,throwError:()=>r.$8,toISOString:()=>B._u,useXDomainRequest:()=>Y.PV});var t=e(659),u=e(8279),r=e(3517),o=e(5775),i=e(9622),s=e(8693),a=e(3775),c=e(9379),d=e(1324),h=e(937),f=e(4822),p=e(1739),m=(0,d.ZH)({endpointUrl:h.S,propertyStorageOverride:{isVal:function(n){return!n||n.getProperty&&n.setProperty||(0,r.$8)("Invalid property storage override passed."),!0}}}),g=function(n){function l(){var e=n.call(this)||this;return(0,u.A)(l,e,(function(n,l){n[p.mE]=function(e,t,u,r){(0,o.r2)(n,(function(){return"AppInsightsCore.initialize"}),(function(){try{l[p.mE]((0,i.e)(e,m,u||n[p.Uw],!1).cfg,t,u,r)}catch(l){var o=n[p.Uw],c=(0,s.m)(l);-1!==c[p.Sj]("channels")&&(c+="\n - Channels must be provided through config.channels only!"),(0,a.ZP)(o,1,514,"SDK Initialization Failed - no telemetry will be sent: "+c)}}),(function(){return{config:e,extensions:t,logger:u,notificationManager:r}}))},n.track=function(e){(0,o.r2)(n,(function(){return"AppInsightsCore.track"}),(function(){var t=e;if(t){t[p.dg]=t[p.dg]||{},t[p.dg].trackStart=(0,f.WB)(),(0,f.Hh)(t.latency)||(t.latency=1);var u=t.ext=t.ext||{};u.sdk=u.sdk||{},u.sdk.ver=f.xE;var r=t.baseData=t.baseData||{};r[h._0]=r[h._0]||{};var o=r[h._0];o[h.hj]=o[h.hj]||n.pluginVersionString||h.m5}l.track(t)}),(function(){return{item:e}}),!e.sync)},n[p.h4]=function(n){return l[p.h4](n||"InternalLog")}})),e}return(0,t.qU)(l,n),l.__ieDyn=1,l}(c._),y=e(4282),v=(0,y.H)({NotSet:0,Pii_DistinguishedName:1,Pii_GenericData:2,Pii_IPV4Address:3,Pii_IPv6Address:4,Pii_MailSubject:5,Pii_PhoneNumber:6,Pii_QueryString:7,Pii_SipAddress:8,Pii_SmtpAddress:9,Pii_Identity:10,Pii_Uri:11,Pii_Fqdn:12,Pii_IPV4AddressLegacy:13,CustomerContent_GenericContent:32}),w=(0,y.H)({Normal:1,CostDeferred:2,RealTime:3,Immediate:4}),b=(0,y.H)({Unspecified:0,String:1,Int32:2,UInt32:3,Int64:4,UInt64:5,Double:6,Bool:7,Guid:8,DateTime:9}),S=(0,y.H)({Normal:1,Critical:2}),C=(0,y.H)({NONE:0,ERROR:1,WARNING:2,INFORMATION:3}),D=e(6668),E=e(9018),_=e(4016),k=e(1742),x=e(6832),T=(0,k.b2)("includes",_.wM,(function(n,l,e){return-1!==(0,x.r)(n,l,e)})),P=e(5439),I=e(4657),A=function(){function n(n){var l=this,e={},t=[],u=[];function r(n,l){var r,o=e[n];if(o&&(r=o[l]),!r&&null!==r){if((0,D.Kg)(n)&&(0,D.Kg)(l))if(u[p.oI]>0){for(var i=0;i<u[p.oI];i++)if(u[i][p.hF](n,l)){r={canHandle:!0,fieldHandler:u[i]};break}}else 0===t[p.oI]&&(r={canHandle:!0});if(!r&&null!==r)for(r=null,i=0;i<t[p.oI];i++)if(t[i][p.hF](n,l)){r={canHandle:!0,handler:t[i],fieldHandler:null};break}o||(o=e[n]={}),o[l]=r}return r}function o(n,l,e,t,u,r){if(n.handler)return n.handler.property(l,e,u,r);if(!(0,D.hX)(u[p.QV])){if(!(4096&~t&&(0,f.m0)(u[p.QV])))return null;u[p.pF]=u[p.pF].toString()}return s(n.fieldHandler,l,e,t,u)}function i(n,l,e){return(0,f.yD)(e)?{value:e}:null}function s(n,e,t,u,r){if(r&&n){var o=n.getSanitizer(e,t,u,r[p.QV],r.propertyType);if(o)if(4===u){var a={},c=r[p.pF];(0,E.z)(c,(function(l,u){var r=e+"."+t;if((0,f.yD)(u)){var o=i(0,0,u);(o=s(n,r,l,(0,f.cq)(u),o))&&(a[l]=o[p.pF])}})),r[p.pF]=a}else{var d={path:e,name:t,type:u,prop:r,sanitizer:l};r=o.call(l,d)}}return r}n&&u.push(n),l.clearCache=function(){e={}},l.addSanitizer=function(n){n&&(T(t,n)||t.push(n),e={})},l.addFieldSanitizer=function(n){n&&(T(u,n)||u.push(n),e={})},l[p.Rl]=function(n){if(n){var l=(0,x.r)(t,n);-1!==l&&(t.splice(l,1),e={}),(0,P.I)(t,(function(l){l&&l[p.Rl]&&l[p.Rl](n)}))}},l[p.Mr]=function(n){if(n){var l=(0,x.r)(u,n);-1!==l&&(u.splice(l,1),e={}),(0,P.I)(t,(function(l){l&&l[p.Mr]&&l[p.Mr](n)}))}},l.isEmpty=function(){return(0,I.R)(t)+(0,I.R)(u)===0},l[p.hF]=function(n,l){var e=r(n,l);return!!e&&e[p.nw]},l[p.pF]=function(n,l,e,t){var u=r(n,l);if(u&&u[p.nw]){if(!u||!u[p.nw])return null;if(u.handler)return u.handler[p.pF](n,l,e,t);if(!(0,D.Kg)(l)||(0,D.hX)(e)||e===h.m5)return null;var s=null,a=(0,f.cq)(e);if(8192&~a)1!==a&&2!==a&&3!==a&&4096&~a?4===a&&(s=i(0,0,t?JSON.stringify(e):e)):s=i(0,0,e);else{var c=-8193&a;if(s=e,!(0,f.yD)(s[p.pF])||1!==c&&2!==c&&3!==c&&4096&~c)return null}if(s)return o(u,n,l,a,s,t)}return null},l.property=function(n,l,e,t){var u=r(n,l);if(!u||!u[p.nw])return null;if(!(0,D.Kg)(l)||(0,D.hX)(e)||!(0,f.yD)(e[p.pF]))return null;var i=(0,f.cq)(e[p.pF]);return 0===i?null:o(u,n,l,i,e,t)}}return n.getFieldType=f.cq,n}(),O=100,R=(0,y.H)({DISABLED:0,CRITICAL:1,WARNING:2,DEBUG:3}),F=e(1356),L=e(8257),$=e(2317),j=e(3662),M=e(3266),N=e(6149),B=e(3673),H=e(7931),U=e(2494),q=e(1374),W=e(4335),z=e(1011),V=e(6336),G=e(225),K=e(9882),X=e(558),J=e(6535),Z=e(3076),Y=e(7292),Q=e(5664),nn=e(5034),ln=e(4276),en=e(836),tn=e(1864),un=e(9147)},937:(n,l,e)=>{"use strict";e.d(l,{S:()=>u,_0:()=>o,hj:()=>r,m5:()=>t});var t="",u="https://browser.events.data.microsoft.com/OneCollector/1.0/",r="version",o="properties"},4822:(n,l,e)=>{"use strict";e.d(l,{EO:()=>x,F2:()=>B,Go:()=>A,H$:()=>H,Hh:()=>P,P$:()=>_,Rx:()=>g,TC:()=>I,UM:()=>O,WB:()=>L,X$:()=>F,cq:()=>N,ei:()=>U,g8:()=>E,gj:()=>R,h3:()=>T,m0:()=>$,u9:()=>M,wJ:()=>j,xE:()=>y,yD:()=>k});var t,u=e(3076),r=e(6668),o=e(7292),i=e(9882),s=e(9018),a=e(5439),c=e(558),d=e(5664),h=e(5881),f=e(3178),p=e(937),m=e(1739),g="4.0.4",y="1DS-Web-JS-"+g,v=d.Wy.hasOwnProperty,w="Microsoft_ApplicationInsights_BypassAjaxInstrumentation",b="withCredentials",S="timeout",C=((t={})[0]=0,t[2]=6,t[1]=1,t[3]=7,t[4098]=6,t[4097]=1,t[4099]=7,t),D=null,E=(0,u.Wt)(),_=(0,u.Vd)();function k(n){return!(n===p.m5||(0,r.hX)(n))}function x(n){if(n){var l=(0,h.H)(n,"-");if(l>-1)return(0,f.ZW)(n,l)}return p.m5}function T(){return null===D&&(D=!(0,r.b0)(Uint8Array)&&!function(){var n=(0,u.w3)();if(!(0,r.b0)(n)&&n.userAgent){var l=n.userAgent.toLowerCase();if((l[m.Sj]("safari")>=0||l[m.Sj]("firefox")>=0)&&l[m.Sj]("chrome")<0)return!0}return!1}()&&!(0,o.lV)()),D}function P(n){return!!(n&&(0,r.Et)(n)&&n>=1&&n<=4)}function I(n,l,e){if(!l&&!k(l)||"string"!=typeof n)return null;var t=typeof l;if("string"===t||"number"===t||"boolean"===t||(0,r.cy)(l))l={value:l};else if("object"!==t||v.call(l,"value")){if((0,r.hX)(l[m.pF])||l[m.pF]===p.m5||!(0,r.Kg)(l[m.pF])&&!(0,r.Et)(l[m.pF])&&!(0,r.Lm)(l[m.pF])&&!(0,r.cy)(l[m.pF]))return null}else l={value:e?JSON.stringify(l):l};if((0,r.cy)(l[m.pF])&&!j(l[m.pF]))return null;if(!(0,r.hX)(l[m.QV])){if((0,r.cy)(l[m.pF])||!$(l[m.QV]))return null;l[m.pF]=l[m.pF].toString()}return l}function A(n,l,e){var t=-1;if(!(0,r.b0)(n))if(l>0&&(32===l?t=8192:l<=13&&(t=l<<5)),function(n){return n>=0&&n<=9}(e))-1===t&&(t=0),t|=e;else{var u=C[N(n)]||-1;-1!==t&&-1!==u?t|=u:6===u&&(t=u)}return t}function O(n,l,e){var t;return void 0===e&&(e=!0),n&&(t=n.get(l),e&&t&&decodeURIComponent&&(t=decodeURIComponent(t))),t||p.m5}function R(n){void 0===n&&(n="D");var l=(0,i.aq)();return"B"===n?l="{"+l+"}":"P"===n?l="("+l+")":"N"===n&&(l=l.replace(/-/g,p.m5)),l}function F(n,l,e,t,u){var o={},i=!1,c=0,d=arguments[m.oI],h=arguments;for((0,r.Lm)(h[0])&&(i=h[0],c++);c<d;c++)n=h[c],(0,s.z)(n,(function(n,l){i&&l&&(0,r.Gv)(l)?(0,r.cy)(l)?(o[n]=o[n]||[],(0,a.I)(l,(function(l,e){l&&(0,r.Gv)(l)?o[n][e]=F(!0,o[n][e],l):o[n][e]=l}))):o[n]=F(!0,o[n],l):o[n]=l}));return o}var L=c.UU;function $(n){return 0===n||n>0&&n<=13||32===n}function j(n){return n[m.oI]>0}function M(n,l){var e=n;e[m.dg]=e[m.dg]||{},e[m.dg][m.Jg]=e[m.dg][m.Jg]||{},e[m.dg][m.Jg][l]=L()}function N(n){var l=0;if(null!=n){var e=typeof n;"string"===e?l=1:"number"===e?l=2:"boolean"===e?l=3:e===d._1&&(l=4,(0,r.cy)(n)?(l=4096,n[m.oI]>0&&(l|=N(n[0]))):v.call(n,"value")&&(l=8192|N(n[m.pF])))}return l}function B(){return!!(0,u.zS)("chrome")}function H(n,l,e,t,u,r){function o(n,l,e){try{n[l]=e}catch(n){}}void 0===t&&(t=!1),void 0===u&&(u=!1);var i=new XMLHttpRequest;return t&&o(i,w,t),e&&o(i,b,e),i.open(n,l,!u),e&&o(i,b,e),!u&&r&&o(i,S,r),i}function U(n){return n>0}},1739:(n,l,e)=>{"use strict";e.d(l,{Jg:()=>d,Mr:()=>p,QV:()=>a,Rl:()=>f,Sj:()=>r,Uw:()=>u,dg:()=>o,h4:()=>i,hF:()=>h,mE:()=>t,nw:()=>m,oI:()=>c,pF:()=>s});var t="initialize",u="logger",r="indexOf",o="timings",i="pollInternalLogs",s="value",a="kind",c="length",d="processTelemetryStart",h="handleField",f="rmSanitizer",p="rmFieldSanitizer",m="canHandle"},8916:(n,l,e)=>{"use strict";e.r(l),e.d(l,{BE_PROFILE:()=>r,NRT_PROFILE:()=>u,PostChannel:()=>$l,RT_PROFILE:()=>t});var t="REAL_TIME",u="NEAR_REAL_TIME",r="BEST_EFFORT",o=e(659),i=e(8279),s=e(4822),a=e(6668),c=e(5775),d=e(6149),h=e(4276),f=e(9622),p=e(2317),m=e(3076),g=e(3673),y=e(3662),v=e(5439),w=e(9018),b=e(3775),S=e(8257),C=e(636),D=e(1324),E="",_="POST",k="drop",x="requeue",T="application/x-json-stream",P="cache-control",I="content-type",A="kill-duration",O="time-delta-millis",R="client-version",F="client-id",L="time-delta-to-apply-millis",$="upload-time",j="apikey",M="AuthMsaDeviceTicket",N="AuthXToken",B="msfpc",H="trace",U="user",q="allowRequestSending",W="firstRequestSent",z="shouldAddClockSkewHeaders",V="getClockSkewHeaderValue",G="setClockSkew",K="length",X="concat",J="iKey",Z="count",Y="events",Q="push",nn="split",ln="splice",en="toLowerCase",tn="hdrs",un="useHdrs",rn="initialize",on="setTimeoutOverride",sn="clearTimeoutOverride",an="overrideEndpointUrl",cn="avoidOptions",dn="enableCompoundKey",hn="disableXhrSync",fn="disableFetchKeepAlive",pn="useSendBeacon",mn="alwaysUseXhrOverride",gn="urlString",yn="timeout",vn="ontimeout",wn="data",bn="_sendReason",Sn="headers",Cn="getResponseHeader",Dn="getAllResponseHeaders",En="_thePayload",_n="batches",kn="sendType",xn="canSendRequest",Tn="sendQueuedRequests",Pn="isCompletelyIdle",In="setUnloading",An="sendSynchronousBatch",On="_transport",Rn="getWParam",Fn="isBeacon",Ln="timings",$n="isTeardown",jn="isSync",Mn="sendPOST",Nn="setKillSwitchTenants",Bn="_backOffTransmission",Hn="identifier",Un="eventsLimitInMem",qn="autoFlushEventsLimit",Wn="sendAttempt",zn="latency",Vn="baseData",Gn="sync";function Kn(n){var l=(n.ext||{}).intweb;return l&&(0,s.yD)(l[B])?l[B]:null}function Xn(n){for(var l=null,e=0;null===l&&e<n[K];e++)l=Kn(n[e]);return l}var Jn=function(){function n(l,e){var t=e?[][X](e):[],u=this,r=Xn(t);u[J]=function(){return l},u.Msfpc=function(){return r||E},u[Z]=function(){return t[K]},u[Y]=function(){return t},u.addEvent=function(n){return!!n&&(t[Q](n),r||(r=Kn(n)),!0)},u[nn]=function(e,u){var o;if(e<t[K]){var i=t[K]-e;(0,a.hX)(u)||(i=u<i?u:i),o=t[ln](e,i),r=Xn(t)}return new n(l,o)}}return n.create=function(l,e){return new n(l,e)},n}(),Zn=e(3266),Yn=e(7292),Qn=e(1374),nl=e(8693),ll=e(225),el=e(5664),tl=e(1187),ul=function(){function n(){var l=!0,e=!0,t=!0,u="use-collector-delta",r=!1;(0,i.A)(n,this,(function(n){n[q]=function(){return l},n[W]=function(){t&&(t=!1,r||(l=!1))},n[z]=function(){return e},n[V]=function(){return u},n[G]=function(n){r||(n?(u=n,e=!0,r=!0):e=!1,l=!0)}}))}return n.__ieDyn=1,n}(),rl=function(){function n(){var l={};(0,i.A)(n,this,(function(n){n[Nn]=function(n,e){if(n&&e)try{var t=(o=n[nn](","),i=[],o&&(0,v.I)(o,(function(n){i[Q]((0,Qn.EH)(n))})),i);if("this-request-only"===e)return t;for(var u=1e3*parseInt(e,10),r=0;r<t[K];++r)l[t[r]]=(0,ll.f)()+u}catch(n){return[]}var o,i;return[]},n.isTenantKilled=function(n){var e=l,t=(0,Qn.EH)(n);return void 0!==e[t]&&e[t]>(0,ll.f)()||(delete e[t],!1)}}))}return n.__ieDyn=1,n}();function ol(n){var l,e=Math.floor(1200*Math.random())+2400;return l=Math.pow(2,n)*e,Math.min(l,6e5)}var il=e(6832),sl=e(7931),al=e(3178),cl=2e6,dl=Math.min(cl,65e3),hl="metadata",fl="f",pl=/\./,ml=function(){function n(l,e,t,u){var r="data",o="baseData",d=!!u,h=!0,f=e,p={};(0,i.A)(n,this,(function(n){function e(n,l,u,r,o,i,c){(0,w.z)(n,(function(n,h){var m=null;if(h||(0,s.yD)(h)){var g=u,y=n,v=o,w=l;if(d&&!r&&pl.test(n)){var b=n.split("."),S=b.length;if(S>1){v&&(v=v.slice());for(var C=0;C<S-1;C++){var D=b[C];w=w[D]=w[D]||{},g+="."+D,v&&v.push(D)}y=b[S-1]}}var E=r&&function(n){var l=p[n];return void 0===l&&(n.length>=7&&(l=(0,sl.t)(n,"ext.metadata")||(0,sl.t)(n,"ext.web")),p[n]=l),l}(g);if(m=!E&&f&&f.handleField(g,y)?f.value(g,y,h,t):(0,s.TC)(y,h,t)){var _=m.value;if(w[y]=_,i&&i(v,y,m),c&&"object"==typeof _&&!(0,a.cy)(_)){var k=v;k&&(k=k.slice()).push(y),e(h,_,g+"."+y,r,k,i,c)}}}}))}n.createPayload=function(n,l,e,t,u,r){return{apiKeys:[],payloadBlob:E,overflow:null,sizeExceed:[],failedEvts:[],batches:[],numEvents:0,retryCnt:n,isTeardown:l,isSync:e,isBeacon:t,sendType:r,sendReason:u}},n.appendPayload=function(e,t,u){var r=e&&t&&!e.overflow;return r&&(0,c.r2)(l,(function(){return"Serializer:appendPayload"}),(function(){for(var l=t.events(),r=e.payloadBlob,o=e.numEvents,i=!1,s=[],a=[],c=e.isBeacon,d=c?65e3:3984588,h=c?dl:cl,f=0,p=0;f<l.length;){var m=l[f];if(m){if(o>=u){e.overflow=t.split(f);break}var g=n.getEventBlob(m);if(g&&g.length<=h){var y=g.length;if(r.length+y>d){e.overflow=t.split(f);break}r&&(r+="\n"),r+=g,++p>20&&((0,al.hK)(r,0,1),p=0),i=!0,o++}else g?s.push(m):a.push(m),l.splice(f,1),f--}f++}if(s.length>0&&e.sizeExceed.push(Jn.create(t.iKey(),s)),a.length>0&&e.failedEvts.push(Jn.create(t.iKey(),a)),i){e.batches.push(t),e.payloadBlob=r,e.numEvents=o;var v=t.iKey();-1===(0,il.r)(e.apiKeys,v)&&e.apiKeys.push(v)}}),(function(){return{payload:e,theBatch:{iKey:t.iKey(),evts:t.events()},max:u}})),r},n.getEventBlob=function(n){try{return(0,c.r2)(l,(function(){return"Serializer.getEventBlob"}),(function(){var l={};l.name=n.name,l.time=n.time,l.ver=n.ver,l.iKey="o:"+(0,s.EO)(n.iKey);var t={},u=n.ext;u&&(l.ext=t,(0,w.z)(u,(function(n,l){e(l,t[n]={},"ext."+n,!0,null,null,!0)})));var i=l[r]={};i.baseType=n.baseType;var a=i[o]={};return e(n.baseData,a,o,!1,[o],(function(n,l,e){gl(t,n,l,e)}),h),e(n.data,i,r,!1,[],(function(n,l,e){gl(t,n,l,e)}),h),JSON.stringify(l)}),(function(){return{item:n}}))}catch(n){return null}}}))}return n.__ieDyn=1,n}();function gl(n,l,e,t){if(t&&n){var u=(0,s.Go)(t.value,t.kind,t.propertyType);if(u>-1){var r=n[hl];r||(r=n[hl]={f:{}});var o=r[fl];if(o||(o=r[fl]={}),l)for(var i=0;i<l.length;i++){var c=l[i];o[c]||(o[c]={f:{}});var d=o[c][fl];d||(d=o[c][fl]={}),o=d}o=o[e]={},(0,a.cy)(t.value)?o.a={t:u}:o.t=u}}}var yl,vl=e(6874);function wl(n,l){return{set:function(e,t){for(var u=[],r=2;r<arguments.length;r++)u[r-2]=arguments[r];return(0,vl.vK)([n,l],e,t,u)}}}var bl="sendAttempt",Sl="&NoResponseBody=true",Cl="?cors=true&"+I[en]()+"="+T,Dl=((yl={})[1]=x,yl[100]=x,yl[200]="sent",yl[8004]=k,yl[8003]=k,yl),El={},_l={};function kl(n,l,e){El[n]=l,!1!==e&&(_l[l]=n)}function xl(n){try{return n.responseText}catch(n){}return E}function Tl(n,l){var e=!1;if(n&&l){var t=(0,D.cG)(n);if(t&&t[K]>0)for(var u=l[en](),r=0;r<t[K];r++){var o=t[r];if(o&&(0,Zn.v)(l,o)&&o[en]()===u){e=!0;break}}}return e}function Pl(n,l,e,t){l&&e&&e[K]>0&&(t&&El[l]?(n[tn][El[l]]=e,n[un]=!0):n.url+="&"+l+"="+e)}function Il(n,l){return l&&((0,a.Et)(l)?n=[l][X](n):(0,a.cy)(l)&&(n=l[X](n))),n}kl(M,M,!1),kl(R,R),kl(F,"Client-Id"),kl(j,j),kl(L,L),kl($,$),kl(N,N);var Al=function(){function n(l,e,t,u){var r,o,d,h,p,g,y,S,C,x,M,N,H,U,Hn,Un=new rl,qn=!1,Wn=new ul,zn=!1,Vn=0,Gn=!0,Kn=[],Xn={},Jn=[],Zn=null,il=!1,sl=!1,al=!1,cl=[],dl=[];(0,i.A)(n,this,(function(n){!function(){var n;r=null,Un=new rl,qn=!1,Wn=new ul,zn=!1,Vn=0,o=null,d=null,h=null,p=null,Gn=!0,Kn=[],Xn={},Jn=[],Zn=null,il=!1,g=null,sl=!1,al=!1,y=n,S=n,C=n,x=n,M=n,cl=[],N=n,H=n,dl=[],U=!1,Hn=wl()}();var i=!0;function hl(n,l){for(var e=0,t=null,u=0;null==t&&u<n[K];)1===(e=n[u])?(0,Yn.PV)()?t=fl:(0,Yn.xk)()&&(t=gl):2===e&&(0,Yn.R7)(l)&&(!l||l&&!C)?t=pl:zn&&3===e&&(0,Yn.Uf)()&&(t=vl),u++;return t?{_transport:e,_isSync:l,sendPOST:t}:null}function fl(n,l,e){var t=new XDomainRequest;t.open(_,n[gn]),n[yn]&&(t[yn]=n[yn]),t.onload=function(){var n=xl(t);yl(l,200,{},n),Nl(n)},t.onerror=function(){yl(l,400,{})},t[vn]=function(){yl(l,500,{})},t.onprogress=function(){},e?t.send(n[wn]):Hn.set((function(){t.send(n[wn])}),0)}function pl(n,l,e){var t,u=n[gn],r=!1,o=!1,s=((t={body:n[wn],method:_}).Microsoft_ApplicationInsights_BypassAjaxInstrumentation=!0,t);e&&(s.keepalive=!0,2===n[bn]&&(r=!0,M&&(u+=Sl))),i&&(s.credentials="include"),n.headers&&(0,D.cG)(n.headers)[K]>0&&(s[Sn]=n[Sn]);var a=function(n,e,t){o||(o=!0,yl(l,n,e,t),Nl(t))},c=function(){o||(o=!0,yl(l,0,{}))};fetch(u,s).then((function(n){var l={},e=E,t=n[Sn];t&&t.forEach((function(n,e){l[e]=n})),n.body?n.text().then((function(t){e=t,a(n.status,l,e)}),c):a(n.status,l,"")})).catch(c),r&&!o&&(o=!0,yl(l,200,{})),!o&&n[yn]>0&&Hn.set((function(){o||(o=!0,yl(l,500,{}))}),n[yn])}function gl(n,l,e){var t=n[gn];function u(n,l,e){if(!n[e]&&l&&l[Cn]){var t=l[Cn](e);t&&(n[e]=(0,Qn.EH)(t))}return n}function r(n,e){yl(l,n.status,function(n){var l={};return n[Dn]?l=function(n){var l={};if((0,a.Kg)(n)){var e=(0,Qn.EH)(n)[nn](/[\r\n]+/);(0,v.I)(e,(function(n){if(n){var e=n.indexOf(": ");if(-1!==e){var t=(0,Qn.EH)(n.substring(0,e))[en](),u=(0,Qn.EH)(n.substring(e+1));l[t]=u}else l[(0,Qn.EH)(n)]=1}}))}return l}(n[Dn]()):(l=u(l,n,O),l=u(l,n,A),l=u(l,n,"kill-duration-seconds")),l}(n),e)}e&&n[hn]&&(e=!1);var o=(0,s.H$)(_,t,i,!0,e,n[yn]);(0,w.z)(n[Sn],(function(n,l){o.setRequestHeader(n,l)})),o.onload=function(){var n=xl(o);r(o,n),Nl(n)},o.onerror=function(){r(o)},o[vn]=function(){r(o)},o.send(n[wn])}function yl(n,l,e,t){try{n(l,e,t)}catch(n){(0,b.ZP)(d,2,518,(0,nl.m)(n))}}function vl(n,l,e){var t=200,u=n[En],r=n[gn]+(M?Sl:E);try{var o=(0,m.w3)();if(!o.sendBeacon(r,n[wn]))if(u){var i=!!p.getPlugin("LocalStorage"),s=[],a=[];(0,v.I)(u[_n],(function(n){if(s&&n&&n[Z]()>0)for(var l=n[Y](),e=0;e<l[K];e++){if(!o.sendBeacon(r,Zn.getEventBlob(l[e]))){s[Q](n[nn](e));break}a[Q](n[e])}else s[Q](n[nn](0))})),a[K]>0&&(u.sentEvts=a),i||Bl(s,8003,u[kn],!0)}else t=0}catch(n){(0,b.OG)(d,"Failed to send telemetry using sendBeacon API. Ex:"+(0,nl.m)(n)),t=0}finally{yl(l,t,{},E)}}function El(n){return 2===n||3===n}function kl(n){return sl&&El(n)&&(n=2),n}function Al(){return!qn&&Vn<e}function Ol(){var n=Jn;return Jn=[],n}function Rl(n,l,e){var t=!1;return n&&n[K]>0&&!qn&&h[l]&&Zn&&(t=0!==l||Al()&&(e>0||Wn[q]())),t}function Fl(n){var l={};return n&&(0,v.I)(n,(function(n,e){l[e]={iKey:n[J](),evts:n[Y]()}})),l}function Ll(n,e,t,u,r){if(n&&0!==n[K])if(qn)Bl(n,1,u);else{u=kl(u);try{var o=n,i=0!==u;(0,c.r2)(p,(function(){return"HttpManager:_sendBatches"}),(function(o){o&&(n=n.slice(0));for(var a=[],c=null,d=(0,s.WB)(),f=h[u]||(i?h[1]:h[0]),p=f&&f[On],m=x&&(sl||El(u)||3===p||f._isSync&&2===p);Rl(n,u,e);){var g=n.shift();g&&g[Z]()>0&&(Un.isTenantKilled(g[J]())?a[Q](g):(c=c||Zn.createPayload(e,t,i,m,r,u),Zn.appendPayload(c,g,l)?null!==c.overflow&&(n=[c.overflow][X](n),c.overflow=null,jl(c,d,(0,s.WB)(),r),d=(0,s.WB)(),c=null):(jl(c,d,(0,s.WB)(),r),d=(0,s.WB)(),n=[g][X](n),c=null)))}c&&jl(c,d,(0,s.WB)(),r),n[K]>0&&(Jn=n[X](Jn)),Bl(a,8004,u)}),(function(){return{batches:Fl(o),retryCount:e,isTeardown:t,isSynchronous:i,sendReason:r,useSendBeacon:El(u),sendType:u}}),!i)}catch(n){(0,b.ZP)(d,2,48,"Unexpected Exception sending batch: "+(0,nl.m)(n))}}}function $l(n,l,e){n[l]=n[l]||{},n[l][o.identifier]=e}function jl(l,e,u,i){if(l&&l.payloadBlob&&l.payloadBlob[K]>0){var a=!!N,f=h[l.sendType];!El(l[kn])&&l[Fn]&&2===l.sendReason&&(f=h[2]||h[3]||f);var m=al;(l.isBeacon||3===f[On])&&(m=!1);var g=function(n,l){var e={url:r,hdrs:{},useHdrs:!1};l?(e[tn]=(0,s.X$)(e[tn],Xn),e.useHdrs=(0,D.cG)(e.hdrs)[K]>0):(0,w.z)(Xn,(function(n,l){_l[n]?Pl(e,_l[n],l,!1):(e[tn][n]=l,e[un]=!0)})),Pl(e,F,"NO_AUTH",l),Pl(e,R,s.xE,l);var t=E;(0,v.I)(n.apiKeys,(function(n){t[K]>0&&(t+=","),t+=n})),Pl(e,j,t,l),Pl(e,$,(0,ll.f)().toString(),l);var u=function(n){for(var l=0;l<n.batches[K];l++){var e=n[_n][l].Msfpc();if(e)return encodeURIComponent(e)}return E}(n);if((0,s.yD)(u)&&(e.url+="&ext.intweb.msfpc="+u),Wn[z]()&&Pl(e,L,Wn[V](),l),p[Rn]){var o=p[Rn]();o>=0&&(e.url+="&w="+o)}for(var i=0;i<Kn[K];i++)e.url+="&"+Kn[i].name+"="+Kn[i].value;return e}(l,m);m=m||g[un];var _=(0,s.WB)();(0,c.r2)(p,(function(){return"HttpManager:_doPayloadSend"}),(function(){for(var r=0;r<l.batches[K];r++)for(var h=l[_n][r][Y](),w=0;w<h[K];w++){var D=h[w];if(il){var E=D[Ln]=D[Ln]||{};$l(E,"sendEventStart",_),$l(E,"serializationStart",e),$l(E,"serializationCompleted",u)}D[bl]>0?D[bl]++:D[bl]=1}Bl(l[_n],1e3+(i||0),l[kn],!0);var k={data:l.payloadBlob,urlString:g.url,headers:g[tn],_thePayload:l,_sendReason:i,timeout:y,disableXhrSync:S,disableFetchKeepAlive:C};m&&(Tl(k[Sn],P)||(k[Sn][P]="no-cache, no-store"),Tl(k[Sn],I)||(k[Sn][I]=T));var x=null;f&&(x=function(e){Wn[W]();var u=function(e,u){!function(l,e,u,r){var i,a=9e3,c=null,d=!1,h=!1;try{var f=!0;if(typeof l!==el.bA){if(e){Wn[G](e[O]);var p=e[A]||e["kill-duration-seconds"];(0,v.I)(Un[Nn](e["kill-tokens"],p),(function(n){(0,v.I)(u[_n],(function(l){if(l[J]()===n){c=c||[];var e=l[nn](0);u.numEvents-=e[Z](),c[Q](e)}}))}))}if(200==l||204==l)return void(a=200);((i=l)>=300&&i<500&&408!=i&&429!=i||501==i||505==i||u.numEvents<=0)&&(f=!1),a=9e3+l%1e3}if(f){a=100;var m=u.retryCnt;0===u[kn]&&(m<t?(d=!0,Ml((function(){0===u[kn]&&Vn--,Ll(u[_n],m+1,u[$n],sl?2:u[kn],5)}),sl,ol(m))):(h=!0,sl&&(a=8001)))}}finally{d||(Wn[G](),function(l,e,t,u){try{u&&o[Bn]();var r=l[_n];200===e&&(r=l.sentEvts||l[_n],u||l[jn]||o._clearBackOff(),function(n){if(il){var l=(0,s.WB)();(0,v.I)(n,(function(n){n&&n[Z]()>0&&function(n,l){il&&(0,v.I)(n,(function(n){$l(n[Ln]=n[Ln]||{},"sendEventCompleted",l)}))}(n[Y](),l)}))}}(r)),Bl(r,e,l[kn],!0)}finally{0===l[kn]&&(Vn--,5!==t&&n.sendQueuedRequests(l[kn],t))}}(u,a,r,h)),Bl(c,8004,u[kn])}}(e,u,l,i)},r=l[$n]||l[jn];try{f[Mn](e,u,r),H&&H(k,e,r,l[Fn])}catch(n){(0,b.OG)(d,"Unexpected exception sending payload. Ex:"+(0,nl.m)(n)),yl(u,0,{})}}),(0,c.r2)(p,(function(){return"HttpManager:_doPayloadSend.sender"}),(function(){if(x)if(0===l[kn]&&Vn++,a&&!l.isBeacon&&3!==f[On]){var n={data:k[wn],urlString:k[gn],headers:(0,s.X$)({},k[Sn]),timeout:k[yn],disableXhrSync:k[hn],disableFetchKeepAlive:k[fn]},e=!1;(0,c.r2)(p,(function(){return"HttpManager:_doPayloadSend.sendHook"}),(function(){try{N(n,(function(n){e=!0,Gn||n[En]||(n[En]=n[En]||k[En],n[bn]=n[bn]||k[bn]),x(n)}),l.isSync||l[$n])}catch(n){e||x(k)}}))}else x(k)}))}),(function(){return{thePayload:l,serializationStart:e,serializationCompleted:u,sendReason:i}}),l[jn])}l.sizeExceed&&l.sizeExceed[K]>0&&Bl(l.sizeExceed,8003,l[kn]),l.failedEvts&&l.failedEvts[K]>0&&Bl(l.failedEvts,8002,l[kn])}function Ml(n,l,e){l?n():Hn.set(n,e)}function Nl(n){var l=dl;try{for(var e=0;e<l[K];e++)try{l[e](n)}catch(n){(0,b.ZP)(d,1,519,"Response handler failed: "+n)}if(n){var t=JSON.parse(n);(0,s.yD)(t.webResult)&&(0,s.yD)(t.webResult[B])&&g.set("MSFPC",t.webResult[B],31536e3)}}catch(n){}}function Bl(n,l,e,t){if(n&&n[K]>0&&u){var r=u[(i=l,a=Dl[i],(0,s.yD)(a)||(a="oth",i>=9e3&&i<=9999?a="rspFail":i>=8e3&&i<=8999?a=k:i>=1e3&&i<=1999&&(a="send")),a)];if(r){var o=0!==e;(0,c.r2)(p,(function(){return"HttpManager:_sendBatchesNotification"}),(function(){Ml((function(){try{r.call(u,n,l,o,e)}catch(n){(0,b.ZP)(d,1,74,"send request notification failed: "+n)}}),t||o,0)}),(function(){return{batches:Fl(n),reason:l,isSync:o,sendSync:t,sendType:e}}),!o)}}var i,a}n[rn]=function(n,l,e){U||(p=l,g=l.getCookieMgr(),d=(o=e).diagLog(),(0,tl.Y)(cl,(0,f.a)(n,(function(n){var t,u=n.cfg,o=n.cfg.extensionConfig[e.identifier];Hn=wl(o[on],o[sn]),(0,s.yD)(u.anonCookieName)?function(n,l,e){for(var t=0;t<n[K];t++)if(n[t].name===l)return void(n[t].value=e);n[Q]({name:l,value:e})}(Kn,"anoncknm",u.anonCookieName):function(n){for(var l=0;l<n[K];l++)if("anoncknm"===n[l].name)return void n[ln](l,1)}(Kn),N=o.payloadPreprocessor,H=o.payloadListener;var c=o.httpXHROverride,f=o[an]?o[an]:u.endpointUrl;r=f+Cl,al=!!(0,a.b0)(o[cn])||!o[cn],il=!o.disableEventTimings;var m=o.valueSanitizer,g=o.stringifyObjects,v=!!u[dn];(0,a.b0)(o[dn])||(v=!!o[dn]),y=o.xhrTimeout,S=!!o[hn],C=!!o[fn],M=!1!==o.addNoResponse,l.getPlugin("LocalStorage")&&(C=!0),zn=!(0,Yn.lV)(),Zn=new ml(p,m,g,v),(0,a.hX)(o[pn])||(zn=!!o[pn]);var w=c,D=o[mn]?c:null,E=o[mn]?c:null,_=[3,2];if(!c){Gn=!1;var k=(0,Yn.g$)();k&&k.protocol&&"file:"===k.protocol[en]()&&(i=!1);var T=[];(0,Yn.lV)()?(T=[2,1],_=[2,1,3]):T=[1,2,3],(c=hl(T=Il(T,o.transports),!1))||(0,b.OG)(d,"No available transport to send events"),w=hl(T,!0)}D||(D=hl(_=Il(_,o.unloadTransports),!0)),x=!Gn&&(zn&&(0,Yn.Uf)()||!C&&(0,Yn.R7)(!0)),(t={})[0]=c,t[1]=w||hl([1,2,3],!0),t[2]=D||w||hl([1],!0),t[3]=E||hl([2,3],!0)||w||hl([1],!0),h=t}))),U=!0)},n.addResponseHandler=function(n){return dl[Q](n),{rm:function(){var l=dl.indexOf(n);l>=0&&dl[ln](l,1)}}},n._getDbgPlgTargets=function(){return[h[0],Un,Zn,h]},n.addHeader=function(n,l){Xn[n]=l},n[xn]=function(){return Al()&&Wn[q]()},n[Tn]=function(n,l){(0,a.b0)(n)&&(n=0),sl&&(n=kl(n),l=2),Rl(Jn,n,0)&&Ll(Ol(),0,!1,n,l||0)},n[Pn]=function(){return!qn&&0===Vn&&0===Jn[K]},n[In]=function(n){sl=n},n.addBatch=function(n){if(n&&n[Z]()>0){if(Un.isTenantKilled(n[J]()))return!1;Jn[Q](n)}return!0},n.teardown=function(){Jn[K]>0&&Ll(Ol(),0,!0,2,2),(0,v.I)(cl,(function(n){n&&n.rm&&n.rm()})),cl=[]},n.pause=function(){qn=!0},n.resume=function(){qn=!1,n[Tn](0,4)},n[An]=function(n,l,e){n&&n[Z]()>0&&((0,a.hX)(l)&&(l=1),sl&&(l=kl(l),e=2),Ll([n],0,!1,l,e||0))}}))}return n.__ieDyn=1,n}(),Ol=1e4,Rl="eventsDiscarded",Fl=void 0,Ll=(0,D.ZH)({eventsLimitInMem:{isVal:s.ei,v:Ol},immediateEventLimit:{isVal:s.ei,v:500},autoFlushEventsLimit:{isVal:s.ei,v:0},disableAutoBatchFlushLimit:!1,httpXHROverride:{isVal:function(n){return n&&n[Mn]},v:Fl},overrideInstrumentationKey:Fl,overrideEndpointUrl:Fl,disableTelemetry:!1,ignoreMc1Ms0CookieProcessing:!1,setTimeoutOverride:Fl,clearTimeoutOverride:Fl,payloadPreprocessor:Fl,payloadListener:Fl,disableEventTimings:Fl,valueSanitizer:Fl,stringifyObjects:Fl,enableCompoundKey:Fl,disableOptimizeObj:!1,transports:Fl,unloadTransports:Fl,useSendBeacon:Fl,disableFetchKeepAlive:Fl,avoidOptions:!1,xhrTimeout:Fl,disableXhrSync:Fl,alwaysUseXhrOverride:!1,maxEventRetryAttempts:{isVal:a.Et,v:6},maxUnloadEventRetryAttempts:{isVal:a.Et,v:2},addNoResponse:Fl}),$l=function(n){function l(){var e,o=n.call(this)||this;o.identifier="PostChannel",o.priority=1011,o.version="4.0.4";var a,S,D,E,_,k,x,T,P,I,A,O,R,F,L,$,j,N,B,q,W,z,V,G,en,tn=!1,un=[],an=!1,cn=0,dn=0,hn={},fn=t;return(0,i.A)(l,o,(function(n,l){function o(){(0,d.Ds)(null,N),(0,d.sq)(null,N),(0,d.vF)(null,N)}function i(n){"beforeunload"!==(n||(0,m.zk)().event).type&&(L=!0,T[In](L)),Dn(2,2)}function pn(n){L=!1,T[In](L)}function mn(n,l){if(n[Wn]||(n[Wn]=0),n[zn]||(n[zn]=1),n.ext&&n.ext[H]&&delete n.ext[H],n.ext&&n.ext[U]&&n.ext[U].id&&delete n.ext[U].id,F&&(n.ext=(0,g.hW)(n.ext),n[Vn]&&(n[Vn]=(0,g.hW)(n[Vn])),n[wn]&&(n[wn]=(0,g.hW)(n[wn]))),n[Gn])if(k||an)n[zn]=3,n[Gn]=!1;else if(T)return F&&(n=(0,g.hW)(n)),void T[An](Jn.create(n[J],[n]),!0===n[Gn]?1:n[Gn],3);var e=n[zn],t=dn,u=D;4===e&&(t=cn,u=S);var r=!1;if(t<u)r=!On(n,l);else{var o=1,i=20;4===e&&(o=4,i=1),r=!0,function(n,l,e,t){for(;e<=l;){var u=En(n,l,!0);if(u&&u[Z]()>0){var r=u[nn](0,t),o=r[Z]();if(o>0)return 4===e?cn-=o:dn-=o,Zn(Rl,[r],y.x.QueueFull),!0}e++}return Fn(),!1}(n[J],n[zn],o,i)&&(r=!On(n,l))}r&&Xn(Rl,[n],y.x.QueueFull)}function gn(n,l,e){var t=Ln(n,l,e);return T[Tn](l,e),t}function yn(){return dn>0}function vn(){if(O>=0&&Ln(O,0,R)&&T[Tn](0,R),cn>0&&!_&&!an){var n=hn[fn][2];n>=0&&(_=Sn((function(){_=null,gn(4,0,1),vn()}),n))}var l=hn[fn][1];!E&&!a&&l>=0&&!an&&(yn()?E=Sn((function(){E=null,gn(0===x?3:1,0,1),x++,x%=2,vn()}),l):x=0)}function bn(){e=null,tn=!1,un=[],a=null,an=!1,cn=0,S=500,dn=0,D=Ol,hn={},fn=t,E=null,_=null,k=0,x=0,P={},I=0,V=!1,A=0,O=-1,R=null,F=!0,L=!1,$=6,j=2,N=null,G=null,en=!1,B=wl(),T=new Al(500,2,1,{requeue:Nn,send:Yn,sent:Qn,drop:nl,rspFail:ll,oth:el}),Mn(),P[4]={batches:[],iKeyMap:{}},P[3]={batches:[],iKeyMap:{}},P[2]={batches:[],iKeyMap:{}},P[1]={batches:[],iKeyMap:{}},tl()}function Sn(n,l){0===l&&k&&(l=1);var e=1e3;return k&&(e=ol(k-1)),B.set(n,l*e)}function Cn(){return null!==E&&(E.cancel(),E=null,x=0,!0)}function Dn(n,l){Cn(),a&&(a.cancel(),a=null),an||gn(1,n,l)}function En(n,l,e){var t=P[l];t||(t=P[l=1]);var u=t.iKeyMap[n];return!u&&e&&(u=Jn.create(n),t.batches[Q](u),t.iKeyMap[n]=u),u}function kn(l,e){T[xn]()&&!k&&(I>0&&dn>I&&(e=!0),e&&null==a&&n.flush(l,(function(){}),20))}function On(n,l){F&&(n=(0,g.hW)(n));var e=n[zn],t=En(n[J],e,!0);return!!t.addEvent(n)&&(4!==e?(dn++,l&&0===n[Wn]&&kn(!n.sync,A>0&&t[Z]()>=A)):cn++,!0)}function Fn(){for(var n=0,l=0,e=function(e){var t=P[e];t&&t[_n]&&(0,v.I)(t[_n],(function(t){4===e?n+=t[Z]():l+=t[Z]()}))},t=1;t<=4;t++)e(t);dn=l,cn=n}function Ln(l,e,t){var u=!1,r=0===e;return!r||T[xn]()?(0,c.r2)(n.core,(function(){return"PostChannel._queueBatches"}),(function(){for(var n=[],e=4;e>=l;){var t=P[e];t&&t.batches&&t.batches[K]>0&&((0,v.I)(t[_n],(function(l){T.addBatch(l)?u=u||l&&l[Z]()>0:n=n[X](l[Y]()),4===e?cn-=l[Z]():dn-=l[Z]()})),t[_n]=[],t.iKeyMap={}),e--}n[K]>0&&Xn(Rl,n,y.x.KillSwitch),u&&O>=l&&(O=-1,R=0)}),(function(){return{latency:l,sendType:e,sendReason:t}}),!r):(O=O>=0?Math.min(O,l):l,R=Math.max(R,t)),u}function $n(n,l){gn(1,0,l),Fn(),jn((function(){n&&n(),un[K]>0?a=Sn((function(){a=null,$n(un.shift(),l)}),0):(a=null,vn())}))}function jn(n){T[Pn]()?n():a=Sn((function(){a=null,jn(n)}),.25)}function Mn(){(hn={})[t]=[2,1,0],hn[u]=[6,3,0],hn[r]=[18,9,0]}function Nn(l,e){var t=[],u=$;L&&(u=j),(0,v.I)(l,(function(l){l&&l[Z]()>0&&(0,v.I)(l[Y](),(function(l){l&&(l[Gn]&&(l[zn]=4,l[Gn]=!1),l[Wn]<u?((0,s.u9)(l,n[Hn]),mn(l,!1)):t[Q](l))}))})),t[K]>0&&Xn(Rl,t,y.x.NonRetryableStatus),L&&Dn(2,2)}function Kn(l,e){var t=z||{},u=t[l];if(u)try{u.apply(t,e)}catch(e){(0,b.ZP)(n.diagLog(),1,74,l+" notification failed: "+e)}}function Xn(n,l){for(var e=[],t=2;t<arguments.length;t++)e[t-2]=arguments[t];l&&l[K]>0&&Kn(n,[l][X](e))}function Zn(n,l){for(var e=[],t=2;t<arguments.length;t++)e[t-2]=arguments[t];l&&l[K]>0&&(0,v.I)(l,(function(l){l&&l[Z]()>0&&Kn(n,[l.events()][X](e))}))}function Yn(n,l,e){n&&n[K]>0&&Kn("eventsSendRequest",[l>=1e3&&l<=1999?l-1e3:0,!0!==e])}function Qn(n,l){Zn("eventsSent",n,l),vn()}function nl(n,l){Zn(Rl,n,l>=8e3&&l<=8999?l-8e3:y.x.Unknown)}function ll(n){Zn(Rl,n,y.x.NonRetryableStatus),vn()}function el(n,l){Zn(Rl,n,y.x.Unknown),vn()}function tl(){A=W?0:Math.max(1500,D/6)}bn(),n._getDbgPlgTargets=function(){return[T,e]},n[rn]=function(t,u,r){(0,c.r2)(u,(function(){return"PostChannel:initialize"}),(function(){l[rn](t,u,r),z=u.getNotifyMgr();try{N=(0,d.Hm)((0,h.Z)(n[Hn]),u.evtNamespace&&u.evtNamespace()),n._addHook((0,f.a)(t,(function(l){var t=l.cfg,r=(0,p.i8)(null,t,u);e=r.getExtCfg(n[Hn],Ll),B=wl(e[on],e[sn]),F=!e.disableOptimizeObj&&(0,s.F2)(),q=e.ignoreMc1Ms0CookieProcessing,function(n){var l=n[Rn];n[Rn]=function(){var e=0;return q&&(e|=2),e|l.call(n)}}(u),D=e[Un],S=e.immediateEventLimit,I=e[qn],$=e.maxEventRetryAttempts,j=e.maxUnloadEventRetryAttempts,W=e.disableAutoBatchFlushLimit,tl(),G=e.overrideInstrumentationKey,en=!!e.disableTelemetry,V&&o();var a=t.disablePageUnloadEvents||[];V=(0,d.ee)(i,a,N),V=(0,d.Fc)(i,a,N)||V,V=(0,d.oS)(pn,t.disablePageShowEvents,N)||V}))),T[rn](t,n.core,n)}catch(l){throw n.setInitialized(!1),l}}),(function(){return{theConfig:t,core:u,extensions:r}}))},n.processTelemetry=function(l,e){(0,s.u9)(l,n[Hn]),e=e||n._getTelCtx(e);var t=l;en||tn||(G&&(t[J]=G),mn(t,!0),L?Dn(2,2):vn()),n.processNext(t,e)},n._doTeardown=function(n,l){Dn(2,2),tn=!0,T.teardown(),o(),bn()},n.setEventQueueLimits=function(n,l){e[Un]=D=(0,s.ei)(n)?n:Ol,e[qn]=I=(0,s.ei)(l)?l:0,tl();var t=dn>n;if(!t&&A>0)for(var u=1;!t&&u<=3;u++){var r=P[u];r&&r[_n]&&(0,v.I)(r[_n],(function(n){n&&n[Z]()>=A&&(t=!0)}))}kn(!0,t)},n.pause=function(){Cn(),an=!0,T.pause()},n.resume=function(){an=!1,T.resume(),vn()},n._loadTransmitProfiles=function(n){Cn(),Mn(),fn=t,vn(),(0,w.z)(n,(function(n,l){var e=l[K];if(e>=2){var t=e>2?l[2]:0;if(l[ln](0,e-2),l[1]<0&&(l[0]=-1),l[1]>0&&l[0]>0){var u=l[0]/l[1];l[0]=Math.ceil(u)*l[1]}t>=0&&l[1]>=0&&t>l[1]&&(t=l[1]),l[Q](t),hn[n]=l}}))},n.flush=function(n,l,e){var t;if(void 0===n&&(n=!0),!an)if(e=e||1,n)l||(t=(0,C.Qo)((function(n){l=n}))),null==a?(Cn(),Ln(1,0,e),a=Sn((function(){a=null,$n(l,e)}),0)):un[Q](l);else{var u=Cn();gn(1,1,e),l&&l(),u&&vn()}return t},n.setMsaAuthTicket=function(n){T.addHeader(M,n)},n.hasEvents=yn,n._setTransmitProfile=function(n){fn!==n&&void 0!==hn[n]&&(Cn(),fn=n,vn())},(0,g.o$)(n,(function(){return T}),["addResponseHandler"]),n[Bn]=function(){k<4&&(k++,Cn(),vn())},n._clearBackOff=function(){k&&(k=0,Cn(),vn())}})),o}return(0,o.qU)(l,n),l.__ieDyn=1,l}(S.s)},4484:(n,l,e)=>{"use strict";e.d(l,{F:()=>d,H:()=>c});var t=e(1011),u=e(1324),r=e(2494),o=e(5025),i=e(2749),s=";",a="=";function c(n){if(!n)return{};var l=n[i.sY](s),e=(0,t.K)(l,(function(n,l){var e=l[i.sY](a);if(2===e[i.oI]){var t=e[0][i.OL](),u=e[1];n[t]=u}return n}),{});if((0,u.cG)(e)[i.oI]>0){if(e.endpointsuffix){var c=e.location?e.location+".":"";e[i.zV]=e[i.zV]||"https://"+c+"dc."+e.endpointsuffix}e[i.zV]=e[i.zV]||o._G,(0,r.C)(e[i.zV],"/")&&(e[i.zV]=e[i.zV].slice(0,-1))}return e}var d={parse:c}},5025:(n,l,e)=>{"use strict";e.d(l,{R2:()=>a,_G:()=>i,jp:()=>r,ks:()=>c,tU:()=>u,wc:()=>s,xF:()=>t,ym:()=>o});var t="Microsoft_ApplicationInsights_BypassAjaxInstrumentation",u="sampleRate",r="ProcessLegacy",o="http.method",i="https://dc.services.visualstudio.com",s="/v2/track",a="not_specified",c="iKey"},7374:(n,l,e)=>{"use strict";e.d(l,{e:()=>u,u:()=>r});var t=e(4282),u=(0,t.H)({LocalStorage:0,SessionStorage:1}),r=(0,t.H)({AI:0,AI_AND_W3C:1,W3C:2})},87:(n,l,e)=>{"use strict";e.d(l,{Dt:()=>i,Y8:()=>a,bb:()=>s,vv:()=>c});var t=e(5439),u=e(6668),r=e(2749),o="";function i(n,l){return void 0===l&&(l=!1),null==n?l:"true"===n.toString()[r.OL]()}function s(n){(isNaN(n)||n<0)&&(n=0),n=Math.round(n);var l=o+n%1e3,e=o+Math.floor(n/1e3)%60,t=o+Math.floor(n/6e4)%60,u=o+Math.floor(n/36e5)%24,i=Math.floor(n/864e5);return l=1===l[r.oI]?"00"+l:2===l[r.oI]?"0"+l:l,e=e[r.oI]<2?"0"+e:e,t=t[r.oI]<2?"0"+t:t,u=u[r.oI]<2?"0"+u:u,(i>0?i+".":o)+u+":"+t+":"+e+"."+l}function a(n,l){var e=null;return(0,t.I)(n,(function(n){if(n.identifier===l)return e=n,-1})),e}function c(n,l,e,t,r){return!r&&(0,u.Kg)(n)&&("Script error."===n||"Script error"===n)}},8596:(n,l,e)=>{"use strict";e.d(l,{o:()=>p});var t=e(659),u=e(3673);function r(n){var l="ai."+n+".";return function(n){return l+n}}var o=r("application"),i=r("device"),s=r("location"),a=r("operation"),c=r("session"),d=r("user"),h=r("cloud"),f=r("internal"),p=function(n){function l(){return n.call(this)||this}return(0,t.qU)(l,n),l}((0,u.SZ)({applicationVersion:o("ver"),applicationBuild:o("build"),applicationTypeId:o("typeId"),applicationId:o("applicationId"),applicationLayer:o("layer"),deviceId:i("id"),deviceIp:i("ip"),deviceLanguage:i("language"),deviceLocale:i("locale"),deviceModel:i("model"),deviceFriendlyName:i("friendlyName"),deviceNetwork:i("network"),deviceNetworkName:i("networkName"),deviceOEMName:i("oemName"),deviceOS:i("os"),deviceOSVersion:i("osVersion"),deviceRoleInstance:i("roleInstance"),deviceRoleName:i("roleName"),deviceScreenResolution:i("screenResolution"),deviceType:i("type"),deviceMachineName:i("machineName"),deviceVMName:i("vmName"),deviceBrowser:i("browser"),deviceBrowserVersion:i("browserVersion"),locationIp:s("ip"),locationCountry:s("country"),locationProvince:s("province"),locationCity:s("city"),operationId:a("id"),operationName:a("name"),operationParentId:a("parentId"),operationRootId:a("rootId"),operationSyntheticSource:a("syntheticSource"),operationCorrelationVector:a("correlationVector"),sessionId:c("id"),sessionIsFirst:c("isFirst"),sessionIsNew:c("isNew"),userAccountAcquisitionDate:d("accountAcquisitionDate"),userAccountId:d("accountId"),userAgent:d("userAgent"),userId:d("id"),userStoreRegion:d("storeRegion"),userAuthUserId:d("authUserId"),userAnonymousUserAcquisitionDate:d("anonUserAcquisitionDate"),userAuthenticatedUserAcquisitionDate:d("authUserAcquisitionDate"),cloudName:h("name"),cloudRole:h("role"),cloudRoleVer:h("roleVer"),cloudRoleInstance:h("roleInstance"),cloudEnvironment:h("environment"),cloudLocation:h("location"),cloudDeploymentUnit:h("deploymentUnit"),internalNodeName:f("nodeName"),internalSdkVersion:f("sdkVersion"),internalAgentVersion:f("agentVersion"),internalSnippet:f("snippet"),internalSdkSrc:f("sdkSrc")}))},9762:(n,l,e)=>{"use strict";e.d(l,{O:()=>t});var t=(0,e(4282).H)({Verbose:0,Information:1,Warning:2,Error:3,Critical:4})},1575:(n,l,e)=>{"use strict";e.d(l,{F:()=>u,O:()=>r});var t=e(8596),u={UserExt:"user",DeviceExt:"device",TraceExt:"trace",WebExt:"web",AppExt:"app",OSExt:"os",SessionExt:"ses",SDKExt:"sdk"},r=new t.o},2910:(n,l,e)=>{"use strict";e.d(l,{a:()=>t});var t=(0,e(4282).o)({requestContextHeader:[0,"Request-Context"],requestContextTargetKey:[1,"appId"],requestContextAppIdFormat:[2,"appId=cid-v1:"],requestIdHeader:[3,"Request-Id"],traceParentHeader:[4,"traceparent"],traceStateHeader:[5,"tracestate"],sdkContextHeader:[6,"Sdk-Context"],sdkContextHeaderAppIdRequest:[7,"appId"],requestContextHeaderLowerCase:[8,"request-context"]})},4658:(n,l,e)=>{"use strict";e.d(l,{AN:()=>E,BW:()=>b,Dt:()=>x,Nu:()=>y,Se:()=>S,T9:()=>_,_M:()=>C,iw:()=>w,tm:()=>D,v7:()=>T,vH:()=>k,vh:()=>v});var t=e(6668),u=e(3076),r=e(3775),o=e(3673),i=e(8693),s=e(9018),a=e(7374),c=e(2749),d=void 0,h=void 0,f="";function p(){return b()?m(a.e.LocalStorage):null}function m(n){try{if((0,t.hX)((0,u.mS)()))return null;var l=(new Date)[c.xE](),e=(0,u.zS)(n===a.e.LocalStorage?"localStorage":"sessionStorage"),r=f+l;e.setItem(r,l);var o=e.getItem(r)!==l;if(e[c.AZ](r),!o)return e}catch(n){}return null}function g(){return E()?m(a.e.SessionStorage):null}function y(){d=!1,h=!1}function v(n){f=n||""}function w(){d=b(!0),h=E(!0)}function b(n){return(n||void 0===d)&&(d=!!m(a.e.LocalStorage)),d}function S(n,l){var e=p();if(null!==e)try{return e.getItem(l)}catch(l){d=!1,(0,r.ZP)(n,2,1,"Browser failed read of local storage. "+(0,o.lL)(l),{exception:(0,i.m)(l)})}return null}function C(n,l,e){var t=p();if(null!==t)try{return t.setItem(l,e),!0}catch(l){d=!1,(0,r.ZP)(n,2,3,"Browser failed write to local storage. "+(0,o.lL)(l),{exception:(0,i.m)(l)})}return!1}function D(n,l){var e=p();if(null!==e)try{return e[c.AZ](l),!0}catch(l){d=!1,(0,r.ZP)(n,2,5,"Browser failed removal of local storage item. "+(0,o.lL)(l),{exception:(0,i.m)(l)})}return!1}function E(n){return(n||void 0===h)&&(h=!!m(a.e.SessionStorage)),h}function _(){var n=[];return E()&&(0,s.z)((0,u.zS)("sessionStorage"),(function(l){n.push(l)})),n}function k(n,l){var e=g();if(null!==e)try{return e.getItem(l)}catch(l){h=!1,(0,r.ZP)(n,2,2,"Browser failed read of session storage. "+(0,o.lL)(l),{exception:(0,i.m)(l)})}return null}function x(n,l,e){var t=g();if(null!==t)try{return t.setItem(l,e),!0}catch(l){h=!1,(0,r.ZP)(n,2,4,"Browser failed write to session storage. "+(0,o.lL)(l),{exception:(0,i.m)(l)})}return!1}function T(n,l){var e=g();if(null!==e)try{return e[c.AZ](l),!0}catch(l){h=!1,(0,r.ZP)(n,2,6,"Browser failed removal of session storage item. "+(0,o.lL)(l),{exception:(0,i.m)(l)})}return!1}},7358:(n,l,e)=>{"use strict";e.d(l,{B:()=>t});var t=function(n,l){this.aiDataContract={baseType:1,baseData:1},this.baseType=n,this.baseData=l}},7975:(n,l,e)=>{"use strict";e.d(l,{HQ:()=>w,Rr:()=>f,Vj:()=>v,Vk:()=>m,Vt:()=>g,_T:()=>b,lq:()=>h,pJ:()=>p,qW:()=>S,xP:()=>y,zx:()=>d});var t=e(1374),u=e(3775),r=e(9018),o=e(6668),i=e(7292),s=e(3178),a=e(5977),c=e(2749);function d(n,l,e){var t=l[c.oI],u=h(n,l);if(u[c.oI]!==t){for(var r=0,o=u;void 0!==e[o];)r++,o=(0,s.P0)(u,0,147)+S(r);u=o}return u}function h(n,l){var e;return l&&(l=(0,t.EH)((0,a.o)(l)))[c.oI]>150&&(e=(0,s.P0)(l,0,150),(0,u.ZP)(n,2,57,"name is too long.  It has been truncated to 150 characters.",{name:l},!0)),e||l}function f(n,l,e){var r;return void 0===e&&(e=1024),l&&(e=e||1024,(l=(0,t.EH)((0,a.o)(l)))[c.oI]>e&&(r=(0,s.P0)(l,0,e),(0,u.ZP)(n,2,61,"string value is too long. It has been truncated to "+e+" characters.",{value:l},!0))),r||l}function p(n,l){return b(n,l,2048,66)}function m(n,l){var e;return l&&l[c.oI]>32768&&(e=(0,s.P0)(l,0,32768),(0,u.ZP)(n,2,56,"message is too long, it has been truncated to 32768 characters.",{message:l},!0)),e||l}function g(n,l){var e;if(l){var t=""+l;t[c.oI]>32768&&(e=(0,s.P0)(t,0,32768),(0,u.ZP)(n,2,52,"exception is too long, it has been truncated to 32768 characters.",{exception:l},!0))}return e||l}function y(n,l){if(l){var e={};(0,r.z)(l,(function(l,t){if((0,o.Gv)(t)&&(0,i.Z)())try{t=(0,i.hm)()[c.Jj](t)}catch(l){(0,u.ZP)(n,2,49,"custom property is not valid",{exception:l},!0)}t=f(n,t,8192),l=d(n,l,e),e[l]=t})),l=e}return l}function v(n,l){if(l){var e={};(0,r.z)(l,(function(l,t){l=d(n,l,e),e[l]=t})),l=e}return l}function w(n,l){return l?b(n,l,128,69)[c.xE]():l}function b(n,l,e,r){var o;return l&&(l=(0,t.EH)((0,a.o)(l)))[c.oI]>e&&(o=(0,s.P0)(l,0,e),(0,u.ZP)(n,2,r,"input is too long, it has been truncated to "+e+" characters.",{data:l},!0)),o||l}function S(n){var l="00"+n;return(0,s.hK)(l,l[c.oI]-3)}},1062:(n,l,e)=>{"use strict";e.d(l,{L:()=>i});var t=e(3673),u=e(5025),r=e(2749),o=e(7975),i=function(n,l,e){var i=this,s=this;s.ver=1,s.sampleRate=100,s.tags={},s[r.RS]=(0,o.Rr)(n,e)||u.R2,s.data=l,s.time=(0,t._u)(new Date),s.aiDataContract={time:1,iKey:1,name:1,sampleRate:function(){return 100===i.sampleRate?4:1},tags:1,data:1}}},3072:(n,l,e)=>{"use strict";e.d(l,{J:()=>o});var t=e(5025),u=e(2749),r=e(7975),o=function(){function n(n,l,e,o){this.aiDataContract={ver:1,name:1,properties:0,measurements:0};var i=this;i.ver=2,i[u.RS]=(0,r.Rr)(n,l)||t.R2,i[u.$y]=(0,r.xP)(n,e),i[u.XA]=(0,r.Vj)(n,o)}return n.envelopeType="Microsoft.ApplicationInsights.{0}.Event",n.dataType="EventData",n}()},5397:(n,l,e)=>{"use strict";e.d(l,{WJ:()=>k});var t=e(659),u=e(6668),r=e(5439),o=e(4335),i=e(1374),s=e(5881),a=e(3076),c=e(5025),d=e(2749),h=e(7975),f="error",p="stack",m="stackDetails",g="errorSrc",y="message",v="description";function w(n,l){var e=n;return e&&!(0,u.Kg)(e)&&(JSON&&JSON[d.Jj]?(e=JSON[d.Jj](n),!l||e&&"{}"!==e||(e=(0,u.Tn)(n[d.xE])?n[d.xE]():""+n)):e=n+" - (Missing JSON.stringify)"),e||""}function b(n,l){var e=n;return n&&(e&&!(0,u.Kg)(e)&&(e=n[y]||n[v]||e),e&&!(0,u.Kg)(e)&&(e=w(e,!0)),n.filename&&(e=e+" @"+(n.filename||"")+":"+(n.lineno||"?")+":"+(n.colno||"?"))),l&&"String"!==l&&"Object"!==l&&"Error"!==l&&-1===(0,s.H)(e||"",l)&&(e=l+": "+e),e||""}function S(n){return n&&n.src&&(0,u.Kg)(n.src)&&n.obj&&(0,u.cy)(n.obj)}function C(n){var l=n||"";(0,u.Kg)(l)||(l=(0,u.Kg)(l[p])?l[p]:""+l);var e=l[d.sY]("\n");return{src:l,obj:e}}function D(n){var l=null;if(n)try{if(n[p])l=C(n[p]);else if(n[f]&&n[f][p])l=C(n[f][p]);else if(n.exception&&n.exception[p])l=C(n.exception[p]);else if(S(n))l=n;else if(S(n[m]))l=n[m];else if((0,a.zk)()&&(0,a.zk)().opera&&n[y])l=function(n){for(var l=[],e=n[d.sY]("\n"),t=0;t<e[d.oI];t++){var u=e[t];e[t+1]&&(u+="@"+e[t+1],t++),l.push(u)}return{src:n,obj:l}}(n[d.pM]);else if(n.reason&&n.reason[p])l=C(n.reason[p]);else if((0,u.Kg)(n))l=C(n);else{var e=n[y]||n[v]||"";(0,u.Kg)(n[g])&&(e&&(e+="\n"),e+=" from "+n[g]),e&&(l=C(e))}}catch(n){l=C(n)}return l||{src:"",obj:null}}function E(n){var l="";if(n&&!(l=n.typeName||n[d.RS]||""))try{var e=/function (.{1,200})\(/.exec(n.constructor[d.xE]());l=e&&e[d.oI]>1?e[1]:""}catch(n){}return l}function _(n){if(n)try{if(!(0,u.Kg)(n)){var l=E(n),e=w(n,!1);return e&&"{}"!==e||(n[f]&&(l=E(n=n[f])),e=w(n,!0)),0!==(0,s.H)(e,l)&&"String"!==l?l+":"+e:e}}catch(n){}return""+(n||"")}var k=function(){function n(n,l,e,t,r,o){this.aiDataContract={ver:1,exceptions:1,severityLevel:0,properties:0,measurements:0};var i=this;i.ver=2,function(n){try{if((0,u.Gv)(n))return"ver"in n&&"exceptions"in n&&"properties"in n}catch(n){}return!1}(l)?(i[d.OK]=l[d.OK]||[],i[d.$y]=l[d.$y],i[d.XA]=l[d.XA],l[d.Ur]&&(i[d.Ur]=l[d.Ur]),l.id&&(i.id=l.id),l[d.Fq]&&(i[d.Fq]=l[d.Fq]),(0,u.hX)(l[d.r1])||(i[d.r1]=l[d.r1])):(e||(e={}),i[d.OK]=[new x(n,l,e)],i[d.$y]=(0,h.xP)(n,e),i[d.XA]=(0,h.Vj)(n,t),r&&(i[d.Ur]=r),o&&(i.id=o))}return n.CreateAutoException=function(n,l,e,t,u,r,o,i){var s,a=E(u||r||n);return(s={})[d.pM]=b(n,a),s.url=l,s.lineNumber=e,s.columnNumber=t,s.error=_(u||r||n),s.evt=_(r||n),s[d.qg]=a,s.stackDetails=D(o||u||r),s.errorSrc=i,s},n.CreateFromInterface=function(l,e,u,r){var i=e[d.OK]&&(0,o.W)(e[d.OK],(function(n){return x[d.vu](l,n)}));return new n(l,(0,t.Im)((0,t.Im)({},e),{exceptions:i}),u,r)},n.prototype.toInterface=function(){var n,l=this,e=l.exceptions,t=l.properties,u=l.measurements,r=l.severityLevel,i=l.problemGroup,s=l.id,a=l.isManual,c=e instanceof Array&&(0,o.W)(e,(function(n){return n.toInterface()}))||void 0;return(n={ver:"4.0"})[d.OK]=c,n.severityLevel=r,n.properties=t,n.measurements=u,n.problemGroup=i,n.id=s,n.isManual=a,n},n.CreateSimpleException=function(n,l,e,t,u,r){var o;return{exceptions:[(o={},o[d.lW]=!0,o.message=n,o.stack=u,o.typeName=l,o)]}},n.envelopeType="Microsoft.ApplicationInsights.{0}.Exception",n.dataType="ExceptionData",n.formatError=_,n}(),x=function(){function n(n,l,e){this.aiDataContract={id:0,outerId:0,typeName:1,message:1,hasFullStack:0,stack:0,parsedStack:2};var t=this;if(function(n){try{if((0,u.Gv)(n))return"hasFullStack"in n&&"typeName"in n}catch(n){}return!1}(l))t[d.qg]=l[d.qg],t[d.pM]=l[d.pM],t[p]=l[p],t[d.on]=l[d.on]||[],t[d.lW]=l[d.lW];else{var i=l,s=i&&i.evt;(0,u.bJ)(i)||(i=i[f]||s||i),t[d.qg]=(0,h.Rr)(n,E(i))||c.R2,t[d.pM]=(0,h.Vk)(n,b(l||i,t[d.qg]))||c.R2;var a=l[m]||D(l);t[d.on]=function(n){var l,e=n.obj;if(e&&e[d.oI]>0){l=[];var t=0,u=0;if((0,r.I)(e,(function(n){var e=n[d.xE]();if(T.regex.test(e)){var r=new T(e,t++);u+=r[d.J$],l.push(r)}})),u>32768)for(var o=0,i=l[d.oI]-1,s=0,a=o,c=i;o<i;){if((s+=l[o][d.J$]+l[i][d.J$])>32768){var h=c-a+1;l.splice(a,h);break}a=o,c=i,o++,i--}}return l}(a),(0,u.cy)(t[d.on])&&(0,o.W)(t[d.on],(function(l){l[d.QE]=(0,h.Rr)(n,l[d.QE]),l[d.IE]=(0,h.Rr)(n,l[d.IE])})),t[p]=(0,h.Vt)(n,function(n){var l="";return n&&(n.obj?(0,r.I)(n.obj,(function(n){l+=n+"\n"})):l=n.src||""),l}(a)),t.hasFullStack=(0,u.cy)(t.parsedStack)&&t.parsedStack[d.oI]>0,e&&(e[d.qg]=e[d.qg]||t[d.qg])}}return n.prototype.toInterface=function(){var n,l=this,e=l[d.on]instanceof Array&&(0,o.W)(l[d.on],(function(n){return n.toInterface()}));return(n={id:l.id,outerId:l.outerId,typeName:l[d.qg],message:l[d.pM],hasFullStack:l[d.lW],stack:l[p]})[d.on]=e||void 0,n},n.CreateFromInterface=function(l,e){var u=e[d.on]instanceof Array&&(0,o.W)(e[d.on],(function(n){return T[d.vu](n)}))||e[d.on];return new n(l,(0,t.Im)((0,t.Im)({},e),{parsedStack:u}))},n}(),T=function(){function n(l,e){this.aiDataContract={level:1,method:1,assembly:0,fileName:0,line:0};var t=this;if(t[d.J$]=0,"string"==typeof l){var u=l;t[d.Av]=e,t[d.lx]="<no_method>",t[d.QE]=(0,i.EH)(u),t[d.IE]="",t[d.h_]=0;var r=u.match(n.regex);r&&r[d.oI]>=5&&(t[d.lx]=(0,i.EH)(r[2])||t[d.lx],t[d.IE]=(0,i.EH)(r[4]),t[d.h_]=parseInt(r[5])||0)}else t[d.Av]=l[d.Av],t[d.lx]=l[d.lx],t[d.QE]=l[d.QE],t[d.IE]=l[d.IE],t[d.h_]=l[d.h_],t[d.J$]=0;t.sizeInBytes+=t.method[d.oI],t.sizeInBytes+=t.fileName[d.oI],t.sizeInBytes+=t.assembly[d.oI],t[d.J$]+=n.baseSize,t.sizeInBytes+=t.level.toString()[d.oI],t.sizeInBytes+=t.line.toString()[d.oI]}return n.CreateFromInterface=function(l){return new n(l,null)},n.prototype.toInterface=function(){var n=this;return{level:n[d.Av],method:n[d.lx],assembly:n[d.QE],fileName:n[d.IE],line:n[d.h_]}},n.regex=/^([\s]+at)?[\s]{0,50}([^\@\()]+?)[\s]{0,50}(\@|\()([^\(\n]+):([0-9]+):([0-9]+)(\)?)$/,n.baseSize=58,n}()},5014:(n,l,e)=>{"use strict";e.d(l,{J:()=>i});var t=e(5025),u=e(2749),r=function(){this.aiDataContract={name:1,kind:0,value:1,count:0,min:0,max:0,stdDev:0},this.kind=0},o=e(7975),i=function(){function n(n,l,e,i,s,a,c,d,h){this.aiDataContract={ver:1,metrics:1,properties:0};var f=this;f.ver=2;var p=new r;p[u.F2]=i>0?i:void 0,p.max=isNaN(a)||null===a?void 0:a,p.min=isNaN(s)||null===s?void 0:s,p[u.RS]=(0,o.Rr)(n,l)||t.R2,p.value=e,p.stdDev=isNaN(c)||null===c?void 0:c,f.metrics=[p],f[u.$y]=(0,o.xP)(n,d),f[u.XA]=(0,o.Vj)(n,h)}return n.envelopeType="Microsoft.ApplicationInsights.{0}.Metric",n.dataType="MetricData",n}()},1448:(n,l,e)=>{"use strict";e.d(l,{h:()=>i});var t=e(5025),u=e(87),r=e(2749),o=e(7975),i=function(){function n(n,l,e,i,s,a,c){this.aiDataContract={ver:1,name:0,url:0,duration:0,properties:0,measurements:0,id:0};var d=this;d.ver=2,d.id=(0,o.HQ)(n,c),d.url=(0,o.pJ)(n,e),d[r.RS]=(0,o.Rr)(n,l)||t.R2,isNaN(i)||(d[r.qd]=(0,u.bb)(i)),d[r.$y]=(0,o.xP)(n,s),d[r.XA]=(0,o.Vj)(n,a)}return n.envelopeType="Microsoft.ApplicationInsights.{0}.Pageview",n.dataType="PageviewData",n}()},4164:(n,l,e)=>{"use strict";e.d(l,{H:()=>o});var t=e(5025),u=e(2749),r=e(7975),o=function(){function n(n,l,e,o,i,s,a){this.aiDataContract={ver:1,name:0,url:0,duration:0,perfTotal:0,networkConnect:0,sentRequest:0,receivedResponse:0,domProcessing:0,properties:0,measurements:0};var c=this;c.ver=2,c.url=(0,r.pJ)(n,e),c[u.RS]=(0,r.Rr)(n,l)||t.R2,c[u.$y]=(0,r.xP)(n,i),c[u.XA]=(0,r.Vj)(n,s),a&&(c.domProcessing=a.domProcessing,c[u.qd]=a[u.qd],c.networkConnect=a.networkConnect,c.perfTotal=a.perfTotal,c[u.fd]=a[u.fd],c.sentRequest=a.sentRequest)}return n.envelopeType="Microsoft.ApplicationInsights.{0}.PageviewPerformance",n.dataType="PageviewPerformanceData",n}()},1365:(n,l,e)=>{"use strict";e.d(l,{A:()=>i});var t=e(87),u=e(2318),r=e(2749),o=e(7975),i=function(){function n(n,l,e,i,s,a,c,d,h,f,p,m){void 0===h&&(h="Ajax"),this.aiDataContract={id:1,ver:1,name:0,resultCode:0,duration:0,success:0,data:0,target:0,type:0,properties:0,measurements:0,kind:0,value:0,count:0,min:0,max:0,stdDev:0,dependencyKind:0,dependencySource:0,commandName:0,dependencyTypeName:0};var g=this;g.ver=2,g.id=l,g[r.qd]=(0,t.bb)(s),g.success=a,g.resultCode=c+"",g.type=(0,o.Rr)(n,h);var y=(0,u._U)(n,e,d,i);g.data=(0,o.pJ)(n,i)||y.data,g.target=(0,o.Rr)(n,y.target),f&&(g.target="".concat(g.target," | ").concat(f)),g[r.RS]=(0,o.Rr)(n,y[r.RS]),g[r.$y]=(0,o.xP)(n,p),g[r.XA]=(0,o.Vj)(n,m)}return n.envelopeType="Microsoft.ApplicationInsights.{0}.RemoteDependency",n.dataType="RemoteDependencyData",n}()},2445:(n,l,e)=>{"use strict";e.d(l,{C:()=>o});var t=e(5025),u=e(2749),r=e(7975),o=function(){function n(n,l,e,o,i){this.aiDataContract={ver:1,message:1,severityLevel:0,properties:0};var s=this;s.ver=2,l=l||t.R2,s[u.pM]=(0,r.Vk)(n,l),s[u.$y]=(0,r.xP)(n,o),s[u.XA]=(0,r.Vj)(n,i),e&&(s[u.Ur]=e)}return n.envelopeType="Microsoft.ApplicationInsights.{0}.Message",n.dataType="MessageData",n}()},9354:(n,l,e)=>{"use strict";e.d(l,{Gz:()=>d,M0:()=>p,PS:()=>f,cM:()=>a,k6:()=>h,wX:()=>c});var t=e(3076),u=e(6668),r=e(2749),o=(0,t.YE)()||{},i=0,s=[null,null,null,null,null];function a(n){var l=i,e=s,t=e[l];return o.createElement?e[l]||(t=e[l]=o.createElement("a")):t={host:f(n,!0)},t.href=n,++l>=e[r.oI]&&(l=0),i=l,t}function c(n){var l,e=a(n);return e&&(l=e.href),l}function d(n){var l,e=a(n);return e&&(l=e[r.Ue]),l}function h(n,l){return n?n.toUpperCase()+" "+l:l}function f(n,l){var e=p(n,l)||"";if(e){var t=e.match(/(www\d{0,5}\.)?([^\/:]{1,256})(:\d{1,20})?/i);if(null!=t&&t[r.oI]>3&&(0,u.Kg)(t[2])&&t[2][r.oI]>0)return t[2]+(t[3]||"")}return e}function p(n,l){var e=null;if(n){var t=n.match(/(\w{1,150}):\/\/([^\/:]{1,256})(:\d{1,20})?/i);if(null!=t&&t[r.oI]>2&&(0,u.Kg)(t[2])&&t[2][r.oI]>0&&(e=t[2]||"",l&&t[r.oI]>2)){var o=(t[1]||"")[r.OL](),i=t[3]||"";("http"===o&&":80"===i||"https"===o&&":443"===i)&&(i=""),e+=i}}return e}},2318:(n,l,e)=>{"use strict";e.d(l,{Ft:()=>k,Qu:()=>y,Rs:()=>b,Wt:()=>v,_U:()=>D,jj:()=>_,lt:()=>E,mD:()=>C,mp:()=>w,pg:()=>S});var t=e(6832),u=e(5439),r=e(558),o=e(225),i=e(6668),s=e(1864),a=e(5881),c=e(5025),d=e(2910),h=e(7975),f=e(9354),p=e(2749),m=[c._G+c.wc,"https://breeze.aimon.applicationinsights.io"+c.wc,"https://dc-int.services.visualstudio.com"+c.wc],g="cid-v1:";function y(n){return-1!==(0,t.r)(m,n[p.OL]())}function v(n){g=n}function w(){return g}function b(n,l,e){if(!l||n&&n.disableCorrelationHeaders)return!1;if(n&&n[p.Ol])for(var t=0;t<n.correlationHeaderExcludePatterns[p.oI];t++)if(n[p.Ol][t].test(l))return!1;var r=(0,f.cM)(l).host[p.OL]();if(!r||-1===(0,a.H)(r,":443")&&-1===(0,a.H)(r,":80")||(r=((0,f.M0)(l,!0)||"")[p.OL]()),(!n||!n.enableCorsCorrelation)&&r&&r!==e)return!1;var o,i=n&&n.correlationHeaderDomains;if(i&&((0,u.I)(i,(function(n){var l=new RegExp(n.toLowerCase().replace(/\\/g,"\\\\").replace(/\./g,"\\.").replace(/\*/g,".*"));o=o||l.test(r)})),!o))return!1;var s=n&&n.correlationHeaderExcludedDomains;if(!s||0===s[p.oI])return!0;for(t=0;t<s[p.oI];t++)if(new RegExp(s[t].toLowerCase().replace(/\\/g,"\\\\").replace(/\./g,"\\.").replace(/\*/g,".*")).test(r))return!1;return r&&r[p.oI]>0}function S(n){if(n){var l=C(n,d.a[1]);if(l&&l!==g)return l}}function C(n,l){if(n)for(var e=n[p.sY](","),t=0;t<e[p.oI];++t){var u=e[t][p.sY]("=");if(2===u[p.oI]&&u[0]===l)return u[1]}}function D(n,l,e,t){var u,r=t,o=t;if(l&&l[p.oI]>0){var i=(0,f.cM)(l);if(u=i.host,!r)if(null!=i[p.Ue]){var s=0===i.pathname[p.oI]?"/":i[p.Ue];"/"!==s.charAt(0)&&(s="/"+s),o=i[p.Ue],r=(0,h.Rr)(n,e?e+" "+s:s)}else r=(0,h.Rr)(n,l)}else u=t,r=t;return{target:u,name:r,data:o}}function E(){var n=(0,r.FJ)();if(n&&n.now&&n.timing){var l=n.now()+n.timing.navigationStart;if(l>0)return l}return(0,o.f)()}function _(n,l){var e=null;return 0===n||0===l||(0,i.hX)(n)||(0,i.hX)(l)||(e=l-n),e}function k(n,l){var e=n||{};return{getName:function(){return e[p.RS]},setName:function(n){l&&l.setName(n),e[p.RS]=n},getTraceId:function(){return e.traceID},setTraceId:function(n){l&&l.setTraceId(n),(0,s.hX)(n)&&(e.traceID=n)},getSpanId:function(){return e.parentID},setSpanId:function(n){l&&l.setSpanId(n),(0,s.wN)(n)&&(e.parentID=n)},getTraceFlags:function(){return e.traceFlags},setTraceFlags:function(n){l&&l.setTraceFlags(n),e.traceFlags=n}}}},2749:(n,l,e)=>{"use strict";e.d(l,{$e:()=>y,$y:()=>E,AZ:()=>s,Av:()=>L,C9:()=>g,Cx:()=>f,F2:()=>d,Fq:()=>P,IE:()=>R,J$:()=>k,Jj:()=>v,Jm:()=>h,OK:()=>C,OL:()=>r,Ol:()=>b,QE:()=>O,RS:()=>a,Ue:()=>w,Ur:()=>T,XA:()=>_,fd:()=>N,h_:()=>j,i9:()=>m,lW:()=>F,lx:()=>$,oI:()=>u,on:()=>D,pM:()=>c,qd:()=>M,qg:()=>x,r1:()=>I,sY:()=>t,up:()=>S,vu:()=>A,xE:()=>i,zV:()=>o,zw:()=>p});var t="split",u="length",r="toLowerCase",o="ingestionendpoint",i="toString",s="removeItem",a="name",c="message",d="count",h="preTriggerDate",f="disabled",p="interval",m="daysOfMonth",g="date",y="getUTCDate",v="stringify",w="pathname",b="correlationHeaderExcludePatterns",S="extensionConfig",C="exceptions",D="parsedStack",E="properties",_="measurements",k="sizeInBytes",x="typeName",T="severityLevel",P="problemGroup",I="isManual",A="CreateFromInterface",O="assembly",R="fileName",F="hasFullStack",L="level",$="method",j="line",M="duration",N="receivedResponse"},740:(n,l,e)=>{"use strict";e.r(l),e.d(l,{AnalyticsPluginIdentifier:()=>z,BreezeChannelIdentifier:()=>W,ConfigurationManager:()=>P,ConnectionStringParser:()=>g.F,ContextTagKeys:()=>I.o,CtxTagKeys:()=>L.O,DEFAULT_BREEZE_ENDPOINT:()=>v._G,DEFAULT_BREEZE_PATH:()=>v.wc,Data:()=>x.B,DisabledPropertyName:()=>v.xF,DistributedTracingModes:()=>$.u,Envelope:()=>w.L,Event:()=>b.J,Exception:()=>S.WJ,Extensions:()=>L.F,HttpMethod:()=>v.ym,Metric:()=>C.J,PageView:()=>D.h,PageViewPerformance:()=>k.H,ProcessLegacy:()=>v.jp,PropertiesPluginIdentifier:()=>q,RemoteDependencyData:()=>E.A,RequestHeaders:()=>y.a,SampleRate:()=>v.tU,SeverityLevel:()=>T.O,TelemetryItemCreator:()=>F,ThrottleMgr:()=>m,Trace:()=>_.C,correlationIdCanIncludeCorrelationHeader:()=>t.Rs,correlationIdGetCorrelationContext:()=>t.pg,correlationIdGetCorrelationContextValue:()=>t.mD,correlationIdGetPrefix:()=>t.mp,correlationIdSetPrefix:()=>t.Wt,createDistributedTraceContextFromTrace:()=>t.Ft,createDomEvent:()=>H,createTelemetryItem:()=>R,createTraceParent:()=>N.wk,dataSanitizeException:()=>A.Vt,dataSanitizeId:()=>A.HQ,dataSanitizeInput:()=>A._T,dataSanitizeKey:()=>A.lq,dataSanitizeKeyAndAddUniqueness:()=>A.zx,dataSanitizeMeasurements:()=>A.Vj,dataSanitizeMessage:()=>A.Vk,dataSanitizeProperties:()=>A.xP,dataSanitizeString:()=>A.Rr,dataSanitizeUrl:()=>A.pJ,dateTimeUtilsDuration:()=>t.jj,dateTimeUtilsNow:()=>t.lt,dsPadNumber:()=>A.qW,findW3cTraceParent:()=>N.ef,formatTraceParent:()=>N.L0,getExtensionByName:()=>j.Y8,isBeaconApiSupported:()=>M.Uf,isCrossOriginError:()=>j.vv,isInternalApplicationInsightsEndpoint:()=>t.Qu,isSampledFlag:()=>N.N7,isValidSpanId:()=>N.wN,isValidTraceId:()=>N.hX,isValidTraceParent:()=>N.mJ,msToTimeSpan:()=>j.bb,parseConnectionString:()=>g.H,parseTraceParent:()=>N.ZI,strNotSpecified:()=>v.R2,stringToBoolOrDefault:()=>j.Dt,urlGetAbsoluteUrl:()=>U.wX,urlGetCompleteUrl:()=>U.k6,urlGetPathName:()=>U.Gz,urlParseFullHost:()=>U.M0,urlParseHost:()=>U.PS,urlParseUrl:()=>U.cM,utlCanUseLocalStorage:()=>f.BW,utlCanUseSessionStorage:()=>f.AN,utlDisableStorage:()=>f.Nu,utlEnableStorage:()=>f.iw,utlGetLocalStorage:()=>f.Se,utlGetSessionStorage:()=>f.vH,utlGetSessionStorageKeys:()=>f.T9,utlRemoveSessionStorage:()=>f.v7,utlRemoveStorage:()=>f.tm,utlSetLocalStorage:()=>f._M,utlSetSessionStorage:()=>f.Dt,utlSetStoragePrefix:()=>f.vh});var t=e(2318),u=e(6668),r=e(3775),o=e(3673),i=e(9622),s=e(6832),a=e(1374),c=e(6535),d=e(5439),h=e(9018),f=e(4658),p=e(2749),m=function(n,l){var e,t,m,g,y,v,w,b=this,S=!1,C=!1;function D(n,l,u,r){if(S){var o=function(n){try{var l=E(n);return(0,c.Z1)(1e6)<=l.limit.samplingRate}catch(n){}return!1}(n);if(!o)return;var i=E(n),s=O(n),a=k(i,e,s),d=!1,h=0,f=R(n);try{a&&!f?(h=Math.min(i.limit.maxSendNumber,s[p.F2]+1),s[p.F2]=0,d=!0,y[n]=!0,s[p.Jm]=new Date):(y[n]=a,s[p.F2]+=1);var m=x(n);P(t,m,s);for(var g=0;g<h;g++)A(n,t,l,u)}catch(n){}return{isThrottled:d,throttleNum:h}}return r&&F(n).push({msgID:n,message:l,severity:u}),null}function E(n){return m[n]||m[109]}function _(n,l){var e,t,r,o,i;try{var s=l||{},a={};a[p.Cx]=!!s[p.Cx];var c=s[p.zw]||{};C=(null==c?void 0:c.daysOfMonth)&&(null==c?void 0:c.daysOfMonth[p.oI])>0,a[p.zw]=(o=null===(r=(r=c)||{})||void 0===r?void 0:r.monthInterval,i=null==r?void 0:r.dayInterval,(0,u.hX)(o)&&(0,u.hX)(i)&&(r.monthInterval=3,C||(r[p.i9]=[28],C=!0)),r={monthInterval:null==r?void 0:r.monthInterval,dayInterval:null==r?void 0:r.dayInterval,daysOfMonth:null==r?void 0:r.daysOfMonth});var d={samplingRate:(null===(e=s.limit)||void 0===e?void 0:e.samplingRate)||100,maxSendNumber:(null===(t=s.limit)||void 0===t?void 0:t.maxSendNumber)||1};a.limit=d,m[n]=a}catch(n){}}function k(n,l,e){if(n&&!n[p.Cx]&&l&&(0,o.Gh)(e)){var t=T(),u=e[p.C9],r=n[p.zw],i=1;if(null==r?void 0:r.monthInterval){var a=12*(t.getUTCFullYear()-u.getUTCFullYear())+t.getUTCMonth()-u.getUTCMonth();i=I(r.monthInterval,0,a)}var c=1;if(C)c=(0,s.r)(r[p.i9],t[p.$e]());else if(null==r?void 0:r.dayInterval){var d=Math.floor((t.getTime()-u.getTime())/864e5);c=I(r.dayInterval,0,d)}return i>=0&&c>=0}return!1}function x(n,l){var e=(0,o.Gh)(l)?l:"";return n?"appInsightsThrottle"+e+"-"+n:null}function T(n){try{if(!n)return new Date;var l=new Date(n);if(!isNaN(l.getDate()))return l}catch(n){}return null}function P(n,l,e){try{return(0,f._M)(n,l,(0,a.EH)(JSON[p.Jj](e)))}catch(n){}return!1}function I(n,l,e){return n<=0?1:e>=l&&(e-l)%n==0?Math.floor((e-l)/n)+1:-1}function A(n,l,e,t){(0,r.ZP)(l,t||1,n,e)}function O(n){try{var l=g[n];if(!l){var e=x(n,v);l=function(n,l,e){try{var t={date:T(),count:0};if(n){var u=JSON.parse(n);return{date:T(u[p.C9])||t[p.C9],count:u[p.F2]||t[p.F2],preTriggerDate:u.preTriggerDate?T(u[p.Jm]):void 0}}return P(l,e,t),t}catch(n){}return null}((0,f.Se)(t,e),t,e),g[n]=l}return g[n]}catch(n){}return null}function R(n){var l=y[n];if((0,u.hX)(l)){l=!1;var e=O(n);e&&(l=function(n){try{if(n){var l=new Date;return n.getUTCFullYear()===l.getUTCFullYear()&&n.getUTCMonth()===l.getUTCMonth()&&n[p.$e]()===l[p.$e]()}}catch(n){}return!1}(e[p.Jm])),y[n]=l}return y[n]}function F(n){return w=w||{},(0,u.hX)(w[n])&&(w[n]=[]),w[n]}t=(0,r.y0)(n),y={},g={},w={},m={},_(109),v=(0,o.Gh)(l)?l:"",n.addUnloadHook((0,i.a)(n.config,(function(n){var l=n.cfg;e=(0,f.BW)();var t=l.throttleMgrCfg||{};(0,h.z)(t,(function(n,l){_(parseInt(n),l)}))}))),b._getDbgPlgTargets=function(){return[w]},b.getConfig=function(){return m},b.canThrottle=function(n){var l=O(n);return k(E(n),e,l)},b.isTriggered=function(n){return R(n)},b.isReady=function(){return S},b.flush=function(n){try{var l=F(n);if(l&&l[p.oI]>0){var e=l.slice(0);return w[n]=[],(0,d.I)(e,(function(n){D(n.msgID,n[p.pM],n.severity,!1)})),!0}}catch(n){}return!1},b.flushAll=function(){try{if(w){var n=!0;return(0,h.z)(w,(function(l){var e=b.flush(parseInt(l));n=n&&e})),n}}catch(n){}return!1},b.onReadyState=function(n,l){return void 0===l&&(l=!0),(S=!!(0,u.hX)(n)||n)&&l?b.flushAll():null},b.sendMessage=function(n,l,e){return D(n,l,e,!0)}},g=e(4484),y=e(2910),v=e(5025),w=e(1062),b=e(3072),S=e(5397),C=e(5014),D=e(1448),E=e(1365),_=e(2445),k=e(4164),x=e(7358),T=e(9762),P=function(){function n(){}return n.getConfig=function(n,l,e,t){var r;return void 0===t&&(t=!1),r=e&&n[p.up]&&n[p.up][e]&&!(0,u.hX)(n[p.up][e][l])?n[p.up][e][l]:n[l],(0,u.hX)(r)?t:r},n}(),I=e(8596),A=e(7975),O=e(3517);function R(n,l,e,t,r,i){var s;e=(0,A.Rr)(t,e)||v.R2,((0,u.hX)(n)||(0,u.hX)(l)||(0,u.hX)(e))&&(0,O.$8)("Input doesn't contain all required fields");var a="";n[v.ks]&&(a=n[v.ks],delete n[v.ks]);var c=((s={})[p.RS]=e,s.time=(0,o._u)(new Date),s.iKey=a,s.ext=i||{},s.tags=[],s.data={},s.baseType=l,s.baseData=n,s);return(0,u.hX)(r)||(0,h.z)(r,(function(n,l){c.data[n]=l})),c}var F=function(){function n(){}return n.create=R,n}(),L=e(1575),$=e(7374),j=e(87),M=e(7292),N=e(1864),B=e(3076);function H(n){var l=null;if((0,u.Tn)(Event))l=new Event(n);else{var e=(0,B.YE)();e&&e.createEvent&&(l=e.createEvent("Event")).initEvent(n,!0,!0)}return l}var U=e(9354),q="AppInsightsPropertiesPlugin",W="AppInsightsChannelPlugin",z="ApplicationInsightsAnalytics"},2475:(n,l,e)=>{"use strict";e.d(l,{DD:()=>a,Lx:()=>s,NU:()=>i});var t=e(6668),u=e(5977),r=e(6182);function o(n,l,e){return!n&&(0,t.hX)(n)?l:(0,t.Lm)(n)?n:"true"===(0,u.o)(n)[r.OL]()}function i(n){return{mrg:!0,v:n}}function s(n,l,e){return{fb:e,isVal:n,v:l}}function a(n,l){return{fb:l,set:o,v:!!n}}},991:(n,l,e)=>{"use strict";e.d(l,{q:()=>h});var t=e(6668),u=e(9452),r=e(5977),o=e(7460),i=e(9018),s=e(6182);function a(n){return n&&(0,t.Gv)(n)&&(n.isVal||n.fb||(0,u.K)(n,"v")||(0,u.K)(n,"mrg")||(0,u.K)(n,"ref")||n.set)}function c(n,l,e){var u,o=e.dfVal||t.O9;if(l&&e.fb){var i=e.fb;(0,t.cy)(i)||(i=[i]);for(var a=0;a<i[s.oI];a++){var c=i[a],d=l[c];if(o(d)?u=d:n&&(o(d=n.cfg[c])&&(u=d),n.set(n.cfg,(0,r.o)(c),d)),o(u))break}}return!o(u)&&o(e.v)&&(u=e.v),u}function d(n,l,e){var u,r=e;return e&&a(e)&&(r=c(n,l,e)),r&&(a(r)&&(r=d(n,l,r)),(0,t.cy)(r)?(u=[])[s.oI]=r[s.oI]:(0,o.Q)(r)&&(u={}),u&&((0,i.z)(r,(function(e,t){t&&a(t)&&(t=d(n,l,t)),u[e]=t})),r=u)),r}function h(n,l,e,u){var r,f,p,m,g,y,v,w,b=u;a(b)?(r=b.isVal,f=b.set,y=b[s.XW],v=b[s.JQ],m=b.mrg,!(g=b.ref)&&(0,t.b0)(g)&&(g=!!m),p=c(n,l,b)):p=u,v&&n[s.JQ](l,e);var S=!0,C=l[e];!C&&(0,t.hX)(C)||(w=C,S=!1,r&&w!==p&&!r(w)&&(w=p,S=!0),f&&(S=(w=f(w,p,l))===p)),S?w=p?d(n,l,p):p:((0,o.Q)(w)||(0,t.cy)(p))&&m&&p&&((0,o.Q)(p)||(0,t.cy)(p))&&(0,i.z)(p,(function(l,e){h(n,w,l,e)})),n.set(l,e,w),g&&n.ref(l,e),y&&n[s.XW](l,e)}},9622:(n,l,e)=>{"use strict";e.d(l,{e:()=>M,a:()=>N});var t=e(6668),u=e(9018),r=e(6336),o=e(8693),i=e(4276),s=e(6492),a=e(6182),c=e(991),d=e(5439),h=e(695),f=e(6832),p=e(9147),m=["push","pop","shift","unshift","splice"],g=function(n,l,e,t){n&&n[a.ih](3,108,"".concat(e," [").concat(l,"] failed - ")+(0,o.m)(t))};function y(n,l){var e=(0,h.k)(n,l);return e&&e.get}function v(n,l,e,t){if(l){var i=y(l,e);i&&i[n.prop]?l[e]=t:function(n,l,e,t){var i={n:e,h:[],trk:function(l){l&&l.fn&&(-1===(0,f.r)(i.h,l)&&i.h[a.y5](l),n.trk(l,i))},clr:function(n){var l=(0,f.r)(i.h,n);-1!==l&&i.h[a.Ic](l,1)}},c=!0,d=!1;function h(){c&&(d=d||(0,p.hF)(h,n,t),t&&!t[p.nM]&&d&&(t=b(n,t,e,"Converting")),c=!1);var l=n.act;return l&&i.trk(l),t}h[n.prop]={chng:function(){n.add(i)}},(0,r.vF)(l,i.n,{g:h,s:function(r){if(t!==r){h[n.ro]&&!n.upd&&(0,p.If)("["+e+"] is read-only:"+(0,o.m)(l)),c&&(d=d||(0,p.hF)(h,n,t),c=!1);var f=d&&h[n.rf];if(d)if(f){(0,u.z)(t,(function(n){t[n]=r?r[n]:s.HP}));try{(0,u.z)(r,(function(l,e){v(n,t,l,e)})),r=t}catch(l){g((n.hdlr||{})[a.Uw],e,"Assigning",l),d=!1}}else t&&t[p.nM]&&(0,u.z)(t,(function(l){var e=y(t,l);if(e){var u=e[n.prop];u&&u.chng()}}));if(r!==t){var m=r&&(0,p.hF)(h,n,r);!f&&m&&(r=b(n,r,e,"Converting")),t=r,d=m}n.add(i)}}})}(n,l,e,t)}return l}function w(n,l,e,t){if(l){var u=y(l,e),r=u&&!!u[n.prop],o=t&&t[0],i=t&&t[1],s=t&&t[2];if(!r){if(s)try{(0,p.V9)(l)}catch(l){g((n.hdlr||{})[a.Uw],e,"Blocking",l)}try{v(n,l,e,l[e]),u=y(l,e)}catch(l){g((n.hdlr||{})[a.Uw],e,"State",l)}}o&&(u[n.rf]=o),i&&(u[n.ro]=i),s&&(u[n.blkVal]=!0)}return l}function b(n,l,e,o){try{(0,u.z)(l,(function(e,t){v(n,l,e,t)})),l[p.nM]||((0,r.Ux)(l,p.nM,{get:function(){return n[a.K0]}}),function(n,l,e){(0,t.cy)(l)&&(0,d.I)(m,(function(t){var u=l[t];l[t]=function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];var o=u[a.y9](this,t);return b(n,l,e,"Patching"),o}}))}(n,l,e))}catch(l){g((n.hdlr||{})[a.Uw],e,o,l)}return l}var S,C=e(7403),D=e(6874),E=e(755),_=e(655),k=e(4016),x=e(411),T=e(1324),P=e(2871);function I(n,l){return(k.s6.setPrototypeOf||function(n,l){!S&&(S=(0,P.nR)((function(){var n;return(n={})[k.r5]=[],n instanceof Array}))),S.v?n[k.r5]=l:(0,u.z)(l,(function(l,e){return n[l]=e}))})(n,l)}var A,O=function(n,l,e){function t(){this.constructor=l,F(this,n)}return F(l,n),(l=I(l,e))[k.Fs]=e===k.M_?(0,x.s)(e):(t[k.Fs]=e[k.Fs],new t),l},R=function(n,l){try{l&&(n[k.o_]=l)}catch(n){}},F=function(n,l){try{(0,r.vF)(n,k.o_,{v:l,c:!0,e:!1})}catch(n){}};var L="[[ai_",$="]]";function j(n){var l,e,t=(0,C.jj)(L+"get"+n.uid+$),u=(0,C.jj)(L+"ro"+n.uid+$),r=(0,C.jj)(L+"rf"+n.uid+$),i=(0,C.jj)(L+"blkVal"+n.uid+$),s=(0,C.jj)(L+"dtl"+n.uid+$),c=null,h=null;function p(l,t){var u=e.act;try{e.act=l,l&&l[s]&&((0,d.I)(l[s],(function(n){n.clr(l)})),l[s]=[]),t({cfg:n.cfg,set:n.set.bind(n),setDf:n[a.h0].bind(n),ref:n.ref.bind(n),rdOnly:n[a.XW].bind(n)})}catch(l){var r=n[a.Uw];throw r&&r[a.ih](1,107,(0,o.m)(l)),l}finally{e.act=u||null}}function m(){if(c){var n=c;c=null,h&&h[a._w](),h=null;var l=[];if((0,d.I)(n,(function(n){if(n&&(n[s]&&((0,d.I)(n[s],(function(l){l.clr(n)})),n[s]=null),n.fn))try{p(n,n.fn)}catch(n){l[a.y5](n)}})),c)try{m()}catch(n){l[a.y5](n)}l[a.oI]>0&&function(n,l){var e,t,u,r,i,s;A||(e="AggregationError",t=function(n,l){l[a.oI]>1&&(n.errors=l[1])},r=u||Error,i=r[k.Fs][k.o_],s=Error.captureStackTrace,A=O(e,(function(){var n=this;try{R(r,e);var l=(0,_.p)(r,n,(0,E.K)(arguments))||n;if(l!==n){var u=(0,T.rL)(n);u!==(0,T.rL)(l)&&I(l,u)}return s&&s(l,n[k.BB]),t&&t(l,arguments),l}finally{R(r,i)}}),r));var c="Watcher error(s): ";throw(0,d.I)(l,(function(n,l){c+="\n".concat(l," > ").concat((0,o.m)(n))})),new A(c,l||[])}(0,l)}}return(l={prop:t,ro:u,rf:r})[a.JQ]=i,l[a.K0]=n,l.add=function(n){if(n&&n.h[a.oI]>0){c||(c=[]),h||(h=(0,D.dR)((function(){h=null,m()}),0));for(var l=0;l<n.h[a.oI];l++){var e=n.h[l];e&&-1===(0,f.r)(c,e)&&c[a.y5](e)}}},l[a.zs]=m,l.use=p,l.trk=function(n,l){if(n){var e=n[s]=n[s]||[];-1===(0,f.r)(e,l)&&e[a.y5](l)}},e=l}function M(n,l,e,o){var s=function(n,l,e){var o,s=(0,p.QA)(l);if(s)return s;var d,h=(0,i.Z)("dyncfg",!0),f=l&&!1!==e?l:(0,p.Dy)(l),m=((o={uid:null,cfg:f})[a.Uw]=n,o[a.zs]=function(){d[a.zs]()},o.set=function(l,e,t){try{l=v(d,l,e,t)}catch(l){g(n,e,"Setting value",l)}return l[e]},o[a.h0]=function(n,l){return l&&(0,u.z)(l,(function(l,e){(0,c.q)(m,n,l,e)})),n},o[a.x6]=function(n){return function(n,l){var e={fn:l,rm:function(){e.fn=null,n=null,l=null}};return n.use(e,l),e}(d,n)},o.ref=function(n,l){var e;return w(d,n,l,(e={},e[0]=!0,e))[l]},o[a.XW]=function(n,l){var e;return w(d,n,l,(e={},e[1]=!0,e))[l]},o[a.JQ]=function(n,l){var e;return w(d,n,l,(e={},e[2]=!0,e))[l]},o._block=function(n,l){d.use(null,(function(e){var u=d.upd;try{(0,t.b0)(l)||(d.upd=l),n(e)}finally{d.upd=u}}))},o);return(0,r.vF)(m,"uid",{c:!1,e:!1,w:!1,v:h}),b(d=j(m),f,"config","Creating"),m}(e,n||{},o);return l&&s[a.h0](s.cfg,l),s}function N(n,l,e){var t=n[p.nM]||n;return!t.cfg||t.cfg!==n&&t.cfg[p.nM]!==t?(function(n,l){n?(n[a.on](l),n[a.ih](2,108,l)):(0,p.If)(l)}(e,s.xW+(0,o.m)(n)),M(n,null,e)[a.x6](l)):t[a.x6](l)}},9147:(n,l,e)=>{"use strict";e.d(l,{Dy:()=>h,Hf:()=>m,If:()=>y,QA:()=>f,V9:()=>p,hF:()=>g,nM:()=>a});var t=e(7403),u=e(6668),r=e(7460),o=e(9018),i=e(3517),s=e(6182),a=(0,t.eC)("[[ai_dynCfg_1]]"),c=(0,t.eC)("[[ai_blkDynCfg_1]]"),d=(0,t.eC)("[[ai_frcDynCfg_1]]");function h(n){var l;return n&&((0,u.cy)(n)?(l=[])[s.oI]=n[s.oI]:(0,r.Q)(n)&&(l={}),l)?((0,o.z)(n,(function(n,e){l[n]=h(e)})),l):n}function f(n){if(n){var l=n[a]||n;if(l.cfg&&(l.cfg===n||l.cfg[a]===l))return l}return null}function p(n){if(n&&((0,r.Q)(n)||(0,u.cy)(n)))try{n[c]=!0}catch(n){}return n}function m(n){if(n)try{n[d]=!0}catch(n){}return n}function g(n,l,e){var t=!1;return e&&!n[l.blkVal]&&((t=e[d])||e[c]||(t=(0,r.Q)(e)||(0,u.cy)(e))),t}function y(n){(0,i.zk)("InvalidAccess:"+n)}},4282:(n,l,e)=>{"use strict";e.d(l,{H:()=>u,o:()=>r});var t=e(8040),u=t.WS,r=t.fn},3662:(n,l,e)=>{"use strict";e.d(l,{x:()=>t});var t=(0,e(4282).H)({Unknown:0,NonRetryableStatus:1,InvalidEvent:2,SizeLimitExceeded:3,KillSwitch:4,QueueFull:5})},9379:(n,l,e)=>{"use strict";e.d(l,{_:()=>Y});var t=e(659),u=e(8279),r=e(636),o=e(1324),i=e(5439),s=e(6668),a=e(3517),c=e(9018),d=e(7460),h=e(6874),f=e(755),p=e(5683),m=e(4016),g=e(6336),y=function(n){return n.value&&S(n),!0},v=[function(n){var l=n.value;if((0,s.cy)(l)){var e=n.result=[];return e.length=l.length,n.copyTo(e,l),!0}return!1},S,function(n){return n.type===m.H3},function(n){var l=n.value;return!!(0,s.$P)(l)&&(n.result=new Date(l.getTime()),!0)}];function w(n,l,e,t){var u=e.handler,r=e.path?t?e.path.concat(t):e.path:[],o={handler:e.handler,src:e.src,path:r},a=typeof l,c=!1,h=!1;l&&a===m.qv?c=(0,d.Q)(l):h=l===m.M_||(0,s.Cb)(a);var f={type:a,isPrim:h,isPlain:c,value:l,result:l,path:r,origin:e.src,copy:function(l,t){return w(n,l,t?o:e,t)},copyTo:function(l,e){return b(n,l,e,o)}};return f.isPrim?u&&(0,p.n)(u,e,f)?f.result:l:function(n,l){var t;return(0,i.I)(n,(function(n){if(n.k===l)return t=n,-1})),t||(t={k:l,v:l},n.push(t),function(n){(0,g.vF)(f,"result",{g:function(){return n.v},s:function(l){n.v=l}});for(var l=0,t=u;!(0,p.n)(t||(l<v.length?v[l++]:y),e,f);)t=m.M_}(t)),t.v}(n,l)}function b(n,l,e,t){if(!(0,s.hX)(e))for(var u in e)l[u]=w(n,e[u],t,u);return l}function S(n){var l=n.value;if(l&&n.isPlain){var e=n.result={};return n.copyTo(e,l),!0}return!1}function C(n,l,e,t,u,r,o){return function(n,l){return(0,i.I)(l,(function(l){!function(n,l){b([],n,l,{handler:void 0,src:l,path:[]})}(n,l)})),n}(w([],s=n,{handler:undefined,src:s})||{},(0,f.K)(arguments));var s}var D,E=e(9452),_=e(3076),k=e(1187),x=e(6832),T=e(9622),P=e(6182),I=e(4013),A=e(5034),O=e(4276),R=e(7867),F=e(3775),L=e(3673),$=e(6492),j=e(1356),M=e(5775),N=e(2317),B=e(380),H=e(8693),U=function(n){function l(){var e,t,r=n.call(this)||this;function o(){e=0,t=[]}return r.identifier="TelemetryInitializerPlugin",r.priority=199,o(),(0,u.A)(l,r,(function(n,l){n.addTelemetryInitializer=function(n){return function(n,l,e){var t={id:l,fn:e};return(0,k.Y)(n,t),{remove:function(){(0,i.I)(n,(function(l,e){if(l.id===t.id)return n[P.Ic](e,1),-1}))}}}(t,e++,n)},n[$.qT]=function(l,e){(function(n,l,e){for(var t=!1,u=n[P.oI],r=0;r<u;++r){var o=n[r];if(o)try{if(!1===o.fn[P.y9](null,[l])){t=!0;break}}catch(n){(0,F.ZP)(e,2,64,"Telemetry initializer failed: "+(0,L.lL)(n),{exception:(0,H.m)(n)},!0)}}return!t})(t,l,e?e[P.e4]():n[P.e4]())&&n[P.$5](l,e)},n[P.tn]=function(){o()}})),r}return(0,t.qU)(l,n),l.__ieDyn=1,l}(e(8257).s),q=e(836),W=e(8969),z="Plugins must provide initialize method",V="SDK is still unloading...",G=(0,o.ZH)(((D={cookieCfg:{}})[$.jy]={rdOnly:!0,ref:!0,v:[]},D[$.LZ]={rdOnly:!0,ref:!0,v:[]},D[$.Bw]={ref:!0,v:{}},D[$.Yd]=$.HP,D.loggingLevelConsole=0,D.diagnosticLogInterval=$.HP,D));function K(n,l){return new M.NS(l)}function X(n,l){var e=!1;return(0,i.I)(l,(function(l){if(l===n)return e=!0,-1})),e}function J(n,l,e,t){e&&(0,c.z)(e,(function(e,u){t&&(0,d.Q)(u)&&(0,d.Q)(l[e])&&J(n,l[e],u,t),t&&(0,d.Q)(u)&&(0,d.Q)(l[e])?J(n,l[e],u,t):n.set(l,e,u)}))}function Z(n,l){var e=null,t=-1;return(0,i.I)(n,(function(n,u){if(n.w===l)return e=n,t=u,-1})),{i:t,l:e}}var Y=function(){function n(){var l,e,d,f,p,m,y,v,w,b,S,D,H,Y,Q,nn,ln,en,tn,un,rn,on,sn,an,cn,dn,hn,fn;(0,u.A)(n,this,(function(n){function u(n){return dn&&dn[P.XM]||fn||(n||d&&d.queue[P.oI]>0)&&(hn||(hn=!0,kn(l[P.x6]((function(n){var l=n.cfg.diagnosticLogInterval;l&&l>0||(l=1e4);var e=!1;dn&&(e=dn[P.XM],dn[P._w]()),(dn=(0,h.AH)(Sn,l)).unref(),dn[P.XM]=e})))),dn[P.XM]=!0),dn}function pn(){var n={};an=[];var l=function(l){l&&(0,i.I)(l,(function(l){if(l[P.Ju]&&l[P.s]&&!n[l.identifier]){var e=l[P.Ju]+"="+l[P.s];an[P.y5](e),n[l.identifier]=l}}))};l(D),S&&(0,i.I)(S,(function(n){l(n)})),l(b)}function mn(){e=!1,(l=(0,T.e)({},G,n[P.Uw])).cfg[P.Bl]=1,(0,g.vF)(n,"config",{g:function(){return l.cfg},s:function(l){n.updateCfg(l,!1)}}),(0,g.vF)(n,"pluginVersionStringArr",{g:function(){return an||pn(),an}}),(0,g.vF)(n,"pluginVersionString",{g:function(){return cn||(an||pn(),cn=an.join(";")),cn||$.m5}}),(0,g.vF)(n,"logger",{g:function(){return d||(d=new F.wq(l.cfg),l[P.Uw]=d),d},s:function(n){l[P.Uw]=n,d!==n&&((0,I.K)(d,!1),d=n)}}),n[P.Uw]=new F.wq(l.cfg),sn=[];var t=n.config[$.jy]||[];t.splice(0,t[P.oI]),(0,k.Y)(t,sn),Y=new U,f=[],(0,I.K)(p,!1),p=null,m=null,y=null,(0,I.K)(v,!1),v=null,w=null,b=[],S=null,D=null,H=!1,Q=null,nn=(0,O.Z)("AIBaseCore",!0),ln=(0,q.P)(),un=null,rn=null,en=(0,W.w)(),on=[],cn=null,an=null,fn=!1}function gn(){var e=(0,N.i8)(wn(),l.cfg,n);return e[P.by](u),e}function yn(l){var e=function(n,l,e){var t,u=[],r=[],o={};return(0,i.I)(e,(function(l){((0,s.hX)(l)||(0,s.hX)(l[P.mE]))&&(0,a.$8)(z);var e=l[$.Vo],t=l[P.Ju];l&&e&&((0,s.hX)(o[e])?o[e]=t:(0,F.OG)(n,"Two extensions have same priority #"+e+" - "+o[e]+", "+t)),!e||e<500?u[P.y5](l):r[P.y5](l)})),(t={})[$.eT]=u,t[$.LZ]=r,t}(n[P.Uw],0,b);w=null,cn=null,an=null,D=(S||[])[0]||[],D=(0,B.Xc)((0,k.Y)(D,e[$.LZ]));var t=(0,k.Y)((0,B.Xc)(e[$.eT]),D);sn=(0,o.N6)(t);var u=n.config[$.jy]||[];u.splice(0,u[P.oI]),(0,k.Y)(u,sn);var r=gn();D&&D[P.oI]>0&&(0,B.pI)(r[P.$o](D),t),(0,B.pI)(r,t),l&&Dn(l)}function vn(n){var l=null,e=null,t=[];return(0,i.I)(sn,(function(l){if(l[P.Ju]===n&&l!==Y)return e=l,-1;l.getChannel&&t[P.y5](l)})),!e&&t[P.oI]>0&&(0,i.I)(t,(function(l){if(!(e=l.getChannel(n)))return-1})),e&&(l={plugin:e,setEnabled:function(n){(0,B.Cr)(e)[$.Hr]=!n},isEnabled:function(){var n=(0,B.Cr)(e);return!n[P.Ik]&&!n[$.Hr]},remove:function(n,l){var t;void 0===n&&(n=!0);var u=[e],r=((t={reason:1})[P.tI]=n,t);bn(u,r,(function(n){n&&yn({reason:32,removed:u}),l&&l(n)}))}}),l}function wn(){if(!w){var e=(sn||[]).slice();-1===(0,x.r)(e,Y)&&e[P.y5](Y),w=(0,N.PV)((0,B.Xc)(e),l.cfg,n)}return w}function bn(e,t,r){if(e&&e[P.oI]>0){var o=(0,N.PV)(e,l.cfg,n),s=(0,N.tS)(o,n);s[P.by]((function(){var n=!1,l=[];(0,i.I)(b,(function(t,u){X(t,e)?n=!0:l[P.y5](t)})),b=l,cn=null,an=null;var t=[];S&&((0,i.I)(S,(function(l,u){var r=[];(0,i.I)(l,(function(l){X(l,e)?n=!0:r[P.y5](l)})),t[P.y5](r)})),S=t),r&&r(n),u()})),s[P.$5](t)}else r(!1)}function Sn(){if(d&&d.queue){var l=d.queue.slice(0);d.queue[P.oI]=0,(0,i.I)(l,(function(l){var e,t=((e={})[P.RS]=Q||"InternalMessageId: "+l[P.JR],e.iKey=rn,e[P.fA]=(0,L._u)(new Date),e.baseType=F.WD.dataType,e.baseData={message:l[P.pM]},e);n.track(t)}))}}function Cn(n,l,e,t){var u=1,r=!1,o=null;function i(){u--,r&&0===u&&(o&&o[P._w](),o=null,l&&l(r),l=null)}return t=t||5e3,D&&D[P.oI]>0&&gn()[P.$o](D).iterate((function(l){if(l.flush){u++;var r=!1;l.flush(n,(function(){r=!0,i()}),e)||r||(n&&null==o?o=(0,h.dR)((function(){o=null,i()}),t):i())}})),r=!0,i(),!0}function Dn(l){var e=(0,N.nU)(wn(),n);e[P.by](u),n._updateHook&&!0===n._updateHook(e,l)||e[P.$5](l)}function En(l){var e=n[P.Uw];e?((0,F.ZP)(e,2,73,l),u()):(0,a.$8)(l)}function _n(l){var e=n[P.RF]();e&&e[$.Yp]([l],2)}function kn(n){en.add(n)}mn(),n._getDbgPlgTargets=function(){return[sn]},n[P.tZ]=function(){return e},n[P.mE]=function(u,r,o,h){H&&(0,a.$8)(V),n[P.tZ]()&&(0,a.$8)("Core cannot be initialized more than once"),u=(l=(0,T.e)(u,G,o||n[P.Uw],!1)).cfg,kn(l[P.x6]((function(n){rn=n.cfg.instrumentationKey;var l=n.ref(n.cfg,$.Bw);(0,c.z)(l,(function(e){n.ref(l,e)})),(0,s.hX)(rn)&&(0,a.$8)("Please provide instrumentation key")}))),!(p=h)&&n[P.RF](),kn(l[P.x6]((function(n){var l=n.cfg.disableDbgExt;!0===l&&tn&&(p[P.TP](tn),tn=null),p&&!tn&&!0!==l&&(tn=(0,R.M)(n.cfg),p[P.vR](tn))}))),kn(l[P.x6]((function(n){var l=n.cfg.enablePerfMgr;!l&&y&&(y=null),l&&(0,L.c2)(n.cfg,$.Yd,K)}))),n[P.Uw]=o;var f=u[$.jy];if((b=[])[P.y5].apply(b,(0,t.vz)((0,t.vz)([],r,!1),f,!1)),S=u[$.LZ],yn(null),D&&0!==D[P.oI]||(0,a.$8)("No "+$.LZ+" available"),S&&S[P.oI]>1){var m=n[P.AP]("TeeChannelController");m&&m.plugin||(0,F.ZP)(d,1,28,"TeeChannel required")}!function(n,l,e){(0,i.I)(l,(function(l){var t=(0,T.a)(n,l.w,e);delete l.w,l.rm=function(){t.rm()}}))}(u,on,d),on=null,e=!0,n.releaseQueue(),n[P.h4]()},n.getChannels=function(){var n=[];return D&&(0,i.I)(D,(function(l){n[P.y5](l)})),(0,o.N6)(n)},n.track=function(l){(0,M.r2)(n[$.kI](),(function(){return"AppInsightsCore:track"}),(function(){null===l&&(_n(l),(0,a.$8)("Invalid telemetry item")),!l[P.RS]&&(0,s.hX)(l[P.RS])&&(_n(l),(0,a.$8)("telemetry name required")),l.iKey=l.iKey||rn,l[P.fA]=l[P.fA]||(0,L._u)(new Date),l.ver=l.ver||"4.0",!H&&n[P.tZ]()?gn()[P.$5](l):f[P.y5](l)}),(function(){return{item:l}}),!l.sync)},n[P.ps]=gn,n[P.RF]=function(){return p||(p=new j.h(l.cfg),n._notificationManager=p),p},n[P.vR]=function(l){n[P.RF]()[P.vR](l)},n[P.TP]=function(n){p&&p[P.TP](n)},n.getCookieMgr=function(){return v||(v=(0,A.xN)(l.cfg,n[P.Uw])),v},n.setCookieMgr=function(n){v!==n&&((0,I.K)(v,!1),v=n)},n[$.kI]=function(){return m||y||kn(l[P.x6]((function(l){if(l.cfg.enablePerfMgr){var e=l.cfg[$.Yd];(0,s.Tn)(e)&&(y=e(n,n[P.RF]()))}}))),m||y||(0,M.Z4)()},n.setPerfMgr=function(n){m=n},n.eventCnt=function(){return f[P.oI]},n.releaseQueue=function(){if(e&&f[P.oI]>0){var n=f;f=[],(0,i.I)(n,(function(n){gn()[P.$5](n)}))}},n[P.h4]=function(n){return Q=n||null,fn=!1,dn&&dn[P._w](),u(!0)},n[P.Di]=function(){fn=!0,dn&&dn[P._w](),Sn()},(0,L.o$)(n,(function(){return Y}),["addTelemetryInitializer"]),n[P.M5]=function(l,t,u){var o;void 0===l&&(l=!0),e||(0,a.$8)("SDK is not initialized"),H&&(0,a.$8)(V);var i,s=((o={reason:50})[P.tI]=l,o.flushComplete=!1,o);l&&!t&&(i=(0,r.Qo)((function(n){t=n})));var c=(0,N.tS)(wn(),n);function h(l){s.flushComplete=l,H=!0,ln.run(c,s),n[P.Di](),c[P.$5](s)}return c[P.by]((function(){en.run(n[P.Uw]),(0,I.k)([v,p,d],l,(function(){mn(),t&&t(s)}))}),n),Sn(),Cn(l,h,6,u)||h(!1),i},n[P.AP]=vn,n.addPlugin=function(n,l,e,t){if(!n)return t&&t(!1),void En(z);var u=vn(n[P.Ju]);if(u&&!l)return t&&t(!1),void En("Plugin ["+n[P.Ju]+"] is already loaded!");var r={reason:16};function o(l){b[P.y5](n),r.added=[n],yn(r),t&&t(!0)}if(u){var i=[u.plugin];bn(i,{reason:2,isAsync:!!e},(function(n){n?(r.removed=i,r.reason|=32,o()):t&&t(!1)}))}else o()},n.updateCfg=function(e,t){var u;if(void 0===t&&(t=!0),n[P.tZ]()){u={reason:1,cfg:l.cfg,oldCfg:C({},l.cfg),newConfig:C({},e),merge:t},e=u.newConfig;var r=l.cfg;e[$.jy]=r[$.jy],e[$.LZ]=r[$.LZ]}l._block((function(n){var l=n.cfg;J(n,l,e,t),t||(0,c.z)(l,(function(t){(0,E.K)(e,t)||n.set(l,t,$.HP)})),n[P.h0](l,G)}),!0),l[P.zs](),u&&Dn(u)},n.evtNamespace=function(){return nn},n.flush=Cn,n.getTraceCtx=function(n){return un||(un=(0,B.u7)()),un},n.setTraceCtx=function(n){un=n||null},n.addUnloadHook=kn,(0,L.RF)(n,"addUnloadCb",(function(){return ln}),"add"),n.onCfgChange=function(t){var u,r,o,i;return e?u=(0,T.a)(l.cfg,t,n[P.Uw]):((i=Z(r=on,o=t).l)||(i={w:o,rm:function(){var n=Z(r,o);-1!==n.i&&r[P.Ic](n.i,1)}},r[P.y5](i)),u=i),{rm:function(){u.rm()}}},n.getWParam=function(){return(0,_.Wt)()||l.cfg.enableWParam?0:-1}}))}return n.__ieDyn=1,n}()},4013:(n,l,e)=>{"use strict";e.d(l,{K:()=>s,k:()=>a});var t=e(636),u=e(4292),r=e(4657),o=e(755),i=e(6182);function s(n,l){if(n&&n[i.M5])return n[i.M5](l)}function a(n,l,e){var i;return e||(i=(0,t.Qo)((function(n){e=n}))),n&&(0,r.R)(n)>0?(0,u.Dv)(s(n[0],l),(function(){a((0,o.K)(n,1),l,e)})):e(),i}},8257:(n,l,e)=>{"use strict";e.d(l,{s:()=>y});var t,u=e(8279),r=e(6336),o=e(6668),i=e(9622),s=e(6182),a=e(3775),c=e(3673),d=e(6492),h=e(2317),f=e(836),p=e(8969),m="getPlugin",g=((t={})[d.Bw]={isVal:c.Gh,v:{}},t),y=function(){function n(){var l,e,t,y,v,w=this;function b(n){void 0===n&&(n=null);var l=n;if(!l){var u=e||(0,h.i8)(null,{},w[d.eT]);l=t&&t[m]?u[s.$o](null,t[m]):u[s.$o](null,t)}return l}function S(n,l,u){(0,i.e)(n,g,(0,a.y0)(l)),!u&&l&&(u=l[s.ps]()[s.uR]());var r=t;t&&t[m]&&(r=t[m]()),w[d.eT]=l,e=(0,h.i8)(u,n,l,r)}function C(){l=!1,w[d.eT]=null,e=null,t=null,v=(0,p.w)(),y=(0,f.P)()}C(),(0,u.A)(n,w,(function(n){n[s.mE]=function(n,e,t,u){S(n,e,u),l=!0},n[s.Ik]=function(l,e){var u,r=n[d.eT];if(r&&(!l||r===l[d.eT]())){var o,i=!1,a=l||(0,h.tS)(null,r,t&&t[m]?t[m]():t),c=e||((u={reason:0})[s.tI]=!1,u);return n[s.tn]&&!0===n[s.tn](a,c,f)?o=!0:f(),o}function f(){i||(i=!0,y.run(a,e),v.run(a[s.e4]()),!0===o&&a[s.$5](c),C())}},n[s.HC]=function(l,e){var u=n[d.eT];if(u&&(!l||u===l[d.eT]())){var r,o=!1,i=l||(0,h.nU)(null,u,t&&t[m]?t[m]():t),a=e||{reason:0};return n._doUpdate&&!0===n._doUpdate(i,a,c)?r=!0:c(),r}function c(){o||(o=!0,S(i.getCfg(),i.core(),i[s.uR]()))}},(0,c.RF)(n,"_addUnloadCb",(function(){return y}),"add"),(0,c.RF)(n,"_addHook",(function(){return v}),"add"),(0,r.vF)(n,"_unloadHooks",{g:function(){return v}})})),w[s.e4]=function(n){return b(n)[s.e4]()},w[s.tZ]=function(){return l},w.setInitialized=function(n){l=n},w[s.YH]=function(n){t=n},w[s.$5]=function(n,l){l?l[s.$5](n):t&&(0,o.Tn)(t[d.qT])&&t[d.qT](n,null)},w._getTelCtx=b}return n.__ieDyn=1,n}()},5034:(n,l,e)=>{"use strict";e.d(l,{It:()=>J,gi:()=>W,um:()=>U,xN:()=>q});var t,u,r,o=e(2871),i=e(3076),s=e(6668),a=e(6832),c=e(1374),d=e(5881),h=e(3178),f=e(225),p=e(8693),m=e(5439),g=e(9018),y=e(2494),v=e(2475),w=e(9622),b=e(6182),S=e(3775),C=e(7292),D=e(3673),E=e(6492),_="toGMTString",k="toUTCString",x="cookie",T="expires",P="isCookieUseDisabled",I="disableCookiesUsage",A="_ckMgr",O=null,R=null,F=null,L={},$={},j=((t={cookieCfg:(0,v.NU)((u={},u[E.Fk]={fb:"cookieDomain",dfVal:D.Gh},u.path={fb:"cookiePath",dfVal:D.Gh},u.enabled=E.HP,u.ignoreCookies=E.HP,u.blockedCookies=E.HP,u)),cookieDomain:E.HP,cookiePath:E.HP})[I]=E.HP,t);function M(){!r&&(r=(0,o.nR)((function(){return(0,i.YE)()})))}function N(n){return!n||n.isEnabled()}function B(n,l){return!!(l&&n&&(0,s.cy)(n.ignoreCookies))&&-1!==(0,a.r)(n.ignoreCookies,l)}function H(n,l){var e=l[b.XM];if((0,s.hX)(e)){var t=void 0;(0,s.b0)(n[P])||(t=!n[P]),(0,s.b0)(n[I])||(t=!n[I]),e=t}return e}function U(n,l){var e;if(n)e=n.getCookieMgr();else if(l){var t=l.cookieCfg;e=t&&t[A]?t[A]:q(l)}return e||(e=function(n,l){var e=q[A]||$[A];return e||(e=q[A]=q(n,l),$[A]=e),e}(l,(n||{})[b.Uw])),e}function q(n,l){var e,t,u,r,o,p,m,g,y;n=(0,w.e)(n||$,null,l).cfg,o=(0,w.a)(n,(function(l){l[b.h0](l.cfg,j),t=l.ref(l.cfg,"cookieCfg"),u=t[E.QW]||"/",r=t[E.Fk],p=!1!==H(n,t),m=t.getCookie||K,g=t.setCookie||X,y=t.delCookie||X}),l);var v=((e={isEnabled:function(){var e=!1!==H(n,t)&&p&&W(l),u=$[A];return e&&u&&v!==u&&(e=N(u)),e},setEnabled:function(n){p=!1!==n,t[b.XM]=n},set:function(n,l,e,o,p){var m=!1;if(N(v)&&!function(n,l){return!!(l&&n&&(0,s.cy)(n.blockedCookies)&&-1!==(0,a.r)(n.blockedCookies,l))||B(n,l)}(t,n)){var y={},w=(0,c.EH)(l||E.m5),S=(0,d.H)(w,";");if(-1!==S&&(w=(0,c.EH)((0,h.ZW)(l,S)),y=z((0,h.P0)(l,S+1))),(0,D.KY)(y,E.Fk,o||r,s.zz,s.b0),!(0,s.hX)(e)){var x=(0,C.lT)();if((0,s.b0)(y[T])){var P=(0,f.f)()+1e3*e;if(P>0){var I=new Date;I.setTime(P),(0,D.KY)(y,T,V(I,x?_:k)||V(I,x?_:k)||E.m5,s.zz)}}x||(0,D.KY)(y,"max-age",E.m5+e,null,s.b0)}var A=(0,C.g$)();A&&"https:"===A.protocol&&((0,D.KY)(y,"secure",null,null,s.b0),null===R&&(R=!J(((0,i.w3)()||{})[b.tX])),R&&(0,D.KY)(y,"SameSite","None",null,s.b0)),(0,D.KY)(y,E.QW,p||u,null,s.b0),g(n,G(w,y)),m=!0}return m},get:function(n){var l=E.m5;return N(v)&&!B(t,n)&&(l=m(n)),l},del:function(n,l){var e=!1;return N(v)&&(e=v.purge(n,l)),e},purge:function(n,e){var t,u=!1;if(W(l)){var r=((t={})[E.QW]=e||"/",t[T]="Thu, 01 Jan 1970 00:00:01 GMT",t);(0,C.lT)()||(r["max-age"]="0"),y(n,G(E.m5,r)),u=!0}return u}})[b.M5]=function(n){o&&o.rm(),o=null},e);return v[A]=v,v}function W(n){if(null===O){O=!1,!r&&M();try{var l=r.v||{};O=void 0!==l[x]}catch(l){(0,S.ZP)(n,2,68,"Cannot access document.cookie - "+(0,D.lL)(l),{exception:(0,p.m)(l)})}}return O}function z(n){var l={};if(n&&n[b.oI]){var e=(0,c.EH)(n)[b.sY](";");(0,m.I)(e,(function(n){if(n=(0,c.EH)(n||E.m5)){var e=(0,d.H)(n,"=");-1===e?l[n]=null:l[(0,c.EH)((0,h.ZW)(n,e))]=(0,c.EH)((0,h.P0)(n,e+1))}}))}return l}function V(n,l){return(0,s.Tn)(n[l])?n[l]():null}function G(n,l){var e=n||E.m5;return(0,g.z)(l,(function(n,l){e+="; "+n+((0,s.hX)(l)?E.m5:"="+l)})),e}function K(n){var l=E.m5;if(!r&&M(),r.v){var e=r.v[x]||E.m5;F!==e&&(L=z(e),F=e),l=(0,c.EH)(L[n]||E.m5)}return l}function X(n,l){!r&&M(),r.v&&(r.v[x]=n+"="+l)}function J(n){return!(!(0,s.Kg)(n)||!(0,D.Ju)(n,"CPU iPhone OS 12")&&!(0,D.Ju)(n,"iPad; CPU OS 12")&&!((0,D.Ju)(n,"Macintosh; Intel Mac OS X 10_14")&&(0,D.Ju)(n,"Version/")&&(0,D.Ju)(n,"Safari"))&&(!(0,D.Ju)(n,"Macintosh; Intel Mac OS X 10_14")||!(0,y.C)(n,"AppleWebKit/605.1.15 (KHTML, like Gecko)"))&&!(0,D.Ju)(n,"Chrome/5")&&!(0,D.Ju)(n,"Chrome/6")&&(!(0,D.Ju)(n,"UnrealEngine")||(0,D.Ju)(n,"Chrome"))&&!(0,D.Ju)(n,"UCBrowser/12")&&!(0,D.Ju)(n,"UCBrowser/11"))}},9882:(n,l,e)=>{"use strict";e.d(l,{aq:()=>o,cL:()=>i});var t=e(3178),u=e(6492),r=e(6535);function o(){var n=i();return(0,t.P0)(n,0,8)+"-"+(0,t.P0)(n,8,12)+"-"+(0,t.P0)(n,12,16)+"-"+(0,t.P0)(n,16,20)+"-"+(0,t.P0)(n,20)}function i(){for(var n,l=["0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f"],e=u.m5,o=0;o<4;o++)e+=l[15&(n=(0,r.VN)())]+l[n>>4&15]+l[n>>8&15]+l[n>>12&15]+l[n>>16&15]+l[n>>20&15]+l[n>>24&15]+l[n>>28&15];var i=l[8+(3&(0,r.VN)())|0];return(0,t.hK)(e,0,8)+(0,t.hK)(e,9,4)+"4"+(0,t.hK)(e,13,3)+i+(0,t.hK)(e,16,3)+(0,t.hK)(e,19,12)}},4276:(n,l,e)=>{"use strict";e.d(l,{T:()=>f,Z:()=>h});var t=e(6336),u=e(6182),r=e(3673),o=e(6492),i=e(6535),s="3.0.5",a="."+(0,i.Si)(6),c=0;function d(n){return 1===n[u.re]||9===n[u.re]||!+n[u.re]}function h(n,l){return void 0===l&&(l=!1),(0,r.cH)(n+c+++(l?"."+s:o.m5)+a)}function f(n){var l={id:h("_aiData-"+(n||o.m5)+"."+s),accept:function(n){return d(n)},get:function(n,e,u,o){var i=n[l.id];return i?i[(0,r.cH)(e)]:(o&&(i=function(n,l){var e=l[n.id];if(!e){e={};try{d(l)&&(0,t.vF)(l,n.id,{e:!1,v:e})}catch(n){}}return e}(l,n),i[(0,r.cH)(e)]=u),u)},kill:function(n,l){if(n&&n[l])try{delete n[l]}catch(n){}}};return l}},7867:(n,l,e)=>{"use strict";e.d(l,{$:()=>c,M:()=>d});var t,u=e(3076),r=e(6182),o=e(6492),i=[o.fc,o.Yp,o.dI,o.l0],s=null;function a(n,l){return function(){var e=arguments,t=c(l);if(t){var u=t.listener;u&&u[n]&&u[n][r.y9](u,e)}}}function c(n){var l,e=s;return e||!0===n.disableDbgExt||(e=s||((l=(0,u.zS)("Microsoft"))&&(s=l.ApplicationInsights),s)),e?e.ChromeDbgExt:null}function d(n){if(!t){t={};for(var l=0;l<i[r.oI];l++)t[i[l]]=a(i[l],n)}return t}},3775:(n,l,e)=>{"use strict";e.d(l,{OG:()=>C,Oc:()=>D,WD:()=>y,ZP:()=>S,wq:()=>w,y0:()=>v});var t,u=e(8279),r=e(6668),o=e(8693),i=e(9622),s=e(6182),a=e(7867),c=e(7292),d=e(6492),h="warnToConsole",f={loggingLevelConsole:0,loggingLevelTelemetry:1,maxMessageLimit:25,enableDebug:!1},p=((t={})[0]=null,t[1]="errorToConsole",t[2]=h,t[3]="debugToConsole",t);function m(n){return n?'"'+n[s.W7](/\"/g,d.m5)+'"':d.m5}function g(n,l){var e=(0,c.U5)();if(e){var t="log";e[n]&&(t=n),(0,r.Tn)(e[t])&&e[t](l)}}var y=function(){function n(n,l,e,t){void 0===e&&(e=!1);var u=this;u[s.JR]=n,u[s.pM]=(e?"AI: ":"AI (Internal): ")+n;var r=d.m5;(0,c.Z)()&&(r=(0,c.hm)().stringify(t));var o=(l?" message:"+m(l):d.m5)+(t?" props:"+m(r):d.m5);u[s.pM]+=o}return n.dataType="MessageData",n}();function v(n,l){return(n||{})[s.Uw]||new w(l)}var w=function(){function n(l){this.identifier="DiagnosticLogger",this.queue=[];var e,t,c,d,m,v=0,w={};(0,u.A)(n,this,(function(n){function u(l,e){if(!(v>=c)){var u=!0,r="AITR_"+e[s.JR];if(w[r]?u=!1:w[r]=!0,u&&(l<=t&&(n.queue[s.y5](e),v++,b(1===l?"error":"warn",e)),v===c)){var o="Internal events throttle limit per PageView reached for this app.",i=new y(23,o,!1);n.queue[s.y5](i),1===l?n.errorToConsole(o):n[s.on](o)}}}function b(n,e){var t=(0,a.$)(l||{});t&&t[s.e4]&&t[s.e4](n,e)}m=function(l){return(0,i.a)((0,i.e)(l,f,n).cfg,(function(n){var l=n.cfg;e=l[s.Bl],t=l.loggingLevelTelemetry,c=l.maxMessageLimit,d=l.enableDebug}))}(l||{}),n.consoleLoggingLevel=function(){return e},n[s.ih]=function(l,t,i,a,c){void 0===c&&(c=!1);var f=new y(t,i,c,a);if(d)throw(0,o.m)(f);var m=p[l]||h;if((0,r.b0)(f[s.pM]))b("throw"+(1===l?"Critical":"Warning"),f);else{if(c){var g=+f[s.JR];!w[g]&&e>=l&&(n[m](f[s.pM]),w[g]=!0)}else e>=l&&n[m](f[s.pM]);u(l,f)}},n.debugToConsole=function(n){g("debug",n),b("warning",n)},n[s.on]=function(n){g("warn",n),b("warning",n)},n.errorToConsole=function(n){g("error",n),b("error",n)},n.resetInternalMessageCount=function(){v=0,w={}},n[s.sx]=u,n[s.M5]=function(n){m&&m.rm(),m=null}}))}return n.__ieDyn=1,n}();function b(n){return n||new w}function S(n,l,e,t,u,r){void 0===r&&(r=!1),b(n)[s.ih](l,e,t,u,r)}function C(n,l){b(n)[s.on](l)}function D(n,l,e){b(n)[s.sx](l,e)}},7292:(n,l,e)=>{"use strict";e.d(l,{$Z:()=>H,Iu:()=>U,L0:()=>L,MY:()=>A,PV:()=>M,R7:()=>j,U5:()=>T,Uf:()=>$,Z:()=>P,cU:()=>k,g$:()=>x,hm:()=>I,iN:()=>O,lT:()=>F,lV:()=>R,xk:()=>N});var t=e(5664),u=e(6668),r=e(3076),o=e(558),i=e(6182),s=e(3673),a=e(6492),c="documentMode",d="location",h="console",f="JSON",p="crypto",m="msCrypto",g="ReactNative",y="msie",v="trident/",w="XMLHttpRequest",b=null,S=null,C=!1,D=null,E=null;function _(n,l){var e=!1;if(n){try{if(!(e=l in n)){var r=n[t.vR];r&&(e=l in r)}}catch(n){}if(!e)try{var o=new n;e=!(0,u.b0)(o[l])}catch(n){}}return e}function k(n){C=n}function x(n){if(n&&C){var l=(0,r.zS)("__mockLocation");if(l)return l}return typeof location===t._1&&location?location:(0,r.zS)(d)}function T(){return typeof console!==t.bA?console:(0,r.zS)(h)}function P(){return Boolean(typeof JSON===t._1&&JSON||null!==(0,r.zS)(f))}function I(){return P()?JSON||(0,r.zS)(f):null}function A(){return(0,r.zS)(p)}function O(){return(0,r.zS)(m)}function R(){var n=(0,r.w3)();return!(!n||!n.product)&&n.product===g}function F(){var n=(0,r.w3)();if(n&&(n[i.tX]!==S||null===b)){var l=((S=n[i.tX])||a.m5)[i.OL]();b=(0,s.Ju)(l,y)||(0,s.Ju)(l,v)}return b}function L(n){if(void 0===n&&(n=null),!n){var l=(0,r.w3)()||{};n=l?(l.userAgent||a.m5)[i.OL]():a.m5}var e=(n||a.m5)[i.OL]();if((0,s.Ju)(e,y)){var t=(0,r.YE)()||{};return Math.max(parseInt(e[i.sY](y)[1]),t[c]||0)}if((0,s.Ju)(e,v)){var u=parseInt(e[i.sY](v)[1]);if(u)return u+4}return null}function $(n){return null!==E&&!1!==n||(E=(0,r.w9)()&&Boolean((0,r.w3)().sendBeacon)),E}function j(n){var l=!1;try{l=!!(0,r.zS)("fetch");var e=(0,r.zS)("Request");l&&n&&e&&(l=_(e,"keepalive"))}catch(n){}return l}function M(){return null===D&&(D=typeof XDomainRequest!==t.bA)&&N()&&(D=D&&!_((0,r.zS)(w),"withCredentials")),D}function N(){var n=!1;try{n=!!(0,r.zS)(w)}catch(n){}return n}function B(n,l){if(n)for(var e=0;e<n[i.oI];e++){var t=n[e];if(t[i.RS]&&t[i.RS]===l)return t}return{}}function H(n){var l=(0,r.YE)();return l&&n?B(l.querySelectorAll("meta"),n).content:null}function U(n){var l,e=(0,o.FJ)();if(e){var t=e.getEntriesByType("navigation")||[];l=B((t[i.oI]>0?t[0]:{}).serverTiming,n).description}return l}},6149:(n,l,e)=>{"use strict";e.d(l,{Ds:()=>G,El:()=>O,Fc:()=>K,Hm:()=>$,ML:()=>M,Q3:()=>N,So:()=>H,Wg:()=>z,Ym:()=>B,ee:()=>V,lQ:()=>W,mB:()=>j,oS:()=>J,sq:()=>X,vF:()=>Z,zh:()=>U});var t=e(6668),u=e(5439),r=e(9018),o=e(1324),i=e(3076),s=e(6832),a=e(6182),c=e(4276),d=e(6492),h="on",f="attachEvent",p="addEventListener",m="detachEvent",g="removeEventListener",y="events",v="visibilitychange",w="pagehide",b="pageshow",S="unload",C="beforeunload",D=(0,c.Z)("aiEvtPageHide"),E=(0,c.Z)("aiEvtPageShow"),_=/\.[\.]+/g,k=/[\.]+$/,x=1,T=(0,c.T)("events"),P=/^([^.]*)(?:\.(.+)|)/;function I(n){return n&&n[a.W7]?n[a.W7](/^[\s\.]+|(?=[\s\.])[\.\s]+$/g,d.m5):n}function A(n,l){var e;if(l){var r=d.m5;(0,t.cy)(l)?(r=d.m5,(0,u.I)(l,(function(n){(n=I(n))&&("."!==n[0]&&(n="."+n),r+=n)}))):r=I(l),r&&("."!==r[0]&&(r="."+r),n=(n||d.m5)+r)}var o=P.exec(n||d.m5)||[];return(e={})[a.QM]=o[1],e.ns=(o[2]||d.m5).replace(_,".").replace(k,d.m5)[a.sY](".").sort().join("."),e}function O(n,l,e){var t=[],o=T.get(n,y,{},!1),i=A(l,e);return(0,r.z)(o,(function(n,l){(0,u.I)(l,(function(n){var l;i[a.QM]&&i[a.QM]!==n.evtName[a.QM]||i.ns&&i.ns!=i.ns||t[a.y5](((l={})[a.RS]=n.evtName[a.QM]+(n.evtName.ns?"."+n.evtName.ns:d.m5),l.handler=n[a.Yo],l))}))})),t}function R(n,l,e){void 0===e&&(e=!0);var t=T.get(n,y,{},e),u=t[l];return u||(u=t[l]=[]),u}function F(n,l,e,t){n&&l&&l[a.QM]&&(n[g]?n[g](l[a.QM],e,t):n[m]&&n[m](h+l[a.QM],e))}function L(n,l,e,t){for(var u=l[a.oI];u--;){var r=l[u];r&&(e.ns&&e.ns!==r.evtName.ns||t&&!t(r)||(F(n,r.evtName,r[a.Yo],r.capture),l[a.Ic](u,1)))}}function $(n,l){return l?A("xx",(0,t.cy)(l)?[n].concat(l):[n,l]).ns[a.sY]("."):n}function j(n,l,e,t,u){var r;void 0===u&&(u=!1);var o=!1;if(n)try{var i=A(l,t);if(o=function(n,l,e,t){var u=!1;return n&&l&&l[a.QM]&&e&&(n[p]?(n[p](l[a.QM],e,t),u=!0):n[f]&&(n[f](h+l[a.QM],e),u=!0)),u}(n,i,e,u),o&&T.accept(n)){var s=((r={guid:x++,evtName:i})[a.Yo]=e,r.capture=u,r);R(n,i.type)[a.y5](s)}}catch(n){}return o}function M(n,l,e,t,u){if(void 0===u&&(u=!1),n)try{var i=A(l,t),s=!1;!function(n,l,e){if(l[a.QM])L(n,R(n,l[a.QM]),l,e);else{var t=T.get(n,y,{});(0,r.z)(t,(function(t,u){L(n,u,l,e)})),0===(0,o.cG)(t)[a.oI]&&T.kill(n,y)}}(n,i,(function(n){return!((!i.ns||e)&&n[a.Yo]!==e||(s=!0,0))})),s||F(n,i,e,u)}catch(n){}}function N(n,l,e,t){return void 0===t&&(t=!1),j(n,l,e,null,t)}function B(n,l,e,t){void 0===t&&(t=!1),M(n,l,e,null,t)}function H(n,l,e){var t=!1,u=(0,i.zk)();u&&(t=j(u,n,l,e),t=j(u.body,n,l,e)||t);var r=(0,i.YE)();return r&&(t=j(r,n,l,e)||t),t}function U(n,l,e){var t=(0,i.zk)();t&&(M(t,n,l,e),M(t.body,n,l,e));var u=(0,i.YE)();u&&M(u,n,l,e)}function q(n,l,e,t){var r=!1;return l&&n&&n[a.oI]>0&&(0,u.I)(n,(function(n){n&&(e&&-1!==(0,s.r)(e,n)||(r=H(n,l,t)||r))})),r}function W(n,l,e,u){var r=!1;return l&&n&&(0,t.cy)(n)&&!(r=q(n,l,e,u))&&e&&e[a.oI]>0&&(r=q(n,l,null,u)),r}function z(n,l,e){n&&(0,t.cy)(n)&&(0,u.I)(n,(function(n){n&&U(n,l,e)}))}function V(n,l,e){return W([C,S,w],n,l,e)}function G(n,l){z([C,S,w],n,l)}function K(n,l,e){var t=$(D,e),u=q([w],n,l,t);return l&&-1!==(0,s.r)(l,v)||(u=q([v],(function(l){var e=(0,i.YE)();n&&e&&"hidden"===e.visibilityState&&n(l)}),l,t)||u),!u&&l&&(u=K(n,null,e)),u}function X(n,l){var e=$(D,l);z([w],n,e),z([v],null,e)}function J(n,l,e){var t=$(E,e),u=q([b],n,l,t);return!(u=q([v],(function(l){var e=(0,i.YE)();n&&e&&"visible"===e.visibilityState&&n(l)}),l,t)||u)&&l&&(u=J(n,null,e)),u}function Z(n,l){var e=$(E,l);z([b],n,e),z([v],null,e)}},3673:(n,l,e)=>{"use strict";e.d(l,{CP:()=>I,Gh:()=>y,Ju:()=>w,KY:()=>C,RF:()=>k,SZ:()=>T,_u:()=>b,c2:()=>D,cH:()=>v,hW:()=>P,lL:()=>S,o$:()=>x,qz:()=>_});var t=e(1324),u=e(5664),r=e(6668),o=e(5881),i=e(9452),s=e(6336),a=e(5439),c=e(9018),d=e(7460),h=e(6182),f=e(6492),p=/-([a-z])/g,m=/([^\w\d_$])/g,g=/^(\d+[\w\d_$])/;function y(n){return!(0,r.hX)(n)}function v(n){var l=n;return l&&(0,r.Kg)(l)&&(l=(l=(l=l[h.W7](p,(function(n,l){return l.toUpperCase()})))[h.W7](m,"_"))[h.W7](g,(function(n,l){return"_"+l}))),l}function w(n,l){return!(!n||!l)&&-1!==(0,o.H)(n,l)}function b(n){return n&&n.toISOString()||""}function S(n){return(0,r.bJ)(n)?n[h.RS]:f.m5}function C(n,l,e,t,u){var r=e;return n&&((r=n[l])===e||u&&!u(r)||t&&!t(e)||(r=e,n[l]=r)),r}function D(n,l,e){var t;return n?!(t=n[l])&&(0,r.hX)(t)&&(t=(0,r.b0)(e)?{}:e,n[l]=t):t=(0,r.b0)(e)?{}:e,t}function E(n,l){var e=null,t=null;return(0,r.Tn)(n)?e=n:t=n,function(){var n=arguments;if(e&&(t=e()),t)return t[l][h.y9](t,n)}}function _(n,l,e){if(n&&l&&(0,r.Gv)(n)&&(0,r.Gv)(l)){var t=function(t){if((0,r.Kg)(t)){var u=l[t];(0,r.Tn)(u)?e&&!e(t,!0,l,n)||(n[t]=E(l,t)):e&&!e(t,!1,l,n)||((0,i.K)(n,t)&&delete n[t],(0,s.vF)(n,t,{g:function(){return l[t]},s:function(n){l[t]=n}}))}};for(var u in l)t(u)}return n}function k(n,l,e,t,u){n&&l&&e&&(!1!==u||(0,r.b0)(n[l]))&&(n[l]=E(e,t))}function x(n,l,e,t){return n&&l&&(0,r.Gv)(n)&&(0,r.cy)(e)&&(0,a.I)(e,(function(e){(0,r.Kg)(e)&&k(n,e,l,e,t)})),n}function T(n){return function(){var l=this;n&&(0,c.z)(n,(function(n,e){l[n]=e}))}}function P(n){return n&&t.vE&&(n=(0,u.s6)((0,t.vE)({},n))),n}function I(n,l,e,t,u,o){var s=arguments,a=s[0]||{},c=s[h.oI],f=!1,p=1;for(c>0&&(0,r.Lm)(a)&&(f=a,a=s[p]||{},p++),(0,r.Gv)(a)||(a={});p<c;p++){var m=s[p],g=(0,r.cy)(m),y=(0,r.Gv)(m);for(var v in m)if(g&&v in m||y&&(0,i.K)(m,v)){var w=m[v],b=void 0;if(f&&w&&((b=(0,r.cy)(w))||(0,d.Q)(w))){var S=a[v];b?(0,r.cy)(S)||(S=[]):(0,d.Q)(S)||(S={}),w=I(f,S,w)}void 0!==w&&(a[v]=w)}}return a}Object.getPrototypeOf},6492:(n,l,e)=>{"use strict";e.d(l,{Bw:()=>a,Fk:()=>v,HP:()=>t,Hr:()=>s,LZ:()=>r,QW:()=>w,Vo:()=>h,Yd:()=>i,Yp:()=>p,dI:()=>m,eT:()=>o,fc:()=>f,jy:()=>c,kI:()=>y,l0:()=>g,m5:()=>u,qT:()=>d,xW:()=>b});var t=void 0,u="",r="channels",o="core",i="createPerfMgr",s="disabled",a="extensionConfig",c="extensions",d="processTelemetry",h="priority",f="eventsSent",p="eventsDiscarded",m="eventsSendRequest",g="perfEvent",y="getPerfMgr",v="domain",w="path",b="Not dynamic - "},1356:(n,l,e)=>{"use strict";e.d(l,{h:()=>m});var t=e(8279),u=e(636),r=e(4292),o=e(5439),i=e(6874),s=e(6336),a=e(6832),c=e(9622),d=e(6182),h=e(6492),f={perfEvtsSendAll:!1};function p(n,l,e,t){(0,o.I)(n,(function(n){if(n&&n[l])if(e)(0,i.dR)((function(){return t(n)}),0);else try{t(n)}catch(n){}}))}var m=function(){function n(l){var e,o;this.listeners=[];var m=[],g=(0,c.e)(l,f);o=g[d.x6]((function(n){e=!!n.cfg.perfEvtsSendAll})),(0,t.A)(n,this,(function(n){(0,s.vF)(n,"listeners",{g:function(){return m}}),n[d.vR]=function(n){m[d.y5](n)},n[d.TP]=function(n){for(var l=(0,a.r)(m,n);l>-1;)m[d.Ic](l,1),l=(0,a.r)(m,n)},n[h.fc]=function(n){p(m,h.fc,!0,(function(l){l[h.fc](n)}))},n[h.Yp]=function(n,l){p(m,h.Yp,!0,(function(e){e[h.Yp](n,l)}))},n[h.dI]=function(n,l){p(m,h.dI,l,(function(e){e[h.dI](n,l)}))},n[h.l0]=function(n){n&&(!e&&n[d.Zu]()||p(m,h.l0,!1,(function(l){n[d.tI]?(0,i.dR)((function(){return l[h.l0](n)}),0):l[h.l0](n)})))},n[d.M5]=function(n){var l,e=function(){o&&o.rm(),o=null,m=[]};if(p(m,"unload",!1,(function(e){var t=e[d.M5](n);t&&(l||(l=[]),l[d.y5](t))})),l)return(0,u.Qo)((function(n){return(0,r.Dv)((0,u.Xf)(l),(function(){e(),n()}))}));e()}}))}return n.__ieDyn=1,n}()},5775:(n,l,e)=>{"use strict";e.d(l,{NS:()=>p,Q6:()=>f,Z4:()=>y,r2:()=>g});var t=e(8279),u=e(225),r=e(6668),o=e(6336),i=e(6182),s=e(6492),a="ctx",c="ParentContextKey",d="ChildrenContextKey",h=null,f=function(){function n(l,e,t){var s,h=this;h.start=(0,u.f)(),h[i.RS]=l,h[i.tI]=t,h[i.Zu]=function(){return!1},(0,r.Tn)(e)&&(0,o.vF)(h,"payload",{g:function(){return!s&&(0,r.Tn)(e)&&(s=e(),e=null),s}}),h[i.O_]=function(l){return l?l===n[c]||l===n[d]?h[l]:(h[a]||{})[l]:null},h[i.e_]=function(l,e){l&&(l===n[c]?(h[l]||(h[i.Zu]=function(){return!0}),h[l]=e):l===n[d]?h[l]=e:(h[a]=h[a]||{})[l]=e)},h[i.Ru]=function(){var l=0,e=h[i.O_](n[d]);if((0,r.cy)(e))for(var t=0;t<e[i.oI];t++){var o=e[t];o&&(l+=o[i.fA])}h[i.fA]=(0,u.f)()-h.start,h.exTime=h[i.fA]-l,h[i.Ru]=function(){}}}return n.ParentContextKey="parent",n.ChildrenContextKey="childEvts",n}(),p=function(){function n(l){this.ctx={},(0,t.A)(n,this,(function(n){n.create=function(n,l,e){return new f(n,l,e)},n.fire=function(n){n&&(n[i.Ru](),l&&(0,r.Tn)(l[s.l0])&&l[s.l0](n))},n[i.e_]=function(l,e){l&&((n[a]=n[a]||{})[l]=e)},n[i.O_]=function(l){return(n[a]||{})[l]}}))}return n.__ieDyn=1,n}(),m="CoreUtils.doPerf";function g(n,l,e,t,u){if(n){var r=n;if(r[s.kI]&&(r=r[s.kI]()),r){var o=void 0,a=r[i.O_](m);try{if(o=r.create(l(),t,u)){if(a&&o[i.e_]&&(o[i.e_](f[c],a),a[i.O_]&&a[i.e_])){var h=a[i.O_](f[d]);h||(h=[],a[i.e_](f[d],h)),h[i.y5](o)}return r[i.e_](m,o),e(o)}}catch(n){o&&o[i.e_]&&o[i.e_]("exception",n)}finally{o&&r.fire(o),r[i.e_](m,a)}}}return e()}function y(){return h}},2317:(n,l,e)=>{"use strict";e.d(l,{PV:()=>E,W0:()=>_,i8:()=>S,nU:()=>D,tS:()=>C});var t=e(6668),u=e(5439),r=e(8693),o=e(9018),i=e(1324),s=e(991),a=e(9622),c=e(6182),d=e(3775),h=e(3673),f=e(6492),p=e(5775),m=e(380),g="TelemetryPluginChain",y="_hasRun",v="_getTelCtx",w=0;function b(n,l,e,i){var h=null,p=[];l||(l=(0,a.e)({},null,e[c.Uw])),null!==i&&(h=i?function(n,l,e){for(;n;){if(n[c.AP]()===e)return n;n=n[c.uR]()}return E([e],l.config||{},l)}(n,e,i):n);var m={_next:function(){var n=h;if(h=n?n[c.uR]():null,!n){var l=p;l&&l[c.oI]>0&&((0,u.I)(l,(function(n){try{n.func.call(n.self,n.args)}catch(n){(0,d.ZP)(e[c.Uw],2,73,"Unexpected Exception during onComplete - "+(0,r.m)(n))}})),p=[])}return n},ctx:{core:function(){return e},diagLog:function(){return(0,d.y0)(e,l.cfg)},getCfg:function(){return l.cfg},getExtCfg:function(n,e){var u=g(n,!0);return e&&(0,o.z)(e,(function(n,e){if((0,t.hX)(u[n])){var r=l.cfg[n];!r&&(0,t.hX)(r)||(u[n]=r)}(0,s.q)(l,u,n,e)})),l[c.h0](u,e)},getConfig:function(n,e,u){void 0===u&&(u=!1);var r,o=g(n,!1),i=l.cfg;return!o||!o[e]&&(0,t.hX)(o[e])?!i[e]&&(0,t.hX)(i[e])||(r=i[e]):r=o[e],r||!(0,t.hX)(r)?r:u},hasNext:function(){return!!h},getNext:function(){return h},setNext:function(n){h=n},iterate:function(n){for(var l;l=m._next();){var e=l[c.AP]();e&&n(e)}},onComplete:function(n,l){for(var e=[],u=2;u<arguments.length;u++)e[u-2]=arguments[u];n&&p[c.y5]({func:n,self:(0,t.b0)(l)?m.ctx:l,args:e})}}};function g(n,e){var t=null,u=l.cfg;if(u&&n){var r=u[f.Bw];!r&&e&&(r={}),u[f.Bw]=r,(r=l.ref(u,f.Bw))&&(!(t=r[n])&&e&&(t={}),r[n]=t,t=l.ref(r,n))}return t}return m}function S(n,l,e,u){var r=(0,a.e)(l),o=b(n,r,e,u),i=o.ctx;return i[c.$5]=function(n){var l=o._next();return l&&l[f.qT](n,i),!l},i[c.$o]=function(n,l){return void 0===n&&(n=null),(0,t.cy)(n)&&(n=E(n,r.cfg,e,l)),S(n||i[c.uR](),r.cfg,e,l)},i}function C(n,l,e){var u=(0,a.e)(l.config),r=b(n,u,l,e),o=r.ctx;return o[c.$5]=function(n){var l=r._next();return l&&l[c.M5](o,n),!l},o[c.$o]=function(n,e){return void 0===n&&(n=null),(0,t.cy)(n)&&(n=E(n,u.cfg,l,e)),C(n||o[c.uR](),l,e)},o}function D(n,l,e){var u=(0,a.e)(l.config),r=b(n,u,l,e).ctx;return r[c.$5]=function(n){return r.iterate((function(l){(0,t.Tn)(l[c.HC])&&l[c.HC](r,n)}))},r[c.$o]=function(n,e){return void 0===n&&(n=null),(0,t.cy)(n)&&(n=E(n,u.cfg,l,e)),D(n||r[c.uR](),l,e)},r}function E(n,l,e,o){var s=null,a=!o;if((0,t.cy)(n)&&n[c.oI]>0){var h=null;(0,u.I)(n,(function(n){if(a||o!==n||(a=!0),a&&n&&(0,t.Tn)(n[f.qT])){var u=function(n,l,e){var u,o=null,s=(0,t.Tn)(n[f.qT]),a=(0,t.Tn)(n[c.YH]),h={getPlugin:function(){return n},getNext:function(){return o},processTelemetry:function(u,r){b(r=r||function(){var u;return n&&(0,t.Tn)(n[v])&&(u=n[v]()),u||(u=S(h,l,e)),u}(),(function(l){if(!n||!s)return!1;var e=(0,m.Cr)(n);return!e[c.Ik]&&!e[f.Hr]&&(a&&n[c.YH](o),n[f.qT](u,l),!0)}),"processTelemetry",(function(){return{item:u}}),!u.sync)||r[c.$5](u)},unload:function(l,e){b(l,(function(){var t=!1;if(n){var u=(0,m.Cr)(n),r=n[f.eT]||u[f.eT];!n||r&&r!==l.core()||u[c.Ik]||(u[f.eT]=null,u[c.Ik]=!0,u[c.tZ]=!1,n[c.Ik]&&!0===n[c.Ik](l,e)&&(t=!0))}return t}),"unload",(function(){}),e[c.tI])||l[c.$5](e)},update:function(l,e){b(l,(function(){var t=!1;if(n){var u=(0,m.Cr)(n),r=n[f.eT]||u[f.eT];!n||r&&r!==l.core()||u[c.Ik]||n[c.HC]&&!0===n[c.HC](l,e)&&(t=!0)}return t}),"update",(function(){}),!1)||l[c.$5](e)},_id:u=n?n[c.Ju]+"-"+n[f.Vo]+"-"+w++:"Unknown-0-"+w++,_setNext:function(n){o=n}};function b(l,e,t,i,s){var a=!1,h=n?n[c.Ju]:g,m=l[y];return m||(m=l[y]={}),l.setNext(o),n&&(0,p.r2)(l[f.eT](),(function(){return h+":"+t}),(function(){m[u]=!0;try{var n=o?o._id:f.m5;n&&(m[n]=!1),a=e(l)}catch(n){var i=!o||m[o._id];i&&(a=!0),o&&i||(0,d.ZP)(l[c.e4](),1,73,"Plugin ["+h+"] failed during "+t+" - "+(0,r.m)(n)+", run flags: "+(0,r.m)(m))}}),i,s),a}return(0,i.N6)(h)}(n,l,e);s||(s=u),h&&h._setNext(u),h=u}}))}return o&&!s?E([o],l,e):s}var _=function(n,l,e,t){var u=S(n,l,e,t);(0,h.o$)(this,u,(0,i.cG)(u))}},6535:(n,l,e)=>{"use strict";e.d(l,{Si:()=>y,VN:()=>g,Z1:()=>m});var t=e(225),u=e(6182),r=e(7292),o=e(6492),i=4294967296,s=4294967295,a=123456789,c=987654321,d=!1,h=a,f=c;function p(){try{var n=2147483647&(0,t.f)();(l=(Math.random()*i^n)+n)<0&&(l>>>=0),h=a+l&s,f=c-l&s,d=!0}catch(n){}var l}function m(n){return n>0?Math.floor(g()/s*(n+1))>>>0:0}function g(n){var l=0,e=(0,r.MY)()||(0,r.iN)();return e&&e.getRandomValues&&(l=e.getRandomValues(new Uint32Array(1))[0]&s),0===l&&(0,r.lT)()&&(d||p(),l=function(){var n=((f=36969*(65535&f)+(f>>16)&s)<<16)+(65535&(h=18e3*(65535&h)+(h>>16)&s))>>>0&s;return n>>>=0}()&s),0===l&&(l=Math.floor(i*Math.random()|0)),n||(l>>>=0),l}function y(n){void 0===n&&(n=22);for(var l=g()>>>0,e=0,t=o.m5;t[u.oI]<n;)e++,t+="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(63&l),l>>>=6,5===e&&(l=(g()<<2&4294967295|3&l)>>>0,e=0);return t}},380:(n,l,e)=>{"use strict";e.d(l,{Cr:()=>a,Xc:()=>d,pI:()=>c,u7:()=>h});var t=e(5439),u=e(6182),r=e(4276),o=e(6492),i=e(1864),s=(0,r.T)("plugin");function a(n){return s.get(n,"state",{},!0)}function c(n,l){for(var e,r=[],i=null,s=n[u.uR]();s;){var c=s[u.AP]();if(c){i&&i[u.YH]&&c[o.qT]&&i[u.YH](c);var d=!!(e=a(c))[u.tZ];c[u.tZ]&&(d=c[u.tZ]()),d||r[u.y5](c),i=c,s=s[u.uR]()}}(0,t.I)(r,(function(t){var r=n[o.eT]();t[u.mE](n.getCfg(),r,l,n[u.uR]()),e=a(t),t[o.eT]||e[o.eT]||(e[o.eT]=r),e[u.tZ]=!0,delete e[u.Ik]}))}function d(n){return n.sort((function(n,l){var e=0;if(l){var t=l[o.qT];n[o.qT]?e=t?n[o.Vo]-l[o.Vo]:1:t&&(e=-1)}else e=n?1:-1;return e}))}function h(n){var l={};return{getName:function(){return l[u.RS]},setName:function(e){n&&n.setName(e),l[u.RS]=e},getTraceId:function(){return l[u.P5]},setTraceId:function(e){n&&n.setTraceId(e),(0,i.hX)(e)&&(l[u.P5]=e)},getSpanId:function(){return l[u.wi]},setSpanId:function(e){n&&n.setSpanId(e),(0,i.wN)(e)&&(l[u.wi]=e)},getTraceFlags:function(){return l[u.Rr]},setTraceFlags:function(e){n&&n.setTraceFlags(e),l[u.Rr]=e}}}},836:(n,l,e)=>{"use strict";e.d(l,{P:()=>i});var t=e(5439),u=e(8693),r=e(6182),o=e(3775);function i(){var n=[];return{add:function(l){l&&n[r.y5](l)},run:function(l,e){(0,t.I)(n,(function(n){try{n(l,e)}catch(n){(0,o.ZP)(l[r.e4](),2,73,"Unexpected error calling unload handler - "+(0,u.m)(n))}})),n=[]}}}},8969:(n,l,e)=>{"use strict";e.d(l,{w:()=>i});var t=e(5439),u=e(8693),r=e(1187),o=e(3775);function i(){var n=[];return{run:function(l){var e=n;n=[],(0,t.I)(e,(function(n){try{(n.rm||n.remove).call(n)}catch(n){(0,o.ZP)(l,2,73,"Unloading:"+(0,u.m)(n))}}))},add:function(l){l&&(0,r.Y)(n,l)}}}},1864:(n,l,e)=>{"use strict";e.d(l,{L0:()=>_,N7:()=>E,ZI:()=>b,ef:()=>k,hX:()=>S,mJ:()=>D,wN:()=>C,wk:()=>w});var t=e(3178),u=e(6668),r=e(1374),o=e(6182),i=e(9882),s=e(7292),a=e(6492),c=/^([\da-f]{2})-([\da-f]{32})-([\da-f]{16})-([\da-f]{2})(-[^\s]{1,64})?$/i,d="00",h="ff",f="00000000000000000000000000000000",p="0000000000000000",m=1;function g(n,l,e){return!(!n||n[o.oI]!==l||n===e||!n.match(/^[\da-f]*$/i))}function y(n,l,e){return g(n,l)?n:e}function v(n){(isNaN(n)||n<0||n>255)&&(n=1);for(var l=n.toString(16);l[o.oI]<2;)l="0"+l;return l}function w(n,l,e,u){var r;return(r={})[o.s]=g(u,2,h)?u:d,r[o.P5]=S(n)?n:(0,i.cL)(),r[o.wi]=C(l)?l:(0,t.ZW)((0,i.cL)(),16),r.traceFlags=e>=0&&e<=255?e:1,r}function b(n,l){var e;if(!n)return null;if((0,u.cy)(n)&&(n=n[0]||""),!n||!(0,u.Kg)(n)||n[o.oI]>8192)return null;if(-1!==n.indexOf(",")){var t=n[o.sY](",");n=t[l>0&&t[o.oI]>l?l:0]}var i=c.exec((0,r.EH)(n));return i&&i[1]!==h&&i[2]!==f&&i[3]!==p?((e={version:(i[1]||a.m5)[o.OL](),traceId:(i[2]||a.m5)[o.OL](),spanId:(i[3]||a.m5)[o.OL]()})[o.Rr]=parseInt(i[4],16),e):null}function S(n){return g(n,32,f)}function C(n){return g(n,16,p)}function D(n){return!!(n&&g(n[o.s],2,h)&&g(n[o.P5],32,f)&&g(n[o.wi],16,p)&&g(v(n[o.Rr]),2))}function E(n){return!!D(n)&&(n[o.Rr]&m)===m}function _(n){if(n){var l=v(n[o.Rr]);g(l,2)||(l="01");var e=n[o.s]||d;return"00"!==e&&"ff"!==e&&(e=d),"".concat(e.toLowerCase(),"-").concat(y(n.traceId,32,f).toLowerCase(),"-").concat(y(n.spanId,16,p).toLowerCase(),"-").concat(l.toLowerCase())}return""}function k(n){var l="traceparent",e=b((0,s.$Z)(l),n);return e||(e=b((0,s.Iu)(l),n)),e}},6182:(n,l,e)=>{"use strict";e.d(l,{$5:()=>_,$o:()=>$,AP:()=>S,Bl:()=>L,Di:()=>A,HC:()=>q,Ic:()=>m,Ik:()=>j,JQ:()=>u,JR:()=>M,Ju:()=>w,K0:()=>g,M5:()=>O,OL:()=>t,O_:()=>nn,P5:()=>tn,QM:()=>Z,RF:()=>x,RS:()=>D,Rr:()=>rn,Ru:()=>en,TP:()=>P,Uw:()=>h,W7:()=>X,XM:()=>I,XW:()=>o,YH:()=>z,Yo:()=>Y,Zu:()=>Q,_w:()=>y,by:()=>R,e4:()=>H,e_:()=>ln,fA:()=>E,h0:()=>c,h4:()=>C,ih:()=>a,mE:()=>v,oI:()=>r,on:()=>s,pM:()=>N,ps:()=>k,re:()=>K,s:()=>F,sY:()=>G,sx:()=>J,tI:()=>B,tX:()=>V,tZ:()=>b,tn:()=>U,uR:()=>W,vR:()=>T,wi:()=>un,x6:()=>d,y5:()=>p,y9:()=>f,zs:()=>i});var t="toLowerCase",u="blkVal",r="length",o="rdOnly",i="notify",s="warnToConsole",a="throwInternal",c="setDf",d="watch",h="logger",f="apply",p="push",m="splice",g="hdlr",y="cancel",v="initialize",w="identifier",b="isInitialized",S="getPlugin",C="pollInternalLogs",D="name",E="time",_="processNext",k="getProcessTelContext",x="getNotifyMgr",T="addNotificationListener",P="removeNotificationListener",I="enabled",A="stopPollingInternalLogs",O="unload",R="onComplete",F="version",L="loggingLevelConsole",$="createNew",j="teardown",M="messageId",N="message",B="isAsync",H="diagLog",U="_doTeardown",q="update",W="getNext",z="setNextPlugin",V="userAgent",G="split",K="nodeType",X="replace",J="logInternalMessage",Z="type",Y="handler",Q="isChildEvt",nn="getCtx",ln="setCtx",en="complete",tn="traceId",un="spanId",rn="traceFlags"},5664:(n,l,e)=>{"use strict";e.d(l,{Wy:()=>s,_1:()=>u,bA:()=>r,hW:()=>t,s6:()=>i,vR:()=>o});var t="function",u="object",r="undefined",o="prototype",i=Object,s=i[o]},659:(n,l,e)=>{"use strict";e.d(l,{Im:()=>a,qU:()=>d,vz:()=>h});var t=e(3076),u=e(1324),r=e(3517),o=e(411),i=e(5664),s=(((0,t.mS)()||{}).Symbol,((0,t.mS)()||{}).Reflect,"hasOwnProperty"),a=u.vE||function(n){for(var l,e=1,t=arguments.length;e<t;e++)for(var u in l=arguments[e])i.Wy[s].call(l,u)&&(n[u]=l[u]);return n},c=function(n,l){return c=i.s6.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,l){n.__proto__=l}||function(n,l){for(var e in l)l[s](e)&&(n[e]=l[e])},c(n,l)};function d(n,l){function e(){this.constructor=n}typeof l!==i.hW&&null!==l&&(0,r.zk)("Class extends value "+String(l)+" is not a constructor or null"),c(n,l),n[i.vR]=null===l?(0,o.s)(l):(e[i.vR]=l[i.vR],new e)}function h(n,l){for(var e=0,t=l.length,u=n.length;e<t;e++,u++)n[u]=l[e];return n}},1380:(n,l,e)=>{"use strict";e.r(l),e.d(l,{AppInsightsCore:()=>vl._,ApplicationInsights:()=>El,Sender:()=>gl,SeverityLevel:()=>Cl.O,arrForEach:()=>_.I,isNullOrUndefined:()=>T.hX,proxyFunctions:()=>w.o$,throwError:()=>wl.$8});var t=e(8279),u=e(659),r=e(5025),o=e(3072),i=e(2445),s=e(1448),a=e(4164),c=e(5397),d=e(5014),h=e(1365),f=e(740),p=e(4658),m=e(2318),g=e(2910),y=e(2475),v=e(3775),w=e(3673),b=e(8693),S=e(6149),C=e(4276),D=e(9622),E=e(2317),_=e(5439),k=e(7292),x=e(4013),T=e(6668),P=e(3076),I=e(1324),A=e(225),O=e(8257),R=e(636),F=e(4292),L=e(6336),$=e(6874),j=e(1575),M=e(7975),N=e(1062),B=e(7358),H=e(9018),U="duration",q="tags",W="deviceType",z="data",V="name",G="traceID",K="length",X="stringify",J="measurements",Z="dataType",Y="envelopeType",Q="toString",nn="onLine",ln="isOnline",en="_get",tn="enqueue",un="count",rn="eventsLimitInMem",on="push",sn="emitLineDelimitedJson",an="clear",cn="batchPayloads",dn="createNew",hn="markAsSent",fn="clearSent",pn="bufferOverride",mn="BUFFER_KEY",gn="SENT_BUFFER_KEY",yn="MAX_BUFFER_SIZE",vn="sendPOST",wn="triggerSend",bn="diagLog",Sn="_sender",Cn="customHeaders",Dn="maxBatchSizeInBytes",En="onunloadDisableBeacon",_n="isBeaconApiDisabled",kn="alwaysUseXhrOverride",xn="enableSessionStorageBuffer",Tn="_buffer",Pn="onunloadDisableFetch",In="instrumentationKey",An="convertUndefined",On="maxBatchInterval",Rn="baseType",Fn="sampleRate",Ln="_onError",$n="_onPartialSuccess",jn="_onSuccess",Mn="itemsAccepted",Nn="oriPayload",Bn="setRequestHeader",Hn="eventsSendRequest",Un="getSamplingScore",qn="baseType",Wn="baseData",zn="properties",Vn="true";function Gn(n,l,e){return(0,w.KY)(n,l,e,T.zz)}function Kn(n,l,e){(0,T.hX)(n)||(0,H.z)(n,(function(n,t){(0,T.Et)(t)?e[n]=t:(0,T.Kg)(t)?l[n]=t:(0,k.Z)()&&(l[n]=(0,k.hm)()[X](t))}))}function Xn(n,l){(0,T.hX)(n)||(0,H.z)(n,(function(e,t){n[e]=t||l}))}function Jn(n,l,e,t){var o=new N.L(n,t,l);Gn(o,"sampleRate",e[r.tU]),(e[Wn]||{}).startTime&&(o.time=(0,w._u)(e[Wn].startTime)),o.iKey=e.iKey;var i=e.iKey.replace(/-/g,"");return o[V]=o[V].replace("{0}",i),function(n,l,e){var t=e[q]=e[q]||{},r=l.ext=l.ext||{},o=l[q]=l[q]||[],i=r.user;i&&(Gn(t,j.O.userAuthUserId,i.authId),Gn(t,j.O.userId,i.id||i.localId));var s=r.app;s&&Gn(t,j.O.sessionId,s.sesId);var a=r.device;a&&(Gn(t,j.O.deviceId,a.id||a.localId),Gn(t,j.O[W],a.deviceClass),Gn(t,j.O.deviceIp,a.ip),Gn(t,j.O.deviceModel,a.model),Gn(t,j.O[W],a[W]));var c=l.ext.web;if(c){Gn(t,j.O.deviceLanguage,c.browserLang),Gn(t,j.O.deviceBrowserVersion,c.browserVer),Gn(t,j.O.deviceBrowser,c.browser);var d=e[z]=e[z]||{},h=d[Wn]=d[Wn]||{},f=h[zn]=h[zn]||{};Gn(f,"domain",c.domain),Gn(f,"isManual",c.isManual?Vn:null),Gn(f,"screenRes",c.screenRes),Gn(f,"userConsent",c.userConsent?Vn:null)}var p=r.os;p&&Gn(t,j.O.deviceOS,p[V]);var m=r.trace;m&&(Gn(t,j.O.operationParentId,m.parentID),Gn(t,j.O.operationName,(0,M.Rr)(n,m[V])),Gn(t,j.O.operationId,m[G]));for(var g={},y=o[K]-1;y>=0;y--){var v=o[y];(0,H.z)(v,(function(n,l){g[n]=l})),o.splice(y,1)}(0,H.z)(o,(function(n,l){g[n]=l}));var b=(0,u.Im)((0,u.Im)({},t),g);b[j.O.internalSdkVersion]||(b[j.O.internalSdkVersion]=(0,M.Rr)(n,"javascript:".concat(Yn.Version),64)),e[q]=(0,w.hW)(b)}(n,e,o),e[q]=e[q]||[],(0,w.hW)(o)}function Zn(n,l){(0,T.hX)(l[Wn])&&(0,v.ZP)(n,1,46,"telemetryItem.baseData cannot be null.")}var Yn={Version:"3.0.5"};function Qn(n,l,e){Zn(n,l);var t={},u={};l[qn]!==o.J[Z]&&(t.baseTypeSource=l[qn]),l[qn]===o.J[Z]?(t=l[Wn][zn]||{},u=l[Wn][J]||{}):l[Wn]&&Kn(l[Wn],t,u),Kn(l[z],t,u),(0,T.hX)(e)||Xn(t,e);var r=l[Wn][V],i=new o.J(n,r,t,u),s=new B.B(o.J[Z],i);return Jn(n,o.J[Y],l,s)}function nl(n,l){(0,S.ML)(n,null,null,l)}var ll,el,tl=e(6832),ul=function(){function n(l,e){var u=[],r=!1;this[en]=function(){return u},this._set=function(n){return u=n},(0,t.A)(n,this,(function(n){n[tn]=function(t){n[un]()>=e[rn]?r||((0,v.ZP)(l,2,105,"Maximum in-memory buffer size reached: "+n[un](),!0),r=!0):u[on](t)},n[un]=function(){return u[K]},n.size=function(){for(var n=u[K],l=0;l<u[K];l++)n+=u[l][K];return e[sn]||(n+=2),n},n[an]=function(){u=[],r=!1},n.getItems=function(){return u.slice(0)},n[cn]=function(n){return n&&n[K]>0?e[sn]?n.join("\n"):"["+n.join(",")+"]":null},n[dn]=function(n,e,t){var r=u.slice(0);n=n||l,e=e||{};var o=t?new ol(n,e):new rl(n,e);return(0,_.I)(r,(function(n){o[tn](n)})),o}}))}return n.__ieDyn=1,n}(),rl=function(n){function l(e,u){var r=n.call(this,e,u)||this;return(0,t.A)(l,r,(function(n,l){n[hn]=function(n){l[an]()},n[fn]=function(n){}})),r}return(0,u.qU)(l,n),l.__ieDyn=1,l}(ul),ol=function(n){function l(e,u){var r=n.call(this,e,u)||this,o=!1,i=null==u?void 0:u.namePrefix,s=u[pn]||{getItem:p.vH,setItem:p.Dt},a=s.getItem,c=s.setItem;return(0,t.A)(l,r,(function(n,t){var u=h(l[mn]),r=h(l[gn]),s=n._set(u.concat(r));function d(n,l){var e=[];return(0,_.I)(l,(function(l){(0,T.Tn)(l)||-1!==(0,tl.r)(n,l)||e[on](l)})),e}function h(n){var l=n;try{var t=a(e,l=i?i+"_"+l:l);if(t){var u=(0,k.hm)().parse(t);if((0,T.Kg)(u)&&(u=(0,k.hm)().parse(u)),u&&(0,T.cy)(u))return u}}catch(n){(0,v.ZP)(e,1,42," storage key: "+l+", "+(0,w.lL)(n),{exception:(0,b.m)(n)})}return[]}function f(n,l){var t=n;try{t=i?i+"_"+t:t;var u=JSON[X](l);c(e,t,u)}catch(n){c(e,t,JSON[X]([])),(0,v.ZP)(e,2,41," storage key: "+t+", "+(0,w.lL)(n)+". Buffer cleared",{exception:(0,b.m)(n)})}}s[K]>l[yn]&&(s[K]=l[yn]),f(l[gn],[]),f(l[mn],s),n[tn]=function(u){n[un]()>=l[yn]?o||((0,v.ZP)(e,2,67,"Maximum buffer size reached: "+n[un](),!0),o=!0):(t[tn](u),f(l.BUFFER_KEY,n[en]()))},n[an]=function(){t[an](),f(l.BUFFER_KEY,n[en]()),f(l[gn],[]),o=!1},n[hn]=function(t){f(l[mn],n._set(d(t,n[en]())));var u=h(l[gn]);u instanceof Array&&t instanceof Array&&((u=u.concat(t))[K]>l[yn]&&((0,v.ZP)(e,1,67,"Sent buffer reached its maximum size: "+u[K],!0),u[K]=l[yn]),f(l[gn],u))},n[fn]=function(n){var e=h(l[gn]);e=d(n,e),f(l[gn],e)},n[dn]=function(t,u,r){r=!!r;var o=n[en]().slice(0),i=h(l[gn]).slice(0);t=t||e,u=u||{},n[an]();var s=r?new l(t,u):new rl(t,u);return(0,_.I)(o,(function(n){s[tn](n)})),r&&s[hn](i),s}})),r}return(0,u.qU)(l,n),l.BUFFER_KEY="AI_buffer",l.SENT_BUFFER_KEY="AI_sentBuffer",l.MAX_BUFFER_SIZE=2e3,l}(ul),il=function(){function n(l){(0,t.A)(n,this,(function(n){function e(n,r){var o="__aiCircularRefCheck",i={};if(!n)return(0,v.ZP)(l,1,48,"cannot serialize object because it is null or undefined",{name:r},!0),i;if(n[o])return(0,v.ZP)(l,2,50,"Circular reference detected while serializing object",{name:r},!0),i;if(!n.aiDataContract){if("measurements"===r)i=u(n,"number",r);else if("properties"===r)i=u(n,"string",r);else if("tags"===r)i=u(n,"string",r);else if((0,T.cy)(n))i=t(n,r);else{(0,v.ZP)(l,2,49,"Attempting to serialize an object which does not implement ISerializable",{name:r},!0);try{(0,k.hm)()[X](n),i=n}catch(n){(0,v.ZP)(l,1,48,n&&(0,T.Tn)(n[Q])?n[Q]():"Error serializing object",null,!0)}}return i}return n[o]=!0,(0,H.z)(n.aiDataContract,(function(u,o){var s=(0,T.Tn)(o)?1&o():1&o,a=(0,T.Tn)(o)?4&o():4&o,c=2&o,d=void 0!==n[u],h=(0,T.Gv)(n[u])&&null!==n[u];if(!s||d||c){if(!a){var f;void 0!==(f=h?c?t(n[u],u):e(n[u],u):n[u])&&(i[u]=f)}}else(0,v.ZP)(l,1,24,"Missing required field specification. The field is required but not present on source",{field:u,name:r})})),delete n[o],i}function t(n,t){var u;if(n)if((0,T.cy)(n)){u=[];for(var r=0;r<n[K];r++){var o=e(n[r],t+"["+r+"]");u[on](o)}}else(0,v.ZP)(l,1,54,"This field was specified as an array in the contract but the item is not an array.\r\n",{name:t},!0);return u}function u(n,e,t){var u;return n&&(u={},(0,H.z)(n,(function(n,r){if("string"===e)void 0===r?u[n]="undefined":null===r?u[n]="null":r[Q]?u[n]=r[Q]():u[n]="invalid field: toString() is not defined.";else if("number"===e)if(void 0===r)u[n]="undefined";else if(null===r)u[n]="null";else{var o=parseFloat(r);isNaN(o)?u[n]="NaN":u[n]=o}else u[n]="invalid field: "+t+" is of unknown type.",(0,v.ZP)(l,1,u[n],null,!0)}))),u}n.serialize=function(n){var t=e(n,"root");try{return(0,k.hm)()[X](t)}catch(n){(0,v.ZP)(l,1,48,n&&(0,T.Tn)(n[Q])?n[Q]():"Error serializing object",null,!0)}}}))}return n.__ieDyn=1,n}(),sl=e(8596),al=function(){function n(){}return n.prototype.getHashCodeScore=function(l){return this.getHashCode(l)/n.INT_MAX_VALUE*100},n.prototype.getHashCode=function(n){if(""===n)return 0;for(;n[K]<8;)n=n.concat(n);for(var l=5381,e=0;e<n[K];++e)l=(l<<5)+l+n.charCodeAt(e),l|=0;return Math.abs(l)},n.INT_MAX_VALUE=2147483647,n}(),cl=function(){var n=new al,l=new sl.o;this[Un]=function(e){return e[q]&&e[q][l.userId]?n.getHashCodeScore(e[q][l.userId]):e.ext&&e.ext.user&&e.ext.user.id?n.getHashCodeScore(e.ext.user.id):e[q]&&e[q][l.operationId]?n.getHashCodeScore(e[q][l.operationId]):e.ext&&e.ext.telemetryTrace&&e.ext.telemetryTrace[G]?n.getHashCodeScore(e.ext.telemetryTrace[G]):100*Math.random()}},dl=function(){function n(n,l){this.INT_MAX_VALUE=2147483647;var e=l||(0,v.y0)(null);(n>100||n<0)&&(e.throwInternal(2,58,"Sampling rate is out of range (0..100). Sampling will be disabled, you may be sending too much data which may affect your AI service level.",{samplingRate:n},!0),n=100),this[Fn]=n,this.samplingScoreGenerator=new cl}return n.prototype.isSampledIn=function(n){var l=this[Fn];return null==l||l>=100||n.baseType===d.J[Z]||this.samplingScoreGenerator[Un](n)<l},n}(),hl=void 0;function fl(n){try{return n.responseText}catch(n){}return null}var pl=(0,I.ZH)(((ll={endpointUrl:(0,y.Lx)(T.zz,r._G+r.wc)})[sn]=(0,y.DD)(),ll[On]=15e3,ll[Dn]=102400,ll.disableTelemetry=(0,y.DD)(),ll[xn]=(0,y.DD)(!0),ll.isRetryDisabled=(0,y.DD)(),ll[_n]=(0,y.DD)(!0),ll.disableXhr=(0,y.DD)(),ll[Pn]=(0,y.DD)(),ll[En]=(0,y.DD)(),ll[In]=hl,ll.namePrefix=hl,ll.samplingPercentage=(0,y.Lx)((function(n){return!isNaN(n)&&n>0&&n<=100}),100),ll[Cn]=hl,ll[An]=hl,ll[rn]=1e4,ll[pn]=!1,ll.httpXHROverride={isVal:function(n){return n&&n[vn]},v:hl},ll[kn]=(0,y.DD)(),ll)),ml=((el={})[o.J.dataType]=Qn,el[i.C.dataType]=function(n,l,e){Zn(n,l);var t=l[Wn].message,u=l[Wn].severityLevel,r=l[Wn][zn]||{},o=l[Wn][J]||{};Kn(l[z],r,o),(0,T.hX)(e)||Xn(r,e);var s=new i.C(n,t,u,r,o),a=new B.B(i.C[Z],s);return Jn(n,i.C[Y],l,a)},el[s.h.dataType]=function(n,l,e){var t;Zn(n,l);var u=l[Wn];(0,T.hX)(u)||(0,T.hX)(u[zn])||(0,T.hX)(u[zn][U])?(0,T.hX)(l[z])||(0,T.hX)(l[z][U])||(t=l[z][U],delete l[z][U]):(t=u[zn][U],delete u[zn][U]);var r,o=l[Wn];((l.ext||{}).trace||{})[G]&&(r=l.ext.trace[G]);var i=o.id||r,a=o[V],c=o.uri,d=o[zn]||{},h=o[J]||{};if((0,T.hX)(o.refUri)||(d.refUri=o.refUri),(0,T.hX)(o.pageType)||(d.pageType=o.pageType),(0,T.hX)(o.isLoggedIn)||(d.isLoggedIn=o.isLoggedIn[Q]()),!(0,T.hX)(o[zn])){var f=o[zn];(0,H.z)(f,(function(n,l){d[n]=l}))}Kn(l[z],d,h),(0,T.hX)(e)||Xn(d,e);var p=new s.h(n,a,c,t,d,h,i),m=new B.B(s.h[Z],p);return Jn(n,s.h[Y],l,m)},el[a.H.dataType]=function(n,l,e){Zn(n,l);var t=l[Wn],u=t[V],r=t.uri||t.url,o=t[zn]||{},i=t[J]||{};Kn(l[z],o,i),(0,T.hX)(e)||Xn(o,e);var s=new a.H(n,u,r,void 0,o,i,t),c=new B.B(a.H[Z],s);return Jn(n,a.H[Y],l,c)},el[c.WJ.dataType]=function(n,l,e){Zn(n,l);var t=l[Wn][J]||{},u=l[Wn][zn]||{};Kn(l[z],u,t),(0,T.hX)(e)||Xn(u,e);var r=l[Wn],o=c.WJ.CreateFromInterface(n,r,u,t),i=new B.B(c.WJ[Z],o);return Jn(n,c.WJ[Y],l,i)},el[d.J.dataType]=function(n,l,e){Zn(n,l);var t=l[Wn],u=t[zn]||{},r=t[J]||{};Kn(l[z],u,r),(0,T.hX)(e)||Xn(u,e);var o=new d.J(n,t[V],t.average,t.sampleCount,t.min,t.max,t.stdDev,u,r),i=new B.B(d.J[Z],o);return Jn(n,d.J[Y],l,i)},el[h.A.dataType]=function(n,l,e){Zn(n,l);var t=l[Wn][J]||{},u=l[Wn][zn]||{};Kn(l[z],u,t),(0,T.hX)(e)||Xn(u,e);var o=l[Wn];if((0,T.hX)(o))return(0,v.OG)(n,"Invalid input for dependency data"),null;var i=o[zn]&&o[zn][r.ym]?o[zn][r.ym]:"GET",s=new h.A(n,o.id,o.target,o[V],o[U],o.success,o.responseCode,i,o.type,o.correlationContext,u,t),a=new B.B(h.A[Z],s);return Jn(n,h.A[Y],l,a)},el),gl=function(n){function l(){var e,u,o,i,s,a,c,d=n.call(this)||this;d.priority=1001,d.identifier=f.BreezeChannelIdentifier;var h,y,O,j,M,N,B,H,U,W,V,G,X,J,Z,Y,Q,en,rn,sn,mn,gn=0;return(0,t.A)(l,d,(function(n,t){function f(n,l){for(var e,t=null,u=null,r=0;null==u&&r<n[K];)t=n[r],rn||1!==t?2===t&&(0,k.R7)(l)?u=Wn:(0,k.Uf)()&&3===t&&(u=Zn):(0,k.PV)()?u=ml:(0,k.xk)()&&(u=Yn),r++;return u?((e={})[vn]=u,e):null}function yn(l,e,t,u){200===e&&l&&n._onSuccess(l,l[K]),u&&n[Ln](l,u)}function Un(l,e,t){var u=qn(e),r=l&&l[vn];return r&&u?(n._buffer[hn](e),r(u,(function(n,l,t){return yn(e,n,0,t)}),!t)):null}function qn(l){var e;if((0,T.cy)(l)&&l[K]>0){var t=n._buffer[cn](l);return(e={})[z]=t,e.urlString=j,e.headers=c,e.disableXhrSync=rn,e.disableFetchKeepAlive=!sn,e[Nn]=l,e}return null}function Wn(n,l,e){return ll(n,l,!1)}function zn(l){var e=l?l[K]:0;return n[Tn].size()+e>N&&(y&&!y[ln]()||n[wn](!0,null,10),!0)}function Vn(l,t,u,r,o,i){var s=null;if(n._appId||(s=el(i))&&s.appId&&(n._appId=s.appId),(l<200||l>=300)&&0!==l){if((301===l||307===l||308===l)&&!Gn(u))return void n[Ln](t,o);!G&&al(l)?(tl(t),(0,v.ZP)(n[bn](),2,40,". Response code "+l+". Will retry to send "+t[K]+" items.")):n[Ln](t,o)}else y&&!y[ln]()?G||(tl(t,10),(0,v.ZP)(n[bn](),2,40,". Offline - Response Code: ".concat(l,". Offline status: ").concat(!y.isOnline(),". Will retry to send ").concat(t.length," items."))):(Gn(u),206===l?(s||(s=el(i)),s&&!G?n[$n](t,s):n[Ln](t,o)):(e=0,n[jn](t,r)))}function Gn(n){return!(a>=10||(0,T.hX)(n)||""===n||n===j||(j=n,++a,0))}function Kn(n,l,e,t){try{n(l,e,t)}catch(n){}}function Xn(n,l){h?h(n,!1):Zn(qn(n),(function(l,e,t){return yn(n,l,0,t)}))}function Jn(n,l){var e=(0,P.w3)(),t=j,u=new Blob([n],{type:"text/plain;charset=UTF-8"}),r=e.sendBeacon(t,u);return r&&l(200,{},n),r}function Zn(l,e,t){var u=l,r=u&&u[z];if((0,T.Kg)(r)&&r[K]>0&&!Jn(r,e)){var o=[];if(u[Nn][K]>0)for(var i=0;i<r[K];i++){var s=l[i];Jn(n._buffer[cn](s),e)||o[on](s)}o[K]>0&&(mn&&mn(o,!0),(0,v.ZP)(n[bn](),2,40,". Failed to send telemetry with Beacon API, retried with normal sender."))}}function Yn(l,e,t){var u,o,i,s=l,a=new XMLHttpRequest,d=j;try{a[r.xF]=!0}catch(n){}return a.open("POST",d,!t),a[Bn]("Content-type","application/json"),(0,m.Qu)(d)&&a[Bn](g.a[6],g.a[7]),(0,_.I)((0,I.cG)(c),(function(n){a[Bn](n,c[n])})),a.onreadystatechange=function(){var l=s[Nn];n._xhrReadyStateChange(a,l,l[K]),4===a.readyState&&o&&o(!0)},a.onerror=function(n){Kn(e,400,{},cl(a)),i&&i(n)},!t&&Q&&(u=(0,R.Qo)((function(n,l){o=n,i=l}))),a.send(l[z]),u}function Qn(l,e){var t=function(n,e,t){return yn(l,n,0,t)};if((0,T.cy)(l)){for(var u=l[K],r=0;r<l[K];r++)u+=l[r][K];var o=qn(l);gn+u<=65e3?ll(o,t,!0):(0,k.Uf)()?Zn(o,t):(mn&&mn(l,!0),(0,v.ZP)(n[bn](),2,40,". Failed to send telemetry with Beacon API, retried with xhrSender."))}}function ll(n,l,e){var t,u,o,i,s=j,a=n,d=a[z],h=new Blob([d],{type:"application/json"}),f=new Headers,p=d[K],y=!1,v=!1;(0,m.Qu)(s)&&f.append(g.a[6],g.a[7]),(0,_.I)((0,I.cG)(c),(function(n){f.append(n,c[n])}));var w=((t={method:"POST",headers:f,body:h})[r.xF]=!0,t);e&&(w.keepalive=!0,y=!0,gn+=p);var S=new Request(s,w);try{S[r.xF]=!0}catch(n){}!e&&Q&&(u=(0,R.Qo)((function(n,l){o=n,i=l})));try{(0,F.Dv)(fetch(S),(function(n){if(e&&(gn-=p,p=0),!v)if(v=!0,n.rejected)Kn(l,400,{},n.reason&&n.reason.message),i&&i(n.reason);else{var t=n.value;t.ok?(0,F.Dv)(t.text(),(function(n){var l=a[Nn];Vn(t.status,l,t.url,l[K],t.statusText,n.value||""),o&&o(!0)})):(Kn(l,400,{},t.statusText),o&&o(!1))}}))}catch(n){v||(Kn(l,400,{},(0,b.m)(n)),i&&i(n))}return y&&!v&&(v=!0,Kn(l,200,{}),o&&o(!0)),u}function el(l){try{if(l&&""!==l){var e=(0,k.hm)().parse(l);if(e&&e.itemsReceived&&e.itemsReceived>=e[Mn]&&e.itemsReceived-e.itemsAccepted===e.errors[K])return e}}catch(e){(0,v.ZP)(n[bn](),1,43,"Cannot parse the response. "+(0,w.lL)(e),{response:l})}return null}function tl(l,t){if(void 0===t&&(t=1),l&&0!==l[K]){var r=n[Tn];r[fn](l),e++;for(var o=0,i=l;o<i.length;o++){var s=i[o];r[tn](s)}!function(n){var l;if(e<=1)l=10;else{var t=(Math.pow(2,e)-1)/2,r=Math.floor(Math.random()*t*10)+1;r*=n,l=Math.max(Math.min(r,3600),10)}var o=(0,A.f)()+1e3*l;u=o}(t),ul()}}function ul(){if(!i&&!o){var l=u?Math.max(0,u-(0,A.f)()):0,e=Math.max(X,l);i=(0,$.dR)((function(){i=null,n[wn](!0,null,1)}),e)}}function sl(){i&&i.cancel(),i=null,u=null}function al(n){return 401===n||403===n||408===n||429===n||500===n||502===n||503===n||504===n}function cl(n,l){return n?"XMLHttpRequest,Status:"+n.status+",Response:"+fl(n)||0:l}function ml(l,e,t){var u=l,r=(0,P.zk)(),o=new XDomainRequest,i=u[z];o.onload=function(){var l=u[Nn];n._xdrOnLoad(o,l)},o.onerror=function(){Kn(e,400,{},gl(o))};var s=r&&r.location&&r.location.protocol||"";if(0!==j.lastIndexOf(s,0))return(0,v.ZP)(n[bn](),2,40,". Cannot send XDomain request. The endpoint URL protocol doesn't match the hosting page protocol."),void n._buffer[an]();var a=j.replace(/^(https?:)/,"");o.open("POST",a),o.send(i)}function gl(n,l){return n?"XDomainRequest,Response:"+fl(n)||0:l}function yl(){n[Sn]=null,n[Tn]=null,n._appId=null,n._sample=null,c={},y=null,e=0,u=null,o=!1,i=null,s=null,a=0,gn=0,h=null,O=null,j=null,M=null,N=0,B=!1,H=null,U=!1,W=null,V=hl,G=!1,J=null,Y=hl,rn=!1,sn=!1,mn=null,(0,L.vF)(n,"_senderConfig",{g:function(){return(0,w.CP)({},pl)}})}yl(),n.pause=function(){sl(),o=!0},n.resume=function(){o&&(o=!1,u=null,zn(),ul())},n.flush=function(l,e,t){if(void 0===l&&(l=!0),!o){sl();try{return n[wn](l,null,t||1)}catch(l){(0,v.ZP)(n[bn](),1,22,"flush failed, telemetry will not be collected: "+(0,w.lL)(l),{exception:(0,b.m)(l)})}}},n.onunloadFlush=function(){if(!o)if(B||en)try{return n[wn](!0,Xn,2)}catch(l){(0,v.ZP)(n[bn](),1,20,"failed to flush with beacon sender on page unload, telemetry will not be collected: "+(0,w.lL)(l),{exception:(0,b.m)(l)})}else n.flush(!1)},n.addHeader=function(n,l){c[n]=l},n.initialize=function(l,r,o,i){n.isInitialized()&&(0,v.ZP)(n[bn](),1,28,"Sender is already initialized"),t.initialize(l,r,o,i);var g=n.identifier;s=new il(r.logger),e=0,u=null,n[Sn]=null,a=0;var x=n[bn]();O=(0,S.Hm)((0,C.Z)("Sender"),r.evtNamespace&&r.evtNamespace()),y=function(n){var l,e=(0,P.YE)(),t=(0,P.w3)(),u=!1,r=!0,o=(0,S.Hm)((0,C.Z)("OfflineListener"),n);try{if(s((0,P.zk)())&&(u=!0),e){var i=e.body||e;i.ononline&&s(i)&&(u=!0)}u&&t&&!(0,T.hX)(t[nn])&&(r=t[nn])}catch(n){u=!1}function s(n){var l=!1;return n&&(l=(0,S.mB)(n,"online",a,o))&&(0,S.mB)(n,"offline",c,o),l}function a(){r=!0}function c(){r=!1}return(l={})[ln]=function(){var n=!0;return u?n=r:t&&!(0,T.hX)(t[nn])&&(n=t[nn]),n},l.isListening=function(){return u},l.unload=function(){var n=(0,P.zk)();if(n&&u){if(nl(n,o),e){var l=e.body||e;(0,T.b0)(l.ononline)||nl(l,o)}u=!1}},l}(O),n._addHook((0,D.a)(l,(function(l){var e=l.cfg;e.storagePrefix&&(0,p.vh)(e.storagePrefix);var t=(0,E.i8)(null,e,r).getExtCfg(g,pl);(0,L.vF)(n,"_senderConfig",{g:function(){return t}}),M!==t.endpointUrl&&(j=M=t.endpointUrl),H&&H!==t[Cn]&&(0,_.I)(H,(function(n){delete c[n.header]})),N=t[Dn],B=(!1===t[En]||!1===t[_n])&&(0,k.Uf)(),en=t[kn],rn=!!t.disableXhr;var u=t[pn],o=!!t[xn]&&(!!u||(0,p.AN)()),i=t.namePrefix,s=o!==J||o&&Y!==i||o&&Z!==u;if(n[Tn]){if(s)try{n._buffer=n._buffer[dn](x,t,o)}catch(l){(0,v.ZP)(n[bn](),1,12,"failed to transfer telemetry to different buffer storage, telemetry will be lost: "+(0,w.lL)(l),{exception:(0,b.m)(l)})}zn()}else n[Tn]=o?new ol(x,t):new rl(x,t);Y=i,J=o,Z=u,sn=!t[Pn]&&(0,k.R7)(!0),n._sample=new dl(t.samplingPercentage,x),function(n,l){var e=l.disableInstrumentationKeyValidation;return!((0,T.hX)(e)||!e)||new RegExp("^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$").test(n)}(W=t[In],e)||(0,v.ZP)(x,1,100,"Invalid Instrumentation key "+W),H=t[Cn],!(0,m.Qu)(j)&&H&&H[K]>0?(0,_.I)(H,(function(n){d.addHeader(n.header,n.value)})):H=null,Q=t.enableSendPromise;var a,y=t.httpXHROverride,S=null;S=f([1,2],!1);var C={sendPOST:Yn};mn=function(n,l){return Un(C,n,l)},!t[_n]&&(0,k.Uf)()&&(S=f([3],!1)),S=en?y:S||y||C,n[Sn]=function(n,l){return Un(S,n,l)},sn&&(h=Qn),a=en?y:f([3,1],!0)||y,!en&&h||!a||(h=function(n,l){return Un(a,n,l)}),h||(h=mn),U=t.disableTelemetry,V=t[An]||hl,G=t.isRetryDisabled,X=t[On]})))},n.processTelemetry=function(e,t){var u,o=(t=n._getTelCtx(t))[bn]();try{if(U)return;if(!e)return void(0,v.ZP)(o,1,7,"Cannot send empty telemetry");if(e.baseData&&!e[Rn])return void(0,v.ZP)(o,1,70,"Cannot send telemetry without baseData and baseType");if(e[Rn]||(e[Rn]="EventData"),!n[Sn])return void(0,v.ZP)(o,1,28,"Sender was not initialized");if(u=e,!n._sample.isSampledIn(u))return void(0,v.ZP)(o,2,33,"Telemetry item was sampled out and not sent",{SampleRate:n._sample[Fn]});e[r.tU]=n._sample[Fn];var i=e.iKey||W,a=l.constructEnvelope(e,i,o,V);if(!a)return void(0,v.ZP)(o,1,47,"Unable to create an AppInsights envelope");var c=!1;if(e[q]&&e[q][r.jp]&&((0,_.I)(e[q][r.jp],(function(n){try{n&&!1===n(a)&&(c=!0,(0,v.OG)(o,"Telemetry processor check returns false"))}catch(n){(0,v.ZP)(o,1,64,"One of telemetry initializers failed, telemetry item will not be sent: "+(0,w.lL)(n),{exception:(0,b.m)(n)},!0)}})),delete e[q][r.jp]),c)return;var d=s.serialize(a),h=n[Tn];zn(d),h[tn](d),ul()}catch(n){(0,v.ZP)(o,2,12,"Failed adding telemetry to the sender's buffer, some telemetry will be lost: "+(0,w.lL)(n),{exception:(0,b.m)(n)})}n.processNext(e,t)},n._xhrReadyStateChange=function(n,l,e){4===n.readyState&&Vn(n.status,l,n.responseURL,e,cl(n),fl(n)||n.response)},n[wn]=function(l,e,t){var u;if(void 0===l&&(l=!0),!o)try{var r=n[Tn];if(U)r[an]();else{if(r[un]()>0){var i=r.getItems();!function(l,e){var t,u=(t="getNotifyMgr",n.core[t]?n.core[t]():n.core._notificationManager);if(u&&u[Hn])try{u[Hn](l,e)}catch(l){(0,v.ZP)(n[bn](),1,74,"send request notification failed: "+(0,w.lL)(l),{exception:(0,b.m)(l)})}}(t||0,l),u=e?e.call(n,i,l):n[Sn](i,l)}new Date}sl()}catch(l){var s=(0,k.L0)();(!s||s>9)&&(0,v.ZP)(n[bn](),1,40,"Telemetry transmission failed, some telemetry will be lost: "+(0,w.lL)(l),{exception:(0,b.m)(l)})}return u},n._doTeardown=function(l,e){n.onunloadFlush(),(0,x.K)(y,!1),yl()},n[Ln]=function(l,e,t){(0,v.ZP)(n[bn](),2,26,"Failed to send telemetry.",{message:e}),n._buffer&&n._buffer[fn](l)},n[$n]=function(l,e){for(var t=[],u=[],r=0,o=e.errors.reverse();r<o.length;r++){var i=o[r],s=l.splice(i.index,1)[0];al(i.statusCode)?u[on](s):t[on](s)}l[K]>0&&n[jn](l,e[Mn]),t[K]>0&&n[Ln](t,cl(null,["partial success",e[Mn],"of",e.itemsReceived].join(" "))),u[K]>0&&(tl(u),(0,v.ZP)(n[bn](),2,40,"Partial success. Delivered: "+l[K]+", Failed: "+t[K]+". Will retry to send "+u[K]+" our of "+e.itemsReceived+" items"))},n[jn]=function(l,e){n._buffer&&n._buffer[fn](l)},n._xdrOnLoad=function(l,t){var u=fl(l);if(!l||u+""!="200"&&""!==u){var r=el(u);r&&r.itemsReceived&&r.itemsReceived>r[Mn]&&!G?n[$n](t,r):n[Ln](t,gl(l))}else e=0,n[jn](t,0)}})),d}return(0,u.qU)(l,n),l.constructEnvelope=function(n,l,e,t){var r;return r=l===n.iKey||(0,T.hX)(l)?n:(0,u.Im)((0,u.Im)({},n),{iKey:l}),(ml[r.baseType]||Qn)(e,r,t)},l}(O.s),yl=e(4484),vl=e(9379),wl=e(3517),bl="instrumentationKey",Sl="connectionString",Cl=e(9762),Dl={diagnosticLogInterval:(0,y.Lx)((function(n){return n&&n>0}),1e4)},El=function(){function n(l){var e,u=new vl._;function o(n){n&&(n.baseData=n.baseData||{},n.baseType=n.baseType||"EventData"),u.track(n)}((0,T.hX)(l)||(0,T.hX)(l[bl])&&(0,T.hX)(l[Sl]))&&(0,wl.$8)("Invalid input configuration"),(0,t.A)(n,this,(function(n){function t(){var n=(0,D.e)(l||{},Dl);e=n.cfg,u.addUnloadHook((0,D.a)(n,(function(){if(e[Sl]){var n=(0,yl.H)(e[Sl]),l=n.ingestionendpoint;e.endpointUrl=l?l+r.wc:e.endpointUrl,e[bl]=n.instrumentationkey||e[bl]}}))),u.initialize(e,[new gl])}(0,L.vF)(n,"config",{g:function(){return e}}),t(),n.initialize=t,n.track=o,(0,w.o$)(n,u,["flush","pollInternalLogs","stopPollingInternalLogs","unload","getPlugin","addPlugin","evtNamespace","addUnloadCb","onCfgChange"])}))}return n.__ieDyn=1,n}()},8279:(n,l,e)=>{"use strict";e.d(l,{A:()=>M});var t,u=e(3076),r=e(3266),o=e(3517),i="constructor",s="prototype",a="function",c="_dynInstFuncs",d="_isDynProxy",h="_dynClass",f="_dynCls$",p="_dynInstChk",m=p,g="_dfOpts",y="_unknown_",v="__proto__",w="_dyn"+v,b="__dynProto$Gbl",S="_dynInstProto",C="useBaseInst",D="setInstFuncs",E=Object,_=E.getPrototypeOf,k=E.getOwnPropertyNames,x=(0,u.mS)(),T=x[b]||(x[b]={o:(t={},t[D]=!0,t[C]=!0,t),n:1e3});function P(n){return n&&(n===E[s]||n===Array[s])}function I(n){return P(n)||n===Function[s]}function A(n){var l;if(n){if(_)return _(n);var e=n[v]||n[s]||(n[i]?n[i][s]:null);l=n[w]||e,(0,r.v)(n,w)||(delete n[S],l=n[w]=n[S]||n[w],n[S]=e)}return l}function O(n,l){var e=[];if(k)e=k(n);else for(var t in n)"string"==typeof t&&(0,r.v)(n,t)&&e.push(t);if(e&&e.length>0)for(var u=0;u<e.length;u++)l(e[u])}function R(n,l,e){return l!==i&&typeof n[l]===a&&(e||(0,r.v)(n,l))}function F(n){(0,o.zk)("DynamicProto: "+n)}function L(n,l){for(var e=n.length-1;e>=0;e--)if(n[e]===l)return!0;return!1}function $(n,l,e,t,u){if(!P(n)){var o=e[c]=e[c]||{},i=o[l]=o[l]||{};!1!==o[m]&&(o[m]=!!u),O(e,(function(l){R(e,l,!1)&&e[l]!==t[l]&&(i[l]=e[l],delete e[l],(!(0,r.v)(n,l)||n[l]&&!n[l][d])&&(n[l]=function(n,l){var e=function(){var t=function(n,l,e,t){var u=null;if(n&&(0,r.v)(e,h)){var o=n[c]||{};if((u=(o[e[h]]||{})[l])||F("Missing ["+l+"] "+a),!u[p]&&!1!==o[m]){for(var i=!(0,r.v)(n,l),s=A(n),d=[];i&&s&&!I(s)&&!L(d,s);){var f=s[l];if(f){i=f===t;break}d.push(s),s=A(s)}try{i&&(n[l]=u),u[p]=1}catch(n){o[m]=!1}}}return u}(this,l,n,e)||function(n,l,e){var t=l[n];return t===e&&(t=A(l)[n]),typeof t!==a&&F("["+n+"] is not a "+a),t}(l,n,e);return t.apply(this,arguments)};return e[d]=1,e}(n,l)))}))}}function j(n,l){return(0,r.v)(n,s)?n.name||l||y:((n||{})[i]||{}).name||l||y}function M(n,l,e,t){(0,r.v)(n,s)||F("theClass is an invalid class definition.");var u=n[s];(function(n,l){if(_){for(var e=[],t=A(l);t&&!I(t)&&!L(e,t);){if(t===n)return!0;e.push(t),t=A(t)}return!1}return!0})(u,l)||F("["+j(n)+"] not in hierarchy of ["+j(l)+"]");var o=null;(0,r.v)(u,h)?o=u[h]:(o=f+j(n,"_")+"$"+T.n,T.n++,u[h]=o);var i=M[g],a=!!i[C];a&&t&&void 0!==t[C]&&(a=!!t[C]);var p=function(n){var l={};return O(n,(function(e){!l[e]&&R(n,e,!1)&&(l[e]=n[e])})),l}(l),y=function(n,l,e,t){function u(n,l,e){var u=l[e];if(u[d]&&t){var r=n[c]||{};!1!==r[m]&&(u=(r[l[h]]||{})[e]||u)}return function(){return u.apply(n,arguments)}}var r={};O(e,(function(n){r[n]=u(l,e,n)}));for(var o=A(n),i=[];o&&!I(o)&&!L(i,o);)O(o,(function(n){!r[n]&&R(o,n,!_)&&(r[n]=u(l,o,n))})),i.push(o),o=A(o);return r}(u,l,p,a);e(l,y);var v=!!_&&!!i[D];v&&t&&(v=!!t[D]),$(u,o,l,p,!1!==v)}M[g]=T.o},4292:(n,l,e)=>{"use strict";e.d(l,{Dv:()=>u,yN:()=>r});var t=e(6668);function u(n,l){return r(n,(function(n){l&&l({value:n,rejected:!1})}),(function(n){l&&l({rejected:!0,reason:n})}))}function r(n,l,e,u){var r=n;return(0,t.$X)(n)?(l||e)&&(r=n.then(l,e)):l&&l(n),u&&(r=function(n,l){var e=n;return l&&((0,t.$X)(n)?e=n.finally?n.finally(l):n.then((function(n){return l(),n}),(function(n){throw l(),n})):l()),e}(r,u)),r}},636:(n,l,e)=>{"use strict";e.d(l,{Xf:()=>N,Qo:()=>M});var t,u,r,o,i,s=e(2871),a=e(6668),c=e(8693),d=e(755),h=e(3076),f=e(6874),p=e(6336),m=e(7403),g=e(3517),y=e(5439),v=e(4292),w=!1,b=["pending","resolving","resolved","rejected"],S=e(8965),C="dispatchEvent",D="Promise",E="unhandledRejection",_=E.toLowerCase(),k=[],x=0,T=10;function P(n){return(0,a.Tn)(n)?n.toString():(0,c.m)(n)}function I(n){return function(l){var e=(0,d.K)(arguments,1);return n((function(n,e){try{var t=[],u=1;(0,y.I)(l,(function(l,r){l&&(u++,(0,v.yN)(l,(function(l){t[r]=l,0==--u&&n(t)}),e))})),0==--u&&n(t)}catch(n){e(n)}}),e)}}function A(n){return function(l){var e=(0,d.K)(arguments,1);return(0,a.$X)(l)?l:n((function(n){n(l)}),e)}}function O(n){return function(l){var e=(0,d.K)(arguments,1);return n((function(n,e){e(l)}),e)}}var R,F,L=function(n){(0,y.I)(n,(function(n){try{n()}catch(n){}}))};function $(n,l){return function(n,l,e){var s,y,v=(0,d.K)(arguments,3),I=0,A=!1,O=[],R=x++,F=k.length>0?k[k.length-1]:void 0,L=!1,$=null;!i&&(i=(0,h.O7)(D+"RejectionEvent"));var j,M,N,B,H=function(l,e){try{return k.push(R),L=!0,$&&$.cancel(),$=null,n((function(n,t){O.push((function(){try{var u=2===I?l:e,r=(0,a.b0)(u)?s:(0,a.Tn)(u)?u(s):u;(0,a.$X)(r)?r.then(n,t):u?n(r):3===I?t(r):n(r)}catch(n){t(n)}})),A&&q()}),v)}finally{k.pop()}},U=function(){return b[I]},q=function(){if(O.length>0){var n=O.slice();O=[],L=!0,l(n),$&&$.cancel(),$=null}},W=function(n,l){return function(e){if(I===l){if(2===n&&(0,a.$X)(e))return I=1,void e.then(W(2,1),W(3,1));I=n,A=!0,s=e,q(),L||3!==n||$||($=(0,f.dR)(z,T))}}},z=function(){L||((0,h.Ll)()?process.emit(E,s,y):function(n,l,e,t){var u=(0,h.YE)();!o&&(o=(0,S.I)((function(){var n;return u&&u.createEvent&&(n=u.createEvent("Event")),!!n&&n.initEvent}),null));var r=o.v?u.createEvent("Event"):t?new Event(l):{};if(e&&e(r),o.v&&r.initEvent(l,!1,!0),r&&n[C])n[C](r);else{var i=n["on"+l];if(i)i(r);else{var s=(0,h.zS)("console");s&&(s.error||s.log)(l,(0,c.m)(r))}}}((0,h.zk)()||(0,h.mS)(),_,(function(n){return(0,p.vF)(n,"promise",{g:function(){return y}}),n.reason=s,n}),!!i.v))};return y={then:H,catch:function(n){return H(void 0,n)},finally:function(n){var l=n,e=n;return(0,a.Tn)(n)&&(l=function(l){return n&&n(),l},e=function(l){throw n&&n(),l}),H(l,e)}},(0,p.Ux)(y,"state",{get:U}),w&&(j=y,M=U,N=function(){return(0,a.SZ)(s)},B=function(){return L},t=t||{toString:function(){return"[[PromiseState]]"}},u=u||{toString:function(){return"[[PromiseResult]]"}},r=r||{toString:function(){return"[[PromiseIsHandled]]"}},(0,p.Ux)(j,t,{get:M}),(0,p.Ux)(j,u,{get:N}),(0,p.Ux)(j,r,{get:B})),(0,m.Lo)()&&(y[(0,m.Y0)(11)]="IPromise"),y.toString=function(){return"IPromise"+(w?"["+R+((0,a.b0)(F)?"":":"+F)+"]":"")+" "+U()+(A?" - "+P(s):"")},function(){(0,a.Tn)(e)||(0,g.zk)(D+": executor is not a function - "+P(e));var n=W(3,0);try{e.call(y,W(2,0),n)}catch(l){n(l)}}(),y}($,function(n){var l=(0,a.Et)(n)?n:0;return function(n){(0,f.dR)((function(){L(n)}),l)}}(l),n,l)}function j(n,l){!R&&(R=(0,h.O7)(D));var e=R.v;if(!e)return $(n);(0,a.Tn)(n)||(0,g.zk)(D+": executor is not a function - "+(0,c.m)(n));var t=0,u=new e((function(l,e){n((function(n){t=2,l(n)}),(function(n){t=3,e(n)}))}));return(0,p.Ux)(u,"state",{get:function(){return b[t]}}),u}function M(n,l){return!F&&(F=(0,s.nR)((function(){return j}))),F.v.call(this,n,l)}I($),A($),O($),I(j),A(j),O(j);var N=I(M);A(M),O(M)},1187:(n,l,e)=>{"use strict";e.d(l,{Y:()=>c});var t=e(6668),u=e(7403);function r(n){return!!n&&(0,t.Tn)(n.next)}var o,i=e(2871),s=e(4016),a=e(655);function c(n,l){var e;return!(0,t.b0)(l)&&n&&((0,t.cy)(l)?(0,a.p)(n.push,n,l):r(l)||(e=l,!(0,t.kF)(e)&&(0,t.Tn)(e[(0,u.Y0)(3)]))?function(n,l){if(n&&(r(n)||(!o&&(o=(0,i.nR)((function(){return(0,u.Y0)(3)}))),n=n[o.v]?n[o.v]():null),r(n))){var e=void 0,t=void 0;try{for(var a=0;!(t=n.next())[s.DH]&&-1!==l.call(n,t[s.Qg],a,n);)a++}catch(l){e={e:l},n.throw&&(t=null,n.throw(e))}finally{try{t&&!t[s.DH]&&n.return&&n.return(t)}finally{if(e)throw e.e}}}}(l,(function(l){n.push(l)})):n.push(l)),n}},5439:(n,l,e)=>{"use strict";e.d(l,{I:()=>u});var t=e(4016);function u(n,l,e){if(n)for(var u=n[t.pi]>>>0,r=0;r<u&&(!(r in n)||-1!==l.call(e||n,n[r],r,n));r++);}},6832:(n,l,e)=>{"use strict";e.d(l,{r:()=>r});var t=e(4016),u=e(1742),r=(0,u.lK)(t.BA,t.wM);(0,u.lK)(t.uP,t.wM)},4335:(n,l,e)=>{"use strict";e.d(l,{W:()=>u});var t=e(4016),u=(0,e(1742).lK)("map",t.wM)},1011:(n,l,e)=>{"use strict";e.d(l,{K:()=>u});var t=e(4016),u=(0,e(1742).lK)("reduce",t.wM)},755:(n,l,e)=>{"use strict";e.d(l,{K:()=>u});var t=e(4016),u=(0,e(1742).lK)(t.$9,t.wM)},655:(n,l,e)=>{"use strict";e.d(l,{p:()=>t});var t=(0,e(1742).xC)("apply")},5683:(n,l,e)=>{"use strict";e.d(l,{n:()=>t});var t=(0,e(1742).xC)("call")},6668:(n,l,e)=>{"use strict";e.d(l,{$P:()=>w,$X:()=>D,Cb:()=>p,Ed:()=>a,Et:()=>b,Gv:()=>y,Kg:()=>m,Lm:()=>S,O9:()=>f,SZ:()=>s,Tn:()=>g,b0:()=>c,bJ:()=>C,cy:()=>v,ez:()=>o,hX:()=>d,kF:()=>h,wo:()=>E,zz:()=>_});var t=e(4016),u=e(8827),r=[t.An,t.uk,t.Jx,t.ZH,"symbol","bigint"];function o(n){return function(l){return typeof l===n}}function i(n){var l="[object "+n+"]";return function(n){return!(!n||s(n)!==l)}}function s(n){return t.Wy.toString.call(n)}function a(n,l){return typeof n===l}function c(n){return typeof n===t.ZH||n===t.ZH}function d(n){return n===t.M_||c(n)}function h(n){return n===t.M_||!f(n)}function f(n){return!!n||n!==t.DQ}var p=function(n){return n!==t.qv&&-1!==r.indexOf(n)},m=o(t.An),g=o(t.H3);function y(n){return!(!n&&d(n)||!n||typeof n!==t.qv)}var v=t.kV.isArray,w=i("Date"),b=o(t.uk),S=o(t.Jx),C=(i("RegExp"),i("File"),i("FormData"),i("Blob"),i("ArrayBuffer"),i("Error"));function D(n){return!!n&&g(n.then)}function E(n){return!n||!(0,u.y)((function(){return n&&0+n}),n)}function _(n){return!(!n||(0,u.y)((function(){return!(n&&0+n)}),!n))}},225:(n,l,e)=>{"use strict";function t(){return(Date.now||u)()}function u(){return(new Date).getTime()}e.d(l,{f:()=>t})},8693:(n,l,e)=>{"use strict";e.d(l,{m:()=>r});var t=e(4016),u=e(6668);function r(n,l){var e=t.wg;if((0,u.bJ)(n))e="{ stack: '"+n.stack+"', message: '"+n.message+"', name: '"+n.name+"'";else try{e=JSON.stringify(n,t.M_,l?(0,u.Et)(l)?l:4:t.DQ)}catch(n){e=" - "+r(n,l)}return(0,u.SZ)(n)+": "+e}},8040:(n,l,e)=>{"use strict";e.d(l,{WS:()=>o,Tm:()=>i,fn:()=>s});var t=e(9018);function u(n,l,e,u){var r={};return(0,t.z)(n,(function(n,t){r[n]=l?t:n,r[t]=e?t:n})),u(r)}var r=e(1324);function o(n){return u(n,1,0,r.ZH)}function i(n){return u(n,0,0,r.ZH)}function s(n){return function(n){var l={};return(0,t.z)(n,(function(n,e){l[n]=e[1],l[e[0]]=e[1]})),(0,r.ZH)(l)}(n)}},3076:(n,l,e)=>{"use strict";e.d(l,{JK:()=>E,Ll:()=>_,O7:()=>p,Vd:()=>w,Wt:()=>y,YE:()=>v,mS:()=>m,tw:()=>D,w3:()=>C,w9:()=>S,zS:()=>g,zk:()=>b});var t,u,r,o,i,s,a=e(4016),c=e(1382),d=e(8965),h=e(2871),f="window",p=function(n){return(0,d.I)((function(){return g(n)||a.DQ}),a.DQ)},m=function(n){return(!t||!1===n||h.nr&&h.nr.lzy&&!t.b)&&(t=(0,d.I)(c.u,a.M_)),t.v},g=function(n,l){var e=t&&!1!==l?t.v:m(l);return e&&e[n]?e[n]:n===f&&u?u.v:a.M_},y=function(){return!!v()},v=function(){return(!r||h.nr&&h.nr.lzy&&!r.b)&&(r=p("document")),r.v},w=function(){return!!b()},b=function(){return(!u||h.nr&&h.nr.lzy&&!u.b)&&(u=p(f)),u.v},S=function(){return!!C()},C=function(){return(!o||h.nr&&h.nr.lzy&&!o.b)&&(o=p("navigator")),o.v},D=function(){return!!E()},E=function(){return(!i||h.nr&&h.nr.lzy&&!i.b)&&(i=p("history")),i.v},_=function(){return!s&&(s=(0,d.I)((function(){return!(!process||!(process.versions||{}).node)}),!1)),s.v}},2871:(n,l,e)=>{"use strict";e.d(l,{nR:()=>s,nr:()=>t});var t,u=e(4016),r=e(1382),o=e(6336),i=function(){t=(0,r.Z)(),i=u.M_};function s(n){var l={};return i&&i(),l.b=t.lzy,(0,o.Ux)(l,"v",{configurable:!0,get:function(){var e=n();return t.lzy||((0,o.Ux)(l,"v",{value:e}),l.b&&delete l.b),t.lzy&&l.b!==t.lzy&&(l.b=t.lzy),e}}),l}},4657:(n,l,e)=>{"use strict";e.d(l,{R:()=>u});var t=e(4016),u=(0,e(1742).k5)(t.pi)},558:(n,l,e)=>{"use strict";e.d(l,{FJ:()=>i,UU:()=>s});var t,u=e(225),r=e(3076),o=e(2871);function i(){return(!t||!t.b&&o.nr&&o.nr.lzy)&&(t=(0,r.O7)("performance")),t.v}function s(){var n=i();return n&&n.now?n.now():(0,u.f)()}},8827:(n,l,e)=>{"use strict";function t(n,l){var e=l;try{e=n()}catch(n){}return e}e.d(l,{y:()=>t})},8965:(n,l,e)=>{"use strict";e.d(l,{I:()=>r});var t=e(2871),u=e(8827);function r(n,l){return(0,t.nR)((function(){return(0,u.y)(n,l)}))}},3517:(n,l,e)=>{"use strict";function t(n){throw new Error(n)}function u(n){throw new TypeError(n)}e.d(l,{$8:()=>t,zk:()=>u})},4016:(n,l,e)=>{"use strict";e.d(l,{$9:()=>D,An:()=>h,BA:()=>y,BB:()=>p,DH:()=>b,DQ:()=>t,Fs:()=>c,H3:()=>i,I3:()=>k,Jx:()=>o,M_:()=>u,PF:()=>m,Qg:()=>S,Wy:()=>_,ZH:()=>f,fL:()=>g,kV:()=>P,o_:()=>C,pi:()=>w,qv:()=>a,r5:()=>d,s6:()=>E,sW:()=>x,tq:()=>T,uP:()=>v,uk:()=>s,wM:()=>I,wg:()=>r});var t=void 0,u=null,r="",o="boolean",i="function",s="number",a="object",c="prototype",d="__proto__",h="string",f="undefined",p="constructor",m="Symbol",g="_polyfill",y="indexOf",v="lastIndexOf",w="length",b="done",S="value",C="name",D="slice",E=Object,_=E[c],k=String,x=k[c],T=Math,P=Array,I=P[c]},1382:(n,l,e)=>{"use strict";e.d(l,{Z:()=>i,u:()=>o});var t,u=e(4016),r="__tsUtils$gblCfg";function o(){var n;return typeof globalThis!==u.ZH&&(n=globalThis),n||typeof self===u.ZH||(n=self),n||typeof window===u.ZH||(n=window),n||typeof global===u.ZH||(n=global),n}function i(){if(!t){var n=o()||{};t=n[r]=n[r]||{}}return t}},1742:(n,l,e)=>{"use strict";e.d(l,{b2:()=>d,k5:()=>h,lK:()=>c,xC:()=>a});var t=e(8693),u=e(3517),r=e(5977),o=e(4016),i=o.wM[o.$9],s=function(n,l){(0,u.zk)("'"+(0,r.o)(n)+"' not defined for "+(0,t.m)(l))},a=function(n){return function(l){return l[n].apply(l,i.call(arguments,1))}},c=function(n,l){var e=l&&l[n];return function(l){var t=l&&l[n]||e;if(t)return t.apply(l,i.call(arguments,1));s(n,l)}},d=function(n,l,e){var t=l&&l[n];return function(l){var u=l&&l[n]||t;if(u||e){var r=arguments;return(u||e).apply(l,u?i.call(r,1):r)}s(n,l)}};function h(n){return function(l){return l[n]}}},411:(n,l,e)=>{"use strict";e.d(l,{s:()=>r});var t=e(4016),u=e(8693),r=t.s6.create||function(n){if(!n)return{};var l=typeof n;if(l!==t.qv&&l!==t.H3)throw new TypeError("Prototype must be an Object or function: "+(0,u.m)(n));function e(){}return e[t.Fs]=n,new e}},6336:(n,l,e)=>{"use strict";e.d(l,{Ux:()=>a,r:()=>c,vF:()=>d});var t=e(4016),u=e(6668),r=e(9018),o=e(695),i={e:"enumerable",c:"configurable",v:t.Qg,w:"writable",g:"get",s:"set"};function s(n){var l={};if(l[i.c]=!0,l[i.e]=!0,n.l){l.get=function(){return n.l.v};var e=(0,o.k)(n.l,"v");e&&e.set&&(l.set=function(l){n.l.v=l})}return(0,r.z)(n,(function(n,e){l[i[n]]=(0,u.b0)(e)?l[i[n]]:e})),l}var a=t.s6.defineProperty;function c(n,l,e,t,u,r){var o={e:r,c:u};return e&&(o.g=e),t&&(o.s=t),a(n,l,s(o))}function d(n,l,e){return a(n,l,s(e))}t.s6.defineProperties},9018:(n,l,e)=>{"use strict";e.d(l,{z:()=>r});var t=e(6668),u=e(9452);function r(n,l,e){if(n&&(0,t.Gv)(n))for(var r in n)if((0,u.K)(n,r)&&-1===l.call(e||n,r,n[r]))break}},695:(n,l,e)=>{"use strict";e.d(l,{k:()=>t});var t=e(4016).s6.getOwnPropertyDescriptor},9452:(n,l,e)=>{"use strict";e.d(l,{K:()=>o});var t=e(4016),u=e(695),r=e(3266),o=t.s6.hasOwn||function(n,l){return(0,r.v)(n,l)||!!(0,u.k)(n,l)}},3266:(n,l,e)=>{"use strict";e.d(l,{v:()=>u});var t=e(4016);function u(n,l){return n&&t.Wy.hasOwnProperty.call(n,l)}},7460:(n,l,e)=>{"use strict";e.d(l,{Q:()=>d});var t,u,r,o=e(5683),i=e(3076),s=e(4016),a=e(3266),c=e(1324);function d(n){if(!n||typeof n!==s.qv)return!1;r||(r=!(0,i.Vd)()||(0,i.zk)());var l=!1;if(n!==r){u||(t=Function[s.Fs].toString,u=(0,o.n)(t,s.s6));try{var e=(0,c.rL)(n);(l=!e)||((0,a.v)(e,s.BB)&&(e=e[s.BB]),l=e&&typeof e===s.H3&&t.call(e)===u)}catch(n){}}return l}},1324:(n,l,e)=>{"use strict";e.d(l,{vE:()=>a,ZH:()=>d,N6:()=>h,rL:()=>p,cG:()=>c,js:()=>f});var t=e(4016),u=e(6668),r=e(3517),o=e(9018),i=t.s6.freeze,s=function(n){return n},a=t.s6.assign;function c(n){return(0,u.Gv)(n)&&n!==t.M_||(0,r.zk)("objKeys called on non-object"),t.s6.keys(n)}function d(n){return i&&(0,o.z)(n,(function(n,l){((0,u.cy)(l)||(0,u.Gv)(l))&&i(l)})),h(n)}var h=i||s,f=t.s6.seal||s,p=t.s6.getPrototypeOf||function(n){return n[t.r5]||t.M_};t.s6.entries,t.s6.values},5977:(n,l,e)=>{"use strict";e.d(l,{o:()=>t});var t=e(4016).I3},2494:(n,l,e)=>{"use strict";e.d(l,{C:()=>c});var t=e(6668),u=e(8693),r=e(3517),o=e(4016),i=e(1742),s=e(5977),a=e(3178),c=(0,i.b2)("endsWith",o.sW,(function(n,l,e){(0,t.Kg)(n)||(0,r.zk)("'"+(0,u.m)(n)+"' is not a string");var i=(0,t.Kg)(l)?l:(0,s.o)(l),c=i[o.pi],d=n[o.pi],h=!(0,t.b0)(e)&&e<d?e:d;return(0,a.P0)(n,h-c,h)===i}))},5881:(n,l,e)=>{"use strict";e.d(l,{H:()=>r});var t=e(4016),u=e(1742),r=(0,u.lK)(t.BA,t.sW);(0,u.lK)(t.uP,t.sW)},7931:(n,l,e)=>{"use strict";e.d(l,{t:()=>c});var t=e(6668),u=e(8693),r=e(3517),o=e(4016),i=e(1742),s=e(5977),a=e(3178),c=(0,i.b2)("startsWith",o.sW,(function(n,l,e){(0,t.Kg)(n)||(0,r.zk)("'"+(0,u.m)(n)+"' is not a string");var i=(0,t.Kg)(l)?l:(0,s.o)(l),c=i[o.pi],d=e>0?e:0;return(0,a.P0)(n,d,d+c)===i}))},3178:(n,l,e)=>{"use strict";e.d(l,{ZW:()=>h,hK:()=>d,P0:()=>c});var t=e(6668),u=e(8693),r=e(3517),o=e(4016),i=e(1742),s=(o.tq.min,o.tq.max),a=(0,i.lK)(o.$9,o.sW),c=(0,i.lK)("substring",o.sW),d=(0,i.b2)("substr",o.sW,(function(n,l,e){return(0,t.hX)(n)&&(0,r.zk)("'polyStrSubstr called with invalid "+(0,u.m)(n)),e<0?o.wg:((l=l||0)<0&&(l=s(l+n[o.pi],0)),(0,t.b0)(e)?a(n,l):a(n,l,l+e))}));function h(n,l){return c(n,0,l)}},1374:(n,l,e)=>{"use strict";e.d(l,{EH:()=>h});var t=e(4016),u=e(1742),r=e(6668),o=e(8693),i=e(3517);function s(n){return function(l){return(0,r.hX)(l)&&(0,i.zk)("strTrim called ["+(0,o.m)(l)+"]"),l&&l.replace&&(l=l.replace(n,t.wg)),l}}var a=s(/^\s+|(?=\s)\s+$/g),c=s(/^\s+/g),d=s(/(?=\s)\s+$/g),h=(0,u.b2)("trim",t.sW,a);(0,u.b2)("trimStart",t.sW,c),(0,u.b2)("trimEnd",t.sW,d)},7403:(n,l,e)=>{"use strict";e.d(l,{Y0:()=>E,Lo:()=>C,jj:()=>_,eC:()=>k});var t,u=e(4016),r=(0,e(8040).Tm)({asyncIterator:0,hasInstance:1,isConcatSpreadable:2,iterator:3,match:4,matchAll:5,replace:6,search:7,species:8,split:9,toPrimitive:10,toStringTag:11,unscopables:12}),o=e(9452),i=e(5977),s=e(1382),a=e(1324),c="_urid";var d={};function h(n){var l={description:(0,i.o)(n),toString:function(){return u.PF+"("+n+")"}};return l[u.fL]=!0,l}function f(n){var l=function(){if(!t){var n=(0,s.Z)();t=n.gblSym=n.gblSym||{k:{},s:{}}}return t}();if(!(0,o.K)(l.k,n)){var e=h(n),u=(0,a.cG)(l.s).length;e[c]=function(){return u+"_"+e.toString()},l.k[n]=e,l.s[e[c]()]=(0,i.o)(n)}return l.k[n]}var p,m,g,y=e(6668),v=e(2871),w=e(8965),b=e(3076);function S(n){return(0,w.I)((function(){return p.v?p.v[n]:u.DQ}),u.DQ)}function C(){return!!D()}function D(){var n=!p||v.nr&&v.nr.lzy&&!p.b;return n&&(p=(0,b.O7)(u.PF)),(!m||n)&&(m=S("for")),(!g||n)&&(g=S("keyFor")),p.v}function E(n,l){var e=r[n];return(!p||v.nr.lzy&&!p.b)&&D(),p.v?p.v[e||n]:l?u.DQ:function(n){var l,e=r[n];return e&&(l=d[e]=d[e]||h(u.PF+"."+e)),l}(n)}function _(n,l){return(!p||v.nr.lzy&&!p.b)&&D(),p.v?p.v(n):l?u.M_:h(n)}function k(n){return(!m||v.nr.lzy&&!p.b)&&D(),(m.v||f)(n)}(0,y.ez)("symbol")},6874:(n,l,e)=>{"use strict";e.d(l,{AH:()=>m,dR:()=>f,vK:()=>p});var t=e(755),u=e(655),r=e(6668),o=e(4016),i=e(6336),s="ref",a="un"+s,c="hasRef",d="enabled";function h(n,l,e,h){var f=(0,r.cy)(e),p=f?e.length:0,m=(p>0?e[0]:f?o.DQ:e)||setTimeout,g=(p>1?e[1]:o.DQ)||clearTimeout,y=h[0];h[0]=function(){v.dn(),(0,u.p)(y,n,(0,t.K)(arguments))};var v=function(l,e){var t,r,h=!0,f=l?e(o.M_):o.M_,p=function(){return h=!1,f&&f[a]&&f[a](),r},m=function(){return f=e(f),h||p(),r},y=function(){f&&function(l){(0,u.p)(g,n,[l])}(f),f=o.M_};return(t={cancel:y,refresh:m})[c]=function(){return f&&f[c]?f[c]():h},t[s]=function(){return h=!0,f&&f[s]&&f[s](),r},t[a]=p,t[d]=!1,r=t,(0,i.Ux)(r,d,{get:function(){return!!f},set:function(n){!n&&f&&y(),n&&!f&&m()}}),{h:r,dn:function(){f=o.M_}}}(l,(function(l){if(l){if(l.refresh)return l.refresh(),l;(0,u.p)(g,n,[l])}return(0,u.p)(m,n,h)}));return v.h}function f(n,l){return h(this,!0,o.DQ,(0,t.K)(arguments))}function p(n,l,e){return h(this,!0,n,(0,t.K)(arguments,1))}function m(n,l){return h(this,!1,o.DQ,(0,t.K)(arguments))}},3209:n=>{"use strict";var l=[Array,Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array];n.exports=l},6869:(n,l,e)=>{"use strict";var t=e(3717).prototypes.array,u=e(4629).use(D),r=e(3717).every,o=e(3717).functionName,i=e(6762),s=e(9996),a=e(3717).prototypes.object,c=e(3717).typeOf,d=e(3717).valueToString,h=e(8977),f=e(6815),p=e(5739),m=e(9171),g=e(3439),y=e(995),v=t.indexOf,w=t.some,b=a.hasOwnProperty,S=a.toString,C=e(1631)(D);function D(n,l){var e=Object.create(y),t=c(n);if(void 0!==l&&"string"!=typeof l)throw new TypeError("Message should be a string");if(arguments.length>2)throw new TypeError(`Expected 1 or 2 arguments, received ${arguments.length}`);return t in C?C[t](e,n,l):e.test=function(l){return u(l,n)},e.message||(e.message=`match(${d(n)})`),Object.defineProperty(e,"message",{configurable:!1,writable:!1,value:e.message}),e}function E(n,l){return function(e,t){p(e,"string","property");var r=1===arguments.length,o=`${l}("${e}"`;return r||(o+=`, ${d(t)}`),D((function(l){return!(null==l||!n(l,e))&&(r||u(l[e],t))}),o+=")")}}D.isMatcher=g,D.any=D((function(){return!0}),"any"),D.defined=D((function(n){return null!=n}),"defined"),D.truthy=D((function(n){return Boolean(n)}),"truthy"),D.falsy=D((function(n){return!n}),"falsy"),D.same=function(n){return D((function(l){return n===l}),`same(${d(n)})`)},D.in=function(n){if("array"!==c(n))throw new TypeError("array expected");return D((function(l){return w(n,(function(n){return n===l}))}),`in(${d(n)})`)},D.typeOf=function(n){return p(n,"string","type"),D((function(l){return c(l)===n}),`typeOf("${n}")`)},D.instanceOf=function(n){return"undefined"==typeof Symbol||void 0===Symbol.hasInstance?p(n,"function","type"):f(n,Symbol.hasInstance,"type","[Symbol.hasInstance]"),D((function(l){return l instanceof n}),`instanceOf(${o(n)||S(n)})`)},D.has=E((function(n,l){return"object"==typeof n?l in n:void 0!==n[l]}),"has"),D.hasOwn=E((function(n,l){return b(n,l)}),"hasOwn"),D.hasNested=function(n,l){p(n,"string","property");var e=1===arguments.length,t=`hasNested("${n}"`;return e||(t+=`, ${d(l)}`),D((function(t){return null!=t&&void 0!==i(t,n)&&(e||u(i(t,n),l))}),t+=")")};var _={null:!0,boolean:!0,number:!0,string:!0,object:!0,array:!0};D.json=function(n){if(!_[c(n)])throw new TypeError("Value cannot be the result of JSON.parse");return D((function(l){var e;try{e=JSON.parse(l)}catch(n){return!1}return u(e,n)}),`json(${JSON.stringify(n,null,"  ")})`)},D.every=function(n){return h(n),D((function(l){return"object"===c(l)?r(Object.keys(l),(function(e){return n.test(l[e])})):m(l)&&r(l,(function(l){return n.test(l)}))}),`every(${n.message})`)},D.some=function(n){return h(n),D((function(l){return"object"===c(l)?!r(Object.keys(l),(function(e){return!n.test(l[e])})):m(l)&&!r(l,(function(l){return!n.test(l)}))}),`some(${n.message})`)},D.array=D.typeOf("array"),D.array.deepEquals=function(n){return D((function(l){var e=l.length===n.length;return"array"===c(l)&&e&&r(l,(function(l,e){var t=n[e];return"array"===c(t)&&"array"===c(l)?D.array.deepEquals(t).test(l):u(t,l)}))}),`deepEquals([${s(n)}])`)},D.array.startsWith=function(n){return D((function(l){return"array"===c(l)&&r(n,(function(n,e){return l[e]===n}))}),`startsWith([${s(n)}])`)},D.array.endsWith=function(n){return D((function(l){var e=l.length-n.length;return"array"===c(l)&&r(n,(function(n,t){return l[e+t]===n}))}),`endsWith([${s(n)}])`)},D.array.contains=function(n){return D((function(l){return"array"===c(l)&&r(n,(function(n){return-1!==v(l,n)}))}),`contains([${s(n)}])`)},D.map=D.typeOf("map"),D.map.deepEquals=function(n){return D((function(l){var e=l.size===n.size;return"map"===c(l)&&e&&r(l,(function(l,e){return n.has(e)&&n.get(e)===l}))}),`deepEquals(Map[${s(n)}])`)},D.map.contains=function(n){return D((function(l){return"map"===c(l)&&r(n,(function(n,e){return l.has(e)&&l.get(e)===n}))}),`contains(Map[${s(n)}])`)},D.set=D.typeOf("set"),D.set.deepEquals=function(n){return D((function(l){var e=l.size===n.size;return"set"===c(l)&&e&&r(l,(function(l){return n.has(l)}))}),`deepEquals(Set[${s(n)}])`)},D.set.contains=function(n){return D((function(l){return"set"===c(l)&&r(n,(function(n){return l.has(n)}))}),`contains(Set[${s(n)}])`)},D.bool=D.typeOf("boolean"),D.number=D.typeOf("number"),D.string=D.typeOf("string"),D.object=D.typeOf("object"),D.func=D.typeOf("function"),D.regexp=D.typeOf("regexp"),D.date=D.typeOf("date"),D.symbol=D.typeOf("symbol"),n.exports=D},8977:(n,l,e)=>{"use strict";var t=e(3439);n.exports=function(n){if(!t(n))throw new TypeError("Matcher expected")}},6815:n=>{"use strict";n.exports=function(n,l,e,t){if(null===n[l]||void 0===n[l])throw new TypeError(`Expected ${e} to have method ${t}`)}},5739:(n,l,e)=>{"use strict";var t=e(3717).typeOf;n.exports=function(n,l,e){var u=t(n);if(u!==l)throw new TypeError(`Expected type of ${e} to be ${l}, but was ${u}`)}},9171:(n,l,e)=>{"use strict";var t=e(3717).typeOf;n.exports=function(n){return Boolean(n)&&"function"===t(n.forEach)}},3439:(n,l,e)=>{"use strict";var t=e(3717).prototypes.object.isPrototypeOf,u=e(995);n.exports=function(n){return t(u,n)}},6091:(n,l,e)=>{"use strict";var t=e(3717).prototypes.array.every,u=e(3717).prototypes.array.concat,r=e(3717).typeOf,o=e(4629).use,i=e(3439),s=Object.keys,a=Object.getOwnPropertySymbols;n.exports=function n(l,e,c){var d=o(c);if(null==l)return!1;var h=s(e);return"function"===r(a)&&(h=u(h,a(e))),t(h,(function(t){var u=e[t],o=l[t];if(i(u)){if(!u.test(o))return!1}else if("object"===r(u)){if(!n(o,u,c))return!1}else if(!d(o,u))return!1;return!0}))}},995:(n,l,e)=>{"use strict";var t={toString:function(){return this.message},or:function(n){var l=e(6869),u=l.isMatcher;if(!arguments.length)throw new TypeError("Matcher expected");var r=u(n)?n:l(n),o=this,i=Object.create(t);return i.test=function(n){return o.test(n)||r.test(n)},i.message=`${o.message}.or(${r.message})`,i},and:function(n){var l=e(6869),u=l.isMatcher;if(!arguments.length)throw new TypeError("Matcher expected");var r=u(n)?n:l(n),o=this,i=Object.create(t);return i.test=function(n){return o.test(n)&&r.test(n)},i.message=`${o.message}.and(${r.message})`,i}};n.exports=t},1631:(n,l,e)=>{"use strict";var t=e(3717).functionName,u=e(3717).prototypes.array.join,r=e(3717).prototypes.array.map,o=e(3717).prototypes.string.indexOf,i=e(3717).valueToString,s=e(6091);n.exports=function(n){return{function:function(n,l,e){n.test=l,n.message=e||`match(${t(l)})`},number:function(n,l){n.test=function(n){return l==n}},object:function(l,e){var o;return"function"==typeof e.test?(l.test=function(n){return!0===e.test(n)},l.message=`match(${t(e.test)})`,l):(o=r(Object.keys(e),(function(n){return`${n}: ${i(e[n])}`})),l.test=function(l){return s(l,e,n)},l.message=`match(${u(o,", ")})`,l)},regexp:function(n,l){n.test=function(n){return"string"==typeof n&&l.test(n)}},string:function(n,l){n.test=function(n){return"string"==typeof n&&-1!==o(n,l)},n.message=`match("${l}")`}}}},4629:(n,l,e)=>{"use strict";var t=e(3717).valueToString,u=e(3717).className,r=e(3717).typeOf,o=e(3717).prototypes.array,i=e(3717).prototypes.object,s=e(3717).prototypes.map.forEach,a=e(505),c=e(6783),d=e(4107),h=e(6359),f=e(251),p=e(4511),m=e(8477),g=e(8281),y=e(113),v=e(5460),w=e(1055),b=e(1557),S=o.concat,C=o.every,D=o.push,E=Date.prototype.getTime,_=i.hasOwnProperty,k=o.indexOf,x=Object.keys,T=Object.getOwnPropertySymbols;function P(n,l,e){var o=[],i=[],I=[],A=[],O={};return function n(l,R,F,L){if(e&&e.isMatcher(R))return e.isMatcher(l)?l===R:R.test(l);var $=typeof l,j=typeof R;if(l===R||y(l)||y(R)||null===l||null===R||void 0===l||void 0===R||"object"!==$||"object"!==j)return c(l,R);if(p(l)||p(R))return!1;var M=f(l),N=f(R);if((M||N)&&(!M||!N||E.call(l)!==E.call(R)))return!1;if(l instanceof RegExp&&R instanceof RegExp&&t(l)!==t(R))return!1;if(l instanceof Promise&&R instanceof Promise)return l===R;if(l instanceof Error&&R instanceof Error)return l===R;var B=a(l),H=a(R),U=x(l),q=x(R),W=u(l),z=u(R),V="function"===r(T)?T(R):[],G=S(q,V);if(d(l)||d(R)){if(l.length!==R.length)return!1}else if($!==j||B!==H||U.length!==q.length||W&&z&&W!==z)return!1;if(w(l)||w(R))return!(!w(l)||!w(R)||l.size!==R.size)&&b(l,R,n);if(g(l)||g(R)){if(!g(l)||!g(R)||l.size!==R.size)return!1;var K=!0;return s(l,(function(n,l){K=K&&P(n,R.get(l))})),K}if(l.constructor&&"jQuery"===l.constructor.name&&"function"==typeof l.is)return l.is(R);var X=m(l)&&!h(l)&&!d(l),J=m(R)&&!h(R)&&!d(R);if(X||J){var Z=Array.from(l),Y=Array.from(R);if(Z.length!==Y.length)return!1;var Q=!0;return C(Z,(function(n){Q=Q&&P(Z[n],Y[n])})),Q}return C(G,(function(e){if(!_(l,e))return!1;var t=l[e],u=R[e],r=v(t),s=v(u),a=r?k(o,t):-1,c=s?k(i,u):-1,d=-1!==a?I[a]:`${F}[${JSON.stringify(e)}]`,h=-1!==c?A[c]:`${L}[${JSON.stringify(e)}]`,f=d+h;return!!O[f]||(-1===a&&r&&(D(o,t),D(I,d)),-1===c&&s&&(D(i,u),D(A,h)),r&&s&&(O[f]=!0),n(t,u,d,h))}))}(n,l,"$1","$2")}P.use=function(n){return function(l,e){return P(l,e,n)}},n.exports=P},505:(n,l,e)=>{"use strict";var t=e(3717).prototypes.object.toString;n.exports=function(n){return t(n).split(/[ \]]/)[1]}},6783:(n,l,e)=>{"use strict";var t=e(113),u=e(6348);n.exports=function(n,l){return!!(n===l||t(n)&&t(l))&&(0!==n||u(n)===u(l))}},4107:(n,l,e)=>{"use strict";var t=e(505);n.exports=function(n){return"Arguments"===t(n)}},6359:(n,l,e)=>{"use strict";var t=e(3717).functionName,u=e(3717).prototypes.array.indexOf,r=e(3717).prototypes.array.map,o=e(3209),i=e(5855);n.exports=function(n){return-1!==u(r(o,t),i(n))}},251:n=>{"use strict";n.exports=function(n){return n instanceof Date}},4511:n=>{"use strict";var l="undefined"!=typeof document&&document.createElement("div");n.exports=function(n){if(!n||1!==n.nodeType||!l)return!1;try{n.appendChild(l),n.removeChild(l)}catch(n){return!1}return!0}},8477:n=>{"use strict";n.exports=function(n){return"object"==typeof n&&"function"==typeof n[Symbol.iterator]}},8281:n=>{"use strict";n.exports=function(n){return"undefined"!=typeof Map&&n instanceof Map}},113:n=>{"use strict";n.exports=function(n){return"number"==typeof n&&n!=n}},6348:n=>{"use strict";n.exports=function(n){return 0===n&&1/n==-1/0}},5460:n=>{"use strict";n.exports=function(n){return!("object"!=typeof n||null===n||n instanceof Boolean||n instanceof Date||n instanceof Error||n instanceof Number||n instanceof RegExp||n instanceof String)}},1055:n=>{"use strict";n.exports=function(n){return"undefined"!=typeof Set&&n instanceof Set||!1}},1557:(n,l,e)=>{"use strict";var t=e(3717).prototypes.set.forEach;n.exports=function(n,l,e){var u=!0;return t(n,(function(n){var r=!1;t(l,(function(l){e(l,n)&&(r=!0)})),u=u&&r})),u}},9996:(n,l,e)=>{"use strict";var t=e(3717).prototypes.string.slice,u=e(3717).typeOf,r=e(3717).valueToString;function o(n){return"string"==typeof n?`'${n}'`:r(n)}n.exports=function(n){return"map"===u(n)?(l="",n.forEach((function(n,e){l+=`[${o(e)},${o(n)}],`})),l=t(l,0,-1)):function(n){var l="";return n.forEach((function(n){l+=`${o(n)},`})),l=t(l,0,-1)}(n);var l}},2681:(n,l,e)=>{"use strict";var t=e(3717).valueToString,u=e(3717).prototypes.string.indexOf,r=e(3717).prototypes.array.forEach,o=e(5855),i="function"==typeof Array.from,s=e(4629).use(f),a=e(6359),c=e(1557),d=e(6869);function h(n,l,e){if(0===l.length)return!0;var t,u,r,o;for(t=0,u=n.length;t<u;++t)if(e(n[t],l[0])){for(r=0,o=l.length;r<o;++r){if(t+r>=u)return!1;if(!e(n[t+r],l[r]))return!1}return!0}return!1}function f(n,l){if(l&&"function"==typeof l.test)return l.test(n);switch(o(l)){case"bigint":case"boolean":case"number":case"symbol":return l===n;case"function":return!0===l(n);case"string":return("string"==typeof n||Boolean(n))&&u(t(n).toLowerCase(),l.toLowerCase())>=0;case"null":return null===n;case"undefined":return void 0===n;case"Date":if("Date"===o(n))return n.getTime()===l.getTime();break;case"Array":case"Int8Array":case"Uint8Array":case"Uint8ClampedArray":case"Int16Array":case"Uint16Array":case"Int32Array":case"Uint32Array":case"Float32Array":case"Float64Array":return a(l)&&h(n,l,f);case"Map":if(!i)throw new Error("The JavaScript engine does not support Array.from and cannot reliably do value comparison of Map instances");return"Map"===o(n)&&h(Array.from(n),Array.from(l),f)}switch(o(n)){case"null":return!1;case"Set":return c(l,n,f)}if(l&&"object"==typeof l){if(l===n)return!0;if("object"!=typeof n)return!1;var e;for(e in l){var r=n[e];if(void 0===r&&"function"==typeof n.getAttribute&&(r=n.getAttribute(e)),null===l[e]||void 0===l[e]){if(r!==l[e])return!1}else if(void 0===r||!s(r,l[e]))return!1}return!0}throw new Error("Matcher was an unknown or unsupported type")}r(Object.keys(d),(function(n){f[n]=d[n]})),n.exports=f},3584:(n,l,e)=>{"use strict";var t=e(6783),u=e(4107),r=e(4511),o=e(6348),i=e(1055),s=e(8281),a=e(2681),c=e(4629).use(a),d=e(6869);n.exports={createMatcher:d,deepEqual:c,identical:t,isArguments:u,isElement:r,isMap:s,isNegZero:o,isSet:i,match:a}},9751:(n,l,e)=>{"use strict";var t=e(4300).every;function u(n,l,e,t){var u=!0;return e!==t.length-1&&(u=l.calledBefore(t[e+1])),!(!function(n,l){return void 0===n[l.id]&&(n[l.id]=0),n[l.id]<l.callCount}(n,l)||!u||(n[l.id]+=1,0))}n.exports=function(n){return t(arguments.length>1?arguments:n,u.bind(null,{}))}},2525:(n,l,e)=>{"use strict";var t=e(6289);n.exports=function(n){return n.constructor&&n.constructor.name||"function"==typeof n.constructor&&t(n.constructor)||null}},4154:(n,l)=>{"use strict";l.wrap=function(n,e){var t=function(){return l.printWarning(e),n.apply(this,arguments)};return n.prototype&&(t.prototype=n.prototype),t},l.defaultMsg=function(n,l){return`${n}.${l} is deprecated and will be removed from the public API in a future version of ${n}.`},l.printWarning=function(n){"object"==typeof process&&process.emitWarning?process.emitWarning(n):console.info?console.info(n):console.log(n)}},1422:n=>{"use strict";n.exports=function(n,l){var e=!0;try{n.forEach((function(){if(!l.apply(this,arguments))throw new Error}))}catch(n){e=!1}return e}},6289:n=>{"use strict";n.exports=function(n){if(!n)return"";try{return n.displayName||n.name||(String(n).match(/function ([^\s(]+)/)||[])[1]}catch(n){return""}}},5698:n=>{"use strict";var l;l="undefined"!=typeof global?global:"undefined"!=typeof window?window:self,n.exports=l},3717:(n,l,e)=>{"use strict";n.exports={global:e(5698),calledInOrder:e(9751),className:e(2525),deprecated:e(4154),every:e(1422),functionName:e(6289),orderByFirstCall:e(8769),prototypes:e(7813),typeOf:e(8051),valueToString:e(6800)}},8769:(n,l,e)=>{"use strict";var t=e(4300).sort,u=e(4300).slice;function r(n,l){var e=n.getCall(0),t=l.getCall(0);return(e&&e.callId||-1)<(t&&t.callId||-1)?-1:1}n.exports=function(n){return t(u(n),r)}},4300:(n,l,e)=>{"use strict";var t=e(3588);n.exports=t(Array.prototype)},3588:(n,l,e)=>{"use strict";var t=Function.call,u=e(8179),r=["size","caller","callee","arguments"];u&&r.push("__proto__"),n.exports=function(n){return Object.getOwnPropertyNames(n).reduce((function(l,e){return r.includes(e)||"function"!=typeof n[e]||(l[e]=t.bind(n[e])),l}),Object.create(null))}},9461:(n,l,e)=>{"use strict";var t=e(3588);n.exports=t(Function.prototype)},7813:(n,l,e)=>{"use strict";n.exports={array:e(4300),function:e(9461),map:e(9895),object:e(1702),set:e(1449),string:e(3540)}},9895:(n,l,e)=>{"use strict";var t=e(3588);n.exports=t(Map.prototype)},1702:(n,l,e)=>{"use strict";var t=e(3588);n.exports=t(Object.prototype)},1449:(n,l,e)=>{"use strict";var t=e(3588);n.exports=t(Set.prototype)},3540:(n,l,e)=>{"use strict";var t=e(3588);n.exports=t(String.prototype)},8179:n=>{"use strict";let l;try{l=!1}catch(n){l=!0}n.exports=l},8051:(n,l,e)=>{"use strict";var t=e(5855);n.exports=function(n){return t(n).toLowerCase()}},6800:n=>{"use strict";n.exports=function(n){return n&&n.toString?n.toString():String(n)}},2690:(n,l,e)=>{(()=>{"use strict";var n=[,(n,l,e)=>{e.r(l),e.d(l,{CallHandlers:()=>t.CallHandlers,Connection:()=>t.Connection,ConnectionBearer:()=>t.ConnectionBearer,ConnectionManager:()=>u.ConnectionManager,DeferredPromise:()=>r.DeferredPromise,ExecServer:()=>i.ExecServer,FileSystemProviderErrorCode:()=>i.FileSystemProviderErrorCode,FileType:()=>i.FileType,NetworkError:()=>o.NetworkError,RPCError:()=>t.RPCError,RemoteVersion:()=>s.RemoteVersion,ServerWebSocket:()=>a.ServerWebSocket,TimeoutError:()=>o.TimeoutError,closedDuplexStream:()=>c.closedDuplexStream,msgPackEncode:()=>t.msgPackEncode});var t=e(2),u=e(6),r=e(5),o=e(10),i=e(11),s=e(7),a=e(14),c=e(12)},(n,l,e)=>{e.r(l),e.d(l,{CallHandlers:()=>c,Connection:()=>s,ConnectionBearer:()=>d,RPCError:()=>i,msgPackEncode:()=>a});var t=e(3),u=e(4),r=e(5);let o=0;class i extends Error{constructor(n,l){super(`json rpc error ${n}: message`),this.code=n,this.message=l}}class s{constructor(n,l=u.encode,e=new c){this.tunnel=n,this.globalHandlers=e,this.callbacks=new Map,this.streams=new Map,this.notifyEmitter=new t.EventEmitter,this.closeEmitter=new t.EventEmitter,this.ownHandlers=new c,this.onClose=this.closeEmitter.event,this.registerRequestHandler=this.ownHandlers.register,this.encode=l,(async()=>{try{for await(const l of(0,u.decodeMultiStream)(n)){const n=l;"result"in n||"error"in n?this.callbacks.get(n.id)?.resolve(n):"id"in n&&"number"==typeof n.id?this.handleRequest(n):this.notifyEmitter.fire(n)}}catch(l){n.end(),this.closeEmitter.fire(l)}})(),n.once("close",(()=>{this.rejectAllCalls(new i(0,"Connection closed")),this.closeEmitter.fire(void 0)})),n.once("error",(n=>{const l=new i(0,n.message);this.rejectAllCalls(l),this.closeEmitter.fire(l)})),this.onNotification("stream_data",(n=>{this.streams.get(n.stream)?.pushData(n.segment)})),this.onNotification("stream_ended",(n=>{this.streams.get(n.stream)?.markEnded(),this.streams.delete(n.stream)})),this.onNotification("streams_started",(n=>{const l=n.stream_ids,e=this.callbacks.get(n.for_request_id);if(e?.onStream)for(const n of l){const l=new h(n,this);this.streams.set(n,l),e.onStream(l)}}))}static fromDuplexStreams(n,l){const e={once:(l,e)=>{"close"===l&&n.onEnd.then(e)},write:(n,e)=>l.write(n,e),async*[Symbol.asyncIterator](){let l=new r.DeferredPromise,e=l;for(n.onDidReceiveMessage((n=>{const e=new r.DeferredPromise;l.complete({data:n,next:e}),l=e})),n.onEnd.then((()=>{l.complete(void 0)}));;){const n=await e.p;if(!n)return;yield n.data,e=n.next}},end:()=>l.end()};return new s(e,u.encode)}dispose(){this.tunnel.end()}async call(n,l,e,t){const u=o++;return new Promise(((r,o)=>{this.callbacks.set(u,{onStream:t,resolve:n=>{"error"in n?o(new i(n.error?.code,n.error?.message)):r(n.result)},reject:o}),e?.addEventListener("abort",(()=>o(new i(0,"Operation cancelled")))),this.write(this.encode({id:u,method:n,params:l}))})).finally((()=>this.callbacks.delete(u)))}onNotification(n,l){return this.notifyEmitter.event((e=>{e.method===n&&l(e.params)}))}notify(n,l,e){this.write(this.encode({method:n,params:l}),e)}async handleRequest(n){const l=this.ownHandlers.map.get(n.method)||this.globalHandlers.map.get(n.method);if(!l){const l={id:n.id,error:{message:`Unknown method ${n.method}. Cannot resolve request`,code:36}};return void this.write(this.encode(l))}let e;try{e={id:n.id,result:await l(n.params,n.id)}}catch(l){l instanceof i?e={id:n.id,error:{code:l.code,message:l.message}}:(console.warn("Unexpected error handling request",n,l),e={id:n.id,error:{code:-1,message:String(l)}})}this.write(this.encode(e))}write(n,l){this.tunnel.write(n,l)}rejectAllCalls(n){for(const{reject:l}of this.callbacks.values())l(n);this.callbacks.clear()}}function a(n){const l=(0,u.encode)(n),e=new Uint8Array(4+l.length);return new DataView(e.buffer).setUint32(0,l.length),e.set(l,4),e}class c{constructor(){this.map=new Map,this.register=(n,l)=>{this.map.has(n)&&console.warn("Overriding previous handler for method: ",n),this.map.set(n,l)}}}class d{constructor(n){this.callHandlers=new c,this.startEmitter=new t.EventEmitter,this.onStartConnecting=this.startEmitter.event,this.notifyEmitter=new t.EventEmitter,this.closeEmitter=new t.EventEmitter,this.onClose=this.closeEmitter.event,this.registerRequestHandler=this.callHandlers.register,this.BEARER_TYPE=n}async checkedAcquire(){if(this.streamPromise){const n=await this.streamPromise;if(await this.isStreamValid(n))return n;n.dispose()}this.streamPromise=this.acquireNow();try{return await this.streamPromise}catch(n){throw this.streamPromise=void 0,n}}async acquire(){this.streamPromise??(this.streamPromise=this.acquireNow());try{return await this.streamPromise}catch(n){throw this.streamPromise=void 0,n}}async isStreamValid(n){return!0}async close(){this.streamPromise?.then((n=>n.dispose())),this.streamPromise=void 0}async acquireNow(){const n=await this.getConnectionTunnel(),l=new s(n,(n=>this.encodeMessage(n)),this.callHandlers);return l.onClose((n=>{this.streamPromise=void 0,this.closeEmitter.fire(n)})),this.startEmitter.fire(l),l}}class h{constructor(n,l){this.id=n,this.connection=l,this.queue=[],this.dataEmitter=new t.EventEmitter,this.endDeferred=new r.DeferredPromise,this.onDidReceiveMessage=(...n)=>(this.queue&&setTimeout((()=>this.dequeue())),this.dataEmitter.event(...n))}get onData(){return this.onDidReceiveMessage}get onEnd(){return this.queue&&setTimeout((()=>this.dequeue())),this.endDeferred.p}write(n){this.connection.notify("stream_data",{stream:this.id,segment:n})}end(){this.connection.notify("stream_ended",{stream:this.id})}pushData(n){this.queue?this.queue.push(n):this.dataEmitter.fire(n)}markEnded(){this.queue?this.queue.push(null):this.endDeferred.complete()}dequeue(){if(!this.queue)return;const n=this.queue;this.queue=void 0;for(const l of n)null===l?this.endDeferred.complete():this.dataEmitter.fire(l)}}},n=>{n.exports=e(621)},n=>{n.exports=e(3986)},(n,l,e)=>{e.r(l),e.d(l,{DeferredPromise:()=>t});class t{constructor(){this.rejected=!1,this.resolved=!1,this.p=new Promise(((n,l)=>{this.completeCallback=n,this.errorCallback=l}))}get isRejected(){return this.rejected}get isResolved(){return this.resolved}get isSettled(){return this.rejected||this.resolved}complete(n){this.completeCallback(n),this.resolved=!0}error(n){this.errorCallback(n),this.rejected=!0}}},(n,l,e)=>{e.r(l),e.d(l,{ConnectionManager:()=>i});var t=e(3),u=e(8),r=e(5),o=e(7);class i{constructor({bearer:n}){this.socketId=0,this.connectingEmitter=new t.EventEmitter,this.onStartConnecting=this.connectingEmitter.event,this.connectedEmitter=new t.EventEmitter,this.onConnected=this.connectedEmitter.event,this.logEmitter=new t.EventEmitter,this.onLog=this.logEmitter.event,this.versionPromise=new r.DeferredPromise,this.bearer=n,this.bearer.onStartConnecting((n=>{n.onNotification("version",(({version:n,protocol_version:l})=>{this.versionPromise.isSettled&&(this.versionPromise=new r.DeferredPromise),this.versionPromise.complete(new o.RemoteVersion(n,l))}))})),this.onClose=this.bearer.onClose;let l=!0;this.bearer.onStartConnecting((n=>{if(this.connectingEmitter.fire(),n.onNotification("serverlog",(n=>{this.logEmitter.fire(n)})),n.onNotification("makehttpreq",(async({url:l,method:e,req_id:t})=>{this.makeHttpCall(n,l,e,t)})),l){const e=n.onNotification("servermsg",(()=>{l&&(this.connectedEmitter.fire(),e.dispose(),l=!1)}))}}))}get version(){return this.versionPromise.p}async makeHttpCall(n,l,e,t){let r;try{r=await(0,u.fetchFn)(l,{method:e})}catch(l){return n.notify("httpheaders",{headers:[],status_code:503,req_id:t}),void n.notify("httpbody",{segment:(new TextEncoder).encode(String(l)),complete:!0,req_id:t})}n.notify("httpheaders",{headers:[...r.headers],status_code:r.status,req_id:t});const o=()=>n.notify("httpbody",{segment:new Uint8Array,complete:!0,req_id:t});if(r.body&&"function"==typeof r.body.on){const l=r.body;return l.on("data",(l=>n.notify("httpbody",{segment:l,complete:!1,req_id:t}))),l.on("end",o),l.on("error",o),void l.resume()}const i=r.body;if(i)try{const l=i.getReader();for(;;){const{done:e,value:u}=await l.read();if(n.notify("httpbody",{segment:u||new Uint8Array,complete:e,req_id:t}),e)break}}catch(n){throw o(),n}else o()}nextSocketId(){return this.socketId++}async checkForUpdates(n){return(await this.bearer.acquire()).call("update",{do_update:n?.doUpdate??!1})}async call(n,l,e,t){const u=await this.bearer.acquire();return await u.call(n,l,e,t)}}},(n,l,e)=>{e.r(l),e.d(l,{RemoteVersion:()=>t});class t{constructor(n,l=0){this.cliVersion=n,this.protocolVerson=l}shouldWarnOutdated(){return this.protocolVerson<=2}canPing(){return this.protocolVerson>=1}canCompressServerMsg(){return this.protocolVerson>=2}usesConnectionToken(){return this.protocolVerson>=3}shouldLengthPrefixMessages(){return this.protocolVerson<4}}},(n,l,e)=>{e.r(l),e.d(l,{fetchFn:()=>u});var t=e(9);const u=e.n(t)()},n=>{n.exports=e(2065)},(n,l,e)=>{e.r(l),e.d(l,{NetworkError:()=>t,TimeoutError:()=>u});class t extends Error{constructor(n,l="ECONNREFUSED"){super(n.message),this.code=l,this.syscall="connect",this.stack=n.stack}}class u extends Error{constructor(){super("Operation timed out")}}},(n,l,e)=>{e.r(l),e.d(l,{ExecServer:()=>s,FileSystemProviderErrorCode:()=>d,FileType:()=>h});var t=e(3),u=e(13),r=e(2),o=e(5),i=e(12);class s{constructor(n){this.connection=n,this.fs={stat:async n=>{const l=await this.connection.call("fs_stat",{path:n});if(!l.exists)throw new c(`File not found: ${n}`,d.FileNotFound);return{ctime:0,mtime:0,size:0,type:a(l.type)}},mkdirp:async n=>{await this.connection.call("fs_mkdirp",{path:n})},rm:async n=>{await this.connection.call("fs_rm",{path:n})},rename:async(n,l)=>{await this.connection.call("fs_rename",{from_path:n,to_path:l})},readdir:async n=>{const{contents:l}=await this.connection.call("fs_readdir",{path:n});return l.map((({name:n,type:l})=>({name:n,type:a(l)})))},read:n=>{const l=new o.DeferredPromise;return this.connection.call("fs_read",{path:n},void 0,(n=>l.complete(n))).catch((n=>l.error(n))),l.p},write:async n=>{const l=new o.DeferredPromise,e=this.connection.call("fs_write",{path:n},void 0,(n=>l.complete(n))).then((()=>{}),(n=>{if(l.complete)throw n;l.error(n)}));return{stream:await l.p,done:e}},connect:async n=>{const l=new o.DeferredPromise,e=this.connection.call("fs_connect",{path:n},void 0,(n=>l.complete(n))).then((()=>{}),(n=>{if(l.complete)throw n;l.error(n)}));return{stream:await l.p,done:e}}}}async kill(n){await this.connection.call("sys_kill",{pid:n})}async spawn(n,l,{env:e={},cwd:t}={}){const u=Array.from({length:3},(()=>new o.DeferredPromise)),r=Promise.all(u.map((n=>n.p))),s=this.connection.call("spawn",{command:n,args:l,env:e,cwd:t},void 0,(n=>{u.shift()?.complete(n)})).then((n=>(u.forEach((n=>n.complete(i.closedDuplexStream))),{status:n.exit_code,message:n.message}))),[a,c,d]=await r;return{stdin:a,stdout:c,stderr:d,onExit:s}}async spawnRemoteServerConnector(n,l,e={}){const{connection:u,logs:r,onExit:o}=await this.spawnCli(n,l,e),i=new s(u);return{logs:r,onExit:o,connect:async n=>{const l=await i.serve(n),e=new t.EventEmitter,u=new t.EventEmitter;return l.onEnd.then((()=>e.fire())),{send:n=>l.write(n),end:()=>l.end(),onDidEnd:e.event,onDidClose:u.event,onDidReceiveMessage:l.onDidReceiveMessage}}}}async spawnCli(n,l,{env:e={},cwd:t}={}){const u=Array.from({length:3},(()=>new o.DeferredPromise)),s=Promise.all(u.map((n=>n.p))),a=this.connection.call("spawn_cli",{command:n,args:l,env:e,cwd:t},void 0,(n=>{u.shift()?.complete(n)})).then((n=>(u.forEach((n=>n.complete(i.closedDuplexStream))),{status:n.exit_code,message:n.message}))),[c,d,h]=await s;return{connection:r.Connection.fromDuplexStreams(d,c),logs:h,onExit:a}}async downloadCliExecutable(n,l,e,t){return this.connection.call("acquire_cli",{command:l,args:e,platform:n.buildTarget,quality:n.quality,commit_id:n.commit,env:t?.env}).then((n=>({status:n.exit_code,message:n.message})))}async acquireCli(n){return this.connection.call("acquire_cli",{command:n.command,args:n.args,platform:n.buildTarget??n.platform,quality:n.quality,commit_id:n.commit??n.commit_id,env:n.env}).then((n=>({status:n.exit_code,message:n.message})))}async serve(n){const l=n.socketId??n.socket_id;return await this.connection.call("serve",{socket_id:l,commit_id:n.commit??n.commit_id,extensions:n.extensions,quality:n.quality,archive_path:n.archivePath??n.archive_path,compress:n.compress,connection_token:n.connectionToken??n.connection_token}),new f(l,this.connection,!!n.compress)}async env(){const n=await this.connection.call("get_env",{});return{env:n.env,osRelease:n.os_release,osPlatform:n.os_platform}}async fsStat(n){const l=await this.connection.call("fs_stat",{path:n});return l.exists?{exists:!0,size:l.size,type:l.type}:{exists:!1}}async tcpConnect(n,l){const e=new o.DeferredPromise,t=this.connection.call("net_connect",{host:n,port:l},void 0,(n=>e.complete(n))).then((()=>{}),(n=>{if(e.complete)throw n;e.error(n)}));return{stream:await e.p,done:t}}}const a=n=>{switch(n){case"file":return h.File;case"dir":return h.Directory;case"link":return h.SymbolicLink;default:return h.Unknown}};class c extends Error{constructor(n,l){super(n),this.code=l}}var d,h;!function(n){n.FileNotFound="EntryNotFound"}(d||(d={})),function(n){n[n.Unknown=0]="Unknown",n[n.File=1]="File",n[n.Directory=2]="Directory",n[n.SymbolicLink=64]="SymbolicLink"}(h||(h={}));class f{constructor(n,l,e){this.socketId=n,this.connection=l,this.id=0,this.drains=new p,this.disposables=[],this.onDataEmitter=new t.EventEmitter,this.onDidReceiveMessage=this.onDataEmitter.event,this.onData=this.onDidReceiveMessage,this.onCloseEmitter=new t.EventEmitter,this.onClose=this.onCloseEmitter.event,this.onEndDeferred=new o.DeferredPromise,this.onEnd=this.onEndDeferred.p;let r=Promise.resolve();if(e){const e=this.zip={deflate:(0,u.createDeflateRaw)(),inflate:(0,u.createInflateRaw)()};e.inflate.on("data",(n=>this.onDataEmitter.fire(n))),e.deflate.on("data",(e=>{l.notify("servermsg",{i:n,body:e},this.drains.add())})),this.disposables.push({dispose:()=>{e.deflate.close(),e.inflate.close()}})}this.disposables.push(l.onNotification("serverclose",(({i:l})=>{l===n&&(this.zip?r.then((()=>{this.zip.inflate.close((()=>this.onDidClose()))})):this.onDidClose())})),l.onNotification("servermsg",(({i:l,body:e})=>{if(l===n)if(this.zip){const n=new Promise((n=>this.zip.inflate.write(e,n)));r=r.then((()=>n))}else this.onDataEmitter.fire(e)})))}write(n,l){const e=this.socketId,t=n instanceof ArrayBuffer?new Uint8Array(n):new Uint8Array(n.buffer,n.byteOffset,n.byteLength),u=this.drains.add(),r=()=>{u(),l?.()};this.zip?this.zip.deflate.write(t,void 0,(()=>{this.zip.deflate.flush(2,r)})):this.connection.notify("servermsg",{i:e,body:t},r)}end(){this.disposables.forEach((n=>n.dispose()))}drain(){return this.drains.wait()}onDidClose(){this.onCloseEmitter.fire(),this.onEndDeferred.complete()}}class p{constructor(){this.queue=0,this.drainWaiters=[]}add(){this.queue++;let n=!1;return()=>{n||(n=!0,this.queue--,0===this.queue&&(this.drainWaiters.forEach((n=>n())),this.drainWaiters.length=0))}}wait(){return 0===this.queue?Promise.resolve():new Promise((n=>{this.drainWaiters.push(n)}))}}},(n,l,e)=>{e.r(l),e.d(l,{closedDuplexStream:()=>t});const t={id:0,onData:()=>({dispose:()=>{}}),onDidReceiveMessage:()=>({dispose:()=>{}}),onEnd:Promise.resolve(void 0),write:()=>{},end:()=>{}}},n=>{n.exports=e(3106)},(n,l,e)=>{e.r(l),e.d(l,{ServerWebSocket:()=>o});var t=e(3),u=e(10),r=e(11);class o{constructor(n,l){this.options=n,this.version=l,this.SOCKET_TYPE="Local Proxy Server Socket",this.dispose=[],this.onDataEmitter=new t.EventEmitter,this.onData=this.onDataEmitter.event,this.onOpenEmitter=new t.EventEmitter,this.onOpen=this.onOpenEmitter.event,this.onCloseEmitter=new t.EventEmitter,this.onClose=this.onCloseEmitter.event,this.onErrorEmitter=new t.EventEmitter,this.onError=this.onErrorEmitter.event}send(n){const l=n instanceof ArrayBuffer?new Uint8Array(n):new Uint8Array(n.buffer,n.byteOffset,n.byteLength);this.stream?this.stream.write(l):console.warn(new Error("attempted to send data before socket was open").stack)}close(){this.dispose.forEach((n=>n.dispose()))}onMessage(n){this.onDataEmitter.fire(n)}upgradeToWebSocketConnection(){}async initialize(){const n=await this.options.bearer.checkedAcquire(),l=!!(await this.version).canCompressServerMsg()&&(this.options.compress??!0),e=this.stream=await new r.ExecServer(n).serve({socketId:this.options.socketId,extensions:this.options.extensions||[],quality:this.options.product.quality,commit:this.options.product.commit,archivePath:this.options.archivePath,connectionToken:this.options.connectionToken,compress:l});this.dispose.push(e.onDidReceiveMessage(this.onMessage,this)),this.dispose.push(n.onClose((n=>{n&&this.onErrorEmitter.fire(new u.NetworkError(n)),this.onCloseEmitter.fire()}))),this.upgradeToWebSocketConnection()}}},(n,l,e)=>{e.r(l),e.d(l,{ProxyConnection:()=>y,State:()=>g});var t=e(3),u=e(4),r=e(16),o=e(17),i=e(18),s=e(19),a=e(20),c=e(21),d=e(2),h=e(5),f=e(22),p=e(23);const m=!process.env.VSCODE_TUNNELS_DISABLE_PROCESS_REUSE;var g;!function(n){n[n.Idle=0]="Idle",n[n.Connecting=1]="Connecting",n[n.Connected=2]="Connected",n[n.Closed=3]="Closed"}(g||(g={}));class y{constructor(n,l){this.args=n,this.logger=l,this.extraHandlers=new d.CallHandlers,this.registerRequestHandler=this.extraHandlers.register.bind(this.extraHandlers),this.bearerPromise=new h.DeferredPromise,this.bearer=this.bearerPromise.p,this.localPortPromise=new h.DeferredPromise,this.localPort=this.localPortPromise.p,this.startEmitter=new t.EventEmitter,this.onStartConnecting=this.startEmitter.event,this.closeEmitter=new t.EventEmitter,this.onClose=this.closeEmitter.event,this.connectedEmitter=new t.EventEmitter,this.onConnected=this.connectedEmitter.event,this.logEmitter=new t.EventEmitter,this.onLog=this.logEmitter.event,this._state=g.Idle,this.initialize(),this.bearer.catch((n=>{this.closeEmitter.fire(n)}))}get state(){return this._state}static async create(n){const l=y.getPathForRunningProxyInTmpDir(n.nonce),e={args:n.args,productInfo:n.productInfo,runningProxyInfoFile:l,extensions:n.extensions},t=await y.getValidProxySocket(l);if(t){n.logger.log(3,`Found running server in ${t}`);try{const l=new w({...e,proxySocketPath:t},n.logger);return n.setup?.(l),await(0,f.timeoutPromise)(5e3,l.callOnProxy("greet",{})),l}catch(l){n.logger.log(3,`Error greeting the server, starting a new instance (${l})`)}}n.logger.log(3,"Creating new tunnel proxy server");const u=function(n,l){const e=(0,o.createHash)("sha256").update(n).update("\0").update(l).digest("hex").slice(0,16);return"win32"===process.platform?`\\\\.\\pipe\\vscode-tunneling-${e}-sock`:process.env.XDG_RUNTIME_DIR?c.join(process.env.XDG_RUNTIME_DIR,`vscode-tunneling-${e}.sock`):c.join(a.tmpdir(),`vscode-tunneling-${e}.sock`)}(n.nonce,(0,o.randomBytes)(20).toString("hex")),r=new v({...e,proxySocketPath:u},n.logger,n.serverPath);return n.setup?.(r),r}static async getValidProxySocket(n){try{const l=JSON.parse(await i.promises.readFile(n,"utf-8"));if(l.at>Date.now()-p.proxyFileTimeout)return await i.promises.stat(l.socket),l.socket}catch{}}static getPathForRunningProxyInTmpDir(n){const l=`vscode-server-proxy-${(0,o.createHash)("sha256").update(n).digest("hex").slice(0,16)}-daemon`;return c.join(a.tmpdir(),l)}async callOnProxy(n,l){return(await this.bearer).call(n,l)}async call(n,l,e,t){return(await this.bearer).call("calltunnel",{method:n,params:l,stream:!!t},e,t)}async initialize(){this.connectToProxyServer();const n=await this.bearer;n.onNotification("serverlog",(n=>{this.logger.log(n.level,`[server] ${n.line}`),this.logEmitter.fire(n)})),n.onNotification("proxylog",(n=>this.logger.log(n.level,`[proxy] ${n.message}`,...n.args))),n.onNotification("statechange",(n=>{switch(n.state){case"connecting":this._state=g.Connecting,this.startEmitter.fire();break;case"connected":this._state=g.Connected,this.connectedEmitter.fire();break;case"closed":let l;this._state=g.Closed,n.reason&&(l=new Error(n.reason.message),l.stack=n.reason.stack||l.stack),this.closeEmitter.fire(l)}})),n.onClose((n=>{this.closeEmitter.fire(n)}))}connectToProxyServer(){let n,l=!1;const e=()=>{l=!1,n?.destroy(),n=void 0},t=()=>{l||(e(),n=s.connect(this.args.proxySocketPath),n.on("connect",(async()=>{l=!0,this.bearerPromise.complete(new d.Connection(n,u.encode,this.extraHandlers)),this.getPortOfTunnelProxyServer()})),n.on("error",(n=>{e()})))};let r;const o=()=>{t(),r&&clearTimeout(r),r=setTimeout((async()=>{l||o()}),500)};o()}async getPortOfTunnelProxyServer(){const n=await this.bearer,l=(await n.call("getlocalport",{})).value;this.localPortPromise.complete(l)}async dispose(){(await this.bearer).dispose()}}y.State=g;class v extends y{constructor(n,l,e){const t=r.spawn(process.execPath,[e],{detached:m,stdio:m?"ignore":"pipe",env:{...process.env,VSCODE_TUNNEL_ARGS:JSON.stringify(n)}});t.stdout?.on("data",(n=>console.log("Proxy process stdout:",n.toString().trim()))),t.stderr?.on("data",(n=>console.log("Proxy process stderr:",n.toString().trim()))),m&&t.unref(),super(n,l)}}class w extends y{}},n=>{n.exports=e(5317)},n=>{n.exports=e(6982)},n=>{n.exports=e(9896)},n=>{n.exports=e(9278)},n=>{n.exports=e(857)},n=>{n.exports=e(6928)},(n,l,e)=>{e.r(l),e.d(l,{timeoutPromise:()=>t});const t=(n,l)=>new Promise(((e,t)=>{const u=setTimeout((()=>{t(new Error("Operation timed out"))}),n);l.finally((()=>clearTimeout(u))).then(e,t)}))},(n,l,e)=>{e.r(l),e.d(l,{proxyFileTimeout:()=>t});const t=6e3},(n,l,e)=>{e.r(l),e.d(l,{ProxyServer:()=>c});var t=e(4),u=e(18),r=e(19),o=e(5),i=e(2),s=e(14),a=e(25);class c{constructor(n){this._options=n,this.serverConnections=new Set,this.disposables=[],this.setupPromise=new o.DeferredPromise,this.setup=this.setupPromise.p,this.didSetup=!1,this.connectionCount=0,this.connectionIdCounter=0,this.args=n.args,this.proxyServer=r.createServer((async n=>{await this.onProxyConnection(n)})),this.disposables.push({dispose:()=>this.proxyServer.close()}),this.controlServer=r.createServer((async n=>{await this.onServerConnection(n)})),this.disposables.push({dispose:()=>this.controlServer.close()}),this.initialize().catch((n=>{this.log(5,`Failed to initialize proxy server: ${n}}`),console.error(n),process.exit(1)})),this.startSavingRunningInfo(),this.delayShutdown(9e4)}incrementConnectionCount(){this.connectionCount+=1,this.shutdownTimer&&(clearTimeout(this.shutdownTimer),this.shutdownTimer=void 0)}decrementConnectionCount(){this.connectionCount-=1,0===this.connectionCount&&this.delayShutdown(3e4)}static readArgsFromEnvironment(){return JSON.parse(process.env.VSCODE_TUNNEL_ARGS)}getWebSocket(n,l){return new s.ServerWebSocket(l,n.version)}onDidSetUpServerConnection(n){}async initialize(){await Promise.all([new Promise(((n,l)=>{this.proxyServer.listen(0,"127.0.0.1",(()=>n())),this.proxyServer.on("error",l)})),new Promise(((n,l)=>{this.controlServer.listen(this._options.proxySocketPath,n),this.controlServer.on("error",l)}))])}delayShutdown(n=3e4){this.shutdownTimer&&clearTimeout(this.shutdownTimer),this.shutdownTimer=setTimeout((()=>{this.dispose(),this.log(2,"Timed out, shutting down"),process.exit(0)}),n)}async onServerConnection(n){this.log(2,"Server connection from:  ",n.localAddress," ",n.localPort),this.incrementConnectionCount();const l=new i.Connection(n,t.encode);this.didSetup||this.acquireTunnel(l),this.serverConnections.add(l),l.onClose((n=>{this.log(2,`Server connection closed (err: ${n})`),this.serverConnections.delete(l),this.decrementConnectionCount()})),l.registerRequestHandler("greet",(()=>(this.log(2,"Server greeted"),Promise.resolve({})))),l.registerRequestHandler("getlocalport",(async()=>({value:this.proxyServer.address().port}))),l.onNotification("stream_data",(n=>l.notify("stream_data",n))),l.onNotification("stream_ended",(n=>l.notify("stream_ended",n))),l.registerRequestHandler("calltunnel",(async({method:n,params:e,stream:t},u)=>(await this.setup).call(n,e,void 0,t?n=>{l.notify("streams_started",{for_request_id:u,stream_ids:[n.id]}),n.onDidReceiveMessage((e=>l.notify("stream_data",{segment:e,stream:n.id}))),n.onEnd.then((()=>l.notify("stream_ended",{stream:n.id})))}:void 0))),this.onDidSetUpServerConnection(l),this.lastState&&l.notify("statechange",this.lastState)}async onProxyConnection(n){const l=`[connection.${this.connectionIdCounter++}]`;this.log(2,`${l} connection from:  ${n.localAddress} ${n.localPort}`),this.incrementConnectionCount();const e=(0,a.writeBuffer)();let t;n.on("data",(n=>e.write(n))),n.on("close",(()=>{t?.close(),this.decrementConnectionCount()}));try{const n=await this.setup,l=this.getWebSocket(n,{bearer:n.bearer,product:this._options.productInfo,extensions:this._options.extensions,socketId:n.nextSocketId(),compress:!0});await l.initialize(),t=l}catch(n){return this.log(5,`${l} error setting up websocket: ${n}`),void this.setState({state:"closed",reason:{message:n.message,stack:n.stack}})}e.connect((n=>t.send(n))),this.disposables.push(t.onData((l=>n.write(new Uint8Array(l)))),t.onError((n=>{this.log(5,`${l} tunnel connection error: ${n}`)})),t.onClose((()=>{this.log(5,`${l} tunnel connection ended`),n.end()}))),this.log(3,`${l} tunnel connection established`)}async acquireTunnel(n){let l;try{l=await this.createConnectionManager(n)}catch(n){return this.log(5,n.message),this.setState({state:"closed",reason:{message:n.message,stack:n.stack}})}this.setupPromise.complete(l),l.onLog((n=>{this.serverConnections.forEach((l=>{l.notify("serverlog",n)}))})),l.onStartConnecting((()=>{this.log(2,"Tunnel started connecting"),this.setState({state:"connecting"})})),l.onConnected((()=>{this.log(3,"Tunnel connection successful"),this.setState({state:"connected"})})),l.onClose((n=>{this.log(5,`Tunnel connection closed with: ${n?.message}`),this.setState({state:"closed",reason:{message:n?.message||"Remote server disconnected"}})}))}setState(n){if(n.state!==this.lastState?.state){this.lastState=n;for(const l of this.serverConnections)l.notify("statechange",n);"closed"===n.state&&process.exit(1)}}startSavingRunningInfo(){this.log(2,`Saving socket path "${this._options.proxySocketPath}" to daemon in: ${this._options.runningProxyInfoFile}`);const n=()=>JSON.stringify({at:Date.now(),socket:this._options.proxySocketPath,pid:process.pid});u.writeFileSync(this._options.runningProxyInfoFile,n());const l=setInterval((()=>u.writeFile(this._options.runningProxyInfoFile,n(),(()=>{}))),3e3);this.disposables.push({dispose:()=>{clearInterval(l);try{u.rmSync(this._options.runningProxyInfoFile)}catch{}}})}log(n,l,...e){for(const t of this.serverConnections)t.notify("proxylog",{level:n,message:l,args:e})}dispose(){this.serverConnections.forEach((n=>{n.notify("statechange",{state:"closed",reason:new Error("Disposing proxy server.")}),n.dispose()})),this.disposables.forEach((n=>n.dispose()))}}},(n,l,e)=>{e.r(l),e.d(l,{writeBuffer:()=>t});const t=()=>{let n=[];return{write:l=>{n.push(l)},connect(l){for(const e of n)l(e);this.write=l,n=void 0}}}}],t={};function u(l){var e=t[l];if(void 0!==e)return e.exports;var r=t[l]={exports:{}};return n[l](r,r.exports,u),r.exports}u.n=n=>{var l=n&&n.__esModule?()=>n.default:()=>n;return u.d(l,{a:l}),l},u.d=(n,l)=>{for(var e in l)u.o(l,e)&&!u.o(n,e)&&Object.defineProperty(n,e,{enumerable:!0,get:l[e]})},u.o=(n,l)=>Object.prototype.hasOwnProperty.call(n,l),u.r=n=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})};var r={};(()=>{u.r(r),u.d(r,{CallHandlers:()=>n.CallHandlers,Connection:()=>n.Connection,ConnectionBearer:()=>n.ConnectionBearer,ConnectionManager:()=>n.ConnectionManager,DeferredPromise:()=>n.DeferredPromise,ExecServer:()=>n.ExecServer,FileSystemProviderErrorCode:()=>n.FileSystemProviderErrorCode,FileType:()=>n.FileType,NetworkError:()=>n.NetworkError,ProxyConnection:()=>l.ProxyConnection,ProxyServer:()=>e.ProxyServer,RPCError:()=>n.RPCError,RemoteVersion:()=>n.RemoteVersion,ServerWebSocket:()=>n.ServerWebSocket,State:()=>l.State,TimeoutError:()=>n.TimeoutError,closedDuplexStream:()=>n.closedDuplexStream,msgPackEncode:()=>n.msgPackEncode});var n=u(1),l=u(15),e=u(24)})();var o=l;for(var i in r)o[i]=r[i];r.__esModule&&Object.defineProperty(o,"__esModule",{value:!0})})()},5396:function(n,l,e){"use strict";var t=this&&this.__createBinding||(Object.create?function(n,l,e,t){void 0===t&&(t=e);var u=Object.getOwnPropertyDescriptor(l,e);u&&!("get"in u?!l.__esModule:u.writable||u.configurable)||(u={enumerable:!0,get:function(){return l[e]}}),Object.defineProperty(n,t,u)}:function(n,l,e,t){void 0===t&&(t=e),n[t]=l[e]}),u=this&&this.__setModuleDefault||(Object.create?function(n,l){Object.defineProperty(n,"default",{enumerable:!0,value:l})}:function(n,l){n.default=l}),r=this&&this.__importStar||function(n){if(n&&n.__esModule)return n;var l={};if(null!=n)for(var e in n)"default"!==e&&Object.prototype.hasOwnProperty.call(n,e)&&t(l,n,e);return u(l,n),l};Object.defineProperty(l,"__esModule",{value:!0}),l.oneDataSystemClientFactory=void 0,l.oneDataSystemClientFactory=async(n,l,t)=>{let u=await(async(n,l,t)=>{const u=await Promise.resolve().then((()=>r(e(670)))),o=await Promise.resolve().then((()=>r(e(8916)))),i=new u.AppInsightsCore,s=new o.PostChannel,a={instrumentationKey:n,endpointUrl:"https://mobile.events.data.microsoft.com/OneCollector/1.0",loggingLevelTelemetry:0,loggingLevelConsole:0,disableCookiesUsage:!0,disableDbgExt:!0,disableInstrumentationKeyValidation:!0,channels:[[s]]};if(t){a.extensionConfig={};const n={alwaysUseXhrOverride:!0,httpXHROverride:t};a.extensionConfig[s.identifier]=n}const c=l.workspace.getConfiguration("telemetry").get("internalTesting");return i.initialize(a,[]),i.addTelemetryInitializer((n=>{c&&(n.ext=n.ext??{},n.ext.utc=n.ext.utc??{},n.ext.utc.flags=8462029)})),i})(n,l,t);return{logEvent:(n,l)=>{try{u?.track({name:n,baseData:{name:n,properties:l?.properties,measurements:l?.measurements}})}catch(n){throw new Error("Failed to log event to app insights!\n"+n.message)}},flush:async()=>{try{return new Promise(((n,l)=>{u?u.flush(!0,(n=>{n||l("Failed to flush app 1DS!")})):n()}))}catch(n){throw new Error("Failed to flush 1DS!\n"+n.message)}},dispose:async()=>new Promise((n=>{u?u.unload(!1,(()=>{n(),u=void 0}),1e3):n()}))}}},2468:function(n,l,e){"use strict";var t=this&&this.__createBinding||(Object.create?function(n,l,e,t){void 0===t&&(t=e);var u=Object.getOwnPropertyDescriptor(l,e);u&&!("get"in u?!l.__esModule:u.writable||u.configurable)||(u={enumerable:!0,get:function(){return l[e]}}),Object.defineProperty(n,t,u)}:function(n,l,e,t){void 0===t&&(t=e),n[t]=l[e]}),u=this&&this.__setModuleDefault||(Object.create?function(n,l){Object.defineProperty(n,"default",{enumerable:!0,value:l})}:function(n,l){n.default=l}),r=this&&this.__importStar||function(n){if(n&&n.__esModule)return n;var l={};if(null!=n)for(var e in n)"default"!==e&&Object.prototype.hasOwnProperty.call(n,e)&&t(l,n,e);return u(l,n),l};Object.defineProperty(l,"__esModule",{value:!0}),l.appInsightsClientFactory=void 0;const o=e(740),i=e(8393);l.appInsightsClientFactory=async(n,l,t)=>{let u;try{const t=await Promise.resolve().then((()=>r(e(1380))));if(u=new t.ApplicationInsights({instrumentationKey:n,disableAjaxTracking:!0,disableExceptionTracking:!0,disableFetchTracking:!0,disableCorrelationHeaders:!0,disableCookiesUsage:!0,autoTrackPageVisitTime:!1,emitLineDelimitedJson:!1,disableInstrumentationKeyValidation:!0}),l){u.config.extensionConfig={};const n={alwaysUseXhrOverride:!0,httpXHROverride:l};u.config.extensionConfig[o.BreezeChannelIdentifier]=n}}catch(n){return Promise.reject(n)}return{logEvent:(n,l)=>{const e={...l?.properties,...l?.measurements};t?.length&&i.TelemetryUtil.applyReplacements(e,t),u?.track({name:n,data:e,baseType:"EventData",baseData:{name:n,properties:l?.properties,measurements:l?.measurements}})},flush:async()=>{u?.flush(!1)},dispose:async()=>new Promise((n=>{u?.unload(!0,(()=>{n(),u=void 0}),1e3)}))}}},6548:(n,l)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.BaseTelemetryReporter=void 0,l.BaseTelemetryReporter=class{constructor(n,l,e){this.telemetrySender=n,this.vscodeAPI=l,this.userOptIn=!1,this.errorOptIn=!1,this.disposables=[],this._onDidChangeTelemetryLevel=new this.vscodeAPI.EventEmitter,this.onDidChangeTelemetryLevel=this._onDidChangeTelemetryLevel.event,this.telemetryLogger=this.vscodeAPI.env.createTelemetryLogger(this.telemetrySender,e),this.updateUserOptIn(),this.telemetryLogger.onDidChangeEnableStates((()=>{this.updateUserOptIn()}))}updateUserOptIn(){this.errorOptIn=this.telemetryLogger.isErrorsEnabled,this.userOptIn=this.telemetryLogger.isUsageEnabled,(this.telemetryLogger.isErrorsEnabled||this.telemetryLogger.isUsageEnabled)&&this.telemetrySender.instantiateSender(),this._onDidChangeTelemetryLevel.fire(this.telemetryLevel)}get telemetryLevel(){return this.errorOptIn&&this.userOptIn?"all":this.errorOptIn?"error":"off"}internalSendTelemetryEvent(n,l,e,t){t?this.telemetrySender.sendEventData(n,{properties:l,measurements:e}):this.telemetryLogger.logUsage(n,{properties:l,measurements:e})}sendTelemetryEvent(n,l,e){this.internalSendTelemetryEvent(n,l,e,!1)}sendRawTelemetryEvent(n,l,e){const t={...l};for(const n of Object.keys(t??{})){const l=t[n];"string"==typeof n&&void 0!==l&&(t[n]=new this.vscodeAPI.TelemetryTrustedValue("string"==typeof l?l:l.value))}this.sendTelemetryEvent(n,t,e)}sendDangerousTelemetryEvent(n,l,e){this.telemetrySender.instantiateSender(),this.internalSendTelemetryEvent(n,l,e,!0)}internalSendTelemetryErrorEvent(n,l,e,t){t?this.telemetrySender.sendEventData(n,{properties:l,measurements:e}):this.telemetryLogger.logError(n,{properties:l,measurements:e})}sendTelemetryErrorEvent(n,l,e){this.internalSendTelemetryErrorEvent(n,l,e,!1)}sendDangerousTelemetryErrorEvent(n,l,e){this.telemetrySender.instantiateSender(),this.internalSendTelemetryErrorEvent(n,l,e,!0)}async dispose(){return await this.telemetrySender.dispose(),this.telemetryLogger.dispose(),Promise.all(this.disposables.map((n=>n.dispose())))}}},2396:(n,l)=>{"use strict";var e;Object.defineProperty(l,"__esModule",{value:!0}),l.BaseTelemetrySender=void 0,function(n){n[n.NOT_INSTANTIATED=0]="NOT_INSTANTIATED",n[n.INSTANTIATING=1]="INSTANTIATING",n[n.INSTANTIATED=2]="INSTANTIATED"}(e||(e={})),l.BaseTelemetrySender=class{constructor(n,l){this._instantiationStatus=e.NOT_INSTANTIATED,this._eventQueue=[],this._exceptionQueue=[],this._clientFactory=l,this._key=n}sendEventData(n,l){this._telemetryClient?this._telemetryClient.logEvent(n,l):this._instantiationStatus!==e.INSTANTIATED&&this._eventQueue.push({eventName:n,data:l})}sendErrorData(n,l){if(!this._telemetryClient)return void(this._instantiationStatus!==e.INSTANTIATED&&this._exceptionQueue.push({exception:n,data:l}));const t={stack:n.stack,message:n.message,name:n.name};l?l.properties={...l.properties,...t}:l={properties:t},this._telemetryClient.logEvent("unhandlederror",l)}async flush(){return this._telemetryClient?.flush()}async dispose(){this._telemetryClient&&(await this._telemetryClient.dispose(),this._telemetryClient=void 0)}_flushQueues(){this._eventQueue.forEach((({eventName:n,data:l})=>this.sendEventData(n,l))),this._eventQueue=[],this._exceptionQueue.forEach((({exception:n,data:l})=>this.sendErrorData(n,l))),this._exceptionQueue=[]}instantiateSender(){this._instantiationStatus===e.NOT_INSTANTIATED&&(this._instantiationStatus=e.INSTANTIATING,this._clientFactory(this._key).then((n=>{this._telemetryClient=n,this._instantiationStatus=e.INSTANTIATED,this._flushQueues()})).catch((n=>{console.error(n),this._instantiationStatus=e.INSTANTIATED})))}}},8393:(n,l)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.TelemetryUtil=void 0;class e{static applyReplacements(n,l){for(const e of Object.keys(n))for(const t of l)t.lookup.test(e)&&(void 0!==t.replacementString?n[e]=t.replacementString:delete n[e])}static shouldUseOneDataSystemSDK(n){return 74===n.length&&"-"===n[32]&&"-"===n[41]&&"-"===n[46]&&"-"===n[51]&&"-"===n[56]&&"-"===n[69]}static getAdditionalCommonProperties(n){return{"common.os":n.platform,"common.nodeArch":n.architecture,"common.platformversion":(n.release||"").replace(/^(\d+)(\.\d+)?(\.\d+)?(.*)/,"$1$2$3"),"common.telemetryclientversion":"0.9.0"}}static getInstance(){return e._instance||(e._instance=new e),e._instance}}l.TelemetryUtil=e},1170:function(n,l,e){"use strict";var t=this&&this.__createBinding||(Object.create?function(n,l,e,t){void 0===t&&(t=e);var u=Object.getOwnPropertyDescriptor(l,e);u&&!("get"in u?!l.__esModule:u.writable||u.configurable)||(u={enumerable:!0,get:function(){return l[e]}}),Object.defineProperty(n,t,u)}:function(n,l,e,t){void 0===t&&(t=e),n[t]=l[e]}),u=this&&this.__setModuleDefault||(Object.create?function(n,l){Object.defineProperty(n,"default",{enumerable:!0,value:l})}:function(n,l){n.default=l}),r=this&&this.__importStar||function(n){if(n&&n.__esModule)return n;var l={};if(null!=n)for(var e in n)"default"!==e&&Object.prototype.hasOwnProperty.call(n,e)&&t(l,n,e);return u(l,n),l};Object.defineProperty(l,"__esModule",{value:!0});const o=r(e(857)),i=r(e(1398)),s=r(e(5692)),a=e(6548),c=e(2396),d=e(8393),h=e(5396),f=e(2468);function p(){return{sendPOST:(n,l)=>{const e={method:"POST",headers:{...n.headers,"Content-Type":"application/json","Content-Length":Buffer.byteLength(n.data)}};try{const t=s.request(n.urlString,e,(n=>{n.on("data",(function(e){l(n.statusCode??200,n.headers,e.toString())})),n.on("error",(function(){l(0,{})}))}));t.write(n.data,(n=>{n&&l(0,{})})),t.end()}catch{l(0,{})}}}}class m extends a.BaseTelemetryReporter{constructor(n,l){let e=n=>(0,f.appInsightsClientFactory)(n,p(),l);d.TelemetryUtil.shouldUseOneDataSystemSDK(n)&&(e=n=>(0,h.oneDataSystemClientFactory)(n,i,p()));const t={release:o.release(),platform:o.platform(),architecture:o.arch()},u=new c.BaseTelemetrySender(n,e);if(n&&0===n.indexOf("AIF-"))throw new Error("AIF keys are no longer supported. Please switch to 1DS keys for 1st party extensions");super(u,i,{additionalCommonProperties:d.TelemetryUtil.getAdditionalCommonProperties(t)})}}l.default=m},544:function(n,l,e){"use strict";var t=this&&this.__createBinding||(Object.create?function(n,l,e,t){void 0===t&&(t=e);var u=Object.getOwnPropertyDescriptor(l,e);u&&!("get"in u?!l.__esModule:u.writable||u.configurable)||(u={enumerable:!0,get:function(){return l[e]}}),Object.defineProperty(n,t,u)}:function(n,l,e,t){void 0===t&&(t=e),n[t]=l[e]}),u=this&&this.__setModuleDefault||(Object.create?function(n,l){Object.defineProperty(n,"default",{enumerable:!0,value:l})}:function(n,l){n.default=l}),r=this&&this.__importStar||function(n){if(n&&n.__esModule)return n;var l={};if(null!=n)for(var e in n)"default"!==e&&Object.prototype.hasOwnProperty.call(n,e)&&t(l,n,e);return u(l,n),l};Object.defineProperty(l,"__esModule",{value:!0}),l.req=l.json=l.toBuffer=void 0;const o=r(e(8611)),i=r(e(5692));async function s(n){let l=0;const e=[];for await(const t of n)l+=t.length,e.push(t);return Buffer.concat(e,l)}l.toBuffer=s,l.json=async function(n){const l=(await s(n)).toString("utf8");try{return JSON.parse(l)}catch(n){const e=n;throw e.message+=` (input: ${l})`,e}},l.req=function(n,l={}){const e=(("string"==typeof n?n:n.href).startsWith("https:")?i:o).request(n,l),t=new Promise(((n,l)=>{e.once("response",n).once("error",l).end()}));return e.then=t.then.bind(t),e}},917:function(n,l,e){"use strict";var t=this&&this.__createBinding||(Object.create?function(n,l,e,t){void 0===t&&(t=e);var u=Object.getOwnPropertyDescriptor(l,e);u&&!("get"in u?!l.__esModule:u.writable||u.configurable)||(u={enumerable:!0,get:function(){return l[e]}}),Object.defineProperty(n,t,u)}:function(n,l,e,t){void 0===t&&(t=e),n[t]=l[e]}),u=this&&this.__setModuleDefault||(Object.create?function(n,l){Object.defineProperty(n,"default",{enumerable:!0,value:l})}:function(n,l){n.default=l}),r=this&&this.__importStar||function(n){if(n&&n.__esModule)return n;var l={};if(null!=n)for(var e in n)"default"!==e&&Object.prototype.hasOwnProperty.call(n,e)&&t(l,n,e);return u(l,n),l},o=this&&this.__exportStar||function(n,l){for(var e in n)"default"===e||Object.prototype.hasOwnProperty.call(l,e)||t(l,n,e)};Object.defineProperty(l,"__esModule",{value:!0}),l.Agent=void 0;const i=r(e(8611));o(e(544),l);const s=Symbol("AgentBaseInternalState");class a extends i.Agent{constructor(n){super(n),this[s]={}}isSecureEndpoint(n){if(n){if("boolean"==typeof n.secureEndpoint)return n.secureEndpoint;if("string"==typeof n.protocol)return"https:"===n.protocol}const{stack:l}=new Error;return"string"==typeof l&&l.split("\n").some((n=>-1!==n.indexOf("(https.js:")||-1!==n.indexOf("node:https:")))}createSocket(n,l,e){const t={...l,secureEndpoint:this.isSecureEndpoint(l)};Promise.resolve().then((()=>this.connect(n,t))).then((u=>{if(u instanceof i.Agent)return u.addRequest(n,t);this[s].currentSocket=u,super.createSocket(n,l,e)}),e)}createConnection(){const n=this[s].currentSocket;if(this[s].currentSocket=void 0,!n)throw new Error("No socket was returned in the `connect()` function");return n}get defaultPort(){return this[s].defaultPort??("https:"===this.protocol?443:80)}set defaultPort(n){this[s]&&(this[s].defaultPort=n)}get protocol(){return this[s].protocol??(this.isSecureEndpoint()?"https:":"http:")}set protocol(n){this[s]&&(this[s].protocol=n)}}l.Agent=a},9880:n=>{"use strict";n.exports=({onlyFirst:n=!1}={})=>{const l=["[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)","(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))"].join("|");return new RegExp(l,n?void 0:"g")}},4083:(n,l,e)=>{"use strict";n=e.nmd(n);const t=(n,l)=>(...e)=>`[${n(...e)+l}m`,u=(n,l)=>(...e)=>{const t=n(...e);return`[${38+l};5;${t}m`},r=(n,l)=>(...e)=>{const t=n(...e);return`[${38+l};2;${t[0]};${t[1]};${t[2]}m`},o=n=>n,i=(n,l,e)=>[n,l,e],s=(n,l,e)=>{Object.defineProperty(n,l,{get:()=>{const t=e();return Object.defineProperty(n,l,{value:t,enumerable:!0,configurable:!0}),t},enumerable:!0,configurable:!0})};let a;const c=(n,l,t,u)=>{void 0===a&&(a=e(734));const r=u?10:0,o={};for(const[e,u]of Object.entries(a)){const i="ansi16"===e?"ansi":e;e===l?o[i]=n(t,r):"object"==typeof u&&(o[i]=n(u[l],r))}return o};Object.defineProperty(n,"exports",{enumerable:!0,get:function(){const n=new Map,l={modifier:{reset:[0,0],bold:[1,22],dim:[2,22],italic:[3,23],underline:[4,24],inverse:[7,27],hidden:[8,28],strikethrough:[9,29]},color:{black:[30,39],red:[31,39],green:[32,39],yellow:[33,39],blue:[34,39],magenta:[35,39],cyan:[36,39],white:[37,39],blackBright:[90,39],redBright:[91,39],greenBright:[92,39],yellowBright:[93,39],blueBright:[94,39],magentaBright:[95,39],cyanBright:[96,39],whiteBright:[97,39]},bgColor:{bgBlack:[40,49],bgRed:[41,49],bgGreen:[42,49],bgYellow:[43,49],bgBlue:[44,49],bgMagenta:[45,49],bgCyan:[46,49],bgWhite:[47,49],bgBlackBright:[100,49],bgRedBright:[101,49],bgGreenBright:[102,49],bgYellowBright:[103,49],bgBlueBright:[104,49],bgMagentaBright:[105,49],bgCyanBright:[106,49],bgWhiteBright:[107,49]}};l.color.gray=l.color.blackBright,l.bgColor.bgGray=l.bgColor.bgBlackBright,l.color.grey=l.color.blackBright,l.bgColor.bgGrey=l.bgColor.bgBlackBright;for(const[e,t]of Object.entries(l)){for(const[e,u]of Object.entries(t))l[e]={open:`[${u[0]}m`,close:`[${u[1]}m`},t[e]=l[e],n.set(u[0],u[1]);Object.defineProperty(l,e,{value:t,enumerable:!1})}return Object.defineProperty(l,"codes",{value:n,enumerable:!1}),l.color.close="[39m",l.bgColor.close="[49m",s(l.color,"ansi",(()=>c(t,"ansi16",o,!1))),s(l.color,"ansi256",(()=>c(u,"ansi256",o,!1))),s(l.color,"ansi16m",(()=>c(r,"rgb",i,!1))),s(l.bgColor,"ansi",(()=>c(t,"ansi16",o,!0))),s(l.bgColor,"ansi256",(()=>c(u,"ansi256",o,!0))),s(l.bgColor,"ansi16m",(()=>c(r,"rgb",i,!0))),l}})},8124:n=>{"use strict";const l="[\ud800-\udbff][\udc00-\udfff]";n.exports=n=>n&&n.exact?new RegExp(`^${l}$`):new RegExp(l,"g")},8505:n=>{"use strict";function l(n,l,u){n instanceof RegExp&&(n=e(n,u)),l instanceof RegExp&&(l=e(l,u));var r=t(n,l,u);return r&&{start:r[0],end:r[1],pre:u.slice(0,r[0]),body:u.slice(r[0]+n.length,r[1]),post:u.slice(r[1]+l.length)}}function e(n,l){var e=l.match(n);return e?e[0]:null}function t(n,l,e){var t,u,r,o,i,s=e.indexOf(n),a=e.indexOf(l,s+1),c=s;if(s>=0&&a>0){if(n===l)return[s,a];for(t=[],r=e.length;c>=0&&!i;)c==s?(t.push(c),s=e.indexOf(n,c+1)):1==t.length?i=[t.pop(),a]:((u=t.pop())<r&&(r=u,o=a),a=e.indexOf(l,c+1)),c=s<a&&s>=0?s:a;t.length&&(i=[r,o])}return i}n.exports=l,l.range=t},8928:(n,l,e)=>{var t=e(8505);n.exports=function(n){return n?("{}"===n.substr(0,2)&&(n="\\{\\}"+n.substr(2)),g(function(n){return n.split("\\\\").join(u).split("\\{").join(r).split("\\}").join(o).split("\\,").join(i).split("\\.").join(s)}(n),!0).map(c)):[]};var u="\0SLASH"+Math.random()+"\0",r="\0OPEN"+Math.random()+"\0",o="\0CLOSE"+Math.random()+"\0",i="\0COMMA"+Math.random()+"\0",s="\0PERIOD"+Math.random()+"\0";function a(n){return parseInt(n,10)==n?parseInt(n,10):n.charCodeAt(0)}function c(n){return n.split(u).join("\\").split(r).join("{").split(o).join("}").split(i).join(",").split(s).join(".")}function d(n){if(!n)return[""];var l=[],e=t("{","}",n);if(!e)return n.split(",");var u=e.pre,r=e.body,o=e.post,i=u.split(",");i[i.length-1]+="{"+r+"}";var s=d(o);return o.length&&(i[i.length-1]+=s.shift(),i.push.apply(i,s)),l.push.apply(l,i),l}function h(n){return"{"+n+"}"}function f(n){return/^-?0\d/.test(n)}function p(n,l){return n<=l}function m(n,l){return n>=l}function g(n,l){var e=[],u=t("{","}",n);if(!u)return[n];var r=u.pre,i=u.post.length?g(u.post,!1):[""];if(/\$$/.test(u.pre))for(var s=0;s<i.length;s++){var c=r+"{"+u.body+"}"+i[s];e.push(c)}else{var y,v,w=/^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(u.body),b=/^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(u.body),S=w||b,C=u.body.indexOf(",")>=0;if(!S&&!C)return u.post.match(/,.*\}/)?g(n=u.pre+"{"+u.body+o+u.post):[n];if(S)y=u.body.split(/\.\./);else if(1===(y=d(u.body)).length&&1===(y=g(y[0],!1).map(h)).length)return i.map((function(n){return u.pre+y[0]+n}));if(S){var D=a(y[0]),E=a(y[1]),_=Math.max(y[0].length,y[1].length),k=3==y.length?Math.abs(a(y[2])):1,x=p;E<D&&(k*=-1,x=m);var T=y.some(f);v=[];for(var P=D;x(P,E);P+=k){var I;if(b)"\\"===(I=String.fromCharCode(P))&&(I="");else if(I=String(P),T){var A=_-I.length;if(A>0){var O=new Array(A+1).join("0");I=P<0?"-"+O+I.slice(1):O+I}}v.push(I)}}else{v=[];for(var R=0;R<y.length;R++)v.push.apply(v,g(y[R],!1))}for(R=0;R<v.length;R++)for(s=0;s<i.length;s++)c=r+v[R]+i[s],(!l||S||c)&&e.push(c)}return e}},5659:(n,l,e)=>{const t=e(8156),u={};for(const n of Object.keys(t))u[t[n]]=n;const r={rgb:{channels:3,labels:"rgb"},hsl:{channels:3,labels:"hsl"},hsv:{channels:3,labels:"hsv"},hwb:{channels:3,labels:"hwb"},cmyk:{channels:4,labels:"cmyk"},xyz:{channels:3,labels:"xyz"},lab:{channels:3,labels:"lab"},lch:{channels:3,labels:"lch"},hex:{channels:1,labels:["hex"]},keyword:{channels:1,labels:["keyword"]},ansi16:{channels:1,labels:["ansi16"]},ansi256:{channels:1,labels:["ansi256"]},hcg:{channels:3,labels:["h","c","g"]},apple:{channels:3,labels:["r16","g16","b16"]},gray:{channels:1,labels:["gray"]}};n.exports=r;for(const n of Object.keys(r)){if(!("channels"in r[n]))throw new Error("missing channels property: "+n);if(!("labels"in r[n]))throw new Error("missing channel labels property: "+n);if(r[n].labels.length!==r[n].channels)throw new Error("channel and label counts mismatch: "+n);const{channels:l,labels:e}=r[n];delete r[n].channels,delete r[n].labels,Object.defineProperty(r[n],"channels",{value:l}),Object.defineProperty(r[n],"labels",{value:e})}r.rgb.hsl=function(n){const l=n[0]/255,e=n[1]/255,t=n[2]/255,u=Math.min(l,e,t),r=Math.max(l,e,t),o=r-u;let i,s;r===u?i=0:l===r?i=(e-t)/o:e===r?i=2+(t-l)/o:t===r&&(i=4+(l-e)/o),i=Math.min(60*i,360),i<0&&(i+=360);const a=(u+r)/2;return s=r===u?0:a<=.5?o/(r+u):o/(2-r-u),[i,100*s,100*a]},r.rgb.hsv=function(n){let l,e,t,u,r;const o=n[0]/255,i=n[1]/255,s=n[2]/255,a=Math.max(o,i,s),c=a-Math.min(o,i,s),d=function(n){return(a-n)/6/c+.5};return 0===c?(u=0,r=0):(r=c/a,l=d(o),e=d(i),t=d(s),o===a?u=t-e:i===a?u=1/3+l-t:s===a&&(u=2/3+e-l),u<0?u+=1:u>1&&(u-=1)),[360*u,100*r,100*a]},r.rgb.hwb=function(n){const l=n[0],e=n[1];let t=n[2];const u=r.rgb.hsl(n)[0],o=1/255*Math.min(l,Math.min(e,t));return t=1-1/255*Math.max(l,Math.max(e,t)),[u,100*o,100*t]},r.rgb.cmyk=function(n){const l=n[0]/255,e=n[1]/255,t=n[2]/255,u=Math.min(1-l,1-e,1-t);return[100*((1-l-u)/(1-u)||0),100*((1-e-u)/(1-u)||0),100*((1-t-u)/(1-u)||0),100*u]},r.rgb.keyword=function(n){const l=u[n];if(l)return l;let e,r=1/0;for(const l of Object.keys(t)){const u=(i=t[l],((o=n)[0]-i[0])**2+(o[1]-i[1])**2+(o[2]-i[2])**2);u<r&&(r=u,e=l)}var o,i;return e},r.keyword.rgb=function(n){return t[n]},r.rgb.xyz=function(n){let l=n[0]/255,e=n[1]/255,t=n[2]/255;return l=l>.04045?((l+.055)/1.055)**2.4:l/12.92,e=e>.04045?((e+.055)/1.055)**2.4:e/12.92,t=t>.04045?((t+.055)/1.055)**2.4:t/12.92,[100*(.4124*l+.3576*e+.1805*t),100*(.2126*l+.7152*e+.0722*t),100*(.0193*l+.1192*e+.9505*t)]},r.rgb.lab=function(n){const l=r.rgb.xyz(n);let e=l[0],t=l[1],u=l[2];return e/=95.047,t/=100,u/=108.883,e=e>.008856?e**(1/3):7.787*e+16/116,t=t>.008856?t**(1/3):7.787*t+16/116,u=u>.008856?u**(1/3):7.787*u+16/116,[116*t-16,500*(e-t),200*(t-u)]},r.hsl.rgb=function(n){const l=n[0]/360,e=n[1]/100,t=n[2]/100;let u,r,o;if(0===e)return o=255*t,[o,o,o];u=t<.5?t*(1+e):t+e-t*e;const i=2*t-u,s=[0,0,0];for(let n=0;n<3;n++)r=l+1/3*-(n-1),r<0&&r++,r>1&&r--,o=6*r<1?i+6*(u-i)*r:2*r<1?u:3*r<2?i+(u-i)*(2/3-r)*6:i,s[n]=255*o;return s},r.hsl.hsv=function(n){const l=n[0];let e=n[1]/100,t=n[2]/100,u=e;const r=Math.max(t,.01);return t*=2,e*=t<=1?t:2-t,u*=r<=1?r:2-r,[l,100*(0===t?2*u/(r+u):2*e/(t+e)),(t+e)/2*100]},r.hsv.rgb=function(n){const l=n[0]/60,e=n[1]/100;let t=n[2]/100;const u=Math.floor(l)%6,r=l-Math.floor(l),o=255*t*(1-e),i=255*t*(1-e*r),s=255*t*(1-e*(1-r));switch(t*=255,u){case 0:return[t,s,o];case 1:return[i,t,o];case 2:return[o,t,s];case 3:return[o,i,t];case 4:return[s,o,t];case 5:return[t,o,i]}},r.hsv.hsl=function(n){const l=n[0],e=n[1]/100,t=n[2]/100,u=Math.max(t,.01);let r,o;o=(2-e)*t;const i=(2-e)*u;return r=e*u,r/=i<=1?i:2-i,r=r||0,o/=2,[l,100*r,100*o]},r.hwb.rgb=function(n){const l=n[0]/360;let e=n[1]/100,t=n[2]/100;const u=e+t;let r;u>1&&(e/=u,t/=u);const o=Math.floor(6*l),i=1-t;r=6*l-o,1&o&&(r=1-r);const s=e+r*(i-e);let a,c,d;switch(o){default:case 6:case 0:a=i,c=s,d=e;break;case 1:a=s,c=i,d=e;break;case 2:a=e,c=i,d=s;break;case 3:a=e,c=s,d=i;break;case 4:a=s,c=e,d=i;break;case 5:a=i,c=e,d=s}return[255*a,255*c,255*d]},r.cmyk.rgb=function(n){const l=n[0]/100,e=n[1]/100,t=n[2]/100,u=n[3]/100;return[255*(1-Math.min(1,l*(1-u)+u)),255*(1-Math.min(1,e*(1-u)+u)),255*(1-Math.min(1,t*(1-u)+u))]},r.xyz.rgb=function(n){const l=n[0]/100,e=n[1]/100,t=n[2]/100;let u,r,o;return u=3.2406*l+-1.5372*e+-.4986*t,r=-.9689*l+1.8758*e+.0415*t,o=.0557*l+-.204*e+1.057*t,u=u>.0031308?1.055*u**(1/2.4)-.055:12.92*u,r=r>.0031308?1.055*r**(1/2.4)-.055:12.92*r,o=o>.0031308?1.055*o**(1/2.4)-.055:12.92*o,u=Math.min(Math.max(0,u),1),r=Math.min(Math.max(0,r),1),o=Math.min(Math.max(0,o),1),[255*u,255*r,255*o]},r.xyz.lab=function(n){let l=n[0],e=n[1],t=n[2];return l/=95.047,e/=100,t/=108.883,l=l>.008856?l**(1/3):7.787*l+16/116,e=e>.008856?e**(1/3):7.787*e+16/116,t=t>.008856?t**(1/3):7.787*t+16/116,[116*e-16,500*(l-e),200*(e-t)]},r.lab.xyz=function(n){let l,e,t;e=(n[0]+16)/116,l=n[1]/500+e,t=e-n[2]/200;const u=e**3,r=l**3,o=t**3;return e=u>.008856?u:(e-16/116)/7.787,l=r>.008856?r:(l-16/116)/7.787,t=o>.008856?o:(t-16/116)/7.787,l*=95.047,e*=100,t*=108.883,[l,e,t]},r.lab.lch=function(n){const l=n[0],e=n[1],t=n[2];let u;return u=360*Math.atan2(t,e)/2/Math.PI,u<0&&(u+=360),[l,Math.sqrt(e*e+t*t),u]},r.lch.lab=function(n){const l=n[0],e=n[1],t=n[2]/360*2*Math.PI;return[l,e*Math.cos(t),e*Math.sin(t)]},r.rgb.ansi16=function(n,l=null){const[e,t,u]=n;let o=null===l?r.rgb.hsv(n)[2]:l;if(o=Math.round(o/50),0===o)return 30;let i=30+(Math.round(u/255)<<2|Math.round(t/255)<<1|Math.round(e/255));return 2===o&&(i+=60),i},r.hsv.ansi16=function(n){return r.rgb.ansi16(r.hsv.rgb(n),n[2])},r.rgb.ansi256=function(n){const l=n[0],e=n[1],t=n[2];return l===e&&e===t?l<8?16:l>248?231:Math.round((l-8)/247*24)+232:16+36*Math.round(l/255*5)+6*Math.round(e/255*5)+Math.round(t/255*5)},r.ansi16.rgb=function(n){let l=n%10;if(0===l||7===l)return n>50&&(l+=3.5),l=l/10.5*255,[l,l,l];const e=.5*(1+~~(n>50));return[(1&l)*e*255,(l>>1&1)*e*255,(l>>2&1)*e*255]},r.ansi256.rgb=function(n){if(n>=232){const l=10*(n-232)+8;return[l,l,l]}let l;return n-=16,[Math.floor(n/36)/5*255,Math.floor((l=n%36)/6)/5*255,l%6/5*255]},r.rgb.hex=function(n){const l=(((255&Math.round(n[0]))<<16)+((255&Math.round(n[1]))<<8)+(255&Math.round(n[2]))).toString(16).toUpperCase();return"000000".substring(l.length)+l},r.hex.rgb=function(n){const l=n.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);if(!l)return[0,0,0];let e=l[0];3===l[0].length&&(e=e.split("").map((n=>n+n)).join(""));const t=parseInt(e,16);return[t>>16&255,t>>8&255,255&t]},r.rgb.hcg=function(n){const l=n[0]/255,e=n[1]/255,t=n[2]/255,u=Math.max(Math.max(l,e),t),r=Math.min(Math.min(l,e),t),o=u-r;let i,s;return i=o<1?r/(1-o):0,s=o<=0?0:u===l?(e-t)/o%6:u===e?2+(t-l)/o:4+(l-e)/o,s/=6,s%=1,[360*s,100*o,100*i]},r.hsl.hcg=function(n){const l=n[1]/100,e=n[2]/100,t=e<.5?2*l*e:2*l*(1-e);let u=0;return t<1&&(u=(e-.5*t)/(1-t)),[n[0],100*t,100*u]},r.hsv.hcg=function(n){const l=n[1]/100,e=n[2]/100,t=l*e;let u=0;return t<1&&(u=(e-t)/(1-t)),[n[0],100*t,100*u]},r.hcg.rgb=function(n){const l=n[0]/360,e=n[1]/100,t=n[2]/100;if(0===e)return[255*t,255*t,255*t];const u=[0,0,0],r=l%1*6,o=r%1,i=1-o;let s=0;switch(Math.floor(r)){case 0:u[0]=1,u[1]=o,u[2]=0;break;case 1:u[0]=i,u[1]=1,u[2]=0;break;case 2:u[0]=0,u[1]=1,u[2]=o;break;case 3:u[0]=0,u[1]=i,u[2]=1;break;case 4:u[0]=o,u[1]=0,u[2]=1;break;default:u[0]=1,u[1]=0,u[2]=i}return s=(1-e)*t,[255*(e*u[0]+s),255*(e*u[1]+s),255*(e*u[2]+s)]},r.hcg.hsv=function(n){const l=n[1]/100,e=l+n[2]/100*(1-l);let t=0;return e>0&&(t=l/e),[n[0],100*t,100*e]},r.hcg.hsl=function(n){const l=n[1]/100,e=n[2]/100*(1-l)+.5*l;let t=0;return e>0&&e<.5?t=l/(2*e):e>=.5&&e<1&&(t=l/(2*(1-e))),[n[0],100*t,100*e]},r.hcg.hwb=function(n){const l=n[1]/100,e=l+n[2]/100*(1-l);return[n[0],100*(e-l),100*(1-e)]},r.hwb.hcg=function(n){const l=n[1]/100,e=1-n[2]/100,t=e-l;let u=0;return t<1&&(u=(e-t)/(1-t)),[n[0],100*t,100*u]},r.apple.rgb=function(n){return[n[0]/65535*255,n[1]/65535*255,n[2]/65535*255]},r.rgb.apple=function(n){return[n[0]/255*65535,n[1]/255*65535,n[2]/255*65535]},r.gray.rgb=function(n){return[n[0]/100*255,n[0]/100*255,n[0]/100*255]},r.gray.hsl=function(n){return[0,0,n[0]]},r.gray.hsv=r.gray.hsl,r.gray.hwb=function(n){return[0,100,n[0]]},r.gray.cmyk=function(n){return[0,0,0,n[0]]},r.gray.lab=function(n){return[n[0],0,0]},r.gray.hex=function(n){const l=255&Math.round(n[0]/100*255),e=((l<<16)+(l<<8)+l).toString(16).toUpperCase();return"000000".substring(e.length)+e},r.rgb.gray=function(n){return[(n[0]+n[1]+n[2])/3/255*100]}},734:(n,l,e)=>{const t=e(5659),u=e(8507),r={};Object.keys(t).forEach((n=>{r[n]={},Object.defineProperty(r[n],"channels",{value:t[n].channels}),Object.defineProperty(r[n],"labels",{value:t[n].labels});const l=u(n);Object.keys(l).forEach((e=>{const t=l[e];r[n][e]=function(n){const l=function(...l){const e=l[0];if(null==e)return e;e.length>1&&(l=e);const t=n(l);if("object"==typeof t)for(let n=t.length,l=0;l<n;l++)t[l]=Math.round(t[l]);return t};return"conversion"in n&&(l.conversion=n.conversion),l}(t),r[n][e].raw=function(n){const l=function(...l){const e=l[0];return null==e?e:(e.length>1&&(l=e),n(l))};return"conversion"in n&&(l.conversion=n.conversion),l}(t)}))})),n.exports=r},8507:(n,l,e)=>{const t=e(5659);function u(n,l){return function(e){return l(n(e))}}function r(n,l){const e=[l[n].parent,n];let r=t[l[n].parent][n],o=l[n].parent;for(;l[o].parent;)e.unshift(l[o].parent),r=u(t[l[o].parent][o],r),o=l[o].parent;return r.conversion=e,r}n.exports=function(n){const l=function(n){const l=function(){const n={},l=Object.keys(t);for(let e=l.length,t=0;t<e;t++)n[l[t]]={distance:-1,parent:null};return n}(),e=[n];for(l[n].distance=0;e.length;){const n=e.pop(),u=Object.keys(t[n]);for(let t=u.length,r=0;r<t;r++){const t=u[r],o=l[t];-1===o.distance&&(o.distance=l[n].distance+1,o.parent=n,e.unshift(t))}}return l}(n),e={},u=Object.keys(l);for(let n=u.length,t=0;t<n;t++){const n=u[t];null!==l[n].parent&&(e[n]=r(n,l))}return e}},8156:n=>{"use strict";n.exports={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]}},3371:n=>{"use strict";n.exports=function(){return/\uD83C\uDFF4\uDB40\uDC67\uDB40\uDC62(?:\uDB40\uDC65\uDB40\uDC6E\uDB40\uDC67|\uDB40\uDC73\uDB40\uDC63\uDB40\uDC74|\uDB40\uDC77\uDB40\uDC6C\uDB40\uDC73)\uDB40\uDC7F|\uD83D\uDC68(?:\uD83C\uDFFC\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68\uD83C\uDFFB|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFE])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFE\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFD])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFC])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83D\uDC68|(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D[\uDC66\uDC67])|[\u2695\u2696\u2708]\uFE0F|\uD83D[\uDC66\uDC67]|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|(?:\uD83C\uDFFB\u200D[\u2695\u2696\u2708]|\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708])\uFE0F|\uD83C\uDFFB\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C[\uDFFB-\uDFFF])|(?:\uD83E\uDDD1\uD83C\uDFFB\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFC\u200D\uD83E\uDD1D\u200D\uD83D\uDC69)\uD83C\uDFFB|\uD83E\uDDD1(?:\uD83C\uDFFF\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1(?:\uD83C[\uDFFB-\uDFFF])|\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1)|(?:\uD83E\uDDD1\uD83C\uDFFE\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFF\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB-\uDFFE])|(?:\uD83E\uDDD1\uD83C\uDFFC\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFD\u200D\uD83E\uDD1D\u200D\uD83D\uDC69)(?:\uD83C[\uDFFB\uDFFC])|\uD83D\uDC69(?:\uD83C\uDFFE\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFD\uDFFF])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFC\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFD-\uDFFF])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFB\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFC-\uDFFF])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD]))|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|(?:\uD83E\uDDD1\uD83C\uDFFD\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFE\u200D\uD83E\uDD1D\u200D\uD83D\uDC69)(?:\uD83C[\uDFFB-\uDFFD])|\uD83D\uDC69\u200D\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D[\uDC66\uDC67])|(?:\uD83D\uDC41\uFE0F\u200D\uD83D\uDDE8|\uD83D\uDC69(?:\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708]|\uD83C\uDFFB\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708])|(?:(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)\uFE0F|\uD83D\uDC6F|\uD83E[\uDD3C\uDDDE\uDDDF])\u200D[\u2640\u2642]|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD6-\uDDDD])(?:(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]|\u200D[\u2640\u2642])|\uD83C\uDFF4\u200D\u2620)\uFE0F|\uD83D\uDC69\u200D\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|\uD83C\uDFF3\uFE0F\u200D\uD83C\uDF08|\uD83D\uDC15\u200D\uD83E\uDDBA|\uD83D\uDC69\u200D\uD83D\uDC66|\uD83D\uDC69\u200D\uD83D\uDC67|\uD83C\uDDFD\uD83C\uDDF0|\uD83C\uDDF4\uD83C\uDDF2|\uD83C\uDDF6\uD83C\uDDE6|[#\*0-9]\uFE0F\u20E3|\uD83C\uDDE7(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF])|\uD83C\uDDF9(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF])|\uD83C\uDDEA(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA])|\uD83E\uDDD1(?:\uD83C[\uDFFB-\uDFFF])|\uD83C\uDDF7(?:\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC])|\uD83D\uDC69(?:\uD83C[\uDFFB-\uDFFF])|\uD83C\uDDF2(?:\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF])|\uD83C\uDDE6(?:\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF])|\uD83C\uDDF0(?:\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF])|\uD83C\uDDED(?:\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA])|\uD83C\uDDE9(?:\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF])|\uD83C\uDDFE(?:\uD83C[\uDDEA\uDDF9])|\uD83C\uDDEC(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE])|\uD83C\uDDF8(?:\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF])|\uD83C\uDDEB(?:\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7])|\uD83C\uDDF5(?:\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE])|\uD83C\uDDFB(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA])|\uD83C\uDDF3(?:\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF])|\uD83C\uDDE8(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF5\uDDF7\uDDFA-\uDDFF])|\uD83C\uDDF1(?:\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE])|\uD83C\uDDFF(?:\uD83C[\uDDE6\uDDF2\uDDFC])|\uD83C\uDDFC(?:\uD83C[\uDDEB\uDDF8])|\uD83C\uDDFA(?:\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF])|\uD83C\uDDEE(?:\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9])|\uD83C\uDDEF(?:\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5])|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u261D\u270A-\u270D]|\uD83C[\uDF85\uDFC2\uDFC7]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC6B-\uDC6D\uDC70\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDCAA\uDD74\uDD7A\uDD90\uDD95\uDD96\uDE4C\uDE4F\uDEC0\uDECC]|\uD83E[\uDD0F\uDD18-\uDD1C\uDD1E\uDD1F\uDD30-\uDD36\uDDB5\uDDB6\uDDBB\uDDD2-\uDDD5])(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u231A\u231B\u23E9-\u23EC\u23F0\u23F3\u25FD\u25FE\u2614\u2615\u2648-\u2653\u267F\u2693\u26A1\u26AA\u26AB\u26BD\u26BE\u26C4\u26C5\u26CE\u26D4\u26EA\u26F2\u26F3\u26F5\u26FA\u26FD\u2705\u270A\u270B\u2728\u274C\u274E\u2753-\u2755\u2757\u2795-\u2797\u27B0\u27BF\u2B1B\u2B1C\u2B50\u2B55]|\uD83C[\uDC04\uDCCF\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF7C\uDF7E-\uDF93\uDFA0-\uDFCA\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF4\uDFF8-\uDFFF]|\uD83D[\uDC00-\uDC3E\uDC40\uDC42-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDD7A\uDD95\uDD96\uDDA4\uDDFB-\uDE4F\uDE80-\uDEC5\uDECC\uDED0-\uDED2\uDED5\uDEEB\uDEEC\uDEF4-\uDEFA\uDFE0-\uDFEB]|\uD83E[\uDD0D-\uDD3A\uDD3C-\uDD45\uDD47-\uDD71\uDD73-\uDD76\uDD7A-\uDDA2\uDDA5-\uDDAA\uDDAE-\uDDCA\uDDCD-\uDDFF\uDE70-\uDE73\uDE78-\uDE7A\uDE80-\uDE82\uDE90-\uDE95])|(?:[#\*0-9\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u261D\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u267F\u2692-\u2697\u2699\u269B\u269C\u26A0\u26A1\u26AA\u26AB\u26B0\u26B1\u26BD\u26BE\u26C4\u26C5\u26C8\u26CE\u26CF\u26D1\u26D3\u26D4\u26E9\u26EA\u26F0-\u26F5\u26F7-\u26FA\u26FD\u2702\u2705\u2708-\u270D\u270F\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763\u2764\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC04\uDCCF\uDD70\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE02\uDE1A\uDE2F\uDE32-\uDE3A\uDE50\uDE51\uDF00-\uDF21\uDF24-\uDF93\uDF96\uDF97\uDF99-\uDF9B\uDF9E-\uDFF0\uDFF3-\uDFF5\uDFF7-\uDFFF]|\uD83D[\uDC00-\uDCFD\uDCFF-\uDD3D\uDD49-\uDD4E\uDD50-\uDD67\uDD6F\uDD70\uDD73-\uDD7A\uDD87\uDD8A-\uDD8D\uDD90\uDD95\uDD96\uDDA4\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA-\uDE4F\uDE80-\uDEC5\uDECB-\uDED2\uDED5\uDEE0-\uDEE5\uDEE9\uDEEB\uDEEC\uDEF0\uDEF3-\uDEFA\uDFE0-\uDFEB]|\uD83E[\uDD0D-\uDD3A\uDD3C-\uDD45\uDD47-\uDD71\uDD73-\uDD76\uDD7A-\uDDA2\uDDA5-\uDDAA\uDDAE-\uDDCA\uDDCD-\uDDFF\uDE70-\uDE73\uDE78-\uDE7A\uDE80-\uDE82\uDE90-\uDE95])\uFE0F|(?:[\u261D\u26F9\u270A-\u270D]|\uD83C[\uDF85\uDFC2-\uDFC4\uDFC7\uDFCA-\uDFCC]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66-\uDC78\uDC7C\uDC81-\uDC83\uDC85-\uDC87\uDC8F\uDC91\uDCAA\uDD74\uDD75\uDD7A\uDD90\uDD95\uDD96\uDE45-\uDE47\uDE4B-\uDE4F\uDEA3\uDEB4-\uDEB6\uDEC0\uDECC]|\uD83E[\uDD0F\uDD18-\uDD1F\uDD26\uDD30-\uDD39\uDD3C-\uDD3E\uDDB5\uDDB6\uDDB8\uDDB9\uDDBB\uDDCD-\uDDCF\uDDD1-\uDDDD])/g}},2017:n=>{"use strict";n.exports=function n(l,e){if(l===e)return!0;if(l&&e&&"object"==typeof l&&"object"==typeof e){if(l.constructor!==e.constructor)return!1;var t,u,r;if(Array.isArray(l)){if((t=l.length)!=e.length)return!1;for(u=t;0!=u--;)if(!n(l[u],e[u]))return!1;return!0}if(l.constructor===RegExp)return l.source===e.source&&l.flags===e.flags;if(l.valueOf!==Object.prototype.valueOf)return l.valueOf()===e.valueOf();if(l.toString!==Object.prototype.toString)return l.toString()===e.toString();if((t=(r=Object.keys(l)).length)!==Object.keys(e).length)return!1;for(u=t;0!=u--;)if(!Object.prototype.hasOwnProperty.call(e,r[u]))return!1;for(u=t;0!=u--;){var o=r[u];if(!n(l[o],e[o]))return!1}return!0}return l!=l&&e!=e}},5884:n=>{"use strict";n.exports=(n,l=process.argv)=>{const e=n.startsWith("-")?"":1===n.length?"-":"--",t=l.indexOf(e+n),u=l.indexOf("--");return-1!==t&&(-1===u||t<u)}},2288:function(n,l,e){"use strict";var t=this&&this.__createBinding||(Object.create?function(n,l,e,t){void 0===t&&(t=e);var u=Object.getOwnPropertyDescriptor(l,e);u&&!("get"in u?!l.__esModule:u.writable||u.configurable)||(u={enumerable:!0,get:function(){return l[e]}}),Object.defineProperty(n,t,u)}:function(n,l,e,t){void 0===t&&(t=e),n[t]=l[e]}),u=this&&this.__setModuleDefault||(Object.create?function(n,l){Object.defineProperty(n,"default",{enumerable:!0,value:l})}:function(n,l){n.default=l}),r=this&&this.__importStar||function(n){if(n&&n.__esModule)return n;var l={};if(null!=n)for(var e in n)"default"!==e&&Object.prototype.hasOwnProperty.call(n,e)&&t(l,n,e);return u(l,n),l},o=this&&this.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(l,"__esModule",{value:!0}),l.HttpsProxyAgent=void 0;const i=r(e(9278)),s=r(e(4756)),a=o(e(2613)),c=o(e(2135)),d=e(917),h=e(3868),f=(0,c.default)("https-proxy-agent");class p extends d.Agent{constructor(n,l){super(l),this.options={path:void 0},this.proxy="string"==typeof n?new URL(n):n,this.proxyHeaders=l?.headers??{},f("Creating new HttpsProxyAgent instance: %o",this.proxy.href);const e=(this.proxy.hostname||this.proxy.host).replace(/^\[|\]$/g,""),t=this.proxy.port?parseInt(this.proxy.port,10):"https:"===this.proxy.protocol?443:80;this.connectOpts={ALPNProtocols:["http/1.1"],...l?g(l,"headers"):null,host:e,port:t}}async connect(n,l){const{proxy:e}=this;if(!l.host)throw new TypeError('No "host" provided');let t;if("https:"===e.protocol){f("Creating `tls.Socket`: %o",this.connectOpts);const n=this.connectOpts.servername||this.connectOpts.host;t=s.connect({...this.connectOpts,servername:n&&i.isIP(n)?void 0:n})}else f("Creating `net.Socket`: %o",this.connectOpts),t=i.connect(this.connectOpts);const u="function"==typeof this.proxyHeaders?this.proxyHeaders():{...this.proxyHeaders},r=i.isIPv6(l.host)?`[${l.host}]`:l.host;let o=`CONNECT ${r}:${l.port} HTTP/1.1\r\n`;if(e.username||e.password){const n=`${decodeURIComponent(e.username)}:${decodeURIComponent(e.password)}`;u["Proxy-Authorization"]=`Basic ${Buffer.from(n).toString("base64")}`}u.Host=`${r}:${l.port}`,u["Proxy-Connection"]||(u["Proxy-Connection"]=this.keepAlive?"Keep-Alive":"close");for(const n of Object.keys(u))o+=`${n}: ${u[n]}\r\n`;const c=(0,h.parseProxyResponse)(t);t.write(`${o}\r\n`);const{connect:d,buffered:p}=await c;if(n.emit("proxyConnect",d),this.emit("proxyConnect",d,n),200===d.statusCode){if(n.once("socket",m),l.secureEndpoint){f("Upgrading socket connection to TLS");const n=l.servername||l.host;return s.connect({...g(l,"host","path","port"),socket:t,servername:i.isIP(n)?void 0:n})}return t}t.destroy();const y=new i.Socket({writable:!1});return y.readable=!0,n.once("socket",(n=>{f("Replaying proxy buffer for failed request"),(0,a.default)(n.listenerCount("data")>0),n.push(p),n.push(null)})),y}}function m(n){n.resume()}function g(n,...l){const e={};let t;for(t in n)l.includes(t)||(e[t]=n[t]);return e}p.protocols=["http","https"],l.HttpsProxyAgent=p},3868:function(n,l,e){"use strict";var t=this&&this.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(l,"__esModule",{value:!0}),l.parseProxyResponse=void 0;const u=(0,t(e(2135)).default)("https-proxy-agent:parse-proxy-response");l.parseProxyResponse=function(n){return new Promise(((l,e)=>{let t=0;const r=[];function o(){const s=n.read();s?function(s){r.push(s),t+=s.length;const a=Buffer.concat(r,t),c=a.indexOf("\r\n\r\n");if(-1===c)return u("have not received end of HTTP headers yet..."),void o();const d=a.slice(0,c).toString("ascii").split("\r\n"),h=d.shift();if(!h)return n.destroy(),e(new Error("No header received from proxy CONNECT response"));const f=h.split(" "),p=+f[1],m=f.slice(2).join(" "),g={};for(const l of d){if(!l)continue;const t=l.indexOf(":");if(-1===t)return n.destroy(),e(new Error(`Invalid header from proxy CONNECT response: "${l}"`));const u=l.slice(0,t).toLowerCase(),r=l.slice(t+1).trimStart(),o=g[u];"string"==typeof o?g[u]=[o,r]:Array.isArray(o)?o.push(r):g[u]=r}u("got proxy server response: %o %o",h,g),i(),l({connect:{statusCode:p,statusText:m,headers:g},buffered:a})}(s):n.once("readable",o)}function i(){n.removeListener("end",s),n.removeListener("error",a),n.removeListener("readable",o)}function s(){i(),u("onend"),e(new Error("Proxy connection ended before receiving CONNECT response"))}function a(n){i(),u("onerror %o",n),e(n)}n.on("error",a),n.on("end",s),o()}))}},1419:(n,l,e)=>{l.formatArgs=function(l){if(l[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+l[0]+(this.useColors?"%c ":" ")+"+"+n.exports.humanize(this.diff),!this.useColors)return;const e="color: "+this.color;l.splice(1,0,e,"color: inherit");let t=0,u=0;l[0].replace(/%[a-zA-Z%]/g,(n=>{"%%"!==n&&(t++,"%c"===n&&(u=t))})),l.splice(u,0,e)},l.save=function(n){try{n?l.storage.setItem("debug",n):l.storage.removeItem("debug")}catch(n){}},l.load=function(){let n;try{n=l.storage.getItem("debug")}catch(n){}return!n&&"undefined"!=typeof process&&"env"in process&&(n=process.env.DEBUG),n},l.useColors=function(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type&&!window.process.__nwjs)||("undefined"==typeof navigator||!navigator.userAgent||!navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))&&("undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))},l.storage=function(){try{return localStorage}catch(n){}}(),l.destroy=(()=>{let n=!1;return()=>{n||(n=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),l.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],l.log=console.debug||console.log||(()=>{}),n.exports=e(6726)(l);const{formatters:t}=n.exports;t.j=function(n){try{return JSON.stringify(n)}catch(n){return"[UnexpectedJSONParseError]: "+n.message}}},6726:(n,l,e)=>{n.exports=function(n){function l(n){let e,u,r,o=null;function i(...n){if(!i.enabled)return;const t=i,u=Number(new Date),r=u-(e||u);t.diff=r,t.prev=e,t.curr=u,e=u,n[0]=l.coerce(n[0]),"string"!=typeof n[0]&&n.unshift("%O");let o=0;n[0]=n[0].replace(/%([a-zA-Z%])/g,((e,u)=>{if("%%"===e)return"%";o++;const r=l.formatters[u];if("function"==typeof r){const l=n[o];e=r.call(t,l),n.splice(o,1),o--}return e})),l.formatArgs.call(t,n),(t.log||l.log).apply(t,n)}return i.namespace=n,i.useColors=l.useColors(),i.color=l.selectColor(n),i.extend=t,i.destroy=l.destroy,Object.defineProperty(i,"enabled",{enumerable:!0,configurable:!1,get:()=>null!==o?o:(u!==l.namespaces&&(u=l.namespaces,r=l.enabled(n)),r),set:n=>{o=n}}),"function"==typeof l.init&&l.init(i),i}function t(n,e){const t=l(this.namespace+(void 0===e?":":e)+n);return t.log=this.log,t}function u(n){return n.toString().substring(2,n.toString().length-2).replace(/\.\*\?$/,"*")}return l.debug=l,l.default=l,l.coerce=function(n){return n instanceof Error?n.stack||n.message:n},l.disable=function(){const n=[...l.names.map(u),...l.skips.map(u).map((n=>"-"+n))].join(",");return l.enable(""),n},l.enable=function(n){let e;l.save(n),l.namespaces=n,l.names=[],l.skips=[];const t=("string"==typeof n?n:"").split(/[\s,]+/),u=t.length;for(e=0;e<u;e++)t[e]&&("-"===(n=t[e].replace(/\*/g,".*?"))[0]?l.skips.push(new RegExp("^"+n.substr(1)+"$")):l.names.push(new RegExp("^"+n+"$")))},l.enabled=function(n){if("*"===n[n.length-1])return!0;let e,t;for(e=0,t=l.skips.length;e<t;e++)if(l.skips[e].test(n))return!1;for(e=0,t=l.names.length;e<t;e++)if(l.names[e].test(n))return!0;return!1},l.humanize=e(6585),l.destroy=function(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")},Object.keys(n).forEach((e=>{l[e]=n[e]})),l.names=[],l.skips=[],l.formatters={},l.selectColor=function(n){let e=0;for(let l=0;l<n.length;l++)e=(e<<5)-e+n.charCodeAt(l),e|=0;return l.colors[Math.abs(e)%l.colors.length]},l.enable(l.load()),l}},2135:(n,l,e)=>{"undefined"==typeof process||"renderer"===process.type||!0===process.browser||process.__nwjs?n.exports=e(1419):n.exports=e(3047)},3047:(n,l,e)=>{const t=e(2018),u=e(9023);l.init=function(n){n.inspectOpts={};const e=Object.keys(l.inspectOpts);for(let t=0;t<e.length;t++)n.inspectOpts[e[t]]=l.inspectOpts[e[t]]},l.log=function(...n){return process.stderr.write(u.format(...n)+"\n")},l.formatArgs=function(e){const{namespace:t,useColors:u}=this;if(u){const l=this.color,u="[3"+(l<8?l:"8;5;"+l),r=`  ${u};1m${t} [0m`;e[0]=r+e[0].split("\n").join("\n"+r),e.push(u+"m+"+n.exports.humanize(this.diff)+"[0m")}else e[0]=(l.inspectOpts.hideDate?"":(new Date).toISOString()+" ")+t+" "+e[0]},l.save=function(n){n?process.env.DEBUG=n:delete process.env.DEBUG},l.load=function(){return process.env.DEBUG},l.useColors=function(){return"colors"in l.inspectOpts?Boolean(l.inspectOpts.colors):t.isatty(process.stderr.fd)},l.destroy=u.deprecate((()=>{}),"Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."),l.colors=[6,2,3,4,5,1];try{const n=e(7687);n&&(n.stderr||n).level>=2&&(l.colors=[20,21,26,27,32,33,38,39,40,41,42,43,44,45,56,57,62,63,68,69,74,75,76,77,78,79,80,81,92,93,98,99,112,113,128,129,134,135,148,149,160,161,162,163,164,165,166,167,168,169,170,171,172,173,178,179,184,185,196,197,198,199,200,201,202,203,204,205,206,207,208,209,214,215,220,221])}catch(n){}l.inspectOpts=Object.keys(process.env).filter((n=>/^debug_/i.test(n))).reduce(((n,l)=>{const e=l.substring(6).toLowerCase().replace(/_([a-z])/g,((n,l)=>l.toUpperCase()));let t=process.env[l];return t=!!/^(yes|on|true|enabled)$/i.test(t)||!/^(no|off|false|disabled)$/i.test(t)&&("null"===t?null:Number(t)),n[e]=t,n}),{}),n.exports=e(6726)(l);const{formatters:r}=n.exports;r.o=function(n){return this.inspectOpts.colors=this.useColors,u.inspect(n,this.inspectOpts).split("\n").map((n=>n.trim())).join(" ")},r.O=function(n){return this.inspectOpts.colors=this.useColors,u.inspect(n,this.inspectOpts)}},2437:(n,l)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.AddressError=void 0;class e extends Error{constructor(n,l){super(n),this.name="AddressError",null!==l&&(this.parseMessage=l)}}l.AddressError=e},837:(n,l)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.isCorrect=l.isInSubnet=void 0,l.isInSubnet=function(n){return!(this.subnetMask<n.subnetMask)&&this.mask(n.subnetMask)===n.mask()},l.isCorrect=function(n){return function(){return this.addressMinusSuffix===this.correctForm()&&(this.subnetMask===n&&!this.parsedSubnet||this.parsedSubnet===String(this.subnetMask))}}},9424:function(n,l,e){"use strict";var t=this&&this.__createBinding||(Object.create?function(n,l,e,t){void 0===t&&(t=e);var u=Object.getOwnPropertyDescriptor(l,e);u&&!("get"in u?!l.__esModule:u.writable||u.configurable)||(u={enumerable:!0,get:function(){return l[e]}}),Object.defineProperty(n,t,u)}:function(n,l,e,t){void 0===t&&(t=e),n[t]=l[e]}),u=this&&this.__setModuleDefault||(Object.create?function(n,l){Object.defineProperty(n,"default",{enumerable:!0,value:l})}:function(n,l){n.default=l}),r=this&&this.__importStar||function(n){if(n&&n.__esModule)return n;var l={};if(null!=n)for(var e in n)"default"!==e&&Object.prototype.hasOwnProperty.call(n,e)&&t(l,n,e);return u(l,n),l};Object.defineProperty(l,"__esModule",{value:!0}),l.v6=l.AddressError=l.Address6=l.Address4=void 0;const o=e(2839);Object.defineProperty(l,"Address4",{enumerable:!0,get:function(){return o.Address4}});const i=e(6329);Object.defineProperty(l,"Address6",{enumerable:!0,get:function(){return i.Address6}});const s=e(2437);Object.defineProperty(l,"AddressError",{enumerable:!0,get:function(){return s.AddressError}});const a=r(e(2846));l.v6={helpers:a}},2839:function(n,l,e){"use strict";var t=this&&this.__createBinding||(Object.create?function(n,l,e,t){void 0===t&&(t=e);var u=Object.getOwnPropertyDescriptor(l,e);u&&!("get"in u?!l.__esModule:u.writable||u.configurable)||(u={enumerable:!0,get:function(){return l[e]}}),Object.defineProperty(n,t,u)}:function(n,l,e,t){void 0===t&&(t=e),n[t]=l[e]}),u=this&&this.__setModuleDefault||(Object.create?function(n,l){Object.defineProperty(n,"default",{enumerable:!0,value:l})}:function(n,l){n.default=l}),r=this&&this.__importStar||function(n){if(n&&n.__esModule)return n;var l={};if(null!=n)for(var e in n)"default"!==e&&Object.prototype.hasOwnProperty.call(n,e)&&t(l,n,e);return u(l,n),l};Object.defineProperty(l,"__esModule",{value:!0}),l.Address4=void 0;const o=r(e(837)),i=r(e(9576)),s=e(2437),a=e(9534),c=e(7604);class d{constructor(n){this.groups=i.GROUPS,this.parsedAddress=[],this.parsedSubnet="",this.subnet="/32",this.subnetMask=32,this.v4=!0,this.isCorrect=o.isCorrect(i.BITS),this.isInSubnet=o.isInSubnet,this.address=n;const l=i.RE_SUBNET_STRING.exec(n);if(l){if(this.parsedSubnet=l[0].replace("/",""),this.subnetMask=parseInt(this.parsedSubnet,10),this.subnet=`/${this.subnetMask}`,this.subnetMask<0||this.subnetMask>i.BITS)throw new s.AddressError("Invalid subnet mask.");n=n.replace(i.RE_SUBNET_STRING,"")}this.addressMinusSuffix=n,this.parsedAddress=this.parse(n)}static isValid(n){try{return new d(n),!0}catch(n){return!1}}parse(n){const l=n.split(".");if(!n.match(i.RE_ADDRESS))throw new s.AddressError("Invalid IPv4 address.");return l}correctForm(){return this.parsedAddress.map((n=>parseInt(n,10))).join(".")}static fromHex(n){const l=n.replace(/:/g,"").padStart(8,"0"),e=[];let t;for(t=0;t<8;t+=2){const n=l.slice(t,t+2);e.push(parseInt(n,16))}return new d(e.join("."))}static fromInteger(n){return d.fromHex(n.toString(16))}static fromArpa(n){const l=n.replace(/(\.in-addr\.arpa)?\.$/,"").split(".").reverse().join(".");return new d(l)}toHex(){return this.parsedAddress.map((n=>(0,c.sprintf)("%02x",parseInt(n,10)))).join(":")}toArray(){return this.parsedAddress.map((n=>parseInt(n,10)))}toGroup6(){const n=[];let l;for(l=0;l<i.GROUPS;l+=2){const e=(0,c.sprintf)("%02x%02x",parseInt(this.parsedAddress[l],10),parseInt(this.parsedAddress[l+1],10));n.push((0,c.sprintf)("%x",parseInt(e,16)))}return n.join(":")}bigInteger(){return new a.BigInteger(this.parsedAddress.map((n=>(0,c.sprintf)("%02x",parseInt(n,10)))).join(""),16)}_startAddress(){return new a.BigInteger(this.mask()+"0".repeat(i.BITS-this.subnetMask),2)}startAddress(){return d.fromBigInteger(this._startAddress())}startAddressExclusive(){const n=new a.BigInteger("1");return d.fromBigInteger(this._startAddress().add(n))}_endAddress(){return new a.BigInteger(this.mask()+"1".repeat(i.BITS-this.subnetMask),2)}endAddress(){return d.fromBigInteger(this._endAddress())}endAddressExclusive(){const n=new a.BigInteger("1");return d.fromBigInteger(this._endAddress().subtract(n))}static fromBigInteger(n){return d.fromInteger(parseInt(n.toString(),10))}mask(n){return void 0===n&&(n=this.subnetMask),this.getBitsBase2(0,n)}getBitsBase2(n,l){return this.binaryZeroPad().slice(n,l)}reverseForm(n){n||(n={});const l=this.correctForm().split(".").reverse().join(".");return n.omitSuffix?l:(0,c.sprintf)("%s.in-addr.arpa.",l)}isMulticast(){return this.isInSubnet(new d("224.0.0.0/4"))}binaryZeroPad(){return this.bigInteger().toString(2).padStart(i.BITS,"0")}groupForV6(){const n=this.parsedAddress;return this.address.replace(i.RE_ADDRESS,(0,c.sprintf)('<span class="hover-group group-v4 group-6">%s</span>.<span class="hover-group group-v4 group-7">%s</span>',n.slice(0,2).join("."),n.slice(2,4).join(".")))}}l.Address4=d},6329:function(n,l,e){"use strict";var t=this&&this.__createBinding||(Object.create?function(n,l,e,t){void 0===t&&(t=e);var u=Object.getOwnPropertyDescriptor(l,e);u&&!("get"in u?!l.__esModule:u.writable||u.configurable)||(u={enumerable:!0,get:function(){return l[e]}}),Object.defineProperty(n,t,u)}:function(n,l,e,t){void 0===t&&(t=e),n[t]=l[e]}),u=this&&this.__setModuleDefault||(Object.create?function(n,l){Object.defineProperty(n,"default",{enumerable:!0,value:l})}:function(n,l){n.default=l}),r=this&&this.__importStar||function(n){if(n&&n.__esModule)return n;var l={};if(null!=n)for(var e in n)"default"!==e&&Object.prototype.hasOwnProperty.call(n,e)&&t(l,n,e);return u(l,n),l};Object.defineProperty(l,"__esModule",{value:!0}),l.Address6=void 0;const o=r(e(837)),i=r(e(9576)),s=r(e(8914)),a=r(e(2846)),c=e(2839),d=e(321),h=e(2437),f=e(9534),p=e(7604);function m(n){if(!n)throw new Error("Assertion failed.")}function g(n){return(n=n.replace(/^(0{1,})([1-9]+)$/,'<span class="parse-error">$1</span>$2')).replace(/^(0{1,})(0)$/,'<span class="parse-error">$1</span>$2')}function y(n){return(0,p.sprintf)("%04x",parseInt(n,16))}function v(n){return 255&n}class w{constructor(n,l){this.addressMinusSuffix="",this.parsedSubnet="",this.subnet="/128",this.subnetMask=128,this.v4=!1,this.zone="",this.isInSubnet=o.isInSubnet,this.isCorrect=o.isCorrect(s.BITS),this.groups=void 0===l?s.GROUPS:l,this.address=n;const e=s.RE_SUBNET_STRING.exec(n);if(e){if(this.parsedSubnet=e[0].replace("/",""),this.subnetMask=parseInt(this.parsedSubnet,10),this.subnet=`/${this.subnetMask}`,Number.isNaN(this.subnetMask)||this.subnetMask<0||this.subnetMask>s.BITS)throw new h.AddressError("Invalid subnet mask.");n=n.replace(s.RE_SUBNET_STRING,"")}else if(/\//.test(n))throw new h.AddressError("Invalid subnet mask.");const t=s.RE_ZONE_STRING.exec(n);t&&(this.zone=t[0],n=n.replace(s.RE_ZONE_STRING,"")),this.addressMinusSuffix=n,this.parsedAddress=this.parse(this.addressMinusSuffix)}static isValid(n){try{return new w(n),!0}catch(n){return!1}}static fromBigInteger(n){const l=n.toString(16).padStart(32,"0"),e=[];let t;for(t=0;t<s.GROUPS;t++)e.push(l.slice(4*t,4*(t+1)));return new w(e.join(":"))}static fromURL(n){let l,e,t=null;if(-1!==n.indexOf("[")&&-1!==n.indexOf("]:")){if(e=s.RE_URL_WITH_PORT.exec(n),null===e)return{error:"failed to parse address with port",address:null,port:null};l=e[1],t=e[2]}else if(-1!==n.indexOf("/")){if(n=n.replace(/^[a-z0-9]+:\/\//,""),e=s.RE_URL.exec(n),null===e)return{error:"failed to parse address from URL",address:null,port:null};l=e[1]}else l=n;return t?(t=parseInt(t,10),(t<0||t>65536)&&(t=null)):t=null,{address:new w(l),port:t}}static fromAddress4(n){const l=new c.Address4(n),e=s.BITS-(i.BITS-l.subnetMask);return new w(`::ffff:${l.correctForm()}/${e}`)}static fromArpa(n){let l=n.replace(/(\.ip6\.arpa)?\.$/,"");if(63!==l.length)throw new h.AddressError("Invalid 'ip6.arpa' form.");const e=l.split(".").reverse();for(let n=7;n>0;n--){const l=4*n;e.splice(l,0,":")}return l=e.join(""),new w(l)}microsoftTranscription(){return(0,p.sprintf)("%s.ipv6-literal.net",this.correctForm().replace(/:/g,"-"))}mask(n=this.subnetMask){return this.getBitsBase2(0,n)}possibleSubnets(n=128){const l=s.BITS-this.subnetMask-Math.abs(n-s.BITS);return l<0?"0":function(n){const l=/(\d+)(\d{3})/;for(;l.test(n);)n=n.replace(l,"$1,$2");return n}(new f.BigInteger("2",10).pow(l).toString(10))}_startAddress(){return new f.BigInteger(this.mask()+"0".repeat(s.BITS-this.subnetMask),2)}startAddress(){return w.fromBigInteger(this._startAddress())}startAddressExclusive(){const n=new f.BigInteger("1");return w.fromBigInteger(this._startAddress().add(n))}_endAddress(){return new f.BigInteger(this.mask()+"1".repeat(s.BITS-this.subnetMask),2)}endAddress(){return w.fromBigInteger(this._endAddress())}endAddressExclusive(){const n=new f.BigInteger("1");return w.fromBigInteger(this._endAddress().subtract(n))}getScope(){let n=s.SCOPES[this.getBits(12,16).intValue()];return"Global unicast"===this.getType()&&"Link local"!==n&&(n="Global"),n||"Unknown"}getType(){for(const n of Object.keys(s.TYPES))if(this.isInSubnet(new w(n)))return s.TYPES[n];return"Global unicast"}getBits(n,l){return new f.BigInteger(this.getBitsBase2(n,l),2)}getBitsBase2(n,l){return this.binaryZeroPad().slice(n,l)}getBitsBase16(n,l){const e=l-n;if(e%4!=0)throw new Error("Length of bits to retrieve must be divisible by four");return this.getBits(n,l).toString(16).padStart(e/4,"0")}getBitsPastSubnet(){return this.getBitsBase2(this.subnetMask,s.BITS)}reverseForm(n){n||(n={});const l=Math.floor(this.subnetMask/4),e=this.canonicalForm().replace(/:/g,"").split("").slice(0,l).reverse().join(".");return l>0?n.omitSuffix?e:(0,p.sprintf)("%s.ip6.arpa.",e):n.omitSuffix?"":"ip6.arpa."}correctForm(){let n,l=[],e=0;const t=[];for(n=0;n<this.parsedAddress.length;n++){const l=parseInt(this.parsedAddress[n],16);0===l&&e++,0!==l&&e>0&&(e>1&&t.push([n-e,n-1]),e=0)}e>1&&t.push([this.parsedAddress.length-e,this.parsedAddress.length-1]);const u=t.map((n=>n[1]-n[0]+1));if(t.length>0){const n=u.indexOf(Math.max(...u));l=function(n,l){const e=[],t=[];let u;for(u=0;u<n.length;u++)u<l[0]?e.push(n[u]):u>l[1]&&t.push(n[u]);return e.concat(["compact"]).concat(t)}(this.parsedAddress,t[n])}else l=this.parsedAddress;for(n=0;n<l.length;n++)"compact"!==l[n]&&(l[n]=parseInt(l[n],16).toString(16));let r=l.join(":");return r=r.replace(/^compact$/,"::"),r=r.replace(/^compact|compact$/,":"),r=r.replace(/compact/,""),r}binaryZeroPad(){return this.bigInteger().toString(2).padStart(s.BITS,"0")}parse4in6(n){const l=n.split(":"),e=l.slice(-1)[0].match(i.RE_ADDRESS);if(e){this.parsedAddress4=e[0],this.address4=new c.Address4(this.parsedAddress4);for(let l=0;l<this.address4.groups;l++)if(/^0[0-9]+/.test(this.address4.parsedAddress[l]))throw new h.AddressError("IPv4 addresses can't have leading zeroes.",n.replace(i.RE_ADDRESS,this.address4.parsedAddress.map(g).join(".")));this.v4=!0,l[l.length-1]=this.address4.toGroup6(),n=l.join(":")}return n}parse(n){const l=(n=this.parse4in6(n)).match(s.RE_BAD_CHARACTERS);if(l)throw new h.AddressError((0,p.sprintf)("Bad character%s detected in address: %s",l.length>1?"s":"",l.join("")),n.replace(s.RE_BAD_CHARACTERS,'<span class="parse-error">$1</span>'));const e=n.match(s.RE_BAD_ADDRESS);if(e)throw new h.AddressError((0,p.sprintf)("Address failed regex: %s",e.join("")),n.replace(s.RE_BAD_ADDRESS,'<span class="parse-error">$1</span>'));let t=[];const u=n.split("::");if(2===u.length){let n=u[0].split(":"),l=u[1].split(":");1===n.length&&""===n[0]&&(n=[]),1===l.length&&""===l[0]&&(l=[]);const e=this.groups-(n.length+l.length);if(!e)throw new h.AddressError("Error parsing groups");this.elidedGroups=e,this.elisionBegin=n.length,this.elisionEnd=n.length+this.elidedGroups,t=t.concat(n);for(let n=0;n<e;n++)t.push("0");t=t.concat(l)}else{if(1!==u.length)throw new h.AddressError("Too many :: groups found");t=n.split(":"),this.elidedGroups=0}if(t=t.map((n=>(0,p.sprintf)("%x",parseInt(n,16)))),t.length!==this.groups)throw new h.AddressError("Incorrect number of groups found");return t}canonicalForm(){return this.parsedAddress.map(y).join(":")}decimal(){return this.parsedAddress.map((n=>(0,p.sprintf)("%05d",parseInt(n,16)))).join(":")}bigInteger(){return new f.BigInteger(this.parsedAddress.map(y).join(""),16)}to4(){const n=this.binaryZeroPad().split("");return c.Address4.fromHex(new f.BigInteger(n.slice(96,128).join(""),2).toString(16))}to4in6(){const n=this.to4(),l=new w(this.parsedAddress.slice(0,6).join(":"),6).correctForm();let e="";return/:$/.test(l)||(e=":"),l+e+n.address}inspectTeredo(){const n=this.getBitsBase16(0,32),l=this.getBits(80,96).xor(new f.BigInteger("ffff",16)).toString(),e=c.Address4.fromHex(this.getBitsBase16(32,64)),t=c.Address4.fromHex(this.getBits(96,128).xor(new f.BigInteger("ffffffff",16)).toString(16)),u=this.getBits(64,80),r=this.getBitsBase2(64,80),o=u.testBit(15),i=u.testBit(14),s=u.testBit(8),a=u.testBit(9),d=new f.BigInteger(r.slice(2,6)+r.slice(8,16),2).toString(10);return{prefix:(0,p.sprintf)("%s:%s",n.slice(0,4),n.slice(4,8)),server4:e.address,client4:t.address,flags:r,coneNat:o,microsoft:{reserved:i,universalLocal:a,groupIndividual:s,nonce:d},udpPort:l}}inspect6to4(){const n=this.getBitsBase16(0,16),l=c.Address4.fromHex(this.getBitsBase16(16,48));return{prefix:(0,p.sprintf)("%s",n.slice(0,4)),gateway:l.address}}to6to4(){if(!this.is4())return null;const n=["2002",this.getBitsBase16(96,112),this.getBitsBase16(112,128),"","/16"].join(":");return new w(n)}toByteArray(){const n=this.bigInteger().toByteArray();return 17===n.length&&0===n[0]?n.slice(1):n}toUnsignedByteArray(){return this.toByteArray().map(v)}static fromByteArray(n){return this.fromUnsignedByteArray(n.map(v))}static fromUnsignedByteArray(n){const l=new f.BigInteger("256",10);let e=new f.BigInteger("0",10),t=new f.BigInteger("1",10);for(let u=n.length-1;u>=0;u--)e=e.add(t.multiply(new f.BigInteger(n[u].toString(10),10))),t=t.multiply(l);return w.fromBigInteger(e)}isCanonical(){return this.addressMinusSuffix===this.canonicalForm()}isLinkLocal(){return"1111111010000000000000000000000000000000000000000000000000000000"===this.getBitsBase2(0,64)}isMulticast(){return"Multicast"===this.getType()}is4(){return this.v4}isTeredo(){return this.isInSubnet(new w("2001::/32"))}is6to4(){return this.isInSubnet(new w("2002::/16"))}isLoopback(){return"Loopback"===this.getType()}href(n){return n=void 0===n?"":(0,p.sprintf)(":%s",n),(0,p.sprintf)("http://[%s]%s/",this.correctForm(),n)}link(n){n||(n={}),void 0===n.className&&(n.className=""),void 0===n.prefix&&(n.prefix="/#address="),void 0===n.v4&&(n.v4=!1);let l=this.correctForm;return n.v4&&(l=this.to4in6),n.className?(0,p.sprintf)('<a href="%1$s%2$s" class="%3$s">%2$s</a>',n.prefix,l.call(this),n.className):(0,p.sprintf)('<a href="%1$s%2$s">%2$s</a>',n.prefix,l.call(this))}group(){if(0===this.elidedGroups)return a.simpleGroup(this.address).join(":");m("number"==typeof this.elidedGroups),m("number"==typeof this.elisionBegin);const n=[],[l,e]=this.address.split("::");l.length?n.push(...a.simpleGroup(l)):n.push("");const t=["hover-group"];for(let n=this.elisionBegin;n<this.elisionBegin+this.elidedGroups;n++)t.push((0,p.sprintf)("group-%d",n));return n.push((0,p.sprintf)('<span class="%s"></span>',t.join(" "))),e.length?n.push(...a.simpleGroup(e,this.elisionEnd)):n.push(""),this.is4()&&(m(this.address4 instanceof c.Address4),n.pop(),n.push(this.address4.groupForV6())),n.join(":")}regularExpressionString(n=!1){let l=[];const e=new w(this.correctForm());if(0===e.elidedGroups)l.push((0,d.simpleRegularExpression)(e.parsedAddress));else if(e.elidedGroups===s.GROUPS)l.push((0,d.possibleElisions)(s.GROUPS));else{const n=e.address.split("::");n[0].length&&l.push((0,d.simpleRegularExpression)(n[0].split(":"))),m("number"==typeof e.elidedGroups),l.push((0,d.possibleElisions)(e.elidedGroups,0!==n[0].length,0!==n[1].length)),n[1].length&&l.push((0,d.simpleRegularExpression)(n[1].split(":"))),l=[l.join(":")]}return n||(l=["(?=^|",d.ADDRESS_BOUNDARY,"|[^\\w\\:])(",...l,")(?=[^\\w\\:]|",d.ADDRESS_BOUNDARY,"|$)"]),l.join("")}regularExpression(n=!1){return new RegExp(this.regularExpressionString(n),"i")}}l.Address6=w},9576:(n,l)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.RE_SUBNET_STRING=l.RE_ADDRESS=l.GROUPS=l.BITS=void 0,l.BITS=32,l.GROUPS=4,l.RE_ADDRESS=/^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/g,l.RE_SUBNET_STRING=/\/\d{1,2}$/},8914:(n,l)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.RE_URL_WITH_PORT=l.RE_URL=l.RE_ZONE_STRING=l.RE_SUBNET_STRING=l.RE_BAD_ADDRESS=l.RE_BAD_CHARACTERS=l.TYPES=l.SCOPES=l.GROUPS=l.BITS=void 0,l.BITS=128,l.GROUPS=8,l.SCOPES={0:"Reserved",1:"Interface local",2:"Link local",4:"Admin local",5:"Site local",8:"Organization local",14:"Global",15:"Reserved"},l.TYPES={"ff01::1/128":"Multicast (All nodes on this interface)","ff01::2/128":"Multicast (All routers on this interface)","ff02::1/128":"Multicast (All nodes on this link)","ff02::2/128":"Multicast (All routers on this link)","ff05::2/128":"Multicast (All routers in this site)","ff02::5/128":"Multicast (OSPFv3 AllSPF routers)","ff02::6/128":"Multicast (OSPFv3 AllDR routers)","ff02::9/128":"Multicast (RIP routers)","ff02::a/128":"Multicast (EIGRP routers)","ff02::d/128":"Multicast (PIM routers)","ff02::16/128":"Multicast (MLDv2 reports)","ff01::fb/128":"Multicast (mDNSv6)","ff02::fb/128":"Multicast (mDNSv6)","ff05::fb/128":"Multicast (mDNSv6)","ff02::1:2/128":"Multicast (All DHCP servers and relay agents on this link)","ff05::1:2/128":"Multicast (All DHCP servers and relay agents in this site)","ff02::1:3/128":"Multicast (All DHCP servers on this link)","ff05::1:3/128":"Multicast (All DHCP servers in this site)","::/128":"Unspecified","::1/128":"Loopback","ff00::/8":"Multicast","fe80::/10":"Link-local unicast"},l.RE_BAD_CHARACTERS=/([^0-9a-f:/%])/gi,l.RE_BAD_ADDRESS=/([0-9a-f]{5,}|:{3,}|[^:]:$|^:[^:]|\/$)/gi,l.RE_SUBNET_STRING=/\/\d{1,3}(?=%|$)/,l.RE_ZONE_STRING=/%.*$/,l.RE_URL=new RegExp(/^\[{0,1}([0-9a-f:]+)\]{0,1}/),l.RE_URL_WITH_PORT=new RegExp(/\[([0-9a-f:]+)\]:([0-9]{1,5})/)},2846:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.simpleGroup=l.spanLeadingZeroes=l.spanAll=l.spanAllZeroes=void 0;const t=e(7604);function u(n){return n.replace(/(0+)/g,'<span class="zero">$1</span>')}function r(n){return n.replace(/^(0+)/,'<span class="zero">$1</span>')}l.spanAllZeroes=u,l.spanAll=function(n,l=0){return n.split("").map(((n,e)=>(0,t.sprintf)('<span class="digit value-%s position-%d">%s</span>',n,e+l,u(n)))).join("")},l.spanLeadingZeroes=function(n){return n.split(":").map((n=>r(n))).join(":")},l.simpleGroup=function(n,l=0){return n.split(":").map(((n,e)=>/group-v4/.test(n)?n:(0,t.sprintf)('<span class="hover-group group-%d">%s</span>',e+l,r(n))))}},321:function(n,l,e){"use strict";var t=this&&this.__createBinding||(Object.create?function(n,l,e,t){void 0===t&&(t=e);var u=Object.getOwnPropertyDescriptor(l,e);u&&!("get"in u?!l.__esModule:u.writable||u.configurable)||(u={enumerable:!0,get:function(){return l[e]}}),Object.defineProperty(n,t,u)}:function(n,l,e,t){void 0===t&&(t=e),n[t]=l[e]}),u=this&&this.__setModuleDefault||(Object.create?function(n,l){Object.defineProperty(n,"default",{enumerable:!0,value:l})}:function(n,l){n.default=l}),r=this&&this.__importStar||function(n){if(n&&n.__esModule)return n;var l={};if(null!=n)for(var e in n)"default"!==e&&Object.prototype.hasOwnProperty.call(n,e)&&t(l,n,e);return u(l,n),l};Object.defineProperty(l,"__esModule",{value:!0}),l.possibleElisions=l.simpleRegularExpression=l.ADDRESS_BOUNDARY=l.padGroup=l.groupPossibilities=void 0;const o=r(e(8914)),i=e(7604);function s(n){return(0,i.sprintf)("(%s)",n.join("|"))}function a(n){return n.length<4?(0,i.sprintf)("0{0,%d}%s",4-n.length,n):n}l.groupPossibilities=s,l.padGroup=a,l.ADDRESS_BOUNDARY="[^A-Fa-f0-9:]",l.simpleRegularExpression=function(n){const l=[];n.forEach(((n,e)=>{0===parseInt(n,16)&&l.push(e)}));const e=l.map((l=>n.map(((n,e)=>{if(e===l){const l=0===e||e===o.GROUPS-1?":":"";return s([a(n),l])}return a(n)})).join(":")));return e.push(n.map(a).join(":")),s(e)},l.possibleElisions=function(n,l,e){const t=l?"":":",u=e?"":":",r=[];l||e||r.push("::"),l&&e&&r.push(""),(e&&!l||!e&&l)&&r.push(":"),r.push((0,i.sprintf)("%s(:0{1,4}){1,%d}",t,n-1)),r.push((0,i.sprintf)("(0{1,4}:){1,%d}%s",n-1,u)),r.push((0,i.sprintf)("(0{1,4}:){%d}0{1,4}",n-1));for(let l=1;l<n-1;l++)for(let e=1;e<n-l;e++)r.push((0,i.sprintf)("(0{1,4}:){%d}:(0{1,4}:){%d}0{1,4}",e,n-e-l-1));return s(r)}},6108:n=>{"use strict";const l=n=>!Number.isNaN(n)&&n>=4352&&(n<=4447||9001===n||9002===n||11904<=n&&n<=12871&&12351!==n||12880<=n&&n<=19903||19968<=n&&n<=42182||43360<=n&&n<=43388||44032<=n&&n<=55203||63744<=n&&n<=64255||65040<=n&&n<=65049||65072<=n&&n<=65131||65281<=n&&n<=65376||65504<=n&&n<=65510||110592<=n&&n<=110593||127488<=n&&n<=127569||131072<=n&&n<=262141);n.exports=l,n.exports.default=l},9534:function(n,l){(function(){var l;function e(n,l,e){null!=n&&("number"==typeof n?this.fromNumber(n,l,e):null==l&&"string"!=typeof n?this.fromString(n,256):this.fromString(n,l))}function t(){return new e(null)}var u="undefined"!=typeof navigator;u&&"Microsoft Internet Explorer"==navigator.appName?(e.prototype.am=function(n,l,e,t,u,r){for(var o=32767&l,i=l>>15;--r>=0;){var s=32767&this[n],a=this[n++]>>15,c=i*s+a*o;u=((s=o*s+((32767&c)<<15)+e[t]+(1073741823&u))>>>30)+(c>>>15)+i*a+(u>>>30),e[t++]=1073741823&s}return u},l=30):u&&"Netscape"!=navigator.appName?(e.prototype.am=function(n,l,e,t,u,r){for(;--r>=0;){var o=l*this[n++]+e[t]+u;u=Math.floor(o/67108864),e[t++]=67108863&o}return u},l=26):(e.prototype.am=function(n,l,e,t,u,r){for(var o=16383&l,i=l>>14;--r>=0;){var s=16383&this[n],a=this[n++]>>14,c=i*s+a*o;u=((s=o*s+((16383&c)<<14)+e[t]+u)>>28)+(c>>14)+i*a,e[t++]=268435455&s}return u},l=28),e.prototype.DB=l,e.prototype.DM=(1<<l)-1,e.prototype.DV=1<<l,e.prototype.FV=Math.pow(2,52),e.prototype.F1=52-l,e.prototype.F2=2*l-52;var r,o,i=new Array;for(r="0".charCodeAt(0),o=0;o<=9;++o)i[r++]=o;for(r="a".charCodeAt(0),o=10;o<36;++o)i[r++]=o;for(r="A".charCodeAt(0),o=10;o<36;++o)i[r++]=o;function s(n){return"0123456789abcdefghijklmnopqrstuvwxyz".charAt(n)}function a(n,l){var e=i[n.charCodeAt(l)];return null==e?-1:e}function c(n){var l=t();return l.fromInt(n),l}function d(n){var l,e=1;return 0!=(l=n>>>16)&&(n=l,e+=16),0!=(l=n>>8)&&(n=l,e+=8),0!=(l=n>>4)&&(n=l,e+=4),0!=(l=n>>2)&&(n=l,e+=2),0!=(l=n>>1)&&(n=l,e+=1),e}function h(n){this.m=n}function f(n){this.m=n,this.mp=n.invDigit(),this.mpl=32767&this.mp,this.mph=this.mp>>15,this.um=(1<<n.DB-15)-1,this.mt2=2*n.t}function p(n,l){return n&l}function m(n,l){return n|l}function g(n,l){return n^l}function y(n,l){return n&~l}function v(n){if(0==n)return-1;var l=0;return 65535&n||(n>>=16,l+=16),255&n||(n>>=8,l+=8),15&n||(n>>=4,l+=4),3&n||(n>>=2,l+=2),1&n||++l,l}function w(n){for(var l=0;0!=n;)n&=n-1,++l;return l}function b(){}function S(n){return n}function C(n){this.r2=t(),this.q3=t(),e.ONE.dlShiftTo(2*n.t,this.r2),this.mu=this.r2.divide(n),this.m=n}h.prototype.convert=function(n){return n.s<0||n.compareTo(this.m)>=0?n.mod(this.m):n},h.prototype.revert=function(n){return n},h.prototype.reduce=function(n){n.divRemTo(this.m,null,n)},h.prototype.mulTo=function(n,l,e){n.multiplyTo(l,e),this.reduce(e)},h.prototype.sqrTo=function(n,l){n.squareTo(l),this.reduce(l)},f.prototype.convert=function(n){var l=t();return n.abs().dlShiftTo(this.m.t,l),l.divRemTo(this.m,null,l),n.s<0&&l.compareTo(e.ZERO)>0&&this.m.subTo(l,l),l},f.prototype.revert=function(n){var l=t();return n.copyTo(l),this.reduce(l),l},f.prototype.reduce=function(n){for(;n.t<=this.mt2;)n[n.t++]=0;for(var l=0;l<this.m.t;++l){var e=32767&n[l],t=e*this.mpl+((e*this.mph+(n[l]>>15)*this.mpl&this.um)<<15)&n.DM;for(n[e=l+this.m.t]+=this.m.am(0,t,n,l,0,this.m.t);n[e]>=n.DV;)n[e]-=n.DV,n[++e]++}n.clamp(),n.drShiftTo(this.m.t,n),n.compareTo(this.m)>=0&&n.subTo(this.m,n)},f.prototype.mulTo=function(n,l,e){n.multiplyTo(l,e),this.reduce(e)},f.prototype.sqrTo=function(n,l){n.squareTo(l),this.reduce(l)},e.prototype.copyTo=function(n){for(var l=this.t-1;l>=0;--l)n[l]=this[l];n.t=this.t,n.s=this.s},e.prototype.fromInt=function(n){this.t=1,this.s=n<0?-1:0,n>0?this[0]=n:n<-1?this[0]=n+this.DV:this.t=0},e.prototype.fromString=function(n,l){var t;if(16==l)t=4;else if(8==l)t=3;else if(256==l)t=8;else if(2==l)t=1;else if(32==l)t=5;else{if(4!=l)return void this.fromRadix(n,l);t=2}this.t=0,this.s=0;for(var u=n.length,r=!1,o=0;--u>=0;){var i=8==t?255&n[u]:a(n,u);i<0?"-"==n.charAt(u)&&(r=!0):(r=!1,0==o?this[this.t++]=i:o+t>this.DB?(this[this.t-1]|=(i&(1<<this.DB-o)-1)<<o,this[this.t++]=i>>this.DB-o):this[this.t-1]|=i<<o,(o+=t)>=this.DB&&(o-=this.DB))}8==t&&128&n[0]&&(this.s=-1,o>0&&(this[this.t-1]|=(1<<this.DB-o)-1<<o)),this.clamp(),r&&e.ZERO.subTo(this,this)},e.prototype.clamp=function(){for(var n=this.s&this.DM;this.t>0&&this[this.t-1]==n;)--this.t},e.prototype.dlShiftTo=function(n,l){var e;for(e=this.t-1;e>=0;--e)l[e+n]=this[e];for(e=n-1;e>=0;--e)l[e]=0;l.t=this.t+n,l.s=this.s},e.prototype.drShiftTo=function(n,l){for(var e=n;e<this.t;++e)l[e-n]=this[e];l.t=Math.max(this.t-n,0),l.s=this.s},e.prototype.lShiftTo=function(n,l){var e,t=n%this.DB,u=this.DB-t,r=(1<<u)-1,o=Math.floor(n/this.DB),i=this.s<<t&this.DM;for(e=this.t-1;e>=0;--e)l[e+o+1]=this[e]>>u|i,i=(this[e]&r)<<t;for(e=o-1;e>=0;--e)l[e]=0;l[o]=i,l.t=this.t+o+1,l.s=this.s,l.clamp()},e.prototype.rShiftTo=function(n,l){l.s=this.s;var e=Math.floor(n/this.DB);if(e>=this.t)l.t=0;else{var t=n%this.DB,u=this.DB-t,r=(1<<t)-1;l[0]=this[e]>>t;for(var o=e+1;o<this.t;++o)l[o-e-1]|=(this[o]&r)<<u,l[o-e]=this[o]>>t;t>0&&(l[this.t-e-1]|=(this.s&r)<<u),l.t=this.t-e,l.clamp()}},e.prototype.subTo=function(n,l){for(var e=0,t=0,u=Math.min(n.t,this.t);e<u;)t+=this[e]-n[e],l[e++]=t&this.DM,t>>=this.DB;if(n.t<this.t){for(t-=n.s;e<this.t;)t+=this[e],l[e++]=t&this.DM,t>>=this.DB;t+=this.s}else{for(t+=this.s;e<n.t;)t-=n[e],l[e++]=t&this.DM,t>>=this.DB;t-=n.s}l.s=t<0?-1:0,t<-1?l[e++]=this.DV+t:t>0&&(l[e++]=t),l.t=e,l.clamp()},e.prototype.multiplyTo=function(n,l){var t=this.abs(),u=n.abs(),r=t.t;for(l.t=r+u.t;--r>=0;)l[r]=0;for(r=0;r<u.t;++r)l[r+t.t]=t.am(0,u[r],l,r,0,t.t);l.s=0,l.clamp(),this.s!=n.s&&e.ZERO.subTo(l,l)},e.prototype.squareTo=function(n){for(var l=this.abs(),e=n.t=2*l.t;--e>=0;)n[e]=0;for(e=0;e<l.t-1;++e){var t=l.am(e,l[e],n,2*e,0,1);(n[e+l.t]+=l.am(e+1,2*l[e],n,2*e+1,t,l.t-e-1))>=l.DV&&(n[e+l.t]-=l.DV,n[e+l.t+1]=1)}n.t>0&&(n[n.t-1]+=l.am(e,l[e],n,2*e,0,1)),n.s=0,n.clamp()},e.prototype.divRemTo=function(n,l,u){var r=n.abs();if(!(r.t<=0)){var o=this.abs();if(o.t<r.t)return null!=l&&l.fromInt(0),void(null!=u&&this.copyTo(u));null==u&&(u=t());var i=t(),s=this.s,a=n.s,c=this.DB-d(r[r.t-1]);c>0?(r.lShiftTo(c,i),o.lShiftTo(c,u)):(r.copyTo(i),o.copyTo(u));var h=i.t,f=i[h-1];if(0!=f){var p=f*(1<<this.F1)+(h>1?i[h-2]>>this.F2:0),m=this.FV/p,g=(1<<this.F1)/p,y=1<<this.F2,v=u.t,w=v-h,b=null==l?t():l;for(i.dlShiftTo(w,b),u.compareTo(b)>=0&&(u[u.t++]=1,u.subTo(b,u)),e.ONE.dlShiftTo(h,b),b.subTo(i,i);i.t<h;)i[i.t++]=0;for(;--w>=0;){var S=u[--v]==f?this.DM:Math.floor(u[v]*m+(u[v-1]+y)*g);if((u[v]+=i.am(0,S,u,w,0,h))<S)for(i.dlShiftTo(w,b),u.subTo(b,u);u[v]<--S;)u.subTo(b,u)}null!=l&&(u.drShiftTo(h,l),s!=a&&e.ZERO.subTo(l,l)),u.t=h,u.clamp(),c>0&&u.rShiftTo(c,u),s<0&&e.ZERO.subTo(u,u)}}},e.prototype.invDigit=function(){if(this.t<1)return 0;var n=this[0];if(!(1&n))return 0;var l=3&n;return(l=(l=(l=(l=l*(2-(15&n)*l)&15)*(2-(255&n)*l)&255)*(2-((65535&n)*l&65535))&65535)*(2-n*l%this.DV)%this.DV)>0?this.DV-l:-l},e.prototype.isEven=function(){return 0==(this.t>0?1&this[0]:this.s)},e.prototype.exp=function(n,l){if(n>4294967295||n<1)return e.ONE;var u=t(),r=t(),o=l.convert(this),i=d(n)-1;for(o.copyTo(u);--i>=0;)if(l.sqrTo(u,r),(n&1<<i)>0)l.mulTo(r,o,u);else{var s=u;u=r,r=s}return l.revert(u)},e.prototype.toString=function(n){if(this.s<0)return"-"+this.negate().toString(n);var l;if(16==n)l=4;else if(8==n)l=3;else if(2==n)l=1;else if(32==n)l=5;else{if(4!=n)return this.toRadix(n);l=2}var e,t=(1<<l)-1,u=!1,r="",o=this.t,i=this.DB-o*this.DB%l;if(o-- >0)for(i<this.DB&&(e=this[o]>>i)>0&&(u=!0,r=s(e));o>=0;)i<l?(e=(this[o]&(1<<i)-1)<<l-i,e|=this[--o]>>(i+=this.DB-l)):(e=this[o]>>(i-=l)&t,i<=0&&(i+=this.DB,--o)),e>0&&(u=!0),u&&(r+=s(e));return u?r:"0"},e.prototype.negate=function(){var n=t();return e.ZERO.subTo(this,n),n},e.prototype.abs=function(){return this.s<0?this.negate():this},e.prototype.compareTo=function(n){var l=this.s-n.s;if(0!=l)return l;var e=this.t;if(0!=(l=e-n.t))return this.s<0?-l:l;for(;--e>=0;)if(0!=(l=this[e]-n[e]))return l;return 0},e.prototype.bitLength=function(){return this.t<=0?0:this.DB*(this.t-1)+d(this[this.t-1]^this.s&this.DM)},e.prototype.mod=function(n){var l=t();return this.abs().divRemTo(n,null,l),this.s<0&&l.compareTo(e.ZERO)>0&&n.subTo(l,l),l},e.prototype.modPowInt=function(n,l){var e;return e=n<256||l.isEven()?new h(l):new f(l),this.exp(n,e)},e.ZERO=c(0),e.ONE=c(1),b.prototype.convert=S,b.prototype.revert=S,b.prototype.mulTo=function(n,l,e){n.multiplyTo(l,e)},b.prototype.sqrTo=function(n,l){n.squareTo(l)},C.prototype.convert=function(n){if(n.s<0||n.t>2*this.m.t)return n.mod(this.m);if(n.compareTo(this.m)<0)return n;var l=t();return n.copyTo(l),this.reduce(l),l},C.prototype.revert=function(n){return n},C.prototype.reduce=function(n){for(n.drShiftTo(this.m.t-1,this.r2),n.t>this.m.t+1&&(n.t=this.m.t+1,n.clamp()),this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3),this.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);n.compareTo(this.r2)<0;)n.dAddOffset(1,this.m.t+1);for(n.subTo(this.r2,n);n.compareTo(this.m)>=0;)n.subTo(this.m,n)},C.prototype.mulTo=function(n,l,e){n.multiplyTo(l,e),this.reduce(e)},C.prototype.sqrTo=function(n,l){n.squareTo(l),this.reduce(l)};var D,E,_,k=[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997],x=(1<<26)/k[k.length-1];function T(){var n;n=(new Date).getTime(),E[_++]^=255&n,E[_++]^=n>>8&255,E[_++]^=n>>16&255,E[_++]^=n>>24&255,_>=L&&(_-=L)}if(e.prototype.chunkSize=function(n){return Math.floor(Math.LN2*this.DB/Math.log(n))},e.prototype.toRadix=function(n){if(null==n&&(n=10),0==this.signum()||n<2||n>36)return"0";var l=this.chunkSize(n),e=Math.pow(n,l),u=c(e),r=t(),o=t(),i="";for(this.divRemTo(u,r,o);r.signum()>0;)i=(e+o.intValue()).toString(n).substr(1)+i,r.divRemTo(u,r,o);return o.intValue().toString(n)+i},e.prototype.fromRadix=function(n,l){this.fromInt(0),null==l&&(l=10);for(var t=this.chunkSize(l),u=Math.pow(l,t),r=!1,o=0,i=0,s=0;s<n.length;++s){var c=a(n,s);c<0?"-"==n.charAt(s)&&0==this.signum()&&(r=!0):(i=l*i+c,++o>=t&&(this.dMultiply(u),this.dAddOffset(i,0),o=0,i=0))}o>0&&(this.dMultiply(Math.pow(l,o)),this.dAddOffset(i,0)),r&&e.ZERO.subTo(this,this)},e.prototype.fromNumber=function(n,l,t){if("number"==typeof l)if(n<2)this.fromInt(1);else for(this.fromNumber(n,t),this.testBit(n-1)||this.bitwiseTo(e.ONE.shiftLeft(n-1),m,this),this.isEven()&&this.dAddOffset(1,0);!this.isProbablePrime(l);)this.dAddOffset(2,0),this.bitLength()>n&&this.subTo(e.ONE.shiftLeft(n-1),this);else{var u=new Array,r=7&n;u.length=1+(n>>3),l.nextBytes(u),r>0?u[0]&=(1<<r)-1:u[0]=0,this.fromString(u,256)}},e.prototype.bitwiseTo=function(n,l,e){var t,u,r=Math.min(n.t,this.t);for(t=0;t<r;++t)e[t]=l(this[t],n[t]);if(n.t<this.t){for(u=n.s&this.DM,t=r;t<this.t;++t)e[t]=l(this[t],u);e.t=this.t}else{for(u=this.s&this.DM,t=r;t<n.t;++t)e[t]=l(u,n[t]);e.t=n.t}e.s=l(this.s,n.s),e.clamp()},e.prototype.changeBit=function(n,l){var t=e.ONE.shiftLeft(n);return this.bitwiseTo(t,l,t),t},e.prototype.addTo=function(n,l){for(var e=0,t=0,u=Math.min(n.t,this.t);e<u;)t+=this[e]+n[e],l[e++]=t&this.DM,t>>=this.DB;if(n.t<this.t){for(t+=n.s;e<this.t;)t+=this[e],l[e++]=t&this.DM,t>>=this.DB;t+=this.s}else{for(t+=this.s;e<n.t;)t+=n[e],l[e++]=t&this.DM,t>>=this.DB;t+=n.s}l.s=t<0?-1:0,t>0?l[e++]=t:t<-1&&(l[e++]=this.DV+t),l.t=e,l.clamp()},e.prototype.dMultiply=function(n){this[this.t]=this.am(0,n-1,this,0,0,this.t),++this.t,this.clamp()},e.prototype.dAddOffset=function(n,l){if(0!=n){for(;this.t<=l;)this[this.t++]=0;for(this[l]+=n;this[l]>=this.DV;)this[l]-=this.DV,++l>=this.t&&(this[this.t++]=0),++this[l]}},e.prototype.multiplyLowerTo=function(n,l,e){var t,u=Math.min(this.t+n.t,l);for(e.s=0,e.t=u;u>0;)e[--u]=0;for(t=e.t-this.t;u<t;++u)e[u+this.t]=this.am(0,n[u],e,u,0,this.t);for(t=Math.min(n.t,l);u<t;++u)this.am(0,n[u],e,u,0,l-u);e.clamp()},e.prototype.multiplyUpperTo=function(n,l,e){--l;var t=e.t=this.t+n.t-l;for(e.s=0;--t>=0;)e[t]=0;for(t=Math.max(l-this.t,0);t<n.t;++t)e[this.t+t-l]=this.am(l-t,n[t],e,0,0,this.t+t-l);e.clamp(),e.drShiftTo(1,e)},e.prototype.modInt=function(n){if(n<=0)return 0;var l=this.DV%n,e=this.s<0?n-1:0;if(this.t>0)if(0==l)e=this[0]%n;else for(var t=this.t-1;t>=0;--t)e=(l*e+this[t])%n;return e},e.prototype.millerRabin=function(n){var l=this.subtract(e.ONE),u=l.getLowestSetBit();if(u<=0)return!1;var r=l.shiftRight(u);(n=n+1>>1)>k.length&&(n=k.length);for(var o=t(),i=0;i<n;++i){o.fromInt(k[Math.floor(Math.random()*k.length)]);var s=o.modPow(r,this);if(0!=s.compareTo(e.ONE)&&0!=s.compareTo(l)){for(var a=1;a++<u&&0!=s.compareTo(l);)if(0==(s=s.modPowInt(2,this)).compareTo(e.ONE))return!1;if(0!=s.compareTo(l))return!1}}return!0},e.prototype.clone=function(){var n=t();return this.copyTo(n),n},e.prototype.intValue=function(){if(this.s<0){if(1==this.t)return this[0]-this.DV;if(0==this.t)return-1}else{if(1==this.t)return this[0];if(0==this.t)return 0}return(this[1]&(1<<32-this.DB)-1)<<this.DB|this[0]},e.prototype.byteValue=function(){return 0==this.t?this.s:this[0]<<24>>24},e.prototype.shortValue=function(){return 0==this.t?this.s:this[0]<<16>>16},e.prototype.signum=function(){return this.s<0?-1:this.t<=0||1==this.t&&this[0]<=0?0:1},e.prototype.toByteArray=function(){var n=this.t,l=new Array;l[0]=this.s;var e,t=this.DB-n*this.DB%8,u=0;if(n-- >0)for(t<this.DB&&(e=this[n]>>t)!=(this.s&this.DM)>>t&&(l[u++]=e|this.s<<this.DB-t);n>=0;)t<8?(e=(this[n]&(1<<t)-1)<<8-t,e|=this[--n]>>(t+=this.DB-8)):(e=this[n]>>(t-=8)&255,t<=0&&(t+=this.DB,--n)),128&e&&(e|=-256),0==u&&(128&this.s)!=(128&e)&&++u,(u>0||e!=this.s)&&(l[u++]=e);return l},e.prototype.equals=function(n){return 0==this.compareTo(n)},e.prototype.min=function(n){return this.compareTo(n)<0?this:n},e.prototype.max=function(n){return this.compareTo(n)>0?this:n},e.prototype.and=function(n){var l=t();return this.bitwiseTo(n,p,l),l},e.prototype.or=function(n){var l=t();return this.bitwiseTo(n,m,l),l},e.prototype.xor=function(n){var l=t();return this.bitwiseTo(n,g,l),l},e.prototype.andNot=function(n){var l=t();return this.bitwiseTo(n,y,l),l},e.prototype.not=function(){for(var n=t(),l=0;l<this.t;++l)n[l]=this.DM&~this[l];return n.t=this.t,n.s=~this.s,n},e.prototype.shiftLeft=function(n){var l=t();return n<0?this.rShiftTo(-n,l):this.lShiftTo(n,l),l},e.prototype.shiftRight=function(n){var l=t();return n<0?this.lShiftTo(-n,l):this.rShiftTo(n,l),l},e.prototype.getLowestSetBit=function(){for(var n=0;n<this.t;++n)if(0!=this[n])return n*this.DB+v(this[n]);return this.s<0?this.t*this.DB:-1},e.prototype.bitCount=function(){for(var n=0,l=this.s&this.DM,e=0;e<this.t;++e)n+=w(this[e]^l);return n},e.prototype.testBit=function(n){var l=Math.floor(n/this.DB);return l>=this.t?0!=this.s:!!(this[l]&1<<n%this.DB)},e.prototype.setBit=function(n){return this.changeBit(n,m)},e.prototype.clearBit=function(n){return this.changeBit(n,y)},e.prototype.flipBit=function(n){return this.changeBit(n,g)},e.prototype.add=function(n){var l=t();return this.addTo(n,l),l},e.prototype.subtract=function(n){var l=t();return this.subTo(n,l),l},e.prototype.multiply=function(n){var l=t();return this.multiplyTo(n,l),l},e.prototype.divide=function(n){var l=t();return this.divRemTo(n,l,null),l},e.prototype.remainder=function(n){var l=t();return this.divRemTo(n,null,l),l},e.prototype.divideAndRemainder=function(n){var l=t(),e=t();return this.divRemTo(n,l,e),new Array(l,e)},e.prototype.modPow=function(n,l){var e,u,r=n.bitLength(),o=c(1);if(r<=0)return o;e=r<18?1:r<48?3:r<144?4:r<768?5:6,u=r<8?new h(l):l.isEven()?new C(l):new f(l);var i=new Array,s=3,a=e-1,p=(1<<e)-1;if(i[1]=u.convert(this),e>1){var m=t();for(u.sqrTo(i[1],m);s<=p;)i[s]=t(),u.mulTo(m,i[s-2],i[s]),s+=2}var g,y,v=n.t-1,w=!0,b=t();for(r=d(n[v])-1;v>=0;){for(r>=a?g=n[v]>>r-a&p:(g=(n[v]&(1<<r+1)-1)<<a-r,v>0&&(g|=n[v-1]>>this.DB+r-a)),s=e;!(1&g);)g>>=1,--s;if((r-=s)<0&&(r+=this.DB,--v),w)i[g].copyTo(o),w=!1;else{for(;s>1;)u.sqrTo(o,b),u.sqrTo(b,o),s-=2;s>0?u.sqrTo(o,b):(y=o,o=b,b=y),u.mulTo(b,i[g],o)}for(;v>=0&&!(n[v]&1<<r);)u.sqrTo(o,b),y=o,o=b,b=y,--r<0&&(r=this.DB-1,--v)}return u.revert(o)},e.prototype.modInverse=function(n){var l=n.isEven();if(this.isEven()&&l||0==n.signum())return e.ZERO;for(var t=n.clone(),u=this.clone(),r=c(1),o=c(0),i=c(0),s=c(1);0!=t.signum();){for(;t.isEven();)t.rShiftTo(1,t),l?(r.isEven()&&o.isEven()||(r.addTo(this,r),o.subTo(n,o)),r.rShiftTo(1,r)):o.isEven()||o.subTo(n,o),o.rShiftTo(1,o);for(;u.isEven();)u.rShiftTo(1,u),l?(i.isEven()&&s.isEven()||(i.addTo(this,i),s.subTo(n,s)),i.rShiftTo(1,i)):s.isEven()||s.subTo(n,s),s.rShiftTo(1,s);t.compareTo(u)>=0?(t.subTo(u,t),l&&r.subTo(i,r),o.subTo(s,o)):(u.subTo(t,u),l&&i.subTo(r,i),s.subTo(o,s))}return 0!=u.compareTo(e.ONE)?e.ZERO:s.compareTo(n)>=0?s.subtract(n):s.signum()<0?(s.addTo(n,s),s.signum()<0?s.add(n):s):s},e.prototype.pow=function(n){return this.exp(n,new b)},e.prototype.gcd=function(n){var l=this.s<0?this.negate():this.clone(),e=n.s<0?n.negate():n.clone();if(l.compareTo(e)<0){var t=l;l=e,e=t}var u=l.getLowestSetBit(),r=e.getLowestSetBit();if(r<0)return l;for(u<r&&(r=u),r>0&&(l.rShiftTo(r,l),e.rShiftTo(r,e));l.signum()>0;)(u=l.getLowestSetBit())>0&&l.rShiftTo(u,l),(u=e.getLowestSetBit())>0&&e.rShiftTo(u,e),l.compareTo(e)>=0?(l.subTo(e,l),l.rShiftTo(1,l)):(e.subTo(l,e),e.rShiftTo(1,e));return r>0&&e.lShiftTo(r,e),e},e.prototype.isProbablePrime=function(n){var l,e=this.abs();if(1==e.t&&e[0]<=k[k.length-1]){for(l=0;l<k.length;++l)if(e[0]==k[l])return!0;return!1}if(e.isEven())return!1;for(l=1;l<k.length;){for(var t=k[l],u=l+1;u<k.length&&t<x;)t*=k[u++];for(t=e.modInt(t);l<u;)if(t%k[l++]==0)return!1}return e.millerRabin(n)},e.prototype.square=function(){var n=t();return this.squareTo(n),n},e.prototype.Barrett=C,null==E){var P;if(E=new Array,_=0,"undefined"!=typeof window&&window.crypto)if(window.crypto.getRandomValues){var I=new Uint8Array(32);for(window.crypto.getRandomValues(I),P=0;P<32;++P)E[_++]=I[P]}else if("Netscape"==navigator.appName&&navigator.appVersion<"5"){var A=window.crypto.random(32);for(P=0;P<A.length;++P)E[_++]=255&A.charCodeAt(P)}for(;_<L;)P=Math.floor(65536*Math.random()),E[_++]=P>>>8,E[_++]=255&P;_=0,T()}function O(){if(null==D){for(T(),(D=new F).init(E),_=0;_<E.length;++_)E[_]=0;_=0}return D.next()}function R(){}function F(){this.i=0,this.j=0,this.S=new Array}R.prototype.nextBytes=function(n){var l;for(l=0;l<n.length;++l)n[l]=O()},F.prototype.init=function(n){var l,e,t;for(l=0;l<256;++l)this.S[l]=l;for(e=0,l=0;l<256;++l)e=e+this.S[l]+n[l%n.length]&255,t=this.S[l],this.S[l]=this.S[e],this.S[e]=t;this.i=0,this.j=0},F.prototype.next=function(){var n;return this.i=this.i+1&255,this.j=this.j+this.S[this.i]&255,n=this.S[this.i],this.S[this.i]=this.S[this.j],this.S[this.j]=n,this.S[n+this.S[this.i]&255]};var L=256;n.exports={default:e,BigInteger:e,SecureRandom:R}}).call(this)},127:(n,l,e)=>{var t=e(9896),u="wx";if(process.version.match(/^v0\.[0-6]/)){var r=e(9140);u=r.O_TRUNC|r.O_CREAT|r.O_WRONLY|r.O_EXCL}var o,i=e(857);l.filetime="ctime","win32"==i.platform()&&(l.filetime="mtime");var s=e(9023);o=s.debuglog?s.debuglog("LOCKFILE"):/\blockfile\b/i.test(process.env.NODE_DEBUG)?function(){var n=s.format.apply(s,arguments);console.error("LOCKFILE %d %s",process.pid,n)}:function(){};var a={};e(9468)((function(){o("exit listener"),Object.keys(a).forEach(l.unlockSync)})),/^v0\.[0-8]\./.test(process.version)&&(o("uncaughtException, version = %s",process.version),process.on("uncaughtException",(function n(e){if(o("uncaughtException"),!process.listeners("uncaughtException").filter((function(l){return l!==n})).length){try{Object.keys(a).forEach(l.unlockSync)}catch(n){}throw process.removeListener("uncaughtException",n),e}}))),l.unlock=function(n,l){o("unlock",n),delete a[n],t.unlink(n,(function(n){l&&l()}))},l.unlockSync=function(n){o("unlockSync",n);try{t.unlinkSync(n)}catch(n){}delete a[n]},l.check=function(n,e,u){"function"==typeof e&&(u=e,e={}),o("check",n,e),t.open(n,"r",(function(n,r){return n?"ENOENT"!==n.code?u(n):u(null,!1):e.stale?void t.fstat(r,(function(n,o){if(n)return t.close(r,(function(l){return u(n)}));t.close(r,(function(n){var t=Date.now()-o[l.filetime].getTime();return u(n,t<=e.stale)}))})):t.close(r,(function(n){return u(n,!0)}))}))},l.checkSync=function(n,e){if(o("checkSync",n,e=e||{}),e.wait)throw new Error("opts.wait not supported sync for obvious reasons");try{var u=t.openSync(n,"r")}catch(n){if("ENOENT"!==n.code)throw n;return!1}if(!e.stale){try{t.closeSync(u)}catch(n){}return!0}if(e.stale){try{var r=t.fstatSync(u)}finally{t.closeSync(u)}return Date.now()-r[l.filetime].getTime()<=e.stale}};var c=1;function d(n,e,u,r,i){t.stat(e,(function(s,a){return s?"ENOENT"===s.code?(u.stale=!1,o("lock stale enoent retry",e,u),void l.lock(e,u,i)):i(s):Date.now()-a[l.filetime].getTime()<=u.stale?h(n,e,u,i):(o("lock stale",e,u),void(r?l.unlock(e,(function(n){if(n)return i(n);o("lock stale retry",e,u),t.link(e+".STALE",e,(function(n){t.unlink(e+".STALE",(function(){i(n)}))}))})):(o("acquire .STALE file lock",u),l.lock(e+".STALE",u,(function(l){if(l)return i(l);d(n,e,u,!0,i)})))))}))}function h(n,e,t,u){if(o("notStale",e,t),"number"!=typeof t.wait||t.wait<=0)return o("notStale, wait is not a number"),u(n);var r=Date.now(),i=t.start||r,s=i+t.wait;if(s<=r)return u(n);o("now=%d, wait until %d (delta=%d)",i,s,s-i);var a=Math.min(s-i,t.pollPeriod||100);setTimeout((function(){o("notStale, polling",e,t),l.lock(e,t,u)}),a)}function f(n,e,t){if("number"==typeof e.retries&&e.retries>0){var u=e.retries-1;return o("retryThrow",n,e,u),e.retries=u,l.lockSync(n,e)}throw t}l.lock=function(n,e,r){if("function"==typeof e&&(r=e,e={}),e.req=e.req||c++,o("lock",n,e),e.start=e.start||Date.now(),"number"==typeof e.retries&&e.retries>0){o("has retries",e.retries);var i=e.retries;e.retries=0,s=r,r=function t(u,r){if(o("retry-mutated callback"),i-=1,!u||i<0)return s(u,r);function a(){e.start=Date.now(),o("retrying",e.start),l.lock(n,e,t)}o("lock retry",n,e),e.retryWait?setTimeout(a,e.retryWait):a()}}var s;t.open(n,u,(function(l,u){return l?(o("failed to acquire lock",l),"EEXIST"!==l.code?(o("not EEXIST error",l),r(l)):e.stale?d(l,n,e,!1,r):h(l,n,e,r)):(o("locked",n,u),a[n]=u,t.close(u,(function(){return r()})))})),o("lock return")},l.lockSync=function(n,e){if((e=e||{}).req=e.req||c++,o("lockSync",n,e),e.wait||e.retryWait)throw new Error("opts.wait not supported sync for obvious reasons");try{var r=t.openSync(n,u);a[n]=r;try{t.closeSync(r)}catch(n){}return void o("locked sync!",n,r)}catch(u){if("EEXIST"!==u.code)return f(n,e,u);if(e.stale){var i=t.statSync(n)[l.filetime].getTime();!(i%1e3)&&e.stale%1e3&&(e.stale=1e3*Math.ceil(e.stale/1e3));var s=Date.now()-i;if(s>e.stale)return o("lockSync stale",n,e,s),l.unlockSync(n),l.lockSync(n,e)}return o("failed to lock",n,e,u),f(n,e,u)}}},6762:n=>{var l,e="__lodash_hash_undefined__",t=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,u=/^\w*$/,r=/^\./,o=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,i=/\\(\\)?/g,s=/^\[object .+?Constructor\]$/,a="object"==typeof global&&global&&global.Object===Object&&global,c="object"==typeof self&&self&&self.Object===Object&&self,d=a||c||Function("return this")(),h=Array.prototype,f=Function.prototype,p=Object.prototype,m=d["__core-js_shared__"],g=(l=/[^.]+$/.exec(m&&m.keys&&m.keys.IE_PROTO||""))?"Symbol(src)_1."+l:"",y=f.toString,v=p.hasOwnProperty,w=p.toString,b=RegExp("^"+y.call(v).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),S=d.Symbol,C=h.splice,D=O(d,"Map"),E=O(Object,"create"),_=S?S.prototype:void 0,k=_?_.toString:void 0;function x(n){var l=-1,e=n?n.length:0;for(this.clear();++l<e;){var t=n[l];this.set(t[0],t[1])}}function T(n){var l=-1,e=n?n.length:0;for(this.clear();++l<e;){var t=n[l];this.set(t[0],t[1])}}function P(n){var l=-1,e=n?n.length:0;for(this.clear();++l<e;){var t=n[l];this.set(t[0],t[1])}}function I(n,l){for(var e,t,u=n.length;u--;)if((e=n[u][0])===(t=l)||e!=e&&t!=t)return u;return-1}function A(n,l){var e,t,u=n.__data__;return("string"==(t=typeof(e=l))||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e)?u["string"==typeof l?"string":"hash"]:u.map}function O(n,l){var e=function(n,l){return null==n?void 0:n[l]}(n,l);return function(n){if(!j(n)||g&&g in n)return!1;var l=function(n){var l=j(n)?w.call(n):"";return"[object Function]"==l||"[object GeneratorFunction]"==l}(n)||function(n){var l=!1;if(null!=n&&"function"!=typeof n.toString)try{l=!!(n+"")}catch(n){}return l}(n)?b:s;return l.test(function(n){if(null!=n){try{return y.call(n)}catch(n){}try{return n+""}catch(n){}}return""}(n))}(e)?e:void 0}x.prototype.clear=function(){this.__data__=E?E(null):{}},x.prototype.delete=function(n){return this.has(n)&&delete this.__data__[n]},x.prototype.get=function(n){var l=this.__data__;if(E){var t=l[n];return t===e?void 0:t}return v.call(l,n)?l[n]:void 0},x.prototype.has=function(n){var l=this.__data__;return E?void 0!==l[n]:v.call(l,n)},x.prototype.set=function(n,l){return this.__data__[n]=E&&void 0===l?e:l,this},T.prototype.clear=function(){this.__data__=[]},T.prototype.delete=function(n){var l=this.__data__,e=I(l,n);return!(e<0||(e==l.length-1?l.pop():C.call(l,e,1),0))},T.prototype.get=function(n){var l=this.__data__,e=I(l,n);return e<0?void 0:l[e][1]},T.prototype.has=function(n){return I(this.__data__,n)>-1},T.prototype.set=function(n,l){var e=this.__data__,t=I(e,n);return t<0?e.push([n,l]):e[t][1]=l,this},P.prototype.clear=function(){this.__data__={hash:new x,map:new(D||T),string:new x}},P.prototype.delete=function(n){return A(this,n).delete(n)},P.prototype.get=function(n){return A(this,n).get(n)},P.prototype.has=function(n){return A(this,n).has(n)},P.prototype.set=function(n,l){return A(this,n).set(n,l),this};var R=L((function(n){var l;n=null==(l=n)?"":function(n){if("string"==typeof n)return n;if(M(n))return k?k.call(n):"";var l=n+"";return"0"==l&&1/n==-1/0?"-0":l}(l);var e=[];return r.test(n)&&e.push(""),n.replace(o,(function(n,l,t,u){e.push(t?u.replace(i,"$1"):l||n)})),e}));function F(n){if("string"==typeof n||M(n))return n;var l=n+"";return"0"==l&&1/n==-1/0?"-0":l}function L(n,l){if("function"!=typeof n||l&&"function"!=typeof l)throw new TypeError("Expected a function");var e=function(){var t=arguments,u=l?l.apply(this,t):t[0],r=e.cache;if(r.has(u))return r.get(u);var o=n.apply(this,t);return e.cache=r.set(u,o),o};return e.cache=new(L.Cache||P),e}L.Cache=P;var $=Array.isArray;function j(n){var l=typeof n;return!!n&&("object"==l||"function"==l)}function M(n){return"symbol"==typeof n||function(n){return!!n&&"object"==typeof n}(n)&&"[object Symbol]"==w.call(n)}n.exports=function(n,l,e){var r=null==n?void 0:function(n,l){var e;l=function(n,l){if($(n))return!1;var e=typeof n;return!("number"!=e&&"symbol"!=e&&"boolean"!=e&&null!=n&&!M(n))||u.test(n)||!t.test(n)||null!=l&&n in Object(l)}(l,n)?[l]:$(e=l)?e:R(e);for(var r=0,o=l.length;null!=n&&r<o;)n=n[F(l[r++])];return r&&r==o?n:void 0}(n,l);return void 0===r?e:r}},7352:(n,l,e)=>{n=e.nmd(n);var t=1/0,u=/^\s+|\s+$/g,r=/\w*$/,o=/^[-+]0x[0-9a-f]+$/i,i=/^0b[01]+$/i,s=/^0o[0-7]+$/i,a="\\ud800-\\udfff",c="\\u0300-\\u036f\\ufe20-\\ufe23",d="\\u20d0-\\u20f0",h="\\ufe0e\\ufe0f",f="["+a+"]",p="["+c+d+"]",m="\\ud83c[\\udffb-\\udfff]",g="[^"+a+"]",y="(?:\\ud83c[\\udde6-\\uddff]){2}",v="[\\ud800-\\udbff][\\udc00-\\udfff]",w="\\u200d",b="(?:"+p+"|"+m+")?",S="["+h+"]?",C=S+b+"(?:"+w+"(?:"+[g,y,v].join("|")+")"+S+b+")*",D="(?:"+[g+p+"?",p,y,v,f].join("|")+")",E=RegExp(m+"(?="+m+")|"+D+C,"g"),_=RegExp("["+w+a+c+d+h+"]"),k=parseInt,x="object"==typeof global&&global&&global.Object===Object&&global,T="object"==typeof self&&self&&self.Object===Object&&self,P=x||T||Function("return this")(),I=l&&!l.nodeType&&l,A=I&&n&&!n.nodeType&&n,O=A&&A.exports===I&&x.process,R=function(){try{return O&&O.binding("util")}catch(n){}}(),F=R&&R.isRegExp,L=function(n){return null==n?void 0:n.length};function $(n){return _.test(n)}var j=Object.prototype.toString,M=P.Symbol,N=M?M.prototype:void 0,B=N?N.toString:void 0;function H(n){if("string"==typeof n)return n;if(z(n))return B?B.call(n):"";var l=n+"";return"0"==l&&1/n==-1/0?"-0":l}function U(n){var l=typeof n;return!!n&&("object"==l||"function"==l)}var q,W=F?(q=F,function(n){return q(n)}):function(n){return U(n)&&"[object RegExp]"==j.call(n)};function z(n){return"symbol"==typeof n||function(n){return!!n&&"object"==typeof n}(n)&&"[object Symbol]"==j.call(n)}function V(n){return null==n?"":H(n)}n.exports=function(n,l){var e=30,a="...";if(U(l)){var c="separator"in l?l.separator:c;e="length"in l?function(n){var l=function(n){return n?(n=function(n){if("number"==typeof n)return n;if(z(n))return NaN;if(U(n)){var l="function"==typeof n.valueOf?n.valueOf():n;n=U(l)?l+"":l}if("string"!=typeof n)return 0===n?n:+n;n=n.replace(u,"");var e=i.test(n);return e||s.test(n)?k(n.slice(2),e?2:8):o.test(n)?NaN:+n}(n))===t||n===-1/0?17976931348623157e292*(n<0?-1:1):n==n?n:0:0===n?n:0}(n),e=l%1;return l==l?e?l-e:l:0}(l.length):e,a="omission"in l?H(l.omission):a}var d=(n=V(n)).length;if($(n)){var h=function(n){return $(n)?function(n){return n.match(E)||[]}(n):function(n){return n.split("")}(n)}(n);d=h.length}if(e>=d)return n;var f=e-function(n){return $(n)?function(n){for(var l=E.lastIndex=0;E.test(n);)l++;return l}(n):L(n)}(a);if(f<1)return a;var p=h?function(n,l,e){var t=n.length;return e=void 0===e?t:e,!l&&e>=t?n:function(n,l,e){var t=-1,u=n.length;l<0&&(l=-l>u?0:u+l),(e=e>u?u:e)<0&&(e+=u),u=l>e?0:e-l>>>0,l>>>=0;for(var r=Array(u);++t<u;)r[t]=n[t+l];return r}(n,l,e)}(h,0,f).join(""):n.slice(0,f);if(void 0===c)return p+a;if(h&&(f+=p.length-f),W(c)){if(n.slice(f).search(c)){var m,g=p;for(c.global||(c=RegExp(c.source,V(r.exec(c))+"g")),c.lastIndex=0;m=c.exec(g);)var y=m.index;p=p.slice(0,void 0===y?f:y)}}else if(n.indexOf(H(c),f)!=f){var v=p.lastIndexOf(c);v>-1&&(p=p.slice(0,v))}return p+a}},6585:n=>{var l=1e3,e=60*l,t=60*e,u=24*t,r=7*u;function o(n,l,e,t){var u=l>=1.5*e;return Math.round(n/e)+" "+t+(u?"s":"")}n.exports=function(n,i){i=i||{};var s,a,c=typeof n;if("string"===c&&n.length>0)return function(n){if(!((n=String(n)).length>100)){var o=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(n);if(o){var i=parseFloat(o[1]);switch((o[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*i;case"weeks":case"week":case"w":return i*r;case"days":case"day":case"d":return i*u;case"hours":case"hour":case"hrs":case"hr":case"h":return i*t;case"minutes":case"minute":case"mins":case"min":case"m":return i*e;case"seconds":case"second":case"secs":case"sec":case"s":return i*l;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return i;default:return}}}}(n);if("number"===c&&isFinite(n))return i.long?(s=n,(a=Math.abs(s))>=u?o(s,a,u,"day"):a>=t?o(s,a,t,"hour"):a>=e?o(s,a,e,"minute"):a>=l?o(s,a,l,"second"):s+" ms"):function(n){var r=Math.abs(n);return r>=u?Math.round(n/u)+"d":r>=t?Math.round(n/t)+"h":r>=e?Math.round(n/e)+"m":r>=l?Math.round(n/l)+"s":n+"ms"}(n);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(n))}},9191:(n,l,e)=>{n.exports=function n(l,t,u){function r(i,s){if(!t[i]){if(!l[i]){if(!s&&e(6539))return require(i,!0);if(o)return o(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var c=t[i]={exports:{}};l[i][0].call(c.exports,(function(n){return r(l[i][1][n]||n)}),c,c.exports,n,l,t,u)}return t[i].exports}for(var o=void 0,i=0;i<u.length;i++)r(u[i]);return r}({1:[function(n,l,e){"use strict";var t=setTimeout;l.exports=function(n){return(n=n||{}).hasOwnProperty("logger")||(n.logger=function(){}),n.hasOwnProperty("useImmediateExceptions")||(n.useImmediateExceptions=!0),n.hasOwnProperty("setTimeout")||(n.setTimeout=t),function(l,e){var t=`${l} threw exception: `,u={name:e.name||l,message:e.message||e.toString(),stack:e.stack};function r(){throw u.message=t+u.message,u}n.logger(`${t}[${u.name}] ${u.message}`),u.stack&&n.logger(u.stack),n.useImmediateExceptions?r():n.setTimeout(r,0)}}},{}],2:[function(n,l,e){"use strict";var t=n("./event");function u(n,l,e){this.initEvent(n,!1,!1,e),this.detail=l.detail||null}u.prototype=new t,u.prototype.constructor=u,l.exports=u},{"./event":4}],3:[function(n,l,e){"use strict";function t(n){return n!==Object(n)?{capture:Boolean(n),once:!1,passive:!1}:{capture:Boolean(n.capture),once:Boolean(n.once),passive:Boolean(n.passive)}}function u(n,l){return function(e){return e.capture===l&&e.listener===n}}var r={addEventListener:function(n,l,e){var r=t(e);null!=l&&(this.eventListeners=this.eventListeners||{},this.eventListeners[n]=this.eventListeners[n]||[],this.eventListeners[n].some(u(l,r.capture))||this.eventListeners[n].push({listener:l,capture:r.capture,once:r.once}))},removeEventListener:function(n,l,e){if(this.eventListeners&&this.eventListeners[n]){var r=t(e);this.eventListeners[n]=this.eventListeners[n].filter((o=u(l,r.capture),function(){return!o.apply(this,arguments)}))}var o},dispatchEvent:function(n){if(!this.eventListeners||!this.eventListeners[n.type])return Boolean(n.defaultPrevented);var l=this,e=n.type,t=l.eventListeners[e];return l.eventListeners[e]=t.filter((function(n){return!n.once})),t.forEach((function(e){var t=e.listener;"function"==typeof t?t.call(l,n):t.handleEvent(n)})),Boolean(n.defaultPrevented)}};l.exports=r},{}],4:[function(n,l,e){"use strict";function t(n,l,e,t){this.initEvent(n,l,e,t)}t.prototype={initEvent:function(n,l,e,t){this.type=n,this.bubbles=l,this.cancelable=e,this.target=t,this.currentTarget=t},stopPropagation:function(){},preventDefault:function(){this.defaultPrevented=!0}},l.exports=t},{}],5:[function(n,l,e){"use strict";l.exports={Event:n("./event"),ProgressEvent:n("./progress-event"),CustomEvent:n("./custom-event"),EventTarget:n("./event-target")}},{"./custom-event":2,"./event":4,"./event-target":3,"./progress-event":6}],6:[function(n,l,e){"use strict";var t=n("./event");function u(n,l,e){this.initEvent(n,!1,!1,e),this.loaded="number"==typeof l.loaded?l.loaded:null,this.total="number"==typeof l.total?l.total:null,this.lengthComputable=Boolean(l.total)}u.prototype=new t,u.prototype.constructor=u,l.exports=u},{"./event":4}],7:[function(n,l,e){"use strict";var t=n("@sinonjs/fake-timers"),u=n("./index");function r(){}r.prototype=u;var o=new r;o.addRequest=function(n){if(n.async&&("object"==typeof setTimeout.clock?this.clock=setTimeout.clock:(this.clock=t.install(),this.resetClock=!0),!this.longestTimeout)){var l=this.clock.setTimeout,e=this.clock.setInterval,r=this;this.clock.setTimeout=function(n,e){return r.longestTimeout=Math.max(e,r.longestTimeout||0),l.apply(this,arguments)},this.clock.setInterval=function(n,l){return r.longestTimeout=Math.max(l,r.longestTimeout||0),e.apply(this,arguments)}}return u.addRequest.call(this,n)},o.respond=function(){var n=u.respond.apply(this,arguments);return this.clock&&(this.clock.tick(this.longestTimeout||0),this.longestTimeout=0,this.resetClock&&(this.clock.uninstall(),this.resetClock=!1)),n},o.restore=function(){return this.clock&&this.clock.uninstall(),u.restore.apply(this,arguments)},l.exports=o},{"./index":8,"@sinonjs/fake-timers":32}],8:[function(n,l,e){"use strict";var t=n("../fake-xhr"),u=[].push,r=n("./log"),o=n("../configure-logger"),i=n("path-to-regexp"),s="undefined"!=typeof ArrayBuffer;function a(n){var l=n;if("[object Array]"!==Object.prototype.toString.call(n)&&(l=[200,{},n]),"string"!=typeof l[2]){if(!s)throw new TypeError("Fake server response body should be a string, but was "+typeof l[2]);if(!(l[2]instanceof ArrayBuffer))throw new TypeError("Fake server response body should be a string or ArrayBuffer, but was "+typeof l[2])}return l}function c(){var n={hostname:"localhost",port:process.env.PORT||80,protocol:"http:"};return n.host=n.hostname+("80"===String(n.port)?"":`:${n.port}`),n}function d(n,l){var e="undefined"==typeof window?c():void 0!==window.location?window.location:void 0!==window.window&&void 0!==window.window.location?window.window.location:c(),t=new RegExp(`^${e.protocol}//${e.host}/`),u=l.url;if(/^https?:\/\//.test(u)&&!t.test(u)||(u=u.replace(t,"/")),function(n,l,e){var t=n.method,u=!t||t.toLowerCase()===l.toLowerCase(),r=n.url,o=!r||r===e||"function"==typeof r.test&&r.test(e)||"function"==typeof r&&!0===r(e);return u&&o}(n,this.getHTTPMethod(l),u)){if("function"==typeof n.response){var r=n.url,o=[l].concat(r&&"function"==typeof r.exec?r.exec(u).slice(1):[]);return n.response.apply(n,o)}return!0}return!1}function h(){var n=++this.requestCount;this.requested=!0,this.requestedOnce=1===n,this.requestedTwice=2===n,this.requestedThrice=3===n,this.firstRequest=this.getRequest(0),this.secondRequest=this.getRequest(1),this.thirdRequest=this.getRequest(2),this.lastRequest=this.getRequest(n-1)}var f={create:function(n){var l=Object.create(this);return l.configure(n),this.xhr=t.useFakeXMLHttpRequest(),l.requests=[],l.requestCount=0,l.queue=[],l.responses=[],this.xhr.onCreate=function(n){n.unsafeHeadersEnabled=function(){return!(!1===l.unsafeHeadersEnabled)},l.addRequest(n)},l},configure:function(n){var l=this,e={autoRespond:!0,autoRespondAfter:!0,respondImmediately:!0,fakeHTTPMethods:!0,logger:!0,unsafeHeadersEnabled:!0};n=n||{},Object.keys(n).forEach((function(t){t in e&&(l[t]=n[t])})),l.logError=o(n)},addRequest:function(n){var l=this;u.call(this.requests,n),h.call(this),n.onSend=function(){l.handleRequest(this),l.respondImmediately?l.respond():l.autoRespond&&!l.responding&&(setTimeout((function(){l.responding=!1,l.respond()}),l.autoRespondAfter||10),l.responding=!0)}},getHTTPMethod:function(n){if(this.fakeHTTPMethods&&/post/i.test(n.method)){var l=(n.requestBody||"").match(/_method=([^\b;]+)/);return l?l[1]:n.method}return n.method},handleRequest:function(n){n.async?u.call(this.queue,n):this.processRequest(n)},logger:function(){},logError:o({}),log:r,respondWith:function(n,l,e){if(1!==arguments.length||"function"==typeof n){if(1===arguments.length&&(e=n,l=n=null),2===arguments.length&&(e=l,l=n,n=null),"string"==typeof l&&""!==l&&/:[0-9]+\//.test(l)){var t=l.match(/^(https?:\/\/.*?):([0-9]+\/.*)$/);l=`${t[1]}\\:${t[2]}`}u.call(this.responses,{method:n,url:"string"==typeof l&&""!==l?i(l):l,response:"function"==typeof e?e:a(e)})}else this.response=a(n)},respond:function(){arguments.length>0&&this.respondWith.apply(this,arguments);var n=this.queue||[],l=n.splice(0,n.length),e=this;l.forEach((function(n){e.processRequest(n)}))},respondAll:function(){var n;if(!this.respondImmediately)for(this.queue=this.requests.slice(0);n=this.queue.shift();)this.processRequest(n)},processRequest:function(n){try{if(n.aborted)return;var l=this.response||[404,{},""];if(this.responses)for(var e=this.responses.length-1;e>=0;e--)if(d.call(this,this.responses[e],n)){l=this.responses[e].response;break}4!==n.readyState&&(this.log(l,n),n.respond(l[0],l[1],l[2]))}catch(n){this.logError("Fake server request processing",n)}},restore:function(){return this.xhr.restore&&this.xhr.restore.apply(this.xhr,arguments)},getRequest:function(n){return this.requests[n]||null},reset:function(){this.resetBehavior(),this.resetHistory()},resetBehavior:function(){this.responses.length=this.queue.length=0},resetHistory:function(){this.requests.length=this.requestCount=0,this.requestedOnce=this.requestedTwice=this.requestedThrice=this.requested=!1,this.firstRequest=this.secondRequest=this.thirdRequest=this.lastRequest=null}};l.exports=f},{"../configure-logger":1,"../fake-xhr":11,"./log":9,"path-to-regexp":38}],9:[function(n,l,e){"use strict";var t=n("util").inspect;l.exports=function(n,l){var e;e=`Request:\n${t(l)}\n\n`,e+=`Response:\n${t(n)}\n\n`,"function"==typeof this.logger&&this.logger(e)}},{util:42}],10:[function(n,l,e){"use strict";e.isSupported=function(){try{return Boolean(new Blob)}catch(n){return!1}}()},{}],11:[function(n,l,e){"use strict";var t="undefined"!=typeof TextEncoder?TextEncoder:n("@sinonjs/text-encoding").TextEncoder,u=n("@sinonjs/commons").global,r=n("../configure-logger"),o=n("../event"),i=n("just-extend"),s="undefined"!=typeof ProgressEvent,a="undefined"!=typeof CustomEvent,c="undefined"!=typeof FormData,d="undefined"!=typeof ArrayBuffer,h=n("./blob").isSupported,f={"Accept-Charset":!0,"Access-Control-Request-Headers":!0,"Access-Control-Request-Method":!0,"Accept-Encoding":!0,Connection:!0,"Content-Length":!0,Cookie:!0,Cookie2:!0,"Content-Transfer-Encoding":!0,Date:!0,DNT:!0,Expect:!0,Host:!0,"Keep-Alive":!0,Origin:!0,Referer:!0,TE:!0,Trailer:!0,"Transfer-Encoding":!0,Upgrade:!0,"User-Agent":!0,Via:!0};function p(){var n=this;["loadstart","progress","abort","error","load","timeout","loadend"].forEach((function(l){n.addEventListener(l,(function(e){var t=n[`on${l}`];t&&"function"==typeof t&&t.call(this,e)}))}))}function m(n,l){return Object.keys(n).filter((function(n){return n.toLowerCase()===l.toLowerCase()}))[0]||null}function g(n){return!/^Set-Cookie2?$/i.test(n)}function y(n,l){return n instanceof ArrayBuffer?n:new t(l||"utf-8").encode(n).buffer}function v(n){return!n||/(text\/xml)|(application\/xml)|(\+xml)/.test(n)}function w(n){""===n.responseType||"text"===n.responseType?n.response=n.responseText="":n.response=n.responseText=null,n.responseXML=null}function b(n){var l=n.navigator&&"ReactNative"===n.navigator.product,e={XMLHttpRequest:n.XMLHttpRequest};function t(n){p.call(this),this.readyState=t.UNSENT,this.requestHeaders={},this.requestBody=null,this.status=0,this.statusText="",this.upload=new p,this.responseType="",this.response="",this.logError=r(n),e.supportsTimeout&&(this.timeout=0),e.supportsCORS&&(this.withCredentials=!1),"function"==typeof t.onCreate&&t.onCreate(this)}function u(n){if(n.readyState!==t.OPENED)throw new Error("INVALID_STATE_ERR");if(n.sendFlag)throw new Error("INVALID_STATE_ERR")}e.GlobalXMLHttpRequest=n.XMLHttpRequest,e.GlobalActiveXObject=n.ActiveXObject,e.supportsActiveX=void 0!==e.GlobalActiveXObject,e.supportsXHR=void 0!==e.GlobalXMLHttpRequest,e.workingXHR=function(n){return void 0!==n.XMLHttpRequest?n.XMLHttpRequest:!(void 0===n.ActiveXObject)&&function(){return new n.ActiveXObject("MSXML2.XMLHTTP.3.0")}}(n),e.supportsTimeout=e.supportsXHR&&"timeout"in new e.GlobalXMLHttpRequest,e.supportsCORS=l||e.supportsXHR&&"withCredentials"in new e.GlobalXMLHttpRequest;var b=function(n,l,e){switch(e.length){case 0:return n[l]();case 1:return n[l](e[0]);case 2:return n[l](e[0],e[1]);case 3:return n[l](e[0],e[1],e[2]);case 4:return n[l](e[0],e[1],e[2],e[3]);case 5:return n[l](e[0],e[1],e[2],e[3],e[4]);default:throw new Error("Unhandled case")}};function S(n){if(n.readyState!==t.OPENED){const l=n.readyState===t.UNSENT?"INVALID_STATE_ERR - you might be trying to set the request state for a request that has already been aborted, it is recommended to check 'readyState' first...":`INVALID_STATE_ERR - ${n.readyState}`;throw new Error(l)}}function C(n){w(n),n.errorFlag=!0,n.requestHeaders={},n.responseHeaders={},n.readyState!==t.UNSENT&&n.sendFlag&&n.readyState!==t.DONE&&(n.readyStateChange(t.DONE),n.sendFlag=!1)}t.filters=[],t.addFilter=function(n){this.filters.push(n)},t.defake=function(n,l){var u=new e.workingXHR;["open","setRequestHeader","abort","getResponseHeader","getAllResponseHeaders","addEventListener","overrideMimeType","removeEventListener"].forEach((function(l){n[l]=function(){return b(u,l,arguments)}})),n.send=function(){return u.responseType!==n.responseType&&(u.responseType=n.responseType),b(u,"send",arguments)};var r=function(l){l.forEach((function(l){n[l]=u[l]}))},o=function(){n.readyState=u.readyState,u.readyState>=t.HEADERS_RECEIVED&&r(["status","statusText"]),u.readyState>=t.LOADING&&(r(["response"]),""!==u.responseType&&"text"!==u.responseType||r(["responseText"])),u.readyState!==t.DONE||""!==u.responseType&&"document"!==u.responseType||r(["responseXML"])},i=function(){n.onreadystatechange&&n.onreadystatechange.call(n,{target:n,currentTarget:n})};u.addEventListener?(u.addEventListener("readystatechange",o),Object.keys(n.eventListeners).forEach((function(l){n.eventListeners[l].forEach((function(n){u.addEventListener(l,n.listener,{capture:n.capture,once:n.once})}))})),u.addEventListener("readystatechange",i)):u.onreadystatechange=function(){o(),i()},b(u,"open",l)},t.useFilters=!1,t.parseXML=function(n){if(""!==n)try{if("undefined"!=typeof DOMParser){var l,e=new DOMParser,t="";try{var u=e.parseFromString("INVALID","text/xml").getElementsByTagName("parsererror");u.length&&(t=u[0].namespaceURI)}catch(n){}try{l=e.parseFromString(n,"text/xml")}catch(n){return null}return l.getElementsByTagNameNS(t,"parsererror").length?null:l}var r=new window.ActiveXObject("Microsoft.XMLDOM");return r.async="false",r.loadXML(n),0!==r.parseError.errorCode?null:r}catch(n){}return null},t.statusCodes={100:"Continue",101:"Switching Protocols",200:"OK",201:"Created",202:"Accepted",203:"Non-Authoritative Information",204:"No Content",205:"Reset Content",206:"Partial Content",207:"Multi-Status",300:"Multiple Choice",301:"Moved Permanently",302:"Found",303:"See Other",304:"Not Modified",305:"Use Proxy",307:"Temporary Redirect",400:"Bad Request",401:"Unauthorized",402:"Payment Required",403:"Forbidden",404:"Not Found",405:"Method Not Allowed",406:"Not Acceptable",407:"Proxy Authentication Required",408:"Request Timeout",409:"Conflict",410:"Gone",411:"Length Required",412:"Precondition Failed",413:"Request Entity Too Large",414:"Request-URI Too Long",415:"Unsupported Media Type",416:"Requested Range Not Satisfiable",417:"Expectation Failed",422:"Unprocessable Entity",500:"Internal Server Error",501:"Not Implemented",502:"Bad Gateway",503:"Service Unavailable",504:"Gateway Timeout",505:"HTTP Version Not Supported"},i(t.prototype,o.EventTarget,{async:!0,open:function(n,l,e,u,r){if(this.method=n,this.url=l,this.async="boolean"!=typeof e||e,this.username=u,this.password=r,w(this),this.requestHeaders={},this.sendFlag=!1,!0===t.useFilters){var o=arguments;if(t.filters.some((function(n){return n.apply(this,o)})))return void t.defake(this,arguments)}this.readyStateChange(t.OPENED)},readyStateChange:function(n){this.readyState=n;var l,e,u=new o.Event("readystatechange",!1,!1,this);if("function"==typeof this.onreadystatechange)try{this.onreadystatechange(u)}catch(n){this.logError("Fake XHR onreadystatechange handler",n)}this.readyState!==t.DONE?this.dispatchEvent(u):(this.timedOut||this.aborted||0===this.status?(e={loaded:0,total:0},l=(this.timedOut?"timeout":this.aborted&&"abort")||"error"):(e={loaded:100,total:100},l="load"),s&&(this.upload.dispatchEvent(new o.ProgressEvent("progress",e,this)),this.upload.dispatchEvent(new o.ProgressEvent(l,e,this)),this.upload.dispatchEvent(new o.ProgressEvent("loadend",e,this))),this.dispatchEvent(new o.ProgressEvent("progress",e,this)),this.dispatchEvent(new o.ProgressEvent(l,e,this)),this.dispatchEvent(u),this.dispatchEvent(new o.ProgressEvent("loadend",e,this)))},setRequestHeader:function(n,l){if("string"!=typeof l)throw new TypeError("By RFC7230, section 3.2.4, header values should be strings. Got "+typeof l);u(this);var e=!0;if("function"==typeof this.unsafeHeadersEnabled&&(e=this.unsafeHeadersEnabled()),e&&(null!==m(f,n)||/^(Sec-|Proxy-)/i.test(n)))throw new Error(`Refused to set unsafe header "${n}"`);l=function(n){return n.replace(/^[\x09\x0A\x0D\x20]+|[\x09\x0A\x0D\x20]+$/g,"")}(l);var t=m(this.requestHeaders,n);t?this.requestHeaders[t]+=`, ${l}`:this.requestHeaders[n]=l},setStatus:function(n){var l="number"==typeof n?n:200;S(this),this.status=l,this.statusText=t.statusCodes[l]},setResponseHeaders:function(n){S(this);var l=this.responseHeaders={};Object.keys(n).forEach((function(e){l[e]=n[e]})),this.async?this.readyStateChange(t.HEADERS_RECEIVED):this.readyState=t.HEADERS_RECEIVED},send:function(n){if(u(this),!/^(head)$/i.test(this.method)){var l=m(this.requestHeaders,"Content-Type");if(this.requestHeaders[l]){var r=this.requestHeaders[l].split(";");this.requestHeaders[l]=`${r[0]};charset=utf-8`}else!c||n instanceof FormData||(this.requestHeaders["Content-Type"]="text/plain;charset=utf-8");this.requestBody=n}if(this.errorFlag=!1,this.sendFlag=this.async,w(this),"function"==typeof this.onSend&&this.onSend(this),e.supportsTimeout&&"object"==typeof setInterval.clock&&"object"==typeof Date.clock)var i=Date.now(),s=this,a=setInterval((function(){s.readyState===t.UNSENT||s.readyState===t.DONE?clearInterval(a):"number"==typeof s.timeout&&s.timeout>0&&Date.now()>=i+s.timeout&&(s.triggerTimeout(),clearInterval(a))}),1);this.dispatchEvent(new o.Event("loadstart",!1,!1,this))},abort:function(){this.aborted=!0,C(this),this.readyState=t.UNSENT},error:function(){w(this),this.errorFlag=!0,this.requestHeaders={},this.responseHeaders={},this.readyStateChange(t.DONE)},triggerTimeout:function(){e.supportsTimeout&&(this.timedOut=!0,C(this))},getResponseHeader:function(n){return this.readyState<t.HEADERS_RECEIVED||/^Set-Cookie2?$/i.test(n)?null:(n=m(this.responseHeaders,n),this.responseHeaders[n]||null)},getAllResponseHeaders:function(){if(this.readyState<t.HEADERS_RECEIVED)return"";var n=this.responseHeaders;return Object.keys(n).filter(g).reduce((function(l,e){return`${l}${e}: ${n[e]}\r\n`}),"")},setResponseBody:function(n){(function(n){if(n.readyState===t.DONE)throw new Error("Request done")})(this),function(n){if(n.async&&n.readyState!==t.HEADERS_RECEIVED)throw new Error("No headers received")}(this),function(n,l){var e=null,t="string"==typeof n;if("arraybuffer"===l?t||n instanceof ArrayBuffer||((e=new Error(`Attempted to respond to fake XMLHttpRequest with ${n}, which is not a string or ArrayBuffer.`)).name="InvalidBodyException"):"blob"===l?t||n instanceof ArrayBuffer||!h||n instanceof Blob||((e=new Error(`Attempted to respond to fake XMLHttpRequest with ${n}, which is not a string, ArrayBuffer, or Blob.`)).name="InvalidBodyException"):t||((e=new Error(`Attempted to respond to fake XMLHttpRequest with ${n}, which is not a string.`)).name="InvalidBodyException"),e)throw e}(n,this.responseType);var l=this.overriddenMimeType||this.getResponseHeader("Content-Type"),e=""===this.responseType||"text"===this.responseType;if(w(this),this.async){var u=this.chunkSize||10,r=0;do{this.readyStateChange(t.LOADING),e&&(this.responseText=this.response+=n.substring(r,r+u)),r+=u}while(r<n.length)}this.response=function(n,l,e){if(""===n||"text"===n)return e;if(d&&"arraybuffer"===n)return y(e);if("json"===n)try{return JSON.parse(e)}catch(n){return null}else{if(h&&"blob"===n){if(e instanceof Blob)return e;var u={};return l&&(u.type=l),new Blob([y(e)],u)}if("document"===n)return v(l)?t.parseXML(e):null}throw new Error(`Invalid responseType ${n}`)}(this.responseType,l,n),e&&(this.responseText=this.response),"document"===this.responseType?this.responseXML=this.response:""===this.responseType&&v(l)&&(this.responseXML=t.parseXML(this.responseText)),this.readyStateChange(t.DONE)},respond:function(n,l,e){this.responseURL=this.url,this.setStatus(n),this.setResponseHeaders(l||{}),this.setResponseBody(e||"")},uploadProgress:function(n){s&&this.upload.dispatchEvent(new o.ProgressEvent("progress",n,this.upload))},downloadProgress:function(n){s&&this.dispatchEvent(new o.ProgressEvent("progress",n,this))},uploadError:function(n){a&&this.upload.dispatchEvent(new o.CustomEvent("error",{detail:n}))},overrideMimeType:function(n){if(this.readyState>=t.LOADING)throw new Error("INVALID_STATE_ERR");this.overriddenMimeType=n}});var D={UNSENT:0,OPENED:1,HEADERS_RECEIVED:2,LOADING:3,DONE:4};return i(t,D),i(t.prototype,D),{xhr:e,FakeXMLHttpRequest:t,useFakeXMLHttpRequest:function(){return t.restore=function(l){e.supportsXHR&&(n.XMLHttpRequest=e.GlobalXMLHttpRequest),e.supportsActiveX&&(n.ActiveXObject=e.GlobalActiveXObject),delete t.restore,!0!==l&&delete t.onCreate},e.supportsXHR&&(n.XMLHttpRequest=t),e.supportsActiveX&&(n.ActiveXObject=function(n){return"Microsoft.XMLHTTP"===n||/^Msxml2\.XMLHTTP/i.test(n)?new t:new e.GlobalActiveXObject(n)}),t}}}p.prototype=o.EventTarget,l.exports=i(b(u),{fakeXMLHttpRequestFor:b})},{"../configure-logger":1,"../event":5,"./blob":10,"@sinonjs/commons":19,"@sinonjs/text-encoding":33,"just-extend":37}],12:[function(n,l,e){"use strict";l.exports={fakeServer:n("./fake-server"),fakeServerWithClock:n("./fake-server/fake-server-with-clock"),fakeXhr:n("./fake-xhr")}},{"./fake-server":8,"./fake-server/fake-server-with-clock":7,"./fake-xhr":11}],13:[function(n,l,e){"use strict";var t=n("./prototypes/array").every;function u(n,l,e,t){var u=!0;return e!==t.length-1&&(u=l.calledBefore(t[e+1])),!(!function(n,l){return void 0===n[l.id]&&(n[l.id]=0),n[l.id]<l.callCount}(n,l)||!u||(n[l.id]+=1,0))}l.exports=function(n){return t(arguments.length>1?arguments:n,u.bind(null,{}))}},{"./prototypes/array":21}],14:[function(n,l,e){"use strict";var t=n("./function-name");l.exports=function(n){return n.constructor&&n.constructor.name||"function"==typeof n.constructor&&t(n.constructor)||null}},{"./function-name":17}],15:[function(n,l,e){"use strict";e.wrap=function(n,l){var t=function(){return e.printWarning(l),n.apply(this,arguments)};return n.prototype&&(t.prototype=n.prototype),t},e.defaultMsg=function(n,l){return`${n}.${l} is deprecated and will be removed from the public API in a future version of ${n}.`},e.printWarning=function(n){"object"==typeof process&&process.emitWarning?process.emitWarning(n):console.info?console.info(n):console.log(n)}},{}],16:[function(n,l,e){"use strict";l.exports=function(n,l){var e=!0;try{n.forEach((function(){if(!l.apply(this,arguments))throw new Error}))}catch(n){e=!1}return e}},{}],17:[function(n,l,e){"use strict";l.exports=function(n){if(!n)return"";try{return n.displayName||n.name||(String(n).match(/function ([^\s(]+)/)||[])[1]}catch(n){return""}}},{}],18:[function(n,l,e){"use strict";var t;t="undefined"!=typeof global?global:"undefined"!=typeof window?window:self,l.exports=t},{}],19:[function(n,l,e){"use strict";l.exports={global:n("./global"),calledInOrder:n("./called-in-order"),className:n("./class-name"),deprecated:n("./deprecated"),every:n("./every"),functionName:n("./function-name"),orderByFirstCall:n("./order-by-first-call"),prototypes:n("./prototypes"),typeOf:n("./type-of"),valueToString:n("./value-to-string")}},{"./called-in-order":13,"./class-name":14,"./deprecated":15,"./every":16,"./function-name":17,"./global":18,"./order-by-first-call":20,"./prototypes":24,"./type-of":30,"./value-to-string":31}],20:[function(n,l,e){"use strict";var t=n("./prototypes/array").sort,u=n("./prototypes/array").slice;function r(n,l){var e=n.getCall(0),t=l.getCall(0);return(e&&e.callId||-1)<(t&&t.callId||-1)?-1:1}l.exports=function(n){return t(u(n),r)}},{"./prototypes/array":21}],21:[function(n,l,e){"use strict";var t=n("./copy-prototype-methods");l.exports=t(Array.prototype)},{"./copy-prototype-methods":22}],22:[function(n,l,e){"use strict";var t=Function.call,u=n("./throws-on-proto"),r=["size","caller","callee","arguments"];u&&r.push("__proto__"),l.exports=function(n){return Object.getOwnPropertyNames(n).reduce((function(l,e){return r.includes(e)||"function"!=typeof n[e]||(l[e]=t.bind(n[e])),l}),Object.create(null))}},{"./throws-on-proto":29}],23:[function(n,l,e){"use strict";var t=n("./copy-prototype-methods");l.exports=t(Function.prototype)},{"./copy-prototype-methods":22}],24:[function(n,l,e){"use strict";l.exports={array:n("./array"),function:n("./function"),map:n("./map"),object:n("./object"),set:n("./set"),string:n("./string")}},{"./array":21,"./function":23,"./map":25,"./object":26,"./set":27,"./string":28}],25:[function(n,l,e){"use strict";var t=n("./copy-prototype-methods");l.exports=t(Map.prototype)},{"./copy-prototype-methods":22}],26:[function(n,l,e){"use strict";var t=n("./copy-prototype-methods");l.exports=t(Object.prototype)},{"./copy-prototype-methods":22}],27:[function(n,l,e){"use strict";var t=n("./copy-prototype-methods");l.exports=t(Set.prototype)},{"./copy-prototype-methods":22}],28:[function(n,l,e){"use strict";var t=n("./copy-prototype-methods");l.exports=t(String.prototype)},{"./copy-prototype-methods":22}],29:[function(n,l,e){"use strict";let t;try{t=!1}catch(n){t=!0}l.exports=t},{}],30:[function(n,l,e){"use strict";var t=n("type-detect");l.exports=function(n){return t(n).toLowerCase()}},{"type-detect":39}],31:[function(n,l,e){"use strict";l.exports=function(n){return n&&n.toString?n.toString():String(n)}},{}],32:[function(n,l,e){"use strict";function t(l){const e=l.navigator&&l.navigator.userAgent,u=e&&e.indexOf("MSIE ")>-1,r=Math.pow(2,31)-1,o=1e12,i=function(){},s=function(){return[]},a=l.setTimeout(i,0),c="object"==typeof a,d=l.process&&"function"==typeof l.process.hrtime,h=d&&"function"==typeof l.process.hrtime.bigint,f=l.process&&"function"==typeof l.process.nextTick,p=l.process&&n("util").promisify,m=l.performance&&"function"==typeof l.performance.now,g=l.Performance&&(typeof l.Performance).match(/^(function|object)$/),y=l.performance&&l.performance.constructor&&l.performance.constructor.prototype,v=l.hasOwnProperty("queueMicrotask"),w=l.requestAnimationFrame&&"function"==typeof l.requestAnimationFrame,b=l.cancelAnimationFrame&&"function"==typeof l.cancelAnimationFrame,S=l.requestIdleCallback&&"function"==typeof l.requestIdleCallback,C=l.cancelIdleCallback&&"function"==typeof l.cancelIdleCallback,D=l.setImmediate&&"function"==typeof l.setImmediate;u&&(l.setTimeout=l.setTimeout,l.clearTimeout=l.clearTimeout,l.setInterval=l.setInterval,l.clearInterval=l.clearInterval,l.Date=l.Date),D&&(l.setImmediate=l.setImmediate,l.clearImmediate=l.clearImmediate),l.clearTimeout(a);const E=l.Date;let _=o,k=!1;function x(n,l){n.loopLimit&&l===n.loopLimit-1&&(k=!0)}function T(){k=!1}function P(n){if(!n)return 0;if("function"==typeof n.getTime)return n.getTime();if("number"==typeof n)return n;throw new TypeError("now should be milliseconds since UNIX epoch")}function I(n,l,e){return e&&e.callAt>=n&&e.callAt<=l}function A(n,l){const e=new Error(`Aborting after running ${n.loopLimit} timers, assuming an infinite loop!`);if(!l.error)return e;const t=/target\.*[<|(|[].*?[>|\]|)]\s*/;let u=new RegExp(String(Object.keys(n).join("|")));c&&(u=new RegExp(`\\s+at (Object\\.)?(?:${Object.keys(n).join("|")})\\s+`));let r=-1;l.error.stack.split("\n").some((function(n,l){return n.match(t)?(r=l,!0):n.match(u)?(r=l,!1):r>=0}));const o=`${e}\n${l.type||"Microtask"} - ${l.func.name||"anonymous"}\n${l.error.stack.split("\n").slice(r+1).join("\n")}`;try{Object.defineProperty(e,"stack",{value:o})}catch(n){}return e}function O(n,l){let e;for(e in l)l.hasOwnProperty(e)&&(n[e]=l[e]);return l.now?n.now=function(){return n.clock.now}:delete n.now,l.toSource?n.toSource=function(){return l.toSource()}:delete n.toSource,n.toString=function(){return l.toString()},n.prototype=l.prototype,n.parse=l.parse,n.UTC=l.UTC,n.prototype.toUTCString=l.prototype.toUTCString,n.isFake=!0,n}function R(n){if(n.jobs){for(let l=0;l<n.jobs.length;l++){const e=n.jobs[l];if(e.func.apply(null,e.args),x(n,l),n.loopLimit&&l>n.loopLimit)throw A(n,e)}T(),n.jobs=[]}}function F(n,l){if(void 0===l.func)throw new Error("Callback must be provided to timer calls");if(c&&"function"!=typeof l.func)throw new TypeError(`[ERR_INVALID_CALLBACK]: Callback must be a function. Received ${l.func} of type ${typeof l.func}`);if(k&&(l.error=new Error),l.type=l.immediate?"Immediate":"Timeout",l.hasOwnProperty("delay")&&("number"!=typeof l.delay&&(l.delay=parseInt(l.delay,10)),e=l.delay,(Number.isFinite?Number.isFinite(e):isFinite(e))||(l.delay=0),l.delay=l.delay>r?1:l.delay,l.delay=Math.max(0,l.delay)),l.hasOwnProperty("interval")&&(l.type="Interval",l.interval=l.interval>r?1:l.interval),l.hasOwnProperty("animation")&&(l.type="AnimationFrame",l.animation=!0),l.hasOwnProperty("idleCallback")&&(l.type="IdleCallback",l.idleCallback=!0),n.timers||(n.timers={}),l.id=_++,l.createdAt=n.now,l.callAt=n.now+(parseInt(l.delay)||(n.duringTick?1:0)),n.timers[l.id]=l,c){const e={refed:!0,ref:function(){return this.refed=!0,e},unref:function(){return this.refed=!1,e},hasRef:function(){return this.refed},refresh:function(){return l.callAt=n.now+(parseInt(l.delay)||(n.duringTick?1:0)),n.timers[l.id]=l,e},[Symbol.toPrimitive]:function(){return l.id}};return e}var e;return l.id}function L(n,l){return n.callAt<l.callAt?-1:n.callAt>l.callAt?1:n.immediate&&!l.immediate?-1:!n.immediate&&l.immediate?1:n.createdAt<l.createdAt?-1:n.createdAt>l.createdAt?1:n.id<l.id?-1:n.id>l.id?1:void 0}function $(n,l,e){const t=n.timers;let u,r,o=null;for(u in t)t.hasOwnProperty(u)&&(r=I(l,e,t[u]),!r||o&&1!==L(o,t[u])||(o=t[u]));return o}function j(n){const l=n.timers;let e,t=null;for(e in l)l.hasOwnProperty(e)&&(t&&1!==L(t,l[e])||(t=l[e]));return t}function M(n){const l=n.timers;let e,t=null;for(e in l)l.hasOwnProperty(e)&&(t&&-1!==L(t,l[e])||(t=l[e]));return t}function N(n,l){"number"==typeof l.interval?n.timers[l.id].callAt+=l.interval:delete n.timers[l.id],"function"==typeof l.func?l.func.apply(null,l.args):(0,eval)(l.func)}function B(n){return"IdleCallback"===n||"AnimationFrame"===n?`cancel${n}`:`clear${n}`}const H=function(){let n=0;return function(l){!n++&&console.warn(l)}}();function U(n,l,e){if(!l)return;n.timers||(n.timers={});const t=Number(l);if(Number.isNaN(t)||t<o){const t=B(e);if(!0===n.shouldClearNativeTimers){const e=n[`_${t}`];return"function"==typeof e?e(l):void 0}H(`FakeTimers: ${t} was invoked to clear a native timer instead of one created by this library.\nTo automatically clean-up native timers, use \`shouldClearNativeTimers\`.`)}if(n.timers.hasOwnProperty(t)){const l=n.timers[t];if(!(l.type===e||"Timeout"===l.type&&"Interval"===e||"Interval"===l.type&&"Timeout"===e)){const n=B(e),t=function(n){return"IdleCallback"===n||"AnimationFrame"===n?`request${n}`:`set${n}`}(l.type);throw new Error(`Cannot clear timer: timer created with ${t}() but cleared with ${n}()`)}delete n.timers[t]}}function q(n,l,e){if(e[l].hadOwnProperty=Object.prototype.hasOwnProperty.call(n,l),e[`_${l}`]=n[l],"Date"===l){const t=O(e[l],n[l]);n[l]=t}else if("performance"===l){const t=Object.getOwnPropertyDescriptor(n,l);if(t&&t.get&&!t.set){Object.defineProperty(e,`_${l}`,t);const u=Object.getOwnPropertyDescriptor(e,l);Object.defineProperty(n,l,u)}else n[l]=e[l]}else n[l]=function(){return e[l].apply(e,arguments)},Object.defineProperties(n[l],Object.getOwnPropertyDescriptors(e[l]));n[l].clock=e}function W(n,l){n.tick(l)}const z={setTimeout:l.setTimeout,clearTimeout:l.clearTimeout,setInterval:l.setInterval,clearInterval:l.clearInterval,Date:l.Date};D&&(z.setImmediate=l.setImmediate,z.clearImmediate=l.clearImmediate),d&&(z.hrtime=l.process.hrtime),f&&(z.nextTick=l.process.nextTick),m&&(z.performance=l.performance),w&&(z.requestAnimationFrame=l.requestAnimationFrame),v&&(z.queueMicrotask=!0),b&&(z.cancelAnimationFrame=l.cancelAnimationFrame),S&&(z.requestIdleCallback=l.requestIdleCallback),C&&(z.cancelIdleCallback=l.cancelIdleCallback);const V=l.setImmediate||l.setTimeout;function G(n,e){n=Math.floor(P(n)),e=e||1e3;let t=0;const u=[0,0];if(void 0===E)throw new Error("The global scope doesn't have a `Date` object (see https://github.com/sinonjs/sinon/issues/1852#issuecomment-419622780)");const r={now:n,Date:O((function n(l,e,t,u,r,o,i){if(!(this instanceof n))return new E(n.clock.now).toString();switch(arguments.length){case 0:return new E(n.clock.now);case 1:return new E(l);case 2:return new E(l,e);case 3:return new E(l,e,t);case 4:return new E(l,e,t,u);case 5:return new E(l,e,t,u,r);case 6:return new E(l,e,t,u,r,o);default:return new E(l,e,t,u,r,o,i)}}),E),loopLimit:e};function o(){return 16-(r.now-n)%16}function i(l){const e=r.now-u[0]-n,o=Math.floor(e/1e3),i=1e6*(e-1e3*o)+t-u[1];if(Array.isArray(l)){if(l[1]>1e9)throw new TypeError("Number of nanoseconds can't exceed a billion");const n=l[0];let e=i-l[1],t=o-n;return e<0&&(e+=1e9,t-=1),[t,e]}return[o,i]}function s(){const n=i();return 1e3*n[0]+n[1]/1e6}function a(n,l,e,u){const o="number"==typeof n?n:function(n){if(!n)return 0;const l=n.split(":"),e=l.length;let t,u=e,r=0;if(e>3||!/^(\d\d:){0,2}\d\d?$/.test(n))throw new Error("tick only understands numbers, 'm:s' and 'h:m:s'. Each part must be two digits");for(;u--;){if(t=parseInt(l[u],10),t>=60)throw new Error(`Invalid time ${n}`);r+=t*Math.pow(60,e-u-1)}return 1e3*r}(n),i=Math.floor(o),s=function(n){const l=1e6,e=1e6*n%l,t=e<0?e+l:e;return Math.floor(t)}(o);let a=t+s,c=r.now+i;if(o<0)throw new TypeError("Negative ticks are not supported");a>=1e6&&(c+=1,a-=1e6),t=a;let d,h,f,p,m,g,y=r.now,v=r.now;function w(){for(d=$(r,y,c);d&&y<=c;){if(r.timers[d.id]){y=d.callAt,r.now=d.callAt,f=r.now;try{R(r),N(r,d)}catch(n){h=h||n}if(l)return void V(p);m()}g()}if(f=r.now,R(r),f!==r.now&&(y+=r.now-f,c+=r.now-f),r.duringTick=!1,d=$(r,y,c),d)try{r.tick(c-r.now)}catch(n){h=h||n}else r.now=c,t=a;if(h)throw h;if(!l)return r.now;e(r.now)}return r.duringTick=!0,f=r.now,R(r),f!==r.now&&(y+=r.now-f,c+=r.now-f),p=l&&function(){try{m(),g(),w()}catch(n){u(n)}},m=function(){f!==r.now&&(y+=r.now-f,c+=r.now-f,v+=r.now-f)},g=function(){d=$(r,v,c),v=y},w()}return r.Date.clock=r,h&&(i.bigint=function(){const n=i();return BigInt(n[0])*BigInt(1e9)+BigInt(n[1])}),r.requestIdleCallback=function(n,l){let e=0;r.countTimers()>0&&(e=50);const t=F(r,{func:n,args:Array.prototype.slice.call(arguments,2),delay:void 0===l?e:Math.min(l,e),idleCallback:!0});return Number(t)},r.cancelIdleCallback=function(n){return U(r,n,"IdleCallback")},r.setTimeout=function(n,l){return F(r,{func:n,args:Array.prototype.slice.call(arguments,2),delay:l})},void 0!==l.Promise&&p&&(r.setTimeout[p.custom]=function(n,e){return new l.Promise((function(l){F(r,{func:l,args:[e],delay:n})}))}),r.clearTimeout=function(n){return U(r,n,"Timeout")},r.nextTick=function(n){return function(n,l){n.jobs||(n.jobs=[]),n.jobs.push(l)}(r,{func:n,args:Array.prototype.slice.call(arguments,1),error:k?new Error:null})},r.queueMicrotask=function(n){return r.nextTick(n)},r.setInterval=function(n,l){return l=parseInt(l,10),F(r,{func:n,args:Array.prototype.slice.call(arguments,2),delay:l,interval:l})},r.clearInterval=function(n){return U(r,n,"Interval")},D&&(r.setImmediate=function(n){return F(r,{func:n,args:Array.prototype.slice.call(arguments,1),immediate:!0})},void 0!==l.Promise&&p&&(r.setImmediate[p.custom]=function(n){return new l.Promise((function(l){F(r,{func:l,args:[n],immediate:!0})}))}),r.clearImmediate=function(n){return U(r,n,"Immediate")}),r.countTimers=function(){return Object.keys(r.timers||{}).length+(r.jobs||[]).length},r.requestAnimationFrame=function(n){const l=F(r,{func:n,delay:o(),get args(){return[s()]},animation:!0});return Number(l)},r.cancelAnimationFrame=function(n){return U(r,n,"AnimationFrame")},r.runMicrotasks=function(){R(r)},r.tick=function(n){return a(n,!1)},void 0!==l.Promise&&(r.tickAsync=function(n){return new l.Promise((function(l,e){V((function(){try{a(n,!0,l,e)}catch(n){e(n)}}))}))}),r.next=function(){R(r);const n=j(r);if(!n)return r.now;r.duringTick=!0;try{return r.now=n.callAt,N(r,n),R(r),r.now}finally{r.duringTick=!1}},void 0!==l.Promise&&(r.nextAsync=function(){return new l.Promise((function(n,l){V((function(){try{const e=j(r);if(!e)return void n(r.now);let t;r.duringTick=!0,r.now=e.callAt;try{N(r,e)}catch(n){t=n}r.duringTick=!1,V((function(){t?l(t):n(r.now)}))}catch(n){l(n)}}))}))}),r.runAll=function(){let n,l;for(R(r),l=0;l<r.loopLimit;l++){if(!r.timers)return T(),r.now;if(n=Object.keys(r.timers).length,0===n)return T(),r.now;r.next(),x(r,l)}const e=j(r);throw A(r,e)},r.runToFrame=function(){return r.tick(o())},void 0!==l.Promise&&(r.runAllAsync=function(){return new l.Promise((function(n,l){let e=0;!function t(){V((function(){try{let u;if(e<r.loopLimit)return r.timers?(u=Object.keys(r.timers).length,0===u?(T(),void n(r.now)):(r.next(),e++,t(),void x(r,e))):(T(),void n(r.now));const o=j(r);l(A(r,o))}catch(n){l(n)}}))}()}))}),r.runToLast=function(){const n=M(r);return n?r.tick(n.callAt-r.now):(R(r),r.now)},void 0!==l.Promise&&(r.runToLastAsync=function(){return new l.Promise((function(n,l){V((function(){try{const l=M(r);l||n(r.now),n(r.tickAsync(l.callAt-r.now))}catch(n){l(n)}}))}))}),r.reset=function(){t=0,r.timers={},r.jobs=[],r.now=n},r.setSystemTime=function(n){const l=P(n),e=l-r.now;let o,i;for(o in u[0]=u[0]+e,u[1]=u[1]+t,r.now=l,t=0,r.timers)r.timers.hasOwnProperty(o)&&(i=r.timers[o],i.createdAt+=e,i.callAt+=e)},m&&(r.performance=Object.create(null),r.performance.now=s),d&&(r.hrtime=i),r}return{timers:z,createClock:G,install:function(n){if(arguments.length>1||n instanceof Date||Array.isArray(n)||"number"==typeof n)throw new TypeError(`FakeTimers.install called with ${String(n)} install requires an object parameter`);if(!0===l.Date.isFake)throw new TypeError("Can't install fake timers twice on the same global object.");if((n=void 0!==n?n:{}).shouldAdvanceTime=n.shouldAdvanceTime||!1,n.advanceTimeDelta=n.advanceTimeDelta||20,n.shouldClearNativeTimers=n.shouldClearNativeTimers||!1,n.target)throw new TypeError("config.target is no longer supported. Use `withGlobal(target)` instead.");let e,t;const u=G(n.now,n.loopLimit);if(u.shouldClearNativeTimers=n.shouldClearNativeTimers,u.uninstall=function(){return function(n,e){let t,u,r;for(u=0,r=n.methods.length;u<r;u++)if(t=n.methods[u],"hrtime"===t&&l.process)l.process.hrtime=n._hrtime;else if("nextTick"===t&&l.process)l.process.nextTick=n._nextTick;else if("performance"===t){const e=Object.getOwnPropertyDescriptor(n,`_${t}`);e&&e.get&&!e.set?Object.defineProperty(l,t,e):e.configurable&&(l[t]=n[`_${t}`])}else if(l[t]&&l[t].hadOwnProperty)l[t]=n[`_${t}`];else try{delete l[t]}catch(n){}return!0===e.shouldAdvanceTime&&l.clearInterval(n.attachedInterval),n.methods=[],n.timers?Object.keys(n.timers).map((function(l){return n.timers[l]})):[]}(u,n)},u.methods=n.toFake||[],0===u.methods.length&&(u.methods=Object.keys(z).filter((function(n){return"nextTick"!==n&&"queueMicrotask"!==n}))),!0===n.shouldAdvanceTime){const e=W.bind(null,u,n.advanceTimeDelta),t=l.setInterval(e,n.advanceTimeDelta);u.attachedInterval=t}if(u.methods.includes("performance")){const e=g?l.Performance.prototype:y?l.performance.constructor.prototype:void 0;if(e)Object.getOwnPropertyNames(e).forEach((function(n){"now"!==n&&(u.performance[n]=0===n.indexOf("getEntries")?s:i)}));else if((n.toFake||[]).includes("performance"))throw new ReferenceError("non-existent performance object cannot be faked")}for(e=0,t=u.methods.length;e<t;e++){const n=u.methods[e];"hrtime"===n?l.process&&"function"==typeof l.process.hrtime&&q(l.process,n,u):"nextTick"===n?l.process&&"function"==typeof l.process.nextTick&&q(l.process,n,u):q(l,n,u)}return u},withGlobal:t}}const u=t(n("@sinonjs/commons").global);e.timers=u.timers,e.createClock=u.createClock,e.install=u.install,e.withGlobal=t},{"@sinonjs/commons":19,util:42}],33:[function(n,l,e){var t=n("./lib/encoding.js");l.exports={TextEncoder:t.TextEncoder,TextDecoder:t.TextDecoder}},{"./lib/encoding.js":35}],34:[function(n,l,e){!function(n){"use strict";void 0!==l&&l.exports&&(l.exports=n),n["encoding-indexes"]={big5:[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,17392,19506,17923,17830,17784,160359,19831,17843,162993,19682,163013,15253,18230,18244,19527,19520,148159,144919,160594,159371,159954,19543,172881,18255,17882,19589,162924,19719,19108,18081,158499,29221,154196,137827,146950,147297,26189,22267,null,32149,22813,166841,15860,38708,162799,23515,138590,23204,13861,171696,23249,23479,23804,26478,34195,170309,29793,29853,14453,138579,145054,155681,16108,153822,15093,31484,40855,147809,166157,143850,133770,143966,17162,33924,40854,37935,18736,34323,22678,38730,37400,31184,31282,26208,27177,34973,29772,31685,26498,31276,21071,36934,13542,29636,155065,29894,40903,22451,18735,21580,16689,145038,22552,31346,162661,35727,18094,159368,16769,155033,31662,140476,40904,140481,140489,140492,40905,34052,144827,16564,40906,17633,175615,25281,28782,40907,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,12736,12737,12738,12739,12740,131340,12741,131281,131277,12742,12743,131275,139240,12744,131274,12745,12746,12747,12748,131342,12749,12750,256,193,461,192,274,201,282,200,332,211,465,210,null,7870,null,7872,202,257,225,462,224,593,275,233,283,232,299,237,464,236,333,243,466,242,363,250,468,249,470,472,474,476,252,null,7871,null,7873,234,609,9178,9179,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,172969,135493,null,25866,null,null,20029,28381,40270,37343,null,null,161589,25745,20250,20264,20392,20822,20852,20892,20964,21153,21160,21307,21326,21457,21464,22242,22768,22788,22791,22834,22836,23398,23454,23455,23706,24198,24635,25993,26622,26628,26725,27982,28860,30005,32420,32428,32442,32455,32463,32479,32518,32567,33402,33487,33647,35270,35774,35810,36710,36711,36718,29713,31996,32205,26950,31433,21031,null,null,null,null,37260,30904,37214,32956,null,36107,33014,133607,null,null,32927,40647,19661,40393,40460,19518,171510,159758,40458,172339,13761,null,28314,33342,29977,null,18705,39532,39567,40857,31111,164972,138698,132560,142054,20004,20097,20096,20103,20159,20203,20279,13388,20413,15944,20483,20616,13437,13459,13477,20870,22789,20955,20988,20997,20105,21113,21136,21287,13767,21417,13649,21424,13651,21442,21539,13677,13682,13953,21651,21667,21684,21689,21712,21743,21784,21795,21800,13720,21823,13733,13759,21975,13765,163204,21797,null,134210,134421,151851,21904,142534,14828,131905,36422,150968,169189,16467,164030,30586,142392,14900,18389,164189,158194,151018,25821,134524,135092,134357,135412,25741,36478,134806,134155,135012,142505,164438,148691,null,134470,170573,164073,18420,151207,142530,39602,14951,169460,16365,13574,152263,169940,161992,142660,40302,38933,null,17369,155813,25780,21731,142668,142282,135287,14843,135279,157402,157462,162208,25834,151634,134211,36456,139681,166732,132913,null,18443,131497,16378,22643,142733,null,148936,132348,155799,134988,134550,21881,16571,17338,null,19124,141926,135325,33194,39157,134556,25465,14846,141173,36288,22177,25724,15939,null,173569,134665,142031,142537,null,135368,145858,14738,14854,164507,13688,155209,139463,22098,134961,142514,169760,13500,27709,151099,null,null,161140,142987,139784,173659,167117,134778,134196,157724,32659,135375,141315,141625,13819,152035,134796,135053,134826,16275,134960,134471,135503,134732,null,134827,134057,134472,135360,135485,16377,140950,25650,135085,144372,161337,142286,134526,134527,142417,142421,14872,134808,135367,134958,173618,158544,167122,167321,167114,38314,21708,33476,21945,null,171715,39974,39606,161630,142830,28992,33133,33004,23580,157042,33076,14231,21343,164029,37302,134906,134671,134775,134907,13789,151019,13833,134358,22191,141237,135369,134672,134776,135288,135496,164359,136277,134777,151120,142756,23124,135197,135198,135413,135414,22428,134673,161428,164557,135093,134779,151934,14083,135094,135552,152280,172733,149978,137274,147831,164476,22681,21096,13850,153405,31666,23400,18432,19244,40743,18919,39967,39821,154484,143677,22011,13810,22153,20008,22786,138177,194680,38737,131206,20059,20155,13630,23587,24401,24516,14586,25164,25909,27514,27701,27706,28780,29227,20012,29357,149737,32594,31035,31993,32595,156266,13505,null,156491,32770,32896,157202,158033,21341,34916,35265,161970,35744,36125,38021,38264,38271,38376,167439,38886,39029,39118,39134,39267,17e4,40060,40479,40644,27503,63751,20023,131207,38429,25143,38050,null,20539,28158,171123,40870,15817,34959,147790,28791,23797,19232,152013,13657,154928,24866,166450,36775,37366,29073,26393,29626,144001,172295,15499,137600,19216,30948,29698,20910,165647,16393,27235,172730,16931,34319,133743,31274,170311,166634,38741,28749,21284,139390,37876,30425,166371,40871,30685,20131,20464,20668,20015,20247,40872,21556,32139,22674,22736,138678,24210,24217,24514,141074,25995,144377,26905,27203,146531,27903,null,29184,148741,29580,16091,150035,23317,29881,35715,154788,153237,31379,31724,31939,32364,33528,34199,40873,34960,40874,36537,40875,36815,34143,39392,37409,40876,167353,136255,16497,17058,23066,null,null,null,39016,26475,17014,22333,null,34262,149883,33471,160013,19585,159092,23931,158485,159678,40877,40878,23446,40879,26343,32347,28247,31178,15752,17603,143958,141206,17306,17718,null,23765,146202,35577,23672,15634,144721,23928,40882,29015,17752,147692,138787,19575,14712,13386,131492,158785,35532,20404,131641,22975,33132,38998,170234,24379,134047,null,139713,166253,16642,18107,168057,16135,40883,172469,16632,14294,18167,158790,16764,165554,160767,17773,14548,152730,17761,17691,19849,19579,19830,17898,16328,150287,13921,17630,17597,16877,23870,23880,23894,15868,14351,23972,23993,14368,14392,24130,24253,24357,24451,14600,14612,14655,14669,24791,24893,23781,14729,25015,25017,25039,14776,25132,25232,25317,25368,14840,22193,14851,25570,25595,25607,25690,14923,25792,23829,22049,40863,14999,25990,15037,26111,26195,15090,26258,15138,26390,15170,26532,26624,15192,26698,26756,15218,15217,15227,26889,26947,29276,26980,27039,27013,15292,27094,15325,27237,27252,27249,27266,15340,27289,15346,27307,27317,27348,27382,27521,27585,27626,27765,27818,15563,27906,27910,27942,28033,15599,28068,28081,28181,28184,28201,28294,166336,28347,28386,28378,40831,28392,28393,28452,28468,15686,147265,28545,28606,15722,15733,29111,23705,15754,28716,15761,28752,28756,28783,28799,28809,131877,17345,13809,134872,147159,22462,159443,28990,153568,13902,27042,166889,23412,31305,153825,169177,31333,31357,154028,31419,31408,31426,31427,29137,156813,16842,31450,31453,31466,16879,21682,154625,31499,31573,31529,152334,154878,31650,31599,33692,154548,158847,31696,33825,31634,31672,154912,15789,154725,33938,31738,31750,31797,154817,31812,31875,149634,31910,26237,148856,31945,31943,31974,31860,31987,31989,31950,32359,17693,159300,32093,159446,29837,32137,32171,28981,32179,32210,147543,155689,32228,15635,32245,137209,32229,164717,32285,155937,155994,32366,32402,17195,37996,32295,32576,32577,32583,31030,156368,39393,32663,156497,32675,136801,131176,17756,145254,17667,164666,32762,156809,32773,32776,32797,32808,32815,172167,158915,32827,32828,32865,141076,18825,157222,146915,157416,26405,32935,166472,33031,33050,22704,141046,27775,156824,151480,25831,136330,33304,137310,27219,150117,150165,17530,33321,133901,158290,146814,20473,136445,34018,33634,158474,149927,144688,137075,146936,33450,26907,194964,16859,34123,33488,33562,134678,137140,14017,143741,144730,33403,33506,33560,147083,159139,158469,158615,144846,15807,33565,21996,33669,17675,159141,33708,33729,33747,13438,159444,27223,34138,13462,159298,143087,33880,154596,33905,15827,17636,27303,33866,146613,31064,33960,158614,159351,159299,34014,33807,33681,17568,33939,34020,154769,16960,154816,17731,34100,23282,159385,17703,34163,17686,26559,34326,165413,165435,34241,159880,34306,136578,159949,194994,17770,34344,13896,137378,21495,160666,34430,34673,172280,34798,142375,34737,34778,34831,22113,34412,26710,17935,34885,34886,161248,146873,161252,34910,34972,18011,34996,34997,25537,35013,30583,161551,35207,35210,35238,35241,35239,35260,166437,35303,162084,162493,35484,30611,37374,35472,162393,31465,162618,147343,18195,162616,29052,35596,35615,152624,152933,35647,35660,35661,35497,150138,35728,35739,35503,136927,17941,34895,35995,163156,163215,195028,14117,163155,36054,163224,163261,36114,36099,137488,36059,28764,36113,150729,16080,36215,36265,163842,135188,149898,15228,164284,160012,31463,36525,36534,36547,37588,36633,36653,164709,164882,36773,37635,172703,133712,36787,18730,166366,165181,146875,24312,143970,36857,172052,165564,165121,140069,14720,159447,36919,165180,162494,36961,165228,165387,37032,165651,37060,165606,37038,37117,37223,15088,37289,37316,31916,166195,138889,37390,27807,37441,37474,153017,37561,166598,146587,166668,153051,134449,37676,37739,166625,166891,28815,23235,166626,166629,18789,37444,166892,166969,166911,37747,37979,36540,38277,38310,37926,38304,28662,17081,140922,165592,135804,146990,18911,27676,38523,38550,16748,38563,159445,25050,38582,30965,166624,38589,21452,18849,158904,131700,156688,168111,168165,150225,137493,144138,38705,34370,38710,18959,17725,17797,150249,28789,23361,38683,38748,168405,38743,23370,168427,38751,37925,20688,143543,143548,38793,38815,38833,38846,38848,38866,38880,152684,38894,29724,169011,38911,38901,168989,162170,19153,38964,38963,38987,39014,15118,160117,15697,132656,147804,153350,39114,39095,39112,39111,19199,159015,136915,21936,39137,39142,39148,37752,39225,150057,19314,170071,170245,39413,39436,39483,39440,39512,153381,14020,168113,170965,39648,39650,170757,39668,19470,39700,39725,165376,20532,39732,158120,14531,143485,39760,39744,171326,23109,137315,39822,148043,39938,39935,39948,171624,40404,171959,172434,172459,172257,172323,172511,40318,40323,172340,40462,26760,40388,139611,172435,172576,137531,172595,40249,172217,172724,40592,40597,40606,40610,19764,40618,40623,148324,40641,15200,14821,15645,20274,14270,166955,40706,40712,19350,37924,159138,40727,40726,40761,22175,22154,40773,39352,168075,38898,33919,40802,40809,31452,40846,29206,19390,149877,149947,29047,150008,148296,150097,29598,166874,137466,31135,166270,167478,37737,37875,166468,37612,37761,37835,166252,148665,29207,16107,30578,31299,28880,148595,148472,29054,137199,28835,137406,144793,16071,137349,152623,137208,14114,136955,137273,14049,137076,137425,155467,14115,136896,22363,150053,136190,135848,136134,136374,34051,145062,34051,33877,149908,160101,146993,152924,147195,159826,17652,145134,170397,159526,26617,14131,15381,15847,22636,137506,26640,16471,145215,147681,147595,147727,158753,21707,22174,157361,22162,135135,134056,134669,37830,166675,37788,20216,20779,14361,148534,20156,132197,131967,20299,20362,153169,23144,131499,132043,14745,131850,132116,13365,20265,131776,167603,131701,35546,131596,20120,20685,20749,20386,20227,150030,147082,20290,20526,20588,20609,20428,20453,20568,20732,20825,20827,20829,20830,28278,144789,147001,147135,28018,137348,147081,20904,20931,132576,17629,132259,132242,132241,36218,166556,132878,21081,21156,133235,21217,37742,18042,29068,148364,134176,149932,135396,27089,134685,29817,16094,29849,29716,29782,29592,19342,150204,147597,21456,13700,29199,147657,21940,131909,21709,134086,22301,37469,38644,37734,22493,22413,22399,13886,22731,23193,166470,136954,137071,136976,23084,22968,37519,23166,23247,23058,153926,137715,137313,148117,14069,27909,29763,23073,155267,23169,166871,132115,37856,29836,135939,28933,18802,37896,166395,37821,14240,23582,23710,24158,24136,137622,137596,146158,24269,23375,137475,137476,14081,137376,14045,136958,14035,33066,166471,138682,144498,166312,24332,24334,137511,137131,23147,137019,23364,34324,161277,34912,24702,141408,140843,24539,16056,140719,140734,168072,159603,25024,131134,131142,140827,24985,24984,24693,142491,142599,149204,168269,25713,149093,142186,14889,142114,144464,170218,142968,25399,173147,25782,25393,25553,149987,142695,25252,142497,25659,25963,26994,15348,143502,144045,149897,144043,21773,144096,137433,169023,26318,144009,143795,15072,16784,152964,166690,152975,136956,152923,152613,30958,143619,137258,143924,13412,143887,143746,148169,26254,159012,26219,19347,26160,161904,138731,26211,144082,144097,26142,153714,14545,145466,145340,15257,145314,144382,29904,15254,26511,149034,26806,26654,15300,27326,14435,145365,148615,27187,27218,27337,27397,137490,25873,26776,27212,15319,27258,27479,147392,146586,37792,37618,166890,166603,37513,163870,166364,37991,28069,28427,149996,28007,147327,15759,28164,147516,23101,28170,22599,27940,30786,28987,148250,148086,28913,29264,29319,29332,149391,149285,20857,150180,132587,29818,147192,144991,150090,149783,155617,16134,16049,150239,166947,147253,24743,16115,29900,29756,37767,29751,17567,159210,17745,30083,16227,150745,150790,16216,30037,30323,173510,15129,29800,166604,149931,149902,15099,15821,150094,16127,149957,149747,37370,22322,37698,166627,137316,20703,152097,152039,30584,143922,30478,30479,30587,149143,145281,14942,149744,29752,29851,16063,150202,150215,16584,150166,156078,37639,152961,30750,30861,30856,30930,29648,31065,161601,153315,16654,31131,33942,31141,27181,147194,31290,31220,16750,136934,16690,37429,31217,134476,149900,131737,146874,137070,13719,21867,13680,13994,131540,134157,31458,23129,141045,154287,154268,23053,131675,30960,23082,154566,31486,16889,31837,31853,16913,154547,155324,155302,31949,150009,137136,31886,31868,31918,27314,32220,32263,32211,32590,156257,155996,162632,32151,155266,17002,158581,133398,26582,131150,144847,22468,156690,156664,149858,32733,31527,133164,154345,154947,31500,155150,39398,34373,39523,27164,144447,14818,150007,157101,39455,157088,33920,160039,158929,17642,33079,17410,32966,33033,33090,157620,39107,158274,33378,33381,158289,33875,159143,34320,160283,23174,16767,137280,23339,137377,23268,137432,34464,195004,146831,34861,160802,23042,34926,20293,34951,35007,35046,35173,35149,153219,35156,161669,161668,166901,166873,166812,166393,16045,33955,18165,18127,14322,35389,35356,169032,24397,37419,148100,26068,28969,28868,137285,40301,35999,36073,163292,22938,30659,23024,17262,14036,36394,36519,150537,36656,36682,17140,27736,28603,140065,18587,28537,28299,137178,39913,14005,149807,37051,37015,21873,18694,37307,37892,166475,16482,166652,37927,166941,166971,34021,35371,38297,38311,38295,38294,167220,29765,16066,149759,150082,148458,16103,143909,38543,167655,167526,167525,16076,149997,150136,147438,29714,29803,16124,38721,168112,26695,18973,168083,153567,38749,37736,166281,166950,166703,156606,37562,23313,35689,18748,29689,147995,38811,38769,39224,134950,24001,166853,150194,38943,169178,37622,169431,37349,17600,166736,150119,166756,39132,166469,16128,37418,18725,33812,39227,39245,162566,15869,39323,19311,39338,39516,166757,153800,27279,39457,23294,39471,170225,19344,170312,39356,19389,19351,37757,22642,135938,22562,149944,136424,30788,141087,146872,26821,15741,37976,14631,24912,141185,141675,24839,40015,40019,40059,39989,39952,39807,39887,171565,39839,172533,172286,40225,19630,147716,40472,19632,40204,172468,172269,172275,170287,40357,33981,159250,159711,158594,34300,17715,159140,159364,159216,33824,34286,159232,145367,155748,31202,144796,144960,18733,149982,15714,37851,37566,37704,131775,30905,37495,37965,20452,13376,36964,152925,30781,30804,30902,30795,137047,143817,149825,13978,20338,28634,28633,28702,28702,21524,147893,22459,22771,22410,40214,22487,28980,13487,147884,29163,158784,151447,23336,137141,166473,24844,23246,23051,17084,148616,14124,19323,166396,37819,37816,137430,134941,33906,158912,136211,148218,142374,148417,22932,146871,157505,32168,155995,155812,149945,149899,166394,37605,29666,16105,29876,166755,137375,16097,150195,27352,29683,29691,16086,150078,150164,137177,150118,132007,136228,149989,29768,149782,28837,149878,37508,29670,37727,132350,37681,166606,166422,37766,166887,153045,18741,166530,29035,149827,134399,22180,132634,134123,134328,21762,31172,137210,32254,136898,150096,137298,17710,37889,14090,166592,149933,22960,137407,137347,160900,23201,14050,146779,14e3,37471,23161,166529,137314,37748,15565,133812,19094,14730,20724,15721,15692,136092,29045,17147,164376,28175,168164,17643,27991,163407,28775,27823,15574,147437,146989,28162,28428,15727,132085,30033,14012,13512,18048,16090,18545,22980,37486,18750,36673,166940,158656,22546,22472,14038,136274,28926,148322,150129,143331,135856,140221,26809,26983,136088,144613,162804,145119,166531,145366,144378,150687,27162,145069,158903,33854,17631,17614,159014,159057,158850,159710,28439,160009,33597,137018,33773,158848,159827,137179,22921,23170,137139,23137,23153,137477,147964,14125,23023,137020,14023,29070,37776,26266,148133,23150,23083,148115,27179,147193,161590,148571,148170,28957,148057,166369,20400,159016,23746,148686,163405,148413,27148,148054,135940,28838,28979,148457,15781,27871,194597,150095,32357,23019,23855,15859,24412,150109,137183,32164,33830,21637,146170,144128,131604,22398,133333,132633,16357,139166,172726,28675,168283,23920,29583,31955,166489,168992,20424,32743,29389,29456,162548,29496,29497,153334,29505,29512,16041,162584,36972,29173,149746,29665,33270,16074,30476,16081,27810,22269,29721,29726,29727,16098,16112,16116,16122,29907,16142,16211,30018,30061,30066,30093,16252,30152,30172,16320,30285,16343,30324,16348,30330,151388,29064,22051,35200,22633,16413,30531,16441,26465,16453,13787,30616,16490,16495,23646,30654,30667,22770,30744,28857,30748,16552,30777,30791,30801,30822,33864,152885,31027,26627,31026,16643,16649,31121,31129,36795,31238,36796,16743,31377,16818,31420,33401,16836,31439,31451,16847,20001,31586,31596,31611,31762,31771,16992,17018,31867,31900,17036,31928,17044,31981,36755,28864,134351,32207,32212,32208,32253,32686,32692,29343,17303,32800,32805,31545,32814,32817,32852,15820,22452,28832,32951,33001,17389,33036,29482,33038,33042,30048,33044,17409,15161,33110,33113,33114,17427,22586,33148,33156,17445,33171,17453,33189,22511,33217,33252,33364,17551,33446,33398,33482,33496,33535,17584,33623,38505,27018,33797,28917,33892,24803,33928,17668,33982,34017,34040,34064,34104,34130,17723,34159,34160,34272,17783,34418,34450,34482,34543,38469,34699,17926,17943,34990,35071,35108,35143,35217,162151,35369,35384,35476,35508,35921,36052,36082,36124,18328,22623,36291,18413,20206,36410,21976,22356,36465,22005,36528,18487,36558,36578,36580,36589,36594,36791,36801,36810,36812,36915,39364,18605,39136,37395,18718,37416,37464,37483,37553,37550,37567,37603,37611,37619,37620,37629,37699,37764,37805,18757,18769,40639,37911,21249,37917,37933,37950,18794,37972,38009,38189,38306,18855,38388,38451,18917,26528,18980,38720,18997,38834,38850,22100,19172,24808,39097,19225,39153,22596,39182,39193,20916,39196,39223,39234,39261,39266,19312,39365,19357,39484,39695,31363,39785,39809,39901,39921,39924,19565,39968,14191,138178,40265,39994,40702,22096,40339,40381,40384,40444,38134,36790,40571,40620,40625,40637,40646,38108,40674,40689,40696,31432,40772,131220,131767,132e3,26906,38083,22956,132311,22592,38081,14265,132565,132629,132726,136890,22359,29043,133826,133837,134079,21610,194619,134091,21662,134139,134203,134227,134245,134268,24807,134285,22138,134325,134365,134381,134511,134578,134600,26965,39983,34725,134660,134670,134871,135056,134957,134771,23584,135100,24075,135260,135247,135286,26398,135291,135304,135318,13895,135359,135379,135471,135483,21348,33965,135907,136053,135990,35713,136567,136729,137155,137159,20088,28859,137261,137578,137773,137797,138282,138352,138412,138952,25283,138965,139029,29080,26709,139333,27113,14024,139900,140247,140282,141098,141425,141647,33533,141671,141715,142037,35237,142056,36768,142094,38840,142143,38983,39613,142412,null,142472,142519,154600,142600,142610,142775,142741,142914,143220,143308,143411,143462,144159,144350,24497,26184,26303,162425,144743,144883,29185,149946,30679,144922,145174,32391,131910,22709,26382,26904,146087,161367,155618,146961,147129,161278,139418,18640,19128,147737,166554,148206,148237,147515,148276,148374,150085,132554,20946,132625,22943,138920,15294,146687,148484,148694,22408,149108,14747,149295,165352,170441,14178,139715,35678,166734,39382,149522,149755,150037,29193,150208,134264,22885,151205,151430,132985,36570,151596,21135,22335,29041,152217,152601,147274,150183,21948,152646,152686,158546,37332,13427,152895,161330,152926,18200,152930,152934,153543,149823,153693,20582,13563,144332,24798,153859,18300,166216,154286,154505,154630,138640,22433,29009,28598,155906,162834,36950,156082,151450,35682,156674,156746,23899,158711,36662,156804,137500,35562,150006,156808,147439,156946,19392,157119,157365,141083,37989,153569,24981,23079,194765,20411,22201,148769,157436,20074,149812,38486,28047,158909,13848,35191,157593,157806,156689,157790,29151,157895,31554,168128,133649,157990,37124,158009,31301,40432,158202,39462,158253,13919,156777,131105,31107,158260,158555,23852,144665,33743,158621,18128,158884,30011,34917,159150,22710,14108,140685,159819,160205,15444,160384,160389,37505,139642,160395,37680,160486,149968,27705,38047,160848,134904,34855,35061,141606,164979,137137,28344,150058,137248,14756,14009,23568,31203,17727,26294,171181,170148,35139,161740,161880,22230,16607,136714,14753,145199,164072,136133,29101,33638,162269,168360,23143,19639,159919,166315,162301,162314,162571,163174,147834,31555,31102,163849,28597,172767,27139,164632,21410,159239,37823,26678,38749,164207,163875,158133,136173,143919,163912,23941,166960,163971,22293,38947,166217,23979,149896,26046,27093,21458,150181,147329,15377,26422,163984,164084,164142,139169,164175,164233,164271,164378,164614,164655,164746,13770,164968,165546,18682,25574,166230,30728,37461,166328,17394,166375,17375,166376,166726,166868,23032,166921,36619,167877,168172,31569,168208,168252,15863,168286,150218,36816,29327,22155,169191,169449,169392,169400,169778,170193,170313,170346,170435,170536,170766,171354,171419,32415,171768,171811,19620,38215,172691,29090,172799,19857,36882,173515,19868,134300,36798,21953,36794,140464,36793,150163,17673,32383,28502,27313,20202,13540,166700,161949,14138,36480,137205,163876,166764,166809,162366,157359,15851,161365,146615,153141,153942,20122,155265,156248,22207,134765,36366,23405,147080,150686,25566,25296,137206,137339,25904,22061,154698,21530,152337,15814,171416,19581,22050,22046,32585,155352,22901,146752,34672,19996,135146,134473,145082,33047,40286,36120,30267,40005,30286,30649,37701,21554,33096,33527,22053,33074,33816,32957,21994,31074,22083,21526,134813,13774,22021,22001,26353,164578,13869,30004,22e3,21946,21655,21874,134209,134294,24272,151880,134774,142434,134818,40619,32090,21982,135285,25245,38765,21652,36045,29174,37238,25596,25529,25598,21865,142147,40050,143027,20890,13535,134567,20903,21581,21790,21779,30310,36397,157834,30129,32950,34820,34694,35015,33206,33820,135361,17644,29444,149254,23440,33547,157843,22139,141044,163119,147875,163187,159440,160438,37232,135641,37384,146684,173737,134828,134905,29286,138402,18254,151490,163833,135147,16634,40029,25887,142752,18675,149472,171388,135148,134666,24674,161187,135149,null,155720,135559,29091,32398,40272,19994,19972,13687,23309,27826,21351,13996,14812,21373,13989,149016,22682,150382,33325,21579,22442,154261,133497,null,14930,140389,29556,171692,19721,39917,146686,171824,19547,151465,169374,171998,33884,146870,160434,157619,145184,25390,32037,147191,146988,14890,36872,21196,15988,13946,17897,132238,30272,23280,134838,30842,163630,22695,16575,22140,39819,23924,30292,173108,40581,19681,30201,14331,24857,143578,148466,null,22109,135849,22439,149859,171526,21044,159918,13741,27722,40316,31830,39737,22494,137068,23635,25811,169168,156469,160100,34477,134440,159010,150242,134513,null,20990,139023,23950,38659,138705,40577,36940,31519,39682,23761,31651,25192,25397,39679,31695,39722,31870,39726,31810,31878,39957,31740,39689,40727,39963,149822,40794,21875,23491,20477,40600,20466,21088,15878,21201,22375,20566,22967,24082,38856,40363,36700,21609,38836,39232,38842,21292,24880,26924,21466,39946,40194,19515,38465,27008,20646,30022,137069,39386,21107,null,37209,38529,37212,null,37201,167575,25471,159011,27338,22033,37262,30074,25221,132092,29519,31856,154657,146685,null,149785,30422,39837,20010,134356,33726,34882,null,23626,27072,20717,22394,21023,24053,20174,27697,131570,20281,21660,21722,21146,36226,13822,24332,13811,null,27474,37244,40869,39831,38958,39092,39610,40616,40580,29050,31508,null,27642,34840,32632,null,22048,173642,36471,40787,null,36308,36431,40476,36353,25218,164733,36392,36469,31443,150135,31294,30936,27882,35431,30215,166490,40742,27854,34774,30147,172722,30803,194624,36108,29410,29553,35629,29442,29937,36075,150203,34351,24506,34976,17591,null,137275,159237,null,35454,140571,null,24829,30311,39639,40260,37742,39823,34805,null,34831,36087,29484,38689,39856,13782,29362,19463,31825,39242,155993,24921,19460,40598,24957,null,22367,24943,25254,25145,25294,14940,25058,21418,144373,25444,26626,13778,23895,166850,36826,167481,null,20697,138566,30982,21298,38456,134971,16485,null,30718,null,31938,155418,31962,31277,32870,32867,32077,29957,29938,35220,33306,26380,32866,160902,32859,29936,33027,30500,35209,157644,30035,159441,34729,34766,33224,34700,35401,36013,35651,30507,29944,34010,13877,27058,36262,null,35241,29800,28089,34753,147473,29927,15835,29046,24740,24988,15569,29026,24695,null,32625,166701,29264,24809,19326,21024,15384,146631,155351,161366,152881,137540,135934,170243,159196,159917,23745,156077,166415,145015,131310,157766,151310,17762,23327,156492,40784,40614,156267,12288,65292,12289,12290,65294,8231,65307,65306,65311,65281,65072,8230,8229,65104,65105,65106,183,65108,65109,65110,65111,65372,8211,65073,8212,65075,9588,65076,65103,65288,65289,65077,65078,65371,65373,65079,65080,12308,12309,65081,65082,12304,12305,65083,65084,12298,12299,65085,65086,12296,12297,65087,65088,12300,12301,65089,65090,12302,12303,65091,65092,65113,65114,65115,65116,65117,65118,8216,8217,8220,8221,12317,12318,8245,8242,65283,65286,65290,8251,167,12291,9675,9679,9651,9650,9678,9734,9733,9671,9670,9633,9632,9661,9660,12963,8453,175,65507,65343,717,65097,65098,65101,65102,65099,65100,65119,65120,65121,65291,65293,215,247,177,8730,65308,65310,65309,8806,8807,8800,8734,8786,8801,65122,65123,65124,65125,65126,65374,8745,8746,8869,8736,8735,8895,13266,13265,8747,8750,8757,8756,9792,9794,8853,8857,8593,8595,8592,8594,8598,8599,8601,8600,8741,8739,65295,65340,8725,65128,65284,65509,12306,65504,65505,65285,65312,8451,8457,65129,65130,65131,13269,13212,13213,13214,13262,13217,13198,13199,13252,176,20825,20827,20830,20829,20833,20835,21991,29929,31950,9601,9602,9603,9604,9605,9606,9607,9608,9615,9614,9613,9612,9611,9610,9609,9532,9524,9516,9508,9500,9620,9472,9474,9621,9484,9488,9492,9496,9581,9582,9584,9583,9552,9566,9578,9569,9698,9699,9701,9700,9585,9586,9587,65296,65297,65298,65299,65300,65301,65302,65303,65304,65305,8544,8545,8546,8547,8548,8549,8550,8551,8552,8553,12321,12322,12323,12324,12325,12326,12327,12328,12329,21313,21316,21317,65313,65314,65315,65316,65317,65318,65319,65320,65321,65322,65323,65324,65325,65326,65327,65328,65329,65330,65331,65332,65333,65334,65335,65336,65337,65338,65345,65346,65347,65348,65349,65350,65351,65352,65353,65354,65355,65356,65357,65358,65359,65360,65361,65362,65363,65364,65365,65366,65367,65368,65369,65370,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,931,932,933,934,935,936,937,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,963,964,965,966,967,968,969,12549,12550,12551,12552,12553,12554,12555,12556,12557,12558,12559,12560,12561,12562,12563,12564,12565,12566,12567,12568,12569,12570,12571,12572,12573,12574,12575,12576,12577,12578,12579,12580,12581,12582,12583,12584,12585,729,713,714,711,715,9216,9217,9218,9219,9220,9221,9222,9223,9224,9225,9226,9227,9228,9229,9230,9231,9232,9233,9234,9235,9236,9237,9238,9239,9240,9241,9242,9243,9244,9245,9246,9247,9249,8364,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,19968,20057,19969,19971,20035,20061,20102,20108,20154,20799,20837,20843,20960,20992,20993,21147,21269,21313,21340,21448,19977,19979,19976,19978,20011,20024,20961,20037,20040,20063,20062,20110,20129,20800,20995,21242,21315,21449,21475,22303,22763,22805,22823,22899,23376,23377,23379,23544,23567,23586,23608,23665,24029,24037,24049,24050,24051,24062,24178,24318,24331,24339,25165,19985,19984,19981,20013,20016,20025,20043,23609,20104,20113,20117,20114,20116,20130,20161,20160,20163,20166,20167,20173,20170,20171,20164,20803,20801,20839,20845,20846,20844,20887,20982,20998,20999,21e3,21243,21246,21247,21270,21305,21320,21319,21317,21342,21380,21451,21450,21453,22764,22825,22827,22826,22829,23380,23569,23588,23610,23663,24052,24187,24319,24340,24341,24515,25096,25142,25163,25166,25903,25991,26007,26020,26041,26085,26352,26376,26408,27424,27490,27513,27595,27604,27611,27663,27700,28779,29226,29238,29243,29255,29273,29275,29356,29579,19993,19990,19989,19988,19992,20027,20045,20047,20046,20197,20184,20180,20181,20182,20183,20195,20196,20185,20190,20805,20804,20873,20874,20908,20985,20986,20984,21002,21152,21151,21253,21254,21271,21277,20191,21322,21321,21345,21344,21359,21358,21435,21487,21476,21491,21484,21486,21481,21480,21500,21496,21493,21483,21478,21482,21490,21489,21488,21477,21485,21499,22235,22234,22806,22830,22833,22900,22902,23381,23427,23612,24040,24039,24038,24066,24067,24179,24188,24321,24344,24343,24517,25098,25171,25172,25170,25169,26021,26086,26414,26412,26410,26411,26413,27491,27597,27665,27664,27704,27713,27712,27710,29359,29572,29577,29916,29926,29976,29983,29992,29993,3e4,30001,30002,30003,30091,30333,30382,30399,30446,30683,30690,30707,31034,31166,31348,31435,19998,19999,20050,20051,20073,20121,20132,20134,20133,20223,20233,20249,20234,20245,20237,20240,20241,20239,20210,20214,20219,20208,20211,20221,20225,20235,20809,20807,20806,20808,20840,20849,20877,20912,21015,21009,21010,21006,21014,21155,21256,21281,21280,21360,21361,21513,21519,21516,21514,21520,21505,21515,21508,21521,21517,21512,21507,21518,21510,21522,22240,22238,22237,22323,22320,22312,22317,22316,22319,22313,22809,22810,22839,22840,22916,22904,22915,22909,22905,22914,22913,23383,23384,23431,23432,23429,23433,23546,23574,23673,24030,24070,24182,24180,24335,24347,24537,24534,25102,25100,25101,25104,25187,25179,25176,25910,26089,26088,26092,26093,26354,26355,26377,26429,26420,26417,26421,27425,27492,27515,27670,27741,27735,27737,27743,27744,27728,27733,27745,27739,27725,27726,28784,29279,29277,30334,31481,31859,31992,32566,32650,32701,32769,32771,32780,32786,32819,32895,32905,32907,32908,33251,33258,33267,33276,33292,33307,33311,33390,33394,33406,34411,34880,34892,34915,35199,38433,20018,20136,20301,20303,20295,20311,20318,20276,20315,20309,20272,20304,20305,20285,20282,20280,20291,20308,20284,20294,20323,20316,20320,20271,20302,20278,20313,20317,20296,20314,20812,20811,20813,20853,20918,20919,21029,21028,21033,21034,21032,21163,21161,21162,21164,21283,21363,21365,21533,21549,21534,21566,21542,21582,21543,21574,21571,21555,21576,21570,21531,21545,21578,21561,21563,21560,21550,21557,21558,21536,21564,21568,21553,21547,21535,21548,22250,22256,22244,22251,22346,22353,22336,22349,22343,22350,22334,22352,22351,22331,22767,22846,22941,22930,22952,22942,22947,22937,22934,22925,22948,22931,22922,22949,23389,23388,23386,23387,23436,23435,23439,23596,23616,23617,23615,23614,23696,23697,23700,23692,24043,24076,24207,24199,24202,24311,24324,24351,24420,24418,24439,24441,24536,24524,24535,24525,24561,24555,24568,24554,25106,25105,25220,25239,25238,25216,25206,25225,25197,25226,25212,25214,25209,25203,25234,25199,25240,25198,25237,25235,25233,25222,25913,25915,25912,26097,26356,26463,26446,26447,26448,26449,26460,26454,26462,26441,26438,26464,26451,26455,27493,27599,27714,27742,27801,27777,27784,27785,27781,27803,27754,27770,27792,27760,27788,27752,27798,27794,27773,27779,27762,27774,27764,27782,27766,27789,27796,27800,27778,28790,28796,28797,28792,29282,29281,29280,29380,29378,29590,29996,29995,30007,30008,30338,30447,30691,31169,31168,31167,31350,31995,32597,32918,32915,32925,32920,32923,32922,32946,33391,33426,33419,33421,35211,35282,35328,35895,35910,35925,35997,36196,36208,36275,36523,36554,36763,36784,36802,36806,36805,36804,24033,37009,37026,37034,37030,37027,37193,37318,37324,38450,38446,38449,38442,38444,20006,20054,20083,20107,20123,20126,20139,20140,20335,20381,20365,20339,20351,20332,20379,20363,20358,20355,20336,20341,20360,20329,20347,20374,20350,20367,20369,20346,20820,20818,20821,20841,20855,20854,20856,20925,20989,21051,21048,21047,21050,21040,21038,21046,21057,21182,21179,21330,21332,21331,21329,21350,21367,21368,21369,21462,21460,21463,21619,21621,21654,21624,21653,21632,21627,21623,21636,21650,21638,21628,21648,21617,21622,21644,21658,21602,21608,21643,21629,21646,22266,22403,22391,22378,22377,22369,22374,22372,22396,22812,22857,22855,22856,22852,22868,22974,22971,22996,22969,22958,22993,22982,22992,22989,22987,22995,22986,22959,22963,22994,22981,23391,23396,23395,23447,23450,23448,23452,23449,23451,23578,23624,23621,23622,23735,23713,23736,23721,23723,23729,23731,24088,24090,24086,24085,24091,24081,24184,24218,24215,24220,24213,24214,24310,24358,24359,24361,24448,24449,24447,24444,24541,24544,24573,24565,24575,24591,24596,24623,24629,24598,24618,24597,24609,24615,24617,24619,24603,25110,25109,25151,25150,25152,25215,25289,25292,25284,25279,25282,25273,25298,25307,25259,25299,25300,25291,25288,25256,25277,25276,25296,25305,25287,25293,25269,25306,25265,25304,25302,25303,25286,25260,25294,25918,26023,26044,26106,26132,26131,26124,26118,26114,26126,26112,26127,26133,26122,26119,26381,26379,26477,26507,26517,26481,26524,26483,26487,26503,26525,26519,26479,26480,26495,26505,26494,26512,26485,26522,26515,26492,26474,26482,27427,27494,27495,27519,27667,27675,27875,27880,27891,27825,27852,27877,27827,27837,27838,27836,27874,27819,27861,27859,27832,27844,27833,27841,27822,27863,27845,27889,27839,27835,27873,27867,27850,27820,27887,27868,27862,27872,28821,28814,28818,28810,28825,29228,29229,29240,29256,29287,29289,29376,29390,29401,29399,29392,29609,29608,29599,29611,29605,30013,30109,30105,30106,30340,30402,30450,30452,30693,30717,31038,31040,31041,31177,31176,31354,31353,31482,31998,32596,32652,32651,32773,32954,32933,32930,32945,32929,32939,32937,32948,32938,32943,33253,33278,33293,33459,33437,33433,33453,33469,33439,33465,33457,33452,33445,33455,33464,33443,33456,33470,33463,34382,34417,21021,34920,36555,36814,36820,36817,37045,37048,37041,37046,37319,37329,38263,38272,38428,38464,38463,38459,38468,38466,38585,38632,38738,38750,20127,20141,20142,20449,20405,20399,20415,20448,20433,20431,20445,20419,20406,20440,20447,20426,20439,20398,20432,20420,20418,20442,20430,20446,20407,20823,20882,20881,20896,21070,21059,21066,21069,21068,21067,21063,21191,21193,21187,21185,21261,21335,21371,21402,21467,21676,21696,21672,21710,21705,21688,21670,21683,21703,21698,21693,21674,21697,21700,21704,21679,21675,21681,21691,21673,21671,21695,22271,22402,22411,22432,22435,22434,22478,22446,22419,22869,22865,22863,22862,22864,23004,23e3,23039,23011,23016,23043,23013,23018,23002,23014,23041,23035,23401,23459,23462,23460,23458,23461,23553,23630,23631,23629,23627,23769,23762,24055,24093,24101,24095,24189,24224,24230,24314,24328,24365,24421,24456,24453,24458,24459,24455,24460,24457,24594,24605,24608,24613,24590,24616,24653,24688,24680,24674,24646,24643,24684,24683,24682,24676,25153,25308,25366,25353,25340,25325,25345,25326,25341,25351,25329,25335,25327,25324,25342,25332,25361,25346,25919,25925,26027,26045,26082,26149,26157,26144,26151,26159,26143,26152,26161,26148,26359,26623,26579,26609,26580,26576,26604,26550,26543,26613,26601,26607,26564,26577,26548,26586,26597,26552,26575,26590,26611,26544,26585,26594,26589,26578,27498,27523,27526,27573,27602,27607,27679,27849,27915,27954,27946,27969,27941,27916,27953,27934,27927,27963,27965,27966,27958,27931,27893,27961,27943,27960,27945,27950,27957,27918,27947,28843,28858,28851,28844,28847,28845,28856,28846,28836,29232,29298,29295,29300,29417,29408,29409,29623,29642,29627,29618,29645,29632,29619,29978,29997,30031,30028,30030,30027,30123,30116,30117,30114,30115,30328,30342,30343,30344,30408,30406,30403,30405,30465,30457,30456,30473,30475,30462,30460,30471,30684,30722,30740,30732,30733,31046,31049,31048,31047,31161,31162,31185,31186,31179,31359,31361,31487,31485,31869,32002,32005,32e3,32009,32007,32004,32006,32568,32654,32703,32772,32784,32781,32785,32822,32982,32997,32986,32963,32964,32972,32993,32987,32974,32990,32996,32989,33268,33314,33511,33539,33541,33507,33499,33510,33540,33509,33538,33545,33490,33495,33521,33537,33500,33492,33489,33502,33491,33503,33519,33542,34384,34425,34427,34426,34893,34923,35201,35284,35336,35330,35331,35998,36e3,36212,36211,36276,36557,36556,36848,36838,36834,36842,36837,36845,36843,36836,36840,37066,37070,37057,37059,37195,37194,37325,38274,38480,38475,38476,38477,38754,38761,38859,38893,38899,38913,39080,39131,39135,39318,39321,20056,20147,20492,20493,20515,20463,20518,20517,20472,20521,20502,20486,20540,20511,20506,20498,20497,20474,20480,20500,20520,20465,20513,20491,20505,20504,20467,20462,20525,20522,20478,20523,20489,20860,20900,20901,20898,20941,20940,20934,20939,21078,21084,21076,21083,21085,21290,21375,21407,21405,21471,21736,21776,21761,21815,21756,21733,21746,21766,21754,21780,21737,21741,21729,21769,21742,21738,21734,21799,21767,21757,21775,22275,22276,22466,22484,22475,22467,22537,22799,22871,22872,22874,23057,23064,23068,23071,23067,23059,23020,23072,23075,23081,23077,23052,23049,23403,23640,23472,23475,23478,23476,23470,23477,23481,23480,23556,23633,23637,23632,23789,23805,23803,23786,23784,23792,23798,23809,23796,24046,24109,24107,24235,24237,24231,24369,24466,24465,24464,24665,24675,24677,24656,24661,24685,24681,24687,24708,24735,24730,24717,24724,24716,24709,24726,25159,25331,25352,25343,25422,25406,25391,25429,25410,25414,25423,25417,25402,25424,25405,25386,25387,25384,25421,25420,25928,25929,26009,26049,26053,26178,26185,26191,26179,26194,26188,26181,26177,26360,26388,26389,26391,26657,26680,26696,26694,26707,26681,26690,26708,26665,26803,26647,26700,26705,26685,26612,26704,26688,26684,26691,26666,26693,26643,26648,26689,27530,27529,27575,27683,27687,27688,27686,27684,27888,28010,28053,28040,28039,28006,28024,28023,27993,28051,28012,28041,28014,27994,28020,28009,28044,28042,28025,28037,28005,28052,28874,28888,28900,28889,28872,28879,29241,29305,29436,29433,29437,29432,29431,29574,29677,29705,29678,29664,29674,29662,30036,30045,30044,30042,30041,30142,30149,30151,30130,30131,30141,30140,30137,30146,30136,30347,30384,30410,30413,30414,30505,30495,30496,30504,30697,30768,30759,30776,30749,30772,30775,30757,30765,30752,30751,30770,31061,31056,31072,31071,31062,31070,31069,31063,31066,31204,31203,31207,31199,31206,31209,31192,31364,31368,31449,31494,31505,31881,32033,32023,32011,32010,32032,32034,32020,32016,32021,32026,32028,32013,32025,32027,32570,32607,32660,32709,32705,32774,32792,32789,32793,32791,32829,32831,33009,33026,33008,33029,33005,33012,33030,33016,33011,33032,33021,33034,33020,33007,33261,33260,33280,33296,33322,33323,33320,33324,33467,33579,33618,33620,33610,33592,33616,33609,33589,33588,33615,33586,33593,33590,33559,33600,33585,33576,33603,34388,34442,34474,34451,34468,34473,34444,34467,34460,34928,34935,34945,34946,34941,34937,35352,35344,35342,35340,35349,35338,35351,35347,35350,35343,35345,35912,35962,35961,36001,36002,36215,36524,36562,36564,36559,36785,36865,36870,36855,36864,36858,36852,36867,36861,36869,36856,37013,37089,37085,37090,37202,37197,37196,37336,37341,37335,37340,37337,38275,38498,38499,38497,38491,38493,38500,38488,38494,38587,39138,39340,39592,39640,39717,39730,39740,20094,20602,20605,20572,20551,20547,20556,20570,20553,20581,20598,20558,20565,20597,20596,20599,20559,20495,20591,20589,20828,20885,20976,21098,21103,21202,21209,21208,21205,21264,21263,21273,21311,21312,21310,21443,26364,21830,21866,21862,21828,21854,21857,21827,21834,21809,21846,21839,21845,21807,21860,21816,21806,21852,21804,21859,21811,21825,21847,22280,22283,22281,22495,22533,22538,22534,22496,22500,22522,22530,22581,22519,22521,22816,22882,23094,23105,23113,23142,23146,23104,23100,23138,23130,23110,23114,23408,23495,23493,23492,23490,23487,23494,23561,23560,23559,23648,23644,23645,23815,23814,23822,23835,23830,23842,23825,23849,23828,23833,23844,23847,23831,24034,24120,24118,24115,24119,24247,24248,24246,24245,24254,24373,24375,24407,24428,24425,24427,24471,24473,24478,24472,24481,24480,24476,24703,24739,24713,24736,24744,24779,24756,24806,24765,24773,24763,24757,24796,24764,24792,24789,24774,24799,24760,24794,24775,25114,25115,25160,25504,25511,25458,25494,25506,25509,25463,25447,25496,25514,25457,25513,25481,25475,25499,25451,25512,25476,25480,25497,25505,25516,25490,25487,25472,25467,25449,25448,25466,25949,25942,25937,25945,25943,21855,25935,25944,25941,25940,26012,26011,26028,26063,26059,26060,26062,26205,26202,26212,26216,26214,26206,26361,21207,26395,26753,26799,26786,26771,26805,26751,26742,26801,26791,26775,26800,26755,26820,26797,26758,26757,26772,26781,26792,26783,26785,26754,27442,27578,27627,27628,27691,28046,28092,28147,28121,28082,28129,28108,28132,28155,28154,28165,28103,28107,28079,28113,28078,28126,28153,28088,28151,28149,28101,28114,28186,28085,28122,28139,28120,28138,28145,28142,28136,28102,28100,28074,28140,28095,28134,28921,28937,28938,28925,28911,29245,29309,29313,29468,29467,29462,29459,29465,29575,29701,29706,29699,29702,29694,29709,29920,29942,29943,29980,29986,30053,30054,30050,30064,30095,30164,30165,30133,30154,30157,30350,30420,30418,30427,30519,30526,30524,30518,30520,30522,30827,30787,30798,31077,31080,31085,31227,31378,31381,31520,31528,31515,31532,31526,31513,31518,31534,31890,31895,31893,32070,32067,32113,32046,32057,32060,32064,32048,32051,32068,32047,32066,32050,32049,32573,32670,32666,32716,32718,32722,32796,32842,32838,33071,33046,33059,33067,33065,33072,33060,33282,33333,33335,33334,33337,33678,33694,33688,33656,33698,33686,33725,33707,33682,33674,33683,33673,33696,33655,33659,33660,33670,33703,34389,24426,34503,34496,34486,34500,34485,34502,34507,34481,34479,34505,34899,34974,34952,34987,34962,34966,34957,34955,35219,35215,35370,35357,35363,35365,35377,35373,35359,35355,35362,35913,35930,36009,36012,36011,36008,36010,36007,36199,36198,36286,36282,36571,36575,36889,36877,36890,36887,36899,36895,36893,36880,36885,36894,36896,36879,36898,36886,36891,36884,37096,37101,37117,37207,37326,37365,37350,37347,37351,37357,37353,38281,38506,38517,38515,38520,38512,38516,38518,38519,38508,38592,38634,38633,31456,31455,38914,38915,39770,40165,40565,40575,40613,40635,20642,20621,20613,20633,20625,20608,20630,20632,20634,26368,20977,21106,21108,21109,21097,21214,21213,21211,21338,21413,21883,21888,21927,21884,21898,21917,21912,21890,21916,21930,21908,21895,21899,21891,21939,21934,21919,21822,21938,21914,21947,21932,21937,21886,21897,21931,21913,22285,22575,22570,22580,22564,22576,22577,22561,22557,22560,22777,22778,22880,23159,23194,23167,23186,23195,23207,23411,23409,23506,23500,23507,23504,23562,23563,23601,23884,23888,23860,23879,24061,24133,24125,24128,24131,24190,24266,24257,24258,24260,24380,24429,24489,24490,24488,24785,24801,24754,24758,24800,24860,24867,24826,24853,24816,24827,24820,24936,24817,24846,24822,24841,24832,24850,25119,25161,25507,25484,25551,25536,25577,25545,25542,25549,25554,25571,25552,25569,25558,25581,25582,25462,25588,25578,25563,25682,25562,25593,25950,25958,25954,25955,26001,26e3,26031,26222,26224,26228,26230,26223,26257,26234,26238,26231,26366,26367,26399,26397,26874,26837,26848,26840,26839,26885,26847,26869,26862,26855,26873,26834,26866,26851,26827,26829,26893,26898,26894,26825,26842,26990,26875,27454,27450,27453,27544,27542,27580,27631,27694,27695,27692,28207,28216,28244,28193,28210,28263,28234,28192,28197,28195,28187,28251,28248,28196,28246,28270,28205,28198,28271,28212,28237,28218,28204,28227,28189,28222,28363,28297,28185,28238,28259,28228,28274,28265,28255,28953,28954,28966,28976,28961,28982,29038,28956,29260,29316,29312,29494,29477,29492,29481,29754,29738,29747,29730,29733,29749,29750,29748,29743,29723,29734,29736,29989,29990,30059,30058,30178,30171,30179,30169,30168,30174,30176,30331,30332,30358,30355,30388,30428,30543,30701,30813,30828,30831,31245,31240,31243,31237,31232,31384,31383,31382,31461,31459,31561,31574,31558,31568,31570,31572,31565,31563,31567,31569,31903,31909,32094,32080,32104,32085,32043,32110,32114,32097,32102,32098,32112,32115,21892,32724,32725,32779,32850,32901,33109,33108,33099,33105,33102,33081,33094,33086,33100,33107,33140,33298,33308,33769,33795,33784,33805,33760,33733,33803,33729,33775,33777,33780,33879,33802,33776,33804,33740,33789,33778,33738,33848,33806,33796,33756,33799,33748,33759,34395,34527,34521,34541,34516,34523,34532,34512,34526,34903,35009,35010,34993,35203,35222,35387,35424,35413,35422,35388,35393,35412,35419,35408,35398,35380,35386,35382,35414,35937,35970,36015,36028,36019,36029,36033,36027,36032,36020,36023,36022,36031,36024,36234,36229,36225,36302,36317,36299,36314,36305,36300,36315,36294,36603,36600,36604,36764,36910,36917,36913,36920,36914,36918,37122,37109,37129,37118,37219,37221,37327,37396,37397,37411,37385,37406,37389,37392,37383,37393,38292,38287,38283,38289,38291,38290,38286,38538,38542,38539,38525,38533,38534,38541,38514,38532,38593,38597,38596,38598,38599,38639,38642,38860,38917,38918,38920,39143,39146,39151,39145,39154,39149,39342,39341,40643,40653,40657,20098,20653,20661,20658,20659,20677,20670,20652,20663,20667,20655,20679,21119,21111,21117,21215,21222,21220,21218,21219,21295,21983,21992,21971,21990,21966,21980,21959,21969,21987,21988,21999,21978,21985,21957,21958,21989,21961,22290,22291,22622,22609,22616,22615,22618,22612,22635,22604,22637,22602,22626,22610,22603,22887,23233,23241,23244,23230,23229,23228,23219,23234,23218,23913,23919,24140,24185,24265,24264,24338,24409,24492,24494,24858,24847,24904,24863,24819,24859,24825,24833,24840,24910,24908,24900,24909,24894,24884,24871,24845,24838,24887,25121,25122,25619,25662,25630,25642,25645,25661,25644,25615,25628,25620,25613,25654,25622,25623,25606,25964,26015,26032,26263,26249,26247,26248,26262,26244,26264,26253,26371,27028,26989,26970,26999,26976,26964,26997,26928,27010,26954,26984,26987,26974,26963,27001,27014,26973,26979,26971,27463,27506,27584,27583,27603,27645,28322,28335,28371,28342,28354,28304,28317,28359,28357,28325,28312,28348,28346,28331,28369,28310,28316,28356,28372,28330,28327,28340,29006,29017,29033,29028,29001,29031,29020,29036,29030,29004,29029,29022,28998,29032,29014,29242,29266,29495,29509,29503,29502,29807,29786,29781,29791,29790,29761,29759,29785,29787,29788,30070,30072,30208,30192,30209,30194,30193,30202,30207,30196,30195,30430,30431,30555,30571,30566,30558,30563,30585,30570,30572,30556,30565,30568,30562,30702,30862,30896,30871,30872,30860,30857,30844,30865,30867,30847,31098,31103,31105,33836,31165,31260,31258,31264,31252,31263,31262,31391,31392,31607,31680,31584,31598,31591,31921,31923,31925,32147,32121,32145,32129,32143,32091,32622,32617,32618,32626,32681,32680,32676,32854,32856,32902,32900,33137,33136,33144,33125,33134,33139,33131,33145,33146,33126,33285,33351,33922,33911,33853,33841,33909,33894,33899,33865,33900,33883,33852,33845,33889,33891,33897,33901,33862,34398,34396,34399,34553,34579,34568,34567,34560,34558,34555,34562,34563,34566,34570,34905,35039,35028,35033,35036,35032,35037,35041,35018,35029,35026,35228,35299,35435,35442,35443,35430,35433,35440,35463,35452,35427,35488,35441,35461,35437,35426,35438,35436,35449,35451,35390,35432,35938,35978,35977,36042,36039,36040,36036,36018,36035,36034,36037,36321,36319,36328,36335,36339,36346,36330,36324,36326,36530,36611,36617,36606,36618,36767,36786,36939,36938,36947,36930,36948,36924,36949,36944,36935,36943,36942,36941,36945,36926,36929,37138,37143,37228,37226,37225,37321,37431,37463,37432,37437,37440,37438,37467,37451,37476,37457,37428,37449,37453,37445,37433,37439,37466,38296,38552,38548,38549,38605,38603,38601,38602,38647,38651,38649,38646,38742,38772,38774,38928,38929,38931,38922,38930,38924,39164,39156,39165,39166,39347,39345,39348,39649,40169,40578,40718,40723,40736,20711,20718,20709,20694,20717,20698,20693,20687,20689,20721,20686,20713,20834,20979,21123,21122,21297,21421,22014,22016,22043,22039,22013,22036,22022,22025,22029,22030,22007,22038,22047,22024,22032,22006,22296,22294,22645,22654,22659,22675,22666,22649,22661,22653,22781,22821,22818,22820,22890,22889,23265,23270,23273,23255,23254,23256,23267,23413,23518,23527,23521,23525,23526,23528,23522,23524,23519,23565,23650,23940,23943,24155,24163,24149,24151,24148,24275,24278,24330,24390,24432,24505,24903,24895,24907,24951,24930,24931,24927,24922,24920,24949,25130,25735,25688,25684,25764,25720,25695,25722,25681,25703,25652,25709,25723,25970,26017,26071,26070,26274,26280,26269,27036,27048,27029,27073,27054,27091,27083,27035,27063,27067,27051,27060,27088,27085,27053,27084,27046,27075,27043,27465,27468,27699,28467,28436,28414,28435,28404,28457,28478,28448,28460,28431,28418,28450,28415,28399,28422,28465,28472,28466,28451,28437,28459,28463,28552,28458,28396,28417,28402,28364,28407,29076,29081,29053,29066,29060,29074,29246,29330,29334,29508,29520,29796,29795,29802,29808,29805,29956,30097,30247,30221,30219,30217,30227,30433,30435,30596,30589,30591,30561,30913,30879,30887,30899,30889,30883,31118,31119,31117,31278,31281,31402,31401,31469,31471,31649,31637,31627,31605,31639,31645,31636,31631,31672,31623,31620,31929,31933,31934,32187,32176,32156,32189,32190,32160,32202,32180,32178,32177,32186,32162,32191,32181,32184,32173,32210,32199,32172,32624,32736,32737,32735,32862,32858,32903,33104,33152,33167,33160,33162,33151,33154,33255,33274,33287,33300,33310,33355,33993,33983,33990,33988,33945,33950,33970,33948,33995,33976,33984,34003,33936,33980,34001,33994,34623,34588,34619,34594,34597,34612,34584,34645,34615,34601,35059,35074,35060,35065,35064,35069,35048,35098,35055,35494,35468,35486,35491,35469,35489,35475,35492,35498,35493,35496,35480,35473,35482,35495,35946,35981,35980,36051,36049,36050,36203,36249,36245,36348,36628,36626,36629,36627,36771,36960,36952,36956,36963,36953,36958,36962,36957,36955,37145,37144,37150,37237,37240,37239,37236,37496,37504,37509,37528,37526,37499,37523,37532,37544,37500,37521,38305,38312,38313,38307,38309,38308,38553,38556,38555,38604,38610,38656,38780,38789,38902,38935,38936,39087,39089,39171,39173,39180,39177,39361,39599,39600,39654,39745,39746,40180,40182,40179,40636,40763,40778,20740,20736,20731,20725,20729,20738,20744,20745,20741,20956,21127,21128,21129,21133,21130,21232,21426,22062,22075,22073,22066,22079,22068,22057,22099,22094,22103,22132,22070,22063,22064,22656,22687,22686,22707,22684,22702,22697,22694,22893,23305,23291,23307,23285,23308,23304,23534,23532,23529,23531,23652,23653,23965,23956,24162,24159,24161,24290,24282,24287,24285,24291,24288,24392,24433,24503,24501,24950,24935,24942,24925,24917,24962,24956,24944,24939,24958,24999,24976,25003,24974,25004,24986,24996,24980,25006,25134,25705,25711,25721,25758,25778,25736,25744,25776,25765,25747,25749,25769,25746,25774,25773,25771,25754,25772,25753,25762,25779,25973,25975,25976,26286,26283,26292,26289,27171,27167,27112,27137,27166,27161,27133,27169,27155,27146,27123,27138,27141,27117,27153,27472,27470,27556,27589,27590,28479,28540,28548,28497,28518,28500,28550,28525,28507,28536,28526,28558,28538,28528,28516,28567,28504,28373,28527,28512,28511,29087,29100,29105,29096,29270,29339,29518,29527,29801,29835,29827,29822,29824,30079,30240,30249,30239,30244,30246,30241,30242,30362,30394,30436,30606,30599,30604,30609,30603,30923,30917,30906,30922,30910,30933,30908,30928,31295,31292,31296,31293,31287,31291,31407,31406,31661,31665,31684,31668,31686,31687,31681,31648,31692,31946,32224,32244,32239,32251,32216,32236,32221,32232,32227,32218,32222,32233,32158,32217,32242,32249,32629,32631,32687,32745,32806,33179,33180,33181,33184,33178,33176,34071,34109,34074,34030,34092,34093,34067,34065,34083,34081,34068,34028,34085,34047,34054,34690,34676,34678,34656,34662,34680,34664,34649,34647,34636,34643,34907,34909,35088,35079,35090,35091,35093,35082,35516,35538,35527,35524,35477,35531,35576,35506,35529,35522,35519,35504,35542,35533,35510,35513,35547,35916,35918,35948,36064,36062,36070,36068,36076,36077,36066,36067,36060,36074,36065,36205,36255,36259,36395,36368,36381,36386,36367,36393,36383,36385,36382,36538,36637,36635,36639,36649,36646,36650,36636,36638,36645,36969,36974,36968,36973,36983,37168,37165,37159,37169,37255,37257,37259,37251,37573,37563,37559,37610,37548,37604,37569,37555,37564,37586,37575,37616,37554,38317,38321,38660,38662,38663,38665,38752,38797,38795,38799,38945,38955,38940,39091,39178,39187,39186,39192,39389,39376,39391,39387,39377,39381,39378,39385,39607,39662,39663,39719,39749,39748,39799,39791,40198,40201,40195,40617,40638,40654,22696,40786,20754,20760,20756,20752,20757,20864,20906,20957,21137,21139,21235,22105,22123,22137,22121,22116,22136,22122,22120,22117,22129,22127,22124,22114,22134,22721,22718,22727,22725,22894,23325,23348,23416,23536,23566,24394,25010,24977,25001,24970,25037,25014,25022,25034,25032,25136,25797,25793,25803,25787,25788,25818,25796,25799,25794,25805,25791,25810,25812,25790,25972,26310,26313,26297,26308,26311,26296,27197,27192,27194,27225,27243,27224,27193,27204,27234,27233,27211,27207,27189,27231,27208,27481,27511,27653,28610,28593,28577,28611,28580,28609,28583,28595,28608,28601,28598,28582,28576,28596,29118,29129,29136,29138,29128,29141,29113,29134,29145,29148,29123,29124,29544,29852,29859,29848,29855,29854,29922,29964,29965,30260,30264,30266,30439,30437,30624,30622,30623,30629,30952,30938,30956,30951,31142,31309,31310,31302,31308,31307,31418,31705,31761,31689,31716,31707,31713,31721,31718,31957,31958,32266,32273,32264,32283,32291,32286,32285,32265,32272,32633,32690,32752,32753,32750,32808,33203,33193,33192,33275,33288,33368,33369,34122,34137,34120,34152,34153,34115,34121,34157,34154,34142,34691,34719,34718,34722,34701,34913,35114,35122,35109,35115,35105,35242,35238,35558,35578,35563,35569,35584,35548,35559,35566,35582,35585,35586,35575,35565,35571,35574,35580,35947,35949,35987,36084,36420,36401,36404,36418,36409,36405,36667,36655,36664,36659,36776,36774,36981,36980,36984,36978,36988,36986,37172,37266,37664,37686,37624,37683,37679,37666,37628,37675,37636,37658,37648,37670,37665,37653,37678,37657,38331,38567,38568,38570,38613,38670,38673,38678,38669,38675,38671,38747,38748,38758,38808,38960,38968,38971,38967,38957,38969,38948,39184,39208,39198,39195,39201,39194,39405,39394,39409,39608,39612,39675,39661,39720,39825,40213,40227,40230,40232,40210,40219,40664,40660,40845,40860,20778,20767,20769,20786,21237,22158,22144,22160,22149,22151,22159,22741,22739,22737,22734,23344,23338,23332,23418,23607,23656,23996,23994,23997,23992,24171,24396,24509,25033,25026,25031,25062,25035,25138,25140,25806,25802,25816,25824,25840,25830,25836,25841,25826,25837,25986,25987,26329,26326,27264,27284,27268,27298,27292,27355,27299,27262,27287,27280,27296,27484,27566,27610,27656,28632,28657,28639,28640,28635,28644,28651,28655,28544,28652,28641,28649,28629,28654,28656,29159,29151,29166,29158,29157,29165,29164,29172,29152,29237,29254,29552,29554,29865,29872,29862,29864,30278,30274,30284,30442,30643,30634,30640,30636,30631,30637,30703,30967,30970,30964,30959,30977,31143,31146,31319,31423,31751,31757,31742,31735,31756,31712,31968,31964,31966,31970,31967,31961,31965,32302,32318,32326,32311,32306,32323,32299,32317,32305,32325,32321,32308,32313,32328,32309,32319,32303,32580,32755,32764,32881,32882,32880,32879,32883,33222,33219,33210,33218,33216,33215,33213,33225,33214,33256,33289,33393,34218,34180,34174,34204,34193,34196,34223,34203,34183,34216,34186,34407,34752,34769,34739,34770,34758,34731,34747,34746,34760,34763,35131,35126,35140,35128,35133,35244,35598,35607,35609,35611,35594,35616,35613,35588,35600,35905,35903,35955,36090,36093,36092,36088,36091,36264,36425,36427,36424,36426,36676,36670,36674,36677,36671,36991,36989,36996,36993,36994,36992,37177,37283,37278,37276,37709,37762,37672,37749,37706,37733,37707,37656,37758,37740,37723,37744,37722,37716,38346,38347,38348,38344,38342,38577,38584,38614,38684,38686,38816,38867,38982,39094,39221,39425,39423,39854,39851,39850,39853,40251,40255,40587,40655,40670,40668,40669,40667,40766,40779,21474,22165,22190,22745,22744,23352,24413,25059,25139,25844,25842,25854,25862,25850,25851,25847,26039,26332,26406,27315,27308,27331,27323,27320,27330,27310,27311,27487,27512,27567,28681,28683,28670,28678,28666,28689,28687,29179,29180,29182,29176,29559,29557,29863,29887,29973,30294,30296,30290,30653,30655,30651,30652,30990,31150,31329,31330,31328,31428,31429,31787,31783,31786,31774,31779,31777,31975,32340,32341,32350,32346,32353,32338,32345,32584,32761,32763,32887,32886,33229,33231,33290,34255,34217,34253,34256,34249,34224,34234,34233,34214,34799,34796,34802,34784,35206,35250,35316,35624,35641,35628,35627,35920,36101,36441,36451,36454,36452,36447,36437,36544,36681,36685,36999,36995,37e3,37291,37292,37328,37780,37770,37782,37794,37811,37806,37804,37808,37784,37786,37783,38356,38358,38352,38357,38626,38620,38617,38619,38622,38692,38819,38822,38829,38905,38989,38991,38988,38990,38995,39098,39230,39231,39229,39214,39333,39438,39617,39683,39686,39759,39758,39757,39882,39881,39933,39880,39872,40273,40285,40288,40672,40725,40748,20787,22181,22750,22751,22754,23541,40848,24300,25074,25079,25078,25077,25856,25871,26336,26333,27365,27357,27354,27347,28699,28703,28712,28698,28701,28693,28696,29190,29197,29272,29346,29560,29562,29885,29898,29923,30087,30086,30303,30305,30663,31001,31153,31339,31337,31806,31807,31800,31805,31799,31808,32363,32365,32377,32361,32362,32645,32371,32694,32697,32696,33240,34281,34269,34282,34261,34276,34277,34295,34811,34821,34829,34809,34814,35168,35167,35158,35166,35649,35676,35672,35657,35674,35662,35663,35654,35673,36104,36106,36476,36466,36487,36470,36460,36474,36468,36692,36686,36781,37002,37003,37297,37294,37857,37841,37855,37827,37832,37852,37853,37846,37858,37837,37848,37860,37847,37864,38364,38580,38627,38698,38695,38753,38876,38907,39006,39e3,39003,39100,39237,39241,39446,39449,39693,39912,39911,39894,39899,40329,40289,40306,40298,40300,40594,40599,40595,40628,21240,22184,22199,22198,22196,22204,22756,23360,23363,23421,23542,24009,25080,25082,25880,25876,25881,26342,26407,27372,28734,28720,28722,29200,29563,29903,30306,30309,31014,31018,31020,31019,31431,31478,31820,31811,31821,31983,31984,36782,32381,32380,32386,32588,32768,33242,33382,34299,34297,34321,34298,34310,34315,34311,34314,34836,34837,35172,35258,35320,35696,35692,35686,35695,35679,35691,36111,36109,36489,36481,36485,36482,37300,37323,37912,37891,37885,38369,38704,39108,39250,39249,39336,39467,39472,39479,39477,39955,39949,40569,40629,40680,40751,40799,40803,40801,20791,20792,22209,22208,22210,22804,23660,24013,25084,25086,25885,25884,26005,26345,27387,27396,27386,27570,28748,29211,29351,29910,29908,30313,30675,31824,32399,32396,32700,34327,34349,34330,34851,34850,34849,34847,35178,35180,35261,35700,35703,35709,36115,36490,36493,36491,36703,36783,37306,37934,37939,37941,37946,37944,37938,37931,38370,38712,38713,38706,38911,39015,39013,39255,39493,39491,39488,39486,39631,39764,39761,39981,39973,40367,40372,40386,40376,40605,40687,40729,40796,40806,40807,20796,20795,22216,22218,22217,23423,24020,24018,24398,25087,25892,27402,27489,28753,28760,29568,29924,30090,30318,30316,31155,31840,31839,32894,32893,33247,35186,35183,35324,35712,36118,36119,36497,36499,36705,37192,37956,37969,37970,38717,38718,38851,38849,39019,39253,39509,39501,39634,39706,40009,39985,39998,39995,40403,40407,40756,40812,40810,40852,22220,24022,25088,25891,25899,25898,26348,27408,29914,31434,31844,31843,31845,32403,32406,32404,33250,34360,34367,34865,35722,37008,37007,37987,37984,37988,38760,39023,39260,39514,39515,39511,39635,39636,39633,40020,40023,40022,40421,40607,40692,22225,22761,25900,28766,30321,30322,30679,32592,32648,34870,34873,34914,35731,35730,35734,33399,36123,37312,37994,38722,38728,38724,38854,39024,39519,39714,39768,40031,40441,40442,40572,40573,40711,40823,40818,24307,27414,28771,31852,31854,34875,35264,36513,37313,38002,38e3,39025,39262,39638,39715,40652,28772,30682,35738,38007,38857,39522,39525,32412,35740,36522,37317,38013,38014,38012,40055,40056,40695,35924,38015,40474,29224,39530,39729,40475,40478,31858,9312,9313,9314,9315,9316,9317,9318,9319,9320,9321,9332,9333,9334,9335,9336,9337,9338,9339,9340,9341,8560,8561,8562,8563,8564,8565,8566,8567,8568,8569,20022,20031,20101,20128,20866,20886,20907,21241,21304,21353,21430,22794,23424,24027,12083,24191,24308,24400,24417,25908,26080,30098,30326,36789,38582,168,710,12541,12542,12445,12446,12291,20189,12293,12294,12295,12540,65339,65341,10045,12353,12354,12355,12356,12357,12358,12359,12360,12361,12362,12363,12364,12365,12366,12367,12368,12369,12370,12371,12372,12373,12374,12375,12376,12377,12378,12379,12380,12381,12382,12383,12384,12385,12386,12387,12388,12389,12390,12391,12392,12393,12394,12395,12396,12397,12398,12399,12400,12401,12402,12403,12404,12405,12406,12407,12408,12409,12410,12411,12412,12413,12414,12415,12416,12417,12418,12419,12420,12421,12422,12423,12424,12425,12426,12427,12428,12429,12430,12431,12432,12433,12434,12435,12449,12450,12451,12452,12453,12454,12455,12456,12457,12458,12459,12460,12461,12462,12463,12464,12465,12466,12467,12468,12469,12470,12471,12472,12473,12474,12475,12476,12477,12478,12479,12480,12481,12482,12483,12484,12485,12486,12487,12488,12489,12490,12491,12492,12493,12494,12495,12496,12497,12498,12499,12500,12501,12502,12503,12504,12505,12506,12507,12508,12509,12510,12511,12512,12513,12514,12515,12516,12517,12518,12519,12520,12521,12522,12523,12524,12525,12526,12527,12528,12529,12530,12531,12532,12533,12534,1040,1041,1042,1043,1044,1045,1025,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1105,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,8679,8632,8633,12751,131276,20058,131210,20994,17553,40880,20872,40881,161287,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,65506,65508,65287,65282,12849,8470,8481,12443,12444,11904,11908,11910,11911,11912,11914,11916,11917,11925,11932,11933,11941,11943,11946,11948,11950,11958,11964,11966,11974,11978,11980,11981,11983,11990,11991,11998,12003,null,null,null,643,592,603,596,629,339,248,331,650,618,20034,20060,20981,21274,21378,19975,19980,20039,20109,22231,64012,23662,24435,19983,20871,19982,20014,20115,20162,20169,20168,20888,21244,21356,21433,22304,22787,22828,23568,24063,26081,27571,27596,27668,29247,20017,20028,20200,20188,20201,20193,20189,20186,21004,21276,21324,22306,22307,22807,22831,23425,23428,23570,23611,23668,23667,24068,24192,24194,24521,25097,25168,27669,27702,27715,27711,27707,29358,29360,29578,31160,32906,38430,20238,20248,20268,20213,20244,20209,20224,20215,20232,20253,20226,20229,20258,20243,20228,20212,20242,20913,21011,21001,21008,21158,21282,21279,21325,21386,21511,22241,22239,22318,22314,22324,22844,22912,22908,22917,22907,22910,22903,22911,23382,23573,23589,23676,23674,23675,23678,24031,24181,24196,24322,24346,24436,24533,24532,24527,25180,25182,25188,25185,25190,25186,25177,25184,25178,25189,26095,26094,26430,26425,26424,26427,26426,26431,26428,26419,27672,27718,27730,27740,27727,27722,27732,27723,27724,28785,29278,29364,29365,29582,29994,30335,31349,32593,33400,33404,33408,33405,33407,34381,35198,37017,37015,37016,37019,37012,38434,38436,38432,38435,20310,20283,20322,20297,20307,20324,20286,20327,20306,20319,20289,20312,20269,20275,20287,20321,20879,20921,21020,21022,21025,21165,21166,21257,21347,21362,21390,21391,21552,21559,21546,21588,21573,21529,21532,21541,21528,21565,21583,21569,21544,21540,21575,22254,22247,22245,22337,22341,22348,22345,22347,22354,22790,22848,22950,22936,22944,22935,22926,22946,22928,22927,22951,22945,23438,23442,23592,23594,23693,23695,23688,23691,23689,23698,23690,23686,23699,23701,24032,24074,24078,24203,24201,24204,24200,24205,24325,24349,24440,24438,24530,24529,24528,24557,24552,24558,24563,24545,24548,24547,24570,24559,24567,24571,24576,24564,25146,25219,25228,25230,25231,25236,25223,25201,25211,25210,25200,25217,25224,25207,25213,25202,25204,25911,26096,26100,26099,26098,26101,26437,26439,26457,26453,26444,26440,26461,26445,26458,26443,27600,27673,27674,27768,27751,27755,27780,27787,27791,27761,27759,27753,27802,27757,27783,27797,27804,27750,27763,27749,27771,27790,28788,28794,29283,29375,29373,29379,29382,29377,29370,29381,29589,29591,29587,29588,29586,30010,30009,30100,30101,30337,31037,32820,32917,32921,32912,32914,32924,33424,33423,33413,33422,33425,33427,33418,33411,33412,35960,36809,36799,37023,37025,37029,37022,37031,37024,38448,38440,38447,38445,20019,20376,20348,20357,20349,20352,20359,20342,20340,20361,20356,20343,20300,20375,20330,20378,20345,20353,20344,20368,20380,20372,20382,20370,20354,20373,20331,20334,20894,20924,20926,21045,21042,21043,21062,21041,21180,21258,21259,21308,21394,21396,21639,21631,21633,21649,21634,21640,21611,21626,21630,21605,21612,21620,21606,21645,21615,21601,21600,21656,21603,21607,21604,22263,22265,22383,22386,22381,22379,22385,22384,22390,22400,22389,22395,22387,22388,22370,22376,22397,22796,22853,22965,22970,22991,22990,22962,22988,22977,22966,22972,22979,22998,22961,22973,22976,22984,22964,22983,23394,23397,23443,23445,23620,23623,23726,23716,23712,23733,23727,23720,23724,23711,23715,23725,23714,23722,23719,23709,23717,23734,23728,23718,24087,24084,24089,24360,24354,24355,24356,24404,24450,24446,24445,24542,24549,24621,24614,24601,24626,24587,24628,24586,24599,24627,24602,24606,24620,24610,24589,24592,24622,24595,24593,24588,24585,24604,25108,25149,25261,25268,25297,25278,25258,25270,25290,25262,25267,25263,25275,25257,25264,25272,25917,26024,26043,26121,26108,26116,26130,26120,26107,26115,26123,26125,26117,26109,26129,26128,26358,26378,26501,26476,26510,26514,26486,26491,26520,26502,26500,26484,26509,26508,26490,26527,26513,26521,26499,26493,26497,26488,26489,26516,27429,27520,27518,27614,27677,27795,27884,27883,27886,27865,27830,27860,27821,27879,27831,27856,27842,27834,27843,27846,27885,27890,27858,27869,27828,27786,27805,27776,27870,27840,27952,27853,27847,27824,27897,27855,27881,27857,28820,28824,28805,28819,28806,28804,28817,28822,28802,28826,28803,29290,29398,29387,29400,29385,29404,29394,29396,29402,29388,29393,29604,29601,29613,29606,29602,29600,29612,29597,29917,29928,30015,30016,30014,30092,30104,30383,30451,30449,30448,30453,30712,30716,30713,30715,30714,30711,31042,31039,31173,31352,31355,31483,31861,31997,32821,32911,32942,32931,32952,32949,32941,33312,33440,33472,33451,33434,33432,33435,33461,33447,33454,33468,33438,33466,33460,33448,33441,33449,33474,33444,33475,33462,33442,34416,34415,34413,34414,35926,36818,36811,36819,36813,36822,36821,36823,37042,37044,37039,37043,37040,38457,38461,38460,38458,38467,20429,20421,20435,20402,20425,20427,20417,20436,20444,20441,20411,20403,20443,20423,20438,20410,20416,20409,20460,21060,21065,21184,21186,21309,21372,21399,21398,21401,21400,21690,21665,21677,21669,21711,21699,33549,21687,21678,21718,21686,21701,21702,21664,21616,21692,21666,21694,21618,21726,21680,22453,22430,22431,22436,22412,22423,22429,22427,22420,22424,22415,22425,22437,22426,22421,22772,22797,22867,23009,23006,23022,23040,23025,23005,23034,23037,23036,23030,23012,23026,23031,23003,23017,23027,23029,23008,23038,23028,23021,23464,23628,23760,23768,23756,23767,23755,23771,23774,23770,23753,23751,23754,23766,23763,23764,23759,23752,23750,23758,23775,23800,24057,24097,24098,24099,24096,24100,24240,24228,24226,24219,24227,24229,24327,24366,24406,24454,24631,24633,24660,24690,24670,24645,24659,24647,24649,24667,24652,24640,24642,24671,24612,24644,24664,24678,24686,25154,25155,25295,25357,25355,25333,25358,25347,25323,25337,25359,25356,25336,25334,25344,25363,25364,25338,25365,25339,25328,25921,25923,26026,26047,26166,26145,26162,26165,26140,26150,26146,26163,26155,26170,26141,26164,26169,26158,26383,26384,26561,26610,26568,26554,26588,26555,26616,26584,26560,26551,26565,26603,26596,26591,26549,26573,26547,26615,26614,26606,26595,26562,26553,26574,26599,26608,26546,26620,26566,26605,26572,26542,26598,26587,26618,26569,26570,26563,26602,26571,27432,27522,27524,27574,27606,27608,27616,27680,27681,27944,27956,27949,27935,27964,27967,27922,27914,27866,27955,27908,27929,27962,27930,27921,27904,27933,27970,27905,27928,27959,27907,27919,27968,27911,27936,27948,27912,27938,27913,27920,28855,28831,28862,28849,28848,28833,28852,28853,28841,29249,29257,29258,29292,29296,29299,29294,29386,29412,29416,29419,29407,29418,29414,29411,29573,29644,29634,29640,29637,29625,29622,29621,29620,29675,29631,29639,29630,29635,29638,29624,29643,29932,29934,29998,30023,30024,30119,30122,30329,30404,30472,30467,30468,30469,30474,30455,30459,30458,30695,30696,30726,30737,30738,30725,30736,30735,30734,30729,30723,30739,31050,31052,31051,31045,31044,31189,31181,31183,31190,31182,31360,31358,31441,31488,31489,31866,31864,31865,31871,31872,31873,32003,32008,32001,32600,32657,32653,32702,32775,32782,32783,32788,32823,32984,32967,32992,32977,32968,32962,32976,32965,32995,32985,32988,32970,32981,32969,32975,32983,32998,32973,33279,33313,33428,33497,33534,33529,33543,33512,33536,33493,33594,33515,33494,33524,33516,33505,33522,33525,33548,33531,33526,33520,33514,33508,33504,33530,33523,33517,34423,34420,34428,34419,34881,34894,34919,34922,34921,35283,35332,35335,36210,36835,36833,36846,36832,37105,37053,37055,37077,37061,37054,37063,37067,37064,37332,37331,38484,38479,38481,38483,38474,38478,20510,20485,20487,20499,20514,20528,20507,20469,20468,20531,20535,20524,20470,20471,20503,20508,20512,20519,20533,20527,20529,20494,20826,20884,20883,20938,20932,20933,20936,20942,21089,21082,21074,21086,21087,21077,21090,21197,21262,21406,21798,21730,21783,21778,21735,21747,21732,21786,21759,21764,21768,21739,21777,21765,21745,21770,21755,21751,21752,21728,21774,21763,21771,22273,22274,22476,22578,22485,22482,22458,22470,22461,22460,22456,22454,22463,22471,22480,22457,22465,22798,22858,23065,23062,23085,23086,23061,23055,23063,23050,23070,23091,23404,23463,23469,23468,23555,23638,23636,23788,23807,23790,23793,23799,23808,23801,24105,24104,24232,24238,24234,24236,24371,24368,24423,24669,24666,24679,24641,24738,24712,24704,24722,24705,24733,24707,24725,24731,24727,24711,24732,24718,25113,25158,25330,25360,25430,25388,25412,25413,25398,25411,25572,25401,25419,25418,25404,25385,25409,25396,25432,25428,25433,25389,25415,25395,25434,25425,25400,25431,25408,25416,25930,25926,26054,26051,26052,26050,26186,26207,26183,26193,26386,26387,26655,26650,26697,26674,26675,26683,26699,26703,26646,26673,26652,26677,26667,26669,26671,26702,26692,26676,26653,26642,26644,26662,26664,26670,26701,26682,26661,26656,27436,27439,27437,27441,27444,27501,32898,27528,27622,27620,27624,27619,27618,27623,27685,28026,28003,28004,28022,27917,28001,28050,27992,28002,28013,28015,28049,28045,28143,28031,28038,27998,28007,28e3,28055,28016,28028,27999,28034,28056,27951,28008,28043,28030,28032,28036,27926,28035,28027,28029,28021,28048,28892,28883,28881,28893,28875,32569,28898,28887,28882,28894,28896,28884,28877,28869,28870,28871,28890,28878,28897,29250,29304,29303,29302,29440,29434,29428,29438,29430,29427,29435,29441,29651,29657,29669,29654,29628,29671,29667,29673,29660,29650,29659,29652,29661,29658,29655,29656,29672,29918,29919,29940,29941,29985,30043,30047,30128,30145,30139,30148,30144,30143,30134,30138,30346,30409,30493,30491,30480,30483,30482,30499,30481,30485,30489,30490,30498,30503,30755,30764,30754,30773,30767,30760,30766,30763,30753,30761,30771,30762,30769,31060,31067,31055,31068,31059,31058,31057,31211,31212,31200,31214,31213,31210,31196,31198,31197,31366,31369,31365,31371,31372,31370,31367,31448,31504,31492,31507,31493,31503,31496,31498,31502,31497,31506,31876,31889,31882,31884,31880,31885,31877,32030,32029,32017,32014,32024,32022,32019,32031,32018,32015,32012,32604,32609,32606,32608,32605,32603,32662,32658,32707,32706,32704,32790,32830,32825,33018,33010,33017,33013,33025,33019,33024,33281,33327,33317,33587,33581,33604,33561,33617,33573,33622,33599,33601,33574,33564,33570,33602,33614,33563,33578,33544,33596,33613,33558,33572,33568,33591,33583,33577,33607,33605,33612,33619,33566,33580,33611,33575,33608,34387,34386,34466,34472,34454,34445,34449,34462,34439,34455,34438,34443,34458,34437,34469,34457,34465,34471,34453,34456,34446,34461,34448,34452,34883,34884,34925,34933,34934,34930,34944,34929,34943,34927,34947,34942,34932,34940,35346,35911,35927,35963,36004,36003,36214,36216,36277,36279,36278,36561,36563,36862,36853,36866,36863,36859,36868,36860,36854,37078,37088,37081,37082,37091,37087,37093,37080,37083,37079,37084,37092,37200,37198,37199,37333,37346,37338,38492,38495,38588,39139,39647,39727,20095,20592,20586,20577,20574,20576,20563,20555,20573,20594,20552,20557,20545,20571,20554,20578,20501,20549,20575,20585,20587,20579,20580,20550,20544,20590,20595,20567,20561,20944,21099,21101,21100,21102,21206,21203,21293,21404,21877,21878,21820,21837,21840,21812,21802,21841,21858,21814,21813,21808,21842,21829,21772,21810,21861,21838,21817,21832,21805,21819,21824,21835,22282,22279,22523,22548,22498,22518,22492,22516,22528,22509,22525,22536,22520,22539,22515,22479,22535,22510,22499,22514,22501,22508,22497,22542,22524,22544,22503,22529,22540,22513,22505,22512,22541,22532,22876,23136,23128,23125,23143,23134,23096,23093,23149,23120,23135,23141,23148,23123,23140,23127,23107,23133,23122,23108,23131,23112,23182,23102,23117,23097,23116,23152,23145,23111,23121,23126,23106,23132,23410,23406,23489,23488,23641,23838,23819,23837,23834,23840,23820,23848,23821,23846,23845,23823,23856,23826,23843,23839,23854,24126,24116,24241,24244,24249,24242,24243,24374,24376,24475,24470,24479,24714,24720,24710,24766,24752,24762,24787,24788,24783,24804,24793,24797,24776,24753,24795,24759,24778,24767,24771,24781,24768,25394,25445,25482,25474,25469,25533,25502,25517,25501,25495,25515,25486,25455,25479,25488,25454,25519,25461,25500,25453,25518,25468,25508,25403,25503,25464,25477,25473,25489,25485,25456,25939,26061,26213,26209,26203,26201,26204,26210,26392,26745,26759,26768,26780,26733,26734,26798,26795,26966,26735,26787,26796,26793,26741,26740,26802,26767,26743,26770,26748,26731,26738,26794,26752,26737,26750,26779,26774,26763,26784,26761,26788,26744,26747,26769,26764,26762,26749,27446,27443,27447,27448,27537,27535,27533,27534,27532,27690,28096,28075,28084,28083,28276,28076,28137,28130,28087,28150,28116,28160,28104,28128,28127,28118,28094,28133,28124,28125,28123,28148,28106,28093,28141,28144,28090,28117,28098,28111,28105,28112,28146,28115,28157,28119,28109,28131,28091,28922,28941,28919,28951,28916,28940,28912,28932,28915,28944,28924,28927,28934,28947,28928,28920,28918,28939,28930,28942,29310,29307,29308,29311,29469,29463,29447,29457,29464,29450,29448,29439,29455,29470,29576,29686,29688,29685,29700,29697,29693,29703,29696,29690,29692,29695,29708,29707,29684,29704,30052,30051,30158,30162,30159,30155,30156,30161,30160,30351,30345,30419,30521,30511,30509,30513,30514,30516,30515,30525,30501,30523,30517,30792,30802,30793,30797,30794,30796,30758,30789,30800,31076,31079,31081,31082,31075,31083,31073,31163,31226,31224,31222,31223,31375,31380,31376,31541,31559,31540,31525,31536,31522,31524,31539,31512,31530,31517,31537,31531,31533,31535,31538,31544,31514,31523,31892,31896,31894,31907,32053,32061,32056,32054,32058,32069,32044,32041,32065,32071,32062,32063,32074,32059,32040,32611,32661,32668,32669,32667,32714,32715,32717,32720,32721,32711,32719,32713,32799,32798,32795,32839,32835,32840,33048,33061,33049,33051,33069,33055,33068,33054,33057,33045,33063,33053,33058,33297,33336,33331,33338,33332,33330,33396,33680,33699,33704,33677,33658,33651,33700,33652,33679,33665,33685,33689,33653,33684,33705,33661,33667,33676,33693,33691,33706,33675,33662,33701,33711,33672,33687,33712,33663,33702,33671,33710,33654,33690,34393,34390,34495,34487,34498,34497,34501,34490,34480,34504,34489,34483,34488,34508,34484,34491,34492,34499,34493,34494,34898,34953,34965,34984,34978,34986,34970,34961,34977,34975,34968,34983,34969,34971,34967,34980,34988,34956,34963,34958,35202,35286,35289,35285,35376,35367,35372,35358,35897,35899,35932,35933,35965,36005,36221,36219,36217,36284,36290,36281,36287,36289,36568,36574,36573,36572,36567,36576,36577,36900,36875,36881,36892,36876,36897,37103,37098,37104,37108,37106,37107,37076,37099,37100,37097,37206,37208,37210,37203,37205,37356,37364,37361,37363,37368,37348,37369,37354,37355,37367,37352,37358,38266,38278,38280,38524,38509,38507,38513,38511,38591,38762,38916,39141,39319,20635,20629,20628,20638,20619,20643,20611,20620,20622,20637,20584,20636,20626,20610,20615,20831,20948,21266,21265,21412,21415,21905,21928,21925,21933,21879,22085,21922,21907,21896,21903,21941,21889,21923,21906,21924,21885,21900,21926,21887,21909,21921,21902,22284,22569,22583,22553,22558,22567,22563,22568,22517,22600,22565,22556,22555,22579,22591,22582,22574,22585,22584,22573,22572,22587,22881,23215,23188,23199,23162,23202,23198,23160,23206,23164,23205,23212,23189,23214,23095,23172,23178,23191,23171,23179,23209,23163,23165,23180,23196,23183,23187,23197,23530,23501,23499,23508,23505,23498,23502,23564,23600,23863,23875,23915,23873,23883,23871,23861,23889,23886,23893,23859,23866,23890,23869,23857,23897,23874,23865,23881,23864,23868,23858,23862,23872,23877,24132,24129,24408,24486,24485,24491,24777,24761,24780,24802,24782,24772,24852,24818,24842,24854,24837,24821,24851,24824,24828,24830,24769,24835,24856,24861,24848,24831,24836,24843,25162,25492,25521,25520,25550,25573,25576,25583,25539,25757,25587,25546,25568,25590,25557,25586,25589,25697,25567,25534,25565,25564,25540,25560,25555,25538,25543,25548,25547,25544,25584,25559,25561,25906,25959,25962,25956,25948,25960,25957,25996,26013,26014,26030,26064,26066,26236,26220,26235,26240,26225,26233,26218,26226,26369,26892,26835,26884,26844,26922,26860,26858,26865,26895,26838,26871,26859,26852,26870,26899,26896,26867,26849,26887,26828,26888,26992,26804,26897,26863,26822,26900,26872,26832,26877,26876,26856,26891,26890,26903,26830,26824,26845,26846,26854,26868,26833,26886,26836,26857,26901,26917,26823,27449,27451,27455,27452,27540,27543,27545,27541,27581,27632,27634,27635,27696,28156,28230,28231,28191,28233,28296,28220,28221,28229,28258,28203,28223,28225,28253,28275,28188,28211,28235,28224,28241,28219,28163,28206,28254,28264,28252,28257,28209,28200,28256,28273,28267,28217,28194,28208,28243,28261,28199,28280,28260,28279,28245,28281,28242,28262,28213,28214,28250,28960,28958,28975,28923,28974,28977,28963,28965,28962,28978,28959,28968,28986,28955,29259,29274,29320,29321,29318,29317,29323,29458,29451,29488,29474,29489,29491,29479,29490,29485,29478,29475,29493,29452,29742,29740,29744,29739,29718,29722,29729,29741,29745,29732,29731,29725,29737,29728,29746,29947,29999,30063,30060,30183,30170,30177,30182,30173,30175,30180,30167,30357,30354,30426,30534,30535,30532,30541,30533,30538,30542,30539,30540,30686,30700,30816,30820,30821,30812,30829,30833,30826,30830,30832,30825,30824,30814,30818,31092,31091,31090,31088,31234,31242,31235,31244,31236,31385,31462,31460,31562,31547,31556,31560,31564,31566,31552,31576,31557,31906,31902,31912,31905,32088,32111,32099,32083,32086,32103,32106,32079,32109,32092,32107,32082,32084,32105,32081,32095,32078,32574,32575,32613,32614,32674,32672,32673,32727,32849,32847,32848,33022,32980,33091,33098,33106,33103,33095,33085,33101,33082,33254,33262,33271,33272,33273,33284,33340,33341,33343,33397,33595,33743,33785,33827,33728,33768,33810,33767,33764,33788,33782,33808,33734,33736,33771,33763,33727,33793,33757,33765,33752,33791,33761,33739,33742,33750,33781,33737,33801,33807,33758,33809,33798,33730,33779,33749,33786,33735,33745,33770,33811,33731,33772,33774,33732,33787,33751,33762,33819,33755,33790,34520,34530,34534,34515,34531,34522,34538,34525,34539,34524,34540,34537,34519,34536,34513,34888,34902,34901,35002,35031,35001,35e3,35008,35006,34998,35004,34999,35005,34994,35073,35017,35221,35224,35223,35293,35290,35291,35406,35405,35385,35417,35392,35415,35416,35396,35397,35410,35400,35409,35402,35404,35407,35935,35969,35968,36026,36030,36016,36025,36021,36228,36224,36233,36312,36307,36301,36295,36310,36316,36303,36309,36313,36296,36311,36293,36591,36599,36602,36601,36582,36590,36581,36597,36583,36584,36598,36587,36593,36588,36596,36585,36909,36916,36911,37126,37164,37124,37119,37116,37128,37113,37115,37121,37120,37127,37125,37123,37217,37220,37215,37218,37216,37377,37386,37413,37379,37402,37414,37391,37388,37376,37394,37375,37373,37382,37380,37415,37378,37404,37412,37401,37399,37381,37398,38267,38285,38284,38288,38535,38526,38536,38537,38531,38528,38594,38600,38595,38641,38640,38764,38768,38766,38919,39081,39147,40166,40697,20099,20100,20150,20669,20671,20678,20654,20676,20682,20660,20680,20674,20656,20673,20666,20657,20683,20681,20662,20664,20951,21114,21112,21115,21116,21955,21979,21964,21968,21963,21962,21981,21952,21972,21956,21993,21951,21970,21901,21967,21973,21986,21974,21960,22002,21965,21977,21954,22292,22611,22632,22628,22607,22605,22601,22639,22613,22606,22621,22617,22629,22619,22589,22627,22641,22780,23239,23236,23243,23226,23224,23217,23221,23216,23231,23240,23227,23238,23223,23232,23242,23220,23222,23245,23225,23184,23510,23512,23513,23583,23603,23921,23907,23882,23909,23922,23916,23902,23912,23911,23906,24048,24143,24142,24138,24141,24139,24261,24268,24262,24267,24263,24384,24495,24493,24823,24905,24906,24875,24901,24886,24882,24878,24902,24879,24911,24873,24896,25120,37224,25123,25125,25124,25541,25585,25579,25616,25618,25609,25632,25636,25651,25667,25631,25621,25624,25657,25655,25634,25635,25612,25638,25648,25640,25665,25653,25647,25610,25626,25664,25637,25639,25611,25575,25627,25646,25633,25614,25967,26002,26067,26246,26252,26261,26256,26251,26250,26265,26260,26232,26400,26982,26975,26936,26958,26978,26993,26943,26949,26986,26937,26946,26967,26969,27002,26952,26953,26933,26988,26931,26941,26981,26864,27e3,26932,26985,26944,26991,26948,26998,26968,26945,26996,26956,26939,26955,26935,26972,26959,26961,26930,26962,26927,27003,26940,27462,27461,27459,27458,27464,27457,27547,64013,27643,27644,27641,27639,27640,28315,28374,28360,28303,28352,28319,28307,28308,28320,28337,28345,28358,28370,28349,28353,28318,28361,28343,28336,28365,28326,28367,28338,28350,28355,28380,28376,28313,28306,28302,28301,28324,28321,28351,28339,28368,28362,28311,28334,28323,28999,29012,29010,29027,29024,28993,29021,29026,29042,29048,29034,29025,28994,29016,28995,29003,29040,29023,29008,29011,28996,29005,29018,29263,29325,29324,29329,29328,29326,29500,29506,29499,29498,29504,29514,29513,29764,29770,29771,29778,29777,29783,29760,29775,29776,29774,29762,29766,29773,29780,29921,29951,29950,29949,29981,30073,30071,27011,30191,30223,30211,30199,30206,30204,30201,30200,30224,30203,30198,30189,30197,30205,30361,30389,30429,30549,30559,30560,30546,30550,30554,30569,30567,30548,30553,30573,30688,30855,30874,30868,30863,30852,30869,30853,30854,30881,30851,30841,30873,30848,30870,30843,31100,31106,31101,31097,31249,31256,31257,31250,31255,31253,31266,31251,31259,31248,31395,31394,31390,31467,31590,31588,31597,31604,31593,31602,31589,31603,31601,31600,31585,31608,31606,31587,31922,31924,31919,32136,32134,32128,32141,32127,32133,32122,32142,32123,32131,32124,32140,32148,32132,32125,32146,32621,32619,32615,32616,32620,32678,32677,32679,32731,32732,32801,33124,33120,33143,33116,33129,33115,33122,33138,26401,33118,33142,33127,33135,33092,33121,33309,33353,33348,33344,33346,33349,34033,33855,33878,33910,33913,33935,33933,33893,33873,33856,33926,33895,33840,33869,33917,33882,33881,33908,33907,33885,34055,33886,33847,33850,33844,33914,33859,33912,33842,33861,33833,33753,33867,33839,33858,33837,33887,33904,33849,33870,33868,33874,33903,33989,33934,33851,33863,33846,33843,33896,33918,33860,33835,33888,33876,33902,33872,34571,34564,34551,34572,34554,34518,34549,34637,34552,34574,34569,34561,34550,34573,34565,35030,35019,35021,35022,35038,35035,35034,35020,35024,35205,35227,35295,35301,35300,35297,35296,35298,35292,35302,35446,35462,35455,35425,35391,35447,35458,35460,35445,35459,35457,35444,35450,35900,35915,35914,35941,35940,35942,35974,35972,35973,36044,36200,36201,36241,36236,36238,36239,36237,36243,36244,36240,36242,36336,36320,36332,36337,36334,36304,36329,36323,36322,36327,36338,36331,36340,36614,36607,36609,36608,36613,36615,36616,36610,36619,36946,36927,36932,36937,36925,37136,37133,37135,37137,37142,37140,37131,37134,37230,37231,37448,37458,37424,37434,37478,37427,37477,37470,37507,37422,37450,37446,37485,37484,37455,37472,37479,37487,37430,37473,37488,37425,37460,37475,37456,37490,37454,37459,37452,37462,37426,38303,38300,38302,38299,38546,38547,38545,38551,38606,38650,38653,38648,38645,38771,38775,38776,38770,38927,38925,38926,39084,39158,39161,39343,39346,39344,39349,39597,39595,39771,40170,40173,40167,40576,40701,20710,20692,20695,20712,20723,20699,20714,20701,20708,20691,20716,20720,20719,20707,20704,20952,21120,21121,21225,21227,21296,21420,22055,22037,22028,22034,22012,22031,22044,22017,22035,22018,22010,22045,22020,22015,22009,22665,22652,22672,22680,22662,22657,22655,22644,22667,22650,22663,22673,22670,22646,22658,22664,22651,22676,22671,22782,22891,23260,23278,23269,23253,23274,23258,23277,23275,23283,23266,23264,23259,23276,23262,23261,23257,23272,23263,23415,23520,23523,23651,23938,23936,23933,23942,23930,23937,23927,23946,23945,23944,23934,23932,23949,23929,23935,24152,24153,24147,24280,24273,24279,24270,24284,24277,24281,24274,24276,24388,24387,24431,24502,24876,24872,24897,24926,24945,24947,24914,24915,24946,24940,24960,24948,24916,24954,24923,24933,24891,24938,24929,24918,25129,25127,25131,25643,25677,25691,25693,25716,25718,25714,25715,25725,25717,25702,25766,25678,25730,25694,25692,25675,25683,25696,25680,25727,25663,25708,25707,25689,25701,25719,25971,26016,26273,26272,26271,26373,26372,26402,27057,27062,27081,27040,27086,27030,27056,27052,27068,27025,27033,27022,27047,27021,27049,27070,27055,27071,27076,27069,27044,27092,27065,27082,27034,27087,27059,27027,27050,27041,27038,27097,27031,27024,27074,27061,27045,27078,27466,27469,27467,27550,27551,27552,27587,27588,27646,28366,28405,28401,28419,28453,28408,28471,28411,28462,28425,28494,28441,28442,28455,28440,28475,28434,28397,28426,28470,28531,28409,28398,28461,28480,28464,28476,28469,28395,28423,28430,28483,28421,28413,28406,28473,28444,28412,28474,28447,28429,28446,28424,28449,29063,29072,29065,29056,29061,29058,29071,29051,29062,29057,29079,29252,29267,29335,29333,29331,29507,29517,29521,29516,29794,29811,29809,29813,29810,29799,29806,29952,29954,29955,30077,30096,30230,30216,30220,30229,30225,30218,30228,30392,30593,30588,30597,30594,30574,30592,30575,30590,30595,30898,30890,30900,30893,30888,30846,30891,30878,30885,30880,30892,30882,30884,31128,31114,31115,31126,31125,31124,31123,31127,31112,31122,31120,31275,31306,31280,31279,31272,31270,31400,31403,31404,31470,31624,31644,31626,31633,31632,31638,31629,31628,31643,31630,31621,31640,21124,31641,31652,31618,31931,31935,31932,31930,32167,32183,32194,32163,32170,32193,32192,32197,32157,32206,32196,32198,32203,32204,32175,32185,32150,32188,32159,32166,32174,32169,32161,32201,32627,32738,32739,32741,32734,32804,32861,32860,33161,33158,33155,33159,33165,33164,33163,33301,33943,33956,33953,33951,33978,33998,33986,33964,33966,33963,33977,33972,33985,33997,33962,33946,33969,34e3,33949,33959,33979,33954,33940,33991,33996,33947,33961,33967,33960,34006,33944,33974,33999,33952,34007,34004,34002,34011,33968,33937,34401,34611,34595,34600,34667,34624,34606,34590,34593,34585,34587,34627,34604,34625,34622,34630,34592,34610,34602,34605,34620,34578,34618,34609,34613,34626,34598,34599,34616,34596,34586,34608,34577,35063,35047,35057,35058,35066,35070,35054,35068,35062,35067,35056,35052,35051,35229,35233,35231,35230,35305,35307,35304,35499,35481,35467,35474,35471,35478,35901,35944,35945,36053,36047,36055,36246,36361,36354,36351,36365,36349,36362,36355,36359,36358,36357,36350,36352,36356,36624,36625,36622,36621,37155,37148,37152,37154,37151,37149,37146,37156,37153,37147,37242,37234,37241,37235,37541,37540,37494,37531,37498,37536,37524,37546,37517,37542,37530,37547,37497,37527,37503,37539,37614,37518,37506,37525,37538,37501,37512,37537,37514,37510,37516,37529,37543,37502,37511,37545,37533,37515,37421,38558,38561,38655,38744,38781,38778,38782,38787,38784,38786,38779,38788,38785,38783,38862,38861,38934,39085,39086,39170,39168,39175,39325,39324,39363,39353,39355,39354,39362,39357,39367,39601,39651,39655,39742,39743,39776,39777,39775,40177,40178,40181,40615,20735,20739,20784,20728,20742,20743,20726,20734,20747,20748,20733,20746,21131,21132,21233,21231,22088,22082,22092,22069,22081,22090,22089,22086,22104,22106,22080,22067,22077,22060,22078,22072,22058,22074,22298,22699,22685,22705,22688,22691,22703,22700,22693,22689,22783,23295,23284,23293,23287,23286,23299,23288,23298,23289,23297,23303,23301,23311,23655,23961,23959,23967,23954,23970,23955,23957,23968,23964,23969,23962,23966,24169,24157,24160,24156,32243,24283,24286,24289,24393,24498,24971,24963,24953,25009,25008,24994,24969,24987,24979,25007,25005,24991,24978,25002,24993,24973,24934,25011,25133,25710,25712,25750,25760,25733,25751,25756,25743,25739,25738,25740,25763,25759,25704,25777,25752,25974,25978,25977,25979,26034,26035,26293,26288,26281,26290,26295,26282,26287,27136,27142,27159,27109,27128,27157,27121,27108,27168,27135,27116,27106,27163,27165,27134,27175,27122,27118,27156,27127,27111,27200,27144,27110,27131,27149,27132,27115,27145,27140,27160,27173,27151,27126,27174,27143,27124,27158,27473,27557,27555,27554,27558,27649,27648,27647,27650,28481,28454,28542,28551,28614,28562,28557,28553,28556,28514,28495,28549,28506,28566,28534,28524,28546,28501,28530,28498,28496,28503,28564,28563,28509,28416,28513,28523,28541,28519,28560,28499,28555,28521,28543,28565,28515,28535,28522,28539,29106,29103,29083,29104,29088,29082,29097,29109,29085,29093,29086,29092,29089,29098,29084,29095,29107,29336,29338,29528,29522,29534,29535,29536,29533,29531,29537,29530,29529,29538,29831,29833,29834,29830,29825,29821,29829,29832,29820,29817,29960,29959,30078,30245,30238,30233,30237,30236,30243,30234,30248,30235,30364,30365,30366,30363,30605,30607,30601,30600,30925,30907,30927,30924,30929,30926,30932,30920,30915,30916,30921,31130,31137,31136,31132,31138,31131,27510,31289,31410,31412,31411,31671,31691,31678,31660,31694,31663,31673,31690,31669,31941,31944,31948,31947,32247,32219,32234,32231,32215,32225,32259,32250,32230,32246,32241,32240,32238,32223,32630,32684,32688,32685,32749,32747,32746,32748,32742,32744,32868,32871,33187,33183,33182,33173,33186,33177,33175,33302,33359,33363,33362,33360,33358,33361,34084,34107,34063,34048,34089,34062,34057,34061,34079,34058,34087,34076,34043,34091,34042,34056,34060,34036,34090,34034,34069,34039,34027,34035,34044,34066,34026,34025,34070,34046,34088,34077,34094,34050,34045,34078,34038,34097,34086,34023,34024,34032,34031,34041,34072,34080,34096,34059,34073,34095,34402,34646,34659,34660,34679,34785,34675,34648,34644,34651,34642,34657,34650,34641,34654,34669,34666,34640,34638,34655,34653,34671,34668,34682,34670,34652,34661,34639,34683,34677,34658,34663,34665,34906,35077,35084,35092,35083,35095,35096,35097,35078,35094,35089,35086,35081,35234,35236,35235,35309,35312,35308,35535,35526,35512,35539,35537,35540,35541,35515,35543,35518,35520,35525,35544,35523,35514,35517,35545,35902,35917,35983,36069,36063,36057,36072,36058,36061,36071,36256,36252,36257,36251,36384,36387,36389,36388,36398,36373,36379,36374,36369,36377,36390,36391,36372,36370,36376,36371,36380,36375,36378,36652,36644,36632,36634,36640,36643,36630,36631,36979,36976,36975,36967,36971,37167,37163,37161,37162,37170,37158,37166,37253,37254,37258,37249,37250,37252,37248,37584,37571,37572,37568,37593,37558,37583,37617,37599,37592,37609,37591,37597,37580,37615,37570,37608,37578,37576,37582,37606,37581,37589,37577,37600,37598,37607,37585,37587,37557,37601,37574,37556,38268,38316,38315,38318,38320,38564,38562,38611,38661,38664,38658,38746,38794,38798,38792,38864,38863,38942,38941,38950,38953,38952,38944,38939,38951,39090,39176,39162,39185,39188,39190,39191,39189,39388,39373,39375,39379,39380,39374,39369,39382,39384,39371,39383,39372,39603,39660,39659,39667,39666,39665,39750,39747,39783,39796,39793,39782,39798,39797,39792,39784,39780,39788,40188,40186,40189,40191,40183,40199,40192,40185,40187,40200,40197,40196,40579,40659,40719,40720,20764,20755,20759,20762,20753,20958,21300,21473,22128,22112,22126,22131,22118,22115,22125,22130,22110,22135,22300,22299,22728,22717,22729,22719,22714,22722,22716,22726,23319,23321,23323,23329,23316,23315,23312,23318,23336,23322,23328,23326,23535,23980,23985,23977,23975,23989,23984,23982,23978,23976,23986,23981,23983,23988,24167,24168,24166,24175,24297,24295,24294,24296,24293,24395,24508,24989,25e3,24982,25029,25012,25030,25025,25036,25018,25023,25016,24972,25815,25814,25808,25807,25801,25789,25737,25795,25819,25843,25817,25907,25983,25980,26018,26312,26302,26304,26314,26315,26319,26301,26299,26298,26316,26403,27188,27238,27209,27239,27186,27240,27198,27229,27245,27254,27227,27217,27176,27226,27195,27199,27201,27242,27236,27216,27215,27220,27247,27241,27232,27196,27230,27222,27221,27213,27214,27206,27477,27476,27478,27559,27562,27563,27592,27591,27652,27651,27654,28589,28619,28579,28615,28604,28622,28616,28510,28612,28605,28574,28618,28584,28676,28581,28590,28602,28588,28586,28623,28607,28600,28578,28617,28587,28621,28591,28594,28592,29125,29122,29119,29112,29142,29120,29121,29131,29140,29130,29127,29135,29117,29144,29116,29126,29146,29147,29341,29342,29545,29542,29543,29548,29541,29547,29546,29823,29850,29856,29844,29842,29845,29857,29963,30080,30255,30253,30257,30269,30259,30268,30261,30258,30256,30395,30438,30618,30621,30625,30620,30619,30626,30627,30613,30617,30615,30941,30953,30949,30954,30942,30947,30939,30945,30946,30957,30943,30944,31140,31300,31304,31303,31414,31416,31413,31409,31415,31710,31715,31719,31709,31701,31717,31706,31720,31737,31700,31722,31714,31708,31723,31704,31711,31954,31956,31959,31952,31953,32274,32289,32279,32268,32287,32288,32275,32270,32284,32277,32282,32290,32267,32271,32278,32269,32276,32293,32292,32579,32635,32636,32634,32689,32751,32810,32809,32876,33201,33190,33198,33209,33205,33195,33200,33196,33204,33202,33207,33191,33266,33365,33366,33367,34134,34117,34155,34125,34131,34145,34136,34112,34118,34148,34113,34146,34116,34129,34119,34147,34110,34139,34161,34126,34158,34165,34133,34151,34144,34188,34150,34141,34132,34149,34156,34403,34405,34404,34715,34703,34711,34707,34706,34696,34689,34710,34712,34681,34695,34723,34693,34704,34705,34717,34692,34708,34716,34714,34697,35102,35110,35120,35117,35118,35111,35121,35106,35113,35107,35119,35116,35103,35313,35552,35554,35570,35572,35573,35549,35604,35556,35551,35568,35528,35550,35553,35560,35583,35567,35579,35985,35986,35984,36085,36078,36081,36080,36083,36204,36206,36261,36263,36403,36414,36408,36416,36421,36406,36412,36413,36417,36400,36415,36541,36662,36654,36661,36658,36665,36663,36660,36982,36985,36987,36998,37114,37171,37173,37174,37267,37264,37265,37261,37263,37671,37662,37640,37663,37638,37647,37754,37688,37692,37659,37667,37650,37633,37702,37677,37646,37645,37579,37661,37626,37669,37651,37625,37623,37684,37634,37668,37631,37673,37689,37685,37674,37652,37644,37643,37630,37641,37632,37627,37654,38332,38349,38334,38329,38330,38326,38335,38325,38333,38569,38612,38667,38674,38672,38809,38807,38804,38896,38904,38965,38959,38962,39204,39199,39207,39209,39326,39406,39404,39397,39396,39408,39395,39402,39401,39399,39609,39615,39604,39611,39670,39674,39673,39671,39731,39808,39813,39815,39804,39806,39803,39810,39827,39826,39824,39802,39829,39805,39816,40229,40215,40224,40222,40212,40233,40221,40216,40226,40208,40217,40223,40584,40582,40583,40622,40621,40661,40662,40698,40722,40765,20774,20773,20770,20772,20768,20777,21236,22163,22156,22157,22150,22148,22147,22142,22146,22143,22145,22742,22740,22735,22738,23341,23333,23346,23331,23340,23335,23334,23343,23342,23419,23537,23538,23991,24172,24170,24510,24507,25027,25013,25020,25063,25056,25061,25060,25064,25054,25839,25833,25827,25835,25828,25832,25985,25984,26038,26074,26322,27277,27286,27265,27301,27273,27295,27291,27297,27294,27271,27283,27278,27285,27267,27304,27300,27281,27263,27302,27290,27269,27276,27282,27483,27565,27657,28620,28585,28660,28628,28643,28636,28653,28647,28646,28638,28658,28637,28642,28648,29153,29169,29160,29170,29156,29168,29154,29555,29550,29551,29847,29874,29867,29840,29866,29869,29873,29861,29871,29968,29969,29970,29967,30084,30275,30280,30281,30279,30372,30441,30645,30635,30642,30647,30646,30644,30641,30632,30704,30963,30973,30978,30971,30972,30962,30981,30969,30974,30980,31147,31144,31324,31323,31318,31320,31316,31322,31422,31424,31425,31749,31759,31730,31744,31743,31739,31758,31732,31755,31731,31746,31753,31747,31745,31736,31741,31750,31728,31729,31760,31754,31976,32301,32316,32322,32307,38984,32312,32298,32329,32320,32327,32297,32332,32304,32315,32310,32324,32314,32581,32639,32638,32637,32756,32754,32812,33211,33220,33228,33226,33221,33223,33212,33257,33371,33370,33372,34179,34176,34191,34215,34197,34208,34187,34211,34171,34212,34202,34206,34167,34172,34185,34209,34170,34168,34135,34190,34198,34182,34189,34201,34205,34177,34210,34178,34184,34181,34169,34166,34200,34192,34207,34408,34750,34730,34733,34757,34736,34732,34745,34741,34748,34734,34761,34755,34754,34764,34743,34735,34756,34762,34740,34742,34751,34744,34749,34782,34738,35125,35123,35132,35134,35137,35154,35127,35138,35245,35247,35246,35314,35315,35614,35608,35606,35601,35589,35595,35618,35599,35602,35605,35591,35597,35592,35590,35612,35603,35610,35919,35952,35954,35953,35951,35989,35988,36089,36207,36430,36429,36435,36432,36428,36423,36675,36672,36997,36990,37176,37274,37282,37275,37273,37279,37281,37277,37280,37793,37763,37807,37732,37718,37703,37756,37720,37724,37750,37705,37712,37713,37728,37741,37775,37708,37738,37753,37719,37717,37714,37711,37745,37751,37755,37729,37726,37731,37735,37760,37710,37721,38343,38336,38345,38339,38341,38327,38574,38576,38572,38688,38687,38680,38685,38681,38810,38817,38812,38814,38813,38869,38868,38897,38977,38980,38986,38985,38981,38979,39205,39211,39212,39210,39219,39218,39215,39213,39217,39216,39320,39331,39329,39426,39418,39412,39415,39417,39416,39414,39419,39421,39422,39420,39427,39614,39678,39677,39681,39676,39752,39834,39848,39838,39835,39846,39841,39845,39844,39814,39842,39840,39855,40243,40257,40295,40246,40238,40239,40241,40248,40240,40261,40258,40259,40254,40247,40256,40253,32757,40237,40586,40585,40589,40624,40648,40666,40699,40703,40740,40739,40738,40788,40864,20785,20781,20782,22168,22172,22167,22170,22173,22169,22896,23356,23657,23658,24e3,24173,24174,25048,25055,25069,25070,25073,25066,25072,25067,25046,25065,25855,25860,25853,25848,25857,25859,25852,26004,26075,26330,26331,26328,27333,27321,27325,27361,27334,27322,27318,27319,27335,27316,27309,27486,27593,27659,28679,28684,28685,28673,28677,28692,28686,28671,28672,28667,28710,28668,28663,28682,29185,29183,29177,29187,29181,29558,29880,29888,29877,29889,29886,29878,29883,29890,29972,29971,30300,30308,30297,30288,30291,30295,30298,30374,30397,30444,30658,30650,30975,30988,30995,30996,30985,30992,30994,30993,31149,31148,31327,31772,31785,31769,31776,31775,31789,31773,31782,31784,31778,31781,31792,32348,32336,32342,32355,32344,32354,32351,32337,32352,32343,32339,32693,32691,32759,32760,32885,33233,33234,33232,33375,33374,34228,34246,34240,34243,34242,34227,34229,34237,34247,34244,34239,34251,34254,34248,34245,34225,34230,34258,34340,34232,34231,34238,34409,34791,34790,34786,34779,34795,34794,34789,34783,34803,34788,34772,34780,34771,34797,34776,34787,34724,34775,34777,34817,34804,34792,34781,35155,35147,35151,35148,35142,35152,35153,35145,35626,35623,35619,35635,35632,35637,35655,35631,35644,35646,35633,35621,35639,35622,35638,35630,35620,35643,35645,35642,35906,35957,35993,35992,35991,36094,36100,36098,36096,36444,36450,36448,36439,36438,36446,36453,36455,36443,36442,36449,36445,36457,36436,36678,36679,36680,36683,37160,37178,37179,37182,37288,37285,37287,37295,37290,37813,37772,37778,37815,37787,37789,37769,37799,37774,37802,37790,37798,37781,37768,37785,37791,37773,37809,37777,37810,37796,37800,37812,37795,37797,38354,38355,38353,38579,38615,38618,24002,38623,38616,38621,38691,38690,38693,38828,38830,38824,38827,38820,38826,38818,38821,38871,38873,38870,38872,38906,38992,38993,38994,39096,39233,39228,39226,39439,39435,39433,39437,39428,39441,39434,39429,39431,39430,39616,39644,39688,39684,39685,39721,39733,39754,39756,39755,39879,39878,39875,39871,39873,39861,39864,39891,39862,39876,39865,39869,40284,40275,40271,40266,40283,40267,40281,40278,40268,40279,40274,40276,40287,40280,40282,40590,40588,40671,40705,40704,40726,40741,40747,40746,40745,40744,40780,40789,20788,20789,21142,21239,21428,22187,22189,22182,22183,22186,22188,22746,22749,22747,22802,23357,23358,23359,24003,24176,24511,25083,25863,25872,25869,25865,25868,25870,25988,26078,26077,26334,27367,27360,27340,27345,27353,27339,27359,27356,27344,27371,27343,27341,27358,27488,27568,27660,28697,28711,28704,28694,28715,28705,28706,28707,28713,28695,28708,28700,28714,29196,29194,29191,29186,29189,29349,29350,29348,29347,29345,29899,29893,29879,29891,29974,30304,30665,30666,30660,30705,31005,31003,31009,31004,30999,31006,31152,31335,31336,31795,31804,31801,31788,31803,31980,31978,32374,32373,32376,32368,32375,32367,32378,32370,32372,32360,32587,32586,32643,32646,32695,32765,32766,32888,33239,33237,33380,33377,33379,34283,34289,34285,34265,34273,34280,34266,34263,34284,34290,34296,34264,34271,34275,34268,34257,34288,34278,34287,34270,34274,34816,34810,34819,34806,34807,34825,34828,34827,34822,34812,34824,34815,34826,34818,35170,35162,35163,35159,35169,35164,35160,35165,35161,35208,35255,35254,35318,35664,35656,35658,35648,35667,35670,35668,35659,35669,35665,35650,35666,35671,35907,35959,35958,35994,36102,36103,36105,36268,36266,36269,36267,36461,36472,36467,36458,36463,36475,36546,36690,36689,36687,36688,36691,36788,37184,37183,37296,37293,37854,37831,37839,37826,37850,37840,37881,37868,37836,37849,37801,37862,37834,37844,37870,37859,37845,37828,37838,37824,37842,37863,38269,38362,38363,38625,38697,38699,38700,38696,38694,38835,38839,38838,38877,38878,38879,39004,39001,39005,38999,39103,39101,39099,39102,39240,39239,39235,39334,39335,39450,39445,39461,39453,39460,39451,39458,39456,39463,39459,39454,39452,39444,39618,39691,39690,39694,39692,39735,39914,39915,39904,39902,39908,39910,39906,39920,39892,39895,39916,39900,39897,39909,39893,39905,39898,40311,40321,40330,40324,40328,40305,40320,40312,40326,40331,40332,40317,40299,40308,40309,40304,40297,40325,40307,40315,40322,40303,40313,40319,40327,40296,40596,40593,40640,40700,40749,40768,40769,40781,40790,40791,40792,21303,22194,22197,22195,22755,23365,24006,24007,24302,24303,24512,24513,25081,25879,25878,25877,25875,26079,26344,26339,26340,27379,27376,27370,27368,27385,27377,27374,27375,28732,28725,28719,28727,28724,28721,28738,28728,28735,28730,28729,28736,28731,28723,28737,29203,29204,29352,29565,29564,29882,30379,30378,30398,30445,30668,30670,30671,30669,30706,31013,31011,31015,31016,31012,31017,31154,31342,31340,31341,31479,31817,31816,31818,31815,31813,31982,32379,32382,32385,32384,32698,32767,32889,33243,33241,33291,33384,33385,34338,34303,34305,34302,34331,34304,34294,34308,34313,34309,34316,34301,34841,34832,34833,34839,34835,34838,35171,35174,35257,35319,35680,35690,35677,35688,35683,35685,35687,35693,36270,36486,36488,36484,36697,36694,36695,36693,36696,36698,37005,37187,37185,37303,37301,37298,37299,37899,37907,37883,37920,37903,37908,37886,37909,37904,37928,37913,37901,37877,37888,37879,37895,37902,37910,37906,37882,37897,37880,37898,37887,37884,37900,37878,37905,37894,38366,38368,38367,38702,38703,38841,38843,38909,38910,39008,39010,39011,39007,39105,39106,39248,39246,39257,39244,39243,39251,39474,39476,39473,39468,39466,39478,39465,39470,39480,39469,39623,39626,39622,39696,39698,39697,39947,39944,39927,39941,39954,39928,4e4,39943,39950,39942,39959,39956,39945,40351,40345,40356,40349,40338,40344,40336,40347,40352,40340,40348,40362,40343,40353,40346,40354,40360,40350,40355,40383,40361,40342,40358,40359,40601,40603,40602,40677,40676,40679,40678,40752,40750,40795,40800,40798,40797,40793,40849,20794,20793,21144,21143,22211,22205,22206,23368,23367,24011,24015,24305,25085,25883,27394,27388,27395,27384,27392,28739,28740,28746,28744,28745,28741,28742,29213,29210,29209,29566,29975,30314,30672,31021,31025,31023,31828,31827,31986,32394,32391,32392,32395,32390,32397,32589,32699,32816,33245,34328,34346,34342,34335,34339,34332,34329,34343,34350,34337,34336,34345,34334,34341,34857,34845,34843,34848,34852,34844,34859,34890,35181,35177,35182,35179,35322,35705,35704,35653,35706,35707,36112,36116,36271,36494,36492,36702,36699,36701,37190,37188,37189,37305,37951,37947,37942,37929,37949,37948,37936,37945,37930,37943,37932,37952,37937,38373,38372,38371,38709,38714,38847,38881,39012,39113,39110,39104,39256,39254,39481,39485,39494,39492,39490,39489,39482,39487,39629,39701,39703,39704,39702,39738,39762,39979,39965,39964,39980,39971,39976,39977,39972,39969,40375,40374,40380,40385,40391,40394,40399,40382,40389,40387,40379,40373,40398,40377,40378,40364,40392,40369,40365,40396,40371,40397,40370,40570,40604,40683,40686,40685,40731,40728,40730,40753,40782,40805,40804,40850,20153,22214,22213,22219,22897,23371,23372,24021,24017,24306,25889,25888,25894,25890,27403,27400,27401,27661,28757,28758,28759,28754,29214,29215,29353,29567,29912,29909,29913,29911,30317,30381,31029,31156,31344,31345,31831,31836,31833,31835,31834,31988,31985,32401,32591,32647,33246,33387,34356,34357,34355,34348,34354,34358,34860,34856,34854,34858,34853,35185,35263,35262,35323,35710,35716,35714,35718,35717,35711,36117,36501,36500,36506,36498,36496,36502,36503,36704,36706,37191,37964,37968,37962,37963,37967,37959,37957,37960,37961,37958,38719,38883,39018,39017,39115,39252,39259,39502,39507,39508,39500,39503,39496,39498,39497,39506,39504,39632,39705,39723,39739,39766,39765,40006,40008,39999,40004,39993,39987,40001,39996,39991,39988,39986,39997,39990,40411,40402,40414,40410,40395,40400,40412,40401,40415,40425,40409,40408,40406,40437,40405,40413,40630,40688,40757,40755,40754,40770,40811,40853,40866,20797,21145,22760,22759,22898,23373,24024,34863,24399,25089,25091,25092,25897,25893,26006,26347,27409,27410,27407,27594,28763,28762,29218,29570,29569,29571,30320,30676,31847,31846,32405,33388,34362,34368,34361,34364,34353,34363,34366,34864,34866,34862,34867,35190,35188,35187,35326,35724,35726,35723,35720,35909,36121,36504,36708,36707,37308,37986,37973,37981,37975,37982,38852,38853,38912,39510,39513,39710,39711,39712,40018,40024,40016,40010,40013,40011,40021,40025,40012,40014,40443,40439,40431,40419,40427,40440,40420,40438,40417,40430,40422,40434,40432,40418,40428,40436,40435,40424,40429,40642,40656,40690,40691,40710,40732,40760,40759,40758,40771,40783,40817,40816,40814,40815,22227,22221,23374,23661,25901,26349,26350,27411,28767,28769,28765,28768,29219,29915,29925,30677,31032,31159,31158,31850,32407,32649,33389,34371,34872,34871,34869,34891,35732,35733,36510,36511,36512,36509,37310,37309,37314,37995,37992,37993,38629,38726,38723,38727,38855,38885,39518,39637,39769,40035,40039,40038,40034,40030,40032,40450,40446,40455,40451,40454,40453,40448,40449,40457,40447,40445,40452,40608,40734,40774,40820,40821,40822,22228,25902,26040,27416,27417,27415,27418,28770,29222,29354,30680,30681,31033,31849,31851,31990,32410,32408,32411,32409,33248,33249,34374,34375,34376,35193,35194,35196,35195,35327,35736,35737,36517,36516,36515,37998,37997,37999,38001,38003,38729,39026,39263,40040,40046,40045,40459,40461,40464,40463,40466,40465,40609,40693,40713,40775,40824,40827,40826,40825,22302,28774,31855,34876,36274,36518,37315,38004,38008,38006,38005,39520,40052,40051,40049,40053,40468,40467,40694,40714,40868,28776,28773,31991,34410,34878,34877,34879,35742,35996,36521,36553,38731,39027,39028,39116,39265,39339,39524,39526,39527,39716,40469,40471,40776,25095,27422,29223,34380,36520,38018,38016,38017,39529,39528,39726,40473,29225,34379,35743,38019,40057,40631,30325,39531,40058,40477,28777,28778,40612,40830,40777,40856,30849,37561,35023,22715,24658,31911,23290,9556,9574,9559,9568,9580,9571,9562,9577,9565,9554,9572,9557,9566,9578,9569,9560,9575,9563,9555,9573,9558,9567,9579,9570,9561,9576,9564,9553,9552,9581,9582,9584,9583,65517,132423,37595,132575,147397,34124,17077,29679,20917,13897,149826,166372,37700,137691,33518,146632,30780,26436,25311,149811,166314,131744,158643,135941,20395,140525,20488,159017,162436,144896,150193,140563,20521,131966,24484,131968,131911,28379,132127,20605,20737,13434,20750,39020,14147,33814,149924,132231,20832,144308,20842,134143,139516,131813,140592,132494,143923,137603,23426,34685,132531,146585,20914,20920,40244,20937,20943,20945,15580,20947,150182,20915,20962,21314,20973,33741,26942,145197,24443,21003,21030,21052,21173,21079,21140,21177,21189,31765,34114,21216,34317,158483,21253,166622,21833,28377,147328,133460,147436,21299,21316,134114,27851,136998,26651,29653,24650,16042,14540,136936,29149,17570,21357,21364,165547,21374,21375,136598,136723,30694,21395,166555,21408,21419,21422,29607,153458,16217,29596,21441,21445,27721,20041,22526,21465,15019,134031,21472,147435,142755,21494,134263,21523,28793,21803,26199,27995,21613,158547,134516,21853,21647,21668,18342,136973,134877,15796,134477,166332,140952,21831,19693,21551,29719,21894,21929,22021,137431,147514,17746,148533,26291,135348,22071,26317,144010,26276,26285,22093,22095,30961,22257,38791,21502,22272,22255,22253,166758,13859,135759,22342,147877,27758,28811,22338,14001,158846,22502,136214,22531,136276,148323,22566,150517,22620,22698,13665,22752,22748,135740,22779,23551,22339,172368,148088,37843,13729,22815,26790,14019,28249,136766,23076,21843,136850,34053,22985,134478,158849,159018,137180,23001,137211,137138,159142,28017,137256,136917,23033,159301,23211,23139,14054,149929,23159,14088,23190,29797,23251,159649,140628,15749,137489,14130,136888,24195,21200,23414,25992,23420,162318,16388,18525,131588,23509,24928,137780,154060,132517,23539,23453,19728,23557,138052,23571,29646,23572,138405,158504,23625,18653,23685,23785,23791,23947,138745,138807,23824,23832,23878,138916,23738,24023,33532,14381,149761,139337,139635,33415,14390,15298,24110,27274,24181,24186,148668,134355,21414,20151,24272,21416,137073,24073,24308,164994,24313,24315,14496,24316,26686,37915,24333,131521,194708,15070,18606,135994,24378,157832,140240,24408,140401,24419,38845,159342,24434,37696,166454,24487,23990,15711,152144,139114,159992,140904,37334,131742,166441,24625,26245,137335,14691,15815,13881,22416,141236,31089,15936,24734,24740,24755,149890,149903,162387,29860,20705,23200,24932,33828,24898,194726,159442,24961,20980,132694,24967,23466,147383,141407,25043,166813,170333,25040,14642,141696,141505,24611,24924,25886,25483,131352,25285,137072,25301,142861,25452,149983,14871,25656,25592,136078,137212,25744,28554,142902,38932,147596,153373,25825,25829,38011,14950,25658,14935,25933,28438,150056,150051,25989,25965,25951,143486,26037,149824,19255,26065,16600,137257,26080,26083,24543,144384,26136,143863,143864,26180,143780,143781,26187,134773,26215,152038,26227,26228,138813,143921,165364,143816,152339,30661,141559,39332,26370,148380,150049,15147,27130,145346,26462,26471,26466,147917,168173,26583,17641,26658,28240,37436,26625,144358,159136,26717,144495,27105,27147,166623,26995,26819,144845,26881,26880,15666,14849,144956,15232,26540,26977,166474,17148,26934,27032,15265,132041,33635,20624,27129,144985,139562,27205,145155,27293,15347,26545,27336,168348,15373,27421,133411,24798,27445,27508,141261,28341,146139,132021,137560,14144,21537,146266,27617,147196,27612,27703,140427,149745,158545,27738,33318,27769,146876,17605,146877,147876,149772,149760,146633,14053,15595,134450,39811,143865,140433,32655,26679,159013,159137,159211,28054,27996,28284,28420,149887,147589,159346,34099,159604,20935,27804,28189,33838,166689,28207,146991,29779,147330,31180,28239,23185,143435,28664,14093,28573,146992,28410,136343,147517,17749,37872,28484,28508,15694,28532,168304,15675,28575,147780,28627,147601,147797,147513,147440,147380,147775,20959,147798,147799,147776,156125,28747,28798,28839,28801,28876,28885,28886,28895,16644,15848,29108,29078,148087,28971,28997,23176,29002,29038,23708,148325,29007,37730,148161,28972,148570,150055,150050,29114,166888,28861,29198,37954,29205,22801,37955,29220,37697,153093,29230,29248,149876,26813,29269,29271,15957,143428,26637,28477,29314,29482,29483,149539,165931,18669,165892,29480,29486,29647,29610,134202,158254,29641,29769,147938,136935,150052,26147,14021,149943,149901,150011,29687,29717,26883,150054,29753,132547,16087,29788,141485,29792,167602,29767,29668,29814,33721,29804,14128,29812,37873,27180,29826,18771,150156,147807,150137,166799,23366,166915,137374,29896,137608,29966,29929,29982,167641,137803,23511,167596,37765,30029,30026,30055,30062,151426,16132,150803,30094,29789,30110,30132,30210,30252,30289,30287,30319,30326,156661,30352,33263,14328,157969,157966,30369,30373,30391,30412,159647,33890,151709,151933,138780,30494,30502,30528,25775,152096,30552,144044,30639,166244,166248,136897,30708,30729,136054,150034,26826,30895,30919,30931,38565,31022,153056,30935,31028,30897,161292,36792,34948,166699,155779,140828,31110,35072,26882,31104,153687,31133,162617,31036,31145,28202,160038,16040,31174,168205,31188],"euc-kr":[44034,44035,44037,44038,44043,44044,44045,44046,44047,44056,44062,44063,44065,44066,44067,44069,44070,44071,44072,44073,44074,44075,44078,44082,44083,44084,null,null,null,null,null,null,44085,44086,44087,44090,44091,44093,44094,44095,44097,44098,44099,44100,44101,44102,44103,44104,44105,44106,44108,44110,44111,44112,44113,44114,44115,44117,null,null,null,null,null,null,44118,44119,44121,44122,44123,44125,44126,44127,44128,44129,44130,44131,44132,44133,44134,44135,44136,44137,44138,44139,44140,44141,44142,44143,44146,44147,44149,44150,44153,44155,44156,44157,44158,44159,44162,44167,44168,44173,44174,44175,44177,44178,44179,44181,44182,44183,44184,44185,44186,44187,44190,44194,44195,44196,44197,44198,44199,44203,44205,44206,44209,44210,44211,44212,44213,44214,44215,44218,44222,44223,44224,44226,44227,44229,44230,44231,44233,44234,44235,44237,44238,44239,44240,44241,44242,44243,44244,44246,44248,44249,44250,44251,44252,44253,44254,44255,44258,44259,44261,44262,44265,44267,44269,44270,44274,44276,44279,44280,44281,44282,44283,44286,44287,44289,44290,44291,44293,44295,44296,44297,44298,44299,44302,44304,44306,44307,44308,44309,44310,44311,44313,44314,44315,44317,44318,44319,44321,44322,44323,44324,44325,44326,44327,44328,44330,44331,44334,44335,44336,44337,44338,44339,null,null,null,null,null,null,44342,44343,44345,44346,44347,44349,44350,44351,44352,44353,44354,44355,44358,44360,44362,44363,44364,44365,44366,44367,44369,44370,44371,44373,44374,44375,null,null,null,null,null,null,44377,44378,44379,44380,44381,44382,44383,44384,44386,44388,44389,44390,44391,44392,44393,44394,44395,44398,44399,44401,44402,44407,44408,44409,44410,44414,44416,44419,44420,44421,44422,44423,44426,44427,44429,44430,44431,44433,44434,44435,44436,44437,44438,44439,44440,44441,44442,44443,44446,44447,44448,44449,44450,44451,44453,44454,44455,44456,44457,44458,44459,44460,44461,44462,44463,44464,44465,44466,44467,44468,44469,44470,44472,44473,44474,44475,44476,44477,44478,44479,44482,44483,44485,44486,44487,44489,44490,44491,44492,44493,44494,44495,44498,44500,44501,44502,44503,44504,44505,44506,44507,44509,44510,44511,44513,44514,44515,44517,44518,44519,44520,44521,44522,44523,44524,44525,44526,44527,44528,44529,44530,44531,44532,44533,44534,44535,44538,44539,44541,44542,44546,44547,44548,44549,44550,44551,44554,44556,44558,44559,44560,44561,44562,44563,44565,44566,44567,44568,44569,44570,44571,44572,null,null,null,null,null,null,44573,44574,44575,44576,44577,44578,44579,44580,44581,44582,44583,44584,44585,44586,44587,44588,44589,44590,44591,44594,44595,44597,44598,44601,44603,44604,null,null,null,null,null,null,44605,44606,44607,44610,44612,44615,44616,44617,44619,44623,44625,44626,44627,44629,44631,44632,44633,44634,44635,44638,44642,44643,44644,44646,44647,44650,44651,44653,44654,44655,44657,44658,44659,44660,44661,44662,44663,44666,44670,44671,44672,44673,44674,44675,44678,44679,44680,44681,44682,44683,44685,44686,44687,44688,44689,44690,44691,44692,44693,44694,44695,44696,44697,44698,44699,44700,44701,44702,44703,44704,44705,44706,44707,44708,44709,44710,44711,44712,44713,44714,44715,44716,44717,44718,44719,44720,44721,44722,44723,44724,44725,44726,44727,44728,44729,44730,44731,44735,44737,44738,44739,44741,44742,44743,44744,44745,44746,44747,44750,44754,44755,44756,44757,44758,44759,44762,44763,44765,44766,44767,44768,44769,44770,44771,44772,44773,44774,44775,44777,44778,44780,44782,44783,44784,44785,44786,44787,44789,44790,44791,44793,44794,44795,44797,44798,44799,44800,44801,44802,44803,44804,44805,null,null,null,null,null,null,44806,44809,44810,44811,44812,44814,44815,44817,44818,44819,44820,44821,44822,44823,44824,44825,44826,44827,44828,44829,44830,44831,44832,44833,44834,44835,null,null,null,null,null,null,44836,44837,44838,44839,44840,44841,44842,44843,44846,44847,44849,44851,44853,44854,44855,44856,44857,44858,44859,44862,44864,44868,44869,44870,44871,44874,44875,44876,44877,44878,44879,44881,44882,44883,44884,44885,44886,44887,44888,44889,44890,44891,44894,44895,44896,44897,44898,44899,44902,44903,44904,44905,44906,44907,44908,44909,44910,44911,44912,44913,44914,44915,44916,44917,44918,44919,44920,44922,44923,44924,44925,44926,44927,44929,44930,44931,44933,44934,44935,44937,44938,44939,44940,44941,44942,44943,44946,44947,44948,44950,44951,44952,44953,44954,44955,44957,44958,44959,44960,44961,44962,44963,44964,44965,44966,44967,44968,44969,44970,44971,44972,44973,44974,44975,44976,44977,44978,44979,44980,44981,44982,44983,44986,44987,44989,44990,44991,44993,44994,44995,44996,44997,44998,45002,45004,45007,45008,45009,45010,45011,45013,45014,45015,45016,45017,45018,45019,45021,45022,45023,45024,45025,null,null,null,null,null,null,45026,45027,45028,45029,45030,45031,45034,45035,45036,45037,45038,45039,45042,45043,45045,45046,45047,45049,45050,45051,45052,45053,45054,45055,45058,45059,null,null,null,null,null,null,45061,45062,45063,45064,45065,45066,45067,45069,45070,45071,45073,45074,45075,45077,45078,45079,45080,45081,45082,45083,45086,45087,45088,45089,45090,45091,45092,45093,45094,45095,45097,45098,45099,45100,45101,45102,45103,45104,45105,45106,45107,45108,45109,45110,45111,45112,45113,45114,45115,45116,45117,45118,45119,45120,45121,45122,45123,45126,45127,45129,45131,45133,45135,45136,45137,45138,45142,45144,45146,45147,45148,45150,45151,45152,45153,45154,45155,45156,45157,45158,45159,45160,45161,45162,45163,45164,45165,45166,45167,45168,45169,45170,45171,45172,45173,45174,45175,45176,45177,45178,45179,45182,45183,45185,45186,45187,45189,45190,45191,45192,45193,45194,45195,45198,45200,45202,45203,45204,45205,45206,45207,45211,45213,45214,45219,45220,45221,45222,45223,45226,45232,45234,45238,45239,45241,45242,45243,45245,45246,45247,45248,45249,45250,45251,45254,45258,45259,45260,45261,45262,45263,45266,null,null,null,null,null,null,45267,45269,45270,45271,45273,45274,45275,45276,45277,45278,45279,45281,45282,45283,45284,45286,45287,45288,45289,45290,45291,45292,45293,45294,45295,45296,null,null,null,null,null,null,45297,45298,45299,45300,45301,45302,45303,45304,45305,45306,45307,45308,45309,45310,45311,45312,45313,45314,45315,45316,45317,45318,45319,45322,45325,45326,45327,45329,45332,45333,45334,45335,45338,45342,45343,45344,45345,45346,45350,45351,45353,45354,45355,45357,45358,45359,45360,45361,45362,45363,45366,45370,45371,45372,45373,45374,45375,45378,45379,45381,45382,45383,45385,45386,45387,45388,45389,45390,45391,45394,45395,45398,45399,45401,45402,45403,45405,45406,45407,45409,45410,45411,45412,45413,45414,45415,45416,45417,45418,45419,45420,45421,45422,45423,45424,45425,45426,45427,45428,45429,45430,45431,45434,45435,45437,45438,45439,45441,45443,45444,45445,45446,45447,45450,45452,45454,45455,45456,45457,45461,45462,45463,45465,45466,45467,45469,45470,45471,45472,45473,45474,45475,45476,45477,45478,45479,45481,45482,45483,45484,45485,45486,45487,45488,45489,45490,45491,45492,45493,45494,45495,45496,null,null,null,null,null,null,45497,45498,45499,45500,45501,45502,45503,45504,45505,45506,45507,45508,45509,45510,45511,45512,45513,45514,45515,45517,45518,45519,45521,45522,45523,45525,null,null,null,null,null,null,45526,45527,45528,45529,45530,45531,45534,45536,45537,45538,45539,45540,45541,45542,45543,45546,45547,45549,45550,45551,45553,45554,45555,45556,45557,45558,45559,45560,45562,45564,45566,45567,45568,45569,45570,45571,45574,45575,45577,45578,45581,45582,45583,45584,45585,45586,45587,45590,45592,45594,45595,45596,45597,45598,45599,45601,45602,45603,45604,45605,45606,45607,45608,45609,45610,45611,45612,45613,45614,45615,45616,45617,45618,45619,45621,45622,45623,45624,45625,45626,45627,45629,45630,45631,45632,45633,45634,45635,45636,45637,45638,45639,45640,45641,45642,45643,45644,45645,45646,45647,45648,45649,45650,45651,45652,45653,45654,45655,45657,45658,45659,45661,45662,45663,45665,45666,45667,45668,45669,45670,45671,45674,45675,45676,45677,45678,45679,45680,45681,45682,45683,45686,45687,45688,45689,45690,45691,45693,45694,45695,45696,45697,45698,45699,45702,45703,45704,45706,45707,45708,45709,45710,null,null,null,null,null,null,45711,45714,45715,45717,45718,45719,45723,45724,45725,45726,45727,45730,45732,45735,45736,45737,45739,45741,45742,45743,45745,45746,45747,45749,45750,45751,null,null,null,null,null,null,45752,45753,45754,45755,45756,45757,45758,45759,45760,45761,45762,45763,45764,45765,45766,45767,45770,45771,45773,45774,45775,45777,45779,45780,45781,45782,45783,45786,45788,45790,45791,45792,45793,45795,45799,45801,45802,45808,45809,45810,45814,45820,45821,45822,45826,45827,45829,45830,45831,45833,45834,45835,45836,45837,45838,45839,45842,45846,45847,45848,45849,45850,45851,45853,45854,45855,45856,45857,45858,45859,45860,45861,45862,45863,45864,45865,45866,45867,45868,45869,45870,45871,45872,45873,45874,45875,45876,45877,45878,45879,45880,45881,45882,45883,45884,45885,45886,45887,45888,45889,45890,45891,45892,45893,45894,45895,45896,45897,45898,45899,45900,45901,45902,45903,45904,45905,45906,45907,45911,45913,45914,45917,45920,45921,45922,45923,45926,45928,45930,45932,45933,45935,45938,45939,45941,45942,45943,45945,45946,45947,45948,45949,45950,45951,45954,45958,45959,45960,45961,45962,45963,45965,null,null,null,null,null,null,45966,45967,45969,45970,45971,45973,45974,45975,45976,45977,45978,45979,45980,45981,45982,45983,45986,45987,45988,45989,45990,45991,45993,45994,45995,45997,null,null,null,null,null,null,45998,45999,46e3,46001,46002,46003,46004,46005,46006,46007,46008,46009,46010,46011,46012,46013,46014,46015,46016,46017,46018,46019,46022,46023,46025,46026,46029,46031,46033,46034,46035,46038,46040,46042,46044,46046,46047,46049,46050,46051,46053,46054,46055,46057,46058,46059,46060,46061,46062,46063,46064,46065,46066,46067,46068,46069,46070,46071,46072,46073,46074,46075,46077,46078,46079,46080,46081,46082,46083,46084,46085,46086,46087,46088,46089,46090,46091,46092,46093,46094,46095,46097,46098,46099,46100,46101,46102,46103,46105,46106,46107,46109,46110,46111,46113,46114,46115,46116,46117,46118,46119,46122,46124,46125,46126,46127,46128,46129,46130,46131,46133,46134,46135,46136,46137,46138,46139,46140,46141,46142,46143,46144,46145,46146,46147,46148,46149,46150,46151,46152,46153,46154,46155,46156,46157,46158,46159,46162,46163,46165,46166,46167,46169,46170,46171,46172,46173,46174,46175,46178,46180,46182,null,null,null,null,null,null,46183,46184,46185,46186,46187,46189,46190,46191,46192,46193,46194,46195,46196,46197,46198,46199,46200,46201,46202,46203,46204,46205,46206,46207,46209,46210,null,null,null,null,null,null,46211,46212,46213,46214,46215,46217,46218,46219,46220,46221,46222,46223,46224,46225,46226,46227,46228,46229,46230,46231,46232,46233,46234,46235,46236,46238,46239,46240,46241,46242,46243,46245,46246,46247,46249,46250,46251,46253,46254,46255,46256,46257,46258,46259,46260,46262,46264,46266,46267,46268,46269,46270,46271,46273,46274,46275,46277,46278,46279,46281,46282,46283,46284,46285,46286,46287,46289,46290,46291,46292,46294,46295,46296,46297,46298,46299,46302,46303,46305,46306,46309,46311,46312,46313,46314,46315,46318,46320,46322,46323,46324,46325,46326,46327,46329,46330,46331,46332,46333,46334,46335,46336,46337,46338,46339,46340,46341,46342,46343,46344,46345,46346,46347,46348,46349,46350,46351,46352,46353,46354,46355,46358,46359,46361,46362,46365,46366,46367,46368,46369,46370,46371,46374,46379,46380,46381,46382,46383,46386,46387,46389,46390,46391,46393,46394,46395,46396,46397,46398,46399,46402,46406,null,null,null,null,null,null,46407,46408,46409,46410,46414,46415,46417,46418,46419,46421,46422,46423,46424,46425,46426,46427,46430,46434,46435,46436,46437,46438,46439,46440,46441,46442,null,null,null,null,null,null,46443,46444,46445,46446,46447,46448,46449,46450,46451,46452,46453,46454,46455,46456,46457,46458,46459,46460,46461,46462,46463,46464,46465,46466,46467,46468,46469,46470,46471,46472,46473,46474,46475,46476,46477,46478,46479,46480,46481,46482,46483,46484,46485,46486,46487,46488,46489,46490,46491,46492,46493,46494,46495,46498,46499,46501,46502,46503,46505,46508,46509,46510,46511,46514,46518,46519,46520,46521,46522,46526,46527,46529,46530,46531,46533,46534,46535,46536,46537,46538,46539,46542,46546,46547,46548,46549,46550,46551,46553,46554,46555,46556,46557,46558,46559,46560,46561,46562,46563,46564,46565,46566,46567,46568,46569,46570,46571,46573,46574,46575,46576,46577,46578,46579,46580,46581,46582,46583,46584,46585,46586,46587,46588,46589,46590,46591,46592,46593,46594,46595,46596,46597,46598,46599,46600,46601,46602,46603,46604,46605,46606,46607,46610,46611,46613,46614,46615,46617,46618,46619,46620,46621,null,null,null,null,null,null,46622,46623,46624,46625,46626,46627,46628,46630,46631,46632,46633,46634,46635,46637,46638,46639,46640,46641,46642,46643,46645,46646,46647,46648,46649,46650,null,null,null,null,null,null,46651,46652,46653,46654,46655,46656,46657,46658,46659,46660,46661,46662,46663,46665,46666,46667,46668,46669,46670,46671,46672,46673,46674,46675,46676,46677,46678,46679,46680,46681,46682,46683,46684,46685,46686,46687,46688,46689,46690,46691,46693,46694,46695,46697,46698,46699,46700,46701,46702,46703,46704,46705,46706,46707,46708,46709,46710,46711,46712,46713,46714,46715,46716,46717,46718,46719,46720,46721,46722,46723,46724,46725,46726,46727,46728,46729,46730,46731,46732,46733,46734,46735,46736,46737,46738,46739,46740,46741,46742,46743,46744,46745,46746,46747,46750,46751,46753,46754,46755,46757,46758,46759,46760,46761,46762,46765,46766,46767,46768,46770,46771,46772,46773,46774,46775,46776,46777,46778,46779,46780,46781,46782,46783,46784,46785,46786,46787,46788,46789,46790,46791,46792,46793,46794,46795,46796,46797,46798,46799,46800,46801,46802,46803,46805,46806,46807,46808,46809,46810,46811,46812,46813,null,null,null,null,null,null,46814,46815,46816,46817,46818,46819,46820,46821,46822,46823,46824,46825,46826,46827,46828,46829,46830,46831,46833,46834,46835,46837,46838,46839,46841,46842,null,null,null,null,null,null,46843,46844,46845,46846,46847,46850,46851,46852,46854,46855,46856,46857,46858,46859,46860,46861,46862,46863,46864,46865,46866,46867,46868,46869,46870,46871,46872,46873,46874,46875,46876,46877,46878,46879,46880,46881,46882,46883,46884,46885,46886,46887,46890,46891,46893,46894,46897,46898,46899,46900,46901,46902,46903,46906,46908,46909,46910,46911,46912,46913,46914,46915,46917,46918,46919,46921,46922,46923,46925,46926,46927,46928,46929,46930,46931,46934,46935,46936,46937,46938,46939,46940,46941,46942,46943,46945,46946,46947,46949,46950,46951,46953,46954,46955,46956,46957,46958,46959,46962,46964,46966,46967,46968,46969,46970,46971,46974,46975,46977,46978,46979,46981,46982,46983,46984,46985,46986,46987,46990,46995,46996,46997,47002,47003,47005,47006,47007,47009,47010,47011,47012,47013,47014,47015,47018,47022,47023,47024,47025,47026,47027,47030,47031,47033,47034,47035,47036,47037,47038,47039,47040,47041,null,null,null,null,null,null,47042,47043,47044,47045,47046,47048,47050,47051,47052,47053,47054,47055,47056,47057,47058,47059,47060,47061,47062,47063,47064,47065,47066,47067,47068,47069,null,null,null,null,null,null,47070,47071,47072,47073,47074,47075,47076,47077,47078,47079,47080,47081,47082,47083,47086,47087,47089,47090,47091,47093,47094,47095,47096,47097,47098,47099,47102,47106,47107,47108,47109,47110,47114,47115,47117,47118,47119,47121,47122,47123,47124,47125,47126,47127,47130,47132,47134,47135,47136,47137,47138,47139,47142,47143,47145,47146,47147,47149,47150,47151,47152,47153,47154,47155,47158,47162,47163,47164,47165,47166,47167,47169,47170,47171,47173,47174,47175,47176,47177,47178,47179,47180,47181,47182,47183,47184,47186,47188,47189,47190,47191,47192,47193,47194,47195,47198,47199,47201,47202,47203,47205,47206,47207,47208,47209,47210,47211,47214,47216,47218,47219,47220,47221,47222,47223,47225,47226,47227,47229,47230,47231,47232,47233,47234,47235,47236,47237,47238,47239,47240,47241,47242,47243,47244,47246,47247,47248,47249,47250,47251,47252,47253,47254,47255,47256,47257,47258,47259,47260,47261,47262,47263,null,null,null,null,null,null,47264,47265,47266,47267,47268,47269,47270,47271,47273,47274,47275,47276,47277,47278,47279,47281,47282,47283,47285,47286,47287,47289,47290,47291,47292,47293,null,null,null,null,null,null,47294,47295,47298,47300,47302,47303,47304,47305,47306,47307,47309,47310,47311,47313,47314,47315,47317,47318,47319,47320,47321,47322,47323,47324,47326,47328,47330,47331,47332,47333,47334,47335,47338,47339,47341,47342,47343,47345,47346,47347,47348,47349,47350,47351,47354,47356,47358,47359,47360,47361,47362,47363,47365,47366,47367,47368,47369,47370,47371,47372,47373,47374,47375,47376,47377,47378,47379,47380,47381,47382,47383,47385,47386,47387,47388,47389,47390,47391,47393,47394,47395,47396,47397,47398,47399,47400,47401,47402,47403,47404,47405,47406,47407,47408,47409,47410,47411,47412,47413,47414,47415,47416,47417,47418,47419,47422,47423,47425,47426,47427,47429,47430,47431,47432,47433,47434,47435,47437,47438,47440,47442,47443,47444,47445,47446,47447,47450,47451,47453,47454,47455,47457,47458,47459,47460,47461,47462,47463,47466,47468,47470,47471,47472,47473,47474,47475,47478,47479,47481,47482,47483,47485,null,null,null,null,null,null,47486,47487,47488,47489,47490,47491,47494,47496,47499,47500,47503,47504,47505,47506,47507,47508,47509,47510,47511,47512,47513,47514,47515,47516,47517,47518,null,null,null,null,null,null,47519,47520,47521,47522,47523,47524,47525,47526,47527,47528,47529,47530,47531,47534,47535,47537,47538,47539,47541,47542,47543,47544,47545,47546,47547,47550,47552,47554,47555,47556,47557,47558,47559,47562,47563,47565,47571,47572,47573,47574,47575,47578,47580,47583,47584,47586,47590,47591,47593,47594,47595,47597,47598,47599,47600,47601,47602,47603,47606,47611,47612,47613,47614,47615,47618,47619,47620,47621,47622,47623,47625,47626,47627,47628,47629,47630,47631,47632,47633,47634,47635,47636,47638,47639,47640,47641,47642,47643,47644,47645,47646,47647,47648,47649,47650,47651,47652,47653,47654,47655,47656,47657,47658,47659,47660,47661,47662,47663,47664,47665,47666,47667,47668,47669,47670,47671,47674,47675,47677,47678,47679,47681,47683,47684,47685,47686,47687,47690,47692,47695,47696,47697,47698,47702,47703,47705,47706,47707,47709,47710,47711,47712,47713,47714,47715,47718,47722,47723,47724,47725,47726,47727,null,null,null,null,null,null,47730,47731,47733,47734,47735,47737,47738,47739,47740,47741,47742,47743,47744,47745,47746,47750,47752,47753,47754,47755,47757,47758,47759,47760,47761,47762,null,null,null,null,null,null,47763,47764,47765,47766,47767,47768,47769,47770,47771,47772,47773,47774,47775,47776,47777,47778,47779,47780,47781,47782,47783,47786,47789,47790,47791,47793,47795,47796,47797,47798,47799,47802,47804,47806,47807,47808,47809,47810,47811,47813,47814,47815,47817,47818,47819,47820,47821,47822,47823,47824,47825,47826,47827,47828,47829,47830,47831,47834,47835,47836,47837,47838,47839,47840,47841,47842,47843,47844,47845,47846,47847,47848,47849,47850,47851,47852,47853,47854,47855,47856,47857,47858,47859,47860,47861,47862,47863,47864,47865,47866,47867,47869,47870,47871,47873,47874,47875,47877,47878,47879,47880,47881,47882,47883,47884,47886,47888,47890,47891,47892,47893,47894,47895,47897,47898,47899,47901,47902,47903,47905,47906,47907,47908,47909,47910,47911,47912,47914,47916,47917,47918,47919,47920,47921,47922,47923,47927,47929,47930,47935,47936,47937,47938,47939,47942,47944,47946,47947,47948,47950,47953,47954,null,null,null,null,null,null,47955,47957,47958,47959,47961,47962,47963,47964,47965,47966,47967,47968,47970,47972,47973,47974,47975,47976,47977,47978,47979,47981,47982,47983,47984,47985,null,null,null,null,null,null,47986,47987,47988,47989,47990,47991,47992,47993,47994,47995,47996,47997,47998,47999,48e3,48001,48002,48003,48004,48005,48006,48007,48009,48010,48011,48013,48014,48015,48017,48018,48019,48020,48021,48022,48023,48024,48025,48026,48027,48028,48029,48030,48031,48032,48033,48034,48035,48037,48038,48039,48041,48042,48043,48045,48046,48047,48048,48049,48050,48051,48053,48054,48056,48057,48058,48059,48060,48061,48062,48063,48065,48066,48067,48069,48070,48071,48073,48074,48075,48076,48077,48078,48079,48081,48082,48084,48085,48086,48087,48088,48089,48090,48091,48092,48093,48094,48095,48096,48097,48098,48099,48100,48101,48102,48103,48104,48105,48106,48107,48108,48109,48110,48111,48112,48113,48114,48115,48116,48117,48118,48119,48122,48123,48125,48126,48129,48131,48132,48133,48134,48135,48138,48142,48144,48146,48147,48153,48154,48160,48161,48162,48163,48166,48168,48170,48171,48172,48174,48175,48178,48179,48181,null,null,null,null,null,null,48182,48183,48185,48186,48187,48188,48189,48190,48191,48194,48198,48199,48200,48202,48203,48206,48207,48209,48210,48211,48212,48213,48214,48215,48216,48217,null,null,null,null,null,null,48218,48219,48220,48222,48223,48224,48225,48226,48227,48228,48229,48230,48231,48232,48233,48234,48235,48236,48237,48238,48239,48240,48241,48242,48243,48244,48245,48246,48247,48248,48249,48250,48251,48252,48253,48254,48255,48256,48257,48258,48259,48262,48263,48265,48266,48269,48271,48272,48273,48274,48275,48278,48280,48283,48284,48285,48286,48287,48290,48291,48293,48294,48297,48298,48299,48300,48301,48302,48303,48306,48310,48311,48312,48313,48314,48315,48318,48319,48321,48322,48323,48325,48326,48327,48328,48329,48330,48331,48332,48334,48338,48339,48340,48342,48343,48345,48346,48347,48349,48350,48351,48352,48353,48354,48355,48356,48357,48358,48359,48360,48361,48362,48363,48364,48365,48366,48367,48368,48369,48370,48371,48375,48377,48378,48379,48381,48382,48383,48384,48385,48386,48387,48390,48392,48394,48395,48396,48397,48398,48399,48401,48402,48403,48405,48406,48407,48408,48409,48410,48411,48412,48413,null,null,null,null,null,null,48414,48415,48416,48417,48418,48419,48421,48422,48423,48424,48425,48426,48427,48429,48430,48431,48432,48433,48434,48435,48436,48437,48438,48439,48440,48441,null,null,null,null,null,null,48442,48443,48444,48445,48446,48447,48449,48450,48451,48452,48453,48454,48455,48458,48459,48461,48462,48463,48465,48466,48467,48468,48469,48470,48471,48474,48475,48476,48477,48478,48479,48480,48481,48482,48483,48485,48486,48487,48489,48490,48491,48492,48493,48494,48495,48496,48497,48498,48499,48500,48501,48502,48503,48504,48505,48506,48507,48508,48509,48510,48511,48514,48515,48517,48518,48523,48524,48525,48526,48527,48530,48532,48534,48535,48536,48539,48541,48542,48543,48544,48545,48546,48547,48549,48550,48551,48552,48553,48554,48555,48556,48557,48558,48559,48561,48562,48563,48564,48565,48566,48567,48569,48570,48571,48572,48573,48574,48575,48576,48577,48578,48579,48580,48581,48582,48583,48584,48585,48586,48587,48588,48589,48590,48591,48592,48593,48594,48595,48598,48599,48601,48602,48603,48605,48606,48607,48608,48609,48610,48611,48612,48613,48614,48615,48616,48618,48619,48620,48621,48622,48623,48625,null,null,null,null,null,null,48626,48627,48629,48630,48631,48633,48634,48635,48636,48637,48638,48639,48641,48642,48644,48646,48647,48648,48649,48650,48651,48654,48655,48657,48658,48659,null,null,null,null,null,null,48661,48662,48663,48664,48665,48666,48667,48670,48672,48673,48674,48675,48676,48677,48678,48679,48680,48681,48682,48683,48684,48685,48686,48687,48688,48689,48690,48691,48692,48693,48694,48695,48696,48697,48698,48699,48700,48701,48702,48703,48704,48705,48706,48707,48710,48711,48713,48714,48715,48717,48719,48720,48721,48722,48723,48726,48728,48732,48733,48734,48735,48738,48739,48741,48742,48743,48745,48747,48748,48749,48750,48751,48754,48758,48759,48760,48761,48762,48766,48767,48769,48770,48771,48773,48774,48775,48776,48777,48778,48779,48782,48786,48787,48788,48789,48790,48791,48794,48795,48796,48797,48798,48799,48800,48801,48802,48803,48804,48805,48806,48807,48809,48810,48811,48812,48813,48814,48815,48816,48817,48818,48819,48820,48821,48822,48823,48824,48825,48826,48827,48828,48829,48830,48831,48832,48833,48834,48835,48836,48837,48838,48839,48840,48841,48842,48843,48844,48845,48846,48847,48850,48851,null,null,null,null,null,null,48853,48854,48857,48858,48859,48860,48861,48862,48863,48865,48866,48870,48871,48872,48873,48874,48875,48877,48878,48879,48880,48881,48882,48883,48884,48885,null,null,null,null,null,null,48886,48887,48888,48889,48890,48891,48892,48893,48894,48895,48896,48898,48899,48900,48901,48902,48903,48906,48907,48908,48909,48910,48911,48912,48913,48914,48915,48916,48917,48918,48919,48922,48926,48927,48928,48929,48930,48931,48932,48933,48934,48935,48936,48937,48938,48939,48940,48941,48942,48943,48944,48945,48946,48947,48948,48949,48950,48951,48952,48953,48954,48955,48956,48957,48958,48959,48962,48963,48965,48966,48967,48969,48970,48971,48972,48973,48974,48975,48978,48979,48980,48982,48983,48984,48985,48986,48987,48988,48989,48990,48991,48992,48993,48994,48995,48996,48997,48998,48999,49e3,49001,49002,49003,49004,49005,49006,49007,49008,49009,49010,49011,49012,49013,49014,49015,49016,49017,49018,49019,49020,49021,49022,49023,49024,49025,49026,49027,49028,49029,49030,49031,49032,49033,49034,49035,49036,49037,49038,49039,49040,49041,49042,49043,49045,49046,49047,49048,49049,49050,49051,49052,49053,null,null,null,null,null,null,49054,49055,49056,49057,49058,49059,49060,49061,49062,49063,49064,49065,49066,49067,49068,49069,49070,49071,49073,49074,49075,49076,49077,49078,49079,49080,null,null,null,null,null,null,49081,49082,49083,49084,49085,49086,49087,49088,49089,49090,49091,49092,49094,49095,49096,49097,49098,49099,49102,49103,49105,49106,49107,49109,49110,49111,49112,49113,49114,49115,49117,49118,49120,49122,49123,49124,49125,49126,49127,49128,49129,49130,49131,49132,49133,49134,49135,49136,49137,49138,49139,49140,49141,49142,49143,49144,49145,49146,49147,49148,49149,49150,49151,49152,49153,49154,49155,49156,49157,49158,49159,49160,49161,49162,49163,49164,49165,49166,49167,49168,49169,49170,49171,49172,49173,49174,49175,49176,49177,49178,49179,49180,49181,49182,49183,49184,49185,49186,49187,49188,49189,49190,49191,49192,49193,49194,49195,49196,49197,49198,49199,49200,49201,49202,49203,49204,49205,49206,49207,49208,49209,49210,49211,49213,49214,49215,49216,49217,49218,49219,49220,49221,49222,49223,49224,49225,49226,49227,49228,49229,49230,49231,49232,49234,49235,49236,49237,49238,49239,49241,49242,49243,null,null,null,null,null,null,49245,49246,49247,49249,49250,49251,49252,49253,49254,49255,49258,49259,49260,49261,49262,49263,49264,49265,49266,49267,49268,49269,49270,49271,49272,49273,null,null,null,null,null,null,49274,49275,49276,49277,49278,49279,49280,49281,49282,49283,49284,49285,49286,49287,49288,49289,49290,49291,49292,49293,49294,49295,49298,49299,49301,49302,49303,49305,49306,49307,49308,49309,49310,49311,49314,49316,49318,49319,49320,49321,49322,49323,49326,49329,49330,49335,49336,49337,49338,49339,49342,49346,49347,49348,49350,49351,49354,49355,49357,49358,49359,49361,49362,49363,49364,49365,49366,49367,49370,49374,49375,49376,49377,49378,49379,49382,49383,49385,49386,49387,49389,49390,49391,49392,49393,49394,49395,49398,49400,49402,49403,49404,49405,49406,49407,49409,49410,49411,49413,49414,49415,49417,49418,49419,49420,49421,49422,49423,49425,49426,49427,49428,49430,49431,49432,49433,49434,49435,49441,49442,49445,49448,49449,49450,49451,49454,49458,49459,49460,49461,49463,49466,49467,49469,49470,49471,49473,49474,49475,49476,49477,49478,49479,49482,49486,49487,49488,49489,49490,49491,49494,49495,null,null,null,null,null,null,49497,49498,49499,49501,49502,49503,49504,49505,49506,49507,49510,49514,49515,49516,49517,49518,49519,49521,49522,49523,49525,49526,49527,49529,49530,49531,null,null,null,null,null,null,49532,49533,49534,49535,49536,49537,49538,49539,49540,49542,49543,49544,49545,49546,49547,49551,49553,49554,49555,49557,49559,49560,49561,49562,49563,49566,49568,49570,49571,49572,49574,49575,49578,49579,49581,49582,49583,49585,49586,49587,49588,49589,49590,49591,49592,49593,49594,49595,49596,49598,49599,49600,49601,49602,49603,49605,49606,49607,49609,49610,49611,49613,49614,49615,49616,49617,49618,49619,49621,49622,49625,49626,49627,49628,49629,49630,49631,49633,49634,49635,49637,49638,49639,49641,49642,49643,49644,49645,49646,49647,49650,49652,49653,49654,49655,49656,49657,49658,49659,49662,49663,49665,49666,49667,49669,49670,49671,49672,49673,49674,49675,49678,49680,49682,49683,49684,49685,49686,49687,49690,49691,49693,49694,49697,49698,49699,49700,49701,49702,49703,49706,49708,49710,49712,49715,49717,49718,49719,49720,49721,49722,49723,49724,49725,49726,49727,49728,49729,49730,49731,49732,49733,null,null,null,null,null,null,49734,49735,49737,49738,49739,49740,49741,49742,49743,49746,49747,49749,49750,49751,49753,49754,49755,49756,49757,49758,49759,49761,49762,49763,49764,49766,null,null,null,null,null,null,49767,49768,49769,49770,49771,49774,49775,49777,49778,49779,49781,49782,49783,49784,49785,49786,49787,49790,49792,49794,49795,49796,49797,49798,49799,49802,49803,49804,49805,49806,49807,49809,49810,49811,49812,49813,49814,49815,49817,49818,49820,49822,49823,49824,49825,49826,49827,49830,49831,49833,49834,49835,49838,49839,49840,49841,49842,49843,49846,49848,49850,49851,49852,49853,49854,49855,49856,49857,49858,49859,49860,49861,49862,49863,49864,49865,49866,49867,49868,49869,49870,49871,49872,49873,49874,49875,49876,49877,49878,49879,49880,49881,49882,49883,49886,49887,49889,49890,49893,49894,49895,49896,49897,49898,49902,49904,49906,49907,49908,49909,49911,49914,49917,49918,49919,49921,49922,49923,49924,49925,49926,49927,49930,49931,49934,49935,49936,49937,49938,49942,49943,49945,49946,49947,49949,49950,49951,49952,49953,49954,49955,49958,49959,49962,49963,49964,49965,49966,49967,49968,49969,49970,null,null,null,null,null,null,49971,49972,49973,49974,49975,49976,49977,49978,49979,49980,49981,49982,49983,49984,49985,49986,49987,49988,49990,49991,49992,49993,49994,49995,49996,49997,null,null,null,null,null,null,49998,49999,5e4,50001,50002,50003,50004,50005,50006,50007,50008,50009,50010,50011,50012,50013,50014,50015,50016,50017,50018,50019,50020,50021,50022,50023,50026,50027,50029,50030,50031,50033,50035,50036,50037,50038,50039,50042,50043,50046,50047,50048,50049,50050,50051,50053,50054,50055,50057,50058,50059,50061,50062,50063,50064,50065,50066,50067,50068,50069,50070,50071,50072,50073,50074,50075,50076,50077,50078,50079,50080,50081,50082,50083,50084,50085,50086,50087,50088,50089,50090,50091,50092,50093,50094,50095,50096,50097,50098,50099,50100,50101,50102,50103,50104,50105,50106,50107,50108,50109,50110,50111,50113,50114,50115,50116,50117,50118,50119,50120,50121,50122,50123,50124,50125,50126,50127,50128,50129,50130,50131,50132,50133,50134,50135,50138,50139,50141,50142,50145,50147,50148,50149,50150,50151,50154,50155,50156,50158,50159,50160,50161,50162,50163,50166,50167,50169,50170,50171,50172,50173,50174,null,null,null,null,null,null,50175,50176,50177,50178,50179,50180,50181,50182,50183,50185,50186,50187,50188,50189,50190,50191,50193,50194,50195,50196,50197,50198,50199,50200,50201,50202,null,null,null,null,null,null,50203,50204,50205,50206,50207,50208,50209,50210,50211,50213,50214,50215,50216,50217,50218,50219,50221,50222,50223,50225,50226,50227,50229,50230,50231,50232,50233,50234,50235,50238,50239,50240,50241,50242,50243,50244,50245,50246,50247,50249,50250,50251,50252,50253,50254,50255,50256,50257,50258,50259,50260,50261,50262,50263,50264,50265,50266,50267,50268,50269,50270,50271,50272,50273,50274,50275,50278,50279,50281,50282,50283,50285,50286,50287,50288,50289,50290,50291,50294,50295,50296,50298,50299,50300,50301,50302,50303,50305,50306,50307,50308,50309,50310,50311,50312,50313,50314,50315,50316,50317,50318,50319,50320,50321,50322,50323,50325,50326,50327,50328,50329,50330,50331,50333,50334,50335,50336,50337,50338,50339,50340,50341,50342,50343,50344,50345,50346,50347,50348,50349,50350,50351,50352,50353,50354,50355,50356,50357,50358,50359,50361,50362,50363,50365,50366,50367,50368,50369,50370,50371,50372,50373,null,null,null,null,null,null,50374,50375,50376,50377,50378,50379,50380,50381,50382,50383,50384,50385,50386,50387,50388,50389,50390,50391,50392,50393,50394,50395,50396,50397,50398,50399,null,null,null,null,null,null,50400,50401,50402,50403,50404,50405,50406,50407,50408,50410,50411,50412,50413,50414,50415,50418,50419,50421,50422,50423,50425,50427,50428,50429,50430,50434,50435,50436,50437,50438,50439,50440,50441,50442,50443,50445,50446,50447,50449,50450,50451,50453,50454,50455,50456,50457,50458,50459,50461,50462,50463,50464,50465,50466,50467,50468,50469,50470,50471,50474,50475,50477,50478,50479,50481,50482,50483,50484,50485,50486,50487,50490,50492,50494,50495,50496,50497,50498,50499,50502,50503,50507,50511,50512,50513,50514,50518,50522,50523,50524,50527,50530,50531,50533,50534,50535,50537,50538,50539,50540,50541,50542,50543,50546,50550,50551,50552,50553,50554,50555,50558,50559,50561,50562,50563,50565,50566,50568,50569,50570,50571,50574,50576,50578,50579,50580,50582,50585,50586,50587,50589,50590,50591,50593,50594,50595,50596,50597,50598,50599,50600,50602,50603,50604,50605,50606,50607,50608,50609,50610,50611,50614,null,null,null,null,null,null,50615,50618,50623,50624,50625,50626,50627,50635,50637,50639,50642,50643,50645,50646,50647,50649,50650,50651,50652,50653,50654,50655,50658,50660,50662,50663,null,null,null,null,null,null,50664,50665,50666,50667,50671,50673,50674,50675,50677,50680,50681,50682,50683,50690,50691,50692,50697,50698,50699,50701,50702,50703,50705,50706,50707,50708,50709,50710,50711,50714,50717,50718,50719,50720,50721,50722,50723,50726,50727,50729,50730,50731,50735,50737,50738,50742,50744,50746,50748,50749,50750,50751,50754,50755,50757,50758,50759,50761,50762,50763,50764,50765,50766,50767,50770,50774,50775,50776,50777,50778,50779,50782,50783,50785,50786,50787,50788,50789,50790,50791,50792,50793,50794,50795,50797,50798,50800,50802,50803,50804,50805,50806,50807,50810,50811,50813,50814,50815,50817,50818,50819,50820,50821,50822,50823,50826,50828,50830,50831,50832,50833,50834,50835,50838,50839,50841,50842,50843,50845,50846,50847,50848,50849,50850,50851,50854,50856,50858,50859,50860,50861,50862,50863,50866,50867,50869,50870,50871,50875,50876,50877,50878,50879,50882,50884,50886,50887,50888,50889,50890,50891,50894,null,null,null,null,null,null,50895,50897,50898,50899,50901,50902,50903,50904,50905,50906,50907,50910,50911,50914,50915,50916,50917,50918,50919,50922,50923,50925,50926,50927,50929,50930,null,null,null,null,null,null,50931,50932,50933,50934,50935,50938,50939,50940,50942,50943,50944,50945,50946,50947,50950,50951,50953,50954,50955,50957,50958,50959,50960,50961,50962,50963,50966,50968,50970,50971,50972,50973,50974,50975,50978,50979,50981,50982,50983,50985,50986,50987,50988,50989,50990,50991,50994,50996,50998,51e3,51001,51002,51003,51006,51007,51009,51010,51011,51013,51014,51015,51016,51017,51019,51022,51024,51033,51034,51035,51037,51038,51039,51041,51042,51043,51044,51045,51046,51047,51049,51050,51052,51053,51054,51055,51056,51057,51058,51059,51062,51063,51065,51066,51067,51071,51072,51073,51074,51078,51083,51084,51085,51087,51090,51091,51093,51097,51099,51100,51101,51102,51103,51106,51111,51112,51113,51114,51115,51118,51119,51121,51122,51123,51125,51126,51127,51128,51129,51130,51131,51134,51138,51139,51140,51141,51142,51143,51146,51147,51149,51151,51153,51154,51155,51156,51157,51158,51159,51161,51162,51163,51164,null,null,null,null,null,null,51166,51167,51168,51169,51170,51171,51173,51174,51175,51177,51178,51179,51181,51182,51183,51184,51185,51186,51187,51188,51189,51190,51191,51192,51193,51194,null,null,null,null,null,null,51195,51196,51197,51198,51199,51202,51203,51205,51206,51207,51209,51211,51212,51213,51214,51215,51218,51220,51223,51224,51225,51226,51227,51230,51231,51233,51234,51235,51237,51238,51239,51240,51241,51242,51243,51246,51248,51250,51251,51252,51253,51254,51255,51257,51258,51259,51261,51262,51263,51265,51266,51267,51268,51269,51270,51271,51274,51275,51278,51279,51280,51281,51282,51283,51285,51286,51287,51288,51289,51290,51291,51292,51293,51294,51295,51296,51297,51298,51299,51300,51301,51302,51303,51304,51305,51306,51307,51308,51309,51310,51311,51314,51315,51317,51318,51319,51321,51323,51324,51325,51326,51327,51330,51332,51336,51337,51338,51342,51343,51344,51345,51346,51347,51349,51350,51351,51352,51353,51354,51355,51356,51358,51360,51362,51363,51364,51365,51366,51367,51369,51370,51371,51372,51373,51374,51375,51376,51377,51378,51379,51380,51381,51382,51383,51384,51385,51386,51387,51390,51391,51392,51393,null,null,null,null,null,null,51394,51395,51397,51398,51399,51401,51402,51403,51405,51406,51407,51408,51409,51410,51411,51414,51416,51418,51419,51420,51421,51422,51423,51426,51427,51429,null,null,null,null,null,null,51430,51431,51432,51433,51434,51435,51436,51437,51438,51439,51440,51441,51442,51443,51444,51446,51447,51448,51449,51450,51451,51454,51455,51457,51458,51459,51463,51464,51465,51466,51467,51470,12288,12289,12290,183,8229,8230,168,12291,173,8213,8741,65340,8764,8216,8217,8220,8221,12308,12309,12296,12297,12298,12299,12300,12301,12302,12303,12304,12305,177,215,247,8800,8804,8805,8734,8756,176,8242,8243,8451,8491,65504,65505,65509,9794,9792,8736,8869,8978,8706,8711,8801,8786,167,8251,9734,9733,9675,9679,9678,9671,9670,9633,9632,9651,9650,9661,9660,8594,8592,8593,8595,8596,12307,8810,8811,8730,8765,8733,8757,8747,8748,8712,8715,8838,8839,8834,8835,8746,8745,8743,8744,65506,51472,51474,51475,51476,51477,51478,51479,51481,51482,51483,51484,51485,51486,51487,51488,51489,51490,51491,51492,51493,51494,51495,51496,51497,51498,51499,null,null,null,null,null,null,51501,51502,51503,51504,51505,51506,51507,51509,51510,51511,51512,51513,51514,51515,51516,51517,51518,51519,51520,51521,51522,51523,51524,51525,51526,51527,null,null,null,null,null,null,51528,51529,51530,51531,51532,51533,51534,51535,51538,51539,51541,51542,51543,51545,51546,51547,51548,51549,51550,51551,51554,51556,51557,51558,51559,51560,51561,51562,51563,51565,51566,51567,8658,8660,8704,8707,180,65374,711,728,733,730,729,184,731,161,191,720,8750,8721,8719,164,8457,8240,9665,9664,9655,9654,9828,9824,9825,9829,9831,9827,8857,9672,9635,9680,9681,9618,9636,9637,9640,9639,9638,9641,9832,9743,9742,9756,9758,182,8224,8225,8597,8599,8601,8598,8600,9837,9833,9834,9836,12927,12828,8470,13255,8482,13250,13272,8481,8364,174,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,51569,51570,51571,51573,51574,51575,51576,51577,51578,51579,51581,51582,51583,51584,51585,51586,51587,51588,51589,51590,51591,51594,51595,51597,51598,51599,null,null,null,null,null,null,51601,51602,51603,51604,51605,51606,51607,51610,51612,51614,51615,51616,51617,51618,51619,51620,51621,51622,51623,51624,51625,51626,51627,51628,51629,51630,null,null,null,null,null,null,51631,51632,51633,51634,51635,51636,51637,51638,51639,51640,51641,51642,51643,51644,51645,51646,51647,51650,51651,51653,51654,51657,51659,51660,51661,51662,51663,51666,51668,51671,51672,51675,65281,65282,65283,65284,65285,65286,65287,65288,65289,65290,65291,65292,65293,65294,65295,65296,65297,65298,65299,65300,65301,65302,65303,65304,65305,65306,65307,65308,65309,65310,65311,65312,65313,65314,65315,65316,65317,65318,65319,65320,65321,65322,65323,65324,65325,65326,65327,65328,65329,65330,65331,65332,65333,65334,65335,65336,65337,65338,65339,65510,65341,65342,65343,65344,65345,65346,65347,65348,65349,65350,65351,65352,65353,65354,65355,65356,65357,65358,65359,65360,65361,65362,65363,65364,65365,65366,65367,65368,65369,65370,65371,65372,65373,65507,51678,51679,51681,51683,51685,51686,51688,51689,51690,51691,51694,51698,51699,51700,51701,51702,51703,51706,51707,51709,51710,51711,51713,51714,51715,51716,null,null,null,null,null,null,51717,51718,51719,51722,51726,51727,51728,51729,51730,51731,51733,51734,51735,51737,51738,51739,51740,51741,51742,51743,51744,51745,51746,51747,51748,51749,null,null,null,null,null,null,51750,51751,51752,51754,51755,51756,51757,51758,51759,51760,51761,51762,51763,51764,51765,51766,51767,51768,51769,51770,51771,51772,51773,51774,51775,51776,51777,51778,51779,51780,51781,51782,12593,12594,12595,12596,12597,12598,12599,12600,12601,12602,12603,12604,12605,12606,12607,12608,12609,12610,12611,12612,12613,12614,12615,12616,12617,12618,12619,12620,12621,12622,12623,12624,12625,12626,12627,12628,12629,12630,12631,12632,12633,12634,12635,12636,12637,12638,12639,12640,12641,12642,12643,12644,12645,12646,12647,12648,12649,12650,12651,12652,12653,12654,12655,12656,12657,12658,12659,12660,12661,12662,12663,12664,12665,12666,12667,12668,12669,12670,12671,12672,12673,12674,12675,12676,12677,12678,12679,12680,12681,12682,12683,12684,12685,12686,51783,51784,51785,51786,51787,51790,51791,51793,51794,51795,51797,51798,51799,51800,51801,51802,51803,51806,51810,51811,51812,51813,51814,51815,51817,51818,null,null,null,null,null,null,51819,51820,51821,51822,51823,51824,51825,51826,51827,51828,51829,51830,51831,51832,51833,51834,51835,51836,51838,51839,51840,51841,51842,51843,51845,51846,null,null,null,null,null,null,51847,51848,51849,51850,51851,51852,51853,51854,51855,51856,51857,51858,51859,51860,51861,51862,51863,51865,51866,51867,51868,51869,51870,51871,51872,51873,51874,51875,51876,51877,51878,51879,8560,8561,8562,8563,8564,8565,8566,8567,8568,8569,null,null,null,null,null,8544,8545,8546,8547,8548,8549,8550,8551,8552,8553,null,null,null,null,null,null,null,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,931,932,933,934,935,936,937,null,null,null,null,null,null,null,null,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,963,964,965,966,967,968,969,null,null,null,null,null,null,51880,51881,51882,51883,51884,51885,51886,51887,51888,51889,51890,51891,51892,51893,51894,51895,51896,51897,51898,51899,51902,51903,51905,51906,51907,51909,null,null,null,null,null,null,51910,51911,51912,51913,51914,51915,51918,51920,51922,51924,51925,51926,51927,51930,51931,51932,51933,51934,51935,51937,51938,51939,51940,51941,51942,51943,null,null,null,null,null,null,51944,51945,51946,51947,51949,51950,51951,51952,51953,51954,51955,51957,51958,51959,51960,51961,51962,51963,51964,51965,51966,51967,51968,51969,51970,51971,51972,51973,51974,51975,51977,51978,9472,9474,9484,9488,9496,9492,9500,9516,9508,9524,9532,9473,9475,9487,9491,9499,9495,9507,9523,9515,9531,9547,9504,9519,9512,9527,9535,9501,9520,9509,9528,9538,9490,9489,9498,9497,9494,9493,9486,9485,9502,9503,9505,9506,9510,9511,9513,9514,9517,9518,9521,9522,9525,9526,9529,9530,9533,9534,9536,9537,9539,9540,9541,9542,9543,9544,9545,9546,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,51979,51980,51981,51982,51983,51985,51986,51987,51989,51990,51991,51993,51994,51995,51996,51997,51998,51999,52002,52003,52004,52005,52006,52007,52008,52009,null,null,null,null,null,null,52010,52011,52012,52013,52014,52015,52016,52017,52018,52019,52020,52021,52022,52023,52024,52025,52026,52027,52028,52029,52030,52031,52032,52034,52035,52036,null,null,null,null,null,null,52037,52038,52039,52042,52043,52045,52046,52047,52049,52050,52051,52052,52053,52054,52055,52058,52059,52060,52062,52063,52064,52065,52066,52067,52069,52070,52071,52072,52073,52074,52075,52076,13205,13206,13207,8467,13208,13252,13219,13220,13221,13222,13209,13210,13211,13212,13213,13214,13215,13216,13217,13218,13258,13197,13198,13199,13263,13192,13193,13256,13223,13224,13232,13233,13234,13235,13236,13237,13238,13239,13240,13241,13184,13185,13186,13187,13188,13242,13243,13244,13245,13246,13247,13200,13201,13202,13203,13204,8486,13248,13249,13194,13195,13196,13270,13253,13229,13230,13231,13275,13225,13226,13227,13228,13277,13264,13267,13251,13257,13276,13254,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,52077,52078,52079,52080,52081,52082,52083,52084,52085,52086,52087,52090,52091,52092,52093,52094,52095,52096,52097,52098,52099,52100,52101,52102,52103,52104,null,null,null,null,null,null,52105,52106,52107,52108,52109,52110,52111,52112,52113,52114,52115,52116,52117,52118,52119,52120,52121,52122,52123,52125,52126,52127,52128,52129,52130,52131,null,null,null,null,null,null,52132,52133,52134,52135,52136,52137,52138,52139,52140,52141,52142,52143,52144,52145,52146,52147,52148,52149,52150,52151,52153,52154,52155,52156,52157,52158,52159,52160,52161,52162,52163,52164,198,208,170,294,null,306,null,319,321,216,338,186,222,358,330,null,12896,12897,12898,12899,12900,12901,12902,12903,12904,12905,12906,12907,12908,12909,12910,12911,12912,12913,12914,12915,12916,12917,12918,12919,12920,12921,12922,12923,9424,9425,9426,9427,9428,9429,9430,9431,9432,9433,9434,9435,9436,9437,9438,9439,9440,9441,9442,9443,9444,9445,9446,9447,9448,9449,9312,9313,9314,9315,9316,9317,9318,9319,9320,9321,9322,9323,9324,9325,9326,189,8531,8532,188,190,8539,8540,8541,8542,52165,52166,52167,52168,52169,52170,52171,52172,52173,52174,52175,52176,52177,52178,52179,52181,52182,52183,52184,52185,52186,52187,52188,52189,52190,52191,null,null,null,null,null,null,52192,52193,52194,52195,52197,52198,52200,52202,52203,52204,52205,52206,52207,52208,52209,52210,52211,52212,52213,52214,52215,52216,52217,52218,52219,52220,null,null,null,null,null,null,52221,52222,52223,52224,52225,52226,52227,52228,52229,52230,52231,52232,52233,52234,52235,52238,52239,52241,52242,52243,52245,52246,52247,52248,52249,52250,52251,52254,52255,52256,52259,52260,230,273,240,295,305,307,312,320,322,248,339,223,254,359,331,329,12800,12801,12802,12803,12804,12805,12806,12807,12808,12809,12810,12811,12812,12813,12814,12815,12816,12817,12818,12819,12820,12821,12822,12823,12824,12825,12826,12827,9372,9373,9374,9375,9376,9377,9378,9379,9380,9381,9382,9383,9384,9385,9386,9387,9388,9389,9390,9391,9392,9393,9394,9395,9396,9397,9332,9333,9334,9335,9336,9337,9338,9339,9340,9341,9342,9343,9344,9345,9346,185,178,179,8308,8319,8321,8322,8323,8324,52261,52262,52266,52267,52269,52271,52273,52274,52275,52276,52277,52278,52279,52282,52287,52288,52289,52290,52291,52294,52295,52297,52298,52299,52301,52302,null,null,null,null,null,null,52303,52304,52305,52306,52307,52310,52314,52315,52316,52317,52318,52319,52321,52322,52323,52325,52327,52329,52330,52331,52332,52333,52334,52335,52337,52338,null,null,null,null,null,null,52339,52340,52342,52343,52344,52345,52346,52347,52348,52349,52350,52351,52352,52353,52354,52355,52356,52357,52358,52359,52360,52361,52362,52363,52364,52365,52366,52367,52368,52369,52370,52371,12353,12354,12355,12356,12357,12358,12359,12360,12361,12362,12363,12364,12365,12366,12367,12368,12369,12370,12371,12372,12373,12374,12375,12376,12377,12378,12379,12380,12381,12382,12383,12384,12385,12386,12387,12388,12389,12390,12391,12392,12393,12394,12395,12396,12397,12398,12399,12400,12401,12402,12403,12404,12405,12406,12407,12408,12409,12410,12411,12412,12413,12414,12415,12416,12417,12418,12419,12420,12421,12422,12423,12424,12425,12426,12427,12428,12429,12430,12431,12432,12433,12434,12435,null,null,null,null,null,null,null,null,null,null,null,52372,52373,52374,52375,52378,52379,52381,52382,52383,52385,52386,52387,52388,52389,52390,52391,52394,52398,52399,52400,52401,52402,52403,52406,52407,52409,null,null,null,null,null,null,52410,52411,52413,52414,52415,52416,52417,52418,52419,52422,52424,52426,52427,52428,52429,52430,52431,52433,52434,52435,52437,52438,52439,52440,52441,52442,null,null,null,null,null,null,52443,52444,52445,52446,52447,52448,52449,52450,52451,52453,52454,52455,52456,52457,52458,52459,52461,52462,52463,52465,52466,52467,52468,52469,52470,52471,52472,52473,52474,52475,52476,52477,12449,12450,12451,12452,12453,12454,12455,12456,12457,12458,12459,12460,12461,12462,12463,12464,12465,12466,12467,12468,12469,12470,12471,12472,12473,12474,12475,12476,12477,12478,12479,12480,12481,12482,12483,12484,12485,12486,12487,12488,12489,12490,12491,12492,12493,12494,12495,12496,12497,12498,12499,12500,12501,12502,12503,12504,12505,12506,12507,12508,12509,12510,12511,12512,12513,12514,12515,12516,12517,12518,12519,12520,12521,12522,12523,12524,12525,12526,12527,12528,12529,12530,12531,12532,12533,12534,null,null,null,null,null,null,null,null,52478,52479,52480,52482,52483,52484,52485,52486,52487,52490,52491,52493,52494,52495,52497,52498,52499,52500,52501,52502,52503,52506,52508,52510,52511,52512,null,null,null,null,null,null,52513,52514,52515,52517,52518,52519,52521,52522,52523,52525,52526,52527,52528,52529,52530,52531,52532,52533,52534,52535,52536,52538,52539,52540,52541,52542,null,null,null,null,null,null,52543,52544,52545,52546,52547,52548,52549,52550,52551,52552,52553,52554,52555,52556,52557,52558,52559,52560,52561,52562,52563,52564,52565,52566,52567,52568,52569,52570,52571,52573,52574,52575,1040,1041,1042,1043,1044,1045,1025,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1072,1073,1074,1075,1076,1077,1105,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,null,null,null,null,null,null,null,null,null,null,null,null,null,52577,52578,52579,52581,52582,52583,52584,52585,52586,52587,52590,52592,52594,52595,52596,52597,52598,52599,52601,52602,52603,52604,52605,52606,52607,52608,null,null,null,null,null,null,52609,52610,52611,52612,52613,52614,52615,52617,52618,52619,52620,52621,52622,52623,52624,52625,52626,52627,52630,52631,52633,52634,52635,52637,52638,52639,null,null,null,null,null,null,52640,52641,52642,52643,52646,52648,52650,52651,52652,52653,52654,52655,52657,52658,52659,52660,52661,52662,52663,52664,52665,52666,52667,52668,52669,52670,52671,52672,52673,52674,52675,52677,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,52678,52679,52680,52681,52682,52683,52685,52686,52687,52689,52690,52691,52692,52693,52694,52695,52696,52697,52698,52699,52700,52701,52702,52703,52704,52705,null,null,null,null,null,null,52706,52707,52708,52709,52710,52711,52713,52714,52715,52717,52718,52719,52721,52722,52723,52724,52725,52726,52727,52730,52732,52734,52735,52736,52737,52738,null,null,null,null,null,null,52739,52741,52742,52743,52745,52746,52747,52749,52750,52751,52752,52753,52754,52755,52757,52758,52759,52760,52762,52763,52764,52765,52766,52767,52770,52771,52773,52774,52775,52777,52778,52779,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,52780,52781,52782,52783,52786,52788,52790,52791,52792,52793,52794,52795,52796,52797,52798,52799,52800,52801,52802,52803,52804,52805,52806,52807,52808,52809,null,null,null,null,null,null,52810,52811,52812,52813,52814,52815,52816,52817,52818,52819,52820,52821,52822,52823,52826,52827,52829,52830,52834,52835,52836,52837,52838,52839,52842,52844,null,null,null,null,null,null,52846,52847,52848,52849,52850,52851,52854,52855,52857,52858,52859,52861,52862,52863,52864,52865,52866,52867,52870,52872,52874,52875,52876,52877,52878,52879,52882,52883,52885,52886,52887,52889,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,52890,52891,52892,52893,52894,52895,52898,52902,52903,52904,52905,52906,52907,52910,52911,52912,52913,52914,52915,52916,52917,52918,52919,52920,52921,52922,null,null,null,null,null,null,52923,52924,52925,52926,52927,52928,52930,52931,52932,52933,52934,52935,52936,52937,52938,52939,52940,52941,52942,52943,52944,52945,52946,52947,52948,52949,null,null,null,null,null,null,52950,52951,52952,52953,52954,52955,52956,52957,52958,52959,52960,52961,52962,52963,52966,52967,52969,52970,52973,52974,52975,52976,52977,52978,52979,52982,52986,52987,52988,52989,52990,52991,44032,44033,44036,44039,44040,44041,44042,44048,44049,44050,44051,44052,44053,44054,44055,44057,44058,44059,44060,44061,44064,44068,44076,44077,44079,44080,44081,44088,44089,44092,44096,44107,44109,44116,44120,44124,44144,44145,44148,44151,44152,44154,44160,44161,44163,44164,44165,44166,44169,44170,44171,44172,44176,44180,44188,44189,44191,44192,44193,44200,44201,44202,44204,44207,44208,44216,44217,44219,44220,44221,44225,44228,44232,44236,44245,44247,44256,44257,44260,44263,44264,44266,44268,44271,44272,44273,44275,44277,44278,44284,44285,44288,44292,44294,52994,52995,52997,52998,52999,53001,53002,53003,53004,53005,53006,53007,53010,53012,53014,53015,53016,53017,53018,53019,53021,53022,53023,53025,53026,53027,null,null,null,null,null,null,53029,53030,53031,53032,53033,53034,53035,53038,53042,53043,53044,53045,53046,53047,53049,53050,53051,53052,53053,53054,53055,53056,53057,53058,53059,53060,null,null,null,null,null,null,53061,53062,53063,53064,53065,53066,53067,53068,53069,53070,53071,53072,53073,53074,53075,53078,53079,53081,53082,53083,53085,53086,53087,53088,53089,53090,53091,53094,53096,53098,53099,53100,44300,44301,44303,44305,44312,44316,44320,44329,44332,44333,44340,44341,44344,44348,44356,44357,44359,44361,44368,44372,44376,44385,44387,44396,44397,44400,44403,44404,44405,44406,44411,44412,44413,44415,44417,44418,44424,44425,44428,44432,44444,44445,44452,44471,44480,44481,44484,44488,44496,44497,44499,44508,44512,44516,44536,44537,44540,44543,44544,44545,44552,44553,44555,44557,44564,44592,44593,44596,44599,44600,44602,44608,44609,44611,44613,44614,44618,44620,44621,44622,44624,44628,44630,44636,44637,44639,44640,44641,44645,44648,44649,44652,44656,44664,53101,53102,53103,53106,53107,53109,53110,53111,53113,53114,53115,53116,53117,53118,53119,53121,53122,53123,53124,53126,53127,53128,53129,53130,53131,53133,null,null,null,null,null,null,53134,53135,53136,53137,53138,53139,53140,53141,53142,53143,53144,53145,53146,53147,53148,53149,53150,53151,53152,53154,53155,53156,53157,53158,53159,53161,null,null,null,null,null,null,53162,53163,53164,53165,53166,53167,53169,53170,53171,53172,53173,53174,53175,53176,53177,53178,53179,53180,53181,53182,53183,53184,53185,53186,53187,53189,53190,53191,53192,53193,53194,53195,44665,44667,44668,44669,44676,44677,44684,44732,44733,44734,44736,44740,44748,44749,44751,44752,44753,44760,44761,44764,44776,44779,44781,44788,44792,44796,44807,44808,44813,44816,44844,44845,44848,44850,44852,44860,44861,44863,44865,44866,44867,44872,44873,44880,44892,44893,44900,44901,44921,44928,44932,44936,44944,44945,44949,44956,44984,44985,44988,44992,44999,45e3,45001,45003,45005,45006,45012,45020,45032,45033,45040,45041,45044,45048,45056,45057,45060,45068,45072,45076,45084,45085,45096,45124,45125,45128,45130,45132,45134,45139,45140,45141,45143,45145,53196,53197,53198,53199,53200,53201,53202,53203,53204,53205,53206,53207,53208,53209,53210,53211,53212,53213,53214,53215,53218,53219,53221,53222,53223,53225,null,null,null,null,null,null,53226,53227,53228,53229,53230,53231,53234,53236,53238,53239,53240,53241,53242,53243,53245,53246,53247,53249,53250,53251,53253,53254,53255,53256,53257,53258,null,null,null,null,null,null,53259,53260,53261,53262,53263,53264,53266,53267,53268,53269,53270,53271,53273,53274,53275,53276,53277,53278,53279,53280,53281,53282,53283,53284,53285,53286,53287,53288,53289,53290,53291,53292,45149,45180,45181,45184,45188,45196,45197,45199,45201,45208,45209,45210,45212,45215,45216,45217,45218,45224,45225,45227,45228,45229,45230,45231,45233,45235,45236,45237,45240,45244,45252,45253,45255,45256,45257,45264,45265,45268,45272,45280,45285,45320,45321,45323,45324,45328,45330,45331,45336,45337,45339,45340,45341,45347,45348,45349,45352,45356,45364,45365,45367,45368,45369,45376,45377,45380,45384,45392,45393,45396,45397,45400,45404,45408,45432,45433,45436,45440,45442,45448,45449,45451,45453,45458,45459,45460,45464,45468,45480,45516,45520,45524,45532,45533,53294,53295,53296,53297,53298,53299,53302,53303,53305,53306,53307,53309,53310,53311,53312,53313,53314,53315,53318,53320,53322,53323,53324,53325,53326,53327,null,null,null,null,null,null,53329,53330,53331,53333,53334,53335,53337,53338,53339,53340,53341,53342,53343,53345,53346,53347,53348,53349,53350,53351,53352,53353,53354,53355,53358,53359,null,null,null,null,null,null,53361,53362,53363,53365,53366,53367,53368,53369,53370,53371,53374,53375,53376,53378,53379,53380,53381,53382,53383,53384,53385,53386,53387,53388,53389,53390,53391,53392,53393,53394,53395,53396,45535,45544,45545,45548,45552,45561,45563,45565,45572,45573,45576,45579,45580,45588,45589,45591,45593,45600,45620,45628,45656,45660,45664,45672,45673,45684,45685,45692,45700,45701,45705,45712,45713,45716,45720,45721,45722,45728,45729,45731,45733,45734,45738,45740,45744,45748,45768,45769,45772,45776,45778,45784,45785,45787,45789,45794,45796,45797,45798,45800,45803,45804,45805,45806,45807,45811,45812,45813,45815,45816,45817,45818,45819,45823,45824,45825,45828,45832,45840,45841,45843,45844,45845,45852,45908,45909,45910,45912,45915,45916,45918,45919,45924,45925,53397,53398,53399,53400,53401,53402,53403,53404,53405,53406,53407,53408,53409,53410,53411,53414,53415,53417,53418,53419,53421,53422,53423,53424,53425,53426,null,null,null,null,null,null,53427,53430,53432,53434,53435,53436,53437,53438,53439,53442,53443,53445,53446,53447,53450,53451,53452,53453,53454,53455,53458,53462,53463,53464,53465,53466,null,null,null,null,null,null,53467,53470,53471,53473,53474,53475,53477,53478,53479,53480,53481,53482,53483,53486,53490,53491,53492,53493,53494,53495,53497,53498,53499,53500,53501,53502,53503,53504,53505,53506,53507,53508,45927,45929,45931,45934,45936,45937,45940,45944,45952,45953,45955,45956,45957,45964,45968,45972,45984,45985,45992,45996,46020,46021,46024,46027,46028,46030,46032,46036,46037,46039,46041,46043,46045,46048,46052,46056,46076,46096,46104,46108,46112,46120,46121,46123,46132,46160,46161,46164,46168,46176,46177,46179,46181,46188,46208,46216,46237,46244,46248,46252,46261,46263,46265,46272,46276,46280,46288,46293,46300,46301,46304,46307,46308,46310,46316,46317,46319,46321,46328,46356,46357,46360,46363,46364,46372,46373,46375,46376,46377,46378,46384,46385,46388,46392,53509,53510,53511,53512,53513,53514,53515,53516,53518,53519,53520,53521,53522,53523,53524,53525,53526,53527,53528,53529,53530,53531,53532,53533,53534,53535,null,null,null,null,null,null,53536,53537,53538,53539,53540,53541,53542,53543,53544,53545,53546,53547,53548,53549,53550,53551,53554,53555,53557,53558,53559,53561,53563,53564,53565,53566,null,null,null,null,null,null,53567,53570,53574,53575,53576,53577,53578,53579,53582,53583,53585,53586,53587,53589,53590,53591,53592,53593,53594,53595,53598,53600,53602,53603,53604,53605,53606,53607,53609,53610,53611,53613,46400,46401,46403,46404,46405,46411,46412,46413,46416,46420,46428,46429,46431,46432,46433,46496,46497,46500,46504,46506,46507,46512,46513,46515,46516,46517,46523,46524,46525,46528,46532,46540,46541,46543,46544,46545,46552,46572,46608,46609,46612,46616,46629,46636,46644,46664,46692,46696,46748,46749,46752,46756,46763,46764,46769,46804,46832,46836,46840,46848,46849,46853,46888,46889,46892,46895,46896,46904,46905,46907,46916,46920,46924,46932,46933,46944,46948,46952,46960,46961,46963,46965,46972,46973,46976,46980,46988,46989,46991,46992,46993,46994,46998,46999,53614,53615,53616,53617,53618,53619,53620,53621,53622,53623,53624,53625,53626,53627,53629,53630,53631,53632,53633,53634,53635,53637,53638,53639,53641,53642,null,null,null,null,null,null,53643,53644,53645,53646,53647,53648,53649,53650,53651,53652,53653,53654,53655,53656,53657,53658,53659,53660,53661,53662,53663,53666,53667,53669,53670,53671,null,null,null,null,null,null,53673,53674,53675,53676,53677,53678,53679,53682,53684,53686,53687,53688,53689,53691,53693,53694,53695,53697,53698,53699,53700,53701,53702,53703,53704,53705,53706,53707,53708,53709,53710,53711,47e3,47001,47004,47008,47016,47017,47019,47020,47021,47028,47029,47032,47047,47049,47084,47085,47088,47092,47100,47101,47103,47104,47105,47111,47112,47113,47116,47120,47128,47129,47131,47133,47140,47141,47144,47148,47156,47157,47159,47160,47161,47168,47172,47185,47187,47196,47197,47200,47204,47212,47213,47215,47217,47224,47228,47245,47272,47280,47284,47288,47296,47297,47299,47301,47308,47312,47316,47325,47327,47329,47336,47337,47340,47344,47352,47353,47355,47357,47364,47384,47392,47420,47421,47424,47428,47436,47439,47441,47448,47449,47452,47456,47464,47465,53712,53713,53714,53715,53716,53717,53718,53719,53721,53722,53723,53724,53725,53726,53727,53728,53729,53730,53731,53732,53733,53734,53735,53736,53737,53738,null,null,null,null,null,null,53739,53740,53741,53742,53743,53744,53745,53746,53747,53749,53750,53751,53753,53754,53755,53756,53757,53758,53759,53760,53761,53762,53763,53764,53765,53766,null,null,null,null,null,null,53768,53770,53771,53772,53773,53774,53775,53777,53778,53779,53780,53781,53782,53783,53784,53785,53786,53787,53788,53789,53790,53791,53792,53793,53794,53795,53796,53797,53798,53799,53800,53801,47467,47469,47476,47477,47480,47484,47492,47493,47495,47497,47498,47501,47502,47532,47533,47536,47540,47548,47549,47551,47553,47560,47561,47564,47566,47567,47568,47569,47570,47576,47577,47579,47581,47582,47585,47587,47588,47589,47592,47596,47604,47605,47607,47608,47609,47610,47616,47617,47624,47637,47672,47673,47676,47680,47682,47688,47689,47691,47693,47694,47699,47700,47701,47704,47708,47716,47717,47719,47720,47721,47728,47729,47732,47736,47747,47748,47749,47751,47756,47784,47785,47787,47788,47792,47794,47800,47801,47803,47805,47812,47816,47832,47833,47868,53802,53803,53806,53807,53809,53810,53811,53813,53814,53815,53816,53817,53818,53819,53822,53824,53826,53827,53828,53829,53830,53831,53833,53834,53835,53836,null,null,null,null,null,null,53837,53838,53839,53840,53841,53842,53843,53844,53845,53846,53847,53848,53849,53850,53851,53853,53854,53855,53856,53857,53858,53859,53861,53862,53863,53864,null,null,null,null,null,null,53865,53866,53867,53868,53869,53870,53871,53872,53873,53874,53875,53876,53877,53878,53879,53880,53881,53882,53883,53884,53885,53886,53887,53890,53891,53893,53894,53895,53897,53898,53899,53900,47872,47876,47885,47887,47889,47896,47900,47904,47913,47915,47924,47925,47926,47928,47931,47932,47933,47934,47940,47941,47943,47945,47949,47951,47952,47956,47960,47969,47971,47980,48008,48012,48016,48036,48040,48044,48052,48055,48064,48068,48072,48080,48083,48120,48121,48124,48127,48128,48130,48136,48137,48139,48140,48141,48143,48145,48148,48149,48150,48151,48152,48155,48156,48157,48158,48159,48164,48165,48167,48169,48173,48176,48177,48180,48184,48192,48193,48195,48196,48197,48201,48204,48205,48208,48221,48260,48261,48264,48267,48268,48270,48276,48277,48279,53901,53902,53903,53906,53907,53908,53910,53911,53912,53913,53914,53915,53917,53918,53919,53921,53922,53923,53925,53926,53927,53928,53929,53930,53931,53933,null,null,null,null,null,null,53934,53935,53936,53938,53939,53940,53941,53942,53943,53946,53947,53949,53950,53953,53955,53956,53957,53958,53959,53962,53964,53965,53966,53967,53968,53969,null,null,null,null,null,null,53970,53971,53973,53974,53975,53977,53978,53979,53981,53982,53983,53984,53985,53986,53987,53990,53991,53992,53993,53994,53995,53996,53997,53998,53999,54002,54003,54005,54006,54007,54009,54010,48281,48282,48288,48289,48292,48295,48296,48304,48305,48307,48308,48309,48316,48317,48320,48324,48333,48335,48336,48337,48341,48344,48348,48372,48373,48374,48376,48380,48388,48389,48391,48393,48400,48404,48420,48428,48448,48456,48457,48460,48464,48472,48473,48484,48488,48512,48513,48516,48519,48520,48521,48522,48528,48529,48531,48533,48537,48538,48540,48548,48560,48568,48596,48597,48600,48604,48617,48624,48628,48632,48640,48643,48645,48652,48653,48656,48660,48668,48669,48671,48708,48709,48712,48716,48718,48724,48725,48727,48729,48730,48731,48736,48737,48740,54011,54012,54013,54014,54015,54018,54020,54022,54023,54024,54025,54026,54027,54031,54033,54034,54035,54037,54039,54040,54041,54042,54043,54046,54050,54051,null,null,null,null,null,null,54052,54054,54055,54058,54059,54061,54062,54063,54065,54066,54067,54068,54069,54070,54071,54074,54078,54079,54080,54081,54082,54083,54086,54087,54088,54089,null,null,null,null,null,null,54090,54091,54092,54093,54094,54095,54096,54097,54098,54099,54100,54101,54102,54103,54104,54105,54106,54107,54108,54109,54110,54111,54112,54113,54114,54115,54116,54117,54118,54119,54120,54121,48744,48746,48752,48753,48755,48756,48757,48763,48764,48765,48768,48772,48780,48781,48783,48784,48785,48792,48793,48808,48848,48849,48852,48855,48856,48864,48867,48868,48869,48876,48897,48904,48905,48920,48921,48923,48924,48925,48960,48961,48964,48968,48976,48977,48981,49044,49072,49093,49100,49101,49104,49108,49116,49119,49121,49212,49233,49240,49244,49248,49256,49257,49296,49297,49300,49304,49312,49313,49315,49317,49324,49325,49327,49328,49331,49332,49333,49334,49340,49341,49343,49344,49345,49349,49352,49353,49356,49360,49368,49369,49371,49372,49373,49380,54122,54123,54124,54125,54126,54127,54128,54129,54130,54131,54132,54133,54134,54135,54136,54137,54138,54139,54142,54143,54145,54146,54147,54149,54150,54151,null,null,null,null,null,null,54152,54153,54154,54155,54158,54162,54163,54164,54165,54166,54167,54170,54171,54173,54174,54175,54177,54178,54179,54180,54181,54182,54183,54186,54188,54190,null,null,null,null,null,null,54191,54192,54193,54194,54195,54197,54198,54199,54201,54202,54203,54205,54206,54207,54208,54209,54210,54211,54214,54215,54218,54219,54220,54221,54222,54223,54225,54226,54227,54228,54229,54230,49381,49384,49388,49396,49397,49399,49401,49408,49412,49416,49424,49429,49436,49437,49438,49439,49440,49443,49444,49446,49447,49452,49453,49455,49456,49457,49462,49464,49465,49468,49472,49480,49481,49483,49484,49485,49492,49493,49496,49500,49508,49509,49511,49512,49513,49520,49524,49528,49541,49548,49549,49550,49552,49556,49558,49564,49565,49567,49569,49573,49576,49577,49580,49584,49597,49604,49608,49612,49620,49623,49624,49632,49636,49640,49648,49649,49651,49660,49661,49664,49668,49676,49677,49679,49681,49688,49689,49692,49695,49696,49704,49705,49707,49709,54231,54233,54234,54235,54236,54237,54238,54239,54240,54242,54244,54245,54246,54247,54248,54249,54250,54251,54254,54255,54257,54258,54259,54261,54262,54263,null,null,null,null,null,null,54264,54265,54266,54267,54270,54272,54274,54275,54276,54277,54278,54279,54281,54282,54283,54284,54285,54286,54287,54288,54289,54290,54291,54292,54293,54294,null,null,null,null,null,null,54295,54296,54297,54298,54299,54300,54302,54303,54304,54305,54306,54307,54308,54309,54310,54311,54312,54313,54314,54315,54316,54317,54318,54319,54320,54321,54322,54323,54324,54325,54326,54327,49711,49713,49714,49716,49736,49744,49745,49748,49752,49760,49765,49772,49773,49776,49780,49788,49789,49791,49793,49800,49801,49808,49816,49819,49821,49828,49829,49832,49836,49837,49844,49845,49847,49849,49884,49885,49888,49891,49892,49899,49900,49901,49903,49905,49910,49912,49913,49915,49916,49920,49928,49929,49932,49933,49939,49940,49941,49944,49948,49956,49957,49960,49961,49989,50024,50025,50028,50032,50034,50040,50041,50044,50045,50052,50056,50060,50112,50136,50137,50140,50143,50144,50146,50152,50153,50157,50164,50165,50168,50184,50192,50212,50220,50224,54328,54329,54330,54331,54332,54333,54334,54335,54337,54338,54339,54341,54342,54343,54344,54345,54346,54347,54348,54349,54350,54351,54352,54353,54354,54355,null,null,null,null,null,null,54356,54357,54358,54359,54360,54361,54362,54363,54365,54366,54367,54369,54370,54371,54373,54374,54375,54376,54377,54378,54379,54380,54382,54384,54385,54386,null,null,null,null,null,null,54387,54388,54389,54390,54391,54394,54395,54397,54398,54401,54403,54404,54405,54406,54407,54410,54412,54414,54415,54416,54417,54418,54419,54421,54422,54423,54424,54425,54426,54427,54428,54429,50228,50236,50237,50248,50276,50277,50280,50284,50292,50293,50297,50304,50324,50332,50360,50364,50409,50416,50417,50420,50424,50426,50431,50432,50433,50444,50448,50452,50460,50472,50473,50476,50480,50488,50489,50491,50493,50500,50501,50504,50505,50506,50508,50509,50510,50515,50516,50517,50519,50520,50521,50525,50526,50528,50529,50532,50536,50544,50545,50547,50548,50549,50556,50557,50560,50564,50567,50572,50573,50575,50577,50581,50583,50584,50588,50592,50601,50612,50613,50616,50617,50619,50620,50621,50622,50628,50629,50630,50631,50632,50633,50634,50636,50638,54430,54431,54432,54433,54434,54435,54436,54437,54438,54439,54440,54442,54443,54444,54445,54446,54447,54448,54449,54450,54451,54452,54453,54454,54455,54456,null,null,null,null,null,null,54457,54458,54459,54460,54461,54462,54463,54464,54465,54466,54467,54468,54469,54470,54471,54472,54473,54474,54475,54477,54478,54479,54481,54482,54483,54485,null,null,null,null,null,null,54486,54487,54488,54489,54490,54491,54493,54494,54496,54497,54498,54499,54500,54501,54502,54503,54505,54506,54507,54509,54510,54511,54513,54514,54515,54516,54517,54518,54519,54521,54522,54524,50640,50641,50644,50648,50656,50657,50659,50661,50668,50669,50670,50672,50676,50678,50679,50684,50685,50686,50687,50688,50689,50693,50694,50695,50696,50700,50704,50712,50713,50715,50716,50724,50725,50728,50732,50733,50734,50736,50739,50740,50741,50743,50745,50747,50752,50753,50756,50760,50768,50769,50771,50772,50773,50780,50781,50784,50796,50799,50801,50808,50809,50812,50816,50824,50825,50827,50829,50836,50837,50840,50844,50852,50853,50855,50857,50864,50865,50868,50872,50873,50874,50880,50881,50883,50885,50892,50893,50896,50900,50908,50909,50912,50913,50920,54526,54527,54528,54529,54530,54531,54533,54534,54535,54537,54538,54539,54541,54542,54543,54544,54545,54546,54547,54550,54552,54553,54554,54555,54556,54557,null,null,null,null,null,null,54558,54559,54560,54561,54562,54563,54564,54565,54566,54567,54568,54569,54570,54571,54572,54573,54574,54575,54576,54577,54578,54579,54580,54581,54582,54583,null,null,null,null,null,null,54584,54585,54586,54587,54590,54591,54593,54594,54595,54597,54598,54599,54600,54601,54602,54603,54606,54608,54610,54611,54612,54613,54614,54615,54618,54619,54621,54622,54623,54625,54626,54627,50921,50924,50928,50936,50937,50941,50948,50949,50952,50956,50964,50965,50967,50969,50976,50977,50980,50984,50992,50993,50995,50997,50999,51004,51005,51008,51012,51018,51020,51021,51023,51025,51026,51027,51028,51029,51030,51031,51032,51036,51040,51048,51051,51060,51061,51064,51068,51069,51070,51075,51076,51077,51079,51080,51081,51082,51086,51088,51089,51092,51094,51095,51096,51098,51104,51105,51107,51108,51109,51110,51116,51117,51120,51124,51132,51133,51135,51136,51137,51144,51145,51148,51150,51152,51160,51165,51172,51176,51180,51200,51201,51204,51208,51210,54628,54630,54631,54634,54636,54638,54639,54640,54641,54642,54643,54646,54647,54649,54650,54651,54653,54654,54655,54656,54657,54658,54659,54662,54666,54667,null,null,null,null,null,null,54668,54669,54670,54671,54673,54674,54675,54676,54677,54678,54679,54680,54681,54682,54683,54684,54685,54686,54687,54688,54689,54690,54691,54692,54694,54695,null,null,null,null,null,null,54696,54697,54698,54699,54700,54701,54702,54703,54704,54705,54706,54707,54708,54709,54710,54711,54712,54713,54714,54715,54716,54717,54718,54719,54720,54721,54722,54723,54724,54725,54726,54727,51216,51217,51219,51221,51222,51228,51229,51232,51236,51244,51245,51247,51249,51256,51260,51264,51272,51273,51276,51277,51284,51312,51313,51316,51320,51322,51328,51329,51331,51333,51334,51335,51339,51340,51341,51348,51357,51359,51361,51368,51388,51389,51396,51400,51404,51412,51413,51415,51417,51424,51425,51428,51445,51452,51453,51456,51460,51461,51462,51468,51469,51471,51473,51480,51500,51508,51536,51537,51540,51544,51552,51553,51555,51564,51568,51572,51580,51592,51593,51596,51600,51608,51609,51611,51613,51648,51649,51652,51655,51656,51658,51664,51665,51667,54730,54731,54733,54734,54735,54737,54739,54740,54741,54742,54743,54746,54748,54750,54751,54752,54753,54754,54755,54758,54759,54761,54762,54763,54765,54766,null,null,null,null,null,null,54767,54768,54769,54770,54771,54774,54776,54778,54779,54780,54781,54782,54783,54786,54787,54789,54790,54791,54793,54794,54795,54796,54797,54798,54799,54802,null,null,null,null,null,null,54806,54807,54808,54809,54810,54811,54813,54814,54815,54817,54818,54819,54821,54822,54823,54824,54825,54826,54827,54828,54830,54831,54832,54833,54834,54835,54836,54837,54838,54839,54842,54843,51669,51670,51673,51674,51676,51677,51680,51682,51684,51687,51692,51693,51695,51696,51697,51704,51705,51708,51712,51720,51721,51723,51724,51725,51732,51736,51753,51788,51789,51792,51796,51804,51805,51807,51808,51809,51816,51837,51844,51864,51900,51901,51904,51908,51916,51917,51919,51921,51923,51928,51929,51936,51948,51956,51976,51984,51988,51992,52e3,52001,52033,52040,52041,52044,52048,52056,52057,52061,52068,52088,52089,52124,52152,52180,52196,52199,52201,52236,52237,52240,52244,52252,52253,52257,52258,52263,52264,52265,52268,52270,52272,52280,52281,52283,54845,54846,54847,54849,54850,54851,54852,54854,54855,54858,54860,54862,54863,54864,54866,54867,54870,54871,54873,54874,54875,54877,54878,54879,54880,54881,null,null,null,null,null,null,54882,54883,54884,54885,54886,54888,54890,54891,54892,54893,54894,54895,54898,54899,54901,54902,54903,54904,54905,54906,54907,54908,54909,54910,54911,54912,null,null,null,null,null,null,54913,54914,54916,54918,54919,54920,54921,54922,54923,54926,54927,54929,54930,54931,54933,54934,54935,54936,54937,54938,54939,54940,54942,54944,54946,54947,54948,54949,54950,54951,54953,54954,52284,52285,52286,52292,52293,52296,52300,52308,52309,52311,52312,52313,52320,52324,52326,52328,52336,52341,52376,52377,52380,52384,52392,52393,52395,52396,52397,52404,52405,52408,52412,52420,52421,52423,52425,52432,52436,52452,52460,52464,52481,52488,52489,52492,52496,52504,52505,52507,52509,52516,52520,52524,52537,52572,52576,52580,52588,52589,52591,52593,52600,52616,52628,52629,52632,52636,52644,52645,52647,52649,52656,52676,52684,52688,52712,52716,52720,52728,52729,52731,52733,52740,52744,52748,52756,52761,52768,52769,52772,52776,52784,52785,52787,52789,54955,54957,54958,54959,54961,54962,54963,54964,54965,54966,54967,54968,54970,54972,54973,54974,54975,54976,54977,54978,54979,54982,54983,54985,54986,54987,null,null,null,null,null,null,54989,54990,54991,54992,54994,54995,54997,54998,55e3,55002,55003,55004,55005,55006,55007,55009,55010,55011,55013,55014,55015,55017,55018,55019,55020,55021,null,null,null,null,null,null,55022,55023,55025,55026,55027,55028,55030,55031,55032,55033,55034,55035,55038,55039,55041,55042,55043,55045,55046,55047,55048,55049,55050,55051,55052,55053,55054,55055,55056,55058,55059,55060,52824,52825,52828,52831,52832,52833,52840,52841,52843,52845,52852,52853,52856,52860,52868,52869,52871,52873,52880,52881,52884,52888,52896,52897,52899,52900,52901,52908,52909,52929,52964,52965,52968,52971,52972,52980,52981,52983,52984,52985,52992,52993,52996,53e3,53008,53009,53011,53013,53020,53024,53028,53036,53037,53039,53040,53041,53048,53076,53077,53080,53084,53092,53093,53095,53097,53104,53105,53108,53112,53120,53125,53132,53153,53160,53168,53188,53216,53217,53220,53224,53232,53233,53235,53237,53244,53248,53252,53265,53272,53293,53300,53301,53304,53308,55061,55062,55063,55066,55067,55069,55070,55071,55073,55074,55075,55076,55077,55078,55079,55082,55084,55086,55087,55088,55089,55090,55091,55094,55095,55097,null,null,null,null,null,null,55098,55099,55101,55102,55103,55104,55105,55106,55107,55109,55110,55112,55114,55115,55116,55117,55118,55119,55122,55123,55125,55130,55131,55132,55133,55134,null,null,null,null,null,null,55135,55138,55140,55142,55143,55144,55146,55147,55149,55150,55151,55153,55154,55155,55157,55158,55159,55160,55161,55162,55163,55166,55167,55168,55170,55171,55172,55173,55174,55175,55178,55179,53316,53317,53319,53321,53328,53332,53336,53344,53356,53357,53360,53364,53372,53373,53377,53412,53413,53416,53420,53428,53429,53431,53433,53440,53441,53444,53448,53449,53456,53457,53459,53460,53461,53468,53469,53472,53476,53484,53485,53487,53488,53489,53496,53517,53552,53553,53556,53560,53562,53568,53569,53571,53572,53573,53580,53581,53584,53588,53596,53597,53599,53601,53608,53612,53628,53636,53640,53664,53665,53668,53672,53680,53681,53683,53685,53690,53692,53696,53720,53748,53752,53767,53769,53776,53804,53805,53808,53812,53820,53821,53823,53825,53832,53852,55181,55182,55183,55185,55186,55187,55188,55189,55190,55191,55194,55196,55198,55199,55200,55201,55202,55203,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,53860,53888,53889,53892,53896,53904,53905,53909,53916,53920,53924,53932,53937,53944,53945,53948,53951,53952,53954,53960,53961,53963,53972,53976,53980,53988,53989,54e3,54001,54004,54008,54016,54017,54019,54021,54028,54029,54030,54032,54036,54038,54044,54045,54047,54048,54049,54053,54056,54057,54060,54064,54072,54073,54075,54076,54077,54084,54085,54140,54141,54144,54148,54156,54157,54159,54160,54161,54168,54169,54172,54176,54184,54185,54187,54189,54196,54200,54204,54212,54213,54216,54217,54224,54232,54241,54243,54252,54253,54256,54260,54268,54269,54271,54273,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,54280,54301,54336,54340,54364,54368,54372,54381,54383,54392,54393,54396,54399,54400,54402,54408,54409,54411,54413,54420,54441,54476,54480,54484,54492,54495,54504,54508,54512,54520,54523,54525,54532,54536,54540,54548,54549,54551,54588,54589,54592,54596,54604,54605,54607,54609,54616,54617,54620,54624,54629,54632,54633,54635,54637,54644,54645,54648,54652,54660,54661,54663,54664,54665,54672,54693,54728,54729,54732,54736,54738,54744,54745,54747,54749,54756,54757,54760,54764,54772,54773,54775,54777,54784,54785,54788,54792,54800,54801,54803,54804,54805,54812,54816,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,54820,54829,54840,54841,54844,54848,54853,54856,54857,54859,54861,54865,54868,54869,54872,54876,54887,54889,54896,54897,54900,54915,54917,54924,54925,54928,54932,54941,54943,54945,54952,54956,54960,54969,54971,54980,54981,54984,54988,54993,54996,54999,55001,55008,55012,55016,55024,55029,55036,55037,55040,55044,55057,55064,55065,55068,55072,55080,55081,55083,55085,55092,55093,55096,55100,55108,55111,55113,55120,55121,55124,55126,55127,55128,55129,55136,55137,55139,55141,55145,55148,55152,55156,55164,55165,55169,55176,55177,55180,55184,55192,55193,55195,55197,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,20285,20339,20551,20729,21152,21487,21621,21733,22025,23233,23478,26247,26550,26551,26607,27468,29634,30146,31292,33499,33540,34903,34952,35382,36040,36303,36603,36838,39381,21051,21364,21508,24682,24932,27580,29647,33050,35258,35282,38307,20355,21002,22718,22904,23014,24178,24185,25031,25536,26438,26604,26751,28567,30286,30475,30965,31240,31487,31777,32925,33390,33393,35563,38291,20075,21917,26359,28212,30883,31469,33883,35088,34638,38824,21208,22350,22570,23884,24863,25022,25121,25954,26577,27204,28187,29976,30131,30435,30640,32058,37039,37969,37970,40853,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,21283,23724,30002,32987,37440,38296,21083,22536,23004,23713,23831,24247,24378,24394,24951,27743,30074,30086,31968,32115,32177,32652,33108,33313,34193,35137,35611,37628,38477,40007,20171,20215,20491,20977,22607,24887,24894,24936,25913,27114,28433,30117,30342,30422,31623,33445,33995,63744,37799,38283,21888,23458,22353,63745,31923,32697,37301,20520,21435,23621,24040,25298,25454,25818,25831,28192,28844,31067,36317,36382,63746,36989,37445,37624,20094,20214,20581,24062,24314,24838,26967,33137,34388,36423,37749,39467,20062,20625,26480,26688,20745,21133,21138,27298,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,30652,37392,40660,21163,24623,36850,20552,25001,25581,25802,26684,27268,28608,33160,35233,38548,22533,29309,29356,29956,32121,32365,32937,35211,35700,36963,40273,25225,27770,28500,32080,32570,35363,20860,24906,31645,35609,37463,37772,20140,20435,20510,20670,20742,21185,21197,21375,22384,22659,24218,24465,24950,25004,25806,25964,26223,26299,26356,26775,28039,28805,28913,29855,29861,29898,30169,30828,30956,31455,31478,32069,32147,32789,32831,33051,33686,35686,36629,36885,37857,38915,38968,39514,39912,20418,21843,22586,22865,23395,23622,24760,25106,26690,26800,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,26856,28330,30028,30328,30926,31293,31995,32363,32380,35336,35489,35903,38542,40388,21476,21481,21578,21617,22266,22993,23396,23611,24235,25335,25911,25925,25970,26272,26543,27073,27837,30204,30352,30590,31295,32660,32771,32929,33167,33510,33533,33776,34241,34865,34996,35493,63747,36764,37678,38599,39015,39640,40723,21741,26011,26354,26767,31296,35895,40288,22256,22372,23825,26118,26801,26829,28414,29736,34974,39908,27752,63748,39592,20379,20844,20849,21151,23380,24037,24656,24685,25329,25511,25915,29657,31354,34467,36002,38799,20018,23521,25096,26524,29916,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,31185,33747,35463,35506,36328,36942,37707,38982,24275,27112,34303,37101,63749,20896,23448,23532,24931,26874,27454,28748,29743,29912,31649,32592,33733,35264,36011,38364,39208,21038,24669,25324,36866,20362,20809,21281,22745,24291,26336,27960,28826,29378,29654,31568,33009,37979,21350,25499,32619,20054,20608,22602,22750,24618,24871,25296,27088,39745,23439,32024,32945,36703,20132,20689,21676,21932,23308,23968,24039,25898,25934,26657,27211,29409,30350,30703,32094,32761,33184,34126,34527,36611,36686,37066,39171,39509,39851,19992,20037,20061,20167,20465,20855,21246,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,21312,21475,21477,21646,22036,22389,22434,23495,23943,24272,25084,25304,25937,26552,26601,27083,27472,27590,27628,27714,28317,28792,29399,29590,29699,30655,30697,31350,32127,32777,33276,33285,33290,33503,34914,35635,36092,36544,36881,37041,37476,37558,39378,39493,40169,40407,40860,22283,23616,33738,38816,38827,40628,21531,31384,32676,35033,36557,37089,22528,23624,25496,31391,23470,24339,31353,31406,33422,36524,20518,21048,21240,21367,22280,25331,25458,27402,28099,30519,21413,29527,34152,36470,38357,26426,27331,28528,35437,36556,39243,63750,26231,27512,36020,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,39740,63751,21483,22317,22862,25542,27131,29674,30789,31418,31429,31998,33909,35215,36211,36917,38312,21243,22343,30023,31584,33740,37406,63752,27224,20811,21067,21127,25119,26840,26997,38553,20677,21156,21220,25027,26020,26681,27135,29822,31563,33465,33771,35250,35641,36817,39241,63753,20170,22935,25810,26129,27278,29748,31105,31165,33449,34942,34943,35167,63754,37670,20235,21450,24613,25201,27762,32026,32102,20120,20834,30684,32943,20225,20238,20854,20864,21980,22120,22331,22522,22524,22804,22855,22931,23492,23696,23822,24049,24190,24524,25216,26071,26083,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,26398,26399,26462,26827,26820,27231,27450,27683,27773,27778,28103,29592,29734,29738,29826,29859,30072,30079,30849,30959,31041,31047,31048,31098,31637,32e3,32186,32648,32774,32813,32908,35352,35663,35912,36215,37665,37668,39138,39249,39438,39439,39525,40594,32202,20342,21513,25326,26708,37329,21931,20794,63755,63756,23068,25062,63757,25295,25343,63758,63759,63760,63761,63762,63763,37027,63764,63765,63766,63767,63768,35582,63769,63770,63771,63772,26262,63773,29014,63774,63775,38627,63776,25423,25466,21335,63777,26511,26976,28275,63778,30007,63779,63780,63781,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,32013,63782,63783,34930,22218,23064,63784,63785,63786,63787,63788,20035,63789,20839,22856,26608,32784,63790,22899,24180,25754,31178,24565,24684,25288,25467,23527,23511,21162,63791,22900,24361,24594,63792,63793,63794,29785,63795,63796,63797,63798,63799,63800,39377,63801,63802,63803,63804,63805,63806,63807,63808,63809,63810,63811,28611,63812,63813,33215,36786,24817,63814,63815,33126,63816,63817,23615,63818,63819,63820,63821,63822,63823,63824,63825,23273,35365,26491,32016,63826,63827,63828,63829,63830,63831,33021,63832,63833,23612,27877,21311,28346,22810,33590,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,20025,20150,20294,21934,22296,22727,24406,26039,26086,27264,27573,28237,30701,31471,31774,32222,34507,34962,37170,37723,25787,28606,29562,30136,36948,21846,22349,25018,25812,26311,28129,28251,28525,28601,30192,32835,33213,34113,35203,35527,35674,37663,27795,30035,31572,36367,36957,21776,22530,22616,24162,25095,25758,26848,30070,31958,34739,40680,20195,22408,22382,22823,23565,23729,24118,24453,25140,25825,29619,33274,34955,36024,38538,40667,23429,24503,24755,20498,20992,21040,22294,22581,22615,23566,23648,23798,23947,24230,24466,24764,25361,25481,25623,26691,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,26873,27330,28120,28193,28372,28644,29182,30428,30585,31153,31291,33796,35241,36077,36339,36424,36867,36884,36947,37117,37709,38518,38876,27602,28678,29272,29346,29544,30563,31167,31716,32411,35712,22697,24775,25958,26109,26302,27788,28958,29129,35930,38931,20077,31361,20189,20908,20941,21205,21516,24999,26481,26704,26847,27934,28540,30140,30643,31461,33012,33891,37509,20828,26007,26460,26515,30168,31431,33651,63834,35910,36887,38957,23663,33216,33434,36929,36975,37389,24471,23965,27225,29128,30331,31561,34276,35588,37159,39472,21895,25078,63835,30313,32645,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,34367,34746,35064,37007,63836,27931,28889,29662,32097,33853,63837,37226,39409,63838,20098,21365,27396,27410,28734,29211,34349,40478,21068,36771,23888,25829,25900,27414,28651,31811,32412,34253,35172,35261,25289,33240,34847,24266,26391,28010,29436,29701,29807,34690,37086,20358,23821,24480,33802,20919,25504,30053,20142,20486,20841,20937,26753,27153,31918,31921,31975,33391,35538,36635,37327,20406,20791,21237,21570,24300,24942,25150,26053,27354,28670,31018,34268,34851,38317,39522,39530,40599,40654,21147,26310,27511,28701,31019,36706,38722,24976,25088,25891,28451,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,29001,29833,32244,32879,34030,36646,36899,37706,20925,21015,21155,27916,28872,35010,24265,25986,27566,28610,31806,29557,20196,20278,22265,63839,23738,23994,24604,29618,31533,32666,32718,32838,36894,37428,38646,38728,38936,40801,20363,28583,31150,37300,38583,21214,63840,25736,25796,27347,28510,28696,29200,30439,32769,34310,34396,36335,36613,38706,39791,40442,40565,30860,31103,32160,33737,37636,40575,40595,35542,22751,24324,26407,28711,29903,31840,32894,20769,28712,29282,30922,36034,36058,36084,38647,20102,20698,23534,24278,26009,29134,30274,30637,32842,34044,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,36988,39719,40845,22744,23105,23650,27155,28122,28431,30267,32047,32311,34078,35128,37860,38475,21129,26066,26611,27060,27969,28316,28687,29705,29792,30041,30244,30827,35628,39006,20845,25134,38520,20374,20523,23833,28138,32184,36650,24459,24900,26647,63841,38534,21202,32907,20956,20940,26974,31260,32190,33777,38517,20442,21033,21400,21519,21774,23653,24743,26446,26792,28012,29313,29432,29702,29827,63842,30178,31852,32633,32696,33673,35023,35041,37324,37328,38626,39881,21533,28542,29136,29848,34298,36522,38563,40023,40607,26519,28107,29747,33256,38678,30764,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,31435,31520,31890,25705,29802,30194,30908,30952,39340,39764,40635,23518,24149,28448,33180,33707,37e3,19975,21325,23081,24018,24398,24930,25405,26217,26364,28415,28459,28771,30622,33836,34067,34875,36627,39237,39995,21788,25273,26411,27819,33545,35178,38778,20129,22916,24536,24537,26395,32178,32596,33426,33579,33725,36638,37017,22475,22969,23186,23504,26151,26522,26757,27599,29028,32629,36023,36067,36993,39749,33032,35978,38476,39488,40613,23391,27667,29467,30450,30431,33804,20906,35219,20813,20885,21193,26825,27796,30468,30496,32191,32236,38754,40629,28357,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,34065,20901,21517,21629,26126,26269,26919,28319,30399,30609,33559,33986,34719,37225,37528,40180,34946,20398,20882,21215,22982,24125,24917,25720,25721,26286,26576,27169,27597,27611,29279,29281,29761,30520,30683,32791,33468,33541,35584,35624,35980,26408,27792,29287,30446,30566,31302,40361,27519,27794,22818,26406,33945,21359,22675,22937,24287,25551,26164,26483,28218,29483,31447,33495,37672,21209,24043,25006,25035,25098,25287,25771,26080,26969,27494,27595,28961,29687,30045,32326,33310,33538,34154,35491,36031,38695,40289,22696,40664,20497,21006,21563,21839,25991,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,27766,32010,32011,32862,34442,38272,38639,21247,27797,29289,21619,23194,23614,23883,24396,24494,26410,26806,26979,28220,28228,30473,31859,32654,34183,35598,36855,38753,40692,23735,24758,24845,25003,25935,26107,26108,27665,27887,29599,29641,32225,38292,23494,34588,35600,21085,21338,25293,25615,25778,26420,27192,27850,29632,29854,31636,31893,32283,33162,33334,34180,36843,38649,39361,20276,21322,21453,21467,25292,25644,25856,26001,27075,27886,28504,29677,30036,30242,30436,30460,30928,30971,31020,32070,33324,34784,36820,38930,39151,21187,25300,25765,28196,28497,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,30332,36299,37297,37474,39662,39747,20515,20621,22346,22952,23592,24135,24439,25151,25918,26041,26049,26121,26507,27036,28354,30917,32033,32938,33152,33323,33459,33953,34444,35370,35607,37030,38450,40848,20493,20467,63843,22521,24472,25308,25490,26479,28227,28953,30403,32972,32986,35060,35061,35097,36064,36649,37197,38506,20271,20336,24091,26575,26658,30333,30334,39748,24161,27146,29033,29140,30058,63844,32321,34115,34281,39132,20240,31567,32624,38309,20961,24070,26805,27710,27726,27867,29359,31684,33539,27861,29754,20731,21128,22721,25816,27287,29863,30294,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,30887,34327,38370,38713,63845,21342,24321,35722,36776,36783,37002,21029,30629,40009,40712,19993,20482,20853,23643,24183,26142,26170,26564,26821,28851,29953,30149,31177,31453,36647,39200,39432,20445,22561,22577,23542,26222,27493,27921,28282,28541,29668,29995,33769,35036,35091,35676,36628,20239,20693,21264,21340,23443,24489,26381,31119,33145,33583,34068,35079,35206,36665,36667,39333,39954,26412,20086,20472,22857,23553,23791,23792,25447,26834,28925,29090,29739,32299,34028,34562,36898,37586,40179,19981,20184,20463,20613,21078,21103,21542,21648,22496,22827,23142,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,23386,23413,23500,24220,63846,25206,25975,26023,28014,28325,29238,31526,31807,32566,33104,33105,33178,33344,33433,33705,35331,36e3,36070,36091,36212,36282,37096,37340,38428,38468,39385,40167,21271,20998,21545,22132,22707,22868,22894,24575,24996,25198,26128,27774,28954,30406,31881,31966,32027,33452,36033,38640,63847,20315,24343,24447,25282,23849,26379,26842,30844,32323,40300,19989,20633,21269,21290,21329,22915,23138,24199,24754,24970,25161,25209,26e3,26503,27047,27604,27606,27607,27608,27832,63848,29749,30202,30738,30865,31189,31192,31875,32203,32737,32933,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,33086,33218,33778,34586,35048,35513,35692,36027,37145,38750,39131,40763,22188,23338,24428,25996,27315,27567,27996,28657,28693,29277,29613,36007,36051,38971,24977,27703,32856,39425,20045,20107,20123,20181,20282,20284,20351,20447,20735,21490,21496,21766,21987,22235,22763,22882,23057,23531,23546,23556,24051,24107,24473,24605,25448,26012,26031,26614,26619,26797,27515,27801,27863,28195,28681,29509,30722,31038,31040,31072,31169,31721,32023,32114,32902,33293,33678,34001,34503,35039,35408,35422,35613,36060,36198,36781,37034,39164,39391,40605,21066,63849,26388,63850,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,20632,21034,23665,25955,27733,29642,29987,30109,31639,33948,37240,38704,20087,25746,27578,29022,34217,19977,63851,26441,26862,28183,33439,34072,34923,25591,28545,37394,39087,19978,20663,20687,20767,21830,21930,22039,23360,23577,23776,24120,24202,24224,24258,24819,26705,27233,28248,29245,29248,29376,30456,31077,31665,32724,35059,35316,35443,35937,36062,38684,22622,29885,36093,21959,63852,31329,32034,33394,29298,29983,29989,63853,31513,22661,22779,23996,24207,24246,24464,24661,25234,25471,25933,26257,26329,26360,26646,26866,29312,29790,31598,32110,32214,32626,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,32997,33298,34223,35199,35475,36893,37604,40653,40736,22805,22893,24109,24796,26132,26227,26512,27728,28101,28511,30707,30889,33990,37323,37675,20185,20682,20808,21892,23307,23459,25159,25982,26059,28210,29053,29697,29764,29831,29887,30316,31146,32218,32341,32680,33146,33203,33337,34330,34796,35445,36323,36984,37521,37925,39245,39854,21352,23633,26964,27844,27945,28203,33292,34203,35131,35373,35498,38634,40807,21089,26297,27570,32406,34814,36109,38275,38493,25885,28041,29166,63854,22478,22995,23468,24615,24826,25104,26143,26207,29481,29689,30427,30465,31596,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,32854,32882,33125,35488,37266,19990,21218,27506,27927,31237,31545,32048,63855,36016,21484,22063,22609,23477,23567,23569,24034,25152,25475,25620,26157,26803,27836,28040,28335,28703,28836,29138,29990,30095,30094,30233,31505,31712,31787,32032,32057,34092,34157,34311,35380,36877,36961,37045,37559,38902,39479,20439,23660,26463,28049,31903,32396,35606,36118,36895,23403,24061,25613,33984,36956,39137,29575,23435,24730,26494,28126,35359,35494,36865,38924,21047,63856,28753,30862,37782,34928,37335,20462,21463,22013,22234,22402,22781,23234,23432,23723,23744,24101,24833,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,25101,25163,25480,25628,25910,25976,27193,27530,27700,27929,28465,29159,29417,29560,29703,29874,30246,30561,31168,31319,31466,31929,32143,32172,32353,32670,33065,33585,33936,34010,34282,34966,35504,35728,36664,36930,36995,37228,37526,37561,38539,38567,38568,38614,38656,38920,39318,39635,39706,21460,22654,22809,23408,23487,28113,28506,29087,29729,29881,32901,33789,24033,24455,24490,24642,26092,26642,26991,27219,27529,27957,28147,29667,30462,30636,31565,32020,33059,33308,33600,34036,34147,35426,35524,37255,37662,38918,39348,25100,34899,36848,37477,23815,23847,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,23913,29791,33181,34664,28629,25342,32722,35126,35186,19998,20056,20711,21213,21319,25215,26119,32361,34821,38494,20365,21273,22070,22987,23204,23608,23630,23629,24066,24337,24643,26045,26159,26178,26558,26612,29468,30690,31034,32709,33940,33997,35222,35430,35433,35553,35925,35962,22516,23508,24335,24687,25325,26893,27542,28252,29060,31698,34645,35672,36606,39135,39166,20280,20353,20449,21627,23072,23480,24892,26032,26216,29180,30003,31070,32051,33102,33251,33688,34218,34254,34563,35338,36523,36763,63857,36805,22833,23460,23526,24713,23529,23563,24515,27777,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,63858,28145,28683,29978,33455,35574,20160,21313,63859,38617,27663,20126,20420,20818,21854,23077,23784,25105,29273,33469,33706,34558,34905,35357,38463,38597,39187,40201,40285,22538,23731,23997,24132,24801,24853,25569,27138,28197,37122,37716,38990,39952,40823,23433,23736,25353,26191,26696,30524,38593,38797,38996,39839,26017,35585,36555,38332,21813,23721,24022,24245,26263,30284,33780,38343,22739,25276,29390,40232,20208,22830,24591,26171,27523,31207,40230,21395,21696,22467,23830,24859,26326,28079,30861,33406,38552,38724,21380,25212,25494,28082,32266,33099,38989,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,27387,32588,40367,40474,20063,20539,20918,22812,24825,25590,26928,29242,32822,63860,37326,24369,63861,63862,32004,33509,33903,33979,34277,36493,63863,20335,63864,63865,22756,23363,24665,25562,25880,25965,26264,63866,26954,27171,27915,28673,29036,30162,30221,31155,31344,63867,32650,63868,35140,63869,35731,37312,38525,63870,39178,22276,24481,26044,28417,30208,31142,35486,39341,39770,40812,20740,25014,25233,27277,33222,20547,22576,24422,28937,35328,35578,23420,34326,20474,20796,22196,22852,25513,28153,23978,26989,20870,20104,20313,63871,63872,63873,22914,63874,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,63875,27487,27741,63876,29877,30998,63877,33287,33349,33593,36671,36701,63878,39192,63879,63880,63881,20134,63882,22495,24441,26131,63883,63884,30123,32377,35695,63885,36870,39515,22181,22567,23032,23071,23476,63886,24310,63887,63888,25424,25403,63889,26941,27783,27839,28046,28051,28149,28436,63890,28895,28982,29017,63891,29123,29141,63892,30799,30831,63893,31605,32227,63894,32303,63895,34893,36575,63896,63897,63898,37467,63899,40182,63900,63901,63902,24709,28037,63903,29105,63904,63905,38321,21421,63906,63907,63908,26579,63909,28814,28976,29744,33398,33490,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,63910,38331,39653,40573,26308,63911,29121,33865,63912,63913,22603,63914,63915,23992,24433,63916,26144,26254,27001,27054,27704,27891,28214,28481,28634,28699,28719,29008,29151,29552,63917,29787,63918,29908,30408,31310,32403,63919,63920,33521,35424,36814,63921,37704,63922,38681,63923,63924,20034,20522,63925,21e3,21473,26355,27757,28618,29450,30591,31330,33454,34269,34306,63926,35028,35427,35709,35947,63927,37555,63928,38675,38928,20116,20237,20425,20658,21320,21566,21555,21978,22626,22714,22887,23067,23524,24735,63929,25034,25942,26111,26212,26791,27738,28595,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,28879,29100,29522,31613,34568,35492,39986,40711,23627,27779,29508,29577,37434,28331,29797,30239,31337,32277,34314,20800,22725,25793,29934,29973,30320,32705,37013,38605,39252,28198,29926,31401,31402,33253,34521,34680,35355,23113,23436,23451,26785,26880,28003,29609,29715,29740,30871,32233,32747,33048,33109,33694,35916,38446,38929,26352,24448,26106,26505,27754,29579,20525,23043,27498,30702,22806,23916,24013,29477,30031,63930,63931,20709,20985,22575,22829,22934,23002,23525,63932,63933,23970,25303,25622,25747,25854,63934,26332,63935,27208,63936,29183,29796,63937,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,31368,31407,32327,32350,32768,33136,63938,34799,35201,35616,36953,63939,36992,39250,24958,27442,28020,32287,35109,36785,20433,20653,20887,21191,22471,22665,23481,24248,24898,27029,28044,28263,28342,29076,29794,29992,29996,32883,33592,33993,36362,37780,37854,63940,20110,20305,20598,20778,21448,21451,21491,23431,23507,23588,24858,24962,26100,29275,29591,29760,30402,31056,31121,31161,32006,32701,33419,34261,34398,36802,36935,37109,37354,38533,38632,38633,21206,24423,26093,26161,26671,29020,31286,37057,38922,20113,63941,27218,27550,28560,29065,32792,33464,34131,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,36939,38549,38642,38907,34074,39729,20112,29066,38596,20803,21407,21729,22291,22290,22435,23195,23236,23491,24616,24895,25588,27781,27961,28274,28304,29232,29503,29783,33489,34945,36677,36960,63942,38498,39e3,40219,26376,36234,37470,20301,20553,20702,21361,22285,22996,23041,23561,24944,26256,28205,29234,29771,32239,32963,33806,33894,34111,34655,34907,35096,35586,36949,38859,39759,20083,20369,20754,20842,63943,21807,21929,23418,23461,24188,24189,24254,24736,24799,24840,24841,25540,25912,26377,63944,26580,26586,63945,26977,26978,27833,27943,63946,28216,63947,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,28641,29494,29495,63948,29788,30001,63949,30290,63950,63951,32173,33278,33848,35029,35480,35547,35565,36400,36418,36938,36926,36986,37193,37321,37742,63952,63953,22537,63954,27603,32905,32946,63955,63956,20801,22891,23609,63957,63958,28516,29607,32996,36103,63959,37399,38287,63960,63961,63962,63963,32895,25102,28700,32104,34701,63964,22432,24681,24903,27575,35518,37504,38577,20057,21535,28139,34093,38512,38899,39150,25558,27875,37009,20957,25033,33210,40441,20381,20506,20736,23452,24847,25087,25836,26885,27589,30097,30691,32681,33380,34191,34811,34915,35516,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,35696,37291,20108,20197,20234,63965,63966,22839,23016,63967,24050,24347,24411,24609,63968,63969,63970,63971,29246,29669,63972,30064,30157,63973,31227,63974,32780,32819,32900,33505,33617,63975,63976,36029,36019,36999,63977,63978,39156,39180,63979,63980,28727,30410,32714,32716,32764,35610,20154,20161,20995,21360,63981,21693,22240,23035,23493,24341,24525,28270,63982,63983,32106,33589,63984,34451,35469,63985,38765,38775,63986,63987,19968,20314,20350,22777,26085,28322,36920,37808,39353,20219,22764,22922,23001,24641,63988,63989,31252,63990,33615,36035,20837,21316,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,63991,63992,63993,20173,21097,23381,33471,20180,21050,21672,22985,23039,23376,23383,23388,24675,24904,28363,28825,29038,29574,29943,30133,30913,32043,32773,33258,33576,34071,34249,35566,36039,38604,20316,21242,22204,26027,26152,28796,28856,29237,32189,33421,37196,38592,40306,23409,26855,27544,28538,30430,23697,26283,28507,31668,31786,34870,38620,19976,20183,21280,22580,22715,22767,22892,23559,24115,24196,24373,25484,26290,26454,27167,27299,27404,28479,29254,63994,29520,29835,31456,31911,33144,33247,33255,33674,33900,34083,34196,34255,35037,36115,37292,38263,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,38556,20877,21705,22312,23472,25165,26448,26685,26771,28221,28371,28797,32289,35009,36001,36617,40779,40782,29229,31631,35533,37658,20295,20302,20786,21632,22992,24213,25269,26485,26990,27159,27822,28186,29401,29482,30141,31672,32053,33511,33785,33879,34295,35419,36015,36487,36889,37048,38606,40799,21219,21514,23265,23490,25688,25973,28404,29380,63995,30340,31309,31515,31821,32318,32735,33659,35627,36042,36196,36321,36447,36842,36857,36969,37841,20291,20346,20659,20840,20856,21069,21098,22625,22652,22880,23560,23637,24283,24731,25136,26643,27583,27656,28593,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,29006,29728,3e4,30008,30033,30322,31564,31627,31661,31686,32399,35438,36670,36681,37439,37523,37666,37931,38651,39002,39019,39198,20999,25130,25240,27993,30308,31434,31680,32118,21344,23742,24215,28472,28857,31896,38673,39822,40670,25509,25722,34678,19969,20117,20141,20572,20597,21576,22979,23450,24128,24237,24311,24449,24773,25402,25919,25972,26060,26230,26232,26622,26984,27273,27491,27712,28096,28136,28191,28254,28702,28833,29582,29693,30010,30555,30855,31118,31243,31357,31934,32142,33351,35330,35562,35998,37165,37194,37336,37478,37580,37664,38662,38742,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,38748,38914,40718,21046,21137,21884,22564,24093,24351,24716,25552,26799,28639,31085,31532,33229,34234,35069,35576,36420,37261,38500,38555,38717,38988,40778,20430,20806,20939,21161,22066,24340,24427,25514,25805,26089,26177,26362,26361,26397,26781,26839,27133,28437,28526,29031,29157,29226,29866,30522,31062,31066,31199,31264,31381,31895,31967,32068,32368,32903,34299,34468,35412,35519,36249,36481,36896,36973,37347,38459,38613,40165,26063,31751,36275,37827,23384,23562,21330,25305,29469,20519,23447,24478,24752,24939,26837,28121,29742,31278,32066,32156,32305,33131,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,36394,36405,37758,37912,20304,22352,24038,24231,25387,32618,20027,20303,20367,20570,23005,32964,21610,21608,22014,22863,23449,24030,24282,26205,26417,26609,26666,27880,27954,28234,28557,28855,29664,30087,31820,32002,32044,32162,33311,34523,35387,35461,36208,36490,36659,36913,37198,37202,37956,39376,31481,31909,20426,20737,20934,22472,23535,23803,26201,27197,27994,28310,28652,28940,30063,31459,34850,36897,36981,38603,39423,33537,20013,20210,34886,37325,21373,27355,26987,27713,33914,22686,24974,26366,25327,28893,29969,30151,32338,33976,35657,36104,20043,21482,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,21675,22320,22336,24535,25345,25351,25711,25903,26088,26234,26525,26547,27490,27744,27802,28460,30693,30757,31049,31063,32025,32930,33026,33267,33437,33463,34584,35468,63996,36100,36286,36978,30452,31257,31287,32340,32887,21767,21972,22645,25391,25634,26185,26187,26733,27035,27524,27941,28337,29645,29800,29857,30043,30137,30433,30494,30603,31206,32265,32285,33275,34095,34967,35386,36049,36587,36784,36914,37805,38499,38515,38663,20356,21489,23018,23241,24089,26702,29894,30142,31209,31378,33187,34541,36074,36300,36845,26015,26389,63997,22519,28503,32221,36655,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,37878,38598,24501,25074,28548,19988,20376,20511,21449,21983,23919,24046,27425,27492,30923,31642,63998,36425,36554,36974,25417,25662,30528,31364,37679,38015,40810,25776,28591,29158,29864,29914,31428,31762,32386,31922,32408,35738,36106,38013,39184,39244,21049,23519,25830,26413,32046,20717,21443,22649,24920,24921,25082,26028,31449,35730,35734,20489,20513,21109,21809,23100,24288,24432,24884,25950,26124,26166,26274,27085,28356,28466,29462,30241,31379,33081,33369,33750,33980,20661,22512,23488,23528,24425,25505,30758,32181,33756,34081,37319,37365,20874,26613,31574,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,36012,20932,22971,24765,34389,20508,63999,21076,23610,24957,25114,25299,25842,26021,28364,30240,33034,36448,38495,38587,20191,21315,21912,22825,24029,25797,27849,28154,29588,31359,33307,34214,36068,36368,36983,37351,38369,38433,38854,20984,21746,21894,24505,25764,28552,32180,36639,36685,37941,20681,23574,27838,28155,29979,30651,31805,31844,35449,35522,22558,22974,24086,25463,29266,30090,30571,35548,36028,36626,24307,26228,28152,32893,33729,35531,38737,39894,64e3,21059,26367,28053,28399,32224,35558,36910,36958,39636,21021,21119,21736,24980,25220,25307,26786,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,26898,26970,27189,28818,28966,30813,30977,30990,31186,31245,32918,33400,33493,33609,34121,35970,36229,37218,37259,37294,20419,22225,29165,30679,34560,35320,23544,24534,26449,37032,21474,22618,23541,24740,24961,25696,32317,32880,34085,37507,25774,20652,23828,26368,22684,25277,25512,26894,27e3,27166,28267,30394,31179,33467,33833,35535,36264,36861,37138,37195,37276,37648,37656,37786,38619,39478,39949,19985,30044,31069,31482,31569,31689,32302,33988,36441,36468,36600,36880,26149,26943,29763,20986,26414,40668,20805,24544,27798,34802,34909,34935,24756,33205,33795,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,36101,21462,21561,22068,23094,23601,28810,32736,32858,33030,33261,36259,37257,39519,40434,20596,20164,21408,24827,28204,23652,20360,20516,21988,23769,24159,24677,26772,27835,28100,29118,30164,30196,30305,31258,31305,32199,32251,32622,33268,34473,36636,38601,39347,40786,21063,21189,39149,35242,19971,26578,28422,20405,23522,26517,27784,28024,29723,30759,37341,37756,34756,31204,31281,24555,20182,21668,21822,22702,22949,24816,25171,25302,26422,26965,33333,38464,39345,39389,20524,21331,21828,22396,64001,25176,64002,25826,26219,26589,28609,28655,29730,29752,35351,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,37944,21585,22022,22374,24392,24986,27470,28760,28845,32187,35477,22890,33067,25506,30472,32829,36010,22612,25645,27067,23445,24081,28271,64003,34153,20812,21488,22826,24608,24907,27526,27760,27888,31518,32974,33492,36294,37040,39089,64004,25799,28580,25745,25860,20814,21520,22303,35342,24927,26742,64005,30171,31570,32113,36890,22534,27084,33151,35114,36864,38969,20600,22871,22956,25237,36879,39722,24925,29305,38358,22369,23110,24052,25226,25773,25850,26487,27874,27966,29228,29750,30772,32631,33453,36315,38935,21028,22338,26495,29256,29923,36009,36774,37393,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,38442,20843,21485,25420,20329,21764,24726,25943,27803,28031,29260,29437,31255,35207,35997,24429,28558,28921,33192,24846,20415,20559,25153,29255,31687,32232,32745,36941,38829,39449,36022,22378,24179,26544,33805,35413,21536,23318,24163,24290,24330,25987,32954,34109,38281,38491,20296,21253,21261,21263,21638,21754,22275,24067,24598,25243,25265,25429,64006,27873,28006,30129,30770,32990,33071,33502,33889,33970,34957,35090,36875,37610,39165,39825,24133,26292,26333,28689,29190,64007,20469,21117,24426,24915,26451,27161,28418,29922,31080,34920,35961,39111,39108,39491,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,21697,31263,26963,35575,35914,39080,39342,24444,25259,30130,30382,34987,36991,38466,21305,24380,24517,27852,29644,30050,30091,31558,33534,39325,20047,36924,19979,20309,21414,22799,24264,26160,27827,29781,33655,34662,36032,36944,38686,39957,22737,23416,34384,35604,40372,23506,24680,24717,26097,27735,28450,28579,28698,32597,32752,38289,38290,38480,38867,21106,36676,20989,21547,21688,21859,21898,27323,28085,32216,33382,37532,38519,40569,21512,21704,30418,34532,38308,38356,38492,20130,20233,23022,23270,24055,24658,25239,26477,26689,27782,28207,32568,32923,33322,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,64008,64009,38917,20133,20565,21683,22419,22874,23401,23475,25032,26999,28023,28707,34809,35299,35442,35559,36994,39405,39608,21182,26680,20502,24184,26447,33607,34892,20139,21521,22190,29670,37141,38911,39177,39255,39321,22099,22687,34395,35377,25010,27382,29563,36562,27463,38570,39511,22869,29184,36203,38761,20436,23796,24358,25080,26203,27883,28843,29572,29625,29694,30505,30541,32067,32098,32291,33335,34898,64010,36066,37449,39023,23377,31348,34880,38913,23244,20448,21332,22846,23805,25406,28025,29433,33029,33031,33698,37583,38960,20136,20804,21009,22411,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,24418,27842,28366,28677,28752,28847,29074,29673,29801,33610,34722,34913,36872,37026,37795,39336,20846,24407,24800,24935,26291,34137,36426,37295,38795,20046,20114,21628,22741,22778,22909,23733,24359,25142,25160,26122,26215,27627,28009,28111,28246,28408,28564,28640,28649,28765,29392,29733,29786,29920,30355,31068,31946,32286,32993,33446,33899,33983,34382,34399,34676,35703,35946,37804,38912,39013,24785,25110,37239,23130,26127,28151,28222,29759,39746,24573,24794,31503,21700,24344,27742,27859,27946,28888,32005,34425,35340,40251,21270,21644,23301,27194,28779,30069,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,31117,31166,33457,33775,35441,35649,36008,38772,64011,25844,25899,30906,30907,31339,20024,21914,22864,23462,24187,24739,25563,27489,26213,26707,28185,29029,29872,32008,36996,39529,39973,27963,28369,29502,35905,38346,20976,24140,24488,24653,24822,24880,24908,26179,26180,27045,27841,28255,28361,28514,29004,29852,30343,31681,31783,33618,34647,36945,38541,40643,21295,22238,24315,24458,24674,24724,25079,26214,26371,27292,28142,28590,28784,29546,32362,33214,33588,34516,35496,36036,21123,29554,23446,27243,37892,21742,22150,23389,25928,25989,26313,26783,28045,28102,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,29243,32948,37237,39501,20399,20505,21402,21518,21564,21897,21957,24127,24460,26429,29030,29661,36869,21211,21235,22628,22734,28932,29071,29179,34224,35347,26248,34216,21927,26244,29002,33841,21321,21913,27585,24409,24509,25582,26249,28999,35569,36637,40638,20241,25658,28875,30054,34407,24676,35662,40440,20807,20982,21256,27958,33016,40657,26133,27427,28824,30165,21507,23673,32007,35350,27424,27453,27462,21560,24688,27965,32725,33288,20694,20958,21916,22123,22221,23020,23305,24076,24985,24984,25137,26206,26342,29081,29113,29114,29351,31143,31232,32690,35440,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],gb18030:[19970,19972,19973,19974,19983,19986,19991,19999,2e4,20001,20003,20006,20009,20014,20015,20017,20019,20021,20023,20028,20032,20033,20034,20036,20038,20042,20049,20053,20055,20058,20059,20066,20067,20068,20069,20071,20072,20074,20075,20076,20077,20078,20079,20082,20084,20085,20086,20087,20088,20089,20090,20091,20092,20093,20095,20096,20097,20098,20099,20100,20101,20103,20106,20112,20118,20119,20121,20124,20125,20126,20131,20138,20143,20144,20145,20148,20150,20151,20152,20153,20156,20157,20158,20168,20172,20175,20176,20178,20186,20187,20188,20192,20194,20198,20199,20201,20205,20206,20207,20209,20212,20216,20217,20218,20220,20222,20224,20226,20227,20228,20229,20230,20231,20232,20235,20236,20242,20243,20244,20245,20246,20252,20253,20257,20259,20264,20265,20268,20269,20270,20273,20275,20277,20279,20281,20283,20286,20287,20288,20289,20290,20292,20293,20295,20296,20297,20298,20299,20300,20306,20308,20310,20321,20322,20326,20328,20330,20331,20333,20334,20337,20338,20341,20343,20344,20345,20346,20349,20352,20353,20354,20357,20358,20359,20362,20364,20366,20368,20370,20371,20373,20374,20376,20377,20378,20380,20382,20383,20385,20386,20388,20395,20397,20400,20401,20402,20403,20404,20406,20407,20408,20409,20410,20411,20412,20413,20414,20416,20417,20418,20422,20423,20424,20425,20427,20428,20429,20434,20435,20436,20437,20438,20441,20443,20448,20450,20452,20453,20455,20459,20460,20464,20466,20468,20469,20470,20471,20473,20475,20476,20477,20479,20480,20481,20482,20483,20484,20485,20486,20487,20488,20489,20490,20491,20494,20496,20497,20499,20501,20502,20503,20507,20509,20510,20512,20514,20515,20516,20519,20523,20527,20528,20529,20530,20531,20532,20533,20534,20535,20536,20537,20539,20541,20543,20544,20545,20546,20548,20549,20550,20553,20554,20555,20557,20560,20561,20562,20563,20564,20566,20567,20568,20569,20571,20573,20574,20575,20576,20577,20578,20579,20580,20582,20583,20584,20585,20586,20587,20589,20590,20591,20592,20593,20594,20595,20596,20597,20600,20601,20602,20604,20605,20609,20610,20611,20612,20614,20615,20617,20618,20619,20620,20622,20623,20624,20625,20626,20627,20628,20629,20630,20631,20632,20633,20634,20635,20636,20637,20638,20639,20640,20641,20642,20644,20646,20650,20651,20653,20654,20655,20656,20657,20659,20660,20661,20662,20663,20664,20665,20668,20669,20670,20671,20672,20673,20674,20675,20676,20677,20678,20679,20680,20681,20682,20683,20684,20685,20686,20688,20689,20690,20691,20692,20693,20695,20696,20697,20699,20700,20701,20702,20703,20704,20705,20706,20707,20708,20709,20712,20713,20714,20715,20719,20720,20721,20722,20724,20726,20727,20728,20729,20730,20732,20733,20734,20735,20736,20737,20738,20739,20740,20741,20744,20745,20746,20748,20749,20750,20751,20752,20753,20755,20756,20757,20758,20759,20760,20761,20762,20763,20764,20765,20766,20767,20768,20770,20771,20772,20773,20774,20775,20776,20777,20778,20779,20780,20781,20782,20783,20784,20785,20786,20787,20788,20789,20790,20791,20792,20793,20794,20795,20796,20797,20798,20802,20807,20810,20812,20814,20815,20816,20818,20819,20823,20824,20825,20827,20829,20830,20831,20832,20833,20835,20836,20838,20839,20841,20842,20847,20850,20858,20862,20863,20867,20868,20870,20871,20874,20875,20878,20879,20880,20881,20883,20884,20888,20890,20893,20894,20895,20897,20899,20902,20903,20904,20905,20906,20909,20910,20916,20920,20921,20922,20926,20927,20929,20930,20931,20933,20936,20938,20941,20942,20944,20946,20947,20948,20949,20950,20951,20952,20953,20954,20956,20958,20959,20962,20963,20965,20966,20967,20968,20969,20970,20972,20974,20977,20978,20980,20983,20990,20996,20997,21001,21003,21004,21007,21008,21011,21012,21013,21020,21022,21023,21025,21026,21027,21029,21030,21031,21034,21036,21039,21041,21042,21044,21045,21052,21054,21060,21061,21062,21063,21064,21065,21067,21070,21071,21074,21075,21077,21079,21080,21081,21082,21083,21085,21087,21088,21090,21091,21092,21094,21096,21099,21100,21101,21102,21104,21105,21107,21108,21109,21110,21111,21112,21113,21114,21115,21116,21118,21120,21123,21124,21125,21126,21127,21129,21130,21131,21132,21133,21134,21135,21137,21138,21140,21141,21142,21143,21144,21145,21146,21148,21156,21157,21158,21159,21166,21167,21168,21172,21173,21174,21175,21176,21177,21178,21179,21180,21181,21184,21185,21186,21188,21189,21190,21192,21194,21196,21197,21198,21199,21201,21203,21204,21205,21207,21209,21210,21211,21212,21213,21214,21216,21217,21218,21219,21221,21222,21223,21224,21225,21226,21227,21228,21229,21230,21231,21233,21234,21235,21236,21237,21238,21239,21240,21243,21244,21245,21249,21250,21251,21252,21255,21257,21258,21259,21260,21262,21265,21266,21267,21268,21272,21275,21276,21278,21279,21282,21284,21285,21287,21288,21289,21291,21292,21293,21295,21296,21297,21298,21299,21300,21301,21302,21303,21304,21308,21309,21312,21314,21316,21318,21323,21324,21325,21328,21332,21336,21337,21339,21341,21349,21352,21354,21356,21357,21362,21366,21369,21371,21372,21373,21374,21376,21377,21379,21383,21384,21386,21390,21391,21392,21393,21394,21395,21396,21398,21399,21401,21403,21404,21406,21408,21409,21412,21415,21418,21419,21420,21421,21423,21424,21425,21426,21427,21428,21429,21431,21432,21433,21434,21436,21437,21438,21440,21443,21444,21445,21446,21447,21454,21455,21456,21458,21459,21461,21466,21468,21469,21470,21473,21474,21479,21492,21498,21502,21503,21504,21506,21509,21511,21515,21524,21528,21529,21530,21532,21538,21540,21541,21546,21552,21555,21558,21559,21562,21565,21567,21569,21570,21572,21573,21575,21577,21580,21581,21582,21583,21585,21594,21597,21598,21599,21600,21601,21603,21605,21607,21609,21610,21611,21612,21613,21614,21615,21616,21620,21625,21626,21630,21631,21633,21635,21637,21639,21640,21641,21642,21645,21649,21651,21655,21656,21660,21662,21663,21664,21665,21666,21669,21678,21680,21682,21685,21686,21687,21689,21690,21692,21694,21699,21701,21706,21707,21718,21720,21723,21728,21729,21730,21731,21732,21739,21740,21743,21744,21745,21748,21749,21750,21751,21752,21753,21755,21758,21760,21762,21763,21764,21765,21768,21770,21771,21772,21773,21774,21778,21779,21781,21782,21783,21784,21785,21786,21788,21789,21790,21791,21793,21797,21798,21800,21801,21803,21805,21810,21812,21813,21814,21816,21817,21818,21819,21821,21824,21826,21829,21831,21832,21835,21836,21837,21838,21839,21841,21842,21843,21844,21847,21848,21849,21850,21851,21853,21854,21855,21856,21858,21859,21864,21865,21867,21871,21872,21873,21874,21875,21876,21881,21882,21885,21887,21893,21894,21900,21901,21902,21904,21906,21907,21909,21910,21911,21914,21915,21918,21920,21921,21922,21923,21924,21925,21926,21928,21929,21930,21931,21932,21933,21934,21935,21936,21938,21940,21942,21944,21946,21948,21951,21952,21953,21954,21955,21958,21959,21960,21962,21963,21966,21967,21968,21973,21975,21976,21977,21978,21979,21982,21984,21986,21991,21993,21997,21998,22e3,22001,22004,22006,22008,22009,22010,22011,22012,22015,22018,22019,22020,22021,22022,22023,22026,22027,22029,22032,22033,22034,22035,22036,22037,22038,22039,22041,22042,22044,22045,22048,22049,22050,22053,22054,22056,22057,22058,22059,22062,22063,22064,22067,22069,22071,22072,22074,22076,22077,22078,22080,22081,22082,22083,22084,22085,22086,22087,22088,22089,22090,22091,22095,22096,22097,22098,22099,22101,22102,22106,22107,22109,22110,22111,22112,22113,22115,22117,22118,22119,22125,22126,22127,22128,22130,22131,22132,22133,22135,22136,22137,22138,22141,22142,22143,22144,22145,22146,22147,22148,22151,22152,22153,22154,22155,22156,22157,22160,22161,22162,22164,22165,22166,22167,22168,22169,22170,22171,22172,22173,22174,22175,22176,22177,22178,22180,22181,22182,22183,22184,22185,22186,22187,22188,22189,22190,22192,22193,22194,22195,22196,22197,22198,22200,22201,22202,22203,22205,22206,22207,22208,22209,22210,22211,22212,22213,22214,22215,22216,22217,22219,22220,22221,22222,22223,22224,22225,22226,22227,22229,22230,22232,22233,22236,22243,22245,22246,22247,22248,22249,22250,22252,22254,22255,22258,22259,22262,22263,22264,22267,22268,22272,22273,22274,22277,22279,22283,22284,22285,22286,22287,22288,22289,22290,22291,22292,22293,22294,22295,22296,22297,22298,22299,22301,22302,22304,22305,22306,22308,22309,22310,22311,22315,22321,22322,22324,22325,22326,22327,22328,22332,22333,22335,22337,22339,22340,22341,22342,22344,22345,22347,22354,22355,22356,22357,22358,22360,22361,22370,22371,22373,22375,22380,22382,22384,22385,22386,22388,22389,22392,22393,22394,22397,22398,22399,22400,22401,22407,22408,22409,22410,22413,22414,22415,22416,22417,22420,22421,22422,22423,22424,22425,22426,22428,22429,22430,22431,22437,22440,22442,22444,22447,22448,22449,22451,22453,22454,22455,22457,22458,22459,22460,22461,22462,22463,22464,22465,22468,22469,22470,22471,22472,22473,22474,22476,22477,22480,22481,22483,22486,22487,22491,22492,22494,22497,22498,22499,22501,22502,22503,22504,22505,22506,22507,22508,22510,22512,22513,22514,22515,22517,22518,22519,22523,22524,22526,22527,22529,22531,22532,22533,22536,22537,22538,22540,22542,22543,22544,22546,22547,22548,22550,22551,22552,22554,22555,22556,22557,22559,22562,22563,22565,22566,22567,22568,22569,22571,22572,22573,22574,22575,22577,22578,22579,22580,22582,22583,22584,22585,22586,22587,22588,22589,22590,22591,22592,22593,22594,22595,22597,22598,22599,22600,22601,22602,22603,22606,22607,22608,22610,22611,22613,22614,22615,22617,22618,22619,22620,22621,22623,22624,22625,22626,22627,22628,22630,22631,22632,22633,22634,22637,22638,22639,22640,22641,22642,22643,22644,22645,22646,22647,22648,22649,22650,22651,22652,22653,22655,22658,22660,22662,22663,22664,22666,22667,22668,22669,22670,22671,22672,22673,22676,22677,22678,22679,22680,22683,22684,22685,22688,22689,22690,22691,22692,22693,22694,22695,22698,22699,22700,22701,22702,22703,22704,22705,22706,22707,22708,22709,22710,22711,22712,22713,22714,22715,22717,22718,22719,22720,22722,22723,22724,22726,22727,22728,22729,22730,22731,22732,22733,22734,22735,22736,22738,22739,22740,22742,22743,22744,22745,22746,22747,22748,22749,22750,22751,22752,22753,22754,22755,22757,22758,22759,22760,22761,22762,22765,22767,22769,22770,22772,22773,22775,22776,22778,22779,22780,22781,22782,22783,22784,22785,22787,22789,22790,22792,22793,22794,22795,22796,22798,22800,22801,22802,22803,22807,22808,22811,22813,22814,22816,22817,22818,22819,22822,22824,22828,22832,22834,22835,22837,22838,22843,22845,22846,22847,22848,22851,22853,22854,22858,22860,22861,22864,22866,22867,22873,22875,22876,22877,22878,22879,22881,22883,22884,22886,22887,22888,22889,22890,22891,22892,22893,22894,22895,22896,22897,22898,22901,22903,22906,22907,22908,22910,22911,22912,22917,22921,22923,22924,22926,22927,22928,22929,22932,22933,22936,22938,22939,22940,22941,22943,22944,22945,22946,22950,22951,22956,22957,22960,22961,22963,22964,22965,22966,22967,22968,22970,22972,22973,22975,22976,22977,22978,22979,22980,22981,22983,22984,22985,22988,22989,22990,22991,22997,22998,23001,23003,23006,23007,23008,23009,23010,23012,23014,23015,23017,23018,23019,23021,23022,23023,23024,23025,23026,23027,23028,23029,23030,23031,23032,23034,23036,23037,23038,23040,23042,23050,23051,23053,23054,23055,23056,23058,23060,23061,23062,23063,23065,23066,23067,23069,23070,23073,23074,23076,23078,23079,23080,23082,23083,23084,23085,23086,23087,23088,23091,23093,23095,23096,23097,23098,23099,23101,23102,23103,23105,23106,23107,23108,23109,23111,23112,23115,23116,23117,23118,23119,23120,23121,23122,23123,23124,23126,23127,23128,23129,23131,23132,23133,23134,23135,23136,23137,23139,23140,23141,23142,23144,23145,23147,23148,23149,23150,23151,23152,23153,23154,23155,23160,23161,23163,23164,23165,23166,23168,23169,23170,23171,23172,23173,23174,23175,23176,23177,23178,23179,23180,23181,23182,23183,23184,23185,23187,23188,23189,23190,23191,23192,23193,23196,23197,23198,23199,23200,23201,23202,23203,23204,23205,23206,23207,23208,23209,23211,23212,23213,23214,23215,23216,23217,23220,23222,23223,23225,23226,23227,23228,23229,23231,23232,23235,23236,23237,23238,23239,23240,23242,23243,23245,23246,23247,23248,23249,23251,23253,23255,23257,23258,23259,23261,23262,23263,23266,23268,23269,23271,23272,23274,23276,23277,23278,23279,23280,23282,23283,23284,23285,23286,23287,23288,23289,23290,23291,23292,23293,23294,23295,23296,23297,23298,23299,23300,23301,23302,23303,23304,23306,23307,23308,23309,23310,23311,23312,23313,23314,23315,23316,23317,23320,23321,23322,23323,23324,23325,23326,23327,23328,23329,23330,23331,23332,23333,23334,23335,23336,23337,23338,23339,23340,23341,23342,23343,23344,23345,23347,23349,23350,23352,23353,23354,23355,23356,23357,23358,23359,23361,23362,23363,23364,23365,23366,23367,23368,23369,23370,23371,23372,23373,23374,23375,23378,23382,23390,23392,23393,23399,23400,23403,23405,23406,23407,23410,23412,23414,23415,23416,23417,23419,23420,23422,23423,23426,23430,23434,23437,23438,23440,23441,23442,23444,23446,23455,23463,23464,23465,23468,23469,23470,23471,23473,23474,23479,23482,23483,23484,23488,23489,23491,23496,23497,23498,23499,23501,23502,23503,23505,23508,23509,23510,23511,23512,23513,23514,23515,23516,23520,23522,23523,23526,23527,23529,23530,23531,23532,23533,23535,23537,23538,23539,23540,23541,23542,23543,23549,23550,23552,23554,23555,23557,23559,23560,23563,23564,23565,23566,23568,23570,23571,23575,23577,23579,23582,23583,23584,23585,23587,23590,23592,23593,23594,23595,23597,23598,23599,23600,23602,23603,23605,23606,23607,23619,23620,23622,23623,23628,23629,23634,23635,23636,23638,23639,23640,23642,23643,23644,23645,23647,23650,23652,23655,23656,23657,23658,23659,23660,23661,23664,23666,23667,23668,23669,23670,23671,23672,23675,23676,23677,23678,23680,23683,23684,23685,23686,23687,23689,23690,23691,23694,23695,23698,23699,23701,23709,23710,23711,23712,23713,23716,23717,23718,23719,23720,23722,23726,23727,23728,23730,23732,23734,23737,23738,23739,23740,23742,23744,23746,23747,23749,23750,23751,23752,23753,23754,23756,23757,23758,23759,23760,23761,23763,23764,23765,23766,23767,23768,23770,23771,23772,23773,23774,23775,23776,23778,23779,23783,23785,23787,23788,23790,23791,23793,23794,23795,23796,23797,23798,23799,23800,23801,23802,23804,23805,23806,23807,23808,23809,23812,23813,23816,23817,23818,23819,23820,23821,23823,23824,23825,23826,23827,23829,23831,23832,23833,23834,23836,23837,23839,23840,23841,23842,23843,23845,23848,23850,23851,23852,23855,23856,23857,23858,23859,23861,23862,23863,23864,23865,23866,23867,23868,23871,23872,23873,23874,23875,23876,23877,23878,23880,23881,23885,23886,23887,23888,23889,23890,23891,23892,23893,23894,23895,23897,23898,23900,23902,23903,23904,23905,23906,23907,23908,23909,23910,23911,23912,23914,23917,23918,23920,23921,23922,23923,23925,23926,23927,23928,23929,23930,23931,23932,23933,23934,23935,23936,23937,23939,23940,23941,23942,23943,23944,23945,23946,23947,23948,23949,23950,23951,23952,23953,23954,23955,23956,23957,23958,23959,23960,23962,23963,23964,23966,23967,23968,23969,23970,23971,23972,23973,23974,23975,23976,23977,23978,23979,23980,23981,23982,23983,23984,23985,23986,23987,23988,23989,23990,23992,23993,23994,23995,23996,23997,23998,23999,24e3,24001,24002,24003,24004,24006,24007,24008,24009,24010,24011,24012,24014,24015,24016,24017,24018,24019,24020,24021,24022,24023,24024,24025,24026,24028,24031,24032,24035,24036,24042,24044,24045,24048,24053,24054,24056,24057,24058,24059,24060,24063,24064,24068,24071,24073,24074,24075,24077,24078,24082,24083,24087,24094,24095,24096,24097,24098,24099,24100,24101,24104,24105,24106,24107,24108,24111,24112,24114,24115,24116,24117,24118,24121,24122,24126,24127,24128,24129,24131,24134,24135,24136,24137,24138,24139,24141,24142,24143,24144,24145,24146,24147,24150,24151,24152,24153,24154,24156,24157,24159,24160,24163,24164,24165,24166,24167,24168,24169,24170,24171,24172,24173,24174,24175,24176,24177,24181,24183,24185,24190,24193,24194,24195,24197,24200,24201,24204,24205,24206,24210,24216,24219,24221,24225,24226,24227,24228,24232,24233,24234,24235,24236,24238,24239,24240,24241,24242,24244,24250,24251,24252,24253,24255,24256,24257,24258,24259,24260,24261,24262,24263,24264,24267,24268,24269,24270,24271,24272,24276,24277,24279,24280,24281,24282,24284,24285,24286,24287,24288,24289,24290,24291,24292,24293,24294,24295,24297,24299,24300,24301,24302,24303,24304,24305,24306,24307,24309,24312,24313,24315,24316,24317,24325,24326,24327,24329,24332,24333,24334,24336,24338,24340,24342,24345,24346,24348,24349,24350,24353,24354,24355,24356,24360,24363,24364,24366,24368,24370,24371,24372,24373,24374,24375,24376,24379,24381,24382,24383,24385,24386,24387,24388,24389,24390,24391,24392,24393,24394,24395,24396,24397,24398,24399,24401,24404,24409,24410,24411,24412,24414,24415,24416,24419,24421,24423,24424,24427,24430,24431,24434,24436,24437,24438,24440,24442,24445,24446,24447,24451,24454,24461,24462,24463,24465,24467,24468,24470,24474,24475,24477,24478,24479,24480,24482,24483,24484,24485,24486,24487,24489,24491,24492,24495,24496,24497,24498,24499,24500,24502,24504,24505,24506,24507,24510,24511,24512,24513,24514,24519,24520,24522,24523,24526,24531,24532,24533,24538,24539,24540,24542,24543,24546,24547,24549,24550,24552,24553,24556,24559,24560,24562,24563,24564,24566,24567,24569,24570,24572,24583,24584,24585,24587,24588,24592,24593,24595,24599,24600,24602,24606,24607,24610,24611,24612,24620,24621,24622,24624,24625,24626,24627,24628,24630,24631,24632,24633,24634,24637,24638,24640,24644,24645,24646,24647,24648,24649,24650,24652,24654,24655,24657,24659,24660,24662,24663,24664,24667,24668,24670,24671,24672,24673,24677,24678,24686,24689,24690,24692,24693,24695,24702,24704,24705,24706,24709,24710,24711,24712,24714,24715,24718,24719,24720,24721,24723,24725,24727,24728,24729,24732,24734,24737,24738,24740,24741,24743,24745,24746,24750,24752,24755,24757,24758,24759,24761,24762,24765,24766,24767,24768,24769,24770,24771,24772,24775,24776,24777,24780,24781,24782,24783,24784,24786,24787,24788,24790,24791,24793,24795,24798,24801,24802,24803,24804,24805,24810,24817,24818,24821,24823,24824,24827,24828,24829,24830,24831,24834,24835,24836,24837,24839,24842,24843,24844,24848,24849,24850,24851,24852,24854,24855,24856,24857,24859,24860,24861,24862,24865,24866,24869,24872,24873,24874,24876,24877,24878,24879,24880,24881,24882,24883,24884,24885,24886,24887,24888,24889,24890,24891,24892,24893,24894,24896,24897,24898,24899,24900,24901,24902,24903,24905,24907,24909,24911,24912,24914,24915,24916,24918,24919,24920,24921,24922,24923,24924,24926,24927,24928,24929,24931,24932,24933,24934,24937,24938,24939,24940,24941,24942,24943,24945,24946,24947,24948,24950,24952,24953,24954,24955,24956,24957,24958,24959,24960,24961,24962,24963,24964,24965,24966,24967,24968,24969,24970,24972,24973,24975,24976,24977,24978,24979,24981,24982,24983,24984,24985,24986,24987,24988,24990,24991,24992,24993,24994,24995,24996,24997,24998,25002,25003,25005,25006,25007,25008,25009,25010,25011,25012,25013,25014,25016,25017,25018,25019,25020,25021,25023,25024,25025,25027,25028,25029,25030,25031,25033,25036,25037,25038,25039,25040,25043,25045,25046,25047,25048,25049,25050,25051,25052,25053,25054,25055,25056,25057,25058,25059,25060,25061,25063,25064,25065,25066,25067,25068,25069,25070,25071,25072,25073,25074,25075,25076,25078,25079,25080,25081,25082,25083,25084,25085,25086,25088,25089,25090,25091,25092,25093,25095,25097,25107,25108,25113,25116,25117,25118,25120,25123,25126,25127,25128,25129,25131,25133,25135,25136,25137,25138,25141,25142,25144,25145,25146,25147,25148,25154,25156,25157,25158,25162,25167,25168,25173,25174,25175,25177,25178,25180,25181,25182,25183,25184,25185,25186,25188,25189,25192,25201,25202,25204,25205,25207,25208,25210,25211,25213,25217,25218,25219,25221,25222,25223,25224,25227,25228,25229,25230,25231,25232,25236,25241,25244,25245,25246,25251,25254,25255,25257,25258,25261,25262,25263,25264,25266,25267,25268,25270,25271,25272,25274,25278,25280,25281,25283,25291,25295,25297,25301,25309,25310,25312,25313,25316,25322,25323,25328,25330,25333,25336,25337,25338,25339,25344,25347,25348,25349,25350,25354,25355,25356,25357,25359,25360,25362,25363,25364,25365,25367,25368,25369,25372,25382,25383,25385,25388,25389,25390,25392,25393,25395,25396,25397,25398,25399,25400,25403,25404,25406,25407,25408,25409,25412,25415,25416,25418,25425,25426,25427,25428,25430,25431,25432,25433,25434,25435,25436,25437,25440,25444,25445,25446,25448,25450,25451,25452,25455,25456,25458,25459,25460,25461,25464,25465,25468,25469,25470,25471,25473,25475,25476,25477,25478,25483,25485,25489,25491,25492,25493,25495,25497,25498,25499,25500,25501,25502,25503,25505,25508,25510,25515,25519,25521,25522,25525,25526,25529,25531,25533,25535,25536,25537,25538,25539,25541,25543,25544,25546,25547,25548,25553,25555,25556,25557,25559,25560,25561,25562,25563,25564,25565,25567,25570,25572,25573,25574,25575,25576,25579,25580,25582,25583,25584,25585,25587,25589,25591,25593,25594,25595,25596,25598,25603,25604,25606,25607,25608,25609,25610,25613,25614,25617,25618,25621,25622,25623,25624,25625,25626,25629,25631,25634,25635,25636,25637,25639,25640,25641,25643,25646,25647,25648,25649,25650,25651,25653,25654,25655,25656,25657,25659,25660,25662,25664,25666,25667,25673,25675,25676,25677,25678,25679,25680,25681,25683,25685,25686,25687,25689,25690,25691,25692,25693,25695,25696,25697,25698,25699,25700,25701,25702,25704,25706,25707,25708,25710,25711,25712,25713,25714,25715,25716,25717,25718,25719,25723,25724,25725,25726,25727,25728,25729,25731,25734,25736,25737,25738,25739,25740,25741,25742,25743,25744,25747,25748,25751,25752,25754,25755,25756,25757,25759,25760,25761,25762,25763,25765,25766,25767,25768,25770,25771,25775,25777,25778,25779,25780,25782,25785,25787,25789,25790,25791,25793,25795,25796,25798,25799,25800,25801,25802,25803,25804,25807,25809,25811,25812,25813,25814,25817,25818,25819,25820,25821,25823,25824,25825,25827,25829,25831,25832,25833,25834,25835,25836,25837,25838,25839,25840,25841,25842,25843,25844,25845,25846,25847,25848,25849,25850,25851,25852,25853,25854,25855,25857,25858,25859,25860,25861,25862,25863,25864,25866,25867,25868,25869,25870,25871,25872,25873,25875,25876,25877,25878,25879,25881,25882,25883,25884,25885,25886,25887,25888,25889,25890,25891,25892,25894,25895,25896,25897,25898,25900,25901,25904,25905,25906,25907,25911,25914,25916,25917,25920,25921,25922,25923,25924,25926,25927,25930,25931,25933,25934,25936,25938,25939,25940,25943,25944,25946,25948,25951,25952,25953,25956,25957,25959,25960,25961,25962,25965,25966,25967,25969,25971,25973,25974,25976,25977,25978,25979,25980,25981,25982,25983,25984,25985,25986,25987,25988,25989,25990,25992,25993,25994,25997,25998,25999,26002,26004,26005,26006,26008,26010,26013,26014,26016,26018,26019,26022,26024,26026,26028,26030,26033,26034,26035,26036,26037,26038,26039,26040,26042,26043,26046,26047,26048,26050,26055,26056,26057,26058,26061,26064,26065,26067,26068,26069,26072,26073,26074,26075,26076,26077,26078,26079,26081,26083,26084,26090,26091,26098,26099,26100,26101,26104,26105,26107,26108,26109,26110,26111,26113,26116,26117,26119,26120,26121,26123,26125,26128,26129,26130,26134,26135,26136,26138,26139,26140,26142,26145,26146,26147,26148,26150,26153,26154,26155,26156,26158,26160,26162,26163,26167,26168,26169,26170,26171,26173,26175,26176,26178,26180,26181,26182,26183,26184,26185,26186,26189,26190,26192,26193,26200,26201,26203,26204,26205,26206,26208,26210,26211,26213,26215,26217,26218,26219,26220,26221,26225,26226,26227,26229,26232,26233,26235,26236,26237,26239,26240,26241,26243,26245,26246,26248,26249,26250,26251,26253,26254,26255,26256,26258,26259,26260,26261,26264,26265,26266,26267,26268,26270,26271,26272,26273,26274,26275,26276,26277,26278,26281,26282,26283,26284,26285,26287,26288,26289,26290,26291,26293,26294,26295,26296,26298,26299,26300,26301,26303,26304,26305,26306,26307,26308,26309,26310,26311,26312,26313,26314,26315,26316,26317,26318,26319,26320,26321,26322,26323,26324,26325,26326,26327,26328,26330,26334,26335,26336,26337,26338,26339,26340,26341,26343,26344,26346,26347,26348,26349,26350,26351,26353,26357,26358,26360,26362,26363,26365,26369,26370,26371,26372,26373,26374,26375,26380,26382,26383,26385,26386,26387,26390,26392,26393,26394,26396,26398,26400,26401,26402,26403,26404,26405,26407,26409,26414,26416,26418,26419,26422,26423,26424,26425,26427,26428,26430,26431,26433,26436,26437,26439,26442,26443,26445,26450,26452,26453,26455,26456,26457,26458,26459,26461,26466,26467,26468,26470,26471,26475,26476,26478,26481,26484,26486,26488,26489,26490,26491,26493,26496,26498,26499,26501,26502,26504,26506,26508,26509,26510,26511,26513,26514,26515,26516,26518,26521,26523,26527,26528,26529,26532,26534,26537,26540,26542,26545,26546,26548,26553,26554,26555,26556,26557,26558,26559,26560,26562,26565,26566,26567,26568,26569,26570,26571,26572,26573,26574,26581,26582,26583,26587,26591,26593,26595,26596,26598,26599,26600,26602,26603,26605,26606,26610,26613,26614,26615,26616,26617,26618,26619,26620,26622,26625,26626,26627,26628,26630,26637,26640,26642,26644,26645,26648,26649,26650,26651,26652,26654,26655,26656,26658,26659,26660,26661,26662,26663,26664,26667,26668,26669,26670,26671,26672,26673,26676,26677,26678,26682,26683,26687,26695,26699,26701,26703,26706,26710,26711,26712,26713,26714,26715,26716,26717,26718,26719,26730,26732,26733,26734,26735,26736,26737,26738,26739,26741,26744,26745,26746,26747,26748,26749,26750,26751,26752,26754,26756,26759,26760,26761,26762,26763,26764,26765,26766,26768,26769,26770,26772,26773,26774,26776,26777,26778,26779,26780,26781,26782,26783,26784,26785,26787,26788,26789,26793,26794,26795,26796,26798,26801,26802,26804,26806,26807,26808,26809,26810,26811,26812,26813,26814,26815,26817,26819,26820,26821,26822,26823,26824,26826,26828,26830,26831,26832,26833,26835,26836,26838,26839,26841,26843,26844,26845,26846,26847,26849,26850,26852,26853,26854,26855,26856,26857,26858,26859,26860,26861,26863,26866,26867,26868,26870,26871,26872,26875,26877,26878,26879,26880,26882,26883,26884,26886,26887,26888,26889,26890,26892,26895,26897,26899,26900,26901,26902,26903,26904,26905,26906,26907,26908,26909,26910,26913,26914,26915,26917,26918,26919,26920,26921,26922,26923,26924,26926,26927,26929,26930,26931,26933,26934,26935,26936,26938,26939,26940,26942,26944,26945,26947,26948,26949,26950,26951,26952,26953,26954,26955,26956,26957,26958,26959,26960,26961,26962,26963,26965,26966,26968,26969,26971,26972,26975,26977,26978,26980,26981,26983,26984,26985,26986,26988,26989,26991,26992,26994,26995,26996,26997,26998,27002,27003,27005,27006,27007,27009,27011,27013,27018,27019,27020,27022,27023,27024,27025,27026,27027,27030,27031,27033,27034,27037,27038,27039,27040,27041,27042,27043,27044,27045,27046,27049,27050,27052,27054,27055,27056,27058,27059,27061,27062,27064,27065,27066,27068,27069,27070,27071,27072,27074,27075,27076,27077,27078,27079,27080,27081,27083,27085,27087,27089,27090,27091,27093,27094,27095,27096,27097,27098,27100,27101,27102,27105,27106,27107,27108,27109,27110,27111,27112,27113,27114,27115,27116,27118,27119,27120,27121,27123,27124,27125,27126,27127,27128,27129,27130,27131,27132,27134,27136,27137,27138,27139,27140,27141,27142,27143,27144,27145,27147,27148,27149,27150,27151,27152,27153,27154,27155,27156,27157,27158,27161,27162,27163,27164,27165,27166,27168,27170,27171,27172,27173,27174,27175,27177,27179,27180,27181,27182,27184,27186,27187,27188,27190,27191,27192,27193,27194,27195,27196,27199,27200,27201,27202,27203,27205,27206,27208,27209,27210,27211,27212,27213,27214,27215,27217,27218,27219,27220,27221,27222,27223,27226,27228,27229,27230,27231,27232,27234,27235,27236,27238,27239,27240,27241,27242,27243,27244,27245,27246,27247,27248,27250,27251,27252,27253,27254,27255,27256,27258,27259,27261,27262,27263,27265,27266,27267,27269,27270,27271,27272,27273,27274,27275,27276,27277,27279,27282,27283,27284,27285,27286,27288,27289,27290,27291,27292,27293,27294,27295,27297,27298,27299,27300,27301,27302,27303,27304,27306,27309,27310,27311,27312,27313,27314,27315,27316,27317,27318,27319,27320,27321,27322,27323,27324,27325,27326,27327,27328,27329,27330,27331,27332,27333,27334,27335,27336,27337,27338,27339,27340,27341,27342,27343,27344,27345,27346,27347,27348,27349,27350,27351,27352,27353,27354,27355,27356,27357,27358,27359,27360,27361,27362,27363,27364,27365,27366,27367,27368,27369,27370,27371,27372,27373,27374,27375,27376,27377,27378,27379,27380,27381,27382,27383,27384,27385,27386,27387,27388,27389,27390,27391,27392,27393,27394,27395,27396,27397,27398,27399,27400,27401,27402,27403,27404,27405,27406,27407,27408,27409,27410,27411,27412,27413,27414,27415,27416,27417,27418,27419,27420,27421,27422,27423,27429,27430,27432,27433,27434,27435,27436,27437,27438,27439,27440,27441,27443,27444,27445,27446,27448,27451,27452,27453,27455,27456,27457,27458,27460,27461,27464,27466,27467,27469,27470,27471,27472,27473,27474,27475,27476,27477,27478,27479,27480,27482,27483,27484,27485,27486,27487,27488,27489,27496,27497,27499,27500,27501,27502,27503,27504,27505,27506,27507,27508,27509,27510,27511,27512,27514,27517,27518,27519,27520,27525,27528,27532,27534,27535,27536,27537,27540,27541,27543,27544,27545,27548,27549,27550,27551,27552,27554,27555,27556,27557,27558,27559,27560,27561,27563,27564,27565,27566,27567,27568,27569,27570,27574,27576,27577,27578,27579,27580,27581,27582,27584,27587,27588,27590,27591,27592,27593,27594,27596,27598,27600,27601,27608,27610,27612,27613,27614,27615,27616,27618,27619,27620,27621,27622,27623,27624,27625,27628,27629,27630,27632,27633,27634,27636,27638,27639,27640,27642,27643,27644,27646,27647,27648,27649,27650,27651,27652,27656,27657,27658,27659,27660,27662,27666,27671,27676,27677,27678,27680,27683,27685,27691,27692,27693,27697,27699,27702,27703,27705,27706,27707,27708,27710,27711,27715,27716,27717,27720,27723,27724,27725,27726,27727,27729,27730,27731,27734,27736,27737,27738,27746,27747,27749,27750,27751,27755,27756,27757,27758,27759,27761,27763,27765,27767,27768,27770,27771,27772,27775,27776,27780,27783,27786,27787,27789,27790,27793,27794,27797,27798,27799,27800,27802,27804,27805,27806,27808,27810,27816,27820,27823,27824,27828,27829,27830,27831,27834,27840,27841,27842,27843,27846,27847,27848,27851,27853,27854,27855,27857,27858,27864,27865,27866,27868,27869,27871,27876,27878,27879,27881,27884,27885,27890,27892,27897,27903,27904,27906,27907,27909,27910,27912,27913,27914,27917,27919,27920,27921,27923,27924,27925,27926,27928,27932,27933,27935,27936,27937,27938,27939,27940,27942,27944,27945,27948,27949,27951,27952,27956,27958,27959,27960,27962,27967,27968,27970,27972,27977,27980,27984,27989,27990,27991,27992,27995,27997,27999,28001,28002,28004,28005,28007,28008,28011,28012,28013,28016,28017,28018,28019,28021,28022,28025,28026,28027,28029,28030,28031,28032,28033,28035,28036,28038,28039,28042,28043,28045,28047,28048,28050,28054,28055,28056,28057,28058,28060,28066,28069,28076,28077,28080,28081,28083,28084,28086,28087,28089,28090,28091,28092,28093,28094,28097,28098,28099,28104,28105,28106,28109,28110,28111,28112,28114,28115,28116,28117,28119,28122,28123,28124,28127,28130,28131,28133,28135,28136,28137,28138,28141,28143,28144,28146,28148,28149,28150,28152,28154,28157,28158,28159,28160,28161,28162,28163,28164,28166,28167,28168,28169,28171,28175,28178,28179,28181,28184,28185,28187,28188,28190,28191,28194,28198,28199,28200,28202,28204,28206,28208,28209,28211,28213,28214,28215,28217,28219,28220,28221,28222,28223,28224,28225,28226,28229,28230,28231,28232,28233,28234,28235,28236,28239,28240,28241,28242,28245,28247,28249,28250,28252,28253,28254,28256,28257,28258,28259,28260,28261,28262,28263,28264,28265,28266,28268,28269,28271,28272,28273,28274,28275,28276,28277,28278,28279,28280,28281,28282,28283,28284,28285,28288,28289,28290,28292,28295,28296,28298,28299,28300,28301,28302,28305,28306,28307,28308,28309,28310,28311,28313,28314,28315,28317,28318,28320,28321,28323,28324,28326,28328,28329,28331,28332,28333,28334,28336,28339,28341,28344,28345,28348,28350,28351,28352,28355,28356,28357,28358,28360,28361,28362,28364,28365,28366,28368,28370,28374,28376,28377,28379,28380,28381,28387,28391,28394,28395,28396,28397,28398,28399,28400,28401,28402,28403,28405,28406,28407,28408,28410,28411,28412,28413,28414,28415,28416,28417,28419,28420,28421,28423,28424,28426,28427,28428,28429,28430,28432,28433,28434,28438,28439,28440,28441,28442,28443,28444,28445,28446,28447,28449,28450,28451,28453,28454,28455,28456,28460,28462,28464,28466,28468,28469,28471,28472,28473,28474,28475,28476,28477,28479,28480,28481,28482,28483,28484,28485,28488,28489,28490,28492,28494,28495,28496,28497,28498,28499,28500,28501,28502,28503,28505,28506,28507,28509,28511,28512,28513,28515,28516,28517,28519,28520,28521,28522,28523,28524,28527,28528,28529,28531,28533,28534,28535,28537,28539,28541,28542,28543,28544,28545,28546,28547,28549,28550,28551,28554,28555,28559,28560,28561,28562,28563,28564,28565,28566,28567,28568,28569,28570,28571,28573,28574,28575,28576,28578,28579,28580,28581,28582,28584,28585,28586,28587,28588,28589,28590,28591,28592,28593,28594,28596,28597,28599,28600,28602,28603,28604,28605,28606,28607,28609,28611,28612,28613,28614,28615,28616,28618,28619,28620,28621,28622,28623,28624,28627,28628,28629,28630,28631,28632,28633,28634,28635,28636,28637,28639,28642,28643,28644,28645,28646,28647,28648,28649,28650,28651,28652,28653,28656,28657,28658,28659,28660,28661,28662,28663,28664,28665,28666,28667,28668,28669,28670,28671,28672,28673,28674,28675,28676,28677,28678,28679,28680,28681,28682,28683,28684,28685,28686,28687,28688,28690,28691,28692,28693,28694,28695,28696,28697,28700,28701,28702,28703,28704,28705,28706,28708,28709,28710,28711,28712,28713,28714,28715,28716,28717,28718,28719,28720,28721,28722,28723,28724,28726,28727,28728,28730,28731,28732,28733,28734,28735,28736,28737,28738,28739,28740,28741,28742,28743,28744,28745,28746,28747,28749,28750,28752,28753,28754,28755,28756,28757,28758,28759,28760,28761,28762,28763,28764,28765,28767,28768,28769,28770,28771,28772,28773,28774,28775,28776,28777,28778,28782,28785,28786,28787,28788,28791,28793,28794,28795,28797,28801,28802,28803,28804,28806,28807,28808,28811,28812,28813,28815,28816,28817,28819,28823,28824,28826,28827,28830,28831,28832,28833,28834,28835,28836,28837,28838,28839,28840,28841,28842,28848,28850,28852,28853,28854,28858,28862,28863,28868,28869,28870,28871,28873,28875,28876,28877,28878,28879,28880,28881,28882,28883,28884,28885,28886,28887,28890,28892,28893,28894,28896,28897,28898,28899,28901,28906,28910,28912,28913,28914,28915,28916,28917,28918,28920,28922,28923,28924,28926,28927,28928,28929,28930,28931,28932,28933,28934,28935,28936,28939,28940,28941,28942,28943,28945,28946,28948,28951,28955,28956,28957,28958,28959,28960,28961,28962,28963,28964,28965,28967,28968,28969,28970,28971,28972,28973,28974,28978,28979,28980,28981,28983,28984,28985,28986,28987,28988,28989,28990,28991,28992,28993,28994,28995,28996,28998,28999,29e3,29001,29003,29005,29007,29008,29009,29010,29011,29012,29013,29014,29015,29016,29017,29018,29019,29021,29023,29024,29025,29026,29027,29029,29033,29034,29035,29036,29037,29039,29040,29041,29044,29045,29046,29047,29049,29051,29052,29054,29055,29056,29057,29058,29059,29061,29062,29063,29064,29065,29067,29068,29069,29070,29072,29073,29074,29075,29077,29078,29079,29082,29083,29084,29085,29086,29089,29090,29091,29092,29093,29094,29095,29097,29098,29099,29101,29102,29103,29104,29105,29106,29108,29110,29111,29112,29114,29115,29116,29117,29118,29119,29120,29121,29122,29124,29125,29126,29127,29128,29129,29130,29131,29132,29133,29135,29136,29137,29138,29139,29142,29143,29144,29145,29146,29147,29148,29149,29150,29151,29153,29154,29155,29156,29158,29160,29161,29162,29163,29164,29165,29167,29168,29169,29170,29171,29172,29173,29174,29175,29176,29178,29179,29180,29181,29182,29183,29184,29185,29186,29187,29188,29189,29191,29192,29193,29194,29195,29196,29197,29198,29199,29200,29201,29202,29203,29204,29205,29206,29207,29208,29209,29210,29211,29212,29214,29215,29216,29217,29218,29219,29220,29221,29222,29223,29225,29227,29229,29230,29231,29234,29235,29236,29242,29244,29246,29248,29249,29250,29251,29252,29253,29254,29257,29258,29259,29262,29263,29264,29265,29267,29268,29269,29271,29272,29274,29276,29278,29280,29283,29284,29285,29288,29290,29291,29292,29293,29296,29297,29299,29300,29302,29303,29304,29307,29308,29309,29314,29315,29317,29318,29319,29320,29321,29324,29326,29328,29329,29331,29332,29333,29334,29335,29336,29337,29338,29339,29340,29341,29342,29344,29345,29346,29347,29348,29349,29350,29351,29352,29353,29354,29355,29358,29361,29362,29363,29365,29370,29371,29372,29373,29374,29375,29376,29381,29382,29383,29385,29386,29387,29388,29391,29393,29395,29396,29397,29398,29400,29402,29403,58566,58567,58568,58569,58570,58571,58572,58573,58574,58575,58576,58577,58578,58579,58580,58581,58582,58583,58584,58585,58586,58587,58588,58589,58590,58591,58592,58593,58594,58595,58596,58597,58598,58599,58600,58601,58602,58603,58604,58605,58606,58607,58608,58609,58610,58611,58612,58613,58614,58615,58616,58617,58618,58619,58620,58621,58622,58623,58624,58625,58626,58627,58628,58629,58630,58631,58632,58633,58634,58635,58636,58637,58638,58639,58640,58641,58642,58643,58644,58645,58646,58647,58648,58649,58650,58651,58652,58653,58654,58655,58656,58657,58658,58659,58660,58661,12288,12289,12290,183,713,711,168,12291,12293,8212,65374,8214,8230,8216,8217,8220,8221,12308,12309,12296,12297,12298,12299,12300,12301,12302,12303,12310,12311,12304,12305,177,215,247,8758,8743,8744,8721,8719,8746,8745,8712,8759,8730,8869,8741,8736,8978,8857,8747,8750,8801,8780,8776,8765,8733,8800,8814,8815,8804,8805,8734,8757,8756,9794,9792,176,8242,8243,8451,65284,164,65504,65505,8240,167,8470,9734,9733,9675,9679,9678,9671,9670,9633,9632,9651,9650,8251,8594,8592,8593,8595,12307,58662,58663,58664,58665,58666,58667,58668,58669,58670,58671,58672,58673,58674,58675,58676,58677,58678,58679,58680,58681,58682,58683,58684,58685,58686,58687,58688,58689,58690,58691,58692,58693,58694,58695,58696,58697,58698,58699,58700,58701,58702,58703,58704,58705,58706,58707,58708,58709,58710,58711,58712,58713,58714,58715,58716,58717,58718,58719,58720,58721,58722,58723,58724,58725,58726,58727,58728,58729,58730,58731,58732,58733,58734,58735,58736,58737,58738,58739,58740,58741,58742,58743,58744,58745,58746,58747,58748,58749,58750,58751,58752,58753,58754,58755,58756,58757,8560,8561,8562,8563,8564,8565,8566,8567,8568,8569,59238,59239,59240,59241,59242,59243,9352,9353,9354,9355,9356,9357,9358,9359,9360,9361,9362,9363,9364,9365,9366,9367,9368,9369,9370,9371,9332,9333,9334,9335,9336,9337,9338,9339,9340,9341,9342,9343,9344,9345,9346,9347,9348,9349,9350,9351,9312,9313,9314,9315,9316,9317,9318,9319,9320,9321,8364,59245,12832,12833,12834,12835,12836,12837,12838,12839,12840,12841,59246,59247,8544,8545,8546,8547,8548,8549,8550,8551,8552,8553,8554,8555,59248,59249,58758,58759,58760,58761,58762,58763,58764,58765,58766,58767,58768,58769,58770,58771,58772,58773,58774,58775,58776,58777,58778,58779,58780,58781,58782,58783,58784,58785,58786,58787,58788,58789,58790,58791,58792,58793,58794,58795,58796,58797,58798,58799,58800,58801,58802,58803,58804,58805,58806,58807,58808,58809,58810,58811,58812,58813,58814,58815,58816,58817,58818,58819,58820,58821,58822,58823,58824,58825,58826,58827,58828,58829,58830,58831,58832,58833,58834,58835,58836,58837,58838,58839,58840,58841,58842,58843,58844,58845,58846,58847,58848,58849,58850,58851,58852,12288,65281,65282,65283,65509,65285,65286,65287,65288,65289,65290,65291,65292,65293,65294,65295,65296,65297,65298,65299,65300,65301,65302,65303,65304,65305,65306,65307,65308,65309,65310,65311,65312,65313,65314,65315,65316,65317,65318,65319,65320,65321,65322,65323,65324,65325,65326,65327,65328,65329,65330,65331,65332,65333,65334,65335,65336,65337,65338,65339,65340,65341,65342,65343,65344,65345,65346,65347,65348,65349,65350,65351,65352,65353,65354,65355,65356,65357,65358,65359,65360,65361,65362,65363,65364,65365,65366,65367,65368,65369,65370,65371,65372,65373,65507,58854,58855,58856,58857,58858,58859,58860,58861,58862,58863,58864,58865,58866,58867,58868,58869,58870,58871,58872,58873,58874,58875,58876,58877,58878,58879,58880,58881,58882,58883,58884,58885,58886,58887,58888,58889,58890,58891,58892,58893,58894,58895,58896,58897,58898,58899,58900,58901,58902,58903,58904,58905,58906,58907,58908,58909,58910,58911,58912,58913,58914,58915,58916,58917,58918,58919,58920,58921,58922,58923,58924,58925,58926,58927,58928,58929,58930,58931,58932,58933,58934,58935,58936,58937,58938,58939,58940,58941,58942,58943,58944,58945,58946,58947,58948,58949,12353,12354,12355,12356,12357,12358,12359,12360,12361,12362,12363,12364,12365,12366,12367,12368,12369,12370,12371,12372,12373,12374,12375,12376,12377,12378,12379,12380,12381,12382,12383,12384,12385,12386,12387,12388,12389,12390,12391,12392,12393,12394,12395,12396,12397,12398,12399,12400,12401,12402,12403,12404,12405,12406,12407,12408,12409,12410,12411,12412,12413,12414,12415,12416,12417,12418,12419,12420,12421,12422,12423,12424,12425,12426,12427,12428,12429,12430,12431,12432,12433,12434,12435,59250,59251,59252,59253,59254,59255,59256,59257,59258,59259,59260,58950,58951,58952,58953,58954,58955,58956,58957,58958,58959,58960,58961,58962,58963,58964,58965,58966,58967,58968,58969,58970,58971,58972,58973,58974,58975,58976,58977,58978,58979,58980,58981,58982,58983,58984,58985,58986,58987,58988,58989,58990,58991,58992,58993,58994,58995,58996,58997,58998,58999,59e3,59001,59002,59003,59004,59005,59006,59007,59008,59009,59010,59011,59012,59013,59014,59015,59016,59017,59018,59019,59020,59021,59022,59023,59024,59025,59026,59027,59028,59029,59030,59031,59032,59033,59034,59035,59036,59037,59038,59039,59040,59041,59042,59043,59044,59045,12449,12450,12451,12452,12453,12454,12455,12456,12457,12458,12459,12460,12461,12462,12463,12464,12465,12466,12467,12468,12469,12470,12471,12472,12473,12474,12475,12476,12477,12478,12479,12480,12481,12482,12483,12484,12485,12486,12487,12488,12489,12490,12491,12492,12493,12494,12495,12496,12497,12498,12499,12500,12501,12502,12503,12504,12505,12506,12507,12508,12509,12510,12511,12512,12513,12514,12515,12516,12517,12518,12519,12520,12521,12522,12523,12524,12525,12526,12527,12528,12529,12530,12531,12532,12533,12534,59261,59262,59263,59264,59265,59266,59267,59268,59046,59047,59048,59049,59050,59051,59052,59053,59054,59055,59056,59057,59058,59059,59060,59061,59062,59063,59064,59065,59066,59067,59068,59069,59070,59071,59072,59073,59074,59075,59076,59077,59078,59079,59080,59081,59082,59083,59084,59085,59086,59087,59088,59089,59090,59091,59092,59093,59094,59095,59096,59097,59098,59099,59100,59101,59102,59103,59104,59105,59106,59107,59108,59109,59110,59111,59112,59113,59114,59115,59116,59117,59118,59119,59120,59121,59122,59123,59124,59125,59126,59127,59128,59129,59130,59131,59132,59133,59134,59135,59136,59137,59138,59139,59140,59141,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,931,932,933,934,935,936,937,59269,59270,59271,59272,59273,59274,59275,59276,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,963,964,965,966,967,968,969,59277,59278,59279,59280,59281,59282,59283,65077,65078,65081,65082,65087,65088,65085,65086,65089,65090,65091,65092,59284,59285,65083,65084,65079,65080,65073,59286,65075,65076,59287,59288,59289,59290,59291,59292,59293,59294,59295,59142,59143,59144,59145,59146,59147,59148,59149,59150,59151,59152,59153,59154,59155,59156,59157,59158,59159,59160,59161,59162,59163,59164,59165,59166,59167,59168,59169,59170,59171,59172,59173,59174,59175,59176,59177,59178,59179,59180,59181,59182,59183,59184,59185,59186,59187,59188,59189,59190,59191,59192,59193,59194,59195,59196,59197,59198,59199,59200,59201,59202,59203,59204,59205,59206,59207,59208,59209,59210,59211,59212,59213,59214,59215,59216,59217,59218,59219,59220,59221,59222,59223,59224,59225,59226,59227,59228,59229,59230,59231,59232,59233,59234,59235,59236,59237,1040,1041,1042,1043,1044,1045,1025,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,59296,59297,59298,59299,59300,59301,59302,59303,59304,59305,59306,59307,59308,59309,59310,1072,1073,1074,1075,1076,1077,1105,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,59311,59312,59313,59314,59315,59316,59317,59318,59319,59320,59321,59322,59323,714,715,729,8211,8213,8229,8245,8453,8457,8598,8599,8600,8601,8725,8735,8739,8786,8806,8807,8895,9552,9553,9554,9555,9556,9557,9558,9559,9560,9561,9562,9563,9564,9565,9566,9567,9568,9569,9570,9571,9572,9573,9574,9575,9576,9577,9578,9579,9580,9581,9582,9583,9584,9585,9586,9587,9601,9602,9603,9604,9605,9606,9607,9608,9609,9610,9611,9612,9613,9614,9615,9619,9620,9621,9660,9661,9698,9699,9700,9701,9737,8853,12306,12317,12318,59324,59325,59326,59327,59328,59329,59330,59331,59332,59333,59334,257,225,462,224,275,233,283,232,299,237,464,236,333,243,466,242,363,250,468,249,470,472,474,476,252,234,593,7743,324,328,505,609,59337,59338,59339,59340,12549,12550,12551,12552,12553,12554,12555,12556,12557,12558,12559,12560,12561,12562,12563,12564,12565,12566,12567,12568,12569,12570,12571,12572,12573,12574,12575,12576,12577,12578,12579,12580,12581,12582,12583,12584,12585,59341,59342,59343,59344,59345,59346,59347,59348,59349,59350,59351,59352,59353,59354,59355,59356,59357,59358,59359,59360,59361,12321,12322,12323,12324,12325,12326,12327,12328,12329,12963,13198,13199,13212,13213,13214,13217,13252,13262,13265,13266,13269,65072,65506,65508,59362,8481,12849,59363,8208,59364,59365,59366,12540,12443,12444,12541,12542,12294,12445,12446,65097,65098,65099,65100,65101,65102,65103,65104,65105,65106,65108,65109,65110,65111,65113,65114,65115,65116,65117,65118,65119,65120,65121,65122,65123,65124,65125,65126,65128,65129,65130,65131,12350,12272,12273,12274,12275,12276,12277,12278,12279,12280,12281,12282,12283,12295,59380,59381,59382,59383,59384,59385,59386,59387,59388,59389,59390,59391,59392,9472,9473,9474,9475,9476,9477,9478,9479,9480,9481,9482,9483,9484,9485,9486,9487,9488,9489,9490,9491,9492,9493,9494,9495,9496,9497,9498,9499,9500,9501,9502,9503,9504,9505,9506,9507,9508,9509,9510,9511,9512,9513,9514,9515,9516,9517,9518,9519,9520,9521,9522,9523,9524,9525,9526,9527,9528,9529,9530,9531,9532,9533,9534,9535,9536,9537,9538,9539,9540,9541,9542,9543,9544,9545,9546,9547,59393,59394,59395,59396,59397,59398,59399,59400,59401,59402,59403,59404,59405,59406,59407,29404,29405,29407,29410,29411,29412,29413,29414,29415,29418,29419,29429,29430,29433,29437,29438,29439,29440,29442,29444,29445,29446,29447,29448,29449,29451,29452,29453,29455,29456,29457,29458,29460,29464,29465,29466,29471,29472,29475,29476,29478,29479,29480,29485,29487,29488,29490,29491,29493,29494,29498,29499,29500,29501,29504,29505,29506,29507,29508,29509,29510,29511,29512,29513,29514,29515,29516,29518,29519,29521,29523,29524,29525,29526,29528,29529,29530,29531,29532,29533,29534,29535,29537,29538,29539,29540,29541,29542,29543,29544,29545,29546,29547,29550,29552,29553,57344,57345,57346,57347,57348,57349,57350,57351,57352,57353,57354,57355,57356,57357,57358,57359,57360,57361,57362,57363,57364,57365,57366,57367,57368,57369,57370,57371,57372,57373,57374,57375,57376,57377,57378,57379,57380,57381,57382,57383,57384,57385,57386,57387,57388,57389,57390,57391,57392,57393,57394,57395,57396,57397,57398,57399,57400,57401,57402,57403,57404,57405,57406,57407,57408,57409,57410,57411,57412,57413,57414,57415,57416,57417,57418,57419,57420,57421,57422,57423,57424,57425,57426,57427,57428,57429,57430,57431,57432,57433,57434,57435,57436,57437,29554,29555,29556,29557,29558,29559,29560,29561,29562,29563,29564,29565,29567,29568,29569,29570,29571,29573,29574,29576,29578,29580,29581,29583,29584,29586,29587,29588,29589,29591,29592,29593,29594,29596,29597,29598,29600,29601,29603,29604,29605,29606,29607,29608,29610,29612,29613,29617,29620,29621,29622,29624,29625,29628,29629,29630,29631,29633,29635,29636,29637,29638,29639,29643,29644,29646,29650,29651,29652,29653,29654,29655,29656,29658,29659,29660,29661,29663,29665,29666,29667,29668,29670,29672,29674,29675,29676,29678,29679,29680,29681,29683,29684,29685,29686,29687,57438,57439,57440,57441,57442,57443,57444,57445,57446,57447,57448,57449,57450,57451,57452,57453,57454,57455,57456,57457,57458,57459,57460,57461,57462,57463,57464,57465,57466,57467,57468,57469,57470,57471,57472,57473,57474,57475,57476,57477,57478,57479,57480,57481,57482,57483,57484,57485,57486,57487,57488,57489,57490,57491,57492,57493,57494,57495,57496,57497,57498,57499,57500,57501,57502,57503,57504,57505,57506,57507,57508,57509,57510,57511,57512,57513,57514,57515,57516,57517,57518,57519,57520,57521,57522,57523,57524,57525,57526,57527,57528,57529,57530,57531,29688,29689,29690,29691,29692,29693,29694,29695,29696,29697,29698,29700,29703,29704,29707,29708,29709,29710,29713,29714,29715,29716,29717,29718,29719,29720,29721,29724,29725,29726,29727,29728,29729,29731,29732,29735,29737,29739,29741,29743,29745,29746,29751,29752,29753,29754,29755,29757,29758,29759,29760,29762,29763,29764,29765,29766,29767,29768,29769,29770,29771,29772,29773,29774,29775,29776,29777,29778,29779,29780,29782,29784,29789,29792,29793,29794,29795,29796,29797,29798,29799,29800,29801,29802,29803,29804,29806,29807,29809,29810,29811,29812,29813,29816,29817,29818,57532,57533,57534,57535,57536,57537,57538,57539,57540,57541,57542,57543,57544,57545,57546,57547,57548,57549,57550,57551,57552,57553,57554,57555,57556,57557,57558,57559,57560,57561,57562,57563,57564,57565,57566,57567,57568,57569,57570,57571,57572,57573,57574,57575,57576,57577,57578,57579,57580,57581,57582,57583,57584,57585,57586,57587,57588,57589,57590,57591,57592,57593,57594,57595,57596,57597,57598,57599,57600,57601,57602,57603,57604,57605,57606,57607,57608,57609,57610,57611,57612,57613,57614,57615,57616,57617,57618,57619,57620,57621,57622,57623,57624,57625,29819,29820,29821,29823,29826,29828,29829,29830,29832,29833,29834,29836,29837,29839,29841,29842,29843,29844,29845,29846,29847,29848,29849,29850,29851,29853,29855,29856,29857,29858,29859,29860,29861,29862,29866,29867,29868,29869,29870,29871,29872,29873,29874,29875,29876,29877,29878,29879,29880,29881,29883,29884,29885,29886,29887,29888,29889,29890,29891,29892,29893,29894,29895,29896,29897,29898,29899,29900,29901,29902,29903,29904,29905,29907,29908,29909,29910,29911,29912,29913,29914,29915,29917,29919,29921,29925,29927,29928,29929,29930,29931,29932,29933,29936,29937,29938,57626,57627,57628,57629,57630,57631,57632,57633,57634,57635,57636,57637,57638,57639,57640,57641,57642,57643,57644,57645,57646,57647,57648,57649,57650,57651,57652,57653,57654,57655,57656,57657,57658,57659,57660,57661,57662,57663,57664,57665,57666,57667,57668,57669,57670,57671,57672,57673,57674,57675,57676,57677,57678,57679,57680,57681,57682,57683,57684,57685,57686,57687,57688,57689,57690,57691,57692,57693,57694,57695,57696,57697,57698,57699,57700,57701,57702,57703,57704,57705,57706,57707,57708,57709,57710,57711,57712,57713,57714,57715,57716,57717,57718,57719,29939,29941,29944,29945,29946,29947,29948,29949,29950,29952,29953,29954,29955,29957,29958,29959,29960,29961,29962,29963,29964,29966,29968,29970,29972,29973,29974,29975,29979,29981,29982,29984,29985,29986,29987,29988,29990,29991,29994,29998,30004,30006,30009,30012,30013,30015,30017,30018,30019,30020,30022,30023,30025,30026,30029,30032,30033,30034,30035,30037,30038,30039,30040,30045,30046,30047,30048,30049,30050,30051,30052,30055,30056,30057,30059,30060,30061,30062,30063,30064,30065,30067,30069,30070,30071,30074,30075,30076,30077,30078,30080,30081,30082,30084,30085,30087,57720,57721,57722,57723,57724,57725,57726,57727,57728,57729,57730,57731,57732,57733,57734,57735,57736,57737,57738,57739,57740,57741,57742,57743,57744,57745,57746,57747,57748,57749,57750,57751,57752,57753,57754,57755,57756,57757,57758,57759,57760,57761,57762,57763,57764,57765,57766,57767,57768,57769,57770,57771,57772,57773,57774,57775,57776,57777,57778,57779,57780,57781,57782,57783,57784,57785,57786,57787,57788,57789,57790,57791,57792,57793,57794,57795,57796,57797,57798,57799,57800,57801,57802,57803,57804,57805,57806,57807,57808,57809,57810,57811,57812,57813,30088,30089,30090,30092,30093,30094,30096,30099,30101,30104,30107,30108,30110,30114,30118,30119,30120,30121,30122,30125,30134,30135,30138,30139,30143,30144,30145,30150,30155,30156,30158,30159,30160,30161,30163,30167,30169,30170,30172,30173,30175,30176,30177,30181,30185,30188,30189,30190,30191,30194,30195,30197,30198,30199,30200,30202,30203,30205,30206,30210,30212,30214,30215,30216,30217,30219,30221,30222,30223,30225,30226,30227,30228,30230,30234,30236,30237,30238,30241,30243,30247,30248,30252,30254,30255,30257,30258,30262,30263,30265,30266,30267,30269,30273,30274,30276,57814,57815,57816,57817,57818,57819,57820,57821,57822,57823,57824,57825,57826,57827,57828,57829,57830,57831,57832,57833,57834,57835,57836,57837,57838,57839,57840,57841,57842,57843,57844,57845,57846,57847,57848,57849,57850,57851,57852,57853,57854,57855,57856,57857,57858,57859,57860,57861,57862,57863,57864,57865,57866,57867,57868,57869,57870,57871,57872,57873,57874,57875,57876,57877,57878,57879,57880,57881,57882,57883,57884,57885,57886,57887,57888,57889,57890,57891,57892,57893,57894,57895,57896,57897,57898,57899,57900,57901,57902,57903,57904,57905,57906,57907,30277,30278,30279,30280,30281,30282,30283,30286,30287,30288,30289,30290,30291,30293,30295,30296,30297,30298,30299,30301,30303,30304,30305,30306,30308,30309,30310,30311,30312,30313,30314,30316,30317,30318,30320,30321,30322,30323,30324,30325,30326,30327,30329,30330,30332,30335,30336,30337,30339,30341,30345,30346,30348,30349,30351,30352,30354,30356,30357,30359,30360,30362,30363,30364,30365,30366,30367,30368,30369,30370,30371,30373,30374,30375,30376,30377,30378,30379,30380,30381,30383,30384,30387,30389,30390,30391,30392,30393,30394,30395,30396,30397,30398,30400,30401,30403,21834,38463,22467,25384,21710,21769,21696,30353,30284,34108,30702,33406,30861,29233,38552,38797,27688,23433,20474,25353,26263,23736,33018,26696,32942,26114,30414,20985,25942,29100,32753,34948,20658,22885,25034,28595,33453,25420,25170,21485,21543,31494,20843,30116,24052,25300,36299,38774,25226,32793,22365,38712,32610,29240,30333,26575,30334,25670,20336,36133,25308,31255,26001,29677,25644,25203,33324,39041,26495,29256,25198,25292,20276,29923,21322,21150,32458,37030,24110,26758,27036,33152,32465,26834,30917,34444,38225,20621,35876,33502,32990,21253,35090,21093,30404,30407,30409,30411,30412,30419,30421,30425,30426,30428,30429,30430,30432,30433,30434,30435,30436,30438,30439,30440,30441,30442,30443,30444,30445,30448,30451,30453,30454,30455,30458,30459,30461,30463,30464,30466,30467,30469,30470,30474,30476,30478,30479,30480,30481,30482,30483,30484,30485,30486,30487,30488,30491,30492,30493,30494,30497,30499,30500,30501,30503,30506,30507,30508,30510,30512,30513,30514,30515,30516,30521,30523,30525,30526,30527,30530,30532,30533,30534,30536,30537,30538,30539,30540,30541,30542,30543,30546,30547,30548,30549,30550,30551,30552,30553,30556,34180,38649,20445,22561,39281,23453,25265,25253,26292,35961,40077,29190,26479,30865,24754,21329,21271,36744,32972,36125,38049,20493,29384,22791,24811,28953,34987,22868,33519,26412,31528,23849,32503,29997,27893,36454,36856,36924,40763,27604,37145,31508,24444,30887,34006,34109,27605,27609,27606,24065,24199,30201,38381,25949,24330,24517,36767,22721,33218,36991,38491,38829,36793,32534,36140,25153,20415,21464,21342,36776,36777,36779,36941,26631,24426,33176,34920,40150,24971,21035,30250,24428,25996,28626,28392,23486,25672,20853,20912,26564,19993,31177,39292,28851,30557,30558,30559,30560,30564,30567,30569,30570,30573,30574,30575,30576,30577,30578,30579,30580,30581,30582,30583,30584,30586,30587,30588,30593,30594,30595,30598,30599,30600,30601,30602,30603,30607,30608,30611,30612,30613,30614,30615,30616,30617,30618,30619,30620,30621,30622,30625,30627,30628,30630,30632,30635,30637,30638,30639,30641,30642,30644,30646,30647,30648,30649,30650,30652,30654,30656,30657,30658,30659,30660,30661,30662,30663,30664,30665,30666,30667,30668,30670,30671,30672,30673,30674,30675,30676,30677,30678,30680,30681,30682,30685,30686,30687,30688,30689,30692,30149,24182,29627,33760,25773,25320,38069,27874,21338,21187,25615,38082,31636,20271,24091,33334,33046,33162,28196,27850,39539,25429,21340,21754,34917,22496,19981,24067,27493,31807,37096,24598,25830,29468,35009,26448,25165,36130,30572,36393,37319,24425,33756,34081,39184,21442,34453,27531,24813,24808,28799,33485,33329,20179,27815,34255,25805,31961,27133,26361,33609,21397,31574,20391,20876,27979,23618,36461,25554,21449,33580,33590,26597,30900,25661,23519,23700,24046,35815,25286,26612,35962,25600,25530,34633,39307,35863,32544,38130,20135,38416,39076,26124,29462,30694,30696,30698,30703,30704,30705,30706,30708,30709,30711,30713,30714,30715,30716,30723,30724,30725,30726,30727,30728,30730,30731,30734,30735,30736,30739,30741,30745,30747,30750,30752,30753,30754,30756,30760,30762,30763,30766,30767,30769,30770,30771,30773,30774,30781,30783,30785,30786,30787,30788,30790,30792,30793,30794,30795,30797,30799,30801,30803,30804,30808,30809,30810,30811,30812,30814,30815,30816,30817,30818,30819,30820,30821,30822,30823,30824,30825,30831,30832,30833,30834,30835,30836,30837,30838,30840,30841,30842,30843,30845,30846,30847,30848,30849,30850,30851,22330,23581,24120,38271,20607,32928,21378,25950,30021,21809,20513,36229,25220,38046,26397,22066,28526,24034,21557,28818,36710,25199,25764,25507,24443,28552,37108,33251,36784,23576,26216,24561,27785,38472,36225,34924,25745,31216,22478,27225,25104,21576,20056,31243,24809,28548,35802,25215,36894,39563,31204,21507,30196,25345,21273,27744,36831,24347,39536,32827,40831,20360,23610,36196,32709,26021,28861,20805,20914,34411,23815,23456,25277,37228,30068,36364,31264,24833,31609,20167,32504,30597,19985,33261,21021,20986,27249,21416,36487,38148,38607,28353,38500,26970,30852,30853,30854,30856,30858,30859,30863,30864,30866,30868,30869,30870,30873,30877,30878,30880,30882,30884,30886,30888,30889,30890,30891,30892,30893,30894,30895,30901,30902,30903,30904,30906,30907,30908,30909,30911,30912,30914,30915,30916,30918,30919,30920,30924,30925,30926,30927,30929,30930,30931,30934,30935,30936,30938,30939,30940,30941,30942,30943,30944,30945,30946,30947,30948,30949,30950,30951,30953,30954,30955,30957,30958,30959,30960,30961,30963,30965,30966,30968,30969,30971,30972,30973,30974,30975,30976,30978,30979,30980,30982,30983,30984,30985,30986,30987,30988,30784,20648,30679,25616,35302,22788,25571,24029,31359,26941,20256,33337,21912,20018,30126,31383,24162,24202,38383,21019,21561,28810,25462,38180,22402,26149,26943,37255,21767,28147,32431,34850,25139,32496,30133,33576,30913,38604,36766,24904,29943,35789,27492,21050,36176,27425,32874,33905,22257,21254,20174,19995,20945,31895,37259,31751,20419,36479,31713,31388,25703,23828,20652,33030,30209,31929,28140,32736,26449,23384,23544,30923,25774,25619,25514,25387,38169,25645,36798,31572,30249,25171,22823,21574,27513,20643,25140,24102,27526,20195,36151,34955,24453,36910,30989,30990,30991,30992,30993,30994,30996,30997,30998,30999,31e3,31001,31002,31003,31004,31005,31007,31008,31009,31010,31011,31013,31014,31015,31016,31017,31018,31019,31020,31021,31022,31023,31024,31025,31026,31027,31029,31030,31031,31032,31033,31037,31039,31042,31043,31044,31045,31047,31050,31051,31052,31053,31054,31055,31056,31057,31058,31060,31061,31064,31065,31073,31075,31076,31078,31081,31082,31083,31084,31086,31088,31089,31090,31091,31092,31093,31094,31097,31099,31100,31101,31102,31103,31106,31107,31110,31111,31112,31113,31115,31116,31117,31118,31120,31121,31122,24608,32829,25285,20025,21333,37112,25528,32966,26086,27694,20294,24814,28129,35806,24377,34507,24403,25377,20826,33633,26723,20992,25443,36424,20498,23707,31095,23548,21040,31291,24764,36947,30423,24503,24471,30340,36460,28783,30331,31561,30634,20979,37011,22564,20302,28404,36842,25932,31515,29380,28068,32735,23265,25269,24213,22320,33922,31532,24093,24351,36882,32532,39072,25474,28359,30872,28857,20856,38747,22443,30005,20291,30008,24215,24806,22880,28096,27583,30857,21500,38613,20939,20993,25481,21514,38035,35843,36300,29241,30879,34678,36845,35853,21472,31123,31124,31125,31126,31127,31128,31129,31131,31132,31133,31134,31135,31136,31137,31138,31139,31140,31141,31142,31144,31145,31146,31147,31148,31149,31150,31151,31152,31153,31154,31156,31157,31158,31159,31160,31164,31167,31170,31172,31173,31175,31176,31178,31180,31182,31183,31184,31187,31188,31190,31191,31193,31194,31195,31196,31197,31198,31200,31201,31202,31205,31208,31210,31212,31214,31217,31218,31219,31220,31221,31222,31223,31225,31226,31228,31230,31231,31233,31236,31237,31239,31240,31241,31242,31244,31247,31248,31249,31250,31251,31253,31254,31256,31257,31259,31260,19969,30447,21486,38025,39030,40718,38189,23450,35746,20002,19996,20908,33891,25026,21160,26635,20375,24683,20923,27934,20828,25238,26007,38497,35910,36887,30168,37117,30563,27602,29322,29420,35835,22581,30585,36172,26460,38208,32922,24230,28193,22930,31471,30701,38203,27573,26029,32526,22534,20817,38431,23545,22697,21544,36466,25958,39039,22244,38045,30462,36929,25479,21702,22810,22842,22427,36530,26421,36346,33333,21057,24816,22549,34558,23784,40517,20420,39069,35769,23077,24694,21380,25212,36943,37122,39295,24681,32780,20799,32819,23572,39285,27953,20108,31261,31263,31265,31266,31268,31269,31270,31271,31272,31273,31274,31275,31276,31277,31278,31279,31280,31281,31282,31284,31285,31286,31288,31290,31294,31296,31297,31298,31299,31300,31301,31303,31304,31305,31306,31307,31308,31309,31310,31311,31312,31314,31315,31316,31317,31318,31320,31321,31322,31323,31324,31325,31326,31327,31328,31329,31330,31331,31332,31333,31334,31335,31336,31337,31338,31339,31340,31341,31342,31343,31345,31346,31347,31349,31355,31356,31357,31358,31362,31365,31367,31369,31370,31371,31372,31374,31375,31376,31379,31380,31385,31386,31387,31390,31393,31394,36144,21457,32602,31567,20240,20047,38400,27861,29648,34281,24070,30058,32763,27146,30718,38034,32321,20961,28902,21453,36820,33539,36137,29359,39277,27867,22346,33459,26041,32938,25151,38450,22952,20223,35775,32442,25918,33778,38750,21857,39134,32933,21290,35837,21536,32954,24223,27832,36153,33452,37210,21545,27675,20998,32439,22367,28954,27774,31881,22859,20221,24575,24868,31914,20016,23553,26539,34562,23792,38155,39118,30127,28925,36898,20911,32541,35773,22857,20964,20315,21542,22827,25975,32932,23413,25206,25282,36752,24133,27679,31526,20239,20440,26381,31395,31396,31399,31401,31402,31403,31406,31407,31408,31409,31410,31412,31413,31414,31415,31416,31417,31418,31419,31420,31421,31422,31424,31425,31426,31427,31428,31429,31430,31431,31432,31433,31434,31436,31437,31438,31439,31440,31441,31442,31443,31444,31445,31447,31448,31450,31451,31452,31453,31457,31458,31460,31463,31464,31465,31466,31467,31468,31470,31472,31473,31474,31475,31476,31477,31478,31479,31480,31483,31484,31486,31488,31489,31490,31493,31495,31497,31500,31501,31502,31504,31506,31507,31510,31511,31512,31514,31516,31517,31519,31521,31522,31523,31527,31529,31533,28014,28074,31119,34993,24343,29995,25242,36741,20463,37340,26023,33071,33105,24220,33104,36212,21103,35206,36171,22797,20613,20184,38428,29238,33145,36127,23500,35747,38468,22919,32538,21648,22134,22030,35813,25913,27010,38041,30422,28297,24178,29976,26438,26577,31487,32925,36214,24863,31174,25954,36195,20872,21018,38050,32568,32923,32434,23703,28207,26464,31705,30347,39640,33167,32660,31957,25630,38224,31295,21578,21733,27468,25601,25096,40509,33011,30105,21106,38761,33883,26684,34532,38401,38548,38124,20010,21508,32473,26681,36319,32789,26356,24218,32697,31535,31536,31538,31540,31541,31542,31543,31545,31547,31549,31551,31552,31553,31554,31555,31556,31558,31560,31562,31565,31566,31571,31573,31575,31577,31580,31582,31583,31585,31587,31588,31589,31590,31591,31592,31593,31594,31595,31596,31597,31599,31600,31603,31604,31606,31608,31610,31612,31613,31615,31617,31618,31619,31620,31622,31623,31624,31625,31626,31627,31628,31630,31631,31633,31634,31635,31638,31640,31641,31642,31643,31646,31647,31648,31651,31652,31653,31662,31663,31664,31666,31667,31669,31670,31671,31673,31674,31675,31676,31677,31678,31679,31680,31682,31683,31684,22466,32831,26775,24037,25915,21151,24685,40858,20379,36524,20844,23467,24339,24041,27742,25329,36129,20849,38057,21246,27807,33503,29399,22434,26500,36141,22815,36764,33735,21653,31629,20272,27837,23396,22993,40723,21476,34506,39592,35895,32929,25925,39038,22266,38599,21038,29916,21072,23521,25346,35074,20054,25296,24618,26874,20851,23448,20896,35266,31649,39302,32592,24815,28748,36143,20809,24191,36891,29808,35268,22317,30789,24402,40863,38394,36712,39740,35809,30328,26690,26588,36330,36149,21053,36746,28378,26829,38149,37101,22269,26524,35065,36807,21704,31685,31688,31689,31690,31691,31693,31694,31695,31696,31698,31700,31701,31702,31703,31704,31707,31708,31710,31711,31712,31714,31715,31716,31719,31720,31721,31723,31724,31725,31727,31728,31730,31731,31732,31733,31734,31736,31737,31738,31739,31741,31743,31744,31745,31746,31747,31748,31749,31750,31752,31753,31754,31757,31758,31760,31761,31762,31763,31764,31765,31767,31768,31769,31770,31771,31772,31773,31774,31776,31777,31778,31779,31780,31781,31784,31785,31787,31788,31789,31790,31791,31792,31793,31794,31795,31796,31797,31798,31799,31801,31802,31803,31804,31805,31806,31810,39608,23401,28023,27686,20133,23475,39559,37219,25e3,37039,38889,21547,28085,23506,20989,21898,32597,32752,25788,25421,26097,25022,24717,28938,27735,27721,22831,26477,33322,22741,22158,35946,27627,37085,22909,32791,21495,28009,21621,21917,33655,33743,26680,31166,21644,20309,21512,30418,35977,38402,27827,28088,36203,35088,40548,36154,22079,40657,30165,24456,29408,24680,21756,20136,27178,34913,24658,36720,21700,28888,34425,40511,27946,23439,24344,32418,21897,20399,29492,21564,21402,20505,21518,21628,20046,24573,29786,22774,33899,32993,34676,29392,31946,28246,31811,31812,31813,31814,31815,31816,31817,31818,31819,31820,31822,31823,31824,31825,31826,31827,31828,31829,31830,31831,31832,31833,31834,31835,31836,31837,31838,31839,31840,31841,31842,31843,31844,31845,31846,31847,31848,31849,31850,31851,31852,31853,31854,31855,31856,31857,31858,31861,31862,31863,31864,31865,31866,31870,31871,31872,31873,31874,31875,31876,31877,31878,31879,31880,31882,31883,31884,31885,31886,31887,31888,31891,31892,31894,31897,31898,31899,31904,31905,31907,31910,31911,31912,31913,31915,31916,31917,31919,31920,31924,31925,31926,31927,31928,31930,31931,24359,34382,21804,25252,20114,27818,25143,33457,21719,21326,29502,28369,30011,21010,21270,35805,27088,24458,24576,28142,22351,27426,29615,26707,36824,32531,25442,24739,21796,30186,35938,28949,28067,23462,24187,33618,24908,40644,30970,34647,31783,30343,20976,24822,29004,26179,24140,24653,35854,28784,25381,36745,24509,24674,34516,22238,27585,24724,24935,21321,24800,26214,36159,31229,20250,28905,27719,35763,35826,32472,33636,26127,23130,39746,27985,28151,35905,27963,20249,28779,33719,25110,24785,38669,36135,31096,20987,22334,22522,26426,30072,31293,31215,31637,31935,31936,31938,31939,31940,31942,31945,31947,31950,31951,31952,31953,31954,31955,31956,31960,31962,31963,31965,31966,31969,31970,31971,31972,31973,31974,31975,31977,31978,31979,31980,31981,31982,31984,31985,31986,31987,31988,31989,31990,31991,31993,31994,31996,31997,31998,31999,32e3,32001,32002,32003,32004,32005,32006,32007,32008,32009,32011,32012,32013,32014,32015,32016,32017,32018,32019,32020,32021,32022,32023,32024,32025,32026,32027,32028,32029,32030,32031,32033,32035,32036,32037,32038,32040,32041,32042,32044,32045,32046,32048,32049,32050,32051,32052,32053,32054,32908,39269,36857,28608,35749,40481,23020,32489,32521,21513,26497,26840,36753,31821,38598,21450,24613,30142,27762,21363,23241,32423,25380,20960,33034,24049,34015,25216,20864,23395,20238,31085,21058,24760,27982,23492,23490,35745,35760,26082,24524,38469,22931,32487,32426,22025,26551,22841,20339,23478,21152,33626,39050,36158,30002,38078,20551,31292,20215,26550,39550,23233,27516,30417,22362,23574,31546,38388,29006,20860,32937,33392,22904,32516,33575,26816,26604,30897,30839,25315,25441,31616,20461,21098,20943,33616,27099,37492,36341,36145,35265,38190,31661,20214,32055,32056,32057,32058,32059,32060,32061,32062,32063,32064,32065,32066,32067,32068,32069,32070,32071,32072,32073,32074,32075,32076,32077,32078,32079,32080,32081,32082,32083,32084,32085,32086,32087,32088,32089,32090,32091,32092,32093,32094,32095,32096,32097,32098,32099,32100,32101,32102,32103,32104,32105,32106,32107,32108,32109,32111,32112,32113,32114,32115,32116,32117,32118,32120,32121,32122,32123,32124,32125,32126,32127,32128,32129,32130,32131,32132,32133,32134,32135,32136,32137,32138,32139,32140,32141,32142,32143,32144,32145,32146,32147,32148,32149,32150,32151,32152,20581,33328,21073,39279,28176,28293,28071,24314,20725,23004,23558,27974,27743,30086,33931,26728,22870,35762,21280,37233,38477,34121,26898,30977,28966,33014,20132,37066,27975,39556,23047,22204,25605,38128,30699,20389,33050,29409,35282,39290,32564,32478,21119,25945,37237,36735,36739,21483,31382,25581,25509,30342,31224,34903,38454,25130,21163,33410,26708,26480,25463,30571,31469,27905,32467,35299,22992,25106,34249,33445,30028,20511,20171,30117,35819,23626,24062,31563,26020,37329,20170,27941,35167,32039,38182,20165,35880,36827,38771,26187,31105,36817,28908,28024,32153,32154,32155,32156,32157,32158,32159,32160,32161,32162,32163,32164,32165,32167,32168,32169,32170,32171,32172,32173,32175,32176,32177,32178,32179,32180,32181,32182,32183,32184,32185,32186,32187,32188,32189,32190,32191,32192,32193,32194,32195,32196,32197,32198,32199,32200,32201,32202,32203,32204,32205,32206,32207,32208,32209,32210,32211,32212,32213,32214,32215,32216,32217,32218,32219,32220,32221,32222,32223,32224,32225,32226,32227,32228,32229,32230,32231,32232,32233,32234,32235,32236,32237,32238,32239,32240,32241,32242,32243,32244,32245,32246,32247,32248,32249,32250,23613,21170,33606,20834,33550,30555,26230,40120,20140,24778,31934,31923,32463,20117,35686,26223,39048,38745,22659,25964,38236,24452,30153,38742,31455,31454,20928,28847,31384,25578,31350,32416,29590,38893,20037,28792,20061,37202,21417,25937,26087,33276,33285,21646,23601,30106,38816,25304,29401,30141,23621,39545,33738,23616,21632,30697,20030,27822,32858,25298,25454,24040,20855,36317,36382,38191,20465,21477,24807,28844,21095,25424,40515,23071,20518,30519,21367,32482,25733,25899,25225,25496,20500,29237,35273,20915,35776,32477,22343,33740,38055,20891,21531,23803,32251,32252,32253,32254,32255,32256,32257,32258,32259,32260,32261,32262,32263,32264,32265,32266,32267,32268,32269,32270,32271,32272,32273,32274,32275,32276,32277,32278,32279,32280,32281,32282,32283,32284,32285,32286,32287,32288,32289,32290,32291,32292,32293,32294,32295,32296,32297,32298,32299,32300,32301,32302,32303,32304,32305,32306,32307,32308,32309,32310,32311,32312,32313,32314,32316,32317,32318,32319,32320,32322,32323,32324,32325,32326,32328,32329,32330,32331,32332,32333,32334,32335,32336,32337,32338,32339,32340,32341,32342,32343,32344,32345,32346,32347,32348,32349,20426,31459,27994,37089,39567,21888,21654,21345,21679,24320,25577,26999,20975,24936,21002,22570,21208,22350,30733,30475,24247,24951,31968,25179,25239,20130,28821,32771,25335,28900,38752,22391,33499,26607,26869,30933,39063,31185,22771,21683,21487,28212,20811,21051,23458,35838,32943,21827,22438,24691,22353,21549,31354,24656,23380,25511,25248,21475,25187,23495,26543,21741,31391,33510,37239,24211,35044,22840,22446,25358,36328,33007,22359,31607,20393,24555,23485,27454,21281,31568,29378,26694,30719,30518,26103,20917,20111,30420,23743,31397,33909,22862,39745,20608,32350,32351,32352,32353,32354,32355,32356,32357,32358,32359,32360,32361,32362,32363,32364,32365,32366,32367,32368,32369,32370,32371,32372,32373,32374,32375,32376,32377,32378,32379,32380,32381,32382,32383,32384,32385,32387,32388,32389,32390,32391,32392,32393,32394,32395,32396,32397,32398,32399,32400,32401,32402,32403,32404,32405,32406,32407,32408,32409,32410,32412,32413,32414,32430,32436,32443,32444,32470,32484,32492,32505,32522,32528,32542,32567,32569,32571,32572,32573,32574,32575,32576,32577,32579,32582,32583,32584,32585,32586,32587,32588,32589,32590,32591,32594,32595,39304,24871,28291,22372,26118,25414,22256,25324,25193,24275,38420,22403,25289,21895,34593,33098,36771,21862,33713,26469,36182,34013,23146,26639,25318,31726,38417,20848,28572,35888,25597,35272,25042,32518,28866,28389,29701,27028,29436,24266,37070,26391,28010,25438,21171,29282,32769,20332,23013,37226,28889,28061,21202,20048,38647,38253,34174,30922,32047,20769,22418,25794,32907,31867,27882,26865,26974,20919,21400,26792,29313,40654,31729,29432,31163,28435,29702,26446,37324,40100,31036,33673,33620,21519,26647,20029,21385,21169,30782,21382,21033,20616,20363,20432,32598,32601,32603,32604,32605,32606,32608,32611,32612,32613,32614,32615,32619,32620,32621,32623,32624,32627,32629,32630,32631,32632,32634,32635,32636,32637,32639,32640,32642,32643,32644,32645,32646,32647,32648,32649,32651,32653,32655,32656,32657,32658,32659,32661,32662,32663,32664,32665,32667,32668,32672,32674,32675,32677,32678,32680,32681,32682,32683,32684,32685,32686,32689,32691,32692,32693,32694,32695,32698,32699,32702,32704,32706,32707,32708,32710,32711,32712,32713,32715,32717,32719,32720,32721,32722,32723,32726,32727,32729,32730,32731,32732,32733,32734,32738,32739,30178,31435,31890,27813,38582,21147,29827,21737,20457,32852,33714,36830,38256,24265,24604,28063,24088,25947,33080,38142,24651,28860,32451,31918,20937,26753,31921,33391,20004,36742,37327,26238,20142,35845,25769,32842,20698,30103,29134,23525,36797,28518,20102,25730,38243,24278,26009,21015,35010,28872,21155,29454,29747,26519,30967,38678,20020,37051,40158,28107,20955,36161,21533,25294,29618,33777,38646,40836,38083,20278,32666,20940,28789,38517,23725,39046,21478,20196,28316,29705,27060,30827,39311,30041,21016,30244,27969,26611,20845,40857,32843,21657,31548,31423,32740,32743,32744,32746,32747,32748,32749,32751,32754,32756,32757,32758,32759,32760,32761,32762,32765,32766,32767,32770,32775,32776,32777,32778,32782,32783,32785,32787,32794,32795,32797,32798,32799,32801,32803,32804,32811,32812,32813,32814,32815,32816,32818,32820,32825,32826,32828,32830,32832,32833,32836,32837,32839,32840,32841,32846,32847,32848,32849,32851,32853,32854,32855,32857,32859,32860,32861,32862,32863,32864,32865,32866,32867,32868,32869,32870,32871,32872,32875,32876,32877,32878,32879,32880,32882,32883,32884,32885,32886,32887,32888,32889,32890,32891,32892,32893,38534,22404,25314,38471,27004,23044,25602,31699,28431,38475,33446,21346,39045,24208,28809,25523,21348,34383,40065,40595,30860,38706,36335,36162,40575,28510,31108,24405,38470,25134,39540,21525,38109,20387,26053,23653,23649,32533,34385,27695,24459,29575,28388,32511,23782,25371,23402,28390,21365,20081,25504,30053,25249,36718,20262,20177,27814,32438,35770,33821,34746,32599,36923,38179,31657,39585,35064,33853,27931,39558,32476,22920,40635,29595,30721,34434,39532,39554,22043,21527,22475,20080,40614,21334,36808,33033,30610,39314,34542,28385,34067,26364,24930,28459,32894,32897,32898,32901,32904,32906,32909,32910,32911,32912,32913,32914,32916,32917,32919,32921,32926,32931,32934,32935,32936,32940,32944,32947,32949,32950,32952,32953,32955,32965,32967,32968,32969,32970,32971,32975,32976,32977,32978,32979,32980,32981,32984,32991,32992,32994,32995,32998,33006,33013,33015,33017,33019,33022,33023,33024,33025,33027,33028,33029,33031,33032,33035,33036,33045,33047,33049,33051,33052,33053,33055,33056,33057,33058,33059,33060,33061,33062,33063,33064,33065,33066,33067,33069,33070,33072,33075,33076,33077,33079,33081,33082,33083,33084,33085,33087,35881,33426,33579,30450,27667,24537,33725,29483,33541,38170,27611,30683,38086,21359,33538,20882,24125,35980,36152,20040,29611,26522,26757,37238,38665,29028,27809,30473,23186,38209,27599,32654,26151,23504,22969,23194,38376,38391,20204,33804,33945,27308,30431,38192,29467,26790,23391,30511,37274,38753,31964,36855,35868,24357,31859,31192,35269,27852,34588,23494,24130,26825,30496,32501,20885,20813,21193,23081,32517,38754,33495,25551,30596,34256,31186,28218,24217,22937,34065,28781,27665,25279,30399,25935,24751,38397,26126,34719,40483,38125,21517,21629,35884,25720,33088,33089,33090,33091,33092,33093,33095,33097,33101,33102,33103,33106,33110,33111,33112,33115,33116,33117,33118,33119,33121,33122,33123,33124,33126,33128,33130,33131,33132,33135,33138,33139,33141,33142,33143,33144,33153,33155,33156,33157,33158,33159,33161,33163,33164,33165,33166,33168,33170,33171,33172,33173,33174,33175,33177,33178,33182,33183,33184,33185,33186,33188,33189,33191,33193,33195,33196,33197,33198,33199,33200,33201,33202,33204,33205,33206,33207,33208,33209,33212,33213,33214,33215,33220,33221,33223,33224,33225,33227,33229,33230,33231,33232,33233,33234,33235,25721,34321,27169,33180,30952,25705,39764,25273,26411,33707,22696,40664,27819,28448,23518,38476,35851,29279,26576,25287,29281,20137,22982,27597,22675,26286,24149,21215,24917,26408,30446,30566,29287,31302,25343,21738,21584,38048,37027,23068,32435,27670,20035,22902,32784,22856,21335,30007,38590,22218,25376,33041,24700,38393,28118,21602,39297,20869,23273,33021,22958,38675,20522,27877,23612,25311,20320,21311,33147,36870,28346,34091,25288,24180,30910,25781,25467,24565,23064,37247,40479,23615,25423,32834,23421,21870,38218,38221,28037,24744,26592,29406,20957,23425,33236,33237,33238,33239,33240,33241,33242,33243,33244,33245,33246,33247,33248,33249,33250,33252,33253,33254,33256,33257,33259,33262,33263,33264,33265,33266,33269,33270,33271,33272,33273,33274,33277,33279,33283,33287,33288,33289,33290,33291,33294,33295,33297,33299,33301,33302,33303,33304,33305,33306,33309,33312,33316,33317,33318,33319,33321,33326,33330,33338,33340,33341,33343,33344,33345,33346,33347,33349,33350,33352,33354,33356,33357,33358,33360,33361,33362,33363,33364,33365,33366,33367,33369,33371,33372,33373,33374,33376,33377,33378,33379,33380,33381,33382,33383,33385,25319,27870,29275,25197,38062,32445,33043,27987,20892,24324,22900,21162,24594,22899,26262,34384,30111,25386,25062,31983,35834,21734,27431,40485,27572,34261,21589,20598,27812,21866,36276,29228,24085,24597,29750,25293,25490,29260,24472,28227,27966,25856,28504,30424,30928,30460,30036,21028,21467,20051,24222,26049,32810,32982,25243,21638,21032,28846,34957,36305,27873,21624,32986,22521,35060,36180,38506,37197,20329,27803,21943,30406,30768,25256,28921,28558,24429,34028,26842,30844,31735,33192,26379,40527,25447,30896,22383,30738,38713,25209,25259,21128,29749,27607,33386,33387,33388,33389,33393,33397,33398,33399,33400,33403,33404,33408,33409,33411,33413,33414,33415,33417,33420,33424,33427,33428,33429,33430,33434,33435,33438,33440,33442,33443,33447,33458,33461,33462,33466,33467,33468,33471,33472,33474,33475,33477,33478,33481,33488,33494,33497,33498,33501,33506,33511,33512,33513,33514,33516,33517,33518,33520,33522,33523,33525,33526,33528,33530,33532,33533,33534,33535,33536,33546,33547,33549,33552,33554,33555,33558,33560,33561,33565,33566,33567,33568,33569,33570,33571,33572,33573,33574,33577,33578,33582,33584,33586,33591,33595,33597,21860,33086,30130,30382,21305,30174,20731,23617,35692,31687,20559,29255,39575,39128,28418,29922,31080,25735,30629,25340,39057,36139,21697,32856,20050,22378,33529,33805,24179,20973,29942,35780,23631,22369,27900,39047,23110,30772,39748,36843,31893,21078,25169,38138,20166,33670,33889,33769,33970,22484,26420,22275,26222,28006,35889,26333,28689,26399,27450,26646,25114,22971,19971,20932,28422,26578,27791,20854,26827,22855,27495,30054,23822,33040,40784,26071,31048,31041,39569,36215,23682,20062,20225,21551,22865,30732,22120,27668,36804,24323,27773,27875,35755,25488,33598,33599,33601,33602,33604,33605,33608,33610,33611,33612,33613,33614,33619,33621,33622,33623,33624,33625,33629,33634,33648,33649,33650,33651,33652,33653,33654,33657,33658,33662,33663,33664,33665,33666,33667,33668,33671,33672,33674,33675,33676,33677,33679,33680,33681,33684,33685,33686,33687,33689,33690,33693,33695,33697,33698,33699,33700,33701,33702,33703,33708,33709,33710,33711,33717,33723,33726,33727,33730,33731,33732,33734,33736,33737,33739,33741,33742,33744,33745,33746,33747,33749,33751,33753,33754,33755,33758,33762,33763,33764,33766,33767,33768,33771,33772,33773,24688,27965,29301,25190,38030,38085,21315,36801,31614,20191,35878,20094,40660,38065,38067,21069,28508,36963,27973,35892,22545,23884,27424,27465,26538,21595,33108,32652,22681,34103,24378,25250,27207,38201,25970,24708,26725,30631,20052,20392,24039,38808,25772,32728,23789,20431,31373,20999,33540,19988,24623,31363,38054,20405,20146,31206,29748,21220,33465,25810,31165,23517,27777,38738,36731,27682,20542,21375,28165,25806,26228,27696,24773,39031,35831,24198,29756,31351,31179,19992,37041,29699,27714,22234,37195,27845,36235,21306,34502,26354,36527,23624,39537,28192,33774,33775,33779,33780,33781,33782,33783,33786,33787,33788,33790,33791,33792,33794,33797,33799,33800,33801,33802,33808,33810,33811,33812,33813,33814,33815,33817,33818,33819,33822,33823,33824,33825,33826,33827,33833,33834,33835,33836,33837,33838,33839,33840,33842,33843,33844,33845,33846,33847,33849,33850,33851,33854,33855,33856,33857,33858,33859,33860,33861,33863,33864,33865,33866,33867,33868,33869,33870,33871,33872,33874,33875,33876,33877,33878,33880,33885,33886,33887,33888,33890,33892,33893,33894,33895,33896,33898,33902,33903,33904,33906,33908,33911,33913,33915,33916,21462,23094,40843,36259,21435,22280,39079,26435,37275,27849,20840,30154,25331,29356,21048,21149,32570,28820,30264,21364,40522,27063,30830,38592,35033,32676,28982,29123,20873,26579,29924,22756,25880,22199,35753,39286,25200,32469,24825,28909,22764,20161,20154,24525,38887,20219,35748,20995,22922,32427,25172,20173,26085,25102,33592,33993,33635,34701,29076,28342,23481,32466,20887,25545,26580,32905,33593,34837,20754,23418,22914,36785,20083,27741,20837,35109,36719,38446,34122,29790,38160,38384,28070,33509,24369,25746,27922,33832,33134,40131,22622,36187,19977,21441,33917,33918,33919,33920,33921,33923,33924,33925,33926,33930,33933,33935,33936,33937,33938,33939,33940,33941,33942,33944,33946,33947,33949,33950,33951,33952,33954,33955,33956,33957,33958,33959,33960,33961,33962,33963,33964,33965,33966,33968,33969,33971,33973,33974,33975,33979,33980,33982,33984,33986,33987,33989,33990,33991,33992,33995,33996,33998,33999,34002,34004,34005,34007,34008,34009,34010,34011,34012,34014,34017,34018,34020,34023,34024,34025,34026,34027,34029,34030,34031,34033,34034,34035,34036,34037,34038,34039,34040,34041,34042,34043,34045,34046,34048,34049,34050,20254,25955,26705,21971,20007,25620,39578,25195,23234,29791,33394,28073,26862,20711,33678,30722,26432,21049,27801,32433,20667,21861,29022,31579,26194,29642,33515,26441,23665,21024,29053,34923,38378,38485,25797,36193,33203,21892,27733,25159,32558,22674,20260,21830,36175,26188,19978,23578,35059,26786,25422,31245,28903,33421,21242,38902,23569,21736,37045,32461,22882,36170,34503,33292,33293,36198,25668,23556,24913,28041,31038,35774,30775,30003,21627,20280,36523,28145,23072,32453,31070,27784,23457,23158,29978,32958,24910,28183,22768,29983,29989,29298,21319,32499,34051,34052,34053,34054,34055,34056,34057,34058,34059,34061,34062,34063,34064,34066,34068,34069,34070,34072,34073,34075,34076,34077,34078,34080,34082,34083,34084,34085,34086,34087,34088,34089,34090,34093,34094,34095,34096,34097,34098,34099,34100,34101,34102,34110,34111,34112,34113,34114,34116,34117,34118,34119,34123,34124,34125,34126,34127,34128,34129,34130,34131,34132,34133,34135,34136,34138,34139,34140,34141,34143,34144,34145,34146,34147,34149,34150,34151,34153,34154,34155,34156,34157,34158,34159,34160,34161,34163,34165,34166,34167,34168,34172,34173,34175,34176,34177,30465,30427,21097,32988,22307,24072,22833,29422,26045,28287,35799,23608,34417,21313,30707,25342,26102,20160,39135,34432,23454,35782,21490,30690,20351,23630,39542,22987,24335,31034,22763,19990,26623,20107,25325,35475,36893,21183,26159,21980,22124,36866,20181,20365,37322,39280,27663,24066,24643,23460,35270,35797,25910,25163,39318,23432,23551,25480,21806,21463,30246,20861,34092,26530,26803,27530,25234,36755,21460,33298,28113,30095,20070,36174,23408,29087,34223,26257,26329,32626,34560,40653,40736,23646,26415,36848,26641,26463,25101,31446,22661,24246,25968,28465,34178,34179,34182,34184,34185,34186,34187,34188,34189,34190,34192,34193,34194,34195,34196,34197,34198,34199,34200,34201,34202,34205,34206,34207,34208,34209,34210,34211,34213,34214,34215,34217,34219,34220,34221,34225,34226,34227,34228,34229,34230,34232,34234,34235,34236,34237,34238,34239,34240,34242,34243,34244,34245,34246,34247,34248,34250,34251,34252,34253,34254,34257,34258,34260,34262,34263,34264,34265,34266,34267,34269,34270,34271,34272,34273,34274,34275,34277,34278,34279,34280,34282,34283,34284,34285,34286,34287,34288,34289,34290,34291,34292,34293,34294,34295,34296,24661,21047,32781,25684,34928,29993,24069,26643,25332,38684,21452,29245,35841,27700,30561,31246,21550,30636,39034,33308,35828,30805,26388,28865,26031,25749,22070,24605,31169,21496,19997,27515,32902,23546,21987,22235,20282,20284,39282,24051,26494,32824,24578,39042,36865,23435,35772,35829,25628,33368,25822,22013,33487,37221,20439,32032,36895,31903,20723,22609,28335,23487,35785,32899,37240,33948,31639,34429,38539,38543,32485,39635,30862,23681,31319,36930,38567,31071,23385,25439,31499,34001,26797,21766,32553,29712,32034,38145,25152,22604,20182,23427,22905,22612,34297,34298,34300,34301,34302,34304,34305,34306,34307,34308,34310,34311,34312,34313,34314,34315,34316,34317,34318,34319,34320,34322,34323,34324,34325,34327,34328,34329,34330,34331,34332,34333,34334,34335,34336,34337,34338,34339,34340,34341,34342,34344,34346,34347,34348,34349,34350,34351,34352,34353,34354,34355,34356,34357,34358,34359,34361,34362,34363,34365,34366,34367,34368,34369,34370,34371,34372,34373,34374,34375,34376,34377,34378,34379,34380,34386,34387,34389,34390,34391,34392,34393,34395,34396,34397,34399,34400,34401,34403,34404,34405,34406,34407,34408,34409,34410,29549,25374,36427,36367,32974,33492,25260,21488,27888,37214,22826,24577,27760,22349,25674,36138,30251,28393,22363,27264,30192,28525,35885,35848,22374,27631,34962,30899,25506,21497,28845,27748,22616,25642,22530,26848,33179,21776,31958,20504,36538,28108,36255,28907,25487,28059,28372,32486,33796,26691,36867,28120,38518,35752,22871,29305,34276,33150,30140,35466,26799,21076,36386,38161,25552,39064,36420,21884,20307,26367,22159,24789,28053,21059,23625,22825,28155,22635,3e4,29980,24684,33300,33094,25361,26465,36834,30522,36339,36148,38081,24086,21381,21548,28867,34413,34415,34416,34418,34419,34420,34421,34422,34423,34424,34435,34436,34437,34438,34439,34440,34441,34446,34447,34448,34449,34450,34452,34454,34455,34456,34457,34458,34459,34462,34463,34464,34465,34466,34469,34470,34475,34477,34478,34482,34483,34487,34488,34489,34491,34492,34493,34494,34495,34497,34498,34499,34501,34504,34508,34509,34514,34515,34517,34518,34519,34522,34524,34525,34528,34529,34530,34531,34533,34534,34535,34536,34538,34539,34540,34543,34549,34550,34551,34554,34555,34556,34557,34559,34561,34564,34565,34566,34571,34572,34574,34575,34576,34577,34580,34582,27712,24311,20572,20141,24237,25402,33351,36890,26704,37230,30643,21516,38108,24420,31461,26742,25413,31570,32479,30171,20599,25237,22836,36879,20984,31171,31361,22270,24466,36884,28034,23648,22303,21520,20820,28237,22242,25512,39059,33151,34581,35114,36864,21534,23663,33216,25302,25176,33073,40501,38464,39534,39548,26925,22949,25299,21822,25366,21703,34521,27964,23043,29926,34972,27498,22806,35916,24367,28286,29609,39037,20024,28919,23436,30871,25405,26202,30358,24779,23451,23113,19975,33109,27754,29579,20129,26505,32593,24448,26106,26395,24536,22916,23041,34585,34587,34589,34591,34592,34596,34598,34599,34600,34602,34603,34604,34605,34607,34608,34610,34611,34613,34614,34616,34617,34618,34620,34621,34624,34625,34626,34627,34628,34629,34630,34634,34635,34637,34639,34640,34641,34642,34644,34645,34646,34648,34650,34651,34652,34653,34654,34655,34657,34658,34662,34663,34664,34665,34666,34667,34668,34669,34671,34673,34674,34675,34677,34679,34680,34681,34682,34687,34688,34689,34692,34694,34695,34697,34698,34700,34702,34703,34704,34705,34706,34708,34709,34710,34712,34713,34714,34715,34716,34717,34718,34720,34721,34722,34723,34724,24013,24494,21361,38886,36829,26693,22260,21807,24799,20026,28493,32500,33479,33806,22996,20255,20266,23614,32428,26410,34074,21619,30031,32963,21890,39759,20301,28205,35859,23561,24944,21355,30239,28201,34442,25991,38395,32441,21563,31283,32010,38382,21985,32705,29934,25373,34583,28065,31389,25105,26017,21351,25569,27779,24043,21596,38056,20044,27745,35820,23627,26080,33436,26791,21566,21556,27595,27494,20116,25410,21320,33310,20237,20398,22366,25098,38654,26212,29289,21247,21153,24735,35823,26132,29081,26512,35199,30802,30717,26224,22075,21560,38177,29306,34725,34726,34727,34729,34730,34734,34736,34737,34738,34740,34742,34743,34744,34745,34747,34748,34750,34751,34753,34754,34755,34756,34757,34759,34760,34761,34764,34765,34766,34767,34768,34772,34773,34774,34775,34776,34777,34778,34780,34781,34782,34783,34785,34786,34787,34788,34790,34791,34792,34793,34795,34796,34797,34799,34800,34801,34802,34803,34804,34805,34806,34807,34808,34810,34811,34812,34813,34815,34816,34817,34818,34820,34821,34822,34823,34824,34825,34827,34828,34829,34830,34831,34832,34833,34834,34836,34839,34840,34841,34842,34844,34845,34846,34847,34848,34851,31232,24687,24076,24713,33181,22805,24796,29060,28911,28330,27728,29312,27268,34989,24109,20064,23219,21916,38115,27927,31995,38553,25103,32454,30606,34430,21283,38686,36758,26247,23777,20384,29421,19979,21414,22799,21523,25472,38184,20808,20185,40092,32420,21688,36132,34900,33335,38386,28046,24358,23244,26174,38505,29616,29486,21439,33146,39301,32673,23466,38519,38480,32447,30456,21410,38262,39321,31665,35140,28248,20065,32724,31077,35814,24819,21709,20139,39033,24055,27233,20687,21521,35937,33831,30813,38660,21066,21742,22179,38144,28040,23477,28102,26195,34852,34853,34854,34855,34856,34857,34858,34859,34860,34861,34862,34863,34864,34865,34867,34868,34869,34870,34871,34872,34874,34875,34877,34878,34879,34881,34882,34883,34886,34887,34888,34889,34890,34891,34894,34895,34896,34897,34898,34899,34901,34902,34904,34906,34907,34908,34909,34910,34911,34912,34918,34919,34922,34925,34927,34929,34931,34932,34933,34934,34936,34937,34938,34939,34940,34944,34947,34950,34951,34953,34954,34956,34958,34959,34960,34961,34963,34964,34965,34967,34968,34969,34970,34971,34973,34974,34975,34976,34977,34979,34981,34982,34983,34984,34985,34986,23567,23389,26657,32918,21880,31505,25928,26964,20123,27463,34638,38795,21327,25375,25658,37034,26012,32961,35856,20889,26800,21368,34809,25032,27844,27899,35874,23633,34218,33455,38156,27427,36763,26032,24571,24515,20449,34885,26143,33125,29481,24826,20852,21009,22411,24418,37026,34892,37266,24184,26447,24615,22995,20804,20982,33016,21256,27769,38596,29066,20241,20462,32670,26429,21957,38152,31168,34966,32483,22687,25100,38656,34394,22040,39035,24464,35768,33988,37207,21465,26093,24207,30044,24676,32110,23167,32490,32493,36713,21927,23459,24748,26059,29572,34988,34990,34991,34992,34994,34995,34996,34997,34998,35e3,35001,35002,35003,35005,35006,35007,35008,35011,35012,35015,35016,35018,35019,35020,35021,35023,35024,35025,35027,35030,35031,35034,35035,35036,35037,35038,35040,35041,35046,35047,35049,35050,35051,35052,35053,35054,35055,35058,35061,35062,35063,35066,35067,35069,35071,35072,35073,35075,35076,35077,35078,35079,35080,35081,35083,35084,35085,35086,35087,35089,35092,35093,35094,35095,35096,35100,35101,35102,35103,35104,35106,35107,35108,35110,35111,35112,35113,35116,35117,35118,35119,35121,35122,35123,35125,35127,36873,30307,30505,32474,38772,34203,23398,31348,38634,34880,21195,29071,24490,26092,35810,23547,39535,24033,27529,27739,35757,35759,36874,36805,21387,25276,40486,40493,21568,20011,33469,29273,34460,23830,34905,28079,38597,21713,20122,35766,28937,21693,38409,28895,28153,30416,20005,30740,34578,23721,24310,35328,39068,38414,28814,27839,22852,25513,30524,34893,28436,33395,22576,29141,21388,30746,38593,21761,24422,28976,23476,35866,39564,27523,22830,40495,31207,26472,25196,20335,30113,32650,27915,38451,27687,20208,30162,20859,26679,28478,36992,33136,22934,29814,35128,35129,35130,35131,35132,35133,35134,35135,35136,35138,35139,35141,35142,35143,35144,35145,35146,35147,35148,35149,35150,35151,35152,35153,35154,35155,35156,35157,35158,35159,35160,35161,35162,35163,35164,35165,35168,35169,35170,35171,35172,35173,35175,35176,35177,35178,35179,35180,35181,35182,35183,35184,35185,35186,35187,35188,35189,35190,35191,35192,35193,35194,35196,35197,35198,35200,35202,35204,35205,35207,35208,35209,35210,35211,35212,35213,35214,35215,35216,35217,35218,35219,35220,35221,35222,35223,35224,35225,35226,35227,35228,35229,35230,35231,35232,35233,25671,23591,36965,31377,35875,23002,21676,33280,33647,35201,32768,26928,22094,32822,29239,37326,20918,20063,39029,25494,19994,21494,26355,33099,22812,28082,19968,22777,21307,25558,38129,20381,20234,34915,39056,22839,36951,31227,20202,33008,30097,27778,23452,23016,24413,26885,34433,20506,24050,20057,30691,20197,33402,25233,26131,37009,23673,20159,24441,33222,36920,32900,30123,20134,35028,24847,27589,24518,20041,30410,28322,35811,35758,35850,35793,24322,32764,32716,32462,33589,33643,22240,27575,38899,38452,23035,21535,38134,28139,23493,39278,23609,24341,38544,35234,35235,35236,35237,35238,35239,35240,35241,35242,35243,35244,35245,35246,35247,35248,35249,35250,35251,35252,35253,35254,35255,35256,35257,35258,35259,35260,35261,35262,35263,35264,35267,35277,35283,35284,35285,35287,35288,35289,35291,35293,35295,35296,35297,35298,35300,35303,35304,35305,35306,35308,35309,35310,35312,35313,35314,35316,35317,35318,35319,35320,35321,35322,35323,35324,35325,35326,35327,35329,35330,35331,35332,35333,35334,35336,35337,35338,35339,35340,35341,35342,35343,35344,35345,35346,35347,35348,35349,35350,35351,35352,35353,35354,35355,35356,35357,21360,33521,27185,23156,40560,24212,32552,33721,33828,33829,33639,34631,36814,36194,30408,24433,39062,30828,26144,21727,25317,20323,33219,30152,24248,38605,36362,34553,21647,27891,28044,27704,24703,21191,29992,24189,20248,24736,24551,23588,30001,37038,38080,29369,27833,28216,37193,26377,21451,21491,20305,37321,35825,21448,24188,36802,28132,20110,30402,27014,34398,24858,33286,20313,20446,36926,40060,24841,28189,28180,38533,20104,23089,38632,19982,23679,31161,23431,35821,32701,29577,22495,33419,37057,21505,36935,21947,23786,24481,24840,27442,29425,32946,35465,35358,35359,35360,35361,35362,35363,35364,35365,35366,35367,35368,35369,35370,35371,35372,35373,35374,35375,35376,35377,35378,35379,35380,35381,35382,35383,35384,35385,35386,35387,35388,35389,35391,35392,35393,35394,35395,35396,35397,35398,35399,35401,35402,35403,35404,35405,35406,35407,35408,35409,35410,35411,35412,35413,35414,35415,35416,35417,35418,35419,35420,35421,35422,35423,35424,35425,35426,35427,35428,35429,35430,35431,35432,35433,35434,35435,35436,35437,35438,35439,35440,35441,35442,35443,35444,35445,35446,35447,35448,35450,35451,35452,35453,35454,35455,35456,28020,23507,35029,39044,35947,39533,40499,28170,20900,20803,22435,34945,21407,25588,36757,22253,21592,22278,29503,28304,32536,36828,33489,24895,24616,38498,26352,32422,36234,36291,38053,23731,31908,26376,24742,38405,32792,20113,37095,21248,38504,20801,36816,34164,37213,26197,38901,23381,21277,30776,26434,26685,21705,28798,23472,36733,20877,22312,21681,25874,26242,36190,36163,33039,33900,36973,31967,20991,34299,26531,26089,28577,34468,36481,22122,36896,30338,28790,29157,36131,25321,21017,27901,36156,24590,22686,24974,26366,36192,25166,21939,28195,26413,36711,35457,35458,35459,35460,35461,35462,35463,35464,35467,35468,35469,35470,35471,35472,35473,35474,35476,35477,35478,35479,35480,35481,35482,35483,35484,35485,35486,35487,35488,35489,35490,35491,35492,35493,35494,35495,35496,35497,35498,35499,35500,35501,35502,35503,35504,35505,35506,35507,35508,35509,35510,35511,35512,35513,35514,35515,35516,35517,35518,35519,35520,35521,35522,35523,35524,35525,35526,35527,35528,35529,35530,35531,35532,35533,35534,35535,35536,35537,35538,35539,35540,35541,35542,35543,35544,35545,35546,35547,35548,35549,35550,35551,35552,35553,35554,35555,38113,38392,30504,26629,27048,21643,20045,28856,35784,25688,25995,23429,31364,20538,23528,30651,27617,35449,31896,27838,30415,26025,36759,23853,23637,34360,26632,21344,25112,31449,28251,32509,27167,31456,24432,28467,24352,25484,28072,26454,19976,24080,36134,20183,32960,30260,38556,25307,26157,25214,27836,36213,29031,32617,20806,32903,21484,36974,25240,21746,34544,36761,32773,38167,34071,36825,27993,29645,26015,30495,29956,30759,33275,36126,38024,20390,26517,30137,35786,38663,25391,38215,38453,33976,25379,30529,24449,29424,20105,24596,25972,25327,27491,25919,35556,35557,35558,35559,35560,35561,35562,35563,35564,35565,35566,35567,35568,35569,35570,35571,35572,35573,35574,35575,35576,35577,35578,35579,35580,35581,35582,35583,35584,35585,35586,35587,35588,35589,35590,35592,35593,35594,35595,35596,35597,35598,35599,35600,35601,35602,35603,35604,35605,35606,35607,35608,35609,35610,35611,35612,35613,35614,35615,35616,35617,35618,35619,35620,35621,35623,35624,35625,35626,35627,35628,35629,35630,35631,35632,35633,35634,35635,35636,35637,35638,35639,35640,35641,35642,35643,35644,35645,35646,35647,35648,35649,35650,35651,35652,35653,24103,30151,37073,35777,33437,26525,25903,21553,34584,30693,32930,33026,27713,20043,32455,32844,30452,26893,27542,25191,20540,20356,22336,25351,27490,36286,21482,26088,32440,24535,25370,25527,33267,33268,32622,24092,23769,21046,26234,31209,31258,36136,28825,30164,28382,27835,31378,20013,30405,24544,38047,34935,32456,31181,32959,37325,20210,20247,33311,21608,24030,27954,35788,31909,36724,32920,24090,21650,30385,23449,26172,39588,29664,26666,34523,26417,29482,35832,35803,36880,31481,28891,29038,25284,30633,22065,20027,33879,26609,21161,34496,36142,38136,31569,35654,35655,35656,35657,35658,35659,35660,35661,35662,35663,35664,35665,35666,35667,35668,35669,35670,35671,35672,35673,35674,35675,35676,35677,35678,35679,35680,35681,35682,35683,35684,35685,35687,35688,35689,35690,35691,35693,35694,35695,35696,35697,35698,35699,35700,35701,35702,35703,35704,35705,35706,35707,35708,35709,35710,35711,35712,35713,35714,35715,35716,35717,35718,35719,35720,35721,35722,35723,35724,35725,35726,35727,35728,35729,35730,35731,35732,35733,35734,35735,35736,35737,35738,35739,35740,35741,35742,35743,35756,35761,35771,35783,35792,35818,35849,35870,20303,27880,31069,39547,25235,29226,25341,19987,30742,36716,25776,36186,31686,26729,24196,35013,22918,25758,22766,29366,26894,38181,36861,36184,22368,32512,35846,20934,25417,25305,21331,26700,29730,33537,37196,21828,30528,28796,27978,20857,21672,36164,23039,28363,28100,23388,32043,20180,31869,28371,23376,33258,28173,23383,39683,26837,36394,23447,32508,24635,32437,37049,36208,22863,25549,31199,36275,21330,26063,31062,35781,38459,32452,38075,32386,22068,37257,26368,32618,23562,36981,26152,24038,20304,26590,20570,20316,22352,24231,59408,59409,59410,59411,59412,35896,35897,35898,35899,35900,35901,35902,35903,35904,35906,35907,35908,35909,35912,35914,35915,35917,35918,35919,35920,35921,35922,35923,35924,35926,35927,35928,35929,35931,35932,35933,35934,35935,35936,35939,35940,35941,35942,35943,35944,35945,35948,35949,35950,35951,35952,35953,35954,35956,35957,35958,35959,35963,35964,35965,35966,35967,35968,35969,35971,35972,35974,35975,35976,35979,35981,35982,35983,35984,35985,35986,35987,35989,35990,35991,35993,35994,35995,35996,35997,35998,35999,36e3,36001,36002,36003,36004,36005,36006,36007,36008,36009,36010,36011,36012,36013,20109,19980,20800,19984,24319,21317,19989,20120,19998,39730,23404,22121,20008,31162,20031,21269,20039,22829,29243,21358,27664,22239,32996,39319,27603,30590,40727,20022,20127,40720,20060,20073,20115,33416,23387,21868,22031,20164,21389,21405,21411,21413,21422,38757,36189,21274,21493,21286,21294,21310,36188,21350,21347,20994,21e3,21006,21037,21043,21055,21056,21068,21086,21089,21084,33967,21117,21122,21121,21136,21139,20866,32596,20155,20163,20169,20162,20200,20193,20203,20190,20251,20211,20258,20324,20213,20261,20263,20233,20267,20318,20327,25912,20314,20317,36014,36015,36016,36017,36018,36019,36020,36021,36022,36023,36024,36025,36026,36027,36028,36029,36030,36031,36032,36033,36034,36035,36036,36037,36038,36039,36040,36041,36042,36043,36044,36045,36046,36047,36048,36049,36050,36051,36052,36053,36054,36055,36056,36057,36058,36059,36060,36061,36062,36063,36064,36065,36066,36067,36068,36069,36070,36071,36072,36073,36074,36075,36076,36077,36078,36079,36080,36081,36082,36083,36084,36085,36086,36087,36088,36089,36090,36091,36092,36093,36094,36095,36096,36097,36098,36099,36100,36101,36102,36103,36104,36105,36106,36107,36108,36109,20319,20311,20274,20285,20342,20340,20369,20361,20355,20367,20350,20347,20394,20348,20396,20372,20454,20456,20458,20421,20442,20451,20444,20433,20447,20472,20521,20556,20467,20524,20495,20526,20525,20478,20508,20492,20517,20520,20606,20547,20565,20552,20558,20588,20603,20645,20647,20649,20666,20694,20742,20717,20716,20710,20718,20743,20747,20189,27709,20312,20325,20430,40864,27718,31860,20846,24061,40649,39320,20865,22804,21241,21261,35335,21264,20971,22809,20821,20128,20822,20147,34926,34980,20149,33044,35026,31104,23348,34819,32696,20907,20913,20925,20924,36110,36111,36112,36113,36114,36115,36116,36117,36118,36119,36120,36121,36122,36123,36124,36128,36177,36178,36183,36191,36197,36200,36201,36202,36204,36206,36207,36209,36210,36216,36217,36218,36219,36220,36221,36222,36223,36224,36226,36227,36230,36231,36232,36233,36236,36237,36238,36239,36240,36242,36243,36245,36246,36247,36248,36249,36250,36251,36252,36253,36254,36256,36257,36258,36260,36261,36262,36263,36264,36265,36266,36267,36268,36269,36270,36271,36272,36274,36278,36279,36281,36283,36285,36288,36289,36290,36293,36295,36296,36297,36298,36301,36304,36306,36307,36308,20935,20886,20898,20901,35744,35750,35751,35754,35764,35765,35767,35778,35779,35787,35791,35790,35794,35795,35796,35798,35800,35801,35804,35807,35808,35812,35816,35817,35822,35824,35827,35830,35833,35836,35839,35840,35842,35844,35847,35852,35855,35857,35858,35860,35861,35862,35865,35867,35864,35869,35871,35872,35873,35877,35879,35882,35883,35886,35887,35890,35891,35893,35894,21353,21370,38429,38434,38433,38449,38442,38461,38460,38466,38473,38484,38495,38503,38508,38514,38516,38536,38541,38551,38576,37015,37019,37021,37017,37036,37025,37044,37043,37046,37050,36309,36312,36313,36316,36320,36321,36322,36325,36326,36327,36329,36333,36334,36336,36337,36338,36340,36342,36348,36350,36351,36352,36353,36354,36355,36356,36358,36359,36360,36363,36365,36366,36368,36369,36370,36371,36373,36374,36375,36376,36377,36378,36379,36380,36384,36385,36388,36389,36390,36391,36392,36395,36397,36400,36402,36403,36404,36406,36407,36408,36411,36412,36414,36415,36419,36421,36422,36428,36429,36430,36431,36432,36435,36436,36437,36438,36439,36440,36442,36443,36444,36445,36446,36447,36448,36449,36450,36451,36452,36453,36455,36456,36458,36459,36462,36465,37048,37040,37071,37061,37054,37072,37060,37063,37075,37094,37090,37084,37079,37083,37099,37103,37118,37124,37154,37150,37155,37169,37167,37177,37187,37190,21005,22850,21154,21164,21165,21182,21759,21200,21206,21232,21471,29166,30669,24308,20981,20988,39727,21430,24321,30042,24047,22348,22441,22433,22654,22716,22725,22737,22313,22316,22314,22323,22329,22318,22319,22364,22331,22338,22377,22405,22379,22406,22396,22395,22376,22381,22390,22387,22445,22436,22412,22450,22479,22439,22452,22419,22432,22485,22488,22490,22489,22482,22456,22516,22511,22520,22500,22493,36467,36469,36471,36472,36473,36474,36475,36477,36478,36480,36482,36483,36484,36486,36488,36489,36490,36491,36492,36493,36494,36497,36498,36499,36501,36502,36503,36504,36505,36506,36507,36509,36511,36512,36513,36514,36515,36516,36517,36518,36519,36520,36521,36522,36525,36526,36528,36529,36531,36532,36533,36534,36535,36536,36537,36539,36540,36541,36542,36543,36544,36545,36546,36547,36548,36549,36550,36551,36552,36553,36554,36555,36556,36557,36559,36560,36561,36562,36563,36564,36565,36566,36567,36568,36569,36570,36571,36572,36573,36574,36575,36576,36577,36578,36579,36580,22539,22541,22525,22509,22528,22558,22553,22596,22560,22629,22636,22657,22665,22682,22656,39336,40729,25087,33401,33405,33407,33423,33418,33448,33412,33422,33425,33431,33433,33451,33464,33470,33456,33480,33482,33507,33432,33463,33454,33483,33484,33473,33449,33460,33441,33450,33439,33476,33486,33444,33505,33545,33527,33508,33551,33543,33500,33524,33490,33496,33548,33531,33491,33553,33562,33542,33556,33557,33504,33493,33564,33617,33627,33628,33544,33682,33596,33588,33585,33691,33630,33583,33615,33607,33603,33631,33600,33559,33632,33581,33594,33587,33638,33637,36581,36582,36583,36584,36585,36586,36587,36588,36589,36590,36591,36592,36593,36594,36595,36596,36597,36598,36599,36600,36601,36602,36603,36604,36605,36606,36607,36608,36609,36610,36611,36612,36613,36614,36615,36616,36617,36618,36619,36620,36621,36622,36623,36624,36625,36626,36627,36628,36629,36630,36631,36632,36633,36634,36635,36636,36637,36638,36639,36640,36641,36642,36643,36644,36645,36646,36647,36648,36649,36650,36651,36652,36653,36654,36655,36656,36657,36658,36659,36660,36661,36662,36663,36664,36665,36666,36667,36668,36669,36670,36671,36672,36673,36674,36675,36676,33640,33563,33641,33644,33642,33645,33646,33712,33656,33715,33716,33696,33706,33683,33692,33669,33660,33718,33705,33661,33720,33659,33688,33694,33704,33722,33724,33729,33793,33765,33752,22535,33816,33803,33757,33789,33750,33820,33848,33809,33798,33748,33759,33807,33795,33784,33785,33770,33733,33728,33830,33776,33761,33884,33873,33882,33881,33907,33927,33928,33914,33929,33912,33852,33862,33897,33910,33932,33934,33841,33901,33985,33997,34e3,34022,33981,34003,33994,33983,33978,34016,33953,33977,33972,33943,34021,34019,34060,29965,34104,34032,34105,34079,34106,36677,36678,36679,36680,36681,36682,36683,36684,36685,36686,36687,36688,36689,36690,36691,36692,36693,36694,36695,36696,36697,36698,36699,36700,36701,36702,36703,36704,36705,36706,36707,36708,36709,36714,36736,36748,36754,36765,36768,36769,36770,36772,36773,36774,36775,36778,36780,36781,36782,36783,36786,36787,36788,36789,36791,36792,36794,36795,36796,36799,36800,36803,36806,36809,36810,36811,36812,36813,36815,36818,36822,36823,36826,36832,36833,36835,36839,36844,36847,36849,36850,36852,36853,36854,36858,36859,36860,36862,36863,36871,36872,36876,36878,36883,36885,36888,34134,34107,34047,34044,34137,34120,34152,34148,34142,34170,30626,34115,34162,34171,34212,34216,34183,34191,34169,34222,34204,34181,34233,34231,34224,34259,34241,34268,34303,34343,34309,34345,34326,34364,24318,24328,22844,22849,32823,22869,22874,22872,21263,23586,23589,23596,23604,25164,25194,25247,25275,25290,25306,25303,25326,25378,25334,25401,25419,25411,25517,25590,25457,25466,25486,25524,25453,25516,25482,25449,25518,25532,25586,25592,25568,25599,25540,25566,25550,25682,25542,25534,25669,25665,25611,25627,25632,25612,25638,25633,25694,25732,25709,25750,36889,36892,36899,36900,36901,36903,36904,36905,36906,36907,36908,36912,36913,36914,36915,36916,36919,36921,36922,36925,36927,36928,36931,36933,36934,36936,36937,36938,36939,36940,36942,36948,36949,36950,36953,36954,36956,36957,36958,36959,36960,36961,36964,36966,36967,36969,36970,36971,36972,36975,36976,36977,36978,36979,36982,36983,36984,36985,36986,36987,36988,36990,36993,36996,36997,36998,36999,37001,37002,37004,37005,37006,37007,37008,37010,37012,37014,37016,37018,37020,37022,37023,37024,37028,37029,37031,37032,37033,37035,37037,37042,37047,37052,37053,37055,37056,25722,25783,25784,25753,25786,25792,25808,25815,25828,25826,25865,25893,25902,24331,24530,29977,24337,21343,21489,21501,21481,21480,21499,21522,21526,21510,21579,21586,21587,21588,21590,21571,21537,21591,21593,21539,21554,21634,21652,21623,21617,21604,21658,21659,21636,21622,21606,21661,21712,21677,21698,21684,21714,21671,21670,21715,21716,21618,21667,21717,21691,21695,21708,21721,21722,21724,21673,21674,21668,21725,21711,21726,21787,21735,21792,21757,21780,21747,21794,21795,21775,21777,21799,21802,21863,21903,21941,21833,21869,21825,21845,21823,21840,21820,37058,37059,37062,37064,37065,37067,37068,37069,37074,37076,37077,37078,37080,37081,37082,37086,37087,37088,37091,37092,37093,37097,37098,37100,37102,37104,37105,37106,37107,37109,37110,37111,37113,37114,37115,37116,37119,37120,37121,37123,37125,37126,37127,37128,37129,37130,37131,37132,37133,37134,37135,37136,37137,37138,37139,37140,37141,37142,37143,37144,37146,37147,37148,37149,37151,37152,37153,37156,37157,37158,37159,37160,37161,37162,37163,37164,37165,37166,37168,37170,37171,37172,37173,37174,37175,37176,37178,37179,37180,37181,37182,37183,37184,37185,37186,37188,21815,21846,21877,21878,21879,21811,21808,21852,21899,21970,21891,21937,21945,21896,21889,21919,21886,21974,21905,21883,21983,21949,21950,21908,21913,21994,22007,21961,22047,21969,21995,21996,21972,21990,21981,21956,21999,21989,22002,22003,21964,21965,21992,22005,21988,36756,22046,22024,22028,22017,22052,22051,22014,22016,22055,22061,22104,22073,22103,22060,22093,22114,22105,22108,22092,22100,22150,22116,22129,22123,22139,22140,22149,22163,22191,22228,22231,22237,22241,22261,22251,22265,22271,22276,22282,22281,22300,24079,24089,24084,24081,24113,24123,24124,37189,37191,37192,37201,37203,37204,37205,37206,37208,37209,37211,37212,37215,37216,37222,37223,37224,37227,37229,37235,37242,37243,37244,37248,37249,37250,37251,37252,37254,37256,37258,37262,37263,37267,37268,37269,37270,37271,37272,37273,37276,37277,37278,37279,37280,37281,37284,37285,37286,37287,37288,37289,37291,37292,37296,37297,37298,37299,37302,37303,37304,37305,37307,37308,37309,37310,37311,37312,37313,37314,37315,37316,37317,37318,37320,37323,37328,37330,37331,37332,37333,37334,37335,37336,37337,37338,37339,37341,37342,37343,37344,37345,37346,37347,37348,37349,24119,24132,24148,24155,24158,24161,23692,23674,23693,23696,23702,23688,23704,23705,23697,23706,23708,23733,23714,23741,23724,23723,23729,23715,23745,23735,23748,23762,23780,23755,23781,23810,23811,23847,23846,23854,23844,23838,23814,23835,23896,23870,23860,23869,23916,23899,23919,23901,23915,23883,23882,23913,23924,23938,23961,23965,35955,23991,24005,24435,24439,24450,24455,24457,24460,24469,24473,24476,24488,24493,24501,24508,34914,24417,29357,29360,29364,29367,29368,29379,29377,29390,29389,29394,29416,29423,29417,29426,29428,29431,29441,29427,29443,29434,37350,37351,37352,37353,37354,37355,37356,37357,37358,37359,37360,37361,37362,37363,37364,37365,37366,37367,37368,37369,37370,37371,37372,37373,37374,37375,37376,37377,37378,37379,37380,37381,37382,37383,37384,37385,37386,37387,37388,37389,37390,37391,37392,37393,37394,37395,37396,37397,37398,37399,37400,37401,37402,37403,37404,37405,37406,37407,37408,37409,37410,37411,37412,37413,37414,37415,37416,37417,37418,37419,37420,37421,37422,37423,37424,37425,37426,37427,37428,37429,37430,37431,37432,37433,37434,37435,37436,37437,37438,37439,37440,37441,37442,37443,37444,37445,29435,29463,29459,29473,29450,29470,29469,29461,29474,29497,29477,29484,29496,29489,29520,29517,29527,29536,29548,29551,29566,33307,22821,39143,22820,22786,39267,39271,39272,39273,39274,39275,39276,39284,39287,39293,39296,39300,39303,39306,39309,39312,39313,39315,39316,39317,24192,24209,24203,24214,24229,24224,24249,24245,24254,24243,36179,24274,24273,24283,24296,24298,33210,24516,24521,24534,24527,24579,24558,24580,24545,24548,24574,24581,24582,24554,24557,24568,24601,24629,24614,24603,24591,24589,24617,24619,24586,24639,24609,24696,24697,24699,24698,24642,37446,37447,37448,37449,37450,37451,37452,37453,37454,37455,37456,37457,37458,37459,37460,37461,37462,37463,37464,37465,37466,37467,37468,37469,37470,37471,37472,37473,37474,37475,37476,37477,37478,37479,37480,37481,37482,37483,37484,37485,37486,37487,37488,37489,37490,37491,37493,37494,37495,37496,37497,37498,37499,37500,37501,37502,37503,37504,37505,37506,37507,37508,37509,37510,37511,37512,37513,37514,37515,37516,37517,37519,37520,37521,37522,37523,37524,37525,37526,37527,37528,37529,37530,37531,37532,37533,37534,37535,37536,37537,37538,37539,37540,37541,37542,37543,24682,24701,24726,24730,24749,24733,24707,24722,24716,24731,24812,24763,24753,24797,24792,24774,24794,24756,24864,24870,24853,24867,24820,24832,24846,24875,24906,24949,25004,24980,24999,25015,25044,25077,24541,38579,38377,38379,38385,38387,38389,38390,38396,38398,38403,38404,38406,38408,38410,38411,38412,38413,38415,38418,38421,38422,38423,38425,38426,20012,29247,25109,27701,27732,27740,27722,27811,27781,27792,27796,27788,27752,27753,27764,27766,27782,27817,27856,27860,27821,27895,27896,27889,27863,27826,27872,27862,27898,27883,27886,27825,27859,27887,27902,37544,37545,37546,37547,37548,37549,37551,37552,37553,37554,37555,37556,37557,37558,37559,37560,37561,37562,37563,37564,37565,37566,37567,37568,37569,37570,37571,37572,37573,37574,37575,37577,37578,37579,37580,37581,37582,37583,37584,37585,37586,37587,37588,37589,37590,37591,37592,37593,37594,37595,37596,37597,37598,37599,37600,37601,37602,37603,37604,37605,37606,37607,37608,37609,37610,37611,37612,37613,37614,37615,37616,37617,37618,37619,37620,37621,37622,37623,37624,37625,37626,37627,37628,37629,37630,37631,37632,37633,37634,37635,37636,37637,37638,37639,37640,37641,27961,27943,27916,27971,27976,27911,27908,27929,27918,27947,27981,27950,27957,27930,27983,27986,27988,27955,28049,28015,28062,28064,27998,28051,28052,27996,28e3,28028,28003,28186,28103,28101,28126,28174,28095,28128,28177,28134,28125,28121,28182,28075,28172,28078,28203,28270,28238,28267,28338,28255,28294,28243,28244,28210,28197,28228,28383,28337,28312,28384,28461,28386,28325,28327,28349,28347,28343,28375,28340,28367,28303,28354,28319,28514,28486,28487,28452,28437,28409,28463,28470,28491,28532,28458,28425,28457,28553,28557,28556,28536,28530,28540,28538,28625,37642,37643,37644,37645,37646,37647,37648,37649,37650,37651,37652,37653,37654,37655,37656,37657,37658,37659,37660,37661,37662,37663,37664,37665,37666,37667,37668,37669,37670,37671,37672,37673,37674,37675,37676,37677,37678,37679,37680,37681,37682,37683,37684,37685,37686,37687,37688,37689,37690,37691,37692,37693,37695,37696,37697,37698,37699,37700,37701,37702,37703,37704,37705,37706,37707,37708,37709,37710,37711,37712,37713,37714,37715,37716,37717,37718,37719,37720,37721,37722,37723,37724,37725,37726,37727,37728,37729,37730,37731,37732,37733,37734,37735,37736,37737,37739,28617,28583,28601,28598,28610,28641,28654,28638,28640,28655,28698,28707,28699,28729,28725,28751,28766,23424,23428,23445,23443,23461,23480,29999,39582,25652,23524,23534,35120,23536,36423,35591,36790,36819,36821,36837,36846,36836,36841,36838,36851,36840,36869,36868,36875,36902,36881,36877,36886,36897,36917,36918,36909,36911,36932,36945,36946,36944,36968,36952,36962,36955,26297,36980,36989,36994,37e3,36995,37003,24400,24407,24406,24408,23611,21675,23632,23641,23409,23651,23654,32700,24362,24361,24365,33396,24380,39739,23662,22913,22915,22925,22953,22954,22947,37740,37741,37742,37743,37744,37745,37746,37747,37748,37749,37750,37751,37752,37753,37754,37755,37756,37757,37758,37759,37760,37761,37762,37763,37764,37765,37766,37767,37768,37769,37770,37771,37772,37773,37774,37776,37777,37778,37779,37780,37781,37782,37783,37784,37785,37786,37787,37788,37789,37790,37791,37792,37793,37794,37795,37796,37797,37798,37799,37800,37801,37802,37803,37804,37805,37806,37807,37808,37809,37810,37811,37812,37813,37814,37815,37816,37817,37818,37819,37820,37821,37822,37823,37824,37825,37826,37827,37828,37829,37830,37831,37832,37833,37835,37836,37837,22935,22986,22955,22942,22948,22994,22962,22959,22999,22974,23045,23046,23005,23048,23011,23e3,23033,23052,23049,23090,23092,23057,23075,23059,23104,23143,23114,23125,23100,23138,23157,33004,23210,23195,23159,23162,23230,23275,23218,23250,23252,23224,23264,23267,23281,23254,23270,23256,23260,23305,23319,23318,23346,23351,23360,23573,23580,23386,23397,23411,23377,23379,23394,39541,39543,39544,39546,39551,39549,39552,39553,39557,39560,39562,39568,39570,39571,39574,39576,39579,39580,39581,39583,39584,39586,39587,39589,39591,32415,32417,32419,32421,32424,32425,37838,37839,37840,37841,37842,37843,37844,37845,37847,37848,37849,37850,37851,37852,37853,37854,37855,37856,37857,37858,37859,37860,37861,37862,37863,37864,37865,37866,37867,37868,37869,37870,37871,37872,37873,37874,37875,37876,37877,37878,37879,37880,37881,37882,37883,37884,37885,37886,37887,37888,37889,37890,37891,37892,37893,37894,37895,37896,37897,37898,37899,37900,37901,37902,37903,37904,37905,37906,37907,37908,37909,37910,37911,37912,37913,37914,37915,37916,37917,37918,37919,37920,37921,37922,37923,37924,37925,37926,37927,37928,37929,37930,37931,37932,37933,37934,32429,32432,32446,32448,32449,32450,32457,32459,32460,32464,32468,32471,32475,32480,32481,32488,32491,32494,32495,32497,32498,32525,32502,32506,32507,32510,32513,32514,32515,32519,32520,32523,32524,32527,32529,32530,32535,32537,32540,32539,32543,32545,32546,32547,32548,32549,32550,32551,32554,32555,32556,32557,32559,32560,32561,32562,32563,32565,24186,30079,24027,30014,37013,29582,29585,29614,29602,29599,29647,29634,29649,29623,29619,29632,29641,29640,29669,29657,39036,29706,29673,29671,29662,29626,29682,29711,29738,29787,29734,29733,29736,29744,29742,29740,37935,37936,37937,37938,37939,37940,37941,37942,37943,37944,37945,37946,37947,37948,37949,37951,37952,37953,37954,37955,37956,37957,37958,37959,37960,37961,37962,37963,37964,37965,37966,37967,37968,37969,37970,37971,37972,37973,37974,37975,37976,37977,37978,37979,37980,37981,37982,37983,37984,37985,37986,37987,37988,37989,37990,37991,37992,37993,37994,37996,37997,37998,37999,38e3,38001,38002,38003,38004,38005,38006,38007,38008,38009,38010,38011,38012,38013,38014,38015,38016,38017,38018,38019,38020,38033,38038,38040,38087,38095,38099,38100,38106,38118,38139,38172,38176,29723,29722,29761,29788,29783,29781,29785,29815,29805,29822,29852,29838,29824,29825,29831,29835,29854,29864,29865,29840,29863,29906,29882,38890,38891,38892,26444,26451,26462,26440,26473,26533,26503,26474,26483,26520,26535,26485,26536,26526,26541,26507,26487,26492,26608,26633,26584,26634,26601,26544,26636,26585,26549,26586,26547,26589,26624,26563,26552,26594,26638,26561,26621,26674,26675,26720,26721,26702,26722,26692,26724,26755,26653,26709,26726,26689,26727,26688,26686,26698,26697,26665,26805,26767,26740,26743,26771,26731,26818,26990,26876,26911,26912,26873,38183,38195,38205,38211,38216,38219,38229,38234,38240,38254,38260,38261,38263,38264,38265,38266,38267,38268,38269,38270,38272,38273,38274,38275,38276,38277,38278,38279,38280,38281,38282,38283,38284,38285,38286,38287,38288,38289,38290,38291,38292,38293,38294,38295,38296,38297,38298,38299,38300,38301,38302,38303,38304,38305,38306,38307,38308,38309,38310,38311,38312,38313,38314,38315,38316,38317,38318,38319,38320,38321,38322,38323,38324,38325,38326,38327,38328,38329,38330,38331,38332,38333,38334,38335,38336,38337,38338,38339,38340,38341,38342,38343,38344,38345,38346,38347,26916,26864,26891,26881,26967,26851,26896,26993,26937,26976,26946,26973,27012,26987,27008,27032,27e3,26932,27084,27015,27016,27086,27017,26982,26979,27001,27035,27047,27067,27051,27053,27092,27057,27073,27082,27103,27029,27104,27021,27135,27183,27117,27159,27160,27237,27122,27204,27198,27296,27216,27227,27189,27278,27257,27197,27176,27224,27260,27281,27280,27305,27287,27307,29495,29522,27521,27522,27527,27524,27538,27539,27533,27546,27547,27553,27562,36715,36717,36721,36722,36723,36725,36726,36728,36727,36729,36730,36732,36734,36737,36738,36740,36743,36747,38348,38349,38350,38351,38352,38353,38354,38355,38356,38357,38358,38359,38360,38361,38362,38363,38364,38365,38366,38367,38368,38369,38370,38371,38372,38373,38374,38375,38380,38399,38407,38419,38424,38427,38430,38432,38435,38436,38437,38438,38439,38440,38441,38443,38444,38445,38447,38448,38455,38456,38457,38458,38462,38465,38467,38474,38478,38479,38481,38482,38483,38486,38487,38488,38489,38490,38492,38493,38494,38496,38499,38501,38502,38507,38509,38510,38511,38512,38513,38515,38520,38521,38522,38523,38524,38525,38526,38527,38528,38529,38530,38531,38532,38535,38537,38538,36749,36750,36751,36760,36762,36558,25099,25111,25115,25119,25122,25121,25125,25124,25132,33255,29935,29940,29951,29967,29969,29971,25908,26094,26095,26096,26122,26137,26482,26115,26133,26112,28805,26359,26141,26164,26161,26166,26165,32774,26207,26196,26177,26191,26198,26209,26199,26231,26244,26252,26279,26269,26302,26331,26332,26342,26345,36146,36147,36150,36155,36157,36160,36165,36166,36168,36169,36167,36173,36181,36185,35271,35274,35275,35276,35278,35279,35280,35281,29294,29343,29277,29286,29295,29310,29311,29316,29323,29325,29327,29330,25352,25394,25520,38540,38542,38545,38546,38547,38549,38550,38554,38555,38557,38558,38559,38560,38561,38562,38563,38564,38565,38566,38568,38569,38570,38571,38572,38573,38574,38575,38577,38578,38580,38581,38583,38584,38586,38587,38591,38594,38595,38600,38602,38603,38608,38609,38611,38612,38614,38615,38616,38617,38618,38619,38620,38621,38622,38623,38625,38626,38627,38628,38629,38630,38631,38635,38636,38637,38638,38640,38641,38642,38644,38645,38648,38650,38651,38652,38653,38655,38658,38659,38661,38666,38667,38668,38672,38673,38674,38676,38677,38679,38680,38681,38682,38683,38685,38687,38688,25663,25816,32772,27626,27635,27645,27637,27641,27653,27655,27654,27661,27669,27672,27673,27674,27681,27689,27684,27690,27698,25909,25941,25963,29261,29266,29270,29232,34402,21014,32927,32924,32915,32956,26378,32957,32945,32939,32941,32948,32951,32999,33e3,33001,33002,32987,32962,32964,32985,32973,32983,26384,32989,33003,33009,33012,33005,33037,33038,33010,33020,26389,33042,35930,33078,33054,33068,33048,33074,33096,33100,33107,33140,33113,33114,33137,33120,33129,33148,33149,33133,33127,22605,23221,33160,33154,33169,28373,33187,33194,33228,26406,33226,33211,38689,38690,38691,38692,38693,38694,38695,38696,38697,38699,38700,38702,38703,38705,38707,38708,38709,38710,38711,38714,38715,38716,38717,38719,38720,38721,38722,38723,38724,38725,38726,38727,38728,38729,38730,38731,38732,38733,38734,38735,38736,38737,38740,38741,38743,38744,38746,38748,38749,38751,38755,38756,38758,38759,38760,38762,38763,38764,38765,38766,38767,38768,38769,38770,38773,38775,38776,38777,38778,38779,38781,38782,38783,38784,38785,38786,38787,38788,38790,38791,38792,38793,38794,38796,38798,38799,38800,38803,38805,38806,38807,38809,38810,38811,38812,38813,33217,33190,27428,27447,27449,27459,27462,27481,39121,39122,39123,39125,39129,39130,27571,24384,27586,35315,26e3,40785,26003,26044,26054,26052,26051,26060,26062,26066,26070,28800,28828,28822,28829,28859,28864,28855,28843,28849,28904,28874,28944,28947,28950,28975,28977,29043,29020,29032,28997,29042,29002,29048,29050,29080,29107,29109,29096,29088,29152,29140,29159,29177,29213,29224,28780,28952,29030,29113,25150,25149,25155,25160,25161,31035,31040,31046,31049,31067,31068,31059,31066,31074,31063,31072,31087,31079,31098,31109,31114,31130,31143,31155,24529,24528,38814,38815,38817,38818,38820,38821,38822,38823,38824,38825,38826,38828,38830,38832,38833,38835,38837,38838,38839,38840,38841,38842,38843,38844,38845,38846,38847,38848,38849,38850,38851,38852,38853,38854,38855,38856,38857,38858,38859,38860,38861,38862,38863,38864,38865,38866,38867,38868,38869,38870,38871,38872,38873,38874,38875,38876,38877,38878,38879,38880,38881,38882,38883,38884,38885,38888,38894,38895,38896,38897,38898,38900,38903,38904,38905,38906,38907,38908,38909,38910,38911,38912,38913,38914,38915,38916,38917,38918,38919,38920,38921,38922,38923,38924,38925,38926,24636,24669,24666,24679,24641,24665,24675,24747,24838,24845,24925,25001,24989,25035,25041,25094,32896,32895,27795,27894,28156,30710,30712,30720,30729,30743,30744,30737,26027,30765,30748,30749,30777,30778,30779,30751,30780,30757,30764,30755,30761,30798,30829,30806,30807,30758,30800,30791,30796,30826,30875,30867,30874,30855,30876,30881,30883,30898,30905,30885,30932,30937,30921,30956,30962,30981,30964,30995,31012,31006,31028,40859,40697,40699,40700,30449,30468,30477,30457,30471,30472,30490,30498,30489,30509,30502,30517,30520,30544,30545,30535,30531,30554,30568,38927,38928,38929,38930,38931,38932,38933,38934,38935,38936,38937,38938,38939,38940,38941,38942,38943,38944,38945,38946,38947,38948,38949,38950,38951,38952,38953,38954,38955,38956,38957,38958,38959,38960,38961,38962,38963,38964,38965,38966,38967,38968,38969,38970,38971,38972,38973,38974,38975,38976,38977,38978,38979,38980,38981,38982,38983,38984,38985,38986,38987,38988,38989,38990,38991,38992,38993,38994,38995,38996,38997,38998,38999,39e3,39001,39002,39003,39004,39005,39006,39007,39008,39009,39010,39011,39012,39013,39014,39015,39016,39017,39018,39019,39020,39021,39022,30562,30565,30591,30605,30589,30592,30604,30609,30623,30624,30640,30645,30653,30010,30016,30030,30027,30024,30043,30066,30073,30083,32600,32609,32607,35400,32616,32628,32625,32633,32641,32638,30413,30437,34866,38021,38022,38023,38027,38026,38028,38029,38031,38032,38036,38039,38037,38042,38043,38044,38051,38052,38059,38058,38061,38060,38063,38064,38066,38068,38070,38071,38072,38073,38074,38076,38077,38079,38084,38088,38089,38090,38091,38092,38093,38094,38096,38097,38098,38101,38102,38103,38105,38104,38107,38110,38111,38112,38114,38116,38117,38119,38120,38122,39023,39024,39025,39026,39027,39028,39051,39054,39058,39061,39065,39075,39080,39081,39082,39083,39084,39085,39086,39087,39088,39089,39090,39091,39092,39093,39094,39095,39096,39097,39098,39099,39100,39101,39102,39103,39104,39105,39106,39107,39108,39109,39110,39111,39112,39113,39114,39115,39116,39117,39119,39120,39124,39126,39127,39131,39132,39133,39136,39137,39138,39139,39140,39141,39142,39145,39146,39147,39148,39149,39150,39151,39152,39153,39154,39155,39156,39157,39158,39159,39160,39161,39162,39163,39164,39165,39166,39167,39168,39169,39170,39171,39172,39173,39174,39175,38121,38123,38126,38127,38131,38132,38133,38135,38137,38140,38141,38143,38147,38146,38150,38151,38153,38154,38157,38158,38159,38162,38163,38164,38165,38166,38168,38171,38173,38174,38175,38178,38186,38187,38185,38188,38193,38194,38196,38198,38199,38200,38204,38206,38207,38210,38197,38212,38213,38214,38217,38220,38222,38223,38226,38227,38228,38230,38231,38232,38233,38235,38238,38239,38237,38241,38242,38244,38245,38246,38247,38248,38249,38250,38251,38252,38255,38257,38258,38259,38202,30695,30700,38601,31189,31213,31203,31211,31238,23879,31235,31234,31262,31252,39176,39177,39178,39179,39180,39182,39183,39185,39186,39187,39188,39189,39190,39191,39192,39193,39194,39195,39196,39197,39198,39199,39200,39201,39202,39203,39204,39205,39206,39207,39208,39209,39210,39211,39212,39213,39215,39216,39217,39218,39219,39220,39221,39222,39223,39224,39225,39226,39227,39228,39229,39230,39231,39232,39233,39234,39235,39236,39237,39238,39239,39240,39241,39242,39243,39244,39245,39246,39247,39248,39249,39250,39251,39254,39255,39256,39257,39258,39259,39260,39261,39262,39263,39264,39265,39266,39268,39270,39283,39288,39289,39291,39294,39298,39299,39305,31289,31287,31313,40655,39333,31344,30344,30350,30355,30361,30372,29918,29920,29996,40480,40482,40488,40489,40490,40491,40492,40498,40497,40502,40504,40503,40505,40506,40510,40513,40514,40516,40518,40519,40520,40521,40523,40524,40526,40529,40533,40535,40538,40539,40540,40542,40547,40550,40551,40552,40553,40554,40555,40556,40561,40557,40563,30098,30100,30102,30112,30109,30124,30115,30131,30132,30136,30148,30129,30128,30147,30146,30166,30157,30179,30184,30182,30180,30187,30183,30211,30193,30204,30207,30224,30208,30213,30220,30231,30218,30245,30232,30229,30233,39308,39310,39322,39323,39324,39325,39326,39327,39328,39329,39330,39331,39332,39334,39335,39337,39338,39339,39340,39341,39342,39343,39344,39345,39346,39347,39348,39349,39350,39351,39352,39353,39354,39355,39356,39357,39358,39359,39360,39361,39362,39363,39364,39365,39366,39367,39368,39369,39370,39371,39372,39373,39374,39375,39376,39377,39378,39379,39380,39381,39382,39383,39384,39385,39386,39387,39388,39389,39390,39391,39392,39393,39394,39395,39396,39397,39398,39399,39400,39401,39402,39403,39404,39405,39406,39407,39408,39409,39410,39411,39412,39413,39414,39415,39416,39417,30235,30268,30242,30240,30272,30253,30256,30271,30261,30275,30270,30259,30285,30302,30292,30300,30294,30315,30319,32714,31462,31352,31353,31360,31366,31368,31381,31398,31392,31404,31400,31405,31411,34916,34921,34930,34941,34943,34946,34978,35014,34999,35004,35017,35042,35022,35043,35045,35057,35098,35068,35048,35070,35056,35105,35097,35091,35099,35082,35124,35115,35126,35137,35174,35195,30091,32997,30386,30388,30684,32786,32788,32790,32796,32800,32802,32805,32806,32807,32809,32808,32817,32779,32821,32835,32838,32845,32850,32873,32881,35203,39032,39040,39043,39418,39419,39420,39421,39422,39423,39424,39425,39426,39427,39428,39429,39430,39431,39432,39433,39434,39435,39436,39437,39438,39439,39440,39441,39442,39443,39444,39445,39446,39447,39448,39449,39450,39451,39452,39453,39454,39455,39456,39457,39458,39459,39460,39461,39462,39463,39464,39465,39466,39467,39468,39469,39470,39471,39472,39473,39474,39475,39476,39477,39478,39479,39480,39481,39482,39483,39484,39485,39486,39487,39488,39489,39490,39491,39492,39493,39494,39495,39496,39497,39498,39499,39500,39501,39502,39503,39504,39505,39506,39507,39508,39509,39510,39511,39512,39513,39049,39052,39053,39055,39060,39066,39067,39070,39071,39073,39074,39077,39078,34381,34388,34412,34414,34431,34426,34428,34427,34472,34445,34443,34476,34461,34471,34467,34474,34451,34473,34486,34500,34485,34510,34480,34490,34481,34479,34505,34511,34484,34537,34545,34546,34541,34547,34512,34579,34526,34548,34527,34520,34513,34563,34567,34552,34568,34570,34573,34569,34595,34619,34590,34597,34606,34586,34622,34632,34612,34609,34601,34615,34623,34690,34594,34685,34686,34683,34656,34672,34636,34670,34699,34643,34659,34684,34660,34649,34661,34707,34735,34728,34770,39514,39515,39516,39517,39518,39519,39520,39521,39522,39523,39524,39525,39526,39527,39528,39529,39530,39531,39538,39555,39561,39565,39566,39572,39573,39577,39590,39593,39594,39595,39596,39597,39598,39599,39602,39603,39604,39605,39609,39611,39613,39614,39615,39619,39620,39622,39623,39624,39625,39626,39629,39630,39631,39632,39634,39636,39637,39638,39639,39641,39642,39643,39644,39645,39646,39648,39650,39651,39652,39653,39655,39656,39657,39658,39660,39662,39664,39665,39666,39667,39668,39669,39670,39671,39672,39674,39676,39677,39678,39679,39680,39681,39682,39684,39685,39686,34758,34696,34693,34733,34711,34691,34731,34789,34732,34741,34739,34763,34771,34749,34769,34752,34762,34779,34794,34784,34798,34838,34835,34814,34826,34843,34849,34873,34876,32566,32578,32580,32581,33296,31482,31485,31496,31491,31492,31509,31498,31531,31503,31559,31544,31530,31513,31534,31537,31520,31525,31524,31539,31550,31518,31576,31578,31557,31605,31564,31581,31584,31598,31611,31586,31602,31601,31632,31654,31655,31672,31660,31645,31656,31621,31658,31644,31650,31659,31668,31697,31681,31692,31709,31706,31717,31718,31722,31756,31742,31740,31759,31766,31755,39687,39689,39690,39691,39692,39693,39694,39696,39697,39698,39700,39701,39702,39703,39704,39705,39706,39707,39708,39709,39710,39712,39713,39714,39716,39717,39718,39719,39720,39721,39722,39723,39724,39725,39726,39728,39729,39731,39732,39733,39734,39735,39736,39737,39738,39741,39742,39743,39744,39750,39754,39755,39756,39758,39760,39762,39763,39765,39766,39767,39768,39769,39770,39771,39772,39773,39774,39775,39776,39777,39778,39779,39780,39781,39782,39783,39784,39785,39786,39787,39788,39789,39790,39791,39792,39793,39794,39795,39796,39797,39798,39799,39800,39801,39802,39803,31775,31786,31782,31800,31809,31808,33278,33281,33282,33284,33260,34884,33313,33314,33315,33325,33327,33320,33323,33336,33339,33331,33332,33342,33348,33353,33355,33359,33370,33375,33384,34942,34949,34952,35032,35039,35166,32669,32671,32679,32687,32688,32690,31868,25929,31889,31901,31900,31902,31906,31922,31932,31933,31937,31943,31948,31949,31944,31941,31959,31976,33390,26280,32703,32718,32725,32741,32737,32742,32745,32750,32755,31992,32119,32166,32174,32327,32411,40632,40628,36211,36228,36244,36241,36273,36199,36205,35911,35913,37194,37200,37198,37199,37220,39804,39805,39806,39807,39808,39809,39810,39811,39812,39813,39814,39815,39816,39817,39818,39819,39820,39821,39822,39823,39824,39825,39826,39827,39828,39829,39830,39831,39832,39833,39834,39835,39836,39837,39838,39839,39840,39841,39842,39843,39844,39845,39846,39847,39848,39849,39850,39851,39852,39853,39854,39855,39856,39857,39858,39859,39860,39861,39862,39863,39864,39865,39866,39867,39868,39869,39870,39871,39872,39873,39874,39875,39876,39877,39878,39879,39880,39881,39882,39883,39884,39885,39886,39887,39888,39889,39890,39891,39892,39893,39894,39895,39896,39897,39898,39899,37218,37217,37232,37225,37231,37245,37246,37234,37236,37241,37260,37253,37264,37261,37265,37282,37283,37290,37293,37294,37295,37301,37300,37306,35925,40574,36280,36331,36357,36441,36457,36277,36287,36284,36282,36292,36310,36311,36314,36318,36302,36303,36315,36294,36332,36343,36344,36323,36345,36347,36324,36361,36349,36372,36381,36383,36396,36398,36387,36399,36410,36416,36409,36405,36413,36401,36425,36417,36418,36433,36434,36426,36464,36470,36476,36463,36468,36485,36495,36500,36496,36508,36510,35960,35970,35978,35973,35992,35988,26011,35286,35294,35290,35292,39900,39901,39902,39903,39904,39905,39906,39907,39908,39909,39910,39911,39912,39913,39914,39915,39916,39917,39918,39919,39920,39921,39922,39923,39924,39925,39926,39927,39928,39929,39930,39931,39932,39933,39934,39935,39936,39937,39938,39939,39940,39941,39942,39943,39944,39945,39946,39947,39948,39949,39950,39951,39952,39953,39954,39955,39956,39957,39958,39959,39960,39961,39962,39963,39964,39965,39966,39967,39968,39969,39970,39971,39972,39973,39974,39975,39976,39977,39978,39979,39980,39981,39982,39983,39984,39985,39986,39987,39988,39989,39990,39991,39992,39993,39994,39995,35301,35307,35311,35390,35622,38739,38633,38643,38639,38662,38657,38664,38671,38670,38698,38701,38704,38718,40832,40835,40837,40838,40839,40840,40841,40842,40844,40702,40715,40717,38585,38588,38589,38606,38610,30655,38624,37518,37550,37576,37694,37738,37834,37775,37950,37995,40063,40066,40069,40070,40071,40072,31267,40075,40078,40080,40081,40082,40084,40085,40090,40091,40094,40095,40096,40097,40098,40099,40101,40102,40103,40104,40105,40107,40109,40110,40112,40113,40114,40115,40116,40117,40118,40119,40122,40123,40124,40125,40132,40133,40134,40135,40138,40139,39996,39997,39998,39999,4e4,40001,40002,40003,40004,40005,40006,40007,40008,40009,40010,40011,40012,40013,40014,40015,40016,40017,40018,40019,40020,40021,40022,40023,40024,40025,40026,40027,40028,40029,40030,40031,40032,40033,40034,40035,40036,40037,40038,40039,40040,40041,40042,40043,40044,40045,40046,40047,40048,40049,40050,40051,40052,40053,40054,40055,40056,40057,40058,40059,40061,40062,40064,40067,40068,40073,40074,40076,40079,40083,40086,40087,40088,40089,40093,40106,40108,40111,40121,40126,40127,40128,40129,40130,40136,40137,40145,40146,40154,40155,40160,40161,40140,40141,40142,40143,40144,40147,40148,40149,40151,40152,40153,40156,40157,40159,40162,38780,38789,38801,38802,38804,38831,38827,38819,38834,38836,39601,39600,39607,40536,39606,39610,39612,39617,39616,39621,39618,39627,39628,39633,39749,39747,39751,39753,39752,39757,39761,39144,39181,39214,39253,39252,39647,39649,39654,39663,39659,39675,39661,39673,39688,39695,39699,39711,39715,40637,40638,32315,40578,40583,40584,40587,40594,37846,40605,40607,40667,40668,40669,40672,40671,40674,40681,40679,40677,40682,40687,40738,40748,40751,40761,40759,40765,40766,40772,40163,40164,40165,40166,40167,40168,40169,40170,40171,40172,40173,40174,40175,40176,40177,40178,40179,40180,40181,40182,40183,40184,40185,40186,40187,40188,40189,40190,40191,40192,40193,40194,40195,40196,40197,40198,40199,40200,40201,40202,40203,40204,40205,40206,40207,40208,40209,40210,40211,40212,40213,40214,40215,40216,40217,40218,40219,40220,40221,40222,40223,40224,40225,40226,40227,40228,40229,40230,40231,40232,40233,40234,40235,40236,40237,40238,40239,40240,40241,40242,40243,40244,40245,40246,40247,40248,40249,40250,40251,40252,40253,40254,40255,40256,40257,40258,57908,57909,57910,57911,57912,57913,57914,57915,57916,57917,57918,57919,57920,57921,57922,57923,57924,57925,57926,57927,57928,57929,57930,57931,57932,57933,57934,57935,57936,57937,57938,57939,57940,57941,57942,57943,57944,57945,57946,57947,57948,57949,57950,57951,57952,57953,57954,57955,57956,57957,57958,57959,57960,57961,57962,57963,57964,57965,57966,57967,57968,57969,57970,57971,57972,57973,57974,57975,57976,57977,57978,57979,57980,57981,57982,57983,57984,57985,57986,57987,57988,57989,57990,57991,57992,57993,57994,57995,57996,57997,57998,57999,58e3,58001,40259,40260,40261,40262,40263,40264,40265,40266,40267,40268,40269,40270,40271,40272,40273,40274,40275,40276,40277,40278,40279,40280,40281,40282,40283,40284,40285,40286,40287,40288,40289,40290,40291,40292,40293,40294,40295,40296,40297,40298,40299,40300,40301,40302,40303,40304,40305,40306,40307,40308,40309,40310,40311,40312,40313,40314,40315,40316,40317,40318,40319,40320,40321,40322,40323,40324,40325,40326,40327,40328,40329,40330,40331,40332,40333,40334,40335,40336,40337,40338,40339,40340,40341,40342,40343,40344,40345,40346,40347,40348,40349,40350,40351,40352,40353,40354,58002,58003,58004,58005,58006,58007,58008,58009,58010,58011,58012,58013,58014,58015,58016,58017,58018,58019,58020,58021,58022,58023,58024,58025,58026,58027,58028,58029,58030,58031,58032,58033,58034,58035,58036,58037,58038,58039,58040,58041,58042,58043,58044,58045,58046,58047,58048,58049,58050,58051,58052,58053,58054,58055,58056,58057,58058,58059,58060,58061,58062,58063,58064,58065,58066,58067,58068,58069,58070,58071,58072,58073,58074,58075,58076,58077,58078,58079,58080,58081,58082,58083,58084,58085,58086,58087,58088,58089,58090,58091,58092,58093,58094,58095,40355,40356,40357,40358,40359,40360,40361,40362,40363,40364,40365,40366,40367,40368,40369,40370,40371,40372,40373,40374,40375,40376,40377,40378,40379,40380,40381,40382,40383,40384,40385,40386,40387,40388,40389,40390,40391,40392,40393,40394,40395,40396,40397,40398,40399,40400,40401,40402,40403,40404,40405,40406,40407,40408,40409,40410,40411,40412,40413,40414,40415,40416,40417,40418,40419,40420,40421,40422,40423,40424,40425,40426,40427,40428,40429,40430,40431,40432,40433,40434,40435,40436,40437,40438,40439,40440,40441,40442,40443,40444,40445,40446,40447,40448,40449,40450,58096,58097,58098,58099,58100,58101,58102,58103,58104,58105,58106,58107,58108,58109,58110,58111,58112,58113,58114,58115,58116,58117,58118,58119,58120,58121,58122,58123,58124,58125,58126,58127,58128,58129,58130,58131,58132,58133,58134,58135,58136,58137,58138,58139,58140,58141,58142,58143,58144,58145,58146,58147,58148,58149,58150,58151,58152,58153,58154,58155,58156,58157,58158,58159,58160,58161,58162,58163,58164,58165,58166,58167,58168,58169,58170,58171,58172,58173,58174,58175,58176,58177,58178,58179,58180,58181,58182,58183,58184,58185,58186,58187,58188,58189,40451,40452,40453,40454,40455,40456,40457,40458,40459,40460,40461,40462,40463,40464,40465,40466,40467,40468,40469,40470,40471,40472,40473,40474,40475,40476,40477,40478,40484,40487,40494,40496,40500,40507,40508,40512,40525,40528,40530,40531,40532,40534,40537,40541,40543,40544,40545,40546,40549,40558,40559,40562,40564,40565,40566,40567,40568,40569,40570,40571,40572,40573,40576,40577,40579,40580,40581,40582,40585,40586,40588,40589,40590,40591,40592,40593,40596,40597,40598,40599,40600,40601,40602,40603,40604,40606,40608,40609,40610,40611,40612,40613,40615,40616,40617,40618,58190,58191,58192,58193,58194,58195,58196,58197,58198,58199,58200,58201,58202,58203,58204,58205,58206,58207,58208,58209,58210,58211,58212,58213,58214,58215,58216,58217,58218,58219,58220,58221,58222,58223,58224,58225,58226,58227,58228,58229,58230,58231,58232,58233,58234,58235,58236,58237,58238,58239,58240,58241,58242,58243,58244,58245,58246,58247,58248,58249,58250,58251,58252,58253,58254,58255,58256,58257,58258,58259,58260,58261,58262,58263,58264,58265,58266,58267,58268,58269,58270,58271,58272,58273,58274,58275,58276,58277,58278,58279,58280,58281,58282,58283,40619,40620,40621,40622,40623,40624,40625,40626,40627,40629,40630,40631,40633,40634,40636,40639,40640,40641,40642,40643,40645,40646,40647,40648,40650,40651,40652,40656,40658,40659,40661,40662,40663,40665,40666,40670,40673,40675,40676,40678,40680,40683,40684,40685,40686,40688,40689,40690,40691,40692,40693,40694,40695,40696,40698,40701,40703,40704,40705,40706,40707,40708,40709,40710,40711,40712,40713,40714,40716,40719,40721,40722,40724,40725,40726,40728,40730,40731,40732,40733,40734,40735,40737,40739,40740,40741,40742,40743,40744,40745,40746,40747,40749,40750,40752,40753,58284,58285,58286,58287,58288,58289,58290,58291,58292,58293,58294,58295,58296,58297,58298,58299,58300,58301,58302,58303,58304,58305,58306,58307,58308,58309,58310,58311,58312,58313,58314,58315,58316,58317,58318,58319,58320,58321,58322,58323,58324,58325,58326,58327,58328,58329,58330,58331,58332,58333,58334,58335,58336,58337,58338,58339,58340,58341,58342,58343,58344,58345,58346,58347,58348,58349,58350,58351,58352,58353,58354,58355,58356,58357,58358,58359,58360,58361,58362,58363,58364,58365,58366,58367,58368,58369,58370,58371,58372,58373,58374,58375,58376,58377,40754,40755,40756,40757,40758,40760,40762,40764,40767,40768,40769,40770,40771,40773,40774,40775,40776,40777,40778,40779,40780,40781,40782,40783,40786,40787,40788,40789,40790,40791,40792,40793,40794,40795,40796,40797,40798,40799,40800,40801,40802,40803,40804,40805,40806,40807,40808,40809,40810,40811,40812,40813,40814,40815,40816,40817,40818,40819,40820,40821,40822,40823,40824,40825,40826,40827,40828,40829,40830,40833,40834,40845,40846,40847,40848,40849,40850,40851,40852,40853,40854,40855,40856,40860,40861,40862,40865,40866,40867,40868,40869,63788,63865,63893,63975,63985,58378,58379,58380,58381,58382,58383,58384,58385,58386,58387,58388,58389,58390,58391,58392,58393,58394,58395,58396,58397,58398,58399,58400,58401,58402,58403,58404,58405,58406,58407,58408,58409,58410,58411,58412,58413,58414,58415,58416,58417,58418,58419,58420,58421,58422,58423,58424,58425,58426,58427,58428,58429,58430,58431,58432,58433,58434,58435,58436,58437,58438,58439,58440,58441,58442,58443,58444,58445,58446,58447,58448,58449,58450,58451,58452,58453,58454,58455,58456,58457,58458,58459,58460,58461,58462,58463,58464,58465,58466,58467,58468,58469,58470,58471,64012,64013,64014,64015,64017,64019,64020,64024,64031,64032,64033,64035,64036,64039,64040,64041,11905,59414,59415,59416,11908,13427,13383,11912,11915,59422,13726,13850,13838,11916,11927,14702,14616,59430,14799,14815,14963,14800,59435,59436,15182,15470,15584,11943,59441,59442,11946,16470,16735,11950,17207,11955,11958,11959,59451,17329,17324,11963,17373,17622,18017,17996,59459,18211,18217,18300,18317,11978,18759,18810,18813,18818,18819,18821,18822,18847,18843,18871,18870,59476,59477,19619,19615,19616,19617,19575,19618,19731,19732,19733,19734,19735,19736,19737,19886,59492,58472,58473,58474,58475,58476,58477,58478,58479,58480,58481,58482,58483,58484,58485,58486,58487,58488,58489,58490,58491,58492,58493,58494,58495,58496,58497,58498,58499,58500,58501,58502,58503,58504,58505,58506,58507,58508,58509,58510,58511,58512,58513,58514,58515,58516,58517,58518,58519,58520,58521,58522,58523,58524,58525,58526,58527,58528,58529,58530,58531,58532,58533,58534,58535,58536,58537,58538,58539,58540,58541,58542,58543,58544,58545,58546,58547,58548,58549,58550,58551,58552,58553,58554,58555,58556,58557,58558,58559,58560,58561,58562,58563,58564,58565],"gb18030-ranges":[[0,128],[36,165],[38,169],[45,178],[50,184],[81,216],[89,226],[95,235],[96,238],[100,244],[103,248],[104,251],[105,253],[109,258],[126,276],[133,284],[148,300],[172,325],[175,329],[179,334],[208,364],[306,463],[307,465],[308,467],[309,469],[310,471],[311,473],[312,475],[313,477],[341,506],[428,594],[443,610],[544,712],[545,716],[558,730],[741,930],[742,938],[749,962],[750,970],[805,1026],[819,1104],[820,1106],[7922,8209],[7924,8215],[7925,8218],[7927,8222],[7934,8231],[7943,8241],[7944,8244],[7945,8246],[7950,8252],[8062,8365],[8148,8452],[8149,8454],[8152,8458],[8164,8471],[8174,8482],[8236,8556],[8240,8570],[8262,8596],[8264,8602],[8374,8713],[8380,8720],[8381,8722],[8384,8726],[8388,8731],[8390,8737],[8392,8740],[8393,8742],[8394,8748],[8396,8751],[8401,8760],[8406,8766],[8416,8777],[8419,8781],[8424,8787],[8437,8802],[8439,8808],[8445,8816],[8482,8854],[8485,8858],[8496,8870],[8521,8896],[8603,8979],[8936,9322],[8946,9372],[9046,9548],[9050,9588],[9063,9616],[9066,9622],[9076,9634],[9092,9652],[9100,9662],[9108,9672],[9111,9676],[9113,9680],[9131,9702],[9162,9735],[9164,9738],[9218,9793],[9219,9795],[11329,11906],[11331,11909],[11334,11913],[11336,11917],[11346,11928],[11361,11944],[11363,11947],[11366,11951],[11370,11956],[11372,11960],[11375,11964],[11389,11979],[11682,12284],[11686,12292],[11687,12312],[11692,12319],[11694,12330],[11714,12351],[11716,12436],[11723,12447],[11725,12535],[11730,12543],[11736,12586],[11982,12842],[11989,12850],[12102,12964],[12336,13200],[12348,13215],[12350,13218],[12384,13253],[12393,13263],[12395,13267],[12397,13270],[12510,13384],[12553,13428],[12851,13727],[12962,13839],[12973,13851],[13738,14617],[13823,14703],[13919,14801],[13933,14816],[14080,14964],[14298,15183],[14585,15471],[14698,15585],[15583,16471],[15847,16736],[16318,17208],[16434,17325],[16438,17330],[16481,17374],[16729,17623],[17102,17997],[17122,18018],[17315,18212],[17320,18218],[17402,18301],[17418,18318],[17859,18760],[17909,18811],[17911,18814],[17915,18820],[17916,18823],[17936,18844],[17939,18848],[17961,18872],[18664,19576],[18703,19620],[18814,19738],[18962,19887],[19043,40870],[33469,59244],[33470,59336],[33471,59367],[33484,59413],[33485,59417],[33490,59423],[33497,59431],[33501,59437],[33505,59443],[33513,59452],[33520,59460],[33536,59478],[33550,59493],[37845,63789],[37921,63866],[37948,63894],[38029,63976],[38038,63986],[38064,64016],[38065,64018],[38066,64021],[38069,64025],[38075,64034],[38076,64037],[38078,64042],[39108,65074],[39109,65093],[39113,65107],[39114,65112],[39115,65127],[39116,65132],[39265,65375],[39394,65510],[189e3,65536]],jis0208:[12288,12289,12290,65292,65294,12539,65306,65307,65311,65281,12443,12444,180,65344,168,65342,65507,65343,12541,12542,12445,12446,12291,20189,12293,12294,12295,12540,8213,8208,65295,65340,65374,8741,65372,8230,8229,8216,8217,8220,8221,65288,65289,12308,12309,65339,65341,65371,65373,12296,12297,12298,12299,12300,12301,12302,12303,12304,12305,65291,65293,177,215,247,65309,8800,65308,65310,8806,8807,8734,8756,9794,9792,176,8242,8243,8451,65509,65284,65504,65505,65285,65283,65286,65290,65312,167,9734,9733,9675,9679,9678,9671,9670,9633,9632,9651,9650,9661,9660,8251,12306,8594,8592,8593,8595,12307,null,null,null,null,null,null,null,null,null,null,null,8712,8715,8838,8839,8834,8835,8746,8745,null,null,null,null,null,null,null,null,8743,8744,65506,8658,8660,8704,8707,null,null,null,null,null,null,null,null,null,null,null,8736,8869,8978,8706,8711,8801,8786,8810,8811,8730,8765,8733,8757,8747,8748,null,null,null,null,null,null,null,8491,8240,9839,9837,9834,8224,8225,182,null,null,null,null,9711,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,65296,65297,65298,65299,65300,65301,65302,65303,65304,65305,null,null,null,null,null,null,null,65313,65314,65315,65316,65317,65318,65319,65320,65321,65322,65323,65324,65325,65326,65327,65328,65329,65330,65331,65332,65333,65334,65335,65336,65337,65338,null,null,null,null,null,null,65345,65346,65347,65348,65349,65350,65351,65352,65353,65354,65355,65356,65357,65358,65359,65360,65361,65362,65363,65364,65365,65366,65367,65368,65369,65370,null,null,null,null,12353,12354,12355,12356,12357,12358,12359,12360,12361,12362,12363,12364,12365,12366,12367,12368,12369,12370,12371,12372,12373,12374,12375,12376,12377,12378,12379,12380,12381,12382,12383,12384,12385,12386,12387,12388,12389,12390,12391,12392,12393,12394,12395,12396,12397,12398,12399,12400,12401,12402,12403,12404,12405,12406,12407,12408,12409,12410,12411,12412,12413,12414,12415,12416,12417,12418,12419,12420,12421,12422,12423,12424,12425,12426,12427,12428,12429,12430,12431,12432,12433,12434,12435,null,null,null,null,null,null,null,null,null,null,null,12449,12450,12451,12452,12453,12454,12455,12456,12457,12458,12459,12460,12461,12462,12463,12464,12465,12466,12467,12468,12469,12470,12471,12472,12473,12474,12475,12476,12477,12478,12479,12480,12481,12482,12483,12484,12485,12486,12487,12488,12489,12490,12491,12492,12493,12494,12495,12496,12497,12498,12499,12500,12501,12502,12503,12504,12505,12506,12507,12508,12509,12510,12511,12512,12513,12514,12515,12516,12517,12518,12519,12520,12521,12522,12523,12524,12525,12526,12527,12528,12529,12530,12531,12532,12533,12534,null,null,null,null,null,null,null,null,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,931,932,933,934,935,936,937,null,null,null,null,null,null,null,null,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,963,964,965,966,967,968,969,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1040,1041,1042,1043,1044,1045,1025,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1072,1073,1074,1075,1076,1077,1105,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,null,null,null,null,null,null,null,null,null,null,null,null,null,9472,9474,9484,9488,9496,9492,9500,9516,9508,9524,9532,9473,9475,9487,9491,9499,9495,9507,9523,9515,9531,9547,9504,9519,9512,9527,9535,9501,9520,9509,9528,9538,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,9312,9313,9314,9315,9316,9317,9318,9319,9320,9321,9322,9323,9324,9325,9326,9327,9328,9329,9330,9331,8544,8545,8546,8547,8548,8549,8550,8551,8552,8553,null,13129,13076,13090,13133,13080,13095,13059,13110,13137,13143,13069,13094,13091,13099,13130,13115,13212,13213,13214,13198,13199,13252,13217,null,null,null,null,null,null,null,null,13179,12317,12319,8470,13261,8481,12964,12965,12966,12967,12968,12849,12850,12857,13182,13181,13180,8786,8801,8747,8750,8721,8730,8869,8736,8735,8895,8757,8745,8746,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,20124,21782,23043,38463,21696,24859,25384,23030,36898,33909,33564,31312,24746,25569,28197,26093,33894,33446,39925,26771,22311,26017,25201,23451,22992,34427,39156,32098,32190,39822,25110,31903,34999,23433,24245,25353,26263,26696,38343,38797,26447,20197,20234,20301,20381,20553,22258,22839,22996,23041,23561,24799,24847,24944,26131,26885,28858,30031,30064,31227,32173,32239,32963,33806,34915,35586,36949,36986,21307,20117,20133,22495,32946,37057,30959,19968,22769,28322,36920,31282,33576,33419,39983,20801,21360,21693,21729,22240,23035,24341,39154,28139,32996,34093,38498,38512,38560,38907,21515,21491,23431,28879,32701,36802,38632,21359,40284,31418,19985,30867,33276,28198,22040,21764,27421,34074,39995,23013,21417,28006,29916,38287,22082,20113,36939,38642,33615,39180,21473,21942,23344,24433,26144,26355,26628,27704,27891,27945,29787,30408,31310,38964,33521,34907,35424,37613,28082,30123,30410,39365,24742,35585,36234,38322,27022,21421,20870,22290,22576,22852,23476,24310,24616,25513,25588,27839,28436,28814,28948,29017,29141,29503,32257,33398,33489,34199,36960,37467,40219,22633,26044,27738,29989,20985,22830,22885,24448,24540,25276,26106,27178,27431,27572,29579,32705,35158,40236,40206,40644,23713,27798,33659,20740,23627,25014,33222,26742,29281,20057,20474,21368,24681,28201,31311,38899,19979,21270,20206,20309,20285,20385,20339,21152,21487,22025,22799,23233,23478,23521,31185,26247,26524,26550,27468,27827,28779,29634,31117,31166,31292,31623,33457,33499,33540,33655,33775,33747,34662,35506,22057,36008,36838,36942,38686,34442,20420,23784,25105,29273,30011,33253,33469,34558,36032,38597,39187,39381,20171,20250,35299,22238,22602,22730,24315,24555,24618,24724,24674,25040,25106,25296,25913,39745,26214,26800,28023,28784,30028,30342,32117,33445,34809,38283,38542,35997,20977,21182,22806,21683,23475,23830,24936,27010,28079,30861,33995,34903,35442,37799,39608,28012,39336,34521,22435,26623,34510,37390,21123,22151,21508,24275,25313,25785,26684,26680,27579,29554,30906,31339,35226,35282,36203,36611,37101,38307,38548,38761,23398,23731,27005,38989,38990,25499,31520,27179,27263,26806,39949,28511,21106,21917,24688,25324,27963,28167,28369,33883,35088,36676,19988,39993,21494,26907,27194,38788,26666,20828,31427,33970,37340,37772,22107,40232,26658,33541,33841,31909,21e3,33477,29926,20094,20355,20896,23506,21002,21208,21223,24059,21914,22570,23014,23436,23448,23515,24178,24185,24739,24863,24931,25022,25563,25954,26577,26707,26874,27454,27475,27735,28450,28567,28485,29872,29976,30435,30475,31487,31649,31777,32233,32566,32752,32925,33382,33694,35251,35532,36011,36996,37969,38291,38289,38306,38501,38867,39208,33304,20024,21547,23736,24012,29609,30284,30524,23721,32747,36107,38593,38929,38996,39e3,20225,20238,21361,21916,22120,22522,22855,23305,23492,23696,24076,24190,24524,25582,26426,26071,26082,26399,26827,26820,27231,24112,27589,27671,27773,30079,31048,23395,31232,32e3,24509,35215,35352,36020,36215,36556,36637,39138,39438,39740,20096,20605,20736,22931,23452,25135,25216,25836,27450,29344,30097,31047,32681,34811,35516,35696,25516,33738,38816,21513,21507,21931,26708,27224,35440,30759,26485,40653,21364,23458,33050,34384,36870,19992,20037,20167,20241,21450,21560,23470,24339,24613,25937,26429,27714,27762,27875,28792,29699,31350,31406,31496,32026,31998,32102,26087,29275,21435,23621,24040,25298,25312,25369,28192,34394,35377,36317,37624,28417,31142,39770,20136,20139,20140,20379,20384,20689,20807,31478,20849,20982,21332,21281,21375,21483,21932,22659,23777,24375,24394,24623,24656,24685,25375,25945,27211,27841,29378,29421,30703,33016,33029,33288,34126,37111,37857,38911,39255,39514,20208,20957,23597,26241,26989,23616,26354,26997,29577,26704,31873,20677,21220,22343,24062,37670,26020,27427,27453,29748,31105,31165,31563,32202,33465,33740,34943,35167,35641,36817,37329,21535,37504,20061,20534,21477,21306,29399,29590,30697,33510,36527,39366,39368,39378,20855,24858,34398,21936,31354,20598,23507,36935,38533,20018,27355,37351,23633,23624,25496,31391,27795,38772,36705,31402,29066,38536,31874,26647,32368,26705,37740,21234,21531,34219,35347,32676,36557,37089,21350,34952,31041,20418,20670,21009,20804,21843,22317,29674,22411,22865,24418,24452,24693,24950,24935,25001,25522,25658,25964,26223,26690,28179,30054,31293,31995,32076,32153,32331,32619,33550,33610,34509,35336,35427,35686,36605,38938,40335,33464,36814,39912,21127,25119,25731,28608,38553,26689,20625,27424,27770,28500,31348,32080,34880,35363,26376,20214,20537,20518,20581,20860,21048,21091,21927,22287,22533,23244,24314,25010,25080,25331,25458,26908,27177,29309,29356,29486,30740,30831,32121,30476,32937,35211,35609,36066,36562,36963,37749,38522,38997,39443,40568,20803,21407,21427,24187,24358,28187,28304,29572,29694,32067,33335,35328,35578,38480,20046,20491,21476,21628,22266,22993,23396,24049,24235,24359,25144,25925,26543,28246,29392,31946,34996,32929,32993,33776,34382,35463,36328,37431,38599,39015,40723,20116,20114,20237,21320,21577,21566,23087,24460,24481,24735,26791,27278,29786,30849,35486,35492,35703,37264,20062,39881,20132,20348,20399,20505,20502,20809,20844,21151,21177,21246,21402,21475,21521,21518,21897,22353,22434,22909,23380,23389,23439,24037,24039,24055,24184,24195,24218,24247,24344,24658,24908,25239,25304,25511,25915,26114,26179,26356,26477,26657,26775,27083,27743,27946,28009,28207,28317,30002,30343,30828,31295,31968,32005,32024,32094,32177,32789,32771,32943,32945,33108,33167,33322,33618,34892,34913,35611,36002,36092,37066,37237,37489,30783,37628,38308,38477,38917,39321,39640,40251,21083,21163,21495,21512,22741,25335,28640,35946,36703,40633,20811,21051,21578,22269,31296,37239,40288,40658,29508,28425,33136,29969,24573,24794,39592,29403,36796,27492,38915,20170,22256,22372,22718,23130,24680,25031,26127,26118,26681,26801,28151,30165,32058,33390,39746,20123,20304,21449,21766,23919,24038,24046,26619,27801,29811,30722,35408,37782,35039,22352,24231,25387,20661,20652,20877,26368,21705,22622,22971,23472,24425,25165,25505,26685,27507,28168,28797,37319,29312,30741,30758,31085,25998,32048,33756,35009,36617,38555,21092,22312,26448,32618,36001,20916,22338,38442,22586,27018,32948,21682,23822,22524,30869,40442,20316,21066,21643,25662,26152,26388,26613,31364,31574,32034,37679,26716,39853,31545,21273,20874,21047,23519,25334,25774,25830,26413,27578,34217,38609,30352,39894,25420,37638,39851,30399,26194,19977,20632,21442,23665,24808,25746,25955,26719,29158,29642,29987,31639,32386,34453,35715,36059,37240,39184,26028,26283,27531,20181,20180,20282,20351,21050,21496,21490,21987,22235,22763,22987,22985,23039,23376,23629,24066,24107,24535,24605,25351,25903,23388,26031,26045,26088,26525,27490,27515,27663,29509,31049,31169,31992,32025,32043,32930,33026,33267,35222,35422,35433,35430,35468,35566,36039,36060,38604,39164,27503,20107,20284,20365,20816,23383,23546,24904,25345,26178,27425,28363,27835,29246,29885,30164,30913,31034,32780,32819,33258,33940,36766,27728,40575,24335,35672,40235,31482,36600,23437,38635,19971,21489,22519,22833,23241,23460,24713,28287,28422,30142,36074,23455,34048,31712,20594,26612,33437,23649,34122,32286,33294,20889,23556,25448,36198,26012,29038,31038,32023,32773,35613,36554,36974,34503,37034,20511,21242,23610,26451,28796,29237,37196,37320,37675,33509,23490,24369,24825,20027,21462,23432,25163,26417,27530,29417,29664,31278,33131,36259,37202,39318,20754,21463,21610,23551,25480,27193,32172,38656,22234,21454,21608,23447,23601,24030,20462,24833,25342,27954,31168,31179,32066,32333,32722,33261,33311,33936,34886,35186,35728,36468,36655,36913,37195,37228,38598,37276,20160,20303,20805,21313,24467,25102,26580,27713,28171,29539,32294,37325,37507,21460,22809,23487,28113,31069,32302,31899,22654,29087,20986,34899,36848,20426,23803,26149,30636,31459,33308,39423,20934,24490,26092,26991,27529,28147,28310,28516,30462,32020,24033,36981,37255,38918,20966,21021,25152,26257,26329,28186,24246,32210,32626,26360,34223,34295,35576,21161,21465,22899,24207,24464,24661,37604,38500,20663,20767,21213,21280,21319,21484,21736,21830,21809,22039,22888,22974,23100,23477,23558,23567,23569,23578,24196,24202,24288,24432,25215,25220,25307,25484,25463,26119,26124,26157,26230,26494,26786,27167,27189,27836,28040,28169,28248,28988,28966,29031,30151,30465,30813,30977,31077,31216,31456,31505,31911,32057,32918,33750,33931,34121,34909,35059,35359,35388,35412,35443,35937,36062,37284,37478,37758,37912,38556,38808,19978,19976,19998,20055,20887,21104,22478,22580,22732,23330,24120,24773,25854,26465,26454,27972,29366,30067,31331,33976,35698,37304,37664,22065,22516,39166,25325,26893,27542,29165,32340,32887,33394,35302,39135,34645,36785,23611,20280,20449,20405,21767,23072,23517,23529,24515,24910,25391,26032,26187,26862,27035,28024,28145,30003,30137,30495,31070,31206,32051,33251,33455,34218,35242,35386,36523,36763,36914,37341,38663,20154,20161,20995,22645,22764,23563,29978,23613,33102,35338,36805,38499,38765,31525,35535,38920,37218,22259,21416,36887,21561,22402,24101,25512,27700,28810,30561,31883,32736,34928,36930,37204,37648,37656,38543,29790,39620,23815,23913,25968,26530,36264,38619,25454,26441,26905,33733,38935,38592,35070,28548,25722,23544,19990,28716,30045,26159,20932,21046,21218,22995,24449,24615,25104,25919,25972,26143,26228,26866,26646,27491,28165,29298,29983,30427,31934,32854,22768,35069,35199,35488,35475,35531,36893,37266,38738,38745,25993,31246,33030,38587,24109,24796,25114,26021,26132,26512,30707,31309,31821,32318,33034,36012,36196,36321,36447,30889,20999,25305,25509,25666,25240,35373,31363,31680,35500,38634,32118,33292,34633,20185,20808,21315,21344,23459,23554,23574,24029,25126,25159,25776,26643,26676,27849,27973,27927,26579,28508,29006,29053,26059,31359,31661,32218,32330,32680,33146,33307,33337,34214,35438,36046,36341,36984,36983,37549,37521,38275,39854,21069,21892,28472,28982,20840,31109,32341,33203,31950,22092,22609,23720,25514,26366,26365,26970,29401,30095,30094,30990,31062,31199,31895,32032,32068,34311,35380,38459,36961,40736,20711,21109,21452,21474,20489,21930,22766,22863,29245,23435,23652,21277,24803,24819,25436,25475,25407,25531,25805,26089,26361,24035,27085,27133,28437,29157,20105,30185,30456,31379,31967,32207,32156,32865,33609,33624,33900,33980,34299,35013,36208,36865,36973,37783,38684,39442,20687,22679,24974,33235,34101,36104,36896,20419,20596,21063,21363,24687,25417,26463,28204,36275,36895,20439,23646,36042,26063,32154,21330,34966,20854,25539,23384,23403,23562,25613,26449,36956,20182,22810,22826,27760,35409,21822,22549,22949,24816,25171,26561,33333,26965,38464,39364,39464,20307,22534,23550,32784,23729,24111,24453,24608,24907,25140,26367,27888,28382,32974,33151,33492,34955,36024,36864,36910,38538,40667,39899,20195,21488,22823,31532,37261,38988,40441,28381,28711,21331,21828,23429,25176,25246,25299,27810,28655,29730,35351,37944,28609,35582,33592,20967,34552,21482,21481,20294,36948,36784,22890,33073,24061,31466,36799,26842,35895,29432,40008,27197,35504,20025,21336,22022,22374,25285,25506,26086,27470,28129,28251,28845,30701,31471,31658,32187,32829,32966,34507,35477,37723,22243,22727,24382,26029,26262,27264,27573,30007,35527,20516,30693,22320,24347,24677,26234,27744,30196,31258,32622,33268,34584,36933,39347,31689,30044,31481,31569,33988,36880,31209,31378,33590,23265,30528,20013,20210,23449,24544,25277,26172,26609,27880,34411,34935,35387,37198,37619,39376,27159,28710,29482,33511,33879,36015,19969,20806,20939,21899,23541,24086,24115,24193,24340,24373,24427,24500,25074,25361,26274,26397,28526,29266,30010,30522,32884,33081,33144,34678,35519,35548,36229,36339,37530,38263,38914,40165,21189,25431,30452,26389,27784,29645,36035,37806,38515,27941,22684,26894,27084,36861,37786,30171,36890,22618,26626,25524,27131,20291,28460,26584,36795,34086,32180,37716,26943,28528,22378,22775,23340,32044,29226,21514,37347,40372,20141,20302,20572,20597,21059,35998,21576,22564,23450,24093,24213,24237,24311,24351,24716,25269,25402,25552,26799,27712,30855,31118,31243,32224,33351,35330,35558,36420,36883,37048,37165,37336,40718,27877,25688,25826,25973,28404,30340,31515,36969,37841,28346,21746,24505,25764,36685,36845,37444,20856,22635,22825,23637,24215,28155,32399,29980,36028,36578,39003,28857,20253,27583,28593,3e4,38651,20814,21520,22581,22615,22956,23648,24466,26007,26460,28193,30331,33759,36077,36884,37117,37709,30757,30778,21162,24230,22303,22900,24594,20498,20826,20908,20941,20992,21776,22612,22616,22871,23445,23798,23947,24764,25237,25645,26481,26691,26812,26847,30423,28120,28271,28059,28783,29128,24403,30168,31095,31561,31572,31570,31958,32113,21040,33891,34153,34276,35342,35588,35910,36367,36867,36879,37913,38518,38957,39472,38360,20685,21205,21516,22530,23566,24999,25758,27934,30643,31461,33012,33796,36947,37509,23776,40199,21311,24471,24499,28060,29305,30563,31167,31716,27602,29420,35501,26627,27233,20984,31361,26932,23626,40182,33515,23493,37193,28702,22136,23663,24775,25958,27788,35930,36929,38931,21585,26311,37389,22856,37027,20869,20045,20970,34201,35598,28760,25466,37707,26978,39348,32260,30071,21335,26976,36575,38627,27741,20108,23612,24336,36841,21250,36049,32905,34425,24319,26085,20083,20837,22914,23615,38894,20219,22922,24525,35469,28641,31152,31074,23527,33905,29483,29105,24180,24565,25467,25754,29123,31896,20035,24316,20043,22492,22178,24745,28611,32013,33021,33075,33215,36786,35223,34468,24052,25226,25773,35207,26487,27874,27966,29750,30772,23110,32629,33453,39340,20467,24259,25309,25490,25943,26479,30403,29260,32972,32954,36649,37197,20493,22521,23186,26757,26995,29028,29437,36023,22770,36064,38506,36889,34687,31204,30695,33833,20271,21093,21338,25293,26575,27850,30333,31636,31893,33334,34180,36843,26333,28448,29190,32283,33707,39361,40614,20989,31665,30834,31672,32903,31560,27368,24161,32908,30033,30048,20843,37474,28300,30330,37271,39658,20240,32624,25244,31567,38309,40169,22138,22617,34532,38588,20276,21028,21322,21453,21467,24070,25644,26001,26495,27710,27726,29256,29359,29677,30036,32321,33324,34281,36009,31684,37318,29033,38930,39151,25405,26217,30058,30436,30928,34115,34542,21290,21329,21542,22915,24199,24444,24754,25161,25209,25259,26e3,27604,27852,30130,30382,30865,31192,32203,32631,32933,34987,35513,36027,36991,38750,39131,27147,31800,20633,23614,24494,26503,27608,29749,30473,32654,40763,26570,31255,21305,30091,39661,24422,33181,33777,32920,24380,24517,30050,31558,36924,26727,23019,23195,32016,30334,35628,20469,24426,27161,27703,28418,29922,31080,34920,35413,35961,24287,25551,30149,31186,33495,37672,37618,33948,34541,39981,21697,24428,25996,27996,28693,36007,36051,38971,25935,29942,19981,20184,22496,22827,23142,23500,20904,24067,24220,24598,25206,25975,26023,26222,28014,29238,31526,33104,33178,33433,35676,36e3,36070,36212,38428,38468,20398,25771,27494,33310,33889,34154,37096,23553,26963,39080,33914,34135,20239,21103,24489,24133,26381,31119,33145,35079,35206,28149,24343,25173,27832,20175,29289,39826,20998,21563,22132,22707,24996,25198,28954,22894,31881,31966,32027,38640,25991,32862,19993,20341,20853,22592,24163,24179,24330,26564,20006,34109,38281,38491,31859,38913,20731,22721,30294,30887,21029,30629,34065,31622,20559,22793,29255,31687,32232,36794,36820,36941,20415,21193,23081,24321,38829,20445,33303,37610,22275,25429,27497,29995,35036,36628,31298,21215,22675,24917,25098,26286,27597,31807,33769,20515,20472,21253,21574,22577,22857,23453,23792,23791,23849,24214,25265,25447,25918,26041,26379,27861,27873,28921,30770,32299,32990,33459,33804,34028,34562,35090,35370,35914,37030,37586,39165,40179,40300,20047,20129,20621,21078,22346,22952,24125,24536,24537,25151,26292,26395,26576,26834,20882,32033,32938,33192,35584,35980,36031,37502,38450,21536,38956,21271,20693,21340,22696,25778,26420,29287,30566,31302,37350,21187,27809,27526,22528,24140,22868,26412,32763,20961,30406,25705,30952,39764,40635,22475,22969,26151,26522,27598,21737,27097,24149,33180,26517,39850,26622,40018,26717,20134,20451,21448,25273,26411,27819,36804,20397,32365,40639,19975,24930,28288,28459,34067,21619,26410,39749,24051,31637,23724,23494,34588,28234,34001,31252,33032,22937,31885,27665,30496,21209,22818,28961,29279,30683,38695,40289,26891,23167,23064,20901,21517,21629,26126,30431,36855,37528,40180,23018,29277,28357,20813,26825,32191,32236,38754,40634,25720,27169,33538,22916,23391,27611,29467,30450,32178,32791,33945,20786,26408,40665,30446,26466,21247,39173,23588,25147,31870,36016,21839,24758,32011,38272,21249,20063,20918,22812,29242,32822,37326,24357,30690,21380,24441,32004,34220,35379,36493,38742,26611,34222,37971,24841,24840,27833,30290,35565,36664,21807,20305,20778,21191,21451,23461,24189,24736,24962,25558,26377,26586,28263,28044,29494,29495,30001,31056,35029,35480,36938,37009,37109,38596,34701,22805,20104,20313,19982,35465,36671,38928,20653,24188,22934,23481,24248,25562,25594,25793,26332,26954,27096,27915,28342,29076,29992,31407,32650,32768,33865,33993,35201,35617,36362,36965,38525,39178,24958,25233,27442,27779,28020,32716,32764,28096,32645,34746,35064,26469,33713,38972,38647,27931,32097,33853,37226,20081,21365,23888,27396,28651,34253,34349,35239,21033,21519,23653,26446,26792,29702,29827,30178,35023,35041,37324,38626,38520,24459,29575,31435,33870,25504,30053,21129,27969,28316,29705,30041,30827,31890,38534,31452,40845,20406,24942,26053,34396,20102,20142,20698,20001,20940,23534,26009,26753,28092,29471,30274,30637,31260,31975,33391,35538,36988,37327,38517,38936,21147,32209,20523,21400,26519,28107,29136,29747,33256,36650,38563,40023,40607,29792,22593,28057,32047,39006,20196,20278,20363,20919,21169,23994,24604,29618,31036,33491,37428,38583,38646,38666,40599,40802,26278,27508,21015,21155,28872,35010,24265,24651,24976,28451,29001,31806,32244,32879,34030,36899,37676,21570,39791,27347,28809,36034,36335,38706,21172,23105,24266,24324,26391,27004,27028,28010,28431,29282,29436,31725,32769,32894,34635,37070,20845,40595,31108,32907,37682,35542,20525,21644,35441,27498,36036,33031,24785,26528,40434,20121,20120,39952,35435,34241,34152,26880,28286,30871,33109,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,24332,19984,19989,20010,20017,20022,20028,20031,20034,20054,20056,20098,20101,35947,20106,33298,24333,20110,20126,20127,20128,20130,20144,20147,20150,20174,20173,20164,20166,20162,20183,20190,20205,20191,20215,20233,20314,20272,20315,20317,20311,20295,20342,20360,20367,20376,20347,20329,20336,20369,20335,20358,20374,20760,20436,20447,20430,20440,20443,20433,20442,20432,20452,20453,20506,20520,20500,20522,20517,20485,20252,20470,20513,20521,20524,20478,20463,20497,20486,20547,20551,26371,20565,20560,20552,20570,20566,20588,20600,20608,20634,20613,20660,20658,20681,20682,20659,20674,20694,20702,20709,20717,20707,20718,20729,20725,20745,20737,20738,20758,20757,20756,20762,20769,20794,20791,20796,20795,20799,20800,20818,20812,20820,20834,31480,20841,20842,20846,20864,20866,22232,20876,20873,20879,20881,20883,20885,20886,20900,20902,20898,20905,20906,20907,20915,20913,20914,20912,20917,20925,20933,20937,20955,20960,34389,20969,20973,20976,20981,20990,20996,21003,21012,21006,21031,21034,21038,21043,21049,21071,21060,21067,21068,21086,21076,21098,21108,21097,21107,21119,21117,21133,21140,21138,21105,21128,21137,36776,36775,21164,21165,21180,21173,21185,21197,21207,21214,21219,21222,39149,21216,21235,21237,21240,21241,21254,21256,30008,21261,21264,21263,21269,21274,21283,21295,21297,21299,21304,21312,21318,21317,19991,21321,21325,20950,21342,21353,21358,22808,21371,21367,21378,21398,21408,21414,21413,21422,21424,21430,21443,31762,38617,21471,26364,29166,21486,21480,21485,21498,21505,21565,21568,21548,21549,21564,21550,21558,21545,21533,21582,21647,21621,21646,21599,21617,21623,21616,21650,21627,21632,21622,21636,21648,21638,21703,21666,21688,21669,21676,21700,21704,21672,21675,21698,21668,21694,21692,21720,21733,21734,21775,21780,21757,21742,21741,21754,21730,21817,21824,21859,21836,21806,21852,21829,21846,21847,21816,21811,21853,21913,21888,21679,21898,21919,21883,21886,21912,21918,21934,21884,21891,21929,21895,21928,21978,21957,21983,21956,21980,21988,21972,22036,22007,22038,22014,22013,22043,22009,22094,22096,29151,22068,22070,22066,22072,22123,22116,22063,22124,22122,22150,22144,22154,22176,22164,22159,22181,22190,22198,22196,22210,22204,22209,22211,22208,22216,22222,22225,22227,22231,22254,22265,22272,22271,22276,22281,22280,22283,22285,22291,22296,22294,21959,22300,22310,22327,22328,22350,22331,22336,22351,22377,22464,22408,22369,22399,22409,22419,22432,22451,22436,22442,22448,22467,22470,22484,22482,22483,22538,22486,22499,22539,22553,22557,22642,22561,22626,22603,22640,27584,22610,22589,22649,22661,22713,22687,22699,22714,22750,22715,22712,22702,22725,22739,22737,22743,22745,22744,22757,22748,22756,22751,22767,22778,22777,22779,22780,22781,22786,22794,22800,22811,26790,22821,22828,22829,22834,22840,22846,31442,22869,22864,22862,22874,22872,22882,22880,22887,22892,22889,22904,22913,22941,20318,20395,22947,22962,22982,23016,23004,22925,23001,23002,23077,23071,23057,23068,23049,23066,23104,23148,23113,23093,23094,23138,23146,23194,23228,23230,23243,23234,23229,23267,23255,23270,23273,23254,23290,23291,23308,23307,23318,23346,23248,23338,23350,23358,23363,23365,23360,23377,23381,23386,23387,23397,23401,23408,23411,23413,23416,25992,23418,23424,23427,23462,23480,23491,23495,23497,23508,23504,23524,23526,23522,23518,23525,23531,23536,23542,23539,23557,23559,23560,23565,23571,23584,23586,23592,23608,23609,23617,23622,23630,23635,23632,23631,23409,23660,23662,20066,23670,23673,23692,23697,23700,22939,23723,23739,23734,23740,23735,23749,23742,23751,23769,23785,23805,23802,23789,23948,23786,23819,23829,23831,23900,23839,23835,23825,23828,23842,23834,23833,23832,23884,23890,23886,23883,23916,23923,23926,23943,23940,23938,23970,23965,23980,23982,23997,23952,23991,23996,24009,24013,24019,24018,24022,24027,24043,24050,24053,24075,24090,24089,24081,24091,24118,24119,24132,24131,24128,24142,24151,24148,24159,24162,24164,24135,24181,24182,24186,40636,24191,24224,24257,24258,24264,24272,24271,24278,24291,24285,24282,24283,24290,24289,24296,24297,24300,24305,24307,24304,24308,24312,24318,24323,24329,24413,24412,24331,24337,24342,24361,24365,24376,24385,24392,24396,24398,24367,24401,24406,24407,24409,24417,24429,24435,24439,24451,24450,24447,24458,24456,24465,24455,24478,24473,24472,24480,24488,24493,24508,24534,24571,24548,24568,24561,24541,24755,24575,24609,24672,24601,24592,24617,24590,24625,24603,24597,24619,24614,24591,24634,24666,24641,24682,24695,24671,24650,24646,24653,24675,24643,24676,24642,24684,24683,24665,24705,24717,24807,24707,24730,24708,24731,24726,24727,24722,24743,24715,24801,24760,24800,24787,24756,24560,24765,24774,24757,24792,24909,24853,24838,24822,24823,24832,24820,24826,24835,24865,24827,24817,24845,24846,24903,24894,24872,24871,24906,24895,24892,24876,24884,24893,24898,24900,24947,24951,24920,24921,24922,24939,24948,24943,24933,24945,24927,24925,24915,24949,24985,24982,24967,25004,24980,24986,24970,24977,25003,25006,25036,25034,25033,25079,25032,25027,25030,25018,25035,32633,25037,25062,25059,25078,25082,25076,25087,25085,25084,25086,25088,25096,25097,25101,25100,25108,25115,25118,25121,25130,25134,25136,25138,25139,25153,25166,25182,25187,25179,25184,25192,25212,25218,25225,25214,25234,25235,25238,25300,25219,25236,25303,25297,25275,25295,25343,25286,25812,25288,25308,25292,25290,25282,25287,25243,25289,25356,25326,25329,25383,25346,25352,25327,25333,25424,25406,25421,25628,25423,25494,25486,25472,25515,25462,25507,25487,25481,25503,25525,25451,25449,25534,25577,25536,25542,25571,25545,25554,25590,25540,25622,25652,25606,25619,25638,25654,25885,25623,25640,25615,25703,25711,25718,25678,25898,25749,25747,25765,25769,25736,25788,25818,25810,25797,25799,25787,25816,25794,25841,25831,33289,25824,25825,25260,25827,25839,25900,25846,25844,25842,25850,25856,25853,25880,25884,25861,25892,25891,25899,25908,25909,25911,25910,25912,30027,25928,25942,25941,25933,25944,25950,25949,25970,25976,25986,25987,35722,26011,26015,26027,26039,26051,26054,26049,26052,26060,26066,26075,26073,26080,26081,26097,26482,26122,26115,26107,26483,26165,26166,26164,26140,26191,26180,26185,26177,26206,26205,26212,26215,26216,26207,26210,26224,26243,26248,26254,26249,26244,26264,26269,26305,26297,26313,26302,26300,26308,26296,26326,26330,26336,26175,26342,26345,26352,26357,26359,26383,26390,26398,26406,26407,38712,26414,26431,26422,26433,26424,26423,26438,26462,26464,26457,26467,26468,26505,26480,26537,26492,26474,26508,26507,26534,26529,26501,26551,26607,26548,26604,26547,26601,26552,26596,26590,26589,26594,26606,26553,26574,26566,26599,27292,26654,26694,26665,26688,26701,26674,26702,26803,26667,26713,26723,26743,26751,26783,26767,26797,26772,26781,26779,26755,27310,26809,26740,26805,26784,26810,26895,26765,26750,26881,26826,26888,26840,26914,26918,26849,26892,26829,26836,26855,26837,26934,26898,26884,26839,26851,26917,26873,26848,26863,26920,26922,26906,26915,26913,26822,27001,26999,26972,27e3,26987,26964,27006,26990,26937,26996,26941,26969,26928,26977,26974,26973,27009,26986,27058,27054,27088,27071,27073,27091,27070,27086,23528,27082,27101,27067,27075,27047,27182,27025,27040,27036,27029,27060,27102,27112,27138,27163,27135,27402,27129,27122,27111,27141,27057,27166,27117,27156,27115,27146,27154,27329,27171,27155,27204,27148,27250,27190,27256,27207,27234,27225,27238,27208,27192,27170,27280,27277,27296,27268,27298,27299,27287,34327,27323,27331,27330,27320,27315,27308,27358,27345,27359,27306,27354,27370,27387,27397,34326,27386,27410,27414,39729,27423,27448,27447,30428,27449,39150,27463,27459,27465,27472,27481,27476,27483,27487,27489,27512,27513,27519,27520,27524,27523,27533,27544,27541,27550,27556,27562,27563,27567,27570,27569,27571,27575,27580,27590,27595,27603,27615,27628,27627,27635,27631,40638,27656,27667,27668,27675,27684,27683,27742,27733,27746,27754,27778,27789,27802,27777,27803,27774,27752,27763,27794,27792,27844,27889,27859,27837,27863,27845,27869,27822,27825,27838,27834,27867,27887,27865,27882,27935,34893,27958,27947,27965,27960,27929,27957,27955,27922,27916,28003,28051,28004,27994,28025,27993,28046,28053,28644,28037,28153,28181,28170,28085,28103,28134,28088,28102,28140,28126,28108,28136,28114,28101,28154,28121,28132,28117,28138,28142,28205,28270,28206,28185,28274,28255,28222,28195,28267,28203,28278,28237,28191,28227,28218,28238,28196,28415,28189,28216,28290,28330,28312,28361,28343,28371,28349,28335,28356,28338,28372,28373,28303,28325,28354,28319,28481,28433,28748,28396,28408,28414,28479,28402,28465,28399,28466,28364,28478,28435,28407,28550,28538,28536,28545,28544,28527,28507,28659,28525,28546,28540,28504,28558,28561,28610,28518,28595,28579,28577,28580,28601,28614,28586,28639,28629,28652,28628,28632,28657,28654,28635,28681,28683,28666,28689,28673,28687,28670,28699,28698,28532,28701,28696,28703,28720,28734,28722,28753,28771,28825,28818,28847,28913,28844,28856,28851,28846,28895,28875,28893,28889,28937,28925,28956,28953,29029,29013,29064,29030,29026,29004,29014,29036,29071,29179,29060,29077,29096,29100,29143,29113,29118,29138,29129,29140,29134,29152,29164,29159,29173,29180,29177,29183,29197,29200,29211,29224,29229,29228,29232,29234,29243,29244,29247,29248,29254,29259,29272,29300,29310,29314,29313,29319,29330,29334,29346,29351,29369,29362,29379,29382,29380,29390,29394,29410,29408,29409,29433,29431,20495,29463,29450,29468,29462,29469,29492,29487,29481,29477,29502,29518,29519,40664,29527,29546,29544,29552,29560,29557,29563,29562,29640,29619,29646,29627,29632,29669,29678,29662,29858,29701,29807,29733,29688,29746,29754,29781,29759,29791,29785,29761,29788,29801,29808,29795,29802,29814,29822,29835,29854,29863,29898,29903,29908,29681,29920,29923,29927,29929,29934,29938,29936,29937,29944,29943,29956,29955,29957,29964,29966,29965,29973,29971,29982,29990,29996,30012,30020,30029,30026,30025,30043,30022,30042,30057,30052,30055,30059,30061,30072,30070,30086,30087,30068,30090,30089,30082,30100,30106,30109,30117,30115,30146,30131,30147,30133,30141,30136,30140,30129,30157,30154,30162,30169,30179,30174,30206,30207,30204,30209,30192,30202,30194,30195,30219,30221,30217,30239,30247,30240,30241,30242,30244,30260,30256,30267,30279,30280,30278,30300,30296,30305,30306,30312,30313,30314,30311,30316,30320,30322,30326,30328,30332,30336,30339,30344,30347,30350,30358,30355,30361,30362,30384,30388,30392,30393,30394,30402,30413,30422,30418,30430,30433,30437,30439,30442,34351,30459,30472,30471,30468,30505,30500,30494,30501,30502,30491,30519,30520,30535,30554,30568,30571,30555,30565,30591,30590,30585,30606,30603,30609,30624,30622,30640,30646,30649,30655,30652,30653,30651,30663,30669,30679,30682,30684,30691,30702,30716,30732,30738,31014,30752,31018,30789,30862,30836,30854,30844,30874,30860,30883,30901,30890,30895,30929,30918,30923,30932,30910,30908,30917,30922,30956,30951,30938,30973,30964,30983,30994,30993,31001,31020,31019,31040,31072,31063,31071,31066,31061,31059,31098,31103,31114,31133,31143,40779,31146,31150,31155,31161,31162,31177,31189,31207,31212,31201,31203,31240,31245,31256,31257,31264,31263,31104,31281,31291,31294,31287,31299,31319,31305,31329,31330,31337,40861,31344,31353,31357,31368,31383,31381,31384,31382,31401,31432,31408,31414,31429,31428,31423,36995,31431,31434,31437,31439,31445,31443,31449,31450,31453,31457,31458,31462,31469,31472,31490,31503,31498,31494,31539,31512,31513,31518,31541,31528,31542,31568,31610,31492,31565,31499,31564,31557,31605,31589,31604,31591,31600,31601,31596,31598,31645,31640,31647,31629,31644,31642,31627,31634,31631,31581,31641,31691,31681,31692,31695,31668,31686,31709,31721,31761,31764,31718,31717,31840,31744,31751,31763,31731,31735,31767,31757,31734,31779,31783,31786,31775,31799,31787,31805,31820,31811,31828,31823,31808,31824,31832,31839,31844,31830,31845,31852,31861,31875,31888,31908,31917,31906,31915,31905,31912,31923,31922,31921,31918,31929,31933,31936,31941,31938,31960,31954,31964,31970,39739,31983,31986,31988,31990,31994,32006,32002,32028,32021,32010,32069,32075,32046,32050,32063,32053,32070,32115,32086,32078,32114,32104,32110,32079,32099,32147,32137,32091,32143,32125,32155,32186,32174,32163,32181,32199,32189,32171,32317,32162,32175,32220,32184,32159,32176,32216,32221,32228,32222,32251,32242,32225,32261,32266,32291,32289,32274,32305,32287,32265,32267,32290,32326,32358,32315,32309,32313,32323,32311,32306,32314,32359,32349,32342,32350,32345,32346,32377,32362,32361,32380,32379,32387,32213,32381,36782,32383,32392,32393,32396,32402,32400,32403,32404,32406,32398,32411,32412,32568,32570,32581,32588,32589,32590,32592,32593,32597,32596,32600,32607,32608,32616,32617,32615,32632,32642,32646,32643,32648,32647,32652,32660,32670,32669,32666,32675,32687,32690,32697,32686,32694,32696,35697,32709,32710,32714,32725,32724,32737,32742,32745,32755,32761,39132,32774,32772,32779,32786,32792,32793,32796,32801,32808,32831,32827,32842,32838,32850,32856,32858,32863,32866,32872,32883,32882,32880,32886,32889,32893,32895,32900,32902,32901,32923,32915,32922,32941,20880,32940,32987,32997,32985,32989,32964,32986,32982,33033,33007,33009,33051,33065,33059,33071,33099,38539,33094,33086,33107,33105,33020,33137,33134,33125,33126,33140,33155,33160,33162,33152,33154,33184,33173,33188,33187,33119,33171,33193,33200,33205,33214,33208,33213,33216,33218,33210,33225,33229,33233,33241,33240,33224,33242,33247,33248,33255,33274,33275,33278,33281,33282,33285,33287,33290,33293,33296,33302,33321,33323,33336,33331,33344,33369,33368,33373,33370,33375,33380,33378,33384,33386,33387,33326,33393,33399,33400,33406,33421,33426,33451,33439,33467,33452,33505,33507,33503,33490,33524,33523,33530,33683,33539,33531,33529,33502,33542,33500,33545,33497,33589,33588,33558,33586,33585,33600,33593,33616,33605,33583,33579,33559,33560,33669,33690,33706,33695,33698,33686,33571,33678,33671,33674,33660,33717,33651,33653,33696,33673,33704,33780,33811,33771,33742,33789,33795,33752,33803,33729,33783,33799,33760,33778,33805,33826,33824,33725,33848,34054,33787,33901,33834,33852,34138,33924,33911,33899,33965,33902,33922,33897,33862,33836,33903,33913,33845,33994,33890,33977,33983,33951,34009,33997,33979,34010,34e3,33985,33990,34006,33953,34081,34047,34036,34071,34072,34092,34079,34069,34068,34044,34112,34147,34136,34120,34113,34306,34123,34133,34176,34212,34184,34193,34186,34216,34157,34196,34203,34282,34183,34204,34167,34174,34192,34249,34234,34255,34233,34256,34261,34269,34277,34268,34297,34314,34323,34315,34302,34298,34310,34338,34330,34352,34367,34381,20053,34388,34399,34407,34417,34451,34467,34473,34474,34443,34444,34486,34479,34500,34502,34480,34505,34851,34475,34516,34526,34537,34540,34527,34523,34543,34578,34566,34568,34560,34563,34555,34577,34569,34573,34553,34570,34612,34623,34615,34619,34597,34601,34586,34656,34655,34680,34636,34638,34676,34647,34664,34670,34649,34643,34659,34666,34821,34722,34719,34690,34735,34763,34749,34752,34768,38614,34731,34756,34739,34759,34758,34747,34799,34802,34784,34831,34829,34814,34806,34807,34830,34770,34833,34838,34837,34850,34849,34865,34870,34873,34855,34875,34884,34882,34898,34905,34910,34914,34923,34945,34942,34974,34933,34941,34997,34930,34946,34967,34962,34990,34969,34978,34957,34980,34992,35007,34993,35011,35012,35028,35032,35033,35037,35065,35074,35068,35060,35048,35058,35076,35084,35082,35091,35139,35102,35109,35114,35115,35137,35140,35131,35126,35128,35148,35101,35168,35166,35174,35172,35181,35178,35183,35188,35191,35198,35203,35208,35210,35219,35224,35233,35241,35238,35244,35247,35250,35258,35261,35263,35264,35290,35292,35293,35303,35316,35320,35331,35350,35344,35340,35355,35357,35365,35382,35393,35419,35410,35398,35400,35452,35437,35436,35426,35461,35458,35460,35496,35489,35473,35493,35494,35482,35491,35524,35533,35522,35546,35563,35571,35559,35556,35569,35604,35552,35554,35575,35550,35547,35596,35591,35610,35553,35606,35600,35607,35616,35635,38827,35622,35627,35646,35624,35649,35660,35663,35662,35657,35670,35675,35674,35691,35679,35692,35695,35700,35709,35712,35724,35726,35730,35731,35734,35737,35738,35898,35905,35903,35912,35916,35918,35920,35925,35938,35948,35960,35962,35970,35977,35973,35978,35981,35982,35988,35964,35992,25117,36013,36010,36029,36018,36019,36014,36022,36040,36033,36068,36067,36058,36093,36090,36091,36100,36101,36106,36103,36111,36109,36112,40782,36115,36045,36116,36118,36199,36205,36209,36211,36225,36249,36290,36286,36282,36303,36314,36310,36300,36315,36299,36330,36331,36319,36323,36348,36360,36361,36351,36381,36382,36368,36383,36418,36405,36400,36404,36426,36423,36425,36428,36432,36424,36441,36452,36448,36394,36451,36437,36470,36466,36476,36481,36487,36485,36484,36491,36490,36499,36497,36500,36505,36522,36513,36524,36528,36550,36529,36542,36549,36552,36555,36571,36579,36604,36603,36587,36606,36618,36613,36629,36626,36633,36627,36636,36639,36635,36620,36646,36659,36667,36665,36677,36674,36670,36684,36681,36678,36686,36695,36700,36706,36707,36708,36764,36767,36771,36781,36783,36791,36826,36837,36834,36842,36847,36999,36852,36869,36857,36858,36881,36885,36897,36877,36894,36886,36875,36903,36918,36917,36921,36856,36943,36944,36945,36946,36878,36937,36926,36950,36952,36958,36968,36975,36982,38568,36978,36994,36989,36993,36992,37002,37001,37007,37032,37039,37041,37045,37090,37092,25160,37083,37122,37138,37145,37170,37168,37194,37206,37208,37219,37221,37225,37235,37234,37259,37257,37250,37282,37291,37295,37290,37301,37300,37306,37312,37313,37321,37323,37328,37334,37343,37345,37339,37372,37365,37366,37406,37375,37396,37420,37397,37393,37470,37463,37445,37449,37476,37448,37525,37439,37451,37456,37532,37526,37523,37531,37466,37583,37561,37559,37609,37647,37626,37700,37678,37657,37666,37658,37667,37690,37685,37691,37724,37728,37756,37742,37718,37808,37804,37805,37780,37817,37846,37847,37864,37861,37848,37827,37853,37840,37832,37860,37914,37908,37907,37891,37895,37904,37942,37931,37941,37921,37946,37953,37970,37956,37979,37984,37986,37982,37994,37417,38e3,38005,38007,38013,37978,38012,38014,38017,38015,38274,38279,38282,38292,38294,38296,38297,38304,38312,38311,38317,38332,38331,38329,38334,38346,28662,38339,38349,38348,38357,38356,38358,38364,38369,38373,38370,38433,38440,38446,38447,38466,38476,38479,38475,38519,38492,38494,38493,38495,38502,38514,38508,38541,38552,38549,38551,38570,38567,38577,38578,38576,38580,38582,38584,38585,38606,38603,38601,38605,35149,38620,38669,38613,38649,38660,38662,38664,38675,38670,38673,38671,38678,38681,38692,38698,38704,38713,38717,38718,38724,38726,38728,38722,38729,38748,38752,38756,38758,38760,21202,38763,38769,38777,38789,38780,38785,38778,38790,38795,38799,38800,38812,38824,38822,38819,38835,38836,38851,38854,38856,38859,38876,38893,40783,38898,31455,38902,38901,38927,38924,38968,38948,38945,38967,38973,38982,38991,38987,39019,39023,39024,39025,39028,39027,39082,39087,39089,39094,39108,39107,39110,39145,39147,39171,39177,39186,39188,39192,39201,39197,39198,39204,39200,39212,39214,39229,39230,39234,39241,39237,39248,39243,39249,39250,39244,39253,39319,39320,39333,39341,39342,39356,39391,39387,39389,39384,39377,39405,39406,39409,39410,39419,39416,39425,39439,39429,39394,39449,39467,39479,39493,39490,39488,39491,39486,39509,39501,39515,39511,39519,39522,39525,39524,39529,39531,39530,39597,39600,39612,39616,39631,39633,39635,39636,39646,39647,39650,39651,39654,39663,39659,39662,39668,39665,39671,39675,39686,39704,39706,39711,39714,39715,39717,39719,39720,39721,39722,39726,39727,39730,39748,39747,39759,39757,39758,39761,39768,39796,39827,39811,39825,39830,39831,39839,39840,39848,39860,39872,39882,39865,39878,39887,39889,39890,39907,39906,39908,39892,39905,39994,39922,39921,39920,39957,39956,39945,39955,39948,39942,39944,39954,39946,39940,39982,39963,39973,39972,39969,39984,40007,39986,40006,39998,40026,40032,40039,40054,40056,40167,40172,40176,40201,40200,40171,40195,40198,40234,40230,40367,40227,40223,40260,40213,40210,40257,40255,40254,40262,40264,40285,40286,40292,40273,40272,40281,40306,40329,40327,40363,40303,40314,40346,40356,40361,40370,40388,40385,40379,40376,40378,40390,40399,40386,40409,40403,40440,40422,40429,40431,40445,40474,40475,40478,40565,40569,40573,40577,40584,40587,40588,40594,40597,40593,40605,40613,40617,40632,40618,40621,38753,40652,40654,40655,40656,40660,40668,40670,40669,40672,40677,40680,40687,40692,40694,40695,40697,40699,40700,40701,40711,40712,30391,40725,40737,40748,40766,40778,40786,40788,40803,40799,40800,40801,40806,40807,40812,40810,40823,40818,40822,40853,40860,40864,22575,27079,36953,29796,20956,29081,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,32394,35100,37704,37512,34012,20425,28859,26161,26824,37625,26363,24389,20008,20193,20220,20224,20227,20281,20310,20370,20362,20378,20372,20429,20544,20514,20479,20510,20550,20592,20546,20628,20724,20696,20810,20836,20893,20926,20972,21013,21148,21158,21184,21211,21248,21255,21284,21362,21395,21426,21469,64014,21660,21642,21673,21759,21894,22361,22373,22444,22472,22471,64015,64016,22686,22706,22795,22867,22875,22877,22883,22948,22970,23382,23488,29999,23512,23532,23582,23718,23738,23797,23847,23891,64017,23874,23917,23992,23993,24016,24353,24372,24423,24503,24542,24669,24709,24714,24798,24789,24864,24818,24849,24887,24880,24984,25107,25254,25589,25696,25757,25806,25934,26112,26133,26171,26121,26158,26142,26148,26213,26199,26201,64018,26227,26265,26272,26290,26303,26362,26382,63785,26470,26555,26706,26560,26625,26692,26831,64019,26984,64020,27032,27106,27184,27243,27206,27251,27262,27362,27364,27606,27711,27740,27782,27759,27866,27908,28039,28015,28054,28076,28111,28152,28146,28156,28217,28252,28199,28220,28351,28552,28597,28661,28677,28679,28712,28805,28843,28943,28932,29020,28998,28999,64021,29121,29182,29361,29374,29476,64022,29559,29629,29641,29654,29667,29650,29703,29685,29734,29738,29737,29742,29794,29833,29855,29953,30063,30338,30364,30366,30363,30374,64023,30534,21167,30753,30798,30820,30842,31024,64024,64025,64026,31124,64027,31131,31441,31463,64028,31467,31646,64029,32072,32092,32183,32160,32214,32338,32583,32673,64030,33537,33634,33663,33735,33782,33864,33972,34131,34137,34155,64031,34224,64032,64033,34823,35061,35346,35383,35449,35495,35518,35551,64034,35574,35667,35711,36080,36084,36114,36214,64035,36559,64036,64037,36967,37086,64038,37141,37159,37338,37335,37342,37357,37358,37348,37349,37382,37392,37386,37434,37440,37436,37454,37465,37457,37433,37479,37543,37495,37496,37607,37591,37593,37584,64039,37589,37600,37587,37669,37665,37627,64040,37662,37631,37661,37634,37744,37719,37796,37830,37854,37880,37937,37957,37960,38290,63964,64041,38557,38575,38707,38715,38723,38733,38735,38737,38741,38999,39013,64042,64043,39207,64044,39326,39502,39641,39644,39797,39794,39823,39857,39867,39936,40304,40299,64045,40473,40657,null,null,8560,8561,8562,8563,8564,8565,8566,8567,8568,8569,65506,65508,65287,65282,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,8560,8561,8562,8563,8564,8565,8566,8567,8568,8569,8544,8545,8546,8547,8548,8549,8550,8551,8552,8553,65506,65508,65287,65282,12849,8470,8481,8757,32394,35100,37704,37512,34012,20425,28859,26161,26824,37625,26363,24389,20008,20193,20220,20224,20227,20281,20310,20370,20362,20378,20372,20429,20544,20514,20479,20510,20550,20592,20546,20628,20724,20696,20810,20836,20893,20926,20972,21013,21148,21158,21184,21211,21248,21255,21284,21362,21395,21426,21469,64014,21660,21642,21673,21759,21894,22361,22373,22444,22472,22471,64015,64016,22686,22706,22795,22867,22875,22877,22883,22948,22970,23382,23488,29999,23512,23532,23582,23718,23738,23797,23847,23891,64017,23874,23917,23992,23993,24016,24353,24372,24423,24503,24542,24669,24709,24714,24798,24789,24864,24818,24849,24887,24880,24984,25107,25254,25589,25696,25757,25806,25934,26112,26133,26171,26121,26158,26142,26148,26213,26199,26201,64018,26227,26265,26272,26290,26303,26362,26382,63785,26470,26555,26706,26560,26625,26692,26831,64019,26984,64020,27032,27106,27184,27243,27206,27251,27262,27362,27364,27606,27711,27740,27782,27759,27866,27908,28039,28015,28054,28076,28111,28152,28146,28156,28217,28252,28199,28220,28351,28552,28597,28661,28677,28679,28712,28805,28843,28943,28932,29020,28998,28999,64021,29121,29182,29361,29374,29476,64022,29559,29629,29641,29654,29667,29650,29703,29685,29734,29738,29737,29742,29794,29833,29855,29953,30063,30338,30364,30366,30363,30374,64023,30534,21167,30753,30798,30820,30842,31024,64024,64025,64026,31124,64027,31131,31441,31463,64028,31467,31646,64029,32072,32092,32183,32160,32214,32338,32583,32673,64030,33537,33634,33663,33735,33782,33864,33972,34131,34137,34155,64031,34224,64032,64033,34823,35061,35346,35383,35449,35495,35518,35551,64034,35574,35667,35711,36080,36084,36114,36214,64035,36559,64036,64037,36967,37086,64038,37141,37159,37338,37335,37342,37357,37358,37348,37349,37382,37392,37386,37434,37440,37436,37454,37465,37457,37433,37479,37543,37495,37496,37607,37591,37593,37584,64039,37589,37600,37587,37669,37665,37627,64040,37662,37631,37661,37634,37744,37719,37796,37830,37854,37880,37937,37957,37960,38290,63964,64041,38557,38575,38707,38715,38723,38733,38735,38737,38741,38999,39013,64042,64043,39207,64044,39326,39502,39641,39644,39797,39794,39823,39857,39867,39936,40304,40299,64045,40473,40657,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],jis0212:[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,728,711,184,729,733,175,731,730,65374,900,901,null,null,null,null,null,null,null,null,161,166,191,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,186,170,169,174,8482,164,8470,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,902,904,905,906,938,null,908,null,910,939,null,911,null,null,null,null,940,941,942,943,970,912,972,962,973,971,944,974,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1038,1039,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,1118,1119,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,198,272,null,294,null,306,null,321,319,null,330,216,338,null,358,222,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,230,273,240,295,305,307,312,322,320,329,331,248,339,223,359,254,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,193,192,196,194,258,461,256,260,197,195,262,264,268,199,266,270,201,200,203,202,282,278,274,280,null,284,286,290,288,292,205,204,207,206,463,304,298,302,296,308,310,313,317,315,323,327,325,209,211,210,214,212,465,336,332,213,340,344,342,346,348,352,350,356,354,218,217,220,219,364,467,368,362,370,366,360,471,475,473,469,372,221,376,374,377,381,379,null,null,null,null,null,null,null,225,224,228,226,259,462,257,261,229,227,263,265,269,231,267,271,233,232,235,234,283,279,275,281,501,285,287,null,289,293,237,236,239,238,464,null,299,303,297,309,311,314,318,316,324,328,326,241,243,242,246,244,466,337,333,245,341,345,343,347,349,353,351,357,355,250,249,252,251,365,468,369,363,371,367,361,472,476,474,470,373,253,255,375,378,382,380,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,19970,19972,19973,19980,19986,19999,20003,20004,20008,20011,20014,20015,20016,20021,20032,20033,20036,20039,20049,20058,20060,20067,20072,20073,20084,20085,20089,20095,20109,20118,20119,20125,20143,20153,20163,20176,20186,20187,20192,20193,20194,20200,20207,20209,20211,20213,20221,20222,20223,20224,20226,20227,20232,20235,20236,20242,20245,20246,20247,20249,20270,20273,20320,20275,20277,20279,20281,20283,20286,20288,20290,20296,20297,20299,20300,20306,20308,20310,20312,20319,20323,20330,20332,20334,20337,20343,20344,20345,20346,20349,20350,20353,20354,20356,20357,20361,20362,20364,20366,20368,20370,20371,20372,20375,20377,20378,20382,20383,20402,20407,20409,20411,20412,20413,20414,20416,20417,20421,20422,20424,20425,20427,20428,20429,20431,20434,20444,20448,20450,20464,20466,20476,20477,20479,20480,20481,20484,20487,20490,20492,20494,20496,20499,20503,20504,20507,20508,20509,20510,20514,20519,20526,20528,20530,20531,20533,20544,20545,20546,20549,20550,20554,20556,20558,20561,20562,20563,20567,20569,20575,20576,20578,20579,20582,20583,20586,20589,20592,20593,20539,20609,20611,20612,20614,20618,20622,20623,20624,20626,20627,20628,20630,20635,20636,20638,20639,20640,20641,20642,20650,20655,20656,20665,20666,20669,20672,20675,20676,20679,20684,20686,20688,20691,20692,20696,20700,20701,20703,20706,20708,20710,20712,20713,20719,20721,20726,20730,20734,20739,20742,20743,20744,20747,20748,20749,20750,20722,20752,20759,20761,20763,20764,20765,20766,20771,20775,20776,20780,20781,20783,20785,20787,20788,20789,20792,20793,20802,20810,20815,20819,20821,20823,20824,20831,20836,20838,20862,20867,20868,20875,20878,20888,20893,20897,20899,20909,20920,20922,20924,20926,20927,20930,20936,20943,20945,20946,20947,20949,20952,20958,20962,20965,20974,20978,20979,20980,20983,20993,20994,20997,21010,21011,21013,21014,21016,21026,21032,21041,21042,21045,21052,21061,21065,21077,21079,21080,21082,21084,21087,21088,21089,21094,21102,21111,21112,21113,21120,21122,21125,21130,21132,21139,21141,21142,21143,21144,21146,21148,21156,21157,21158,21159,21167,21168,21174,21175,21176,21178,21179,21181,21184,21188,21190,21192,21196,21199,21201,21204,21206,21211,21212,21217,21221,21224,21225,21226,21228,21232,21233,21236,21238,21239,21248,21251,21258,21259,21260,21265,21267,21272,21275,21276,21278,21279,21285,21287,21288,21289,21291,21292,21293,21296,21298,21301,21308,21309,21310,21314,21324,21323,21337,21339,21345,21347,21349,21356,21357,21362,21369,21374,21379,21383,21384,21390,21395,21396,21401,21405,21409,21412,21418,21419,21423,21426,21428,21429,21431,21432,21434,21437,21440,21445,21455,21458,21459,21461,21466,21469,21470,21472,21478,21479,21493,21506,21523,21530,21537,21543,21544,21546,21551,21553,21556,21557,21571,21572,21575,21581,21583,21598,21602,21604,21606,21607,21609,21611,21613,21614,21620,21631,21633,21635,21637,21640,21641,21645,21649,21653,21654,21660,21663,21665,21670,21671,21673,21674,21677,21678,21681,21687,21689,21690,21691,21695,21702,21706,21709,21710,21728,21738,21740,21743,21750,21756,21758,21759,21760,21761,21765,21768,21769,21772,21773,21774,21781,21802,21803,21810,21813,21814,21819,21820,21821,21825,21831,21833,21834,21837,21840,21841,21848,21850,21851,21854,21856,21857,21860,21862,21887,21889,21890,21894,21896,21902,21903,21905,21906,21907,21908,21911,21923,21924,21933,21938,21951,21953,21955,21958,21961,21963,21964,21966,21969,21970,21971,21975,21976,21979,21982,21986,21993,22006,22015,22021,22024,22026,22029,22030,22031,22032,22033,22034,22041,22060,22064,22067,22069,22071,22073,22075,22076,22077,22079,22080,22081,22083,22084,22086,22089,22091,22093,22095,22100,22110,22112,22113,22114,22115,22118,22121,22125,22127,22129,22130,22133,22148,22149,22152,22155,22156,22165,22169,22170,22173,22174,22175,22182,22183,22184,22185,22187,22188,22189,22193,22195,22199,22206,22213,22217,22218,22219,22223,22224,22220,22221,22233,22236,22237,22239,22241,22244,22245,22246,22247,22248,22257,22251,22253,22262,22263,22273,22274,22279,22282,22284,22289,22293,22298,22299,22301,22304,22306,22307,22308,22309,22313,22314,22316,22318,22319,22323,22324,22333,22334,22335,22341,22342,22348,22349,22354,22370,22373,22375,22376,22379,22381,22382,22383,22384,22385,22387,22388,22389,22391,22393,22394,22395,22396,22398,22401,22403,22412,22420,22423,22425,22426,22428,22429,22430,22431,22433,22421,22439,22440,22441,22444,22456,22461,22471,22472,22476,22479,22485,22493,22494,22500,22502,22503,22505,22509,22512,22517,22518,22520,22525,22526,22527,22531,22532,22536,22537,22497,22540,22541,22555,22558,22559,22560,22566,22567,22573,22578,22585,22591,22601,22604,22605,22607,22608,22613,22623,22625,22628,22631,22632,22648,22652,22655,22656,22657,22663,22664,22665,22666,22668,22669,22671,22672,22676,22678,22685,22688,22689,22690,22694,22697,22705,22706,22724,22716,22722,22728,22733,22734,22736,22738,22740,22742,22746,22749,22753,22754,22761,22771,22789,22790,22795,22796,22802,22803,22804,34369,22813,22817,22819,22820,22824,22831,22832,22835,22837,22838,22847,22851,22854,22866,22867,22873,22875,22877,22878,22879,22881,22883,22891,22893,22895,22898,22901,22902,22905,22907,22908,22923,22924,22926,22930,22933,22935,22943,22948,22951,22957,22958,22959,22960,22963,22967,22970,22972,22977,22979,22980,22984,22986,22989,22994,23005,23006,23007,23011,23012,23015,23022,23023,23025,23026,23028,23031,23040,23044,23052,23053,23054,23058,23059,23070,23075,23076,23079,23080,23082,23085,23088,23108,23109,23111,23112,23116,23120,23125,23134,23139,23141,23143,23149,23159,23162,23163,23166,23179,23184,23187,23190,23193,23196,23198,23199,23200,23202,23207,23212,23217,23218,23219,23221,23224,23226,23227,23231,23236,23238,23240,23247,23258,23260,23264,23269,23274,23278,23285,23286,23293,23296,23297,23304,23319,23348,23321,23323,23325,23329,23333,23341,23352,23361,23371,23372,23378,23382,23390,23400,23406,23407,23420,23421,23422,23423,23425,23428,23430,23434,23438,23440,23441,23443,23444,23446,23464,23465,23468,23469,23471,23473,23474,23479,23482,23484,23488,23489,23501,23503,23510,23511,23512,23513,23514,23520,23535,23537,23540,23549,23564,23575,23582,23583,23587,23590,23593,23595,23596,23598,23600,23602,23605,23606,23641,23642,23644,23650,23651,23655,23656,23657,23661,23664,23668,23669,23674,23675,23676,23677,23687,23688,23690,23695,23698,23709,23711,23712,23714,23715,23718,23722,23730,23732,23733,23738,23753,23755,23762,23773,23767,23790,23793,23794,23796,23809,23814,23821,23826,23851,23843,23844,23846,23847,23857,23860,23865,23869,23871,23874,23875,23878,23880,23893,23889,23897,23882,23903,23904,23905,23906,23908,23914,23917,23920,23929,23930,23934,23935,23937,23939,23944,23946,23954,23955,23956,23957,23961,23963,23967,23968,23975,23979,23984,23988,23992,23993,24003,24007,24011,24016,24014,24024,24025,24032,24036,24041,24056,24057,24064,24071,24077,24082,24084,24085,24088,24095,24096,24110,24104,24114,24117,24126,24139,24144,24137,24145,24150,24152,24155,24156,24158,24168,24170,24171,24172,24173,24174,24176,24192,24203,24206,24226,24228,24229,24232,24234,24236,24241,24243,24253,24254,24255,24262,24268,24267,24270,24273,24274,24276,24277,24284,24286,24293,24299,24322,24326,24327,24328,24334,24345,24348,24349,24353,24354,24355,24356,24360,24363,24364,24366,24368,24372,24374,24379,24381,24383,24384,24388,24389,24391,24397,24400,24404,24408,24411,24416,24419,24420,24423,24431,24434,24436,24437,24440,24442,24445,24446,24457,24461,24463,24470,24476,24477,24482,24487,24491,24484,24492,24495,24496,24497,24504,24516,24519,24520,24521,24523,24528,24529,24530,24531,24532,24542,24545,24546,24552,24553,24554,24556,24557,24558,24559,24562,24563,24566,24570,24572,24583,24586,24589,24595,24596,24599,24600,24602,24607,24612,24621,24627,24629,24640,24647,24648,24649,24652,24657,24660,24662,24663,24669,24673,24679,24689,24702,24703,24706,24710,24712,24714,24718,24721,24723,24725,24728,24733,24734,24738,24740,24741,24744,24752,24753,24759,24763,24766,24770,24772,24776,24777,24778,24779,24782,24783,24788,24789,24793,24795,24797,24798,24802,24805,24818,24821,24824,24828,24829,24834,24839,24842,24844,24848,24849,24850,24851,24852,24854,24855,24857,24860,24862,24866,24874,24875,24880,24881,24885,24886,24887,24889,24897,24901,24902,24905,24926,24928,24940,24946,24952,24955,24956,24959,24960,24961,24963,24964,24971,24973,24978,24979,24983,24984,24988,24989,24991,24992,24997,25e3,25002,25005,25016,25017,25020,25024,25025,25026,25038,25039,25045,25052,25053,25054,25055,25057,25058,25063,25065,25061,25068,25069,25071,25089,25091,25092,25095,25107,25109,25116,25120,25122,25123,25127,25129,25131,25145,25149,25154,25155,25156,25158,25164,25168,25169,25170,25172,25174,25178,25180,25188,25197,25199,25203,25210,25213,25229,25230,25231,25232,25254,25256,25267,25270,25271,25274,25278,25279,25284,25294,25301,25302,25306,25322,25330,25332,25340,25341,25347,25348,25354,25355,25357,25360,25363,25366,25368,25385,25386,25389,25397,25398,25401,25404,25409,25410,25411,25412,25414,25418,25419,25422,25426,25427,25428,25432,25435,25445,25446,25452,25453,25457,25460,25461,25464,25468,25469,25471,25474,25476,25479,25482,25488,25492,25493,25497,25498,25502,25508,25510,25517,25518,25519,25533,25537,25541,25544,25550,25553,25555,25556,25557,25564,25568,25573,25578,25580,25586,25587,25589,25592,25593,25609,25610,25616,25618,25620,25624,25630,25632,25634,25636,25637,25641,25642,25647,25648,25653,25661,25663,25675,25679,25681,25682,25683,25684,25690,25691,25692,25693,25695,25696,25697,25699,25709,25715,25716,25723,25725,25733,25735,25743,25744,25745,25752,25753,25755,25757,25759,25761,25763,25766,25768,25772,25779,25789,25790,25791,25796,25801,25802,25803,25804,25806,25808,25809,25813,25815,25828,25829,25833,25834,25837,25840,25845,25847,25851,25855,25857,25860,25864,25865,25866,25871,25875,25876,25878,25881,25883,25886,25887,25890,25894,25897,25902,25905,25914,25916,25917,25923,25927,25929,25936,25938,25940,25951,25952,25959,25963,25978,25981,25985,25989,25994,26002,26005,26008,26013,26016,26019,26022,26030,26034,26035,26036,26047,26050,26056,26057,26062,26064,26068,26070,26072,26079,26096,26098,26100,26101,26105,26110,26111,26112,26116,26120,26121,26125,26129,26130,26133,26134,26141,26142,26145,26146,26147,26148,26150,26153,26154,26155,26156,26158,26160,26161,26163,26169,26167,26176,26181,26182,26186,26188,26193,26190,26199,26200,26201,26203,26204,26208,26209,26363,26218,26219,26220,26238,26227,26229,26239,26231,26232,26233,26235,26240,26236,26251,26252,26253,26256,26258,26265,26266,26267,26268,26271,26272,26276,26285,26289,26290,26293,26299,26303,26304,26306,26307,26312,26316,26318,26319,26324,26331,26335,26344,26347,26348,26350,26362,26373,26375,26382,26387,26393,26396,26400,26402,26419,26430,26437,26439,26440,26444,26452,26453,26461,26470,26476,26478,26484,26486,26491,26497,26500,26510,26511,26513,26515,26518,26520,26521,26523,26544,26545,26546,26549,26555,26556,26557,26617,26560,26562,26563,26565,26568,26569,26578,26583,26585,26588,26593,26598,26608,26610,26614,26615,26706,26644,26649,26653,26655,26664,26663,26668,26669,26671,26672,26673,26675,26683,26687,26692,26693,26698,26700,26709,26711,26712,26715,26731,26734,26735,26736,26737,26738,26741,26745,26746,26747,26748,26754,26756,26758,26760,26774,26776,26778,26780,26785,26787,26789,26793,26794,26798,26802,26811,26821,26824,26828,26831,26832,26833,26835,26838,26841,26844,26845,26853,26856,26858,26859,26860,26861,26864,26865,26869,26870,26875,26876,26877,26886,26889,26890,26896,26897,26899,26902,26903,26929,26931,26933,26936,26939,26946,26949,26953,26958,26967,26971,26979,26980,26981,26982,26984,26985,26988,26992,26993,26994,27002,27003,27007,27008,27021,27026,27030,27032,27041,27045,27046,27048,27051,27053,27055,27063,27064,27066,27068,27077,27080,27089,27094,27095,27106,27109,27118,27119,27121,27123,27125,27134,27136,27137,27139,27151,27153,27157,27162,27165,27168,27172,27176,27184,27186,27188,27191,27195,27198,27199,27205,27206,27209,27210,27214,27216,27217,27218,27221,27222,27227,27236,27239,27242,27249,27251,27262,27265,27267,27270,27271,27273,27275,27281,27291,27293,27294,27295,27301,27307,27311,27312,27313,27316,27325,27326,27327,27334,27337,27336,27340,27344,27348,27349,27350,27356,27357,27364,27367,27372,27376,27377,27378,27388,27389,27394,27395,27398,27399,27401,27407,27408,27409,27415,27419,27422,27428,27432,27435,27436,27439,27445,27446,27451,27455,27462,27466,27469,27474,27478,27480,27485,27488,27495,27499,27502,27504,27509,27517,27518,27522,27525,27543,27547,27551,27552,27554,27555,27560,27561,27564,27565,27566,27568,27576,27577,27581,27582,27587,27588,27593,27596,27606,27610,27617,27619,27622,27623,27630,27633,27639,27641,27647,27650,27652,27653,27657,27661,27662,27664,27666,27673,27679,27686,27687,27688,27692,27694,27699,27701,27702,27706,27707,27711,27722,27723,27725,27727,27730,27732,27737,27739,27740,27755,27757,27759,27764,27766,27768,27769,27771,27781,27782,27783,27785,27796,27797,27799,27800,27804,27807,27824,27826,27828,27842,27846,27853,27855,27856,27857,27858,27860,27862,27866,27868,27872,27879,27881,27883,27884,27886,27890,27892,27908,27911,27914,27918,27919,27921,27923,27930,27942,27943,27944,27751,27950,27951,27953,27961,27964,27967,27991,27998,27999,28001,28005,28007,28015,28016,28028,28034,28039,28049,28050,28052,28054,28055,28056,28074,28076,28084,28087,28089,28093,28095,28100,28104,28106,28110,28111,28118,28123,28125,28127,28128,28130,28133,28137,28143,28144,28148,28150,28156,28160,28164,28190,28194,28199,28210,28214,28217,28219,28220,28228,28229,28232,28233,28235,28239,28241,28242,28243,28244,28247,28252,28253,28254,28258,28259,28264,28275,28283,28285,28301,28307,28313,28320,28327,28333,28334,28337,28339,28347,28351,28352,28353,28355,28359,28360,28362,28365,28366,28367,28395,28397,28398,28409,28411,28413,28420,28424,28426,28428,28429,28438,28440,28442,28443,28454,28457,28458,28463,28464,28467,28470,28475,28476,28461,28495,28497,28498,28499,28503,28505,28506,28509,28510,28513,28514,28520,28524,28541,28542,28547,28551,28552,28555,28556,28557,28560,28562,28563,28564,28566,28570,28575,28576,28581,28582,28583,28584,28590,28591,28592,28597,28598,28604,28613,28615,28616,28618,28634,28638,28648,28649,28656,28661,28665,28668,28669,28672,28677,28678,28679,28685,28695,28704,28707,28719,28724,28727,28729,28732,28739,28740,28744,28745,28746,28747,28756,28757,28765,28766,28750,28772,28773,28780,28782,28789,28790,28798,28801,28805,28806,28820,28821,28822,28823,28824,28827,28836,28843,28848,28849,28852,28855,28874,28881,28883,28884,28885,28886,28888,28892,28900,28922,28931,28932,28933,28934,28935,28939,28940,28943,28958,28960,28971,28973,28975,28976,28977,28984,28993,28997,28998,28999,29002,29003,29008,29010,29015,29018,29020,29022,29024,29032,29049,29056,29061,29063,29068,29074,29082,29083,29088,29090,29103,29104,29106,29107,29114,29119,29120,29121,29124,29131,29132,29139,29142,29145,29146,29148,29176,29182,29184,29191,29192,29193,29203,29207,29210,29213,29215,29220,29227,29231,29236,29240,29241,29249,29250,29251,29253,29262,29263,29264,29267,29269,29270,29274,29276,29278,29280,29283,29288,29291,29294,29295,29297,29303,29304,29307,29308,29311,29316,29321,29325,29326,29331,29339,29352,29357,29358,29361,29364,29374,29377,29383,29385,29388,29397,29398,29400,29407,29413,29427,29428,29434,29435,29438,29442,29444,29445,29447,29451,29453,29458,29459,29464,29465,29470,29474,29476,29479,29480,29484,29489,29490,29493,29498,29499,29501,29507,29517,29520,29522,29526,29528,29533,29534,29535,29536,29542,29543,29545,29547,29548,29550,29551,29553,29559,29561,29564,29568,29569,29571,29573,29574,29582,29584,29587,29589,29591,29592,29596,29598,29599,29600,29602,29605,29606,29610,29611,29613,29621,29623,29625,29628,29629,29631,29637,29638,29641,29643,29644,29647,29650,29651,29654,29657,29661,29665,29667,29670,29671,29673,29684,29685,29687,29689,29690,29691,29693,29695,29696,29697,29700,29703,29706,29713,29722,29723,29732,29734,29736,29737,29738,29739,29740,29741,29742,29743,29744,29745,29753,29760,29763,29764,29766,29767,29771,29773,29777,29778,29783,29789,29794,29798,29799,29800,29803,29805,29806,29809,29810,29824,29825,29829,29830,29831,29833,29839,29840,29841,29842,29848,29849,29850,29852,29855,29856,29857,29859,29862,29864,29865,29866,29867,29870,29871,29873,29874,29877,29881,29883,29887,29896,29897,29900,29904,29907,29912,29914,29915,29918,29919,29924,29928,29930,29931,29935,29940,29946,29947,29948,29951,29958,29970,29974,29975,29984,29985,29988,29991,29993,29994,29999,30006,30009,30013,30014,30015,30016,30019,30023,30024,30030,30032,30034,30039,30046,30047,30049,30063,30065,30073,30074,30075,30076,30077,30078,30081,30085,30096,30098,30099,30101,30105,30108,30114,30116,30132,30138,30143,30144,30145,30148,30150,30156,30158,30159,30167,30172,30175,30176,30177,30180,30183,30188,30190,30191,30193,30201,30208,30210,30211,30212,30215,30216,30218,30220,30223,30226,30227,30229,30230,30233,30235,30236,30237,30238,30243,30245,30246,30249,30253,30258,30259,30261,30264,30265,30266,30268,30282,30272,30273,30275,30276,30277,30281,30283,30293,30297,30303,30308,30309,30317,30318,30319,30321,30324,30337,30341,30348,30349,30357,30363,30364,30365,30367,30368,30370,30371,30372,30373,30374,30375,30376,30378,30381,30397,30401,30405,30409,30411,30412,30414,30420,30425,30432,30438,30440,30444,30448,30449,30454,30457,30460,30464,30470,30474,30478,30482,30484,30485,30487,30489,30490,30492,30498,30504,30509,30510,30511,30516,30517,30518,30521,30525,30526,30530,30533,30534,30538,30541,30542,30543,30546,30550,30551,30556,30558,30559,30560,30562,30564,30567,30570,30572,30576,30578,30579,30580,30586,30589,30592,30596,30604,30605,30612,30613,30614,30618,30623,30626,30631,30634,30638,30639,30641,30645,30654,30659,30665,30673,30674,30677,30681,30686,30687,30688,30692,30694,30698,30700,30704,30705,30708,30712,30715,30725,30726,30729,30733,30734,30737,30749,30753,30754,30755,30765,30766,30768,30773,30775,30787,30788,30791,30792,30796,30798,30802,30812,30814,30816,30817,30819,30820,30824,30826,30830,30842,30846,30858,30863,30868,30872,30881,30877,30878,30879,30884,30888,30892,30893,30896,30897,30898,30899,30907,30909,30911,30919,30920,30921,30924,30926,30930,30931,30933,30934,30948,30939,30943,30944,30945,30950,30954,30962,30963,30976,30966,30967,30970,30971,30975,30982,30988,30992,31002,31004,31006,31007,31008,31013,31015,31017,31021,31025,31028,31029,31035,31037,31039,31044,31045,31046,31050,31051,31055,31057,31060,31064,31067,31068,31079,31081,31083,31090,31097,31099,31100,31102,31115,31116,31121,31123,31124,31125,31126,31128,31131,31132,31137,31144,31145,31147,31151,31153,31156,31160,31163,31170,31172,31175,31176,31178,31183,31188,31190,31194,31197,31198,31200,31202,31205,31210,31211,31213,31217,31224,31228,31234,31235,31239,31241,31242,31244,31249,31253,31259,31262,31265,31271,31275,31277,31279,31280,31284,31285,31288,31289,31290,31300,31301,31303,31304,31308,31317,31318,31321,31324,31325,31327,31328,31333,31335,31338,31341,31349,31352,31358,31360,31362,31365,31366,31370,31371,31376,31377,31380,31390,31392,31395,31404,31411,31413,31417,31419,31420,31430,31433,31436,31438,31441,31451,31464,31465,31467,31468,31473,31476,31483,31485,31486,31495,31508,31519,31523,31527,31529,31530,31531,31533,31534,31535,31536,31537,31540,31549,31551,31552,31553,31559,31566,31573,31584,31588,31590,31593,31594,31597,31599,31602,31603,31607,31620,31625,31630,31632,31633,31638,31643,31646,31648,31653,31660,31663,31664,31666,31669,31670,31674,31675,31676,31677,31682,31685,31688,31690,31700,31702,31703,31705,31706,31707,31720,31722,31730,31732,31733,31736,31737,31738,31740,31742,31745,31746,31747,31748,31750,31753,31755,31756,31758,31759,31769,31771,31776,31781,31782,31784,31788,31793,31795,31796,31798,31801,31802,31814,31818,31829,31825,31826,31827,31833,31834,31835,31836,31837,31838,31841,31843,31847,31849,31853,31854,31856,31858,31865,31868,31869,31878,31879,31887,31892,31902,31904,31910,31920,31926,31927,31930,31931,31932,31935,31940,31943,31944,31945,31949,31951,31955,31956,31957,31959,31961,31962,31965,31974,31977,31979,31989,32003,32007,32008,32009,32015,32017,32018,32019,32022,32029,32030,32035,32038,32042,32045,32049,32060,32061,32062,32064,32065,32071,32072,32077,32081,32083,32087,32089,32090,32092,32093,32101,32103,32106,32112,32120,32122,32123,32127,32129,32130,32131,32133,32134,32136,32139,32140,32141,32145,32150,32151,32157,32158,32166,32167,32170,32179,32182,32183,32185,32194,32195,32196,32197,32198,32204,32205,32206,32215,32217,32256,32226,32229,32230,32234,32235,32237,32241,32245,32246,32249,32250,32264,32272,32273,32277,32279,32284,32285,32288,32295,32296,32300,32301,32303,32307,32310,32319,32324,32325,32327,32334,32336,32338,32344,32351,32353,32354,32357,32363,32366,32367,32371,32376,32382,32385,32390,32391,32394,32397,32401,32405,32408,32410,32413,32414,32572,32571,32573,32574,32575,32579,32580,32583,32591,32594,32595,32603,32604,32605,32609,32611,32612,32613,32614,32621,32625,32637,32638,32639,32640,32651,32653,32655,32656,32657,32662,32663,32668,32673,32674,32678,32682,32685,32692,32700,32703,32704,32707,32712,32718,32719,32731,32735,32739,32741,32744,32748,32750,32751,32754,32762,32765,32766,32767,32775,32776,32778,32781,32782,32783,32785,32787,32788,32790,32797,32798,32799,32800,32804,32806,32812,32814,32816,32820,32821,32823,32825,32826,32828,32830,32832,32836,32864,32868,32870,32877,32881,32885,32897,32904,32910,32924,32926,32934,32935,32939,32952,32953,32968,32973,32975,32978,32980,32981,32983,32984,32992,33005,33006,33008,33010,33011,33014,33017,33018,33022,33027,33035,33046,33047,33048,33052,33054,33056,33060,33063,33068,33072,33077,33082,33084,33093,33095,33098,33100,33106,33111,33120,33121,33127,33128,33129,33133,33135,33143,33153,33168,33156,33157,33158,33163,33166,33174,33176,33179,33182,33186,33198,33202,33204,33211,33227,33219,33221,33226,33230,33231,33237,33239,33243,33245,33246,33249,33252,33259,33260,33264,33265,33266,33269,33270,33272,33273,33277,33279,33280,33283,33295,33299,33300,33305,33306,33309,33313,33314,33320,33330,33332,33338,33347,33348,33349,33350,33355,33358,33359,33361,33366,33372,33376,33379,33383,33389,33396,33403,33405,33407,33408,33409,33411,33412,33415,33417,33418,33422,33425,33428,33430,33432,33434,33435,33440,33441,33443,33444,33447,33448,33449,33450,33454,33456,33458,33460,33463,33466,33468,33470,33471,33478,33488,33493,33498,33504,33506,33508,33512,33514,33517,33519,33526,33527,33533,33534,33536,33537,33543,33544,33546,33547,33620,33563,33565,33566,33567,33569,33570,33580,33581,33582,33584,33587,33591,33594,33596,33597,33602,33603,33604,33607,33613,33614,33617,33621,33622,33623,33648,33656,33661,33663,33664,33666,33668,33670,33677,33682,33684,33685,33688,33689,33691,33692,33693,33702,33703,33705,33708,33726,33727,33728,33735,33737,33743,33744,33745,33748,33757,33619,33768,33770,33782,33784,33785,33788,33793,33798,33802,33807,33809,33813,33817,33709,33839,33849,33861,33863,33864,33866,33869,33871,33873,33874,33878,33880,33881,33882,33884,33888,33892,33893,33895,33898,33904,33907,33908,33910,33912,33916,33917,33921,33925,33938,33939,33941,33950,33958,33960,33961,33962,33967,33969,33972,33978,33981,33982,33984,33986,33991,33992,33996,33999,34003,34012,34023,34026,34031,34032,34033,34034,34039,34098,34042,34043,34045,34050,34051,34055,34060,34062,34064,34076,34078,34082,34083,34084,34085,34087,34090,34091,34095,34099,34100,34102,34111,34118,34127,34128,34129,34130,34131,34134,34137,34140,34141,34142,34143,34144,34145,34146,34148,34155,34159,34169,34170,34171,34173,34175,34177,34181,34182,34185,34187,34188,34191,34195,34200,34205,34207,34208,34210,34213,34215,34228,34230,34231,34232,34236,34237,34238,34239,34242,34247,34250,34251,34254,34221,34264,34266,34271,34272,34278,34280,34285,34291,34294,34300,34303,34304,34308,34309,34317,34318,34320,34321,34322,34328,34329,34331,34334,34337,34343,34345,34358,34360,34362,34364,34365,34368,34370,34374,34386,34387,34390,34391,34392,34393,34397,34400,34401,34402,34403,34404,34409,34412,34415,34421,34422,34423,34426,34445,34449,34454,34456,34458,34460,34465,34470,34471,34472,34477,34481,34483,34484,34485,34487,34488,34489,34495,34496,34497,34499,34501,34513,34514,34517,34519,34522,34524,34528,34531,34533,34535,34440,34554,34556,34557,34564,34565,34567,34571,34574,34575,34576,34579,34580,34585,34590,34591,34593,34595,34600,34606,34607,34609,34610,34617,34618,34620,34621,34622,34624,34627,34629,34637,34648,34653,34657,34660,34661,34671,34673,34674,34683,34691,34692,34693,34694,34695,34696,34697,34699,34700,34704,34707,34709,34711,34712,34713,34718,34720,34723,34727,34732,34733,34734,34737,34741,34750,34751,34753,34760,34761,34762,34766,34773,34774,34777,34778,34780,34783,34786,34787,34788,34794,34795,34797,34801,34803,34808,34810,34815,34817,34819,34822,34825,34826,34827,34832,34841,34834,34835,34836,34840,34842,34843,34844,34846,34847,34856,34861,34862,34864,34866,34869,34874,34876,34881,34883,34885,34888,34889,34890,34891,34894,34897,34901,34902,34904,34906,34908,34911,34912,34916,34921,34929,34937,34939,34944,34968,34970,34971,34972,34975,34976,34984,34986,35002,35005,35006,35008,35018,35019,35020,35021,35022,35025,35026,35027,35035,35038,35047,35055,35056,35057,35061,35063,35073,35078,35085,35086,35087,35093,35094,35096,35097,35098,35100,35104,35110,35111,35112,35120,35121,35122,35125,35129,35130,35134,35136,35138,35141,35142,35145,35151,35154,35159,35162,35163,35164,35169,35170,35171,35179,35182,35184,35187,35189,35194,35195,35196,35197,35209,35213,35216,35220,35221,35227,35228,35231,35232,35237,35248,35252,35253,35254,35255,35260,35284,35285,35286,35287,35288,35301,35305,35307,35309,35313,35315,35318,35321,35325,35327,35332,35333,35335,35343,35345,35346,35348,35349,35358,35360,35362,35364,35366,35371,35372,35375,35381,35383,35389,35390,35392,35395,35397,35399,35401,35405,35406,35411,35414,35415,35416,35420,35421,35425,35429,35431,35445,35446,35447,35449,35450,35451,35454,35455,35456,35459,35462,35467,35471,35472,35474,35478,35479,35481,35487,35495,35497,35502,35503,35507,35510,35511,35515,35518,35523,35526,35528,35529,35530,35537,35539,35540,35541,35543,35549,35551,35564,35568,35572,35573,35574,35580,35583,35589,35590,35595,35601,35612,35614,35615,35594,35629,35632,35639,35644,35650,35651,35652,35653,35654,35656,35666,35667,35668,35673,35661,35678,35683,35693,35702,35704,35705,35708,35710,35713,35716,35717,35723,35725,35727,35732,35733,35740,35742,35743,35896,35897,35901,35902,35909,35911,35913,35915,35919,35921,35923,35924,35927,35928,35931,35933,35929,35939,35940,35942,35944,35945,35949,35955,35957,35958,35963,35966,35974,35975,35979,35984,35986,35987,35993,35995,35996,36004,36025,36026,36037,36038,36041,36043,36047,36054,36053,36057,36061,36065,36072,36076,36079,36080,36082,36085,36087,36088,36094,36095,36097,36099,36105,36114,36119,36123,36197,36201,36204,36206,36223,36226,36228,36232,36237,36240,36241,36245,36254,36255,36256,36262,36267,36268,36271,36274,36277,36279,36281,36283,36288,36293,36294,36295,36296,36298,36302,36305,36308,36309,36311,36313,36324,36325,36327,36332,36336,36284,36337,36338,36340,36349,36353,36356,36357,36358,36363,36369,36372,36374,36384,36385,36386,36387,36390,36391,36401,36403,36406,36407,36408,36409,36413,36416,36417,36427,36429,36430,36431,36436,36443,36444,36445,36446,36449,36450,36457,36460,36461,36463,36464,36465,36473,36474,36475,36482,36483,36489,36496,36498,36501,36506,36507,36509,36510,36514,36519,36521,36525,36526,36531,36533,36538,36539,36544,36545,36547,36548,36551,36559,36561,36564,36572,36584,36590,36592,36593,36599,36601,36602,36589,36608,36610,36615,36616,36623,36624,36630,36631,36632,36638,36640,36641,36643,36645,36647,36648,36652,36653,36654,36660,36661,36662,36663,36666,36672,36673,36675,36679,36687,36689,36690,36691,36692,36693,36696,36701,36702,36709,36765,36768,36769,36772,36773,36774,36789,36790,36792,36798,36800,36801,36806,36810,36811,36813,36816,36818,36819,36821,36832,36835,36836,36840,36846,36849,36853,36854,36859,36862,36866,36868,36872,36876,36888,36891,36904,36905,36911,36906,36908,36909,36915,36916,36919,36927,36931,36932,36940,36955,36957,36962,36966,36967,36972,36976,36980,36985,36997,37e3,37003,37004,37006,37008,37013,37015,37016,37017,37019,37024,37025,37026,37029,37040,37042,37043,37044,37046,37053,37068,37054,37059,37060,37061,37063,37064,37077,37079,37080,37081,37084,37085,37087,37093,37074,37110,37099,37103,37104,37108,37118,37119,37120,37124,37125,37126,37128,37133,37136,37140,37142,37143,37144,37146,37148,37150,37152,37157,37154,37155,37159,37161,37166,37167,37169,37172,37174,37175,37177,37178,37180,37181,37187,37191,37192,37199,37203,37207,37209,37210,37211,37217,37220,37223,37229,37236,37241,37242,37243,37249,37251,37253,37254,37258,37262,37265,37267,37268,37269,37272,37278,37281,37286,37288,37292,37293,37294,37296,37297,37298,37299,37302,37307,37308,37309,37311,37314,37315,37317,37331,37332,37335,37337,37338,37342,37348,37349,37353,37354,37356,37357,37358,37359,37360,37361,37367,37369,37371,37373,37376,37377,37380,37381,37382,37383,37385,37386,37388,37392,37394,37395,37398,37400,37404,37405,37411,37412,37413,37414,37416,37422,37423,37424,37427,37429,37430,37432,37433,37434,37436,37438,37440,37442,37443,37446,37447,37450,37453,37454,37455,37457,37464,37465,37468,37469,37472,37473,37477,37479,37480,37481,37486,37487,37488,37493,37494,37495,37496,37497,37499,37500,37501,37503,37512,37513,37514,37517,37518,37522,37527,37529,37535,37536,37540,37541,37543,37544,37547,37551,37554,37558,37560,37562,37563,37564,37565,37567,37568,37569,37570,37571,37573,37574,37575,37576,37579,37580,37581,37582,37584,37587,37589,37591,37592,37593,37596,37597,37599,37600,37601,37603,37605,37607,37608,37612,37614,37616,37625,37627,37631,37632,37634,37640,37645,37649,37652,37653,37660,37661,37662,37663,37665,37668,37669,37671,37673,37674,37683,37684,37686,37687,37703,37704,37705,37712,37713,37714,37717,37719,37720,37722,37726,37732,37733,37735,37737,37738,37741,37743,37744,37745,37747,37748,37750,37754,37757,37759,37760,37761,37762,37768,37770,37771,37773,37775,37778,37781,37784,37787,37790,37793,37795,37796,37798,37800,37803,37812,37813,37814,37818,37801,37825,37828,37829,37830,37831,37833,37834,37835,37836,37837,37843,37849,37852,37854,37855,37858,37862,37863,37881,37879,37880,37882,37883,37885,37889,37890,37892,37896,37897,37901,37902,37903,37909,37910,37911,37919,37934,37935,37937,37938,37939,37940,37947,37951,37949,37955,37957,37960,37962,37964,37973,37977,37980,37983,37985,37987,37992,37995,37997,37998,37999,38001,38002,38020,38019,38264,38265,38270,38276,38280,38284,38285,38286,38301,38302,38303,38305,38310,38313,38315,38316,38324,38326,38330,38333,38335,38342,38344,38345,38347,38352,38353,38354,38355,38361,38362,38365,38366,38367,38368,38372,38374,38429,38430,38434,38436,38437,38438,38444,38449,38451,38455,38456,38457,38458,38460,38461,38465,38482,38484,38486,38487,38488,38497,38510,38516,38523,38524,38526,38527,38529,38530,38531,38532,38537,38545,38550,38554,38557,38559,38564,38565,38566,38569,38574,38575,38579,38586,38602,38610,23986,38616,38618,38621,38622,38623,38633,38639,38641,38650,38658,38659,38661,38665,38682,38683,38685,38689,38690,38691,38696,38705,38707,38721,38723,38730,38734,38735,38741,38743,38744,38746,38747,38755,38759,38762,38766,38771,38774,38775,38776,38779,38781,38783,38784,38793,38805,38806,38807,38809,38810,38814,38815,38818,38828,38830,38833,38834,38837,38838,38840,38841,38842,38844,38846,38847,38849,38852,38853,38855,38857,38858,38860,38861,38862,38864,38865,38868,38871,38872,38873,38877,38878,38880,38875,38881,38884,38895,38897,38900,38903,38904,38906,38919,38922,38937,38925,38926,38932,38934,38940,38942,38944,38947,38950,38955,38958,38959,38960,38962,38963,38965,38949,38974,38980,38983,38986,38993,38994,38995,38998,38999,39001,39002,39010,39011,39013,39014,39018,39020,39083,39085,39086,39088,39092,39095,39096,39098,39099,39103,39106,39109,39112,39116,39137,39139,39141,39142,39143,39146,39155,39158,39170,39175,39176,39185,39189,39190,39191,39194,39195,39196,39199,39202,39206,39207,39211,39217,39218,39219,39220,39221,39225,39226,39227,39228,39232,39233,39238,39239,39240,39245,39246,39252,39256,39257,39259,39260,39262,39263,39264,39323,39325,39327,39334,39344,39345,39346,39349,39353,39354,39357,39359,39363,39369,39379,39380,39385,39386,39388,39390,39399,39402,39403,39404,39408,39412,39413,39417,39421,39422,39426,39427,39428,39435,39436,39440,39441,39446,39454,39456,39458,39459,39460,39463,39469,39470,39475,39477,39478,39480,39495,39489,39492,39498,39499,39500,39502,39505,39508,39510,39517,39594,39596,39598,39599,39602,39604,39605,39606,39609,39611,39614,39615,39617,39619,39622,39624,39630,39632,39634,39637,39638,39639,39643,39644,39648,39652,39653,39655,39657,39660,39666,39667,39669,39673,39674,39677,39679,39680,39681,39682,39683,39684,39685,39688,39689,39691,39692,39693,39694,39696,39698,39702,39705,39707,39708,39712,39718,39723,39725,39731,39732,39733,39735,39737,39738,39741,39752,39755,39756,39765,39766,39767,39771,39774,39777,39779,39781,39782,39784,39786,39787,39788,39789,39790,39795,39797,39799,39800,39801,39807,39808,39812,39813,39814,39815,39817,39818,39819,39821,39823,39824,39828,39834,39837,39838,39846,39847,39849,39852,39856,39857,39858,39863,39864,39867,39868,39870,39871,39873,39879,39880,39886,39888,39895,39896,39901,39903,39909,39911,39914,39915,39919,39923,39927,39928,39929,39930,39933,39935,39936,39938,39947,39951,39953,39958,39960,39961,39962,39964,39966,39970,39971,39974,39975,39976,39977,39978,39985,39989,39990,39991,39997,40001,40003,40004,40005,40009,40010,40014,40015,40016,40019,40020,40022,40024,40027,40029,40030,40031,40035,40041,40042,40028,40043,40040,40046,40048,40050,40053,40055,40059,40166,40178,40183,40185,40203,40194,40209,40215,40216,40220,40221,40222,40239,40240,40242,40243,40244,40250,40252,40261,40253,40258,40259,40263,40266,40275,40276,40287,40291,40290,40293,40297,40298,40299,40304,40310,40311,40315,40316,40318,40323,40324,40326,40330,40333,40334,40338,40339,40341,40342,40343,40344,40353,40362,40364,40366,40369,40373,40377,40380,40383,40387,40391,40393,40394,40404,40405,40406,40407,40410,40414,40415,40416,40421,40423,40425,40427,40430,40432,40435,40436,40446,40458,40450,40455,40462,40464,40465,40466,40469,40470,40473,40476,40477,40570,40571,40572,40576,40578,40579,40580,40581,40583,40590,40591,40598,40600,40603,40606,40612,40616,40620,40622,40623,40624,40627,40628,40629,40646,40648,40651,40661,40671,40676,40679,40684,40685,40686,40688,40689,40690,40693,40696,40703,40706,40707,40713,40719,40720,40721,40722,40724,40726,40727,40729,40730,40731,40735,40738,40742,40746,40747,40751,40753,40754,40756,40759,40761,40762,40764,40765,40767,40769,40771,40772,40773,40774,40775,40787,40789,40790,40791,40792,40794,40797,40798,40808,40809,40813,40814,40815,40816,40817,40819,40821,40826,40829,40847,40848,40849,40850,40852,40854,40855,40862,40865,40866,40867,40869,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],ibm866:[1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,9617,9618,9619,9474,9508,9569,9570,9558,9557,9571,9553,9559,9565,9564,9563,9488,9492,9524,9516,9500,9472,9532,9566,9567,9562,9556,9577,9574,9568,9552,9580,9575,9576,9572,9573,9561,9560,9554,9555,9579,9578,9496,9484,9608,9604,9612,9616,9600,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1025,1105,1028,1108,1031,1111,1038,1118,176,8729,183,8730,8470,164,9632,160],"iso-8859-2":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,260,728,321,164,317,346,167,168,352,350,356,377,173,381,379,176,261,731,322,180,318,347,711,184,353,351,357,378,733,382,380,340,193,194,258,196,313,262,199,268,201,280,203,282,205,206,270,272,323,327,211,212,336,214,215,344,366,218,368,220,221,354,223,341,225,226,259,228,314,263,231,269,233,281,235,283,237,238,271,273,324,328,243,244,337,246,247,345,367,250,369,252,253,355,729],"iso-8859-3":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,294,728,163,164,null,292,167,168,304,350,286,308,173,null,379,176,295,178,179,180,181,293,183,184,305,351,287,309,189,null,380,192,193,194,null,196,266,264,199,200,201,202,203,204,205,206,207,null,209,210,211,212,288,214,215,284,217,218,219,220,364,348,223,224,225,226,null,228,267,265,231,232,233,234,235,236,237,238,239,null,241,242,243,244,289,246,247,285,249,250,251,252,365,349,729],"iso-8859-4":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,260,312,342,164,296,315,167,168,352,274,290,358,173,381,175,176,261,731,343,180,297,316,711,184,353,275,291,359,330,382,331,256,193,194,195,196,197,198,302,268,201,280,203,278,205,206,298,272,325,332,310,212,213,214,215,216,370,218,219,220,360,362,223,257,225,226,227,228,229,230,303,269,233,281,235,279,237,238,299,273,326,333,311,244,245,246,247,248,371,250,251,252,361,363,729],"iso-8859-5":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,173,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,8470,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,167,1118,1119],"iso-8859-6":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,null,null,null,164,null,null,null,null,null,null,null,1548,173,null,null,null,null,null,null,null,null,null,null,null,null,null,1563,null,null,null,1567,null,1569,1570,1571,1572,1573,1574,1575,1576,1577,1578,1579,1580,1581,1582,1583,1584,1585,1586,1587,1588,1589,1590,1591,1592,1593,1594,null,null,null,null,null,1600,1601,1602,1603,1604,1605,1606,1607,1608,1609,1610,1611,1612,1613,1614,1615,1616,1617,1618,null,null,null,null,null,null,null,null,null,null,null,null,null],"iso-8859-7":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,8216,8217,163,8364,8367,166,167,168,169,890,171,172,173,null,8213,176,177,178,179,900,901,902,183,904,905,906,187,908,189,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,null,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,null],"iso-8859-8":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,null,162,163,164,165,166,167,168,169,215,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,247,187,188,189,190,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,8215,1488,1489,1490,1491,1492,1493,1494,1495,1496,1497,1498,1499,1500,1501,1502,1503,1504,1505,1506,1507,1508,1509,1510,1511,1512,1513,1514,null,null,8206,8207,null],"iso-8859-10":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,260,274,290,298,296,310,167,315,272,352,358,381,173,362,330,176,261,275,291,299,297,311,183,316,273,353,359,382,8213,363,331,256,193,194,195,196,197,198,302,268,201,280,203,278,205,206,207,208,325,332,211,212,213,214,360,216,370,218,219,220,221,222,223,257,225,226,227,228,229,230,303,269,233,281,235,279,237,238,239,240,326,333,243,244,245,246,361,248,371,250,251,252,253,254,312],"iso-8859-13":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,8221,162,163,164,8222,166,167,216,169,342,171,172,173,174,198,176,177,178,179,8220,181,182,183,248,185,343,187,188,189,190,230,260,302,256,262,196,197,280,274,268,201,377,278,290,310,298,315,352,323,325,211,332,213,214,215,370,321,346,362,220,379,381,223,261,303,257,263,228,229,281,275,269,233,378,279,291,311,299,316,353,324,326,243,333,245,246,247,371,322,347,363,252,380,382,8217],"iso-8859-14":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,7682,7683,163,266,267,7690,167,7808,169,7810,7691,7922,173,174,376,7710,7711,288,289,7744,7745,182,7766,7809,7767,7811,7776,7923,7812,7813,7777,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,372,209,210,211,212,213,214,7786,216,217,218,219,220,221,374,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,373,241,242,243,244,245,246,7787,248,249,250,251,252,253,375,255],"iso-8859-15":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,8364,165,352,167,353,169,170,171,172,173,174,175,176,177,178,179,381,181,182,183,382,185,186,187,338,339,376,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255],"iso-8859-16":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,260,261,321,8364,8222,352,167,353,169,536,171,377,173,378,379,176,177,268,322,381,8221,182,183,382,269,537,187,338,339,376,380,192,193,194,258,196,262,198,199,200,201,202,203,204,205,206,207,272,323,210,211,212,336,214,346,368,217,218,219,220,280,538,223,224,225,226,259,228,263,230,231,232,233,234,235,236,237,238,239,273,324,242,243,244,337,246,347,369,249,250,251,252,281,539,255],"koi8-r":[9472,9474,9484,9488,9492,9496,9500,9508,9516,9524,9532,9600,9604,9608,9612,9616,9617,9618,9619,8992,9632,8729,8730,8776,8804,8805,160,8993,176,178,183,247,9552,9553,9554,1105,9555,9556,9557,9558,9559,9560,9561,9562,9563,9564,9565,9566,9567,9568,9569,1025,9570,9571,9572,9573,9574,9575,9576,9577,9578,9579,9580,169,1102,1072,1073,1094,1076,1077,1092,1075,1093,1080,1081,1082,1083,1084,1085,1086,1087,1103,1088,1089,1090,1091,1078,1074,1100,1099,1079,1096,1101,1097,1095,1098,1070,1040,1041,1062,1044,1045,1060,1043,1061,1048,1049,1050,1051,1052,1053,1054,1055,1071,1056,1057,1058,1059,1046,1042,1068,1067,1047,1064,1069,1065,1063,1066],"koi8-u":[9472,9474,9484,9488,9492,9496,9500,9508,9516,9524,9532,9600,9604,9608,9612,9616,9617,9618,9619,8992,9632,8729,8730,8776,8804,8805,160,8993,176,178,183,247,9552,9553,9554,1105,1108,9556,1110,1111,9559,9560,9561,9562,9563,1169,1118,9566,9567,9568,9569,1025,1028,9571,1030,1031,9574,9575,9576,9577,9578,1168,1038,169,1102,1072,1073,1094,1076,1077,1092,1075,1093,1080,1081,1082,1083,1084,1085,1086,1087,1103,1088,1089,1090,1091,1078,1074,1100,1099,1079,1096,1101,1097,1095,1098,1070,1040,1041,1062,1044,1045,1060,1043,1061,1048,1049,1050,1051,1052,1053,1054,1055,1071,1056,1057,1058,1059,1046,1042,1068,1067,1047,1064,1069,1065,1063,1066],macintosh:[196,197,199,201,209,214,220,225,224,226,228,227,229,231,233,232,234,235,237,236,238,239,241,243,242,244,246,245,250,249,251,252,8224,176,162,163,167,8226,182,223,174,169,8482,180,168,8800,198,216,8734,177,8804,8805,165,181,8706,8721,8719,960,8747,170,186,937,230,248,191,161,172,8730,402,8776,8710,171,187,8230,160,192,195,213,338,339,8211,8212,8220,8221,8216,8217,247,9674,255,376,8260,8364,8249,8250,64257,64258,8225,183,8218,8222,8240,194,202,193,203,200,205,206,207,204,211,212,63743,210,218,219,217,305,710,732,175,728,729,730,184,733,731,711],"windows-874":[8364,129,130,131,132,8230,134,135,136,137,138,139,140,141,142,143,144,8216,8217,8220,8221,8226,8211,8212,152,153,154,155,156,157,158,159,160,3585,3586,3587,3588,3589,3590,3591,3592,3593,3594,3595,3596,3597,3598,3599,3600,3601,3602,3603,3604,3605,3606,3607,3608,3609,3610,3611,3612,3613,3614,3615,3616,3617,3618,3619,3620,3621,3622,3623,3624,3625,3626,3627,3628,3629,3630,3631,3632,3633,3634,3635,3636,3637,3638,3639,3640,3641,3642,null,null,null,null,3647,3648,3649,3650,3651,3652,3653,3654,3655,3656,3657,3658,3659,3660,3661,3662,3663,3664,3665,3666,3667,3668,3669,3670,3671,3672,3673,3674,3675,null,null,null,null],"windows-1250":[8364,129,8218,131,8222,8230,8224,8225,136,8240,352,8249,346,356,381,377,144,8216,8217,8220,8221,8226,8211,8212,152,8482,353,8250,347,357,382,378,160,711,728,321,164,260,166,167,168,169,350,171,172,173,174,379,176,177,731,322,180,181,182,183,184,261,351,187,317,733,318,380,340,193,194,258,196,313,262,199,268,201,280,203,282,205,206,270,272,323,327,211,212,336,214,215,344,366,218,368,220,221,354,223,341,225,226,259,228,314,263,231,269,233,281,235,283,237,238,271,273,324,328,243,244,337,246,247,345,367,250,369,252,253,355,729],"windows-1251":[1026,1027,8218,1107,8222,8230,8224,8225,8364,8240,1033,8249,1034,1036,1035,1039,1106,8216,8217,8220,8221,8226,8211,8212,152,8482,1113,8250,1114,1116,1115,1119,160,1038,1118,1032,164,1168,166,167,1025,169,1028,171,172,173,174,1031,176,177,1030,1110,1169,181,182,183,1105,8470,1108,187,1112,1029,1109,1111,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103],"windows-1252":[8364,129,8218,402,8222,8230,8224,8225,710,8240,352,8249,338,141,381,143,144,8216,8217,8220,8221,8226,8211,8212,732,8482,353,8250,339,157,382,376,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255],"windows-1253":[8364,129,8218,402,8222,8230,8224,8225,136,8240,138,8249,140,141,142,143,144,8216,8217,8220,8221,8226,8211,8212,152,8482,154,8250,156,157,158,159,160,901,902,163,164,165,166,167,168,169,null,171,172,173,174,8213,176,177,178,179,900,181,182,183,904,905,906,187,908,189,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,null,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,null],"windows-1254":[8364,129,8218,402,8222,8230,8224,8225,710,8240,352,8249,338,141,142,143,144,8216,8217,8220,8221,8226,8211,8212,732,8482,353,8250,339,157,158,376,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,286,209,210,211,212,213,214,215,216,217,218,219,220,304,350,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,287,241,242,243,244,245,246,247,248,249,250,251,252,305,351,255],"windows-1255":[8364,129,8218,402,8222,8230,8224,8225,710,8240,138,8249,140,141,142,143,144,8216,8217,8220,8221,8226,8211,8212,732,8482,154,8250,156,157,158,159,160,161,162,163,8362,165,166,167,168,169,215,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,247,187,188,189,190,191,1456,1457,1458,1459,1460,1461,1462,1463,1464,1465,1466,1467,1468,1469,1470,1471,1472,1473,1474,1475,1520,1521,1522,1523,1524,null,null,null,null,null,null,null,1488,1489,1490,1491,1492,1493,1494,1495,1496,1497,1498,1499,1500,1501,1502,1503,1504,1505,1506,1507,1508,1509,1510,1511,1512,1513,1514,null,null,8206,8207,null],"windows-1256":[8364,1662,8218,402,8222,8230,8224,8225,710,8240,1657,8249,338,1670,1688,1672,1711,8216,8217,8220,8221,8226,8211,8212,1705,8482,1681,8250,339,8204,8205,1722,160,1548,162,163,164,165,166,167,168,169,1726,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,1563,187,188,189,190,1567,1729,1569,1570,1571,1572,1573,1574,1575,1576,1577,1578,1579,1580,1581,1582,1583,1584,1585,1586,1587,1588,1589,1590,215,1591,1592,1593,1594,1600,1601,1602,1603,224,1604,226,1605,1606,1607,1608,231,232,233,234,235,1609,1610,238,239,1611,1612,1613,1614,244,1615,1616,247,1617,249,1618,251,252,8206,8207,1746],"windows-1257":[8364,129,8218,131,8222,8230,8224,8225,136,8240,138,8249,140,168,711,184,144,8216,8217,8220,8221,8226,8211,8212,152,8482,154,8250,156,175,731,159,160,null,162,163,164,null,166,167,216,169,342,171,172,173,174,198,176,177,178,179,180,181,182,183,248,185,343,187,188,189,190,230,260,302,256,262,196,197,280,274,268,201,377,278,290,310,298,315,352,323,325,211,332,213,214,215,370,321,346,362,220,379,381,223,261,303,257,263,228,229,281,275,269,233,378,279,291,311,299,316,353,324,326,243,333,245,246,247,371,322,347,363,252,380,382,729],"windows-1258":[8364,129,8218,402,8222,8230,8224,8225,710,8240,138,8249,338,141,142,143,144,8216,8217,8220,8221,8226,8211,8212,732,8482,154,8250,339,157,158,376,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,258,196,197,198,199,200,201,202,203,768,205,206,207,272,209,777,211,212,416,214,215,216,217,218,219,220,431,771,223,224,225,226,259,228,229,230,231,232,233,234,235,769,237,238,239,273,241,803,243,244,417,246,247,248,249,250,251,252,432,8363,255],"x-mac-cyrillic":[1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,8224,176,1168,163,167,8226,182,1030,174,169,8482,1026,1106,8800,1027,1107,8734,177,8804,8805,1110,181,1169,1032,1028,1108,1031,1111,1033,1113,1034,1114,1112,1029,172,8730,402,8776,8710,171,187,8230,160,1035,1115,1036,1116,1109,8211,8212,8220,8221,8216,8217,247,8222,1038,1118,1039,1119,8470,1025,1105,1103,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,8364]}}(this||{})},{}],35:[function(n,l,e){!function(e){"use strict";function t(n,l,e){return l<=n&&n<=e}void 0!==l&&l.exports&&!e["encoding-indexes"]&&(e["encoding-indexes"]=n("./encoding-indexes.js")["encoding-indexes"]);var u=Math.floor;function r(n){if(void 0===n)return{};if(n===Object(n))return n;throw TypeError("Could not convert argument to dictionary")}function o(n){return 0<=n&&n<=127}var i=o,s=-1;function a(n){this.tokens=[].slice.call(n),this.tokens.reverse()}a.prototype={endOfStream:function(){return!this.tokens.length},read:function(){return this.tokens.length?this.tokens.pop():s},prepend:function(n){if(Array.isArray(n))for(var l=n;l.length;)this.tokens.push(l.pop());else this.tokens.push(n)},push:function(n){if(Array.isArray(n))for(var l=n;l.length;)this.tokens.unshift(l.shift());else this.tokens.unshift(n)}};var c=-1;function d(n,l){if(n)throw TypeError("Decoder error");return l||65533}function h(n){throw TypeError("The code point "+n+" could not be encoded.")}function f(n){return n=String(n).trim().toLowerCase(),Object.prototype.hasOwnProperty.call(m,n)?m[n]:null}var p=[{encodings:[{labels:["unicode-1-1-utf-8","utf-8","utf8"],name:"UTF-8"}],heading:"The Encoding"},{encodings:[{labels:["866","cp866","csibm866","ibm866"],name:"IBM866"},{labels:["csisolatin2","iso-8859-2","iso-ir-101","iso8859-2","iso88592","iso_8859-2","iso_8859-2:1987","l2","latin2"],name:"ISO-8859-2"},{labels:["csisolatin3","iso-8859-3","iso-ir-109","iso8859-3","iso88593","iso_8859-3","iso_8859-3:1988","l3","latin3"],name:"ISO-8859-3"},{labels:["csisolatin4","iso-8859-4","iso-ir-110","iso8859-4","iso88594","iso_8859-4","iso_8859-4:1988","l4","latin4"],name:"ISO-8859-4"},{labels:["csisolatincyrillic","cyrillic","iso-8859-5","iso-ir-144","iso8859-5","iso88595","iso_8859-5","iso_8859-5:1988"],name:"ISO-8859-5"},{labels:["arabic","asmo-708","csiso88596e","csiso88596i","csisolatinarabic","ecma-114","iso-8859-6","iso-8859-6-e","iso-8859-6-i","iso-ir-127","iso8859-6","iso88596","iso_8859-6","iso_8859-6:1987"],name:"ISO-8859-6"},{labels:["csisolatingreek","ecma-118","elot_928","greek","greek8","iso-8859-7","iso-ir-126","iso8859-7","iso88597","iso_8859-7","iso_8859-7:1987","sun_eu_greek"],name:"ISO-8859-7"},{labels:["csiso88598e","csisolatinhebrew","hebrew","iso-8859-8","iso-8859-8-e","iso-ir-138","iso8859-8","iso88598","iso_8859-8","iso_8859-8:1988","visual"],name:"ISO-8859-8"},{labels:["csiso88598i","iso-8859-8-i","logical"],name:"ISO-8859-8-I"},{labels:["csisolatin6","iso-8859-10","iso-ir-157","iso8859-10","iso885910","l6","latin6"],name:"ISO-8859-10"},{labels:["iso-8859-13","iso8859-13","iso885913"],name:"ISO-8859-13"},{labels:["iso-8859-14","iso8859-14","iso885914"],name:"ISO-8859-14"},{labels:["csisolatin9","iso-8859-15","iso8859-15","iso885915","iso_8859-15","l9"],name:"ISO-8859-15"},{labels:["iso-8859-16"],name:"ISO-8859-16"},{labels:["cskoi8r","koi","koi8","koi8-r","koi8_r"],name:"KOI8-R"},{labels:["koi8-ru","koi8-u"],name:"KOI8-U"},{labels:["csmacintosh","mac","macintosh","x-mac-roman"],name:"macintosh"},{labels:["dos-874","iso-8859-11","iso8859-11","iso885911","tis-620","windows-874"],name:"windows-874"},{labels:["cp1250","windows-1250","x-cp1250"],name:"windows-1250"},{labels:["cp1251","windows-1251","x-cp1251"],name:"windows-1251"},{labels:["ansi_x3.4-1968","ascii","cp1252","cp819","csisolatin1","ibm819","iso-8859-1","iso-ir-100","iso8859-1","iso88591","iso_8859-1","iso_8859-1:1987","l1","latin1","us-ascii","windows-1252","x-cp1252"],name:"windows-1252"},{labels:["cp1253","windows-1253","x-cp1253"],name:"windows-1253"},{labels:["cp1254","csisolatin5","iso-8859-9","iso-ir-148","iso8859-9","iso88599","iso_8859-9","iso_8859-9:1989","l5","latin5","windows-1254","x-cp1254"],name:"windows-1254"},{labels:["cp1255","windows-1255","x-cp1255"],name:"windows-1255"},{labels:["cp1256","windows-1256","x-cp1256"],name:"windows-1256"},{labels:["cp1257","windows-1257","x-cp1257"],name:"windows-1257"},{labels:["cp1258","windows-1258","x-cp1258"],name:"windows-1258"},{labels:["x-mac-cyrillic","x-mac-ukrainian"],name:"x-mac-cyrillic"}],heading:"Legacy single-byte encodings"},{encodings:[{labels:["chinese","csgb2312","csiso58gb231280","gb2312","gb_2312","gb_2312-80","gbk","iso-ir-58","x-gbk"],name:"GBK"},{labels:["gb18030"],name:"gb18030"}],heading:"Legacy multi-byte Chinese (simplified) encodings"},{encodings:[{labels:["big5","big5-hkscs","cn-big5","csbig5","x-x-big5"],name:"Big5"}],heading:"Legacy multi-byte Chinese (traditional) encodings"},{encodings:[{labels:["cseucpkdfmtjapanese","euc-jp","x-euc-jp"],name:"EUC-JP"},{labels:["csiso2022jp","iso-2022-jp"],name:"ISO-2022-JP"},{labels:["csshiftjis","ms932","ms_kanji","shift-jis","shift_jis","sjis","windows-31j","x-sjis"],name:"Shift_JIS"}],heading:"Legacy multi-byte Japanese encodings"},{encodings:[{labels:["cseuckr","csksc56011987","euc-kr","iso-ir-149","korean","ks_c_5601-1987","ks_c_5601-1989","ksc5601","ksc_5601","windows-949"],name:"EUC-KR"}],heading:"Legacy multi-byte Korean encodings"},{encodings:[{labels:["csiso2022kr","hz-gb-2312","iso-2022-cn","iso-2022-cn-ext","iso-2022-kr"],name:"replacement"},{labels:["utf-16be"],name:"UTF-16BE"},{labels:["utf-16","utf-16le"],name:"UTF-16LE"},{labels:["x-user-defined"],name:"x-user-defined"}],heading:"Legacy miscellaneous encodings"}],m={};p.forEach((function(n){n.encodings.forEach((function(n){n.labels.forEach((function(l){m[l]=n}))}))}));var g,y,v={},w={};function b(n,l){return l&&l[n]||null}function S(n,l){var e=l.indexOf(n);return-1===e?null:e}function C(n){if(!("encoding-indexes"in e))throw Error("Indexes missing. Did you forget to include encoding-indexes.js first?");return e["encoding-indexes"][n]}var D="utf-8";function E(n,l){if(!(this instanceof E))throw TypeError("Called as a function. Did you forget 'new'?");n=void 0!==n?String(n):D,l=r(l),this._encoding=null,this._decoder=null,this._ignoreBOM=!1,this._BOMseen=!1,this._error_mode="replacement",this._do_not_flush=!1;var e=f(n);if(null===e||"replacement"===e.name)throw RangeError("Unknown encoding: "+n);if(!w[e.name])throw Error("Decoder not present. Did you forget to include encoding-indexes.js first?");var t=this;return t._encoding=e,Boolean(l.fatal)&&(t._error_mode="fatal"),Boolean(l.ignoreBOM)&&(t._ignoreBOM=!0),Object.defineProperty||(this.encoding=t._encoding.name.toLowerCase(),this.fatal="fatal"===t._error_mode,this.ignoreBOM=t._ignoreBOM),t}function _(n,l){if(!(this instanceof _))throw TypeError("Called as a function. Did you forget 'new'?");l=r(l),this._encoding=null,this._encoder=null,this._do_not_flush=!1,this._fatal=Boolean(l.fatal)?"fatal":"replacement";var t=this;if(Boolean(l.NONSTANDARD_allowLegacyEncoding)){var u=f(n=void 0!==n?String(n):D);if(null===u||"replacement"===u.name)throw RangeError("Unknown encoding: "+n);if(!v[u.name])throw Error("Encoder not present. Did you forget to include encoding-indexes.js first?");t._encoding=u}else t._encoding=f("utf-8"),void 0!==n&&"console"in e&&console.warn("TextEncoder constructor called with encoding label, which is ignored.");return Object.defineProperty||(this.encoding=t._encoding.name.toLowerCase()),t}function k(n){var l=n.fatal,e=0,u=0,r=0,o=128,i=191;this.handler=function(n,a){if(a===s&&0!==r)return r=0,d(l);if(a===s)return c;if(0===r){if(t(a,0,127))return a;if(t(a,194,223))r=1,e=31&a;else if(t(a,224,239))224===a&&(o=160),237===a&&(i=159),r=2,e=15&a;else{if(!t(a,240,244))return d(l);240===a&&(o=144),244===a&&(i=143),r=3,e=7&a}return null}if(!t(a,o,i))return e=r=u=0,o=128,i=191,n.prepend(a),d(l);if(o=128,i=191,e=e<<6|63&a,(u+=1)!==r)return null;var h=e;return e=r=u=0,h}}function x(n){n.fatal,this.handler=function(n,l){if(l===s)return c;if(i(l))return l;var e,u;t(l,128,2047)?(e=1,u=192):t(l,2048,65535)?(e=2,u=224):t(l,65536,1114111)&&(e=3,u=240);for(var r=[(l>>6*e)+u];e>0;){var o=l>>6*(e-1);r.push(128|63&o),e-=1}return r}}function T(n,l){var e=l.fatal;this.handler=function(l,t){if(t===s)return c;if(o(t))return t;var u=n[t-128];return null===u?d(e):u}}function P(n,l){l.fatal,this.handler=function(l,e){if(e===s)return c;if(i(e))return e;var t=S(e,n);return null===t&&h(e),t+128}}function I(n){var l=n.fatal,e=0,u=0,r=0;this.handler=function(n,i){if(i===s&&0===e&&0===u&&0===r)return c;var a;if(i!==s||0===e&&0===u&&0===r||(e=0,u=0,r=0,d(l)),0!==r){a=null,t(i,48,57)&&(a=function(n){if(n>39419&&n<189e3||n>1237575)return null;if(7457===n)return 59335;var l,e=0,t=0,u=C("gb18030-ranges");for(l=0;l<u.length;++l){var r=u[l];if(!(r[0]<=n))break;e=r[0],t=r[1]}return t+n-e}(10*(126*(10*(e-129)+u-48)+r-129)+i-48));var h=[u,r,i];return e=0,u=0,r=0,null===a?(n.prepend(h),d(l)):a}if(0!==u)return t(i,129,254)?(r=i,null):(n.prepend([u,i]),e=0,u=0,d(l));if(0!==e){if(t(i,48,57))return u=i,null;var f=e,p=null;e=0;var m=i<127?64:65;return(t(i,64,126)||t(i,128,254))&&(p=190*(f-129)+(i-m)),null===(a=null===p?null:b(p,C("gb18030")))&&o(i)&&n.prepend(i),null===a?d(l):a}return o(i)?i:128===i?8364:t(i,129,254)?(e=i,null):d(l)}}function A(n,l){n.fatal,this.handler=function(n,e){if(e===s)return c;if(i(e))return e;if(58853===e)return h(e);if(l&&8364===e)return 128;var t=S(e,C("gb18030"));if(null!==t){var r=t%190;return[u(t/190)+129,r+(r<63?64:65)]}if(l)return h(e);t=function(n){if(59335===n)return 7457;var l,e=0,t=0,u=C("gb18030-ranges");for(l=0;l<u.length;++l){var r=u[l];if(!(r[1]<=n))break;e=r[1],t=r[0]}return t+n-e}(e);var o=u(t/10/126/10),a=u((t-=10*o*126*10)/10/126),d=u((t-=10*a*126)/10);return[o+129,a+48,d+129,t-10*d+48]}}function O(n){var l=n.fatal,e=0;this.handler=function(n,u){if(u===s&&0!==e)return e=0,d(l);if(u===s&&0===e)return c;if(0!==e){var r=e,i=null;e=0;var a=u<127?64:98;switch((t(u,64,126)||t(u,161,254))&&(i=157*(r-129)+(u-a)),i){case 1133:return[202,772];case 1135:return[202,780];case 1164:return[234,772];case 1166:return[234,780]}var h=null===i?null:b(i,C("big5"));return null===h&&o(u)&&n.prepend(u),null===h?d(l):h}return o(u)?u:t(u,129,254)?(e=u,null):d(l)}}function R(n){n.fatal,this.handler=function(n,l){if(l===s)return c;if(i(l))return l;var e=function(n){y=y||C("big5").map((function(n,l){return l<5024?null:n}));var l=y;return 9552===n||9566===n||9569===n||9578===n||21313===n||21317===n?l.lastIndexOf(n):S(n,l)}(l);if(null===e)return h(l);var t=u(e/157)+129;if(t<161)return h(l);var r=e%157;return[t,r+(r<63?64:98)]}}function F(n){var l=n.fatal,e=!1,u=0;this.handler=function(n,r){if(r===s&&0!==u)return u=0,d(l);if(r===s&&0===u)return c;if(142===u&&t(r,161,223))return u=0,65216+r;if(143===u&&t(r,161,254))return e=!0,u=r,null;if(0!==u){var i=u;u=0;var a=null;return t(i,161,254)&&t(r,161,254)&&(a=b(94*(i-161)+(r-161),C(e?"jis0212":"jis0208"))),e=!1,t(r,161,254)||n.prepend(r),null===a?d(l):a}return o(r)?r:142===r||143===r||t(r,161,254)?(u=r,null):d(l)}}function L(n){n.fatal,this.handler=function(n,l){if(l===s)return c;if(i(l))return l;if(165===l)return 92;if(8254===l)return 126;if(t(l,65377,65439))return[142,l-65377+161];8722===l&&(l=65293);var e=S(l,C("jis0208"));return null===e?h(l):[u(e/94)+161,e%94+161]}}function $(n){var l=n.fatal,e=0,u=1,r=2,o=3,i=4,a=5,h=6,f=e,p=e,m=0,g=!1;this.handler=function(n,y){switch(f){default:case e:return 27===y?(f=a,null):t(y,0,127)&&14!==y&&15!==y&&27!==y?(g=!1,y):y===s?c:(g=!1,d(l));case u:return 27===y?(f=a,null):92===y?(g=!1,165):126===y?(g=!1,8254):t(y,0,127)&&14!==y&&15!==y&&27!==y&&92!==y&&126!==y?(g=!1,y):y===s?c:(g=!1,d(l));case r:return 27===y?(f=a,null):t(y,33,95)?(g=!1,65344+y):y===s?c:(g=!1,d(l));case o:return 27===y?(f=a,null):t(y,33,126)?(g=!1,m=y,f=i,null):y===s?c:(g=!1,d(l));case i:if(27===y)return f=a,d(l);if(t(y,33,126)){f=o;var v=b(94*(m-33)+y-33,C("jis0208"));return null===v?d(l):v}return y===s?(f=o,n.prepend(y),d(l)):(f=o,d(l));case a:return 36===y||40===y?(m=y,f=h,null):(n.prepend(y),g=!1,f=p,d(l));case h:var w=m;m=0;var S=null;if(40===w&&66===y&&(S=e),40===w&&74===y&&(S=u),40===w&&73===y&&(S=r),36!==w||64!==y&&66!==y||(S=o),null!==S){f=f=S;var D=g;return g=!0,D?d(l):null}return n.prepend([w,y]),g=!1,f=p,d(l)}}}function j(n){n.fatal;var l=0,e=1,t=2,r=l;this.handler=function(n,o){if(o===s&&r!==l)return n.prepend(o),r=l,[27,40,66];if(o===s&&r===l)return c;if(!(r!==l&&r!==e||14!==o&&15!==o&&27!==o))return h(65533);if(r===l&&i(o))return o;if(r===e&&(i(o)&&92!==o&&126!==o||165==o||8254==o)){if(i(o))return o;if(165===o)return 92;if(8254===o)return 126}if(i(o)&&r!==l)return n.prepend(o),r=l,[27,40,66];if((165===o||8254===o)&&r!==e)return n.prepend(o),r=e,[27,40,74];8722===o&&(o=65293);var a=S(o,C("jis0208"));return null===a?h(o):r!==t?(n.prepend(o),r=t,[27,36,66]):[u(a/94)+33,a%94+33]}}function M(n){var l=n.fatal,e=0;this.handler=function(n,u){if(u===s&&0!==e)return e=0,d(l);if(u===s&&0===e)return c;if(0!==e){var r=e,i=null;e=0;var a=u<127?64:65,h=r<160?129:193;if((t(u,64,126)||t(u,128,252))&&(i=188*(r-h)+u-a),t(i,8836,10715))return 48508+i;var f=null===i?null:b(i,C("jis0208"));return null===f&&o(u)&&n.prepend(u),null===f?d(l):f}return o(u)||128===u?u:t(u,161,223)?65216+u:t(u,129,159)||t(u,224,252)?(e=u,null):d(l)}}function N(n){n.fatal,this.handler=function(n,l){if(l===s)return c;if(i(l)||128===l)return l;if(165===l)return 92;if(8254===l)return 126;if(t(l,65377,65439))return l-65377+161;8722===l&&(l=65293);var e=function(n){return g=g||C("jis0208").map((function(n,l){return t(l,8272,8835)?null:n})),g.indexOf(n)}(l);if(null===e)return h(l);var r=u(e/188),o=e%188;return[r+(r<31?129:193),o+(o<63?64:65)]}}function B(n){var l=n.fatal,e=0;this.handler=function(n,u){if(u===s&&0!==e)return e=0,d(l);if(u===s&&0===e)return c;if(0!==e){var r=e,i=null;e=0,t(u,65,254)&&(i=190*(r-129)+(u-65));var a=null===i?null:b(i,C("euc-kr"));return null===i&&o(u)&&n.prepend(u),null===a?d(l):a}return o(u)?u:t(u,129,254)?(e=u,null):d(l)}}function H(n){n.fatal,this.handler=function(n,l){if(l===s)return c;if(i(l))return l;var e=S(l,C("euc-kr"));return null===e?h(l):[u(e/190)+129,e%190+65]}}function U(n,l){var e=n>>8,t=255&n;return l?[e,t]:[t,e]}function q(n,l){var e=l.fatal,u=null,r=null;this.handler=function(l,o){if(o===s&&(null!==u||null!==r))return d(e);if(o===s&&null===u&&null===r)return c;if(null===u)return u=o,null;var i;if(i=n?(u<<8)+o:(o<<8)+u,u=null,null!==r){var a=r;return r=null,t(i,56320,57343)?65536+1024*(a-55296)+(i-56320):(l.prepend(U(i,n)),d(e))}return t(i,55296,56319)?(r=i,null):t(i,56320,57343)?d(e):i}}function W(n,l){l.fatal,this.handler=function(l,e){if(e===s)return c;if(t(e,0,65535))return U(e,n);var u=U(55296+(e-65536>>10),n),r=U(56320+(e-65536&1023),n);return u.concat(r)}}function z(n){n.fatal,this.handler=function(n,l){return l===s?c:o(l)?l:63360+l-128}}function V(n){n.fatal,this.handler=function(n,l){return l===s?c:i(l)?l:t(l,63360,63487)?l-63360+128:h(l)}}Object.defineProperty&&(Object.defineProperty(E.prototype,"encoding",{get:function(){return this._encoding.name.toLowerCase()}}),Object.defineProperty(E.prototype,"fatal",{get:function(){return"fatal"===this._error_mode}}),Object.defineProperty(E.prototype,"ignoreBOM",{get:function(){return this._ignoreBOM}})),E.prototype.decode=function(n,l){var e;e="object"==typeof n&&n instanceof ArrayBuffer?new Uint8Array(n):"object"==typeof n&&"buffer"in n&&n.buffer instanceof ArrayBuffer?new Uint8Array(n.buffer,n.byteOffset,n.byteLength):new Uint8Array(0),l=r(l),this._do_not_flush||(this._decoder=w[this._encoding.name]({fatal:"fatal"===this._error_mode}),this._BOMseen=!1),this._do_not_flush=Boolean(l.stream);for(var t,u=new a(e),o=[];;){var i=u.read();if(i===s)break;if((t=this._decoder.handler(u,i))===c)break;null!==t&&(Array.isArray(t)?o.push.apply(o,t):o.push(t))}if(!this._do_not_flush){do{if((t=this._decoder.handler(u,u.read()))===c)break;null!==t&&(Array.isArray(t)?o.push.apply(o,t):o.push(t))}while(!u.endOfStream());this._decoder=null}return function(n){return l=["UTF-8","UTF-16LE","UTF-16BE"],e=this._encoding.name,!(-1!==l.indexOf(e))||this._ignoreBOM||this._BOMseen||(n.length>0&&65279===n[0]?(this._BOMseen=!0,n.shift()):n.length>0&&(this._BOMseen=!0)),function(n){for(var l="",e=0;e<n.length;++e){var t=n[e];t<=65535?l+=String.fromCharCode(t):(t-=65536,l+=String.fromCharCode(55296+(t>>10),56320+(1023&t)))}return l}(n);var l,e}.call(this,o)},Object.defineProperty&&Object.defineProperty(_.prototype,"encoding",{get:function(){return this._encoding.name.toLowerCase()}}),_.prototype.encode=function(n,l){n=void 0===n?"":String(n),l=r(l),this._do_not_flush||(this._encoder=v[this._encoding.name]({fatal:"fatal"===this._fatal})),this._do_not_flush=Boolean(l.stream);for(var e,t=new a(function(n){for(var l=String(n),e=l.length,t=0,u=[];t<e;){var r=l.charCodeAt(t);if(r<55296||r>57343)u.push(r);else if(56320<=r&&r<=57343)u.push(65533);else if(55296<=r&&r<=56319)if(t===e-1)u.push(65533);else{var o=l.charCodeAt(t+1);if(56320<=o&&o<=57343){var i=1023&r,s=1023&o;u.push(65536+(i<<10)+s),t+=1}else u.push(65533)}t+=1}return u}(n)),u=[];;){var o=t.read();if(o===s)break;if((e=this._encoder.handler(t,o))===c)break;Array.isArray(e)?u.push.apply(u,e):u.push(e)}if(!this._do_not_flush){for(;(e=this._encoder.handler(t,t.read()))!==c;)Array.isArray(e)?u.push.apply(u,e):u.push(e);this._encoder=null}return new Uint8Array(u)},v["UTF-8"]=function(n){return new x(n)},w["UTF-8"]=function(n){return new k(n)},"encoding-indexes"in e&&p.forEach((function(n){"Legacy single-byte encodings"===n.heading&&n.encodings.forEach((function(n){var l=n.name,e=C(l.toLowerCase());w[l]=function(n){return new T(e,n)},v[l]=function(n){return new P(e,n)}}))})),w.GBK=function(n){return new I(n)},v.GBK=function(n){return new A(n,!0)},v.gb18030=function(n){return new A(n)},w.gb18030=function(n){return new I(n)},v.Big5=function(n){return new R(n)},w.Big5=function(n){return new O(n)},v["EUC-JP"]=function(n){return new L(n)},w["EUC-JP"]=function(n){return new F(n)},v["ISO-2022-JP"]=function(n){return new j(n)},w["ISO-2022-JP"]=function(n){return new $(n)},v.Shift_JIS=function(n){return new N(n)},w.Shift_JIS=function(n){return new M(n)},v["EUC-KR"]=function(n){return new H(n)},w["EUC-KR"]=function(n){return new B(n)},v["UTF-16BE"]=function(n){return new W(!0,n)},w["UTF-16BE"]=function(n){return new q(!0,n)},v["UTF-16LE"]=function(n){return new W(!1,n)},w["UTF-16LE"]=function(n){return new q(!1,n)},v["x-user-defined"]=function(n){return new V(n)},w["x-user-defined"]=function(n){return new z(n)},e.TextEncoder||(e.TextEncoder=_),e.TextDecoder||(e.TextDecoder=E),void 0!==l&&l.exports&&(l.exports={TextEncoder:e.TextEncoder,TextDecoder:e.TextDecoder,EncodingIndexes:e["encoding-indexes"]})}(this||{})},{"./encoding-indexes.js":34}],36:[function(n,l,e){l.exports=Array.isArray||function(n){return"[object Array]"==Object.prototype.toString.call(n)}},{}],37:[function(n,l,e){function t(n){return!n||"object"!=typeof n&&"function"!=typeof n}l.exports=function n(){var l=[].slice.call(arguments),e=!1;"boolean"==typeof l[0]&&(e=l.shift());var u,r=l[0];if(t(r))throw new Error("extendee must be an object");for(var o=l.slice(1),i=o.length,s=0;s<i;s++){var a=o[s];for(var c in a)if(Object.prototype.hasOwnProperty.call(a,c)){var d=a[c];if(e&&(u=d,Array.isArray(u)||"[object Object]"=={}.toString.call(u))){var h=Array.isArray(d)?[]:{};r[c]=n(!0,Object.prototype.hasOwnProperty.call(r,c)&&!t(r[c])?r[c]:h,d)}else r[c]=d}}return r}},{}],38:[function(n,l,e){var t=n("isarray");l.exports=f,l.exports.parse=r,l.exports.compile=function(n,l){return i(r(n,l),l)},l.exports.tokensToFunction=i,l.exports.tokensToRegExp=h;var u=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function r(n,l){for(var e,t=[],r=0,o=0,i="",c=l&&l.delimiter||"/";null!=(e=u.exec(n));){var d=e[0],h=e[1],f=e.index;if(i+=n.slice(o,f),o=f+d.length,h)i+=h[1];else{var p=n[o],m=e[2],g=e[3],y=e[4],v=e[5],w=e[6],b=e[7];i&&(t.push(i),i="");var S=null!=m&&null!=p&&p!==m,C="+"===w||"*"===w,D="?"===w||"*"===w,E=e[2]||c,_=y||v;t.push({name:g||r++,prefix:m||"",delimiter:E,optional:D,repeat:C,partial:S,asterisk:!!b,pattern:_?a(_):b?".*":"[^"+s(E)+"]+?"})}}return o<n.length&&(i+=n.substr(o)),i&&t.push(i),t}function o(n){return encodeURI(n).replace(/[\/?#]/g,(function(n){return"%"+n.charCodeAt(0).toString(16).toUpperCase()}))}function i(n,l){for(var e=new Array(n.length),u=0;u<n.length;u++)"object"==typeof n[u]&&(e[u]=new RegExp("^(?:"+n[u].pattern+")$",d(l)));return function(l,u){for(var r="",i=l||{},s=(u||{}).pretty?o:encodeURIComponent,a=0;a<n.length;a++){var c=n[a];if("string"!=typeof c){var d,h=i[c.name];if(null==h){if(c.optional){c.partial&&(r+=c.prefix);continue}throw new TypeError('Expected "'+c.name+'" to be defined')}if(t(h)){if(!c.repeat)throw new TypeError('Expected "'+c.name+'" to not repeat, but received `'+JSON.stringify(h)+"`");if(0===h.length){if(c.optional)continue;throw new TypeError('Expected "'+c.name+'" to not be empty')}for(var f=0;f<h.length;f++){if(d=s(h[f]),!e[a].test(d))throw new TypeError('Expected all "'+c.name+'" to match "'+c.pattern+'", but received `'+JSON.stringify(d)+"`");r+=(0===f?c.prefix:c.delimiter)+d}}else{if(d=c.asterisk?encodeURI(h).replace(/[?#]/g,(function(n){return"%"+n.charCodeAt(0).toString(16).toUpperCase()})):s(h),!e[a].test(d))throw new TypeError('Expected "'+c.name+'" to match "'+c.pattern+'", but received "'+d+'"');r+=c.prefix+d}}else r+=c}return r}}function s(n){return n.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function a(n){return n.replace(/([=!:$\/()])/g,"\\$1")}function c(n,l){return n.keys=l,n}function d(n){return n&&n.sensitive?"":"i"}function h(n,l,e){t(l)||(e=l||e,l=[]);for(var u=(e=e||{}).strict,r=!1!==e.end,o="",i=0;i<n.length;i++){var a=n[i];if("string"==typeof a)o+=s(a);else{var h=s(a.prefix),f="(?:"+a.pattern+")";l.push(a),a.repeat&&(f+="(?:"+h+f+")*"),o+=f=a.optional?a.partial?h+"("+f+")?":"(?:"+h+"("+f+"))?":h+"("+f+")"}}var p=s(e.delimiter||"/"),m=o.slice(-p.length)===p;return u||(o=(m?o.slice(0,-p.length):o)+"(?:"+p+"(?=$))?"),o+=r?"$":u&&m?"":"(?="+p+"|$)",c(new RegExp("^"+o,d(e)),l)}function f(n,l,e){return t(l)||(e=l||e,l=[]),e=e||{},n instanceof RegExp?function(n,l){var e=n.source.match(/\((?!\?)/g);if(e)for(var t=0;t<e.length;t++)l.push({name:t,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return c(n,l)}(n,l):t(n)?function(n,l,e){for(var t=[],u=0;u<n.length;u++)t.push(f(n[u],l,e).source);return c(new RegExp("(?:"+t.join("|")+")",d(e)),l)}(n,l,e):function(n,l,e){return h(r(n,e),l,e)}(n,l,e)}},{isarray:36}],39:[function(n,l,e){!function(n,t){"object"==typeof e&&void 0!==l?l.exports=t():n.typeDetect=t()}(this,(function(){"use strict";var n="function"==typeof Promise,l="object"==typeof self?self:global,e="undefined"!=typeof Symbol,t="undefined"!=typeof Map,u="undefined"!=typeof Set,r="undefined"!=typeof WeakMap,o="undefined"!=typeof WeakSet,i="undefined"!=typeof DataView,s=e&&void 0!==Symbol.iterator,a=e&&void 0!==Symbol.toStringTag,c=u&&"function"==typeof Set.prototype.entries,d=t&&"function"==typeof Map.prototype.entries,h=c&&Object.getPrototypeOf((new Set).entries()),f=d&&Object.getPrototypeOf((new Map).entries()),p=s&&"function"==typeof Array.prototype[Symbol.iterator],m=p&&Object.getPrototypeOf([][Symbol.iterator]()),g=s&&"function"==typeof String.prototype[Symbol.iterator],y=g&&Object.getPrototypeOf(""[Symbol.iterator]());return function(e){var s=typeof e;if("object"!==s)return s;if(null===e)return"null";if(e===l)return"global";if(Array.isArray(e)&&(!1===a||!(Symbol.toStringTag in e)))return"Array";if("object"==typeof window&&null!==window){if("object"==typeof window.location&&e===window.location)return"Location";if("object"==typeof window.document&&e===window.document)return"Document";if("object"==typeof window.navigator){if("object"==typeof window.navigator.mimeTypes&&e===window.navigator.mimeTypes)return"MimeTypeArray";if("object"==typeof window.navigator.plugins&&e===window.navigator.plugins)return"PluginArray"}if(("function"==typeof window.HTMLElement||"object"==typeof window.HTMLElement)&&e instanceof window.HTMLElement){if("BLOCKQUOTE"===e.tagName)return"HTMLQuoteElement";if("TD"===e.tagName)return"HTMLTableDataCellElement";if("TH"===e.tagName)return"HTMLTableHeaderCellElement"}}var c=a&&e[Symbol.toStringTag];if("string"==typeof c)return c;var d=Object.getPrototypeOf(e);return d===RegExp.prototype?"RegExp":d===Date.prototype?"Date":n&&d===Promise.prototype?"Promise":u&&d===Set.prototype?"Set":t&&d===Map.prototype?"Map":o&&d===WeakSet.prototype?"WeakSet":r&&d===WeakMap.prototype?"WeakMap":i&&d===DataView.prototype?"DataView":t&&d===f?"Map Iterator":u&&d===h?"Set Iterator":p&&d===m?"Array Iterator":g&&d===y?"String Iterator":null===d?"Object":Object.prototype.toString.call(e).slice(8,-1)}}))},{}],40:[function(n,l,e){"function"==typeof Object.create?l.exports=function(n,l){n.super_=l,n.prototype=Object.create(l.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}})}:l.exports=function(n,l){n.super_=l;var e=function(){};e.prototype=l.prototype,n.prototype=new e,n.prototype.constructor=n}},{}],41:[function(n,l,e){l.exports=function(n){return n&&"object"==typeof n&&"function"==typeof n.copy&&"function"==typeof n.fill&&"function"==typeof n.readUInt8}},{}],42:[function(n,l,e){var t=/%[sdj%]/g;e.format=function(n){if(!g(n)){for(var l=[],e=0;e<arguments.length;e++)l.push(o(arguments[e]));return l.join(" ")}e=1;for(var u=arguments,r=u.length,i=String(n).replace(t,(function(n){if("%%"===n)return"%";if(e>=r)return n;switch(n){case"%s":return String(u[e++]);case"%d":return Number(u[e++]);case"%j":try{return JSON.stringify(u[e++])}catch(n){return"[Circular]"}default:return n}})),s=u[e];e<r;s=u[++e])p(s)||!w(s)?i+=" "+s:i+=" "+o(s);return i},e.deprecate=function(n,l){if(y(global.process))return function(){return e.deprecate(n,l).apply(this,arguments)};if(!0===process.noDeprecation)return n;var t=!1;return function(){if(!t){if(process.throwDeprecation)throw new Error(l);process.traceDeprecation?console.trace(l):console.error(l),t=!0}return n.apply(this,arguments)}};var u,r={};function o(n,l){var t={seen:[],stylize:s};return arguments.length>=3&&(t.depth=arguments[2]),arguments.length>=4&&(t.colors=arguments[3]),f(l)?t.showHidden=l:l&&e._extend(t,l),y(t.showHidden)&&(t.showHidden=!1),y(t.depth)&&(t.depth=2),y(t.colors)&&(t.colors=!1),y(t.customInspect)&&(t.customInspect=!0),t.colors&&(t.stylize=i),a(t,n,t.depth)}function i(n,l){var e=o.styles[l];return e?"["+o.colors[e][0]+"m"+n+"["+o.colors[e][1]+"m":n}function s(n,l){return n}function a(n,l,t){if(n.customInspect&&l&&C(l.inspect)&&l.inspect!==e.inspect&&(!l.constructor||l.constructor.prototype!==l)){var u=l.inspect(t,n);return g(u)||(u=a(n,u,t)),u}var r=function(n,l){if(y(l))return n.stylize("undefined","undefined");if(g(l)){var e="'"+JSON.stringify(l).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return n.stylize(e,"string")}return m(l)?n.stylize(""+l,"number"):f(l)?n.stylize(""+l,"boolean"):p(l)?n.stylize("null","null"):void 0}(n,l);if(r)return r;var o=Object.keys(l),i=function(n){var l={};return n.forEach((function(n,e){l[n]=!0})),l}(o);if(n.showHidden&&(o=Object.getOwnPropertyNames(l)),S(l)&&(o.indexOf("message")>=0||o.indexOf("description")>=0))return c(l);if(0===o.length){if(C(l)){var s=l.name?": "+l.name:"";return n.stylize("[Function"+s+"]","special")}if(v(l))return n.stylize(RegExp.prototype.toString.call(l),"regexp");if(b(l))return n.stylize(Date.prototype.toString.call(l),"date");if(S(l))return c(l)}var w,D="",E=!1,_=["{","}"];return h(l)&&(E=!0,_=["[","]"]),C(l)&&(D=" [Function"+(l.name?": "+l.name:"")+"]"),v(l)&&(D=" "+RegExp.prototype.toString.call(l)),b(l)&&(D=" "+Date.prototype.toUTCString.call(l)),S(l)&&(D=" "+c(l)),0!==o.length||E&&0!=l.length?t<0?v(l)?n.stylize(RegExp.prototype.toString.call(l),"regexp"):n.stylize("[Object]","special"):(n.seen.push(l),w=E?function(n,l,e,t,u){for(var r=[],o=0,i=l.length;o<i;++o)k(l,String(o))?r.push(d(n,l,e,t,String(o),!0)):r.push("");return u.forEach((function(u){u.match(/^\d+$/)||r.push(d(n,l,e,t,u,!0))})),r}(n,l,t,i,o):o.map((function(e){return d(n,l,t,i,e,E)})),n.seen.pop(),function(n,l,e){return n.reduce((function(n,l){return l.indexOf("\n"),n+l.replace(/\u001b\[\d\d?m/g,"").length+1}),0)>60?e[0]+(""===l?"":l+"\n ")+" "+n.join(",\n  ")+" "+e[1]:e[0]+l+" "+n.join(", ")+" "+e[1]}(w,D,_)):_[0]+D+_[1]}function c(n){return"["+Error.prototype.toString.call(n)+"]"}function d(n,l,e,t,u,r){var o,i,s;if((s=Object.getOwnPropertyDescriptor(l,u)||{value:l[u]}).get?i=s.set?n.stylize("[Getter/Setter]","special"):n.stylize("[Getter]","special"):s.set&&(i=n.stylize("[Setter]","special")),k(t,u)||(o="["+u+"]"),i||(n.seen.indexOf(s.value)<0?(i=p(e)?a(n,s.value,null):a(n,s.value,e-1)).indexOf("\n")>-1&&(i=r?i.split("\n").map((function(n){return"  "+n})).join("\n").substr(2):"\n"+i.split("\n").map((function(n){return"   "+n})).join("\n")):i=n.stylize("[Circular]","special")),y(o)){if(r&&u.match(/^\d+$/))return i;(o=JSON.stringify(""+u)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(o=o.substr(1,o.length-2),o=n.stylize(o,"name")):(o=o.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),o=n.stylize(o,"string"))}return o+": "+i}function h(n){return Array.isArray(n)}function f(n){return"boolean"==typeof n}function p(n){return null===n}function m(n){return"number"==typeof n}function g(n){return"string"==typeof n}function y(n){return void 0===n}function v(n){return w(n)&&"[object RegExp]"===D(n)}function w(n){return"object"==typeof n&&null!==n}function b(n){return w(n)&&"[object Date]"===D(n)}function S(n){return w(n)&&("[object Error]"===D(n)||n instanceof Error)}function C(n){return"function"==typeof n}function D(n){return Object.prototype.toString.call(n)}function E(n){return n<10?"0"+n.toString(10):n.toString(10)}e.debuglog=function(n){if(y(u)&&(u=process.env.NODE_DEBUG||""),n=n.toUpperCase(),!r[n])if(new RegExp("\\b"+n+"\\b","i").test(u)){var l=process.pid;r[n]=function(){var t=e.format.apply(e,arguments);console.error("%s %d: %s",n,l,t)}}else r[n]=function(){};return r[n]},e.inspect=o,o.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},o.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},e.isArray=h,e.isBoolean=f,e.isNull=p,e.isNullOrUndefined=function(n){return null==n},e.isNumber=m,e.isString=g,e.isSymbol=function(n){return"symbol"==typeof n},e.isUndefined=y,e.isRegExp=v,e.isObject=w,e.isDate=b,e.isError=S,e.isFunction=C,e.isPrimitive=function(n){return null===n||"boolean"==typeof n||"number"==typeof n||"string"==typeof n||"symbol"==typeof n||void 0===n},e.isBuffer=n("./support/isBuffer");var _=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function k(n,l){return Object.prototype.hasOwnProperty.call(n,l)}e.log=function(){var n,l;console.log("%s - %s",(n=new Date,l=[E(n.getHours()),E(n.getMinutes()),E(n.getSeconds())].join(":"),[n.getDate(),_[n.getMonth()],l].join(" ")),e.format.apply(e,arguments))},e.inherits=n("inherits"),e._extend=function(n,l){if(!l||!w(l))return n;for(var e=Object.keys(l),t=e.length;t--;)n[e[t]]=l[e[t]];return n}},{"./support/isBuffer":41,inherits:40}]},{},[12])(12)},6539:n=>{function l(n){var l=new Error("Cannot find module '"+n+"'");throw l.code="MODULE_NOT_FOUND",l}l.keys=()=>[],l.resolve=l,l.id=6539,n.exports=l},5157:(n,l,e)=>{if(!globalThis.DOMException)try{const{MessageChannel:n}=e(8167),l=(new n).port1,t=new ArrayBuffer;l.postMessage(t,[t,t])}catch(n){"DOMException"===n.constructor.name&&(globalThis.DOMException=n.constructor)}n.exports=globalThis.DOMException},8289:(n,l,e)=>{var t=e(2613).ok;function u(n){return new Error("getopt: "+n)}function r(n,l,e){var u;for(t(n||""===n,"optstring is required"),t(n.constructor===String,"optstring must be a string"),t(l,"argv is required"),t(l.constructor===Array,"argv must be an array"),this.gop_argv=new Array(l.length),this.gop_options={},this.gop_aliases={},this.gop_optind=void 0!==e?e:2,this.gop_subind=0,u=0;u<l.length;u++)t(l[u].constructor===String,"argv must be string array"),this.gop_argv[u]=l[u];this.parseOptstr(n)}l.BasicParser=r,r.prototype.parseOptstr=function(n){var l,e,t,r,o;for(o=0,n.length>0&&":"==n[0]?(this.gop_silent=!0,o++):this.gop_silent=!1;o<n.length;){if(l=n[o],r=!1,!/^[\w\d\u1000-\u1100]$/.test(l))throw u("invalid optstring: only alphanumeric characters and unicode characters between \\u1000-\\u1100 may be used as options: "+l);for(o+1<n.length&&":"==n[o+1]&&(r=!0,o++),this.gop_options[l]=r;o+1<n.length&&"("==n[o+1];){if(o++,-1==(e=n.indexOf(")",o+1)))throw u('invalid optstring: missing ")" to match "(" at char '+o);t=n.substring(o+1,e),this.gop_aliases[t]=l,o=e}o++}},r.prototype.optind=function(){return this.gop_optind},r.prototype.getopt=function(){if(!(this.gop_optind>=this.gop_argv.length)){var n=this.gop_argv[this.gop_optind];if(0===this.gop_subind){if("-"==n||""===n||"-"!=n[0])return;if("--"==n)return this.gop_optind++,void(this.gop_subind=0);if("-"==n[1])return this.getoptLong();this.gop_subind++,t(this.gop_subind<n.length)}return this.getoptShort()}},r.prototype.getoptShort=function(){var n,l;return t(this.gop_optind<this.gop_argv.length),n=this.gop_argv[this.gop_optind],t(this.gop_subind<n.length),l=n[this.gop_subind],++this.gop_subind>=n.length&&(this.gop_optind++,this.gop_subind=0),l in this.gop_options?this.gop_options[l]?this.getoptArgument(l):{option:l}:this.errInvalidOption(l)},r.prototype.getoptLong=function(){var n,l,e,u;return t(0===this.gop_subind),t(this.gop_optind<this.gop_argv.length),n=this.gop_argv[this.gop_optind],t(n.length>2&&"-"==n[0]&&"-"==n[1]),u=n.indexOf("="),(l=n.substring(2,-1==u?n.length:u))in this.gop_aliases?(e=this.gop_aliases[l],t(e in this.gop_options),this.gop_options[e]?(-1==u?this.gop_optind++:this.gop_subind=u+1,this.getoptArgument(e)):-1!=u?this.errExtraArg(l):(this.gop_optind++,{option:e})):this.errInvalidOption(l)},r.prototype.getoptArgument=function(n){var l;return this.gop_optind>=this.gop_argv.length?this.errMissingArg(n):(l=this.gop_argv[this.gop_optind].substring(this.gop_subind),this.gop_optind++,this.gop_subind=0,{option:n,optarg:l})},r.prototype.errMissingArg=function(n){return this.gop_silent?{option:":",optopt:n}:(process.stderr.write("option requires an argument -- "+n+"\n"),{option:"?",optopt:n,error:!0})},r.prototype.errInvalidOption=function(n){return this.gop_silent||process.stderr.write("illegal option -- "+n+"\n"),{option:"?",optopt:n,error:!0}},r.prototype.errExtraArg=function(n){return this.gop_silent||process.stderr.write("option expects no argument -- "+n+"\n"),{option:"?",optopt:n,error:!0}}},9142:(n,l,e)=>{"use strict";e.r(l),e.d(l,{default:()=>t});const t='## SSH tips\n\nSSH is powerful and flexible, but this also adds some setup complexity. This section includes some tips and tricks for getting the Remote - SSH extension up and running in different environments.\n\n### Configuring the $EDITOR variable\n\nFor macOS / linux remote hosts, add this snippet to your shell configuration file (like `.bashrc` or `.zshrc`)\n\n```bash\nif [ "$VSCODE_INJECTION" = "1" ]; then\n    export EDITOR="code --wait" # or \'code-insiders\' if you\'re using VS Code Insiders\nfi\n```\n\nFor Windows hosts, here is the equivalent Powershell:\n\n```pwsh\nif ($env:VSCODE_INJECTION -eq "1") {\n    $env:EDITOR = "code --wait"  # or \'code-insiders\' for VS Code Insiders\n}\n```\n\nNow running a terminal command that uses the $EDITOR variable, like `git commit`, will open the file in VS Code instead of the default terminal-based editor (like `vim` or `nano`).\n\n### Configuring key based authentication\n\n[SSH public key authentication](https://www.ssh.com/ssh/public-key-authentication) is a convenient, high security authentication method that combines a local "private" key with a "public" key that you associate with your user account on an SSH host. This section will walk you through how to generate these keys and add them to a host.\n\n> **Tip:** PuTTY for Windows is not a [supported client](#installing-a-supported-ssh-client), but you can [convert your PuTTYGen keys](#reusing-a-key-generated-in-puttygen).\n\n### Quick start: Using SSH keys\n\nTo set up SSH key based authentication for your remote host. First we\'ll create a key pair and then copy the public key to the host.\n\n**Create your local SSH key pair**\n\nCheck to see if you already have an SSH key on your **local** machine. This is typically located at `~/.ssh/id_ed25519.pub` on macOS / Linux, and the `.ssh` directory in your user profile folder on Windows (for example `C:\\Users\\your-user\\.ssh\\id_ed25519.pub`).\n\nIf you do not have a key, run the following command in a **local** terminal / PowerShell to generate an SSH key pair:\n\n```bash\nssh-keygen -t ed25519 -b 4096\n```\n\n> **Tip:** Don\'t have `ssh-keygen`? Install [a supported SSH client](#installing-a-supported-ssh-client).\n\n**Restrict the permissions on the private key file**\n\n-   For macOS / Linux, run the following shell command, replacing the path to your private key if necessary:\n\n    ```bash\n    chmod 400 ~/.ssh/id_ed25519\n    ```\n\n-   For Windows, run the following command in PowerShell to grant explicit read access to your username:\n\n    ```powershell\n    icacls "privateKeyPath" /grant <username>:R\n    ```\n\n    Then navigate to the private key file in Windows Explorer, right-click and select **Properties**. Select the **Security** tab > **Advanced** > **Disable inheritance** > **Remove all inherited permissions from this object**.\n\n**Authorize your macOS or Linux machine to connect**\n\nRun one of the following commands, in a **local terminal window** replacing user and host name as appropriate to copy your local public key to the SSH host.\n\n-   Connecting to a **macOS or Linux** SSH host:\n\n    ```bash\n    export USER_AT_HOST="your-user-name-on-host@hostname"\n    export PUBKEYPATH="$HOME/.ssh/id_ed25519.pub"\n\n    ssh-copy-id -i "$PUBKEYPATH" "$USER_AT_HOST"\n    ```\n\n-   Connecting to a **Windows** SSH host:\n\n    -   The host uses OpenSSH Server and the user [belongs to the administrator group](https://learn.microsoft.com/en-us/windows-server/administration/openssh/openssh_server_configuration#authorizedkeysfile):\n\n        ```bash\n        export USER_AT_HOST="your-user-name-on-host@hostname"\n        export PUBKEYPATH="$HOME/.ssh/id_ed25519.pub"\n\n        ssh $USER_AT_HOST "powershell Add-Content -Force -Path \\"\\$Env:PROGRAMDATA\\\\ssh\\\\administrators_authorized_keys\\" -Value \'$(tr -d \'\\n\\r\' < "$PUBKEYPATH")\'"\n        ```\n\n    -   Otherwise:\n\n        ```bash\n        export USER_AT_HOST="your-user-name-on-host@hostname"\n        export PUBKEYPATH="$HOME/.ssh/id_ed25519.pub"\n\n        ssh $USER_AT_HOST "powershell New-Item -Force -ItemType Directory -Path \\"\\$HOME\\\\.ssh\\"; Add-Content -Force -Path \\"\\$HOME\\\\.ssh\\\\authorized_keys\\" -Value \'$(tr -d \'\\n\\r\' < "$PUBKEYPATH")\'"\n        ```\n\n        You may want to validate that the `authorized_keys` file in the `.ssh` folder for your **remote user on the SSH host** is owned by you and no other user has permission to access it. See the [OpenSSH wiki](https://github.com/PowerShell/Win32-OpenSSH/wiki/Security-protection-of-various-files-in-Win32-OpenSSH#authorized_keys) for details.\n\n**Authorize your Windows machine to connect**\n\nRun one of the following commands, in a **local PowerShell** window replacing user and host name as appropriate to copy your local public key to the SSH host.\n\n-   Connecting to a **macOS or Linux** SSH host:\n\n    ```powershell\n    $USER_AT_HOST="your-user-name-on-host@hostname"\n    $PUBKEYPATH="$HOME\\.ssh\\id_ed25519.pub"\n\n    $pubKey=(Get-Content "$PUBKEYPATH" | Out-String); ssh "$USER_AT_HOST" "mkdir -p ~/.ssh && chmod 700 ~/.ssh && echo \'${pubKey}\' >> ~/.ssh/authorized_keys && chmod 600 ~/.ssh/authorized_keys"\n    ```\n\n-   Connecting to a **Windows** SSH host:\n\n    -   The host uses OpenSSH Server and the user [belongs to the administrator group](https://learn.microsoft.com/en-us/windows-server/administration/openssh/openssh_server_configuration#authorizedkeysfile):\n\n        ```powershell\n        $USER_AT_HOST="your-user-name-on-host@hostname"\n        $PUBKEYPATH="$HOME\\.ssh\\id_ed25519.pub"\n\n        Get-Content "$PUBKEYPATH" | Out-String | ssh $USER_AT_HOST "powershell `"Add-Content -Force -Path `"`$Env:PROGRAMDATA\\ssh\\administrators_authorized_keys`" `""\n        ```\n\n    -   Otherwise:\n\n        ```powershell\n        $USER_AT_HOST="your-user-name-on-host@hostname"\n        $PUBKEYPATH="$HOME\\.ssh\\id_ed25519.pub"\n\n        Get-Content "$PUBKEYPATH" | Out-String | ssh $USER_AT_HOST "powershell `"New-Item -Force -ItemType Directory -Path `"`$HOME\\.ssh`"; Add-Content -Force -Path `"`$HOME\\.ssh\\authorized_keys`" `""\n        ```\n\n        Validate that the `authorized_keys` file in the `.ssh` folder for your **remote user on the SSH host** is owned by you and no other user has permission to access it. See the [OpenSSH wiki](https://github.com/PowerShell/Win32-OpenSSH/wiki/Security-protection-of-various-files-in-Win32-OpenSSH#authorized_keys) for details.\n\n### Improving your security with a dedicated key\n\nWhile using a single SSH key across all your SSH hosts can be convenient, if anyone gains access to your private key, they will have access to all of your hosts as well. You can prevent this by creating a separate SSH key for your development hosts. Just follow these steps:\n\n1. Generate a separate SSH key in a different file.\n\n    **macOS / Linux**: Run the following command in a **local terminal**:\n\n    ```bash\n    ssh-keygen -t ed25519 -f ~/.ssh/id_ed25519-remote-ssh\n    ```\n\n    **Windows**: Run the following command in a **local PowerShell**:\n\n    ```powershell\n    ssh-keygen -t ed25519 -f "$HOME\\.ssh\\id_ed25519-remote-ssh"\n    ```\n\n2. Follow the same steps in the [quick start](#quick-start-using-ssh-keys) to authorize the key on the SSH host, but set the `PUBKEYPATH` to the `id_ed25519-remote-ssh.pub` file instead.\n\n3. In VS Code, run **Remote-SSH: Open Configuration File...** in the Command Palette (`kbstyle(F1)`), select an SSH config file, and add (or modify) a host entry as follows:\n\n    ```yaml\n    Host name-of-ssh-host-here\n    User your-user-name-on-host\n    HostName host-fqdn-or-ip-goes-here\n    IdentityFile ~/.ssh/id_ed25519-remote-ssh\n    ```\n\n    > **Tip:** You can use `/` for Windows paths as well. If you use `\\` you will need to use two slashes. For example, `C:\\\\path\\\\to\\\\my\\\\id_ed25519`.\n\n### Reusing a key generated in PuTTYGen\n\nIf you used PuTTYGen to set up SSH public key authentication for the host you are connecting to, you need to convert your private key so that other SSH clients can use it. To do this:\n\n1. Open PuTTYGen **locally** and load the private key you want to convert.\n2. Select **Conversions > Export OpenSSH key** from the application menu. Save the converted key to a **local** location under the`.ssh` directory in your user profile folder (for example `C:\\Users\\youruser\\.ssh`).\n3. Validate that this new **local** file is owned by you and no other user has permissions to access it.\n4. In VS Code, run **Remote-SSH: Open Configuration File...** in the Command Palette (`kbstyle(F1)`), select the SSH config file you want to change, and add (or modify) a host entry in the config file as follows to point to the file:\n\n    ```yaml\n    Host name-of-ssh-host-here\n    User your-user-name-on-host\n    HostName host-fqdn-or-ip-goes-here\n    IdentityFile ~/.ssh/exported-keyfile-from-putty\n    ```\n\n### Improving security on multi-user servers\n\nThe Remote - SSH extension installs and maintains the "VS Code Server". The server is started with a randomly generated key, and any new connection to the server needs to provide the key. The key is stored on the remote\'s disk, readable only by the current user. There is one HTTP path that is available without authentication at `/version`.\n\nBy default, the server listens to `localhost` on a random TCP port that is then forwarded to your local machine. If you are connecting to a **Linux or macOS** host, you can switch to using Unix sockets that are locked down to a particular user. This socket is then forwarded instead of the port.\n\n> **Note:** This setting **disables connection multiplexing** so configuring [public key authentication](#configuring-key-based-authentication) is recommended.\n\nTo configure it:\n\n1. Ensure you have a **local OpenSSH 6.7+ SSH client** on Windows, macOS, or Linux and an **OpenSSH 6.7+ Linux or macOS Host** (Windows does not support this mode).\n\n2. Switch Remote - SSH into socket mode by enabling **Remote.SSH: Remote Server Listen On Socket** in your **local** VS Code [User settings](/docs/getstarted/settings.md).\n\n    ![Listen on socket VS Code setting](images/ssh/ssh-listen-on-socket.png)\n\n3. If you\'ve already connected to the SSH Host, select **Remote-SSH: Kill VS Code Server on Host...** from the Command Palette (`kbstyle(F1)`) so the setting takes effect.\n\nIf you encounter an error when connecting, you may need to enable socket forwarding on your SSH Host\'s [sshd config](https://www.ssh.com/ssh/sshd_config/). To do so:\n\n1. Open `/etc/ssh/sshd_config` in a text editor (like vi, nano, or pico) on the **SSH host** (not locally).\n2. Add the setting `AllowStreamLocalForwarding yes`.\n3. Restart the SSH server. (On Ubuntu, run `sudo systemctl restart sshd`.).\n4. Retry.\n\n### Troubleshooting hanging or failing connections\n\nIf you are running into problems with VS Code hanging while trying to connect (and potentially timing out), there are a few things you can do to try to resolve the issue.\n\n**General troubleshooting: Remove the server**\n\nOne command helpful to troubleshoot a variety of Remote-SSH issues is **Remote-SSH: Kill VS Code Server on Host**. This will remove the server, which can fix a wide range of issues and error messages you may see, such as "Could not establish connection to `server_name`: The VS Code Server failed to start."\n\n**See if VS Code is waiting on a prompt**\n\nEnable the `remote.SSH.showLoginTerminal` [setting](/docs/getstarted/settings.md) in VS Code and retry. If you are prompted to input a password or token, see [Enabling alternate SSH authentication methods](#enabling-alternate-ssh-authentication-methods) for details on reducing the frequency of prompts.\n\nIf you are still having trouble, set the following properties in `settings.json` and retry:\n\n```json\n"remote.SSH.showLoginTerminal": true,\n"remote.SSH.useLocalServer": false\n```\n\n**Work around a bug with some versions of Windows OpenSSH server**\n\nDue to a bug in certain versions of OpenSSH server for Windows, the default check to determine if the host is running Windows may not work properly. This does not occur with OpenSSH server that ships with Windows 1909 and below.\n\nFortunately, you can work around this problem by specifically telling VS Code if your SSH host is running Windows by adding the following to `settings.json`:\n\n```json\n"remote.SSH.useLocalServer": false\n```\n\nYou can also force VS Code to identify a particular host as Windows using the following property:\n\n```json\n"remote.SSH.remotePlatform": {\n    "host-in-ssh-config-or-fqdn": "windows"\n}\n```\n\nA fix has been merged so this problem should be resolved in a version of the server greater than 8.1.0.0.\n\n**Enable TCP Forwarding on the remote host**\n\nRemote - SSH extension makes use of an SSH tunnel to facilitate communication with the host. In some cases, this may be disabled on your SSH server. To see if this is the problem, open the **Remote - SSH** category in the output window and check for the following message:\n\n```\nopen failed: administratively prohibited: open failed\n```\n\nIf you do see that message, follow these steps to update your SSH server\'s [sshd config](https://www.ssh.com/ssh/sshd_config/):\n\n1. Open `/etc/ssh/sshd_config` or `C:\\ProgramData\\ssh\\sshd_config` in a text editor (like Vim, nano, Pico, or Notepad) on the **SSH host** (not locally).\n2. Add the setting `AllowTcpForwarding yes`.\n3. Restart the SSH server. (On Ubuntu, run `sudo systemctl restart sshd`. On Windows, in an admin PowerShell run, `Restart-Service sshd`).\n4. Retry.\n\n**Set the ProxyCommand parameter in your SSH config file**\n\nIf you are behind a proxy and are unable to connect to your SSH host, you may need to use the `ProxyCommand` parameter for your host in a **local** [SSH config file](https://linux.die.net/man/5/ssh_config). You can read this [SSH ProxyCommand article](https://www.cyberciti.biz/faq/linux-unix-ssh-proxycommand-passing-through-one-host-gateway-server/) for an example of its use.\n\n**Ensure the remote machine has internet access**\n\nThe remote machine must have internet access to be able to download the VS Code Server and extensions from the Marketplace. See the [FAQ for details](/docs/remote/faq.md#what-are-the-connectivity-requirements-for-vs-code-server) on connectivity requirements.\n\n**Set HTTP_PROXY / HTTPS_PROXY on the remote host**\n\nIf your remote host is behind a proxy, you may need to set the HTTP_PROXY or HTTPS_PROXY environment variable on the **SSH host**. Open your `~/.bashrc` file add the following (replacing `proxy.fqdn.or.ip:3128` with the appropriate hostname / IP and port):\n\n```bash\nexport HTTP_PROXY=http://proxy.fqdn.or.ip:3128\nexport HTTPS_PROXY=$HTTP_PROXY\n\n# Or if an authenticated proxy\nexport HTTP_PROXY=http://username:password@proxy.fqdn.or.ip:3128\nexport HTTPS_PROXY=$HTTP_PROXY\n```\n\n**Work around `/tmp` mounted with `noexec`**\n\nSome remote servers are set up to disallow executing scripts from `/tmp`. VS Code writes its install script to the system temp directory and tries to execute it from there. You can work with your system administrator to determine whether this can be worked around.\n\n**Check whether a different shell is launched during install**\n\nSome users launch a different shell from their `.bash_profile` or other startup script on their **SSH host** because they want to use a different shell than the default. This can break VS Code\'s remote server install script and isn\'t recommended. Instead, use `chsh` to change your default shell on the remote machine.\n\n**Connecting to systems that dynamically assign machines per connection**\n\nSome systems will dynamically route an SSH connection to one node from a cluster each time an SSH connection is made. This is an issue for VS Code because it makes two connections to open a remote window: the first to install or start the VS Code Server (or find an already running instance) and the second to create the SSH port tunnel that VS Code uses to talk to the server. If VS Code is routed to a different machine when it creates the second connection, it won\'t be able to talk to the VS Code server.\n\nOne workaround for this is to use the `ControlMaster` option in OpenSSH (macOS/Linux clients only), described in [Enabling alternate SSH authentication methods](#enabling-alternate-ssh-authentication-methods), so that VS Code\'s two connections will be multiplexed through a single SSH connection to the same node.\n\n**Contact your system administrator for configuration help**\n\nSSH is a very flexible protocol and supports many configurations. If you see other errors, in either the login terminal or the **Remote-SSH** output window, they could be due to a missing setting.\n\nContact your system administrator for information about the required settings for your SSH host and client. Specific command-line arguments for connecting to your SSH host can be added to an [SSH config file](https://linux.die.net/man/5/ssh_config).\n\nTo access your config file, run **Remote-SSH: Open Configuration File...** in the Command Palette (`kbstyle(F1)`). You can then work with your admin to add the necessary settings.\n\n### Enabling alternate SSH authentication methods\n\nIf you are connecting to an SSH remote host and are either:\n\n-   Connecting with two-factor authentication\n-   Using password authentication\n-   Using an SSH key with a passphrase when the [SSH Agent](#setting-up-the-ssh-agent) is not running or accessible\n\nthen VS Code should automatically prompt you to enter needed information. If you do not see the prompt, enable the `remote.SSH.showLoginTerminal` [setting](/docs/getstarted/settings.md) in VS Code. This setting displays the terminal whenever VS Code runs an SSH command. You can then enter your authentication code, password, or passphrase when the terminal appears.\n\nIf you are still having trouble, you may need to add the following properties in `settings.json` and retry:\n\n```json\n"remote.SSH.showLoginTerminal": true,\n"remote.SSH.useLocalServer": false\n```\n\nIf you are on macOS and Linux and want to reduce how often you have to enter a password or token, you can enable the `ControlMaster` feature on your **local machine** so that OpenSSH runs multiple SSH sessions over a single connection.\n\nTo enable `ControlMaster`:\n\n1. Add an entry like this to your SSH config file:\n\n    ```yaml\n    Host *\n    ControlMaster auto\n    ControlPath  ~/.ssh/sockets/%r@%h-%p\n    ControlPersist  600\n    ```\n\n2. Then run `mkdir -p ~/.ssh/sockets` to create the sockets folder.\n\n### Setting up the SSH Agent\n\nIf you are connecting to an SSH host using a key with a passphrase, you should ensure that the [SSH Agent](https://www.ssh.com/ssh/agent) is running **locally**. VS Code will automatically add your key to the agent so you don\'t have to enter your passphrase every time you open a remote VS Code window.\n\nTo verify that the agent is running and is reachable from VS Code\'s environment, run `ssh-add -l` in the terminal of a local VS Code window. You should see a listing of the keys in the agent (or a message that it has no keys). If the agent is not running, follow these instructions to start it. After starting the agent, be sure to restart VS Code.\n\n**Windows:**\n\nTo enable SSH Agent automatically on Windows, start a **local Administrator PowerShell** and run the following commands:\n\n```powershell\n# Make sure you\'re running as an Administrator\nSet-Service ssh-agent -StartupType Automatic\nStart-Service ssh-agent\nGet-Service ssh-agent\n```\n\nNow the agent will be started automatically on login.\n\n**Linux:**\n\nTo start the SSH Agent in the background, run:\n\n```bash\neval "$(ssh-agent -s)"\n```\n\nTo start the SSH Agent automatically on login, add these lines to your `~/.bash_profile`:\n\n```bash\nif [ -z "$SSH_AUTH_SOCK" ]; then\n   # Check for a currently running instance of the agent\n   RUNNING_AGENT="`ps -ax | grep \'ssh-agent -s\' | grep -v grep | wc -l | tr -d \'[:space:]\'`"\n   if [ "$RUNNING_AGENT" = "0" ]; then\n        # Launch a new instance of the agent\n        ssh-agent -s &> .ssh/ssh-agent\n   fi\n   eval `cat .ssh/ssh-agent`\nfi\n```\n\n**macOS:**\n\nThe agent should be running by default on macOS.\n\n### Making local SSH Agent available on the remote\n\nAn SSH Agent on your local machine allows the Remote - SSH extension to connect to your chosen remote system without repeatedly prompting for a passphrase, but tools like Git that run on the remote, don\'t have access to your locally-unlocked private keys.\n\nYou can see this by opening the integrated terminal on the remote and running `ssh-add -l`. The command should list the unlocked keys, but instead reports an error about not being able to connect to the authentication agent. Setting `ForwardAgent yes` makes the local SSH Agent available in the remote environment, solving this problem.\n\nYou can do this by editing your `.ssh/config` file (or whatever `Remote.SSH.configFile` is set to - use the **Remote-SSH: Open SSH Configuration File...** command to be sure) and adding:\n\n```ssh-config\nHost *\n    ForwardAgent yes\n```\n\nNote that you might want to be more restrictive and only set the option for particular named hosts.\n\n### Fixing SSH file permission errors\n\nSSH can be strict about file permissions and if they are set incorrectly, you may see errors such as "WARNING: UNPROTECTED PRIVATE KEY FILE!". There are several ways to update file permissions in order to fix this, which are described in the sections below.\n\n### Local SSH file and folder permissions\n\n**macOS / Linux:**\n\nOn your local machine, make sure the following permissions are set:\n\n| Folder / File                             | Permissions                       |\n| ----------------------------------------- | --------------------------------- |\n| `.ssh` in your user folder                | `chmod 700 ~/.ssh`                |\n| `.ssh/config` in your user folder         | `chmod 600 ~/.ssh/config`         |\n| `.ssh/id_ed25519.pub` in your user folder | `chmod 600 ~/.ssh/id_ed25519.pub` |\n| Any other key file                        | `chmod 600 /path/to/key/file`     |\n\n**Windows:**\n\nThe specific expected permissions can vary depending on the exact SSH implementation you are using. We recommend using the out of box [Windows 10 OpenSSH Client](https://learn.microsoft.com/windows-server/administration/openssh/openssh_overview).\n\nIn this case, make sure that all of the files in the `.ssh` folder for your remote user on the SSH host is owned by you and no other user has permissions to access it. See the [Windows OpenSSH wiki](https://github.com/PowerShell/Win32-OpenSSH/wiki/Security-protection-of-various-files-in-Win32-OpenSSH) for details.\n\nFor all other clients, consult your client\'s documentation for what the implementation expects.\n\n### Server SSH file and folder permissions\n\n**macOS / Linux:**\n\nOn the remote machine you are connecting to, make sure the following permissions are set:\n\n| Folder / File                                            | Linux / macOS Permissions          |\n| -------------------------------------------------------- | ---------------------------------- |\n| `.ssh` in your user folder on the server                 | `chmod 700 ~/.ssh`                 |\n| `.ssh/authorized_keys` in your user folder on the server | `chmod 600 ~/.ssh/authorized_keys` |\n\nNote that only Linux hosts are currently supported, which is why permissions for macOS and Windows 10 have been omitted.\n\n**Windows:**\n\nSee the [Windows OpenSSH wiki](https://github.com/PowerShell/Win32-OpenSSH/wiki/Security-protection-of-various-files-in-Win32-OpenSSH) for details on setting the appropriate file permissions for the Windows OpenSSH server.\n\n### Installing a supported SSH client\n\n| OS                                        | Instructions                                                                                                                      |\n| ----------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------- |\n| Windows 10 1803+ / Server 2016/2019 1803+ | Install the [Windows OpenSSH Client](https://learn.microsoft.com/windows-server/administration/openssh/openssh_install_firstuse). |\n| Earlier Windows                           | Install [Git for Windows](https://git-scm.com/download/win).                                                                      |\n| macOS                                     | Comes pre-installed.                                                                                                              |\n| Debian/Ubuntu                             | Run `sudo apt-get install openssh-client`                                                                                         |\n| RHEL / Fedora / CentOS                    | Run `sudo yum install openssh-clients`                                                                                            |\n\nVS Code will look for the `ssh` command in the PATH. Failing that, on Windows it will attempt to find `ssh.exe` in the default Git for Windows install path. You can also specifically tell VS Code where to find the SSH client by adding the `remote.SSH.path` property to `settings.json`.\n\n### Installing a supported SSH server\n\n| OS                                        | Instructions                                                                                                                                                                      | Details                                                                                                                                                    |\n| ----------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Debian 8+ / Ubuntu 16.04+                 | Run `sudo apt-get install openssh-server`                                                                                                                                         | See the [Ubuntu SSH](https://help.ubuntu.com/community/SSH?action=show) documentation for details.                                                         |\n| RHEL / CentOS 7+                          | Run `sudo yum install openssh-server && sudo systemctl start sshd.service && sudo systemctl enable sshd.service`                                                                  | See the [RedHat SSH](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/deployment_guide/ch-openssh) documentation for details. |\n| SuSE 12+ / openSUSE 42.3+                 | In Yast, go to Services Manager, select "sshd" in the list, and click **Enable**. Next go to Firewall, select the **Permanent** configuration, and under services check **sshd**. | See the [SuSE SSH](https://en.opensuse.org/OpenSSH) documentation for details.                                                                             |\n| Windows 10 1803+ / Server 2016/2019 1803+ | Install the [Windows OpenSSH Server](https://learn.microsoft.com/windows-server/administration/openssh/openssh_install_firstuse).                                                 |\n| macOS 10.14+ (Mojave)                     | Enable [Remote Login](https://support.apple.com/guide/mac-help/allow-a-remote-computer-to-access-your-mac-mchlp1066/mac).                                                         |                                                                                                                                                            |\n\n### Resolving hangs when doing a Git push or sync on an SSH host\n\nIf you clone a Git repository using SSH and your SSH key has a passphrase, VS Code\'s pull and sync features may hang when running remotely.\n\nEither use an SSH key without a passphrase, clone using HTTPS, or run `git push` from the command line to work around the issue.\n\n### Using SSHFS to access files on your remote host\n\n[SSHFS](https://en.wikipedia.org/wiki/SSHFS) is a secure remote filesystem access protocol that builds up from SFTP. It provides advantages over something like a CIFS / Samba share in that all that is required is SSH access to the machine.\n\n> **Note:** For performance reasons, SSHFS is best used for single file edits and uploading/downloading content. If you need to use an application that bulk reads/write to many files at once (like a local source control tool), [rsync](#using-rsync-to-maintain-a-local-copy-of-your-source-code) is a better choice.\n\n**macOS / Linux**:\n\nOn Linux, you can use your distribution\'s package manager to install SSHFS. For Debian/Ubuntu: `sudo apt-get install sshfs`\n\n> **Note:** WSL 1 does not support FUSE or SSHFS, so the instructions differ for Windows currently. **WSL 2 does include FUSE and SSHFS support**, so this will change soon.\n\nOn macOS, you can install SSHFS using [Homebrew](https://brew.sh/):\n\n```bash\nbrew install --cask macfuse\nbrew install gromgit/fuse/sshfs-mac\nbrew link --overwrite sshfs-mac\n```\n\nIn addition, if you would prefer not to use the command line to mount the remote filesystem, you can also install [SSHFS GUI](https://github.com/dstuecken/sshfs-gui).\n\nTo use the command line, run the following commands from a local terminal (replacing `user@hostname` with the remote user and hostname / IP):\n\n```bash\nexport USER_AT_HOST=user@hostname\n# Make the directory where the remote filesystem will be mounted\nmkdir -p "$HOME/sshfs/$USER_AT_HOST"\n# Mount the remote filesystem\nsshfs "$USER_AT_HOST:" "$HOME/sshfs/$USER_AT_HOST" -ovolname="$USER_AT_HOST" -p 22  \\\n    -o workaround=nonodelay -o transform_symlinks -o idmap=user  -C\n```\n\nThis will make your home folder on the remote machine available under the `~/sshfs`. When you are done, you can unmount it using your OS\'s Finder / file explorer or by using the command line:\n\n```bash\numount "$HOME/sshfs/$USER_AT_HOST"\n```\n\n**Windows:**\n\nFollow these steps:\n\n1. On Linux, add `.gitattributes` file to your project to **force consistent line endings** between Linux and Windows to avoid unexpected issues due to CRLF/LF differences between the two operating systems. See [Resolving Git line ending issues](#resolving-git-line-ending-issues-in-wsl-resulting-in-many-modified-files) for details.\n\n2. Next, install [SSHFS-Win](https://github.com/billziss-gh/sshfs-win) using [Chocolatey](https://chocolatey.org/): `choco install sshfs`\n\n3. Once you\'ve installed SSHFS for Windows, you can use the File Explorer\'s **Map Network Drive...** option with the path `\\\\sshfs\\user@hostname`, where `user@hostname` is your remote user and hostname / IP. You can script this using the command prompt as follows: `net use /PERSISTENT:NO X: \\\\sshfs\\user@hostname`\n\n4. Once done, disconnect by right-clicking on the drive in the File Explorer and selecting **Disconnect**.\n\n### Connect to a remote host from the terminal\n\nOnce a host has been configured, you can connect to it directly from the terminal by passing a remote URI.\n\nFor example, to connect to `remote_server` and open the `/code/my_project` folder, run:\n\n```bash\ncode --remote ssh-remote+remote_server /code/my_project\n```\n\nWe need to do some guessing on whether the input path is a file or a folder. If it has a file extension, it is considered a file.\n\nTo force that a folder is opened, add slash to the path or use:\n\n`code --folder-uri vscode-remote://ssh-remote+remote_server/code/folder.with.dot`\n\nTo force that a file is opened, add `--goto` or use:\n\n`code --file-uri vscode-remote://ssh-remote+remote_server/code/fileWithoutExtension`\n\n### Using rsync to maintain a local copy of your source code\n\nAn alternative to [using SSHFS to access remote files](#using-sshfs-to-access-files-on-your-remote-host) is to [use `rsync`](https://rsync.samba.org/) to copy the entire contents of a folder on remote host to your local machine. The `rsync` command will determine which files need to be updated each time it is run, which is far more efficient and convenient than using something like `scp` or `sftp`. This is primarily something to consider if you really need to use multi-file or performance intensive local tools.\n\nThe `rsync` command is available out of box on macOS and can be installed using Linux package managers (for example `sudo apt-get install rsync` on Debian/Ubuntu). For Windows, you\'ll need to either use [WSL](https://learn.microsoft.com/windows/wsl/install) or [Cygwin](https://www.cygwin.com/) to access the command.\n\nTo use the command, navigate to the folder you want to store the synched contents and run the following replacing `user@hostname` with the remote user and hostname / IP and `/remote/source/code/path` with the remote source code location.\n\nOn **macOS, Linux, or inside WSL**:\n\n```bash\nrsync -rlptzv --progress --delete --exclude=.git "user@hostname:/remote/source/code/path" .\n```\n\nOr using **WSL from PowerShell on Windows**:\n\n```powershell\nwsl rsync -rlptzv --progress --delete --exclude=.git "user@hostname:/remote/source/code/path" "`$(wslpath -a \'$PWD\')"\n```\n\nYou can rerun this command each time you want to get the latest copy of your files and only updates will be transferred. The `.git` folder is intentionally excluded both for performance reasons and so you can use local Git tools without worrying about the state on the remote host.\n\nTo push content, reverse the source and target parameters in the command. However, **on Windows** you should add a `.gitattributes` file to your project to **force consistent line endings** before doing so. See [Resolving Git line ending issues](#resolving-git-line-ending-issues-in-wsl-resulting-in-many-modified-files) for details.\n\n```bash\nrsync -rlptzv --progress --delete --exclude=.git . "user@hostname:/remote/source/code/path"\n```\n\n### Cleaning up the VS Code Server on the remote\n\nThe SSH extension provides a command for cleaning up the VS Code Server from the remote machine, **Remote-SSH: Uninstall VS Code Server from Host...**. The command does two things: it kills any running VS Code Server processes and it deletes the folder where the server was installed.\n\nIf you want to run these steps manually, or if the command isn\'t working for you, you can run a script like this:\n\n```bash\n# Kill server processes\nkill -9 $(ps aux | grep vscode-server | grep $USER | grep -v grep | awk \'{print $2}\')\n# Delete related files and folder\nrm -rf $HOME/.vscode-server # Or ~/.vscode-server-insiders\n```\n\nThe VS Code Server was previously installed under `~/.vscode-remote` so you can check that location too.\n\n### SSH into a remote WSL 2 host\n\nYou may want to use SSH to connect to a WSL distro running on your remote machine. Check out [this guide](https://www.hanselman.com/blog/the-easy-way-how-to-ssh-into-bash-and-wsl2-on-windows-10-from-an-external-machine) to learn how to SSH into Bash and WSL 2 on Windows 10 from an external machine.\n'},1205:(n,l,e)=>{"use strict";e.r(l),e.d(l,{default:()=>t});const t='This document is about troubleshooting and filing issue reports for Remote-SSH.\n\n**To learn more about Remote - SSH, see the [documentation on `code.visualstudio.com`](https://code.visualstudio.com/docs/remote/remote-overview).**\n\n**Please also see [SSH Tips & Tricks](https://code.visualstudio.com/docs/remote/troubleshooting#_ssh-tips) for many common workarounds and configuration tips.**\n\nGoing through these steps before submitting an issue is **required** as it may get address your issue or help us to narrow it down.\n\n## Troubleshooting Steps\n\n1. **Find the log** at View > Output > Remote-SSH. Skim it for obvious errors. For example, if ssh reported an error while connecting, and the extension didn\'t surface it to the VS Code UI, you may notice it in here. **Always include this full log when filing an issue.**\n\n <img width="753" alt="image" src="https://github.com/microsoft/vscode-remote-release/assets/323878/890155fc-89a4-4014-be30-680f3256edf6">\n\n2. Search the log for `Running ssh connection command` and copy the command directly after. This is the exact ssh command that the extension attempted to use. Try running this command in an external terminal to check that you are able to connect to your host. If you are unable to connect to your remote machine from the command line this means you likely have an issue with your SSH configuration.\n3. Now try running this command but add `echo "echo hello" |` to the beginning to confirm that we can execute a script on your remote by piping it into SSH. This is essentially how we run a script over ssh to install the VS Code Server on your remote, and some advanced configurations break this.\n4. Try connecting using both values of the `remote.SSH.useLocalServer` setting. This setting is described in more detail below.\n5. If `remote.SSH.useExecServer` is enabled on your machine, try disabling it and see whether that is successful. This setting is described in more detail below.\n\n### `remote.SSH.useLocalServer` - Connection Mode\n\nThe Remote-SSH extension has a setting called `remote.SSH.useLocalServer` which provides two different modes for connecting. The default value is `true` which is called "Local Server Mode" and when `false` it is "Terminal Mode". This setting by default is disabled on Windows, and to enable it on Windows you **must** enable it directly in your settings.json, not through the settings UI. The two options are described below:\n\n-   `true`: "Local Server Mode": The Remote-SSH extension spawns an SSH process which will then be reused by all VS Code windows connected to that remote.\n-   `false`: "Terminal Mode": In this mode, the Remote-SSH extension runs the SSH connection command in a hidden terminal. This means that each VS Code window has its own connection. For example, if you enter a password when connecting, you will have to enter it for each window, or for each time a window reloads.\n\n### `remote.SSH.useExecServer` - Exec Server Mode\n\nThe Remote-SSH extension can establish itself by bootstrapping with a minimal control server before launching the full VS Code Server. This enables other functionality such as connecting to Dev Containers or WSL over SSH. This is gradually being enabled by default for users.\n\n## Other Suggestions\n\n1. Run the command "Kill VS Code Server on Host..." from the command palette. This will kill running VS Code Server processes on your remote machine and remove server files from the remote.\n2. If the log implies that the SSH connection was established successfully, use Help > Toggle Developer Tools > Console and check for other errors that may have come from the VS Code window.\n3. Some issues may be caused by the VS Code Server failing to start on your remote, you may find more details in the server log. The location differs depending on the value of `remote.SSH.useExecServer`. It will be printed in the log when starting the server.\n    - `false`: `~/.vscode-server[-insiders]/.<hash>.log`\n    - `true`: `~/.vscode-server[-insiders]/cli/servers/*/log.txt`\n4. If you think a recent regression was introduced to VS Code core, using the [vscode-bisect](https://github.com/microsoft/vscode-bisect) tool to narrow down the specific version is very helpful in a bug report.\n\n## Performance Issues\n\nIf you are seeing issues involving processes using high CPU/RAM on your _local_ machine, see the [Performance Issues wiki page](https://github.com/microsoft/vscode/wiki/Performance-Issues) on the vscode repo.\n\nIf you are seeing this with processes on the remote machine that Remote-SSH has connected to, there are a few things you can do to narrow down the problem. See the [VS Code Remote Development Overview](https://code.visualstudio.com/docs/remote/remote-overview) doc page for a description of what these processes are.\n\nFirst, you should determine exactly which process is having the issue. Use the built-in Process Explorer (Help > Open Process Explorer) or a separate command like `ps -eo pid,%cpu,%mem,command` to find the full command arguments of the process having the issue. If the process is the extension-host process, or a child process belonging to an extension, then it\'s likely that an extension you installed is misbehaving. Try reloading the window with extensions disabled, or run the command "Start Extension Bisect" to determine which extension is causing the issue. This is the most likely issue.\n\nIf the issue is with the VS Code Server process (`server-main.js`) you can follow the steps described in [Profiling Remote Processes](https://github.com/microsoft/vscode-remote-release/wiki/Profiling-Remote-Processes) to get a profile to include in an issue.\n\n## Native Extension Host Crashes\n\nIf it appears through logs that the remote extension host process is exiting unexpected, it may be helpful to capture a coredump and include that in an issue. An example error with signal `SIGSEGV` is shown below.\n\n```\n2024-01-01 12:00:00.000 [info] [<unknown>][111a1aa1][ExtensionHostConnection] <12345> Extension Host Process exited with code: null, signal: SIGSEGV.\n```\n\nPlease see https://github.com/microsoft/vscode/wiki/Native-Crash-Issues#remote-extension-host-crashes for more information.\n\n## Filing a bug\n\nStill have questions after reading this wiki, or think you\'re hitting a bug in the extension. Please use [this issue template](https://github.com/microsoft/vscode-remote-release/issues/new?template=a_remote_ssh_bug_form.yml) to open an issue on this repo.\n'},5192:(n,l,e)=>{"use strict";l.quote=e(3940),l.parse=e(9563)},9563:n=>{"use strict";for(var l="(?:"+["\\|\\|","\\&\\&",";;","\\|\\&","\\<\\(","\\<\\<\\<",">>",">\\&","<\\&","[&;()|<>]"].join("|")+")",e=new RegExp("^"+l+"$"),t="|&;()<> \\t",u=/^#$/,r="",o=0;o<4;o++)r+=(4294967296*Math.random()).toString(16);var i=new RegExp("^"+r);n.exports=function(n,o,s){var a=function(n,o,i){i||(i={});var s=i.escape||"\\",a=new RegExp(["("+l+")","((\\"+s+"['\""+t+"]|[^\\s'\""+t+"])+|\"((\\\\\"|[^\"])*?)\"|'((\\\\'|[^'])*?)')+"].join("|"),"g"),c=function(n,l){for(var e,t=l.lastIndex,u=[];e=l.exec(n);)u.push(e),l.lastIndex===e.index&&(l.lastIndex+=1);return l.lastIndex=t,u}(n,a);if(0===c.length)return[];o||(o={});var d=!1;return c.map((function(l){var t=l[0];if(t&&!d){if(e.test(t))return{op:t};var i,a=!1,c=!1,h="",f=!1;for(i=0;i<t.length;i++){var p=t.charAt(i);if(f=f||!a&&("*"===p||"?"===p),c)h+=p,c=!1;else if(a)p===a?a=!1:"'"==a?h+=p:p===s?(i+=1,h+='"'===(p=t.charAt(i))||p===s||"$"===p?p:s+p):h+="$"===p?g():p;else if('"'===p||"'"===p)a=p;else{if(e.test(p))return{op:t};if(u.test(p)){d=!0;var m={comment:n.slice(l.index+i+1)};return h.length?[h,m]:[m]}p===s?c=!0:h+="$"===p?g():p}}return f?{op:"glob",pattern:h}:h}function g(){var n,l;i+=1;var e=t.charAt(i);if("{"===e){if(i+=1,"}"===t.charAt(i))throw new Error("Bad substitution: "+t.slice(i-2,i+1));if((n=t.indexOf("}",i))<0)throw new Error("Bad substitution: "+t.slice(i));l=t.slice(i,n),i=n}else if(/[*@#?$!_-]/.test(e))l=e,i+=1;else{var u=t.slice(i);(n=u.match(/[^\w\d_]/))?(l=u.slice(0,n.index),i+=n.index-1):(l=u,i=t.length)}return function(n,l,e){var t="function"==typeof n?n(e):n[e];return void 0===t&&""!=e?t="":void 0===t&&(t="$"),"object"==typeof t?""+r+JSON.stringify(t)+r:""+t}(o,0,l)}})).reduce((function(n,l){return void 0===l?n:n.concat(l)}),[])}(n,o,s);return"function"!=typeof o?a:a.reduce((function(n,l){if("object"==typeof l)return n.concat(l);var e=l.split(RegExp("("+r+".*?"+r+")","g"));return 1===e.length?n.concat(e[0]):n.concat(e.filter(Boolean).map((function(n){return i.test(n)?JSON.parse(n.split(r)[1]):n})))}),[])}},3940:n=>{"use strict";n.exports=function(n){return n.map((function(n){return n&&"object"==typeof n?n.op.replace(/(.)/g,"\\$1"):/["\s]/.test(n)&&!/'/.test(n)?"'"+n.replace(/(['\\])/g,"\\$1")+"'":/["'\s]/.test(n)?'"'+n.replace(/(["\\$`!])/g,"\\$1")+'"':String(n).replace(/([A-Za-z]:)?([#!"$&'()*,:;<=>?@[\\\]^`{|}])/g,"$1\\$2")})).join(" ")}},9468:(n,l,e)=>{var t,u=e(2613),r=e(7205),o=e(4434);function i(){c&&(c=!1,r.forEach((function(n){try{process.removeListener(n,a[n])}catch(n){}})),process.emit=p,process.reallyExit=h,t.count-=1)}function s(n,l,e){t.emitted[n]||(t.emitted[n]=!0,t.emit(n,l,e))}"function"!=typeof o&&(o=o.EventEmitter),process.__signal_exit_emitter__?t=process.__signal_exit_emitter__:((t=process.__signal_exit_emitter__=new o).count=0,t.emitted={}),t.infinite||(t.setMaxListeners(1/0),t.infinite=!0),n.exports=function(n,l){u.equal(typeof n,"function","a callback must be provided for exit handler"),!1===c&&d();var e="exit";return l&&l.alwaysLast&&(e="afterexit"),t.on(e,n),function(){t.removeListener(e,n),0===t.listeners("exit").length&&0===t.listeners("afterexit").length&&i()}},n.exports.unload=i;var a={};r.forEach((function(n){a[n]=function(){process.listeners(n).length===t.count&&(i(),s("exit",null,n),s("afterexit",null,n),process.kill(process.pid,n))}})),n.exports.signals=function(){return r},n.exports.load=d;var c=!1;function d(){c||(c=!0,t.count+=1,r=r.filter((function(n){try{return process.on(n,a[n]),!0}catch(n){return!1}})),process.emit=m,process.reallyExit=f)}var h=process.reallyExit;function f(n){process.exitCode=n||0,s("exit",process.exitCode,null),s("afterexit",process.exitCode,null),h.call(process,process.exitCode)}var p=process.emit;function m(n,l){if("exit"===n){void 0!==l&&(process.exitCode=l);var e=p.apply(this,arguments);return s("exit",process.exitCode,null),s("afterexit",process.exitCode,null),e}return p.apply(this,arguments)}},7205:n=>{n.exports=["SIGABRT","SIGALRM","SIGHUP","SIGINT","SIGTERM"],"win32"!==process.platform&&n.exports.push("SIGVTALRM","SIGXCPU","SIGXFSZ","SIGUSR2","SIGTRAP","SIGSYS","SIGQUIT","SIGIOT"),"linux"===process.platform&&n.exports.push("SIGIO","SIGPOLL","SIGPWR","SIGSTKFLT","SIGUNUSED")},3443:(n,l,e)=>{"use strict";var t=e(7456).every;function u(n,l,e,t){var u=!0;return e!==t.length-1&&(u=l.calledBefore(t[e+1])),!(!function(n,l){return void 0===n[l.id]&&(n[l.id]=0),n[l.id]<l.callCount}(n,l)||!u||(n[l.id]+=1,0))}n.exports=function(n){return t(arguments.length>1?arguments:n,u.bind(null,{}))}},841:(n,l,e)=>{"use strict";var t=e(3021);n.exports=function(n){return n.constructor&&n.constructor.name||"function"==typeof n.constructor&&t(n.constructor)||null}},8456:(n,l)=>{"use strict";l.wrap=function(n,e){var t=function(){return l.printWarning(e),n.apply(this,arguments)};return n.prototype&&(t.prototype=n.prototype),t},l.defaultMsg=function(n,l){return`${n}.${l} is deprecated and will be removed from the public API in a future version of ${n}.`},l.printWarning=function(n){"object"==typeof process&&process.emitWarning?process.emitWarning(n):console.info?console.info(n):console.log(n)}},4914:n=>{"use strict";n.exports=function(n,l){var e=!0;try{n.forEach((function(){if(!l.apply(this,arguments))throw new Error}))}catch(n){e=!1}return e}},3021:n=>{"use strict";n.exports=function(n){if(!n)return"";try{return n.displayName||n.name||(String(n).match(/function ([^\s(]+)/)||[])[1]}catch(n){return""}}},5942:n=>{"use strict";var l;l="undefined"!=typeof global?global:"undefined"!=typeof window?window:self,n.exports=l},8953:(n,l,e)=>{"use strict";n.exports={global:e(5942),calledInOrder:e(3443),className:e(841),deprecated:e(8456),every:e(4914),functionName:e(3021),orderByFirstCall:e(9869),prototypes:e(1105),typeOf:e(5943),valueToString:e(4020)}},9869:(n,l,e)=>{"use strict";var t=e(7456).sort,u=e(7456).slice;function r(n,l){var e=n.getCall(0),t=l.getCall(0);return(e&&e.callId||-1)<(t&&t.callId||-1)?-1:1}n.exports=function(n){return t(u(n),r)}},7456:(n,l,e)=>{"use strict";var t=e(5848);n.exports=t(Array.prototype)},5848:(n,l,e)=>{"use strict";var t=Function.call,u=e(6788),r=["size","caller","callee","arguments"];u&&r.push("__proto__"),n.exports=function(n){return Object.getOwnPropertyNames(n).reduce((function(l,e){return r.includes(e)||"function"!=typeof n[e]||(l[e]=t.bind(n[e])),l}),Object.create(null))}},7425:(n,l,e)=>{"use strict";var t=e(5848);n.exports=t(Function.prototype)},1105:(n,l,e)=>{"use strict";n.exports={array:e(7456),function:e(7425),map:e(2307),object:e(2778),set:e(9933),string:e(9176)}},2307:(n,l,e)=>{"use strict";var t=e(5848);n.exports=t(Map.prototype)},2778:(n,l,e)=>{"use strict";var t=e(5848);n.exports=t(Object.prototype)},9933:(n,l,e)=>{"use strict";var t=e(5848);n.exports=t(Set.prototype)},9176:(n,l,e)=>{"use strict";var t=e(5848);n.exports=t(String.prototype)},6788:n=>{"use strict";let l;try{l=!1}catch(n){l=!0}n.exports=l},5943:(n,l,e)=>{"use strict";var t=e(5855);n.exports=function(n){return t(n).toLowerCase()}},4020:n=>{"use strict";n.exports=function(n){return n&&n.toString?n.toString():String(n)}},7073:(n,l,e)=>{"use strict";const t=e(8953).global;let u;try{u=e(3557)}catch(n){}function r(n){const l=Math.pow(2,31)-1,o=1e12,i=function(){},s=function(){return[]},a=n.setTimeout(i,0),c="object"==typeof a,d=n.process&&"function"==typeof n.process.hrtime,h=d&&"function"==typeof n.process.hrtime.bigint,f=n.process&&"function"==typeof n.process.nextTick,p=n.process&&e(9023).promisify,m=n.performance&&"function"==typeof n.performance.now,g=n.Performance&&(typeof n.Performance).match(/^(function|object)$/),y=n.performance&&n.performance.constructor&&n.performance.constructor.prototype,v=n.hasOwnProperty("queueMicrotask"),w=n.requestAnimationFrame&&"function"==typeof n.requestAnimationFrame,b=n.cancelAnimationFrame&&"function"==typeof n.cancelAnimationFrame,S=n.requestIdleCallback&&"function"==typeof n.requestIdleCallback,C=n.cancelIdleCallback&&"function"==typeof n.cancelIdleCallback,D=n.setImmediate&&"function"==typeof n.setImmediate,E=n.Intl&&"object"==typeof n.Intl;n.clearTimeout(a);const _=n.Date,k=n.Intl;let x=o,T=!1;function P(n,l){n.loopLimit&&l===n.loopLimit-1&&(T=!0)}function I(){T=!1}function A(n){if(!n)return 0;const l=n.split(":"),e=l.length;let t,u=e,r=0;if(e>3||!/^(\d\d:){0,2}\d\d?$/.test(n))throw new Error("tick only understands numbers, 'm:s' and 'h:m:s'. Each part must be two digits");for(;u--;){if(t=parseInt(l[u],10),t>=60)throw new Error(`Invalid time ${n}`);r+=t*Math.pow(60,e-u-1)}return 1e3*r}function O(n){if(!n)return 0;if("function"==typeof n.getTime)return n.getTime();if("number"==typeof n)return n;throw new TypeError("now should be milliseconds since UNIX epoch")}function R(n,l,e){return e&&e.callAt>=n&&e.callAt<=l}function F(n,l){const e=new Error(`Aborting after running ${n.loopLimit} timers, assuming an infinite loop!`);if(!l.error)return e;const t=/target\.*[<|(|[].*?[>|\]|)]\s*/;let u=new RegExp(String(Object.keys(n).join("|")));c&&(u=new RegExp(`\\s+at (Object\\.)?(?:${Object.keys(n).join("|")})\\s+`));let r=-1;l.error.stack.split("\n").some((function(n,l){return n.match(t)?(r=l,!0):n.match(u)?(r=l,!1):r>=0}));const o=`${e}\n${l.type||"Microtask"} - ${l.func.name||"anonymous"}\n${l.error.stack.split("\n").slice(r+1).join("\n")}`;try{Object.defineProperty(e,"stack",{value:o})}catch(n){}return e}function L(n,l){let e;for(e in l)l.hasOwnProperty(e)&&(n[e]=l[e]);return l.now?n.now=function(){return n.clock.now}:delete n.now,l.toSource?n.toSource=function(){return l.toSource()}:delete n.toSource,n.toString=function(){return l.toString()},n.prototype=l.prototype,n.parse=l.parse,n.UTC=l.UTC,n.prototype.toUTCString=l.prototype.toUTCString,n.isFake=!0,n}function $(n){if(n.jobs){for(let l=0;l<n.jobs.length;l++){const e=n.jobs[l];if(e.func.apply(null,e.args),P(n,l),n.loopLimit&&l>n.loopLimit)throw F(n,e)}I(),n.jobs=[]}}function j(n,e){if(void 0===e.func)throw new Error("Callback must be provided to timer calls");if(c&&"function"!=typeof e.func)throw new TypeError(`[ERR_INVALID_CALLBACK]: Callback must be a function. Received ${e.func} of type ${typeof e.func}`);var t;if(T&&(e.error=new Error),e.type=e.immediate?"Immediate":"Timeout",e.hasOwnProperty("delay")&&("number"!=typeof e.delay&&(e.delay=parseInt(e.delay,10)),t=e.delay,(Number.isFinite?Number.isFinite(t):isFinite(t))||(e.delay=0),e.delay=e.delay>l?1:e.delay,e.delay=Math.max(0,e.delay)),e.hasOwnProperty("interval")&&(e.type="Interval",e.interval=e.interval>l?1:e.interval),e.hasOwnProperty("animation")&&(e.type="AnimationFrame",e.animation=!0),e.hasOwnProperty("idleCallback")&&(e.type="IdleCallback",e.idleCallback=!0),n.timers||(n.timers={}),e.id=x++,e.createdAt=n.now,e.callAt=n.now+(parseInt(e.delay)||(n.duringTick?1:0)),n.timers[e.id]=e,c){const l={refed:!0,ref:function(){return this.refed=!0,l},unref:function(){return this.refed=!1,l},hasRef:function(){return this.refed},refresh:function(){return e.callAt=n.now+(parseInt(e.delay)||(n.duringTick?1:0)),n.timers[e.id]=e,l},[Symbol.toPrimitive]:function(){return e.id}};return l}return e.id}function M(n,l){return n.callAt<l.callAt?-1:n.callAt>l.callAt?1:n.immediate&&!l.immediate?-1:!n.immediate&&l.immediate?1:n.createdAt<l.createdAt?-1:n.createdAt>l.createdAt?1:n.id<l.id?-1:n.id>l.id?1:void 0}function N(n,l,e){const t=n.timers;let u,r,o=null;for(u in t)t.hasOwnProperty(u)&&(r=R(l,e,t[u]),!r||o&&1!==M(o,t[u])||(o=t[u]));return o}function B(n){const l=n.timers;let e,t=null;for(e in l)l.hasOwnProperty(e)&&(t&&1!==M(t,l[e])||(t=l[e]));return t}function H(n){const l=n.timers;let e,t=null;for(e in l)l.hasOwnProperty(e)&&(t&&-1!==M(t,l[e])||(t=l[e]));return t}function U(n,l){"number"==typeof l.interval?n.timers[l.id].callAt+=l.interval:delete n.timers[l.id],"function"==typeof l.func?l.func.apply(null,l.args):(0,eval)(l.func)}function q(n){return"IdleCallback"===n||"AnimationFrame"===n?`cancel${n}`:`clear${n}`}const W=function(){let n=0;return function(l){!n++&&console.warn(l)}}();function z(n,l,e){if(!l)return;n.timers||(n.timers={});const t=Number(l);if(Number.isNaN(t)||t<o){const t=q(e);if(!0===n.shouldClearNativeTimers){const e=n[`_${t}`];return"function"==typeof e?e(l):void 0}W(`FakeTimers: ${t} was invoked to clear a native timer instead of one created by this library.\nTo automatically clean-up native timers, use \`shouldClearNativeTimers\`.`)}if(n.timers.hasOwnProperty(t)){const l=n.timers[t];if(!(l.type===e||"Timeout"===l.type&&"Interval"===e||"Interval"===l.type&&"Timeout"===e)){const n=q(e),t=function(n){return"IdleCallback"===n||"AnimationFrame"===n?`request${n}`:`set${n}`}(l.type);throw new Error(`Cannot clear timer: timer created with ${t}() but cleared with ${n}()`)}delete n.timers[t]}}function V(n,l,e){if(e[l].hadOwnProperty=Object.prototype.hasOwnProperty.call(n,l),e[`_${l}`]=n[l],"Date"===l){const t=L(e[l],n[l]);n[l]=t}else if("Intl"===l)n[l]=e[l];else if("performance"===l){const t=Object.getOwnPropertyDescriptor(n,l);if(t&&t.get&&!t.set){Object.defineProperty(e,`_${l}`,t);const u=Object.getOwnPropertyDescriptor(e,l);Object.defineProperty(n,l,u)}else n[l]=e[l]}else n[l]=function(){return e[l].apply(e,arguments)},Object.defineProperties(n[l],Object.getOwnPropertyDescriptors(e[l]));n[l].clock=e}function G(n,l){n.tick(l)}const K={setTimeout:n.setTimeout,clearTimeout:n.clearTimeout,setInterval:n.setInterval,clearInterval:n.clearInterval,Date:n.Date};D&&(K.setImmediate=n.setImmediate,K.clearImmediate=n.clearImmediate),d&&(K.hrtime=n.process.hrtime),f&&(K.nextTick=n.process.nextTick),m&&(K.performance=n.performance),w&&(K.requestAnimationFrame=n.requestAnimationFrame),v&&(K.queueMicrotask=!0),b&&(K.cancelAnimationFrame=n.cancelAnimationFrame),S&&(K.requestIdleCallback=n.requestIdleCallback),C&&(K.cancelIdleCallback=n.cancelIdleCallback),E&&(K.Intl=n.Intl);const X=n.setImmediate||n.setTimeout;function J(l,e){l=Math.floor(O(l)),e=e||1e3;let t=0;const u=[0,0];if(void 0===_)throw new Error("The global scope doesn't have a `Date` object (see https://github.com/sinonjs/sinon/issues/1852#issuecomment-419622780)");const r={now:l,Date:L((function n(l,e,t,u,r,o,i){if(!(this instanceof n))return new _(n.clock.now).toString();switch(arguments.length){case 0:return new _(n.clock.now);case 1:return new _(l);case 2:return new _(l,e);case 3:return new _(l,e,t);case 4:return new _(l,e,t,u);case 5:return new _(l,e,t,u,r);case 6:return new _(l,e,t,u,r,o);default:return new _(l,e,t,u,r,o,i)}}),_),loopLimit:e};function o(){return 16-(r.now-l)%16}function i(n){const e=r.now-u[0]-l,o=Math.floor(e/1e3),i=1e6*(e-1e3*o)+t-u[1];if(Array.isArray(n)){if(n[1]>1e9)throw new TypeError("Number of nanoseconds can't exceed a billion");const l=n[0];let e=i-n[1],t=o-l;return e<0&&(e+=1e9,t-=1),[t,e]}return[o,i]}function s(){const n=i();return 1e3*n[0]+n[1]/1e6}function a(n,l,e,u){const o="number"==typeof n?n:A(n),i=Math.floor(o),s=function(n){const l=1e6,e=1e6*n%l,t=e<0?e+l:e;return Math.floor(t)}(o);let a=t+s,c=r.now+i;if(o<0)throw new TypeError("Negative ticks are not supported");a>=1e6&&(c+=1,a-=1e6),t=a;let d,h,f,p,m,g,y=r.now,v=r.now;function w(){for(d=N(r,y,c);d&&y<=c;){if(r.timers[d.id]){y=d.callAt,r.now=d.callAt,f=r.now;try{$(r),U(r,d)}catch(n){h=h||n}if(l)return void X(p);m()}g()}if(f=r.now,$(r),f!==r.now&&(y+=r.now-f,c+=r.now-f),r.duringTick=!1,d=N(r,y,c),d)try{r.tick(c-r.now)}catch(n){h=h||n}else r.now=c,t=a;if(h)throw h;if(!l)return r.now;e(r.now)}return r.duringTick=!0,f=r.now,$(r),f!==r.now&&(y+=r.now-f,c+=r.now-f),p=l&&function(){try{m(),g(),w()}catch(n){u(n)}},m=function(){f!==r.now&&(y+=r.now-f,c+=r.now-f,v+=r.now-f)},g=function(){d=N(r,v,c),v=y},w()}return r.Date.clock=r,h&&(i.bigint=function(){const n=i();return BigInt(n[0])*BigInt(1e9)+BigInt(n[1])}),E&&(r.Intl=function(){const n={};return Object.getOwnPropertyNames(k).forEach((l=>n[l]=k[l])),n.DateTimeFormat=function(...l){const e=new k.DateTimeFormat(...l),t={};return["formatRange","formatRangeToParts","resolvedOptions"].forEach((n=>{t[n]=e[n].bind(e)})),["format","formatToParts"].forEach((l=>{t[l]=function(t){return e[l](t||n.clock.now)}})),t},n.DateTimeFormat.prototype=Object.create(k.DateTimeFormat.prototype),n.DateTimeFormat.supportedLocalesOf=k.DateTimeFormat.supportedLocalesOf,n}(),r.Intl.clock=r),r.requestIdleCallback=function(n,l){let e=0;r.countTimers()>0&&(e=50);const t=j(r,{func:n,args:Array.prototype.slice.call(arguments,2),delay:void 0===l?e:Math.min(l,e),idleCallback:!0});return Number(t)},r.cancelIdleCallback=function(n){return z(r,n,"IdleCallback")},r.setTimeout=function(n,l){return j(r,{func:n,args:Array.prototype.slice.call(arguments,2),delay:l})},void 0!==n.Promise&&p&&(r.setTimeout[p.custom]=function(l,e){return new n.Promise((function(n){j(r,{func:n,args:[e],delay:l})}))}),r.clearTimeout=function(n){return z(r,n,"Timeout")},r.nextTick=function(n){return function(n,l){n.jobs||(n.jobs=[]),n.jobs.push(l)}(r,{func:n,args:Array.prototype.slice.call(arguments,1),error:T?new Error:null})},r.queueMicrotask=function(n){return r.nextTick(n)},r.setInterval=function(n,l){return l=parseInt(l,10),j(r,{func:n,args:Array.prototype.slice.call(arguments,2),delay:l,interval:l})},r.clearInterval=function(n){return z(r,n,"Interval")},D&&(r.setImmediate=function(n){return j(r,{func:n,args:Array.prototype.slice.call(arguments,1),immediate:!0})},void 0!==n.Promise&&p&&(r.setImmediate[p.custom]=function(l){return new n.Promise((function(n){j(r,{func:n,args:[l],immediate:!0})}))}),r.clearImmediate=function(n){return z(r,n,"Immediate")}),r.countTimers=function(){return Object.keys(r.timers||{}).length+(r.jobs||[]).length},r.requestAnimationFrame=function(n){const l=j(r,{func:n,delay:o(),get args(){return[s()]},animation:!0});return Number(l)},r.cancelAnimationFrame=function(n){return z(r,n,"AnimationFrame")},r.runMicrotasks=function(){$(r)},r.tick=function(n){return a(n,!1)},void 0!==n.Promise&&(r.tickAsync=function(l){return new n.Promise((function(n,e){X((function(){try{a(l,!0,n,e)}catch(n){e(n)}}))}))}),r.next=function(){$(r);const n=B(r);if(!n)return r.now;r.duringTick=!0;try{return r.now=n.callAt,U(r,n),$(r),r.now}finally{r.duringTick=!1}},void 0!==n.Promise&&(r.nextAsync=function(){return new n.Promise((function(n,l){X((function(){try{const e=B(r);if(!e)return void n(r.now);let t;r.duringTick=!0,r.now=e.callAt;try{U(r,e)}catch(n){t=n}r.duringTick=!1,X((function(){t?l(t):n(r.now)}))}catch(n){l(n)}}))}))}),r.runAll=function(){let n,l;for($(r),l=0;l<r.loopLimit;l++){if(!r.timers)return I(),r.now;if(n=Object.keys(r.timers).length,0===n)return I(),r.now;r.next(),P(r,l)}const e=B(r);throw F(r,e)},r.runToFrame=function(){return r.tick(o())},void 0!==n.Promise&&(r.runAllAsync=function(){return new n.Promise((function(n,l){let e=0;!function t(){X((function(){try{let u;if($(r),e<r.loopLimit)return r.timers?(u=Object.keys(r.timers).length,0===u?(I(),void n(r.now)):(r.next(),e++,t(),void P(r,e))):(I(),void n(r.now));const o=B(r);l(F(r,o))}catch(n){l(n)}}))}()}))}),r.runToLast=function(){const n=H(r);return n?r.tick(n.callAt-r.now):($(r),r.now)},void 0!==n.Promise&&(r.runToLastAsync=function(){return new n.Promise((function(n,l){X((function(){try{const l=H(r);l||($(r),n(r.now)),n(r.tickAsync(l.callAt-r.now))}catch(n){l(n)}}))}))}),r.reset=function(){t=0,r.timers={},r.jobs=[],r.now=l},r.setSystemTime=function(n){const l=O(n),e=l-r.now;let o,i;for(o in u[0]=u[0]+e,u[1]=u[1]+t,r.now=l,t=0,r.timers)r.timers.hasOwnProperty(o)&&(i=r.timers[o],i.createdAt+=e,i.callAt+=e)},r.jump=function(n){const l="number"==typeof n?n:A(n),e=Math.floor(l);for(const n of Object.values(r.timers))r.now+e>n.callAt&&(n.callAt=r.now+e);r.tick(e)},m&&(r.performance=Object.create(null),r.performance.now=s),d&&(r.hrtime=i),r}return{timers:K,createClock:J,install:function(l){if(arguments.length>1||l instanceof Date||Array.isArray(l)||"number"==typeof l)throw new TypeError(`FakeTimers.install called with ${String(l)} install requires an object parameter`);if(!0===n.Date.isFake)throw new TypeError("Can't install fake timers twice on the same global object.");if((l=void 0!==l?l:{}).shouldAdvanceTime=l.shouldAdvanceTime||!1,l.advanceTimeDelta=l.advanceTimeDelta||20,l.shouldClearNativeTimers=l.shouldClearNativeTimers||!1,l.target)throw new TypeError("config.target is no longer supported. Use `withGlobal(target)` instead.");let e,r;const o=J(l.now,l.loopLimit);if(o.shouldClearNativeTimers=l.shouldClearNativeTimers,o.uninstall=function(){return function(l,e){let t,r,o;for(r=0,o=l.methods.length;r<o;r++){if(t=l.methods[r],"hrtime"===t&&n.process)n.process.hrtime=l._hrtime;else if("nextTick"===t&&n.process)n.process.nextTick=l._nextTick;else if("performance"===t){const e=Object.getOwnPropertyDescriptor(l,`_${t}`);e&&e.get&&!e.set?Object.defineProperty(n,t,e):e.configurable&&(n[t]=l[`_${t}`])}else if(n[t]&&n[t].hadOwnProperty)n[t]=l[`_${t}`];else try{delete n[t]}catch(n){}if(void 0!==l.timersModuleMethods)for(let n=0;n<l.timersModuleMethods.length;n++){const e=l.timersModuleMethods[n];u[e.methodName]=e.original}}return!0===e.shouldAdvanceTime&&n.clearInterval(l.attachedInterval),l.methods=[],l.timers?Object.keys(l.timers).map((function(n){return l.timers[n]})):[]}(o,l)},o.methods=l.toFake||[],0===o.methods.length&&(o.methods=Object.keys(K).filter((function(n){return"nextTick"!==n&&"queueMicrotask"!==n}))),!0===l.shouldAdvanceTime){const e=G.bind(null,o,l.advanceTimeDelta),t=n.setInterval(e,l.advanceTimeDelta);o.attachedInterval=t}if(o.methods.includes("performance")){const e=y?n.performance.constructor.prototype:g?n.Performance.prototype:void 0;if(e)Object.getOwnPropertyNames(e).forEach((function(n){"now"!==n&&(o.performance[n]=0===n.indexOf("getEntries")?s:i)}));else if((l.toFake||[]).includes("performance"))throw new ReferenceError("non-existent performance object cannot be faked")}for(n===t&&u&&(o.timersModuleMethods=[]),e=0,r=o.methods.length;e<r;e++){const l=o.methods[e];if("hrtime"===l?n.process&&"function"==typeof n.process.hrtime&&V(n.process,l,o):"nextTick"===l?n.process&&"function"==typeof n.process.nextTick&&V(n.process,l,o):V(n,l,o),void 0!==o.timersModuleMethods&&u[l]){const e=u[l];o.timersModuleMethods.push({methodName:l,original:e}),u[l]=n[l]}}return o},withGlobal:r}}const o=r(t);l.timers=o.timers,l.createClock=o.createClock,l.install=o.install,l.withGlobal=r},8230:(n,l)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.convertChangesToDMP=function(n){for(var l,e,t=[],u=0;u<n.length;u++)e=(l=n[u]).added?1:l.removed?-1:0,t.push([e,l.value]);return t}},8118:(n,l)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.convertChangesToXML=function(n){for(var l=[],e=0;e<n.length;e++){var t=n[e];t.added?l.push("<ins>"):t.removed&&l.push("<del>"),l.push((u=t.value,u.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;"))),t.added?l.push("</ins>"):t.removed&&l.push("</del>")}var u;return l.join("")}},4938:(n,l,e)=>{"use strict";var t;Object.defineProperty(l,"__esModule",{value:!0}),l.diffArrays=function(n,l,e){return u.diff(n,l,e)},l.arrayDiff=void 0;var u=new(((t=e(7890))&&t.__esModule?t:{default:t}).default);l.arrayDiff=u,u.tokenize=function(n){return n.slice()},u.join=u.removeEmpty=function(n){return n}},7890:(n,l)=>{"use strict";function e(){}function t(n,l,e,t,u){for(var r=0,o=l.length,i=0,s=0;r<o;r++){var a=l[r];if(a.removed){if(a.value=n.join(t.slice(s,s+a.count)),s+=a.count,r&&l[r-1].added){var c=l[r-1];l[r-1]=l[r],l[r]=c}}else{if(!a.added&&u){var d=e.slice(i,i+a.count);d=d.map((function(n,l){var e=t[s+l];return e.length>n.length?e:n})),a.value=n.join(d)}else a.value=n.join(e.slice(i,i+a.count));i+=a.count,a.added||(s+=a.count)}}var h=l[o-1];return o>1&&"string"==typeof h.value&&(h.added||h.removed)&&n.equals("",h.value)&&(l[o-2].value+=h.value,l.pop()),l}Object.defineProperty(l,"__esModule",{value:!0}),l.default=e,e.prototype={diff:function(n,l){var e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},u=e.callback;"function"==typeof e&&(u=e,e={}),this.options=e;var r=this;function o(n){return u?(setTimeout((function(){u(void 0,n)}),0),!0):n}n=this.castInput(n),l=this.castInput(l),n=this.removeEmpty(this.tokenize(n));var i=(l=this.removeEmpty(this.tokenize(l))).length,s=n.length,a=1,c=i+s;e.maxEditLength&&(c=Math.min(c,e.maxEditLength));var d=[{newPos:-1,components:[]}],h=this.extractCommon(d[0],l,n,0);if(d[0].newPos+1>=i&&h+1>=s)return o([{value:this.join(l),count:l.length}]);function f(){for(var e=-1*a;e<=a;e+=2){var u=void 0,c=d[e-1],h=d[e+1],f=(h?h.newPos:0)-e;c&&(d[e-1]=void 0);var p=c&&c.newPos+1<i,m=h&&0<=f&&f<s;if(p||m){if(!p||m&&c.newPos<h.newPos?(u={newPos:(g=h).newPos,components:g.components.slice(0)},r.pushComponent(u.components,void 0,!0)):((u=c).newPos++,r.pushComponent(u.components,!0,void 0)),f=r.extractCommon(u,l,n,e),u.newPos+1>=i&&f+1>=s)return o(t(r,u.components,l,n,r.useLongestToken));d[e]=u}else d[e]=void 0}var g;a++}if(u)!function n(){setTimeout((function(){if(a>c)return u();f()||n()}),0)}();else for(;a<=c;){var p=f();if(p)return p}},pushComponent:function(n,l,e){var t=n[n.length-1];t&&t.added===l&&t.removed===e?n[n.length-1]={count:t.count+1,added:l,removed:e}:n.push({count:1,added:l,removed:e})},extractCommon:function(n,l,e,t){for(var u=l.length,r=e.length,o=n.newPos,i=o-t,s=0;o+1<u&&i+1<r&&this.equals(l[o+1],e[i+1]);)o++,i++,s++;return s&&n.components.push({count:s}),n.newPos=o,i},equals:function(n,l){return this.options.comparator?this.options.comparator(n,l):n===l||this.options.ignoreCase&&n.toLowerCase()===l.toLowerCase()},removeEmpty:function(n){for(var l=[],e=0;e<n.length;e++)n[e]&&l.push(n[e]);return l},castInput:function(n){return n},tokenize:function(n){return n.split("")},join:function(n){return n.join("")}}},2008:(n,l,e)=>{"use strict";var t;Object.defineProperty(l,"__esModule",{value:!0}),l.diffChars=function(n,l,e){return u.diff(n,l,e)},l.characterDiff=void 0;var u=new(((t=e(7890))&&t.__esModule?t:{default:t}).default);l.characterDiff=u},5152:(n,l,e)=>{"use strict";var t;Object.defineProperty(l,"__esModule",{value:!0}),l.diffCss=function(n,l,e){return u.diff(n,l,e)},l.cssDiff=void 0;var u=new(((t=e(7890))&&t.__esModule?t:{default:t}).default);l.cssDiff=u,u.tokenize=function(n){return n.split(/([{}:;,]|\s+)/)}},4641:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.diffJson=function(n,l,e){return s.diff(n,l,e)},l.canonicalize=a,l.jsonDiff=void 0;var t,u=(t=e(7890))&&t.__esModule?t:{default:t},r=e(3641);function o(n){return o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},o(n)}var i=Object.prototype.toString,s=new u.default;function a(n,l,e,t,u){var r,s;for(l=l||[],e=e||[],t&&(n=t(u,n)),r=0;r<l.length;r+=1)if(l[r]===n)return e[r];if("[object Array]"===i.call(n)){for(l.push(n),s=new Array(n.length),e.push(s),r=0;r<n.length;r+=1)s[r]=a(n[r],l,e,t,u);return l.pop(),e.pop(),s}if(n&&n.toJSON&&(n=n.toJSON()),"object"===o(n)&&null!==n){l.push(n),s={},e.push(s);var c,d=[];for(c in n)n.hasOwnProperty(c)&&d.push(c);for(d.sort(),r=0;r<d.length;r+=1)s[c=d[r]]=a(n[c],l,e,t,c);l.pop(),e.pop()}else s=n;return s}l.jsonDiff=s,s.useLongestToken=!0,s.tokenize=r.lineDiff.tokenize,s.castInput=function(n){var l=this.options,e=l.undefinedReplacement,t=l.stringifyReplacer,u=void 0===t?function(n,l){return void 0===l?e:l}:t;return"string"==typeof n?n:JSON.stringify(a(n,null,null,u),u,"  ")},s.equals=function(n,l){return u.default.prototype.equals.call(s,n.replace(/,([\r\n])/g,"$1"),l.replace(/,([\r\n])/g,"$1"))}},3641:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.diffLines=function(n,l,e){return o.diff(n,l,e)},l.diffTrimmedLines=function(n,l,e){var t=(0,r.generateOptions)(e,{ignoreWhitespace:!0});return o.diff(n,l,t)},l.lineDiff=void 0;var t,u=(t=e(7890))&&t.__esModule?t:{default:t},r=e(3856),o=new u.default;l.lineDiff=o,o.tokenize=function(n){var l=[],e=n.split(/(\n|\r\n)/);e[e.length-1]||e.pop();for(var t=0;t<e.length;t++){var u=e[t];t%2&&!this.options.newlineIsToken?l[l.length-1]+=u:(this.options.ignoreWhitespace&&(u=u.trim()),l.push(u))}return l}},7674:(n,l,e)=>{"use strict";var t;Object.defineProperty(l,"__esModule",{value:!0}),l.diffSentences=function(n,l,e){return u.diff(n,l,e)},l.sentenceDiff=void 0;var u=new(((t=e(7890))&&t.__esModule?t:{default:t}).default);l.sentenceDiff=u,u.tokenize=function(n){return n.split(/(\S.+?[.!?])(?=\s+|$)/)}},939:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.diffWords=function(n,l,e){return e=(0,r.generateOptions)(e,{ignoreWhitespace:!0}),s.diff(n,l,e)},l.diffWordsWithSpace=function(n,l,e){return s.diff(n,l,e)},l.wordDiff=void 0;var t,u=(t=e(7890))&&t.__esModule?t:{default:t},r=e(3856),o=/^[A-Za-z\xC0-\u02C6\u02C8-\u02D7\u02DE-\u02FF\u1E00-\u1EFF]+$/,i=/\S/,s=new u.default;l.wordDiff=s,s.equals=function(n,l){return this.options.ignoreCase&&(n=n.toLowerCase(),l=l.toLowerCase()),n===l||this.options.ignoreWhitespace&&!i.test(n)&&!i.test(l)},s.tokenize=function(n){for(var l=n.split(/([^\S\r\n]+|[()[\]{}'"\r\n]|\b)/),e=0;e<l.length-1;e++)!l[e+1]&&l[e+2]&&o.test(l[e])&&o.test(l[e+2])&&(l[e]+=l[e+2],l.splice(e+1,2),e--);return l}},583:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),Object.defineProperty(l,"Diff",{enumerable:!0,get:function(){return u.default}}),Object.defineProperty(l,"diffChars",{enumerable:!0,get:function(){return r.diffChars}}),Object.defineProperty(l,"diffWords",{enumerable:!0,get:function(){return o.diffWords}}),Object.defineProperty(l,"diffWordsWithSpace",{enumerable:!0,get:function(){return o.diffWordsWithSpace}}),Object.defineProperty(l,"diffLines",{enumerable:!0,get:function(){return i.diffLines}}),Object.defineProperty(l,"diffTrimmedLines",{enumerable:!0,get:function(){return i.diffTrimmedLines}}),Object.defineProperty(l,"diffSentences",{enumerable:!0,get:function(){return s.diffSentences}}),Object.defineProperty(l,"diffCss",{enumerable:!0,get:function(){return a.diffCss}}),Object.defineProperty(l,"diffJson",{enumerable:!0,get:function(){return c.diffJson}}),Object.defineProperty(l,"canonicalize",{enumerable:!0,get:function(){return c.canonicalize}}),Object.defineProperty(l,"diffArrays",{enumerable:!0,get:function(){return d.diffArrays}}),Object.defineProperty(l,"applyPatch",{enumerable:!0,get:function(){return h.applyPatch}}),Object.defineProperty(l,"applyPatches",{enumerable:!0,get:function(){return h.applyPatches}}),Object.defineProperty(l,"parsePatch",{enumerable:!0,get:function(){return f.parsePatch}}),Object.defineProperty(l,"merge",{enumerable:!0,get:function(){return p.merge}}),Object.defineProperty(l,"structuredPatch",{enumerable:!0,get:function(){return m.structuredPatch}}),Object.defineProperty(l,"createTwoFilesPatch",{enumerable:!0,get:function(){return m.createTwoFilesPatch}}),Object.defineProperty(l,"createPatch",{enumerable:!0,get:function(){return m.createPatch}}),Object.defineProperty(l,"convertChangesToDMP",{enumerable:!0,get:function(){return g.convertChangesToDMP}}),Object.defineProperty(l,"convertChangesToXML",{enumerable:!0,get:function(){return y.convertChangesToXML}});var t,u=(t=e(7890))&&t.__esModule?t:{default:t},r=e(2008),o=e(939),i=e(3641),s=e(7674),a=e(5152),c=e(4641),d=e(4938),h=e(2890),f=e(517),p=e(6926),m=e(5564),g=e(8230),y=e(8118)},2890:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.applyPatch=o,l.applyPatches=function(n,l){"string"==typeof n&&(n=(0,u.parsePatch)(n));var e=0;!function t(){var u=n[e++];if(!u)return l.complete();l.loadFile(u,(function(n,e){if(n)return l.complete(n);var r=o(e,u,l);l.patched(u,r,(function(n){if(n)return l.complete(n);t()}))}))}()};var t,u=e(517),r=(t=e(2948))&&t.__esModule?t:{default:t};function o(n,l){var e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if("string"==typeof l&&(l=(0,u.parsePatch)(l)),Array.isArray(l)){if(l.length>1)throw new Error("applyPatch only works with a single input.");l=l[0]}var t,o,i=n.split(/\r\n|[\n\v\f\r\x85]/),s=n.match(/\r\n|[\n\v\f\r\x85]/g)||[],a=l.hunks,c=e.compareLine||function(n,l,e,t){return l===t},d=0,h=e.fuzzFactor||0,f=0,p=0;function m(n,l){for(var e=0;e<n.lines.length;e++){var t=n.lines[e],u=t.length>0?t[0]:" ",r=t.length>0?t.substr(1):t;if(" "===u||"-"===u){if(!c(l+1,i[l],u,r)&&++d>h)return!1;l++}}return!0}for(var g=0;g<a.length;g++){for(var y=a[g],v=i.length-y.oldLines,w=0,b=p+y.oldStart-1,S=(0,r.default)(b,f,v);void 0!==w;w=S())if(m(y,b+w)){y.offset=p+=w;break}if(void 0===w)return!1;f=y.offset+y.oldStart+y.oldLines}for(var C=0,D=0;D<a.length;D++){var E=a[D],_=E.oldStart+E.offset+C-1;C+=E.newLines-E.oldLines;for(var k=0;k<E.lines.length;k++){var x=E.lines[k],T=x.length>0?x[0]:" ",P=x.length>0?x.substr(1):x,I=E.linedelimiters[k];if(" "===T)_++;else if("-"===T)i.splice(_,1),s.splice(_,1);else if("+"===T)i.splice(_,0,P),s.splice(_,0,I),_++;else if("\\"===T){var A=E.lines[k-1]?E.lines[k-1][0]:null;"+"===A?t=!0:"-"===A&&(o=!0)}}}if(t)for(;!i[i.length-1];)i.pop(),s.pop();else o&&(i.push(""),s.push("\n"));for(var O=0;O<i.length-1;O++)i[O]=i[O]+s[O];return i.join("")}},5564:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.structuredPatch=o,l.formatPatch=i,l.createTwoFilesPatch=s,l.createPatch=function(n,l,e,t,u,r){return s(n,n,l,e,t,u,r)};var t=e(3641);function u(n){return function(n){if(Array.isArray(n))return r(n)}(n)||function(n){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(n))return Array.from(n)}(n)||function(n,l){if(n){if("string"==typeof n)return r(n,l);var e=Object.prototype.toString.call(n).slice(8,-1);return"Object"===e&&n.constructor&&(e=n.constructor.name),"Map"===e||"Set"===e?Array.from(n):"Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)?r(n,l):void 0}}(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function r(n,l){(null==l||l>n.length)&&(l=n.length);for(var e=0,t=new Array(l);e<l;e++)t[e]=n[e];return t}function o(n,l,e,r,o,i,s){s||(s={}),void 0===s.context&&(s.context=4);var a=(0,t.diffLines)(e,r,s);if(a){a.push({value:"",lines:[]});for(var c=[],d=0,h=0,f=[],p=1,m=1,g=function(n){var l=a[n],t=l.lines||l.value.replace(/\n$/,"").split("\n");if(l.lines=t,l.added||l.removed){var o;if(!d){var i=a[n-1];d=p,h=m,i&&(f=s.context>0?v(i.lines.slice(-s.context)):[],d-=f.length,h-=f.length)}(o=f).push.apply(o,u(t.map((function(n){return(l.added?"+":"-")+n})))),l.added?m+=t.length:p+=t.length}else{if(d)if(t.length<=2*s.context&&n<a.length-2){var g;(g=f).push.apply(g,u(v(t)))}else{var y,w=Math.min(t.length,s.context);(y=f).push.apply(y,u(v(t.slice(0,w))));var b={oldStart:d,oldLines:p-d+w,newStart:h,newLines:m-h+w,lines:f};if(n>=a.length-2&&t.length<=s.context){var S=/\n$/.test(e),C=/\n$/.test(r),D=0==t.length&&f.length>b.oldLines;!S&&D&&e.length>0&&f.splice(b.oldLines,0,"\\ No newline at end of file"),(S||D)&&C||f.push("\\ No newline at end of file")}c.push(b),d=0,h=0,f=[]}p+=t.length,m+=t.length}},y=0;y<a.length;y++)g(y);return{oldFileName:n,newFileName:l,oldHeader:o,newHeader:i,hunks:c}}function v(n){return n.map((function(n){return" "+n}))}}function i(n){var l=[];n.oldFileName==n.newFileName&&l.push("Index: "+n.oldFileName),l.push("==================================================================="),l.push("--- "+n.oldFileName+(void 0===n.oldHeader?"":"\t"+n.oldHeader)),l.push("+++ "+n.newFileName+(void 0===n.newHeader?"":"\t"+n.newHeader));for(var e=0;e<n.hunks.length;e++){var t=n.hunks[e];0===t.oldLines&&(t.oldStart-=1),0===t.newLines&&(t.newStart-=1),l.push("@@ -"+t.oldStart+","+t.oldLines+" +"+t.newStart+","+t.newLines+" @@"),l.push.apply(l,t.lines)}return l.join("\n")+"\n"}function s(n,l,e,t,u,r,s){return i(o(n,l,e,t,u,r,s))}},6926:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.calcLineCount=s,l.merge=function(n,l,e){n=a(n,e),l=a(l,e);var t={};(n.index||l.index)&&(t.index=n.index||l.index),(n.newFileName||l.newFileName)&&(c(n)?c(l)?(t.oldFileName=d(t,n.oldFileName,l.oldFileName),t.newFileName=d(t,n.newFileName,l.newFileName),t.oldHeader=d(t,n.oldHeader,l.oldHeader),t.newHeader=d(t,n.newHeader,l.newHeader)):(t.oldFileName=n.oldFileName,t.newFileName=n.newFileName,t.oldHeader=n.oldHeader,t.newHeader=n.newHeader):(t.oldFileName=l.oldFileName||n.oldFileName,t.newFileName=l.newFileName||n.newFileName,t.oldHeader=l.oldHeader||n.oldHeader,t.newHeader=l.newHeader||n.newHeader)),t.hunks=[];for(var u=0,r=0,o=0,i=0;u<n.hunks.length||r<l.hunks.length;){var s=n.hunks[u]||{oldStart:1/0},m=l.hunks[r]||{oldStart:1/0};if(h(s,m))t.hunks.push(f(s,o)),u++,i+=s.newLines-s.oldLines;else if(h(m,s))t.hunks.push(f(m,i)),r++,o+=m.newLines-m.oldLines;else{var g={oldStart:Math.min(s.oldStart,m.oldStart),oldLines:0,newStart:Math.min(s.newStart+o,m.oldStart+i),newLines:0,lines:[]};p(g,s.oldStart,s.lines,m.oldStart,m.lines),r++,u++,t.hunks.push(g)}}return t};var t=e(5564),u=e(517),r=e(2313);function o(n){return function(n){if(Array.isArray(n))return i(n)}(n)||function(n){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(n))return Array.from(n)}(n)||function(n,l){if(n){if("string"==typeof n)return i(n,l);var e=Object.prototype.toString.call(n).slice(8,-1);return"Object"===e&&n.constructor&&(e=n.constructor.name),"Map"===e||"Set"===e?Array.from(n):"Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)?i(n,l):void 0}}(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function i(n,l){(null==l||l>n.length)&&(l=n.length);for(var e=0,t=new Array(l);e<l;e++)t[e]=n[e];return t}function s(n){var l=D(n.lines),e=l.oldLines,t=l.newLines;void 0!==e?n.oldLines=e:delete n.oldLines,void 0!==t?n.newLines=t:delete n.newLines}function a(n,l){if("string"==typeof n){if(/^@@/m.test(n)||/^Index:/m.test(n))return(0,u.parsePatch)(n)[0];if(!l)throw new Error("Must provide a base reference or pass in a patch");return(0,t.structuredPatch)(void 0,void 0,l,n)}return n}function c(n){return n.newFileName&&n.newFileName!==n.oldFileName}function d(n,l,e){return l===e?l:(n.conflict=!0,{mine:l,theirs:e})}function h(n,l){return n.oldStart<l.oldStart&&n.oldStart+n.oldLines<l.oldStart}function f(n,l){return{oldStart:n.oldStart,oldLines:n.oldLines,newStart:n.newStart+l,newLines:n.newLines,lines:n.lines}}function p(n,l,e,t,u){var r={offset:l,lines:e,index:0},i={offset:t,lines:u,index:0};for(v(n,r,i),v(n,i,r);r.index<r.lines.length&&i.index<i.lines.length;){var a=r.lines[r.index],c=i.lines[i.index];if("-"!==a[0]&&"+"!==a[0]||"-"!==c[0]&&"+"!==c[0])if("+"===a[0]&&" "===c[0]){var d;(d=n.lines).push.apply(d,o(b(r)))}else if("+"===c[0]&&" "===a[0]){var h;(h=n.lines).push.apply(h,o(b(i)))}else"-"===a[0]&&" "===c[0]?g(n,r,i):"-"===c[0]&&" "===a[0]?g(n,i,r,!0):a===c?(n.lines.push(a),r.index++,i.index++):y(n,b(r),b(i));else m(n,r,i)}w(n,r),w(n,i),s(n)}function m(n,l,e){var t=b(l),u=b(e);if(S(t)&&S(u)){var i,s;if((0,r.arrayStartsWith)(t,u)&&C(e,t,t.length-u.length))return void(i=n.lines).push.apply(i,o(t));if((0,r.arrayStartsWith)(u,t)&&C(l,u,u.length-t.length))return void(s=n.lines).push.apply(s,o(u))}else if((0,r.arrayEqual)(t,u)){var a;return void(a=n.lines).push.apply(a,o(t))}y(n,t,u)}function g(n,l,e,t){var u,r=b(l),i=function(n,l){for(var e=[],t=[],u=0,r=!1,o=!1;u<l.length&&n.index<n.lines.length;){var i=n.lines[n.index],s=l[u];if("+"===s[0])break;if(r=r||" "!==i[0],t.push(s),u++,"+"===i[0])for(o=!0;"+"===i[0];)e.push(i),i=n.lines[++n.index];s.substr(1)===i.substr(1)?(e.push(i),n.index++):o=!0}if("+"===(l[u]||"")[0]&&r&&(o=!0),o)return e;for(;u<l.length;)t.push(l[u++]);return{merged:t,changes:e}}(e,r);i.merged?(u=n.lines).push.apply(u,o(i.merged)):y(n,t?i:r,t?r:i)}function y(n,l,e){n.conflict=!0,n.lines.push({conflict:!0,mine:l,theirs:e})}function v(n,l,e){for(;l.offset<e.offset&&l.index<l.lines.length;){var t=l.lines[l.index++];n.lines.push(t),l.offset++}}function w(n,l){for(;l.index<l.lines.length;){var e=l.lines[l.index++];n.lines.push(e)}}function b(n){for(var l=[],e=n.lines[n.index][0];n.index<n.lines.length;){var t=n.lines[n.index];if("-"===e&&"+"===t[0]&&(e="+"),e!==t[0])break;l.push(t),n.index++}return l}function S(n){return n.reduce((function(n,l){return n&&"-"===l[0]}),!0)}function C(n,l,e){for(var t=0;t<e;t++){var u=l[l.length-e+t].substr(1);if(n.lines[n.index+t]!==" "+u)return!1}return n.index+=e,!0}function D(n){var l=0,e=0;return n.forEach((function(n){if("string"!=typeof n){var t=D(n.mine),u=D(n.theirs);void 0!==l&&(t.oldLines===u.oldLines?l+=t.oldLines:l=void 0),void 0!==e&&(t.newLines===u.newLines?e+=t.newLines:e=void 0)}else void 0===e||"+"!==n[0]&&" "!==n[0]||e++,void 0===l||"-"!==n[0]&&" "!==n[0]||l++})),{oldLines:l,newLines:e}}},517:(n,l)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.parsePatch=function(n){var l=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},e=n.split(/\r\n|[\n\v\f\r\x85]/),t=n.match(/\r\n|[\n\v\f\r\x85]/g)||[],u=[],r=0;function o(){var n={};for(u.push(n);r<e.length;){var t=e[r];if(/^(\-\-\-|\+\+\+|@@)\s/.test(t))break;var o=/^(?:Index:|diff(?: -r \w+)+)\s+(.+?)\s*$/.exec(t);o&&(n.index=o[1]),r++}for(i(n),i(n),n.hunks=[];r<e.length;){var a=e[r];if(/^(Index:|diff|\-\-\-|\+\+\+)\s/.test(a))break;if(/^@@/.test(a))n.hunks.push(s());else{if(a&&l.strict)throw new Error("Unknown line "+(r+1)+" "+JSON.stringify(a));r++}}}function i(n){var l=/^(---|\+\+\+)\s+(.*)$/.exec(e[r]);if(l){var t="---"===l[1]?"old":"new",u=l[2].split("\t",2),o=u[0].replace(/\\\\/g,"\\");/^".*"$/.test(o)&&(o=o.substr(1,o.length-2)),n[t+"FileName"]=o,n[t+"Header"]=(u[1]||"").trim(),r++}}function s(){var n=r,u=e[r++].split(/@@ -(\d+)(?:,(\d+))? \+(\d+)(?:,(\d+))? @@/),o={oldStart:+u[1],oldLines:void 0===u[2]?1:+u[2],newStart:+u[3],newLines:void 0===u[4]?1:+u[4],lines:[],linedelimiters:[]};0===o.oldLines&&(o.oldStart+=1),0===o.newLines&&(o.newStart+=1);for(var i=0,s=0;r<e.length&&!(0===e[r].indexOf("--- ")&&r+2<e.length&&0===e[r+1].indexOf("+++ ")&&0===e[r+2].indexOf("@@"));r++){var a=0==e[r].length&&r!=e.length-1?" ":e[r][0];if("+"!==a&&"-"!==a&&" "!==a&&"\\"!==a)break;o.lines.push(e[r]),o.linedelimiters.push(t[r]||"\n"),"+"===a?i++:"-"===a?s++:" "===a&&(i++,s++)}if(i||1!==o.newLines||(o.newLines=0),s||1!==o.oldLines||(o.oldLines=0),l.strict){if(i!==o.newLines)throw new Error("Added line count did not match for hunk at line "+(n+1));if(s!==o.oldLines)throw new Error("Removed line count did not match for hunk at line "+(n+1))}return o}for(;r<e.length;)o();return u}},2313:(n,l)=>{"use strict";function e(n,l){if(l.length>n.length)return!1;for(var e=0;e<l.length;e++)if(l[e]!==n[e])return!1;return!0}Object.defineProperty(l,"__esModule",{value:!0}),l.arrayEqual=function(n,l){return n.length===l.length&&e(n,l)},l.arrayStartsWith=e},2948:(n,l)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.default=function(n,l,e){var t=!0,u=!1,r=!1,o=1;return function i(){if(t&&!r){if(u?o++:t=!1,n+o<=e)return o;r=!0}if(!u)return r||(t=!0),l<=n-o?-o++:(u=!0,i())}}},3856:(n,l)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.generateOptions=function(n,l){if("function"==typeof n)l.callback=n;else if(n)for(var e in n)n.hasOwnProperty(e)&&(l[e]=n[e]);return l}},975:(n,l,e)=>{"use strict";const t=e(6108),u=e(8124),r=e(4083),o=["",""],i=n=>`${o[0]}[${n}m`,s=(n,l,e)=>{let t=[];n=[...n];for(let e of n){const u=e;e.includes(";")&&(e=e.split(";")[0][0]+"0");const o=r.codes.get(Number.parseInt(e,10));if(o){const e=n.indexOf(o.toString());-1===e?t.push(i(l?o:u)):n.splice(e,1)}else{if(l){t.push(i(0));break}t.push(i(u))}}if(l&&(t=t.filter(((n,l)=>t.indexOf(n)===l)),void 0!==e)){const n=i(r.codes.get(Number.parseInt(e,10)));t=t.reduce(((l,e)=>e===n?[e,...l]:[...l,e]),[])}return t.join("")};n.exports=(n,l,e)=>{const r=[...n],i=[];let a,c="number"==typeof e?e:r.length,d=!1,h=0,f="";for(const[p,m]of r.entries()){let r=!1;if(o.includes(m)){const l=/\d[^m]*/.exec(n.slice(p,p+18));a=l&&l.length>0?l[0]:void 0,h<c&&(d=!0,void 0!==a&&i.push(a))}else d&&"m"===m&&(d=!1,r=!0);if(d||r||h++,!u({exact:!0}).test(m)&&t(m.codePointAt())&&(h++,"number"!=typeof e&&c++),h>l&&h<=c)f+=m;else if(h!==l||d||void 0===a){if(h>=c){f+=s(i,!0,a);break}}else f=s(i)}return f}},7575:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0});const t=e(1725);class u{constructor(n){if(this.length=0,this._encoding="utf8",this._writeOffset=0,this._readOffset=0,u.isSmartBufferOptions(n))if(n.encoding&&(t.checkEncoding(n.encoding),this._encoding=n.encoding),n.size){if(!(t.isFiniteInteger(n.size)&&n.size>0))throw new Error(t.ERRORS.INVALID_SMARTBUFFER_SIZE);this._buff=Buffer.allocUnsafe(n.size)}else if(n.buff){if(!Buffer.isBuffer(n.buff))throw new Error(t.ERRORS.INVALID_SMARTBUFFER_BUFFER);this._buff=n.buff,this.length=n.buff.length}else this._buff=Buffer.allocUnsafe(4096);else{if(void 0!==n)throw new Error(t.ERRORS.INVALID_SMARTBUFFER_OBJECT);this._buff=Buffer.allocUnsafe(4096)}}static fromSize(n,l){return new this({size:n,encoding:l})}static fromBuffer(n,l){return new this({buff:n,encoding:l})}static fromOptions(n){return new this(n)}static isSmartBufferOptions(n){const l=n;return l&&(void 0!==l.encoding||void 0!==l.size||void 0!==l.buff)}readInt8(n){return this._readNumberValue(Buffer.prototype.readInt8,1,n)}readInt16BE(n){return this._readNumberValue(Buffer.prototype.readInt16BE,2,n)}readInt16LE(n){return this._readNumberValue(Buffer.prototype.readInt16LE,2,n)}readInt32BE(n){return this._readNumberValue(Buffer.prototype.readInt32BE,4,n)}readInt32LE(n){return this._readNumberValue(Buffer.prototype.readInt32LE,4,n)}readBigInt64BE(n){return t.bigIntAndBufferInt64Check("readBigInt64BE"),this._readNumberValue(Buffer.prototype.readBigInt64BE,8,n)}readBigInt64LE(n){return t.bigIntAndBufferInt64Check("readBigInt64LE"),this._readNumberValue(Buffer.prototype.readBigInt64LE,8,n)}writeInt8(n,l){return this._writeNumberValue(Buffer.prototype.writeInt8,1,n,l),this}insertInt8(n,l){return this._insertNumberValue(Buffer.prototype.writeInt8,1,n,l)}writeInt16BE(n,l){return this._writeNumberValue(Buffer.prototype.writeInt16BE,2,n,l)}insertInt16BE(n,l){return this._insertNumberValue(Buffer.prototype.writeInt16BE,2,n,l)}writeInt16LE(n,l){return this._writeNumberValue(Buffer.prototype.writeInt16LE,2,n,l)}insertInt16LE(n,l){return this._insertNumberValue(Buffer.prototype.writeInt16LE,2,n,l)}writeInt32BE(n,l){return this._writeNumberValue(Buffer.prototype.writeInt32BE,4,n,l)}insertInt32BE(n,l){return this._insertNumberValue(Buffer.prototype.writeInt32BE,4,n,l)}writeInt32LE(n,l){return this._writeNumberValue(Buffer.prototype.writeInt32LE,4,n,l)}insertInt32LE(n,l){return this._insertNumberValue(Buffer.prototype.writeInt32LE,4,n,l)}writeBigInt64BE(n,l){return t.bigIntAndBufferInt64Check("writeBigInt64BE"),this._writeNumberValue(Buffer.prototype.writeBigInt64BE,8,n,l)}insertBigInt64BE(n,l){return t.bigIntAndBufferInt64Check("writeBigInt64BE"),this._insertNumberValue(Buffer.prototype.writeBigInt64BE,8,n,l)}writeBigInt64LE(n,l){return t.bigIntAndBufferInt64Check("writeBigInt64LE"),this._writeNumberValue(Buffer.prototype.writeBigInt64LE,8,n,l)}insertBigInt64LE(n,l){return t.bigIntAndBufferInt64Check("writeBigInt64LE"),this._insertNumberValue(Buffer.prototype.writeBigInt64LE,8,n,l)}readUInt8(n){return this._readNumberValue(Buffer.prototype.readUInt8,1,n)}readUInt16BE(n){return this._readNumberValue(Buffer.prototype.readUInt16BE,2,n)}readUInt16LE(n){return this._readNumberValue(Buffer.prototype.readUInt16LE,2,n)}readUInt32BE(n){return this._readNumberValue(Buffer.prototype.readUInt32BE,4,n)}readUInt32LE(n){return this._readNumberValue(Buffer.prototype.readUInt32LE,4,n)}readBigUInt64BE(n){return t.bigIntAndBufferInt64Check("readBigUInt64BE"),this._readNumberValue(Buffer.prototype.readBigUInt64BE,8,n)}readBigUInt64LE(n){return t.bigIntAndBufferInt64Check("readBigUInt64LE"),this._readNumberValue(Buffer.prototype.readBigUInt64LE,8,n)}writeUInt8(n,l){return this._writeNumberValue(Buffer.prototype.writeUInt8,1,n,l)}insertUInt8(n,l){return this._insertNumberValue(Buffer.prototype.writeUInt8,1,n,l)}writeUInt16BE(n,l){return this._writeNumberValue(Buffer.prototype.writeUInt16BE,2,n,l)}insertUInt16BE(n,l){return this._insertNumberValue(Buffer.prototype.writeUInt16BE,2,n,l)}writeUInt16LE(n,l){return this._writeNumberValue(Buffer.prototype.writeUInt16LE,2,n,l)}insertUInt16LE(n,l){return this._insertNumberValue(Buffer.prototype.writeUInt16LE,2,n,l)}writeUInt32BE(n,l){return this._writeNumberValue(Buffer.prototype.writeUInt32BE,4,n,l)}insertUInt32BE(n,l){return this._insertNumberValue(Buffer.prototype.writeUInt32BE,4,n,l)}writeUInt32LE(n,l){return this._writeNumberValue(Buffer.prototype.writeUInt32LE,4,n,l)}insertUInt32LE(n,l){return this._insertNumberValue(Buffer.prototype.writeUInt32LE,4,n,l)}writeBigUInt64BE(n,l){return t.bigIntAndBufferInt64Check("writeBigUInt64BE"),this._writeNumberValue(Buffer.prototype.writeBigUInt64BE,8,n,l)}insertBigUInt64BE(n,l){return t.bigIntAndBufferInt64Check("writeBigUInt64BE"),this._insertNumberValue(Buffer.prototype.writeBigUInt64BE,8,n,l)}writeBigUInt64LE(n,l){return t.bigIntAndBufferInt64Check("writeBigUInt64LE"),this._writeNumberValue(Buffer.prototype.writeBigUInt64LE,8,n,l)}insertBigUInt64LE(n,l){return t.bigIntAndBufferInt64Check("writeBigUInt64LE"),this._insertNumberValue(Buffer.prototype.writeBigUInt64LE,8,n,l)}readFloatBE(n){return this._readNumberValue(Buffer.prototype.readFloatBE,4,n)}readFloatLE(n){return this._readNumberValue(Buffer.prototype.readFloatLE,4,n)}writeFloatBE(n,l){return this._writeNumberValue(Buffer.prototype.writeFloatBE,4,n,l)}insertFloatBE(n,l){return this._insertNumberValue(Buffer.prototype.writeFloatBE,4,n,l)}writeFloatLE(n,l){return this._writeNumberValue(Buffer.prototype.writeFloatLE,4,n,l)}insertFloatLE(n,l){return this._insertNumberValue(Buffer.prototype.writeFloatLE,4,n,l)}readDoubleBE(n){return this._readNumberValue(Buffer.prototype.readDoubleBE,8,n)}readDoubleLE(n){return this._readNumberValue(Buffer.prototype.readDoubleLE,8,n)}writeDoubleBE(n,l){return this._writeNumberValue(Buffer.prototype.writeDoubleBE,8,n,l)}insertDoubleBE(n,l){return this._insertNumberValue(Buffer.prototype.writeDoubleBE,8,n,l)}writeDoubleLE(n,l){return this._writeNumberValue(Buffer.prototype.writeDoubleLE,8,n,l)}insertDoubleLE(n,l){return this._insertNumberValue(Buffer.prototype.writeDoubleLE,8,n,l)}readString(n,l){let e;"number"==typeof n?(t.checkLengthValue(n),e=Math.min(n,this.length-this._readOffset)):(l=n,e=this.length-this._readOffset),void 0!==l&&t.checkEncoding(l);const u=this._buff.slice(this._readOffset,this._readOffset+e).toString(l||this._encoding);return this._readOffset+=e,u}insertString(n,l,e){return t.checkOffsetValue(l),this._handleString(n,!0,l,e)}writeString(n,l,e){return this._handleString(n,!1,l,e)}readStringNT(n){void 0!==n&&t.checkEncoding(n);let l=this.length;for(let n=this._readOffset;n<this.length;n++)if(0===this._buff[n]){l=n;break}const e=this._buff.slice(this._readOffset,l);return this._readOffset=l+1,e.toString(n||this._encoding)}insertStringNT(n,l,e){return t.checkOffsetValue(l),this.insertString(n,l,e),this.insertUInt8(0,l+n.length),this}writeStringNT(n,l,e){return this.writeString(n,l,e),this.writeUInt8(0,"number"==typeof l?l+n.length:this.writeOffset),this}readBuffer(n){void 0!==n&&t.checkLengthValue(n);const l="number"==typeof n?n:this.length,e=Math.min(this.length,this._readOffset+l),u=this._buff.slice(this._readOffset,e);return this._readOffset=e,u}insertBuffer(n,l){return t.checkOffsetValue(l),this._handleBuffer(n,!0,l)}writeBuffer(n,l){return this._handleBuffer(n,!1,l)}readBufferNT(){let n=this.length;for(let l=this._readOffset;l<this.length;l++)if(0===this._buff[l]){n=l;break}const l=this._buff.slice(this._readOffset,n);return this._readOffset=n+1,l}insertBufferNT(n,l){return t.checkOffsetValue(l),this.insertBuffer(n,l),this.insertUInt8(0,l+n.length),this}writeBufferNT(n,l){return void 0!==l&&t.checkOffsetValue(l),this.writeBuffer(n,l),this.writeUInt8(0,"number"==typeof l?l+n.length:this._writeOffset),this}clear(){return this._writeOffset=0,this._readOffset=0,this.length=0,this}remaining(){return this.length-this._readOffset}get readOffset(){return this._readOffset}set readOffset(n){t.checkOffsetValue(n),t.checkTargetOffset(n,this),this._readOffset=n}get writeOffset(){return this._writeOffset}set writeOffset(n){t.checkOffsetValue(n),t.checkTargetOffset(n,this),this._writeOffset=n}get encoding(){return this._encoding}set encoding(n){t.checkEncoding(n),this._encoding=n}get internalBuffer(){return this._buff}toBuffer(){return this._buff.slice(0,this.length)}toString(n){const l="string"==typeof n?n:this._encoding;return t.checkEncoding(l),this._buff.toString(l,0,this.length)}destroy(){return this.clear(),this}_handleString(n,l,e,u){let r=this._writeOffset,o=this._encoding;"number"==typeof e?r=e:"string"==typeof e&&(t.checkEncoding(e),o=e),"string"==typeof u&&(t.checkEncoding(u),o=u);const i=Buffer.byteLength(n,o);return l?this.ensureInsertable(i,r):this._ensureWriteable(i,r),this._buff.write(n,r,i,o),l?this._writeOffset+=i:"number"==typeof e?this._writeOffset=Math.max(this._writeOffset,r+i):this._writeOffset+=i,this}_handleBuffer(n,l,e){const t="number"==typeof e?e:this._writeOffset;return l?this.ensureInsertable(n.length,t):this._ensureWriteable(n.length,t),n.copy(this._buff,t),l?this._writeOffset+=n.length:"number"==typeof e?this._writeOffset=Math.max(this._writeOffset,t+n.length):this._writeOffset+=n.length,this}ensureReadable(n,l){let e=this._readOffset;if(void 0!==l&&(t.checkOffsetValue(l),e=l),e<0||e+n>this.length)throw new Error(t.ERRORS.INVALID_READ_BEYOND_BOUNDS)}ensureInsertable(n,l){t.checkOffsetValue(l),this._ensureCapacity(this.length+n),l<this.length&&this._buff.copy(this._buff,l+n,l,this._buff.length),l+n>this.length?this.length=l+n:this.length+=n}_ensureWriteable(n,l){const e="number"==typeof l?l:this._writeOffset;this._ensureCapacity(e+n),e+n>this.length&&(this.length=e+n)}_ensureCapacity(n){const l=this._buff.length;if(n>l){let e=this._buff,t=3*l/2+1;t<n&&(t=n),this._buff=Buffer.allocUnsafe(t),e.copy(this._buff,0,0,l)}}_readNumberValue(n,l,e){this.ensureReadable(l,e);const t=n.call(this._buff,"number"==typeof e?e:this._readOffset);return void 0===e&&(this._readOffset+=l),t}_insertNumberValue(n,l,e,u){return t.checkOffsetValue(u),this.ensureInsertable(l,u),n.call(this._buff,e,u),this._writeOffset+=l,this}_writeNumberValue(n,l,e,u){if("number"==typeof u){if(u<0)throw new Error(t.ERRORS.INVALID_WRITE_BEYOND_BOUNDS);t.checkOffsetValue(u)}const r="number"==typeof u?u:this._writeOffset;return this._ensureWriteable(l,r),n.call(this._buff,e,r),"number"==typeof u?this._writeOffset=Math.max(this._writeOffset,r+l):this._writeOffset+=l,this}}l.SmartBuffer=u},1725:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0});const t=e(181),u={INVALID_ENCODING:"Invalid encoding provided. Please specify a valid encoding the internal Node.js Buffer supports.",INVALID_SMARTBUFFER_SIZE:"Invalid size provided. Size must be a valid integer greater than zero.",INVALID_SMARTBUFFER_BUFFER:"Invalid Buffer provided in SmartBufferOptions.",INVALID_SMARTBUFFER_OBJECT:"Invalid SmartBufferOptions object supplied to SmartBuffer constructor or factory methods.",INVALID_OFFSET:"An invalid offset value was provided.",INVALID_OFFSET_NON_NUMBER:"An invalid offset value was provided. A numeric value is required.",INVALID_LENGTH:"An invalid length value was provided.",INVALID_LENGTH_NON_NUMBER:"An invalid length value was provived. A numeric value is required.",INVALID_TARGET_OFFSET:"Target offset is beyond the bounds of the internal SmartBuffer data.",INVALID_TARGET_LENGTH:"Specified length value moves cursor beyong the bounds of the internal SmartBuffer data.",INVALID_READ_BEYOND_BOUNDS:"Attempted to read beyond the bounds of the managed data.",INVALID_WRITE_BEYOND_BOUNDS:"Attempted to write beyond the bounds of the managed data."};function r(n){return"number"==typeof n&&isFinite(n)&&function(n){return"number"==typeof n&&isFinite(n)&&Math.floor(n)===n}(n)}function o(n,l){if("number"!=typeof n)throw new Error(l?u.INVALID_OFFSET_NON_NUMBER:u.INVALID_LENGTH_NON_NUMBER);if(!r(n)||n<0)throw new Error(l?u.INVALID_OFFSET:u.INVALID_LENGTH)}l.ERRORS=u,l.checkEncoding=function(n){if(!t.Buffer.isEncoding(n))throw new Error(u.INVALID_ENCODING)},l.isFiniteInteger=r,l.checkLengthValue=function(n){o(n,!1)},l.checkOffsetValue=function(n){o(n,!0)},l.checkTargetOffset=function(n,l){if(n<0||n>l.length)throw new Error(u.INVALID_TARGET_OFFSET)},l.bigIntAndBufferInt64Check=function(n){if("undefined"==typeof BigInt)throw new Error("Platform does not support JS BigInt type.");if(void 0===t.Buffer.prototype[n])throw new Error(`Platform does not support Buffer.prototype.${n}.`)}},7631:function(n,l,e){"use strict";var t=this&&this.__awaiter||function(n,l,e,t){return new(e||(e=Promise))((function(u,r){function o(n){try{s(t.next(n))}catch(n){r(n)}}function i(n){try{s(t.throw(n))}catch(n){r(n)}}function s(n){var l;n.done?u(n.value):(l=n.value,l instanceof e?l:new e((function(n){n(l)}))).then(o,i)}s((t=t.apply(n,l||[])).next())}))};Object.defineProperty(l,"__esModule",{value:!0}),l.SocksClientError=l.SocksClient=void 0;const u=e(4434),r=e(9278),o=e(7575),i=e(5438),s=e(7130),a=e(7736),c=e(3763);Object.defineProperty(l,"SocksClientError",{enumerable:!0,get:function(){return c.SocksClientError}});const d=e(9424);class h extends u.EventEmitter{constructor(n){super(),this.options=Object.assign({},n),(0,s.validateSocksClientOptions)(n),this.setState(i.SocksClientState.Created)}static createConnection(n,l){return new Promise(((e,t)=>{try{(0,s.validateSocksClientOptions)(n,["connect"])}catch(n){return"function"==typeof l?(l(n),e(n)):t(n)}const u=new h(n);u.connect(n.existing_socket),u.once("established",(n=>{u.removeAllListeners(),"function"==typeof l?(l(null,n),e(n)):e(n)})),u.once("error",(n=>{u.removeAllListeners(),"function"==typeof l?(l(n),e(n)):t(n)}))}))}static createConnectionChain(n,l){return new Promise(((e,u)=>t(this,void 0,void 0,(function*(){try{(0,s.validateSocksClientChainOptions)(n)}catch(n){return"function"==typeof l?(l(n),e(n)):u(n)}n.randomizeChain&&(0,c.shuffleArray)(n.proxies);try{let t;for(let l=0;l<n.proxies.length;l++){const e=n.proxies[l],u=l===n.proxies.length-1?n.destination:{host:n.proxies[l+1].host||n.proxies[l+1].ipaddress,port:n.proxies[l+1].port},r=yield h.createConnection({command:"connect",proxy:e,destination:u,existing_socket:t});t=t||r.socket}"function"==typeof l?(l(null,{socket:t}),e({socket:t})):e({socket:t})}catch(n){"function"==typeof l?(l(n),e(n)):u(n)}}))))}static createUDPFrame(n){const l=new o.SmartBuffer;return l.writeUInt16BE(0),l.writeUInt8(n.frameNumber||0),r.isIPv4(n.remoteHost.host)?(l.writeUInt8(i.Socks5HostType.IPv4),l.writeUInt32BE((0,s.ipv4ToInt32)(n.remoteHost.host))):r.isIPv6(n.remoteHost.host)?(l.writeUInt8(i.Socks5HostType.IPv6),l.writeBuffer((0,s.ipToBuffer)(n.remoteHost.host))):(l.writeUInt8(i.Socks5HostType.Hostname),l.writeUInt8(Buffer.byteLength(n.remoteHost.host)),l.writeString(n.remoteHost.host)),l.writeUInt16BE(n.remoteHost.port),l.writeBuffer(n.data),l.toBuffer()}static parseUDPFrame(n){const l=o.SmartBuffer.fromBuffer(n);l.readOffset=2;const e=l.readUInt8(),t=l.readUInt8();let u;return u=t===i.Socks5HostType.IPv4?(0,s.int32ToIpv4)(l.readUInt32BE()):t===i.Socks5HostType.IPv6?d.Address6.fromByteArray(Array.from(l.readBuffer(16))).canonicalForm():l.readString(l.readUInt8()),{frameNumber:e,remoteHost:{host:u,port:l.readUInt16BE()},data:l.readBuffer()}}setState(n){this.state!==i.SocksClientState.Error&&(this.state=n)}connect(n){this.onDataReceived=n=>this.onDataReceivedHandler(n),this.onClose=()=>this.onCloseHandler(),this.onError=n=>this.onErrorHandler(n),this.onConnect=()=>this.onConnectHandler();const l=setTimeout((()=>this.onEstablishedTimeout()),this.options.timeout||i.DEFAULT_TIMEOUT);l.unref&&"function"==typeof l.unref&&l.unref(),this.socket=n||new r.Socket,this.socket.once("close",this.onClose),this.socket.once("error",this.onError),this.socket.once("connect",this.onConnect),this.socket.on("data",this.onDataReceived),this.setState(i.SocksClientState.Connecting),this.receiveBuffer=new a.ReceiveBuffer,n?this.socket.emit("connect"):(this.socket.connect(this.getSocketOptions()),void 0!==this.options.set_tcp_nodelay&&null!==this.options.set_tcp_nodelay&&this.socket.setNoDelay(!!this.options.set_tcp_nodelay)),this.prependOnceListener("established",(n=>{setImmediate((()=>{if(this.receiveBuffer.length>0){const l=this.receiveBuffer.get(this.receiveBuffer.length);n.socket.emit("data",l)}n.socket.resume()}))}))}getSocketOptions(){return Object.assign(Object.assign({},this.options.socket_options),{host:this.options.proxy.host||this.options.proxy.ipaddress,port:this.options.proxy.port})}onEstablishedTimeout(){this.state!==i.SocksClientState.Established&&this.state!==i.SocksClientState.BoundWaitingForConnection&&this.closeSocket(i.ERRORS.ProxyConnectionTimedOut)}onConnectHandler(){this.setState(i.SocksClientState.Connected),4===this.options.proxy.type?this.sendSocks4InitialHandshake():this.sendSocks5InitialHandshake(),this.setState(i.SocksClientState.SentInitialHandshake)}onDataReceivedHandler(n){this.receiveBuffer.append(n),this.processData()}processData(){for(;this.state!==i.SocksClientState.Established&&this.state!==i.SocksClientState.Error&&this.receiveBuffer.length>=this.nextRequiredPacketBufferSize;)if(this.state===i.SocksClientState.SentInitialHandshake)4===this.options.proxy.type?this.handleSocks4FinalHandshakeResponse():this.handleInitialSocks5HandshakeResponse();else if(this.state===i.SocksClientState.SentAuthentication)this.handleInitialSocks5AuthenticationHandshakeResponse();else if(this.state===i.SocksClientState.SentFinalHandshake)this.handleSocks5FinalHandshakeResponse();else{if(this.state!==i.SocksClientState.BoundWaitingForConnection){this.closeSocket(i.ERRORS.InternalError);break}4===this.options.proxy.type?this.handleSocks4IncomingConnectionResponse():this.handleSocks5IncomingConnectionResponse()}}onCloseHandler(){this.closeSocket(i.ERRORS.SocketClosed)}onErrorHandler(n){this.closeSocket(n.message)}removeInternalSocketHandlers(){this.socket.pause(),this.socket.removeListener("data",this.onDataReceived),this.socket.removeListener("close",this.onClose),this.socket.removeListener("error",this.onError),this.socket.removeListener("connect",this.onConnect)}closeSocket(n){this.state!==i.SocksClientState.Error&&(this.setState(i.SocksClientState.Error),this.socket.destroy(),this.removeInternalSocketHandlers(),this.emit("error",new c.SocksClientError(n,this.options)))}sendSocks4InitialHandshake(){const n=this.options.proxy.userId||"",l=new o.SmartBuffer;l.writeUInt8(4),l.writeUInt8(i.SocksCommand[this.options.command]),l.writeUInt16BE(this.options.destination.port),r.isIPv4(this.options.destination.host)?(l.writeBuffer((0,s.ipToBuffer)(this.options.destination.host)),l.writeStringNT(n)):(l.writeUInt8(0),l.writeUInt8(0),l.writeUInt8(0),l.writeUInt8(1),l.writeStringNT(n),l.writeStringNT(this.options.destination.host)),this.nextRequiredPacketBufferSize=i.SOCKS_INCOMING_PACKET_SIZES.Socks4Response,this.socket.write(l.toBuffer())}handleSocks4FinalHandshakeResponse(){const n=this.receiveBuffer.get(8);if(n[1]!==i.Socks4Response.Granted)this.closeSocket(`${i.ERRORS.Socks4ProxyRejectedConnection} - (${i.Socks4Response[n[1]]})`);else if(i.SocksCommand[this.options.command]===i.SocksCommand.bind){const l=o.SmartBuffer.fromBuffer(n);l.readOffset=2;const e={port:l.readUInt16BE(),host:(0,s.int32ToIpv4)(l.readUInt32BE())};"0.0.0.0"===e.host&&(e.host=this.options.proxy.ipaddress),this.setState(i.SocksClientState.BoundWaitingForConnection),this.emit("bound",{remoteHost:e,socket:this.socket})}else this.setState(i.SocksClientState.Established),this.removeInternalSocketHandlers(),this.emit("established",{socket:this.socket})}handleSocks4IncomingConnectionResponse(){const n=this.receiveBuffer.get(8);if(n[1]!==i.Socks4Response.Granted)this.closeSocket(`${i.ERRORS.Socks4ProxyRejectedIncomingBoundConnection} - (${i.Socks4Response[n[1]]})`);else{const l=o.SmartBuffer.fromBuffer(n);l.readOffset=2;const e={port:l.readUInt16BE(),host:(0,s.int32ToIpv4)(l.readUInt32BE())};this.setState(i.SocksClientState.Established),this.removeInternalSocketHandlers(),this.emit("established",{remoteHost:e,socket:this.socket})}}sendSocks5InitialHandshake(){const n=new o.SmartBuffer,l=[i.Socks5Auth.NoAuth];(this.options.proxy.userId||this.options.proxy.password)&&l.push(i.Socks5Auth.UserPass),void 0!==this.options.proxy.custom_auth_method&&l.push(this.options.proxy.custom_auth_method),n.writeUInt8(5),n.writeUInt8(l.length);for(const e of l)n.writeUInt8(e);this.nextRequiredPacketBufferSize=i.SOCKS_INCOMING_PACKET_SIZES.Socks5InitialHandshakeResponse,this.socket.write(n.toBuffer()),this.setState(i.SocksClientState.SentInitialHandshake)}handleInitialSocks5HandshakeResponse(){const n=this.receiveBuffer.get(2);5!==n[0]?this.closeSocket(i.ERRORS.InvalidSocks5IntiailHandshakeSocksVersion):n[1]===i.SOCKS5_NO_ACCEPTABLE_AUTH?this.closeSocket(i.ERRORS.InvalidSocks5InitialHandshakeNoAcceptedAuthType):n[1]===i.Socks5Auth.NoAuth?(this.socks5ChosenAuthType=i.Socks5Auth.NoAuth,this.sendSocks5CommandRequest()):n[1]===i.Socks5Auth.UserPass?(this.socks5ChosenAuthType=i.Socks5Auth.UserPass,this.sendSocks5UserPassAuthentication()):n[1]===this.options.proxy.custom_auth_method?(this.socks5ChosenAuthType=this.options.proxy.custom_auth_method,this.sendSocks5CustomAuthentication()):this.closeSocket(i.ERRORS.InvalidSocks5InitialHandshakeUnknownAuthType)}sendSocks5UserPassAuthentication(){const n=this.options.proxy.userId||"",l=this.options.proxy.password||"",e=new o.SmartBuffer;e.writeUInt8(1),e.writeUInt8(Buffer.byteLength(n)),e.writeString(n),e.writeUInt8(Buffer.byteLength(l)),e.writeString(l),this.nextRequiredPacketBufferSize=i.SOCKS_INCOMING_PACKET_SIZES.Socks5UserPassAuthenticationResponse,this.socket.write(e.toBuffer()),this.setState(i.SocksClientState.SentAuthentication)}sendSocks5CustomAuthentication(){return t(this,void 0,void 0,(function*(){this.nextRequiredPacketBufferSize=this.options.proxy.custom_auth_response_size,this.socket.write(yield this.options.proxy.custom_auth_request_handler()),this.setState(i.SocksClientState.SentAuthentication)}))}handleSocks5CustomAuthHandshakeResponse(n){return t(this,void 0,void 0,(function*(){return yield this.options.proxy.custom_auth_response_handler(n)}))}handleSocks5AuthenticationNoAuthHandshakeResponse(n){return t(this,void 0,void 0,(function*(){return 0===n[1]}))}handleSocks5AuthenticationUserPassHandshakeResponse(n){return t(this,void 0,void 0,(function*(){return 0===n[1]}))}handleInitialSocks5AuthenticationHandshakeResponse(){return t(this,void 0,void 0,(function*(){this.setState(i.SocksClientState.ReceivedAuthenticationResponse);let n=!1;this.socks5ChosenAuthType===i.Socks5Auth.NoAuth?n=yield this.handleSocks5AuthenticationNoAuthHandshakeResponse(this.receiveBuffer.get(2)):this.socks5ChosenAuthType===i.Socks5Auth.UserPass?n=yield this.handleSocks5AuthenticationUserPassHandshakeResponse(this.receiveBuffer.get(2)):this.socks5ChosenAuthType===this.options.proxy.custom_auth_method&&(n=yield this.handleSocks5CustomAuthHandshakeResponse(this.receiveBuffer.get(this.options.proxy.custom_auth_response_size))),n?this.sendSocks5CommandRequest():this.closeSocket(i.ERRORS.Socks5AuthenticationFailed)}))}sendSocks5CommandRequest(){const n=new o.SmartBuffer;n.writeUInt8(5),n.writeUInt8(i.SocksCommand[this.options.command]),n.writeUInt8(0),r.isIPv4(this.options.destination.host)?(n.writeUInt8(i.Socks5HostType.IPv4),n.writeBuffer((0,s.ipToBuffer)(this.options.destination.host))):r.isIPv6(this.options.destination.host)?(n.writeUInt8(i.Socks5HostType.IPv6),n.writeBuffer((0,s.ipToBuffer)(this.options.destination.host))):(n.writeUInt8(i.Socks5HostType.Hostname),n.writeUInt8(this.options.destination.host.length),n.writeString(this.options.destination.host)),n.writeUInt16BE(this.options.destination.port),this.nextRequiredPacketBufferSize=i.SOCKS_INCOMING_PACKET_SIZES.Socks5ResponseHeader,this.socket.write(n.toBuffer()),this.setState(i.SocksClientState.SentFinalHandshake)}handleSocks5FinalHandshakeResponse(){const n=this.receiveBuffer.peek(5);if(5!==n[0]||n[1]!==i.Socks5Response.Granted)this.closeSocket(`${i.ERRORS.InvalidSocks5FinalHandshakeRejected} - ${i.Socks5Response[n[1]]}`);else{const l=n[3];let e,t;if(l===i.Socks5HostType.IPv4){const n=i.SOCKS_INCOMING_PACKET_SIZES.Socks5ResponseIPv4;if(this.receiveBuffer.length<n)return void(this.nextRequiredPacketBufferSize=n);t=o.SmartBuffer.fromBuffer(this.receiveBuffer.get(n).slice(4)),e={host:(0,s.int32ToIpv4)(t.readUInt32BE()),port:t.readUInt16BE()},"0.0.0.0"===e.host&&(e.host=this.options.proxy.ipaddress)}else if(l===i.Socks5HostType.Hostname){const l=n[4],u=i.SOCKS_INCOMING_PACKET_SIZES.Socks5ResponseHostname(l);if(this.receiveBuffer.length<u)return void(this.nextRequiredPacketBufferSize=u);t=o.SmartBuffer.fromBuffer(this.receiveBuffer.get(u).slice(5)),e={host:t.readString(l),port:t.readUInt16BE()}}else if(l===i.Socks5HostType.IPv6){const n=i.SOCKS_INCOMING_PACKET_SIZES.Socks5ResponseIPv6;if(this.receiveBuffer.length<n)return void(this.nextRequiredPacketBufferSize=n);t=o.SmartBuffer.fromBuffer(this.receiveBuffer.get(n).slice(4)),e={host:d.Address6.fromByteArray(Array.from(t.readBuffer(16))).canonicalForm(),port:t.readUInt16BE()}}this.setState(i.SocksClientState.ReceivedFinalResponse),i.SocksCommand[this.options.command]===i.SocksCommand.connect?(this.setState(i.SocksClientState.Established),this.removeInternalSocketHandlers(),this.emit("established",{remoteHost:e,socket:this.socket})):i.SocksCommand[this.options.command]===i.SocksCommand.bind?(this.setState(i.SocksClientState.BoundWaitingForConnection),this.nextRequiredPacketBufferSize=i.SOCKS_INCOMING_PACKET_SIZES.Socks5ResponseHeader,this.emit("bound",{remoteHost:e,socket:this.socket})):i.SocksCommand[this.options.command]===i.SocksCommand.associate&&(this.setState(i.SocksClientState.Established),this.removeInternalSocketHandlers(),this.emit("established",{remoteHost:e,socket:this.socket}))}}handleSocks5IncomingConnectionResponse(){const n=this.receiveBuffer.peek(5);if(5!==n[0]||n[1]!==i.Socks5Response.Granted)this.closeSocket(`${i.ERRORS.Socks5ProxyRejectedIncomingBoundConnection} - ${i.Socks5Response[n[1]]}`);else{const l=n[3];let e,t;if(l===i.Socks5HostType.IPv4){const n=i.SOCKS_INCOMING_PACKET_SIZES.Socks5ResponseIPv4;if(this.receiveBuffer.length<n)return void(this.nextRequiredPacketBufferSize=n);t=o.SmartBuffer.fromBuffer(this.receiveBuffer.get(n).slice(4)),e={host:(0,s.int32ToIpv4)(t.readUInt32BE()),port:t.readUInt16BE()},"0.0.0.0"===e.host&&(e.host=this.options.proxy.ipaddress)}else if(l===i.Socks5HostType.Hostname){const l=n[4],u=i.SOCKS_INCOMING_PACKET_SIZES.Socks5ResponseHostname(l);if(this.receiveBuffer.length<u)return void(this.nextRequiredPacketBufferSize=u);t=o.SmartBuffer.fromBuffer(this.receiveBuffer.get(u).slice(5)),e={host:t.readString(l),port:t.readUInt16BE()}}else if(l===i.Socks5HostType.IPv6){const n=i.SOCKS_INCOMING_PACKET_SIZES.Socks5ResponseIPv6;if(this.receiveBuffer.length<n)return void(this.nextRequiredPacketBufferSize=n);t=o.SmartBuffer.fromBuffer(this.receiveBuffer.get(n).slice(4)),e={host:d.Address6.fromByteArray(Array.from(t.readBuffer(16))).canonicalForm(),port:t.readUInt16BE()}}this.setState(i.SocksClientState.Established),this.removeInternalSocketHandlers(),this.emit("established",{remoteHost:e,socket:this.socket})}}get socksClientOptions(){return Object.assign({},this.options)}}l.SocksClient=h},5438:(n,l)=>{"use strict";var e,t,u,r,o,i;Object.defineProperty(l,"__esModule",{value:!0}),l.SOCKS5_NO_ACCEPTABLE_AUTH=l.SOCKS5_CUSTOM_AUTH_END=l.SOCKS5_CUSTOM_AUTH_START=l.SOCKS_INCOMING_PACKET_SIZES=l.SocksClientState=l.Socks5Response=l.Socks5HostType=l.Socks5Auth=l.Socks4Response=l.SocksCommand=l.ERRORS=l.DEFAULT_TIMEOUT=void 0,l.DEFAULT_TIMEOUT=3e4,l.ERRORS={InvalidSocksCommand:"An invalid SOCKS command was provided. Valid options are connect, bind, and associate.",InvalidSocksCommandForOperation:"An invalid SOCKS command was provided. Only a subset of commands are supported for this operation.",InvalidSocksCommandChain:"An invalid SOCKS command was provided. Chaining currently only supports the connect command.",InvalidSocksClientOptionsDestination:"An invalid destination host was provided.",InvalidSocksClientOptionsExistingSocket:"An invalid existing socket was provided. This should be an instance of stream.Duplex.",InvalidSocksClientOptionsProxy:"Invalid SOCKS proxy details were provided.",InvalidSocksClientOptionsTimeout:"An invalid timeout value was provided. Please enter a value above 0 (in ms).",InvalidSocksClientOptionsProxiesLength:"At least two socks proxies must be provided for chaining.",InvalidSocksClientOptionsCustomAuthRange:"Custom auth must be a value between 0x80 and 0xFE.",InvalidSocksClientOptionsCustomAuthOptions:"When a custom_auth_method is provided, custom_auth_request_handler, custom_auth_response_size, and custom_auth_response_handler must also be provided and valid.",NegotiationError:"Negotiation error",SocketClosed:"Socket closed",ProxyConnectionTimedOut:"Proxy connection timed out",InternalError:"SocksClient internal error (this should not happen)",InvalidSocks4HandshakeResponse:"Received invalid Socks4 handshake response",Socks4ProxyRejectedConnection:"Socks4 Proxy rejected connection",InvalidSocks4IncomingConnectionResponse:"Socks4 invalid incoming connection response",Socks4ProxyRejectedIncomingBoundConnection:"Socks4 Proxy rejected incoming bound connection",InvalidSocks5InitialHandshakeResponse:"Received invalid Socks5 initial handshake response",InvalidSocks5IntiailHandshakeSocksVersion:"Received invalid Socks5 initial handshake (invalid socks version)",InvalidSocks5InitialHandshakeNoAcceptedAuthType:"Received invalid Socks5 initial handshake (no accepted authentication type)",InvalidSocks5InitialHandshakeUnknownAuthType:"Received invalid Socks5 initial handshake (unknown authentication type)",Socks5AuthenticationFailed:"Socks5 Authentication failed",InvalidSocks5FinalHandshake:"Received invalid Socks5 final handshake response",InvalidSocks5FinalHandshakeRejected:"Socks5 proxy rejected connection",InvalidSocks5IncomingConnectionResponse:"Received invalid Socks5 incoming connection response",Socks5ProxyRejectedIncomingBoundConnection:"Socks5 Proxy rejected incoming bound connection"},l.SOCKS_INCOMING_PACKET_SIZES={Socks5InitialHandshakeResponse:2,Socks5UserPassAuthenticationResponse:2,Socks5ResponseHeader:5,Socks5ResponseIPv4:10,Socks5ResponseIPv6:22,Socks5ResponseHostname:n=>n+7,Socks4Response:8},function(n){n[n.connect=1]="connect",n[n.bind=2]="bind",n[n.associate=3]="associate"}(e||(l.SocksCommand=e={})),function(n){n[n.Granted=90]="Granted",n[n.Failed=91]="Failed",n[n.Rejected=92]="Rejected",n[n.RejectedIdent=93]="RejectedIdent"}(t||(l.Socks4Response=t={})),function(n){n[n.NoAuth=0]="NoAuth",n[n.GSSApi=1]="GSSApi",n[n.UserPass=2]="UserPass"}(u||(l.Socks5Auth=u={})),l.SOCKS5_CUSTOM_AUTH_START=128,l.SOCKS5_CUSTOM_AUTH_END=254,l.SOCKS5_NO_ACCEPTABLE_AUTH=255,function(n){n[n.Granted=0]="Granted",n[n.Failure=1]="Failure",n[n.NotAllowed=2]="NotAllowed",n[n.NetworkUnreachable=3]="NetworkUnreachable",n[n.HostUnreachable=4]="HostUnreachable",n[n.ConnectionRefused=5]="ConnectionRefused",n[n.TTLExpired=6]="TTLExpired",n[n.CommandNotSupported=7]="CommandNotSupported",n[n.AddressNotSupported=8]="AddressNotSupported"}(r||(l.Socks5Response=r={})),function(n){n[n.IPv4=1]="IPv4",n[n.Hostname=3]="Hostname",n[n.IPv6=4]="IPv6"}(o||(l.Socks5HostType=o={})),function(n){n[n.Created=0]="Created",n[n.Connecting=1]="Connecting",n[n.Connected=2]="Connected",n[n.SentInitialHandshake=3]="SentInitialHandshake",n[n.ReceivedInitialHandshakeResponse=4]="ReceivedInitialHandshakeResponse",n[n.SentAuthentication=5]="SentAuthentication",n[n.ReceivedAuthenticationResponse=6]="ReceivedAuthenticationResponse",n[n.SentFinalHandshake=7]="SentFinalHandshake",n[n.ReceivedFinalResponse=8]="ReceivedFinalResponse",n[n.BoundWaitingForConnection=9]="BoundWaitingForConnection",n[n.Established=10]="Established",n[n.Disconnected=11]="Disconnected",n[n.Error=99]="Error"}(i||(l.SocksClientState=i={}))},7130:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.ipToBuffer=l.int32ToIpv4=l.ipv4ToInt32=l.validateSocksClientChainOptions=l.validateSocksClientOptions=void 0;const t=e(3763),u=e(5438),r=e(2203),o=e(9424),i=e(9278);function s(n,l){if(void 0!==n.custom_auth_method){if(n.custom_auth_method<u.SOCKS5_CUSTOM_AUTH_START||n.custom_auth_method>u.SOCKS5_CUSTOM_AUTH_END)throw new t.SocksClientError(u.ERRORS.InvalidSocksClientOptionsCustomAuthRange,l);if(void 0===n.custom_auth_request_handler||"function"!=typeof n.custom_auth_request_handler)throw new t.SocksClientError(u.ERRORS.InvalidSocksClientOptionsCustomAuthOptions,l);if(void 0===n.custom_auth_response_size)throw new t.SocksClientError(u.ERRORS.InvalidSocksClientOptionsCustomAuthOptions,l);if(void 0===n.custom_auth_response_handler||"function"!=typeof n.custom_auth_response_handler)throw new t.SocksClientError(u.ERRORS.InvalidSocksClientOptionsCustomAuthOptions,l)}}function a(n){return n&&"string"==typeof n.host&&"number"==typeof n.port&&n.port>=0&&n.port<=65535}function c(n){return n&&("string"==typeof n.host||"string"==typeof n.ipaddress)&&"number"==typeof n.port&&n.port>=0&&n.port<=65535&&(4===n.type||5===n.type)}function d(n){return"number"==typeof n&&n>0}l.validateSocksClientOptions=function(n,l=["connect","bind","associate"]){if(!u.SocksCommand[n.command])throw new t.SocksClientError(u.ERRORS.InvalidSocksCommand,n);if(-1===l.indexOf(n.command))throw new t.SocksClientError(u.ERRORS.InvalidSocksCommandForOperation,n);if(!a(n.destination))throw new t.SocksClientError(u.ERRORS.InvalidSocksClientOptionsDestination,n);if(!c(n.proxy))throw new t.SocksClientError(u.ERRORS.InvalidSocksClientOptionsProxy,n);if(s(n.proxy,n),n.timeout&&!d(n.timeout))throw new t.SocksClientError(u.ERRORS.InvalidSocksClientOptionsTimeout,n);if(n.existing_socket&&!(n.existing_socket instanceof r.Duplex))throw new t.SocksClientError(u.ERRORS.InvalidSocksClientOptionsExistingSocket,n)},l.validateSocksClientChainOptions=function(n){if("connect"!==n.command)throw new t.SocksClientError(u.ERRORS.InvalidSocksCommandChain,n);if(!a(n.destination))throw new t.SocksClientError(u.ERRORS.InvalidSocksClientOptionsDestination,n);if(!(n.proxies&&Array.isArray(n.proxies)&&n.proxies.length>=2))throw new t.SocksClientError(u.ERRORS.InvalidSocksClientOptionsProxiesLength,n);if(n.proxies.forEach((l=>{if(!c(l))throw new t.SocksClientError(u.ERRORS.InvalidSocksClientOptionsProxy,n);s(l,n)})),n.timeout&&!d(n.timeout))throw new t.SocksClientError(u.ERRORS.InvalidSocksClientOptionsTimeout,n)},l.ipv4ToInt32=function(n){return new o.Address4(n).toArray().reduce(((n,l)=>(n<<8)+l),0)},l.int32ToIpv4=function(n){return[n>>>24&255,n>>>16&255,n>>>8&255,255&n].join(".")},l.ipToBuffer=function(n){if(i.isIPv4(n)){const l=new o.Address4(n);return Buffer.from(l.toArray())}if(i.isIPv6(n)){const l=new o.Address6(n);return Buffer.from(l.toByteArray())}throw new Error("Invalid IP address format")}},7736:(n,l)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.ReceiveBuffer=void 0,l.ReceiveBuffer=class{constructor(n=4096){this.buffer=Buffer.allocUnsafe(n),this.offset=0,this.originalSize=n}get length(){return this.offset}append(n){if(!Buffer.isBuffer(n))throw new Error("Attempted to append a non-buffer instance to ReceiveBuffer.");if(this.offset+n.length>=this.buffer.length){const l=this.buffer;this.buffer=Buffer.allocUnsafe(Math.max(this.buffer.length+this.originalSize,this.buffer.length+n.length)),l.copy(this.buffer)}return n.copy(this.buffer,this.offset),this.offset+=n.length}peek(n){if(n>this.offset)throw new Error("Attempted to read beyond the bounds of the managed internal data.");return this.buffer.slice(0,n)}get(n){if(n>this.offset)throw new Error("Attempted to read beyond the bounds of the managed internal data.");const l=Buffer.allocUnsafe(n);return this.buffer.slice(0,n).copy(l),this.buffer.copyWithin(0,n,n+this.offset-n),this.offset-=n,l}}},3763:(n,l)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.shuffleArray=l.SocksClientError=void 0;class e extends Error{constructor(n,l){super(n),this.options=l}}l.SocksClientError=e,l.shuffleArray=function(n){for(let l=n.length-1;l>0;l--){const e=Math.floor(Math.random()*(l+1));[n[l],n[e]]=[n[e],n[l]]}}},5861:function(n,l,e){"use strict";var t=this&&this.__createBinding||(Object.create?function(n,l,e,t){void 0===t&&(t=e);var u=Object.getOwnPropertyDescriptor(l,e);u&&!("get"in u?!l.__esModule:u.writable||u.configurable)||(u={enumerable:!0,get:function(){return l[e]}}),Object.defineProperty(n,t,u)}:function(n,l,e,t){void 0===t&&(t=e),n[t]=l[e]}),u=this&&this.__exportStar||function(n,l){for(var e in n)"default"===e||Object.prototype.hasOwnProperty.call(l,e)||t(l,n,e)};Object.defineProperty(l,"__esModule",{value:!0}),u(e(7631),l)},7604:(n,l,e)=>{var t;!function(){"use strict";var u={not_string:/[^s]/,not_bool:/[^t]/,not_type:/[^T]/,not_primitive:/[^v]/,number:/[diefg]/,numeric_arg:/[bcdiefguxX]/,json:/[j]/,not_json:/[^j]/,text:/^[^\x25]+/,modulo:/^\x25{2}/,placeholder:/^\x25(?:([1-9]\d*)\$|\(([^)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-gijostTuvxX])/,key:/^([a-z_][a-z_\d]*)/i,key_access:/^\.([a-z_][a-z_\d]*)/i,index_access:/^\[(\d+)\]/,sign:/^[+-]/};function r(n){return function(n,l){var e,t,o,i,s,a,c,d,h,f=1,p=n.length,m="";for(t=0;t<p;t++)if("string"==typeof n[t])m+=n[t];else if("object"==typeof n[t]){if((i=n[t]).keys)for(e=l[f],o=0;o<i.keys.length;o++){if(null==e)throw new Error(r('[sprintf] Cannot access property "%s" of undefined value "%s"',i.keys[o],i.keys[o-1]));e=e[i.keys[o]]}else e=i.param_no?l[i.param_no]:l[f++];if(u.not_type.test(i.type)&&u.not_primitive.test(i.type)&&e instanceof Function&&(e=e()),u.numeric_arg.test(i.type)&&"number"!=typeof e&&isNaN(e))throw new TypeError(r("[sprintf] expecting number but found %T",e));switch(u.number.test(i.type)&&(d=e>=0),i.type){case"b":e=parseInt(e,10).toString(2);break;case"c":e=String.fromCharCode(parseInt(e,10));break;case"d":case"i":e=parseInt(e,10);break;case"j":e=JSON.stringify(e,null,i.width?parseInt(i.width):0);break;case"e":e=i.precision?parseFloat(e).toExponential(i.precision):parseFloat(e).toExponential();break;case"f":e=i.precision?parseFloat(e).toFixed(i.precision):parseFloat(e);break;case"g":e=i.precision?String(Number(e.toPrecision(i.precision))):parseFloat(e);break;case"o":e=(parseInt(e,10)>>>0).toString(8);break;case"s":e=String(e),e=i.precision?e.substring(0,i.precision):e;break;case"t":e=String(!!e),e=i.precision?e.substring(0,i.precision):e;break;case"T":e=Object.prototype.toString.call(e).slice(8,-1).toLowerCase(),e=i.precision?e.substring(0,i.precision):e;break;case"u":e=parseInt(e,10)>>>0;break;case"v":e=e.valueOf(),e=i.precision?e.substring(0,i.precision):e;break;case"x":e=(parseInt(e,10)>>>0).toString(16);break;case"X":e=(parseInt(e,10)>>>0).toString(16).toUpperCase()}u.json.test(i.type)?m+=e:(!u.number.test(i.type)||d&&!i.sign?h="":(h=d?"+":"-",e=e.toString().replace(u.sign,"")),a=i.pad_char?"0"===i.pad_char?"0":i.pad_char.charAt(1):" ",c=i.width-(h+e).length,s=i.width&&c>0?a.repeat(c):"",m+=i.align?h+e+s:"0"===a?h+s+e:s+h+e)}return m}(function(n){if(i[n])return i[n];for(var l,e=n,t=[],r=0;e;){if(null!==(l=u.text.exec(e)))t.push(l[0]);else if(null!==(l=u.modulo.exec(e)))t.push("%");else{if(null===(l=u.placeholder.exec(e)))throw new SyntaxError("[sprintf] unexpected placeholder");if(l[2]){r|=1;var o=[],s=l[2],a=[];if(null===(a=u.key.exec(s)))throw new SyntaxError("[sprintf] failed to parse named argument key");for(o.push(a[1]);""!==(s=s.substring(a[0].length));)if(null!==(a=u.key_access.exec(s)))o.push(a[1]);else{if(null===(a=u.index_access.exec(s)))throw new SyntaxError("[sprintf] failed to parse named argument key");o.push(a[1])}l[2]=o}else r|=2;if(3===r)throw new Error("[sprintf] mixing positional and named placeholders is not (yet) supported");t.push({placeholder:l[0],param_no:l[1],keys:l[2],sign:l[3],pad_char:l[4],align:l[5],width:l[6],precision:l[7],type:l[8]})}e=e.substring(l[0].length)}return i[n]=t}(n),arguments)}function o(n,l){return r.apply(null,[n].concat(l||[]))}var i=Object.create(null);l.sprintf=r,l.vsprintf=o,"undefined"!=typeof window&&(window.sprintf=r,window.vsprintf=o,void 0===(t=function(){return{sprintf:r,vsprintf:o}}.call(l,e,l,n))||(n.exports=t))}()},1182:function(n,l,e){"use strict";var t=this&&this.__createBinding||(Object.create?function(n,l,e,t){void 0===t&&(t=e);var u=Object.getOwnPropertyDescriptor(l,e);u&&!("get"in u?!l.__esModule:u.writable||u.configurable)||(u={enumerable:!0,get:function(){return l[e]}}),Object.defineProperty(n,t,u)}:function(n,l,e,t){void 0===t&&(t=e),n[t]=l[e]}),u=this&&this.__exportStar||function(n,l){for(var e in n)"default"===e||Object.prototype.hasOwnProperty.call(l,e)||t(l,n,e)},r=this&&this.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(l,"__esModule",{value:!0});const o=r(e(9912));u(e(9912),l),l.default=o.default},8601:(n,l)=>{"use strict";function e(n,l){return n=function(n){for(let l of"\\()[]{}.+^$|")n=n.replace(new RegExp("\\"+l,"g"),"\\"+l);return n}(n),n=n.replace(/\*/g,".*").replace(/\?/g,".?"),new RegExp("^(?:"+n+")$").test(l)}Object.defineProperty(l,"__esModule",{value:!0}),l.default=function(n,l){const t=Array.isArray(n)?n:n.split(/,/);let u=!1;for(const n of t){if("!"==n[0]&&e(n.slice(1),l))return!1;e(n,l)&&(u=!0)}return u}},9912:function(n,l,e){"use strict";var t=this&&this.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(l,"__esModule",{value:!0}),l.LineType=void 0,l.parse=w,l.stringify=b;const u=t(e(8601)),r=e(5317),o=t(e(857)),i=/\s/,s=/\r|\n/,a=/^(Host|Match)$/i,c=/^(GlobalKnownHostsFile|Host|IPQoS|SendEnv|UserKnownHostsFile|ProxyCommand|Match|CanonicalDomains)$/i,d=/^(?:CertificateFile|IdentityFile|IdentityAgent|User)$/i,h=/^(Include|IdentityFile)$/i;var f;!function(n){n[n.DIRECTIVE=1]="DIRECTIVE",n[n.COMMENT=2]="COMMENT"}(f||(l.LineType=f={}));const p=["IdentityFile","LocalForward","RemoteForward","DynamicForward","CertificateFile"];function m(n,l){return l.hasOwnProperty(n.param)&&l[n.param]===n.value}function g(n){for(const l of n)if(l.type===f.DIRECTIVE&&"config"in l)for(const n of l.config)if(n.before)return n.before;return"  "}function y(n,l){const e=(n,e)=>{switch(n.toLowerCase()){case"all":return!0;case"final":return!!l.inFinalPass||(l.doFinalPass=!0,!1);case"exec":const n=`function main {\n          ${e}\n        }\n        main`;return 0===(0,r.spawnSync)(n,{shell:!0}).status;case"host":return(0,u.default)(e,l.params.HostName);case"originalhost":return(0,u.default)(e,l.params.OriginalHost);case"user":return(0,u.default)(e,l.params.User);case"localuser":return(0,u.default)(e,l.params.LocalUser)}};for(const l in n){const t=n[l];if(!e(l,Array.isArray(t)?t.map((({val:n})=>n)):t))return!1}return!0}class v extends Array{static parse(n){return w(n)}static stringify(n){return b(n)}compute(n){let l;"string"==typeof n&&(n={Host:n});try{l=o.default.userInfo()}catch(n){l={username:process.env.USER||process.env.USERNAME||""}}const e={params:{Host:n.Host,HostName:n.Host,OriginalHost:n.Host,User:l.username,LocalUser:l.username},inFinalPass:!1,doFinalPass:!1},t={},i=(n,l)=>{let u;u=Array.isArray(l)?/ProxyCommand/i.test(n)?l.map((({val:n,separator:l})=>`${l}${n}`)).join("").trim():l.map((({val:n})=>n)):l;const r=Array.isArray(u)?u[0]:u;p.includes(n)?(t[n]||(t[n]=[])).push(...[].concat(u)):null==t[n]&&("HostName"===n?e.params.HostName=r:"User"===n&&(e.params.User=r),t[n]=u)};void 0!==n.User&&i("User",n.User);const s=()=>{for(const n of this)if(n.type===f.DIRECTIVE)if("Host"===n.param&&(0,u.default)(Array.isArray(n.value)?n.value.map((({val:n})=>n)):n.value,e.params.Host)){let l=!1,t=[];i(n.param,n.value);for(const e of n.config)e.type===f.DIRECTIVE&&(i(e.param,e.value),/^CanonicalizeHostName$/i.test(e.param)&&"yes"===e.value&&(l=!0),/^CanonicalDomains$/i.test(e.param)&&Array.isArray(e.value)&&(t=e.value.map((({val:n})=>n))));if(t.length>0&&l&&e.params.Host===e.params.OriginalHost)for(const n of t){const l=`${e.params.OriginalHost}.${n}`,{status:t,stderr:u}=(0,r.spawnSync)("nslookup",[l]);if(0===t&&!/can't find/.test(u.toString())){e.params.Host=l,i("Host",l),s();break}}}else if("Match"===n.param&&"criteria"in n&&y(n.criteria,e))for(const l of n.config)l.type===f.DIRECTIVE&&i(l.param,l.value);else"Host"!==n.param&&"Match"!==n.param&&i(n.param,n.value)};return s(),e.doFinalPass&&(e.inFinalPass=!0,e.params.Host=e.params.HostName,s()),t}find(n){if("function"==typeof n)return super.find(n);if(!n||!("Host"in n)&&!("Match"in n))throw new Error("Can only find by Host or Match");return super.find((l=>m(l,n)))}remove(n){let l;if("function"==typeof n)l=super.findIndex(n);else{if(!n||!("Host"in n)&&!("Match"in n))throw new Error("Can only remove by Host or Match");l=super.findIndex((l=>m(l,n)))}if(l>=0)return this.splice(l,1)}toString(){return b(this)}append(n){const l=g(this),e=this.length>0?this[this.length-1]:null;let t=e&&e.config||this,u=this,r=t.length>0?t[t.length-1]:e;r&&!r.after&&(r.after="\n");let o=t!==u;for(const e in n){const i=n[e],s={type:f.DIRECTIVE,param:e,separator:" ",value:Array.isArray(i)?i.map(((n,l)=>({val:n,separator:0===l?"":" "}))):i,before:o?l:l.replace(/  |\t/,""),after:"\n"};a.test(e)?(o=!0,s.before=l.replace(/  |\t/,""),t=u,r&&"\n"===r.after&&(r.after+="\n"),t.push(s),t=s.config=new v):t.push(s),r=s}return u}prepend(n,l=!1){const e=g(this);let t=this,u=0;if(l){for(;u<this.length&&!("config"in this[u]);)u+=1;if(u>=this.length)return this.append(n)}let r=!1,o=0;for(const l in n){o+=1;const i=n[l],s={type:f.DIRECTIVE,param:l,separator:" ",value:Array.isArray(i)?i.map(((n,l)=>({val:n,separator:0===l?"":" "}))):i,before:"",after:"\n"};a.test(l)?(s.before=e.replace(/  |\t/,""),t.splice(u,0,s),t=s.config=new v,r=!0):(o===Object.keys(n).length&&(s.after+="\n"),r?(s.before=e,t.push(s)):(t.splice(u,0,s),u+=1,h.test(l)&&(s.after+="\n")))}return t}}function w(n){let l=0,e=r(),t=new v,u=t;function r(){return n[l++]}function o(){let n="";for(;i.test(e);)n+=e,e=r();return n}function d(){let n=o();return"="===e&&(n+=e,e=r()),n+o()}function h(){let n="",l=!1,t=!1;for(;e&&!s.test(e);){if(t)n+='"'===e?e:`\\${e}`,t=!1;else if('"'!==e||n&&!l)if("\\"===e)t=!0;else{if("#"===e&&!l)break;n+=e}else l=!l;e=r()}if(l||t)throw new Error(`Unexpected line break at ${n}`);return n.trim()}function p(){const n=[];let l="",t=!1,u=" ",o=!1,i=!1;for(;e&&!s.test(e);){if(i)l+='"'===e?e:`\\${e}`,i=!1;else if('"'===e)o=!o;else if("\\"===e)i=!0;else if(o)l+=e,t=!0;else if(/[ \t=]/.test(e))l&&(n.push({val:l,separator:u,quoted:t}),l="",t=!1,u=e);else{if("#"===e&&n.length>0)break;l+=e}e=r()}if(o||i)throw new Error(`Unexpected line break at ${n.map((({val:n})=>n)).concat(l).join(" ")}`);return l&&n.push({val:l,separator:u,quoted:t}),n.length>1?n:n[0].val}function m(){const n=o(),l="#"===e?function(){const n=f.COMMENT;let l="";for(;e&&!s.test(e);)l+=e,e=r();return{type:n,content:l,before:"",after:""}}():function(){const n=f.DIRECTIVE,l=function(){let n="";for(;e&&/[^ \t=]/.test(e);)n+=e,e=r();return n}(),t=c.test(l),u={type:n,param:l,separator:d(),quoted:!t&&'"'===e,value:t?p():h(),before:"",after:""};if(u.quoted||delete u.quoted,/^Match$/i.test(l)){const n={};"string"==typeof u.value&&(u.value=[{val:u.value,separator:"",quoted:u.quoted}]);let l=0;for(;l<u.value.length;){const{val:e}=u.value[l];switch(e.toLowerCase()){case"all":case"canonical":case"final":n[e]=[],l+=1;break;default:if(l+1>=u.value.length)throw new Error(`Missing value for match criteria ${e}`);n[e]=u.value[l+1].val,l+=2}}u.criteria=n}return u}(),t=function(){let n="";for(;s.test(e);)n+=e,e=r();return n}();return l.before=n,l.after=t,l}for(;e;){let n=m();n.type===f.DIRECTIVE&&a.test(n.param)?(t=u,t.push(n),t=n.config=new v):n.type!==f.DIRECTIVE||n.param?t.push(n):0===t.length?u[u.length-1].after+=n.before:t[t.length-1].after+=n.before}return u}function b(n){let l="";function e(n,l){if(Array.isArray(n)){let l="";for(const{val:t,separator:u,quoted:r}of n)l+=(l?u:"")+e(t,r||i.test(t));return l}return l?`"${n}"`:n}function t(n){const l=n.quoted||d.test(n.param)&&i.test(n.value),t=e(n.value,l);return`${n.param}${n.separator}${t}`}const u=n=>{l+=n.before,n.type===f.COMMENT?l+=n.content:n.type===f.DIRECTIVE&&p.includes(n.param)?(Array.isArray(n.value)?n.value:[n.value]).forEach(((e,u,r)=>{l+=t({...n,value:"string"!=typeof e?e.val:e}),u<r.length-1&&(l+=`\n${n.before}`)})):n.type===f.DIRECTIVE&&(l+=t(n)),l+=n.after,"config"in n&&n.config.forEach(u)};return n.forEach(u),l}v.DIRECTIVE=f.DIRECTIVE,v.COMMENT=f.COMMENT,l.default=v},7513:(n,l,e)=>{"use strict";const t=e(6231),u=e(6108),r=e(3371),o=n=>{if("string"!=typeof n||0===n.length)return 0;if(0===(n=t(n)).length)return 0;n=n.replace(r(),"  ");let l=0;for(let e=0;e<n.length;e++){const t=n.codePointAt(e);t<=31||t>=127&&t<=159||t>=768&&t<=879||(t>65535&&e++,l+=u(t)?2:1)}return l};n.exports=o,n.exports.default=o},6231:(n,l,e)=>{"use strict";const t=e(9880);n.exports=n=>"string"==typeof n?n.replace(t(),""):n},7687:(n,l,e)=>{"use strict";const t=e(857),u=e(2018),r=e(5884),{env:o}=process;let i;function s(n){return 0!==n&&{level:n,hasBasic:!0,has256:n>=2,has16m:n>=3}}function a(n,l){if(0===i)return 0;if(r("color=16m")||r("color=full")||r("color=truecolor"))return 3;if(r("color=256"))return 2;if(n&&!l&&void 0===i)return 0;const e=i||0;if("dumb"===o.TERM)return e;if("win32"===process.platform){const n=t.release().split(".");return Number(n[0])>=10&&Number(n[2])>=10586?Number(n[2])>=14931?3:2:1}if("CI"in o)return["TRAVIS","CIRCLECI","APPVEYOR","GITLAB_CI","GITHUB_ACTIONS","BUILDKITE"].some((n=>n in o))||"codeship"===o.CI_NAME?1:e;if("TEAMCITY_VERSION"in o)return/^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(o.TEAMCITY_VERSION)?1:0;if("truecolor"===o.COLORTERM)return 3;if("TERM_PROGRAM"in o){const n=parseInt((o.TERM_PROGRAM_VERSION||"").split(".")[0],10);switch(o.TERM_PROGRAM){case"iTerm.app":return n>=3?3:2;case"Apple_Terminal":return 2}}return/-256(color)?$/i.test(o.TERM)?2:/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(o.TERM)||"COLORTERM"in o?1:e}r("no-color")||r("no-colors")||r("color=false")||r("color=never")?i=0:(r("color")||r("colors")||r("color=true")||r("color=always"))&&(i=1),"FORCE_COLOR"in o&&(i="true"===o.FORCE_COLOR?1:"false"===o.FORCE_COLOR?0:0===o.FORCE_COLOR.length?1:Math.min(parseInt(o.FORCE_COLOR,10),3)),n.exports={supportsColor:function(n){return s(a(n,n&&n.isTTY))},stdout:s(a(!0,u.isatty(1))),stderr:s(a(!0,u.isatty(2)))}},4318:function(n,l,e){"use strict";var t=this&&this.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(l,"__esModule",{value:!0}),l.alignVerticalRangeContent=l.wrapRangeContent=void 0;const u=t(e(7513)),r=e(7009),o=e(7819),i=e(9022),s=e(2355),a=e(5268),c=e(6465);l.wrapRangeContent=(n,l,e)=>{const{topLeft:t,paddingRight:u,paddingLeft:o,truncate:a,wrapWord:d,alignment:h}=n,f=e.rows[t.row][t.col],p=l-o-u;return(0,c.wrapCell)((0,s.truncateString)(f,a),p,d).map((n=>{const l=(0,r.alignString)(n,p,h);return(0,i.padString)(l,o,u)}))},l.alignVerticalRangeContent=(n,l,e)=>{const{rows:t,drawHorizontalLine:r,rowHeights:i}=e,{topLeft:s,bottomRight:c,verticalAlignment:d}=n;if(0===i.length)return[];const h=(0,a.sumArray)(i.slice(s.row,c.row+1))+(c.row-s.row)-(0,a.sequence)(s.row+1,c.row).filter((n=>!r(n,t.length))).length;return(0,o.padCellVertically)(l,h,d).map((n=>0===n.length?" ".repeat((0,u.default)(l[0])):n))}},7009:function(n,l,e){"use strict";var t=this&&this.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(l,"__esModule",{value:!0}),l.alignString=void 0;const u=t(e(7513)),r=e(5268),o=(n,l)=>n+" ".repeat(l);l.alignString=(n,l,e)=>{const t=(0,u.default)(n);if(t===l)return n;if(t>l)throw new Error("Subject parameter value width cannot be greater than the container width.");if(0===t)return" ".repeat(l);const i=l-t;return"left"===e?o(n,i):"right"===e?((n,l)=>" ".repeat(l)+n)(n,i):"justify"===e?((n,l)=>{const e=(0,r.countSpaceSequence)(n);if(0===e)return o(n,l);const t=(0,r.distributeUnevenly)(l,e);if(Math.max(...t)>3)return o(n,l);let u=0;return n.replace(/\s+/g,(n=>n+" ".repeat(t[u++])))})(n,i):((n,l)=>" ".repeat(Math.floor(l/2))+n+" ".repeat(Math.ceil(l/2)))(n,i)}},1454:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.alignTableData=void 0;const t=e(7009);l.alignTableData=(n,l)=>n.map(((n,e)=>n.map(((n,u)=>{var r;const{width:o,alignment:i}=l.columns[u];return(null===(r=l.spanningCellManager)||void 0===r?void 0:r.getContainingRange({col:u,row:e},{mapped:!0}))?n:(0,t.alignString)(n,o,i)}))))},2394:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.calculateCellHeight=void 0;const t=e(6465);l.calculateCellHeight=(n,l,e=!1)=>(0,t.wrapCell)(n,l,e).length},1280:function(n,l,e){"use strict";var t=this&&this.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(l,"__esModule",{value:!0}),l.calculateMaximumColumnWidths=l.calculateMaximumCellWidth=void 0;const u=t(e(7513)),r=e(5268);l.calculateMaximumCellWidth=n=>Math.max(...n.split("\n").map(u.default)),l.calculateMaximumColumnWidths=(n,e=[])=>{const t=new Array(n[0].length).fill(0),u=e.map(r.calculateRangeCoordinate);return n.forEach(((n,e)=>{n.forEach(((n,o)=>{((n,l)=>u.some((e=>(0,r.isCellInRange)({col:l,row:n},e))))(e,o)||(t[o]=Math.max(t[o],(0,l.calculateMaximumCellWidth)(n)))}))})),t}},5575:(n,l)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.calculateOutputColumnWidths=void 0,l.calculateOutputColumnWidths=n=>n.columns.map((n=>n.paddingLeft+n.width+n.paddingRight))},557:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.calculateRowHeights=void 0;const t=e(2394),u=e(5268);l.calculateRowHeights=(n,l)=>{const e=[];for(const[r,o]of n.entries()){let i=1;o.forEach(((o,s)=>{var a;const c=null===(a=l.spanningCellManager)||void 0===a?void 0:a.getContainingRange({col:s,row:r});if(!c){const n=(0,t.calculateCellHeight)(o,l.columns[s].width,l.columns[s].wrapWord);return void(i=Math.max(i,n))}const{topLeft:d,bottomRight:h,height:f}=c;if(r===h.row){const t=(0,u.sumArray)(e.slice(d.row)),r=h.row-d.row,o=(0,u.sequence)(d.row+1,h.row).filter((e=>{var t;return!(null===(t=l.drawHorizontalLine)||void 0===t?void 0:t.call(l,e,n.length))})).length,s=f-t-r+o;i=Math.max(i,s)}})),e.push(i)}return e}},3:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.calculateSpanningCellWidth=void 0;const t=e(5268);l.calculateSpanningCellWidth=(n,l)=>{const{columnsConfig:e,drawVerticalLine:u}=l,{topLeft:r,bottomRight:o}=n;return(0,t.sumArray)(e.slice(r.col,o.col+1).map((({width:n})=>n)))+(r.col===o.col?e[r.col].paddingRight+e[o.col].paddingLeft:(0,t.sumArray)(e.slice(r.col,o.col+1).map((({paddingLeft:n,paddingRight:l})=>n+l))))+(o.col-r.col)-(0,t.sequence)(r.col+1,o.col).filter((n=>!u(n,e.length))).length}},7577:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.createStream=void 0;const t=e(1454),u=e(557),r=e(8549),o=e(8711),i=e(1281),s=e(7819),a=e(9022),c=e(1646),d=e(2355),h=e(5268),f=(n,l)=>{let e=(0,c.stringifyTableData)(n);e=(0,d.truncateTableData)(e,(0,h.extractTruncates)(l));const r=(0,u.calculateRowHeights)(e,l);return e=(0,s.mapDataUsingRowHeights)(e,r,l),e=(0,t.alignTableData)(e,l),e=(0,a.padTableData)(e,l),e};l.createStream=n=>{const l=(0,i.makeStreamConfig)(n),e=Object.values(l.columns).map((n=>n.width+n.paddingLeft+n.paddingRight));let t=!0;return{write:n=>{if(n.length!==l.columnCount)throw new Error("Row cell count does not match the config.columnCount.");t?(t=!1,((n,l,e)=>{const t=f([n],e).map((n=>(0,o.drawRow)(n,e))).join("");let u;u="",u+=(0,r.drawBorderTop)(l,e),u+=t,u+=(0,r.drawBorderBottom)(l,e),u=u.trimEnd(),process.stdout.write(u)})(n,e,l)):((n,l,e)=>{const t=f([n],e).map((n=>(0,o.drawRow)(n,e))).join("");let u="";const i=(0,r.drawBorderBottom)(l,e);"\n"!==i&&(u="\r[K"),u+=(0,r.drawBorderJoin)(l,e),u+=t,u+=i,u=u.trimEnd(),process.stdout.write(u)})(n,e,l)}}}},8549:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.createTableBorderGetter=l.drawBorderBottom=l.drawBorderJoin=l.drawBorderTop=l.drawBorder=l.createSeparatorGetter=l.drawBorderSegments=void 0;const t=e(1490);l.drawBorderSegments=(n,l)=>{const{separator:e,horizontalBorderIndex:t,spanningCellManager:u}=l;return n.map(((n,l)=>{const r=e.body.repeat(n);if(void 0===t)return r;const o=null==u?void 0:u.getContainingRange({col:l,row:t});if(!o)return r;const{topLeft:i}=o;return t===i.row?r:l!==i.col?"":o.extractBorderContent(t)}))},l.createSeparatorGetter=n=>{const{separator:l,spanningCellManager:e,horizontalBorderIndex:t,rowCount:u}=n;return(n,r)=>{const o=null==e?void 0:e.inSameRange;if(void 0!==t&&o){const e={col:n,row:t-1},i={col:n-1,row:t},s={col:n-1,row:t-1},a={col:n,row:t},c=[[s,e],[e,a],[a,i],[i,s]];if(0===n)return o(a,e)&&l.bodyJoinOuter?l.bodyJoinOuter:l.left;if(n===r)return o(s,i)&&l.bodyJoinOuter?l.bodyJoinOuter:l.right;if(0===t)return o(a,i)?l.body:l.join;if(t===u)return o(e,s)?l.body:l.join;const d=c.map((n=>o(...n))).filter(Boolean).length;if(0===d)return l.join;if(4===d)return"";if(2===d)return o(...c[1])&&o(...c[3])&&l.bodyJoinInner?l.bodyJoinInner:l.body;if(1===d){if(!(l.joinRight&&l.joinLeft&&l.joinUp&&l.joinDown))throw new Error(`Can not get border separator for position [${t}, ${n}]`);return o(...c[0])?l.joinDown:o(...c[1])?l.joinLeft:o(...c[2])?l.joinUp:l.joinRight}throw new Error("Invalid case")}return 0===n?l.left:n===r?l.right:l.join}},l.drawBorder=(n,e)=>{const u=(0,l.drawBorderSegments)(n,e),{drawVerticalLine:r,horizontalBorderIndex:o,spanningCellManager:i}=e;return(0,t.drawContent)({contents:u,drawSeparator:r,elementType:"border",rowIndex:o,separatorGetter:(0,l.createSeparatorGetter)(e),spanningCellManager:i})+"\n"},l.drawBorderTop=(n,e)=>{const{border:t}=e,u=(0,l.drawBorder)(n,{...e,separator:{body:t.topBody,join:t.topJoin,left:t.topLeft,right:t.topRight}});return"\n"===u?"":u},l.drawBorderJoin=(n,e)=>{const{border:t}=e;return(0,l.drawBorder)(n,{...e,separator:{body:t.joinBody,bodyJoinInner:t.bodyJoin,bodyJoinOuter:t.bodyLeft,join:t.joinJoin,joinDown:t.joinMiddleDown,joinLeft:t.joinMiddleLeft,joinRight:t.joinMiddleRight,joinUp:t.joinMiddleUp,left:t.joinLeft,right:t.joinRight}})},l.drawBorderBottom=(n,e)=>{const{border:t}=e;return(0,l.drawBorder)(n,{...e,separator:{body:t.bottomBody,join:t.bottomJoin,left:t.bottomLeft,right:t.bottomRight}})},l.createTableBorderGetter=(n,e)=>(t,u)=>{const r={...e,horizontalBorderIndex:t};return 0===t?(0,l.drawBorderTop)(n,r):t===u?(0,l.drawBorderBottom)(n,r):(0,l.drawBorderJoin)(n,r)}},1490:(n,l)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.drawContent=void 0,l.drawContent=n=>{const{contents:l,separatorGetter:e,drawSeparator:t,spanningCellManager:u,rowIndex:r,elementType:o}=n,i=l.length,s=[];return t(0,i)&&s.push(e(0,i)),l.forEach(((n,l)=>{if(o&&"border"!==o&&"row"!==o||s.push(n),"cell"===o&&void 0===r&&s.push(n),"cell"===o&&void 0!==r){const e=null==u?void 0:u.getContainingRange({col:l,row:r});e&&l!==e.topLeft.col||s.push(n)}if(l+1<i&&t(l+1,i)){const n=e(l+1,i);if("cell"===o&&void 0!==r){const e={col:l+1,row:r},t=null==u?void 0:u.getContainingRange(e);t&&t.topLeft.col!==e.col||s.push(n)}else s.push(n)}})),t(i,i)&&s.push(e(i,i)),s.join("")}},8711:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.drawRow=void 0;const t=e(1490);l.drawRow=(n,l)=>{const{border:e,drawVerticalLine:u,rowIndex:r,spanningCellManager:o}=l;return(0,t.drawContent)({contents:n,drawSeparator:u,elementType:"cell",rowIndex:r,separatorGetter:(n,l)=>0===n?e.bodyLeft:n===l?e.bodyRight:e.bodyJoin,spanningCellManager:o})+"\n"}},1847:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.drawTable=void 0;const t=e(8549),u=e(1490),r=e(8711),o=e(5268);l.drawTable=(n,l,e,i)=>{const{drawHorizontalLine:s,singleLine:a}=i,c=(0,o.groupBySizes)(n,e).map(((n,l)=>n.map((n=>(0,r.drawRow)(n,{...i,rowIndex:l}))).join("")));return(0,u.drawContent)({contents:c,drawSeparator:(n,l)=>(0===n||n===l||!a)&&s(n,l),elementType:"row",rowIndex:-1,separatorGetter:(0,t.createTableBorderGetter)(l,{...i,rowCount:c.length}),spanningCellManager:i.spanningCellManager})}},5592:(n,l,e)=>{"use strict";l["config.json"]=function n(l,{instancePath:e="",parentData:u,parentDataProperty:o,rootData:s=l}={}){let c=null,d=0;if(l&&"object"==typeof l&&!Array.isArray(l)){for(const n in l)if("border"!==n&&"header"!==n&&"columns"!==n&&"columnDefault"!==n&&"drawVerticalLine"!==n&&"drawHorizontalLine"!==n&&"singleLine"!==n&&"spanningCells"!==n){const l={instancePath:e,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:n},message:"must NOT have additional properties"};null===c?c=[l]:c.push(l),d++}if(void 0!==l.border&&(i(l.border,{instancePath:e+"/border",parentData:l,parentDataProperty:"border",rootData:s})||(c=null===c?i.errors:c.concat(i.errors),d=c.length)),void 0!==l.header){let n=l.header;if(n&&"object"==typeof n&&!Array.isArray(n)){if(void 0===n.content){const n={instancePath:e+"/header",schemaPath:"#/properties/header/required",keyword:"required",params:{missingProperty:"content"},message:"must have required property 'content'"};null===c?c=[n]:c.push(n),d++}for(const l in n)if("content"!==l&&"alignment"!==l&&"wrapWord"!==l&&"truncate"!==l&&"paddingLeft"!==l&&"paddingRight"!==l){const n={instancePath:e+"/header",schemaPath:"#/properties/header/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:l},message:"must NOT have additional properties"};null===c?c=[n]:c.push(n),d++}if(void 0!==n.content&&"string"!=typeof n.content){const n={instancePath:e+"/header/content",schemaPath:"#/properties/header/properties/content/type",keyword:"type",params:{type:"string"},message:"must be string"};null===c?c=[n]:c.push(n),d++}if(void 0!==n.alignment&&(a(n.alignment,{instancePath:e+"/header/alignment",parentData:n,parentDataProperty:"alignment",rootData:s})||(c=null===c?a.errors:c.concat(a.errors),d=c.length)),void 0!==n.wrapWord&&"boolean"!=typeof n.wrapWord){const n={instancePath:e+"/header/wrapWord",schemaPath:"#/properties/header/properties/wrapWord/type",keyword:"type",params:{type:"boolean"},message:"must be boolean"};null===c?c=[n]:c.push(n),d++}if(void 0!==n.truncate){let l=n.truncate;if("number"!=typeof l||l%1||isNaN(l)||!isFinite(l)){const n={instancePath:e+"/header/truncate",schemaPath:"#/properties/header/properties/truncate/type",keyword:"type",params:{type:"integer"},message:"must be integer"};null===c?c=[n]:c.push(n),d++}}if(void 0!==n.paddingLeft){let l=n.paddingLeft;if("number"!=typeof l||l%1||isNaN(l)||!isFinite(l)){const n={instancePath:e+"/header/paddingLeft",schemaPath:"#/properties/header/properties/paddingLeft/type",keyword:"type",params:{type:"integer"},message:"must be integer"};null===c?c=[n]:c.push(n),d++}}if(void 0!==n.paddingRight){let l=n.paddingRight;if("number"!=typeof l||l%1||isNaN(l)||!isFinite(l)){const n={instancePath:e+"/header/paddingRight",schemaPath:"#/properties/header/properties/paddingRight/type",keyword:"type",params:{type:"integer"},message:"must be integer"};null===c?c=[n]:c.push(n),d++}}}else{const n={instancePath:e+"/header",schemaPath:"#/properties/header/type",keyword:"type",params:{type:"object"},message:"must be object"};null===c?c=[n]:c.push(n),d++}}if(void 0!==l.columns&&(m(l.columns,{instancePath:e+"/columns",parentData:l,parentDataProperty:"columns",rootData:s})||(c=null===c?m.errors:c.concat(m.errors),d=c.length)),void 0!==l.columnDefault&&(g(l.columnDefault,{instancePath:e+"/columnDefault",parentData:l,parentDataProperty:"columnDefault",rootData:s})||(c=null===c?g.errors:c.concat(g.errors),d=c.length)),void 0!==l.drawVerticalLine&&"function"!=typeof l.drawVerticalLine){const n={instancePath:e+"/drawVerticalLine",schemaPath:"#/properties/drawVerticalLine/typeof",keyword:"typeof",params:{},message:'must pass "typeof" keyword validation'};null===c?c=[n]:c.push(n),d++}if(void 0!==l.drawHorizontalLine&&"function"!=typeof l.drawHorizontalLine){const n={instancePath:e+"/drawHorizontalLine",schemaPath:"#/properties/drawHorizontalLine/typeof",keyword:"typeof",params:{},message:'must pass "typeof" keyword validation'};null===c?c=[n]:c.push(n),d++}if(void 0!==l.singleLine&&"boolean"!=typeof l.singleLine){const n={instancePath:e+"/singleLine",schemaPath:"#/properties/singleLine/typeof",keyword:"typeof",params:{},message:'must pass "typeof" keyword validation'};null===c?c=[n]:c.push(n),d++}if(void 0!==l.spanningCells){let n=l.spanningCells;if(Array.isArray(n)){const l=n.length;for(let u=0;u<l;u++){let l=n[u];if(l&&"object"==typeof l&&!Array.isArray(l)){if(void 0===l.row){const n={instancePath:e+"/spanningCells/"+u,schemaPath:"#/properties/spanningCells/items/required",keyword:"required",params:{missingProperty:"row"},message:"must have required property 'row'"};null===c?c=[n]:c.push(n),d++}if(void 0===l.col){const n={instancePath:e+"/spanningCells/"+u,schemaPath:"#/properties/spanningCells/items/required",keyword:"required",params:{missingProperty:"col"},message:"must have required property 'col'"};null===c?c=[n]:c.push(n),d++}for(const n in l)if(!r.call(t.properties.spanningCells.items.properties,n)){const l={instancePath:e+"/spanningCells/"+u,schemaPath:"#/properties/spanningCells/items/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:n},message:"must NOT have additional properties"};null===c?c=[l]:c.push(l),d++}if(void 0!==l.col){let n=l.col;if("number"!=typeof n||n%1||isNaN(n)||!isFinite(n)){const n={instancePath:e+"/spanningCells/"+u+"/col",schemaPath:"#/properties/spanningCells/items/properties/col/type",keyword:"type",params:{type:"integer"},message:"must be integer"};null===c?c=[n]:c.push(n),d++}if("number"==typeof n&&isFinite(n)&&(n<0||isNaN(n))){const n={instancePath:e+"/spanningCells/"+u+"/col",schemaPath:"#/properties/spanningCells/items/properties/col/minimum",keyword:"minimum",params:{comparison:">=",limit:0},message:"must be >= 0"};null===c?c=[n]:c.push(n),d++}}if(void 0!==l.row){let n=l.row;if("number"!=typeof n||n%1||isNaN(n)||!isFinite(n)){const n={instancePath:e+"/spanningCells/"+u+"/row",schemaPath:"#/properties/spanningCells/items/properties/row/type",keyword:"type",params:{type:"integer"},message:"must be integer"};null===c?c=[n]:c.push(n),d++}if("number"==typeof n&&isFinite(n)&&(n<0||isNaN(n))){const n={instancePath:e+"/spanningCells/"+u+"/row",schemaPath:"#/properties/spanningCells/items/properties/row/minimum",keyword:"minimum",params:{comparison:">=",limit:0},message:"must be >= 0"};null===c?c=[n]:c.push(n),d++}}if(void 0!==l.colSpan){let n=l.colSpan;if("number"!=typeof n||n%1||isNaN(n)||!isFinite(n)){const n={instancePath:e+"/spanningCells/"+u+"/colSpan",schemaPath:"#/properties/spanningCells/items/properties/colSpan/type",keyword:"type",params:{type:"integer"},message:"must be integer"};null===c?c=[n]:c.push(n),d++}if("number"==typeof n&&isFinite(n)&&(n<1||isNaN(n))){const n={instancePath:e+"/spanningCells/"+u+"/colSpan",schemaPath:"#/properties/spanningCells/items/properties/colSpan/minimum",keyword:"minimum",params:{comparison:">=",limit:1},message:"must be >= 1"};null===c?c=[n]:c.push(n),d++}}if(void 0!==l.rowSpan){let n=l.rowSpan;if("number"!=typeof n||n%1||isNaN(n)||!isFinite(n)){const n={instancePath:e+"/spanningCells/"+u+"/rowSpan",schemaPath:"#/properties/spanningCells/items/properties/rowSpan/type",keyword:"type",params:{type:"integer"},message:"must be integer"};null===c?c=[n]:c.push(n),d++}if("number"==typeof n&&isFinite(n)&&(n<1||isNaN(n))){const n={instancePath:e+"/spanningCells/"+u+"/rowSpan",schemaPath:"#/properties/spanningCells/items/properties/rowSpan/minimum",keyword:"minimum",params:{comparison:">=",limit:1},message:"must be >= 1"};null===c?c=[n]:c.push(n),d++}}if(void 0!==l.alignment&&(a(l.alignment,{instancePath:e+"/spanningCells/"+u+"/alignment",parentData:l,parentDataProperty:"alignment",rootData:s})||(c=null===c?a.errors:c.concat(a.errors),d=c.length)),void 0!==l.verticalAlignment&&(y(l.verticalAlignment,{instancePath:e+"/spanningCells/"+u+"/verticalAlignment",parentData:l,parentDataProperty:"verticalAlignment",rootData:s})||(c=null===c?y.errors:c.concat(y.errors),d=c.length)),void 0!==l.wrapWord&&"boolean"!=typeof l.wrapWord){const n={instancePath:e+"/spanningCells/"+u+"/wrapWord",schemaPath:"#/properties/spanningCells/items/properties/wrapWord/type",keyword:"type",params:{type:"boolean"},message:"must be boolean"};null===c?c=[n]:c.push(n),d++}if(void 0!==l.truncate){let n=l.truncate;if("number"!=typeof n||n%1||isNaN(n)||!isFinite(n)){const n={instancePath:e+"/spanningCells/"+u+"/truncate",schemaPath:"#/properties/spanningCells/items/properties/truncate/type",keyword:"type",params:{type:"integer"},message:"must be integer"};null===c?c=[n]:c.push(n),d++}}if(void 0!==l.paddingLeft){let n=l.paddingLeft;if("number"!=typeof n||n%1||isNaN(n)||!isFinite(n)){const n={instancePath:e+"/spanningCells/"+u+"/paddingLeft",schemaPath:"#/properties/spanningCells/items/properties/paddingLeft/type",keyword:"type",params:{type:"integer"},message:"must be integer"};null===c?c=[n]:c.push(n),d++}}if(void 0!==l.paddingRight){let n=l.paddingRight;if("number"!=typeof n||n%1||isNaN(n)||!isFinite(n)){const n={instancePath:e+"/spanningCells/"+u+"/paddingRight",schemaPath:"#/properties/spanningCells/items/properties/paddingRight/type",keyword:"type",params:{type:"integer"},message:"must be integer"};null===c?c=[n]:c.push(n),d++}}}else{const n={instancePath:e+"/spanningCells/"+u,schemaPath:"#/properties/spanningCells/items/type",keyword:"type",params:{type:"object"},message:"must be object"};null===c?c=[n]:c.push(n),d++}}}else{const n={instancePath:e+"/spanningCells",schemaPath:"#/properties/spanningCells/type",keyword:"type",params:{type:"array"},message:"must be array"};null===c?c=[n]:c.push(n),d++}}}else{const n={instancePath:e,schemaPath:"#/type",keyword:"type",params:{type:"object"},message:"must be object"};null===c?c=[n]:c.push(n),d++}return n.errors=c,0===d};const t={$id:"config.json",$schema:"http://json-schema.org/draft-07/schema#",type:"object",properties:{border:{$ref:"shared.json#/definitions/borders"},header:{type:"object",properties:{content:{type:"string"},alignment:{$ref:"shared.json#/definitions/alignment"},wrapWord:{type:"boolean"},truncate:{type:"integer"},paddingLeft:{type:"integer"},paddingRight:{type:"integer"}},required:["content"],additionalProperties:!1},columns:{$ref:"shared.json#/definitions/columns"},columnDefault:{$ref:"shared.json#/definitions/column"},drawVerticalLine:{typeof:"function"},drawHorizontalLine:{typeof:"function"},singleLine:{typeof:"boolean"},spanningCells:{type:"array",items:{type:"object",properties:{col:{type:"integer",minimum:0},row:{type:"integer",minimum:0},colSpan:{type:"integer",minimum:1},rowSpan:{type:"integer",minimum:1},alignment:{$ref:"shared.json#/definitions/alignment"},verticalAlignment:{$ref:"shared.json#/definitions/verticalAlignment"},wrapWord:{type:"boolean"},truncate:{type:"integer"},paddingLeft:{type:"integer"},paddingRight:{type:"integer"}},required:["row","col"],additionalProperties:!1}}},additionalProperties:!1},u={type:"object",properties:{topBody:{$ref:"#/definitions/border"},topJoin:{$ref:"#/definitions/border"},topLeft:{$ref:"#/definitions/border"},topRight:{$ref:"#/definitions/border"},bottomBody:{$ref:"#/definitions/border"},bottomJoin:{$ref:"#/definitions/border"},bottomLeft:{$ref:"#/definitions/border"},bottomRight:{$ref:"#/definitions/border"},bodyLeft:{$ref:"#/definitions/border"},bodyRight:{$ref:"#/definitions/border"},bodyJoin:{$ref:"#/definitions/border"},headerJoin:{$ref:"#/definitions/border"},joinBody:{$ref:"#/definitions/border"},joinLeft:{$ref:"#/definitions/border"},joinRight:{$ref:"#/definitions/border"},joinJoin:{$ref:"#/definitions/border"},joinMiddleUp:{$ref:"#/definitions/border"},joinMiddleDown:{$ref:"#/definitions/border"},joinMiddleLeft:{$ref:"#/definitions/border"},joinMiddleRight:{$ref:"#/definitions/border"}},additionalProperties:!1},r=Object.prototype.hasOwnProperty;function o(n,{instancePath:l="",parentData:e,parentDataProperty:t,rootData:u=n}={}){let r=null,i=0;if("string"!=typeof n){const n={instancePath:l,schemaPath:"#/type",keyword:"type",params:{type:"string"},message:"must be string"};null===r?r=[n]:r.push(n),i++}return o.errors=r,0===i}function i(n,{instancePath:l="",parentData:e,parentDataProperty:t,rootData:s=n}={}){let a=null,c=0;if(n&&"object"==typeof n&&!Array.isArray(n)){for(const e in n)if(!r.call(u.properties,e)){const n={instancePath:l,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:e},message:"must NOT have additional properties"};null===a?a=[n]:a.push(n),c++}void 0!==n.topBody&&(o(n.topBody,{instancePath:l+"/topBody",parentData:n,parentDataProperty:"topBody",rootData:s})||(a=null===a?o.errors:a.concat(o.errors),c=a.length)),void 0!==n.topJoin&&(o(n.topJoin,{instancePath:l+"/topJoin",parentData:n,parentDataProperty:"topJoin",rootData:s})||(a=null===a?o.errors:a.concat(o.errors),c=a.length)),void 0!==n.topLeft&&(o(n.topLeft,{instancePath:l+"/topLeft",parentData:n,parentDataProperty:"topLeft",rootData:s})||(a=null===a?o.errors:a.concat(o.errors),c=a.length)),void 0!==n.topRight&&(o(n.topRight,{instancePath:l+"/topRight",parentData:n,parentDataProperty:"topRight",rootData:s})||(a=null===a?o.errors:a.concat(o.errors),c=a.length)),void 0!==n.bottomBody&&(o(n.bottomBody,{instancePath:l+"/bottomBody",parentData:n,parentDataProperty:"bottomBody",rootData:s})||(a=null===a?o.errors:a.concat(o.errors),c=a.length)),void 0!==n.bottomJoin&&(o(n.bottomJoin,{instancePath:l+"/bottomJoin",parentData:n,parentDataProperty:"bottomJoin",rootData:s})||(a=null===a?o.errors:a.concat(o.errors),c=a.length)),void 0!==n.bottomLeft&&(o(n.bottomLeft,{instancePath:l+"/bottomLeft",parentData:n,parentDataProperty:"bottomLeft",rootData:s})||(a=null===a?o.errors:a.concat(o.errors),c=a.length)),void 0!==n.bottomRight&&(o(n.bottomRight,{instancePath:l+"/bottomRight",parentData:n,parentDataProperty:"bottomRight",rootData:s})||(a=null===a?o.errors:a.concat(o.errors),c=a.length)),void 0!==n.bodyLeft&&(o(n.bodyLeft,{instancePath:l+"/bodyLeft",parentData:n,parentDataProperty:"bodyLeft",rootData:s})||(a=null===a?o.errors:a.concat(o.errors),c=a.length)),void 0!==n.bodyRight&&(o(n.bodyRight,{instancePath:l+"/bodyRight",parentData:n,parentDataProperty:"bodyRight",rootData:s})||(a=null===a?o.errors:a.concat(o.errors),c=a.length)),void 0!==n.bodyJoin&&(o(n.bodyJoin,{instancePath:l+"/bodyJoin",parentData:n,parentDataProperty:"bodyJoin",rootData:s})||(a=null===a?o.errors:a.concat(o.errors),c=a.length)),void 0!==n.headerJoin&&(o(n.headerJoin,{instancePath:l+"/headerJoin",parentData:n,parentDataProperty:"headerJoin",rootData:s})||(a=null===a?o.errors:a.concat(o.errors),c=a.length)),void 0!==n.joinBody&&(o(n.joinBody,{instancePath:l+"/joinBody",parentData:n,parentDataProperty:"joinBody",rootData:s})||(a=null===a?o.errors:a.concat(o.errors),c=a.length)),void 0!==n.joinLeft&&(o(n.joinLeft,{instancePath:l+"/joinLeft",parentData:n,parentDataProperty:"joinLeft",rootData:s})||(a=null===a?o.errors:a.concat(o.errors),c=a.length)),void 0!==n.joinRight&&(o(n.joinRight,{instancePath:l+"/joinRight",parentData:n,parentDataProperty:"joinRight",rootData:s})||(a=null===a?o.errors:a.concat(o.errors),c=a.length)),void 0!==n.joinJoin&&(o(n.joinJoin,{instancePath:l+"/joinJoin",parentData:n,parentDataProperty:"joinJoin",rootData:s})||(a=null===a?o.errors:a.concat(o.errors),c=a.length)),void 0!==n.joinMiddleUp&&(o(n.joinMiddleUp,{instancePath:l+"/joinMiddleUp",parentData:n,parentDataProperty:"joinMiddleUp",rootData:s})||(a=null===a?o.errors:a.concat(o.errors),c=a.length)),void 0!==n.joinMiddleDown&&(o(n.joinMiddleDown,{instancePath:l+"/joinMiddleDown",parentData:n,parentDataProperty:"joinMiddleDown",rootData:s})||(a=null===a?o.errors:a.concat(o.errors),c=a.length)),void 0!==n.joinMiddleLeft&&(o(n.joinMiddleLeft,{instancePath:l+"/joinMiddleLeft",parentData:n,parentDataProperty:"joinMiddleLeft",rootData:s})||(a=null===a?o.errors:a.concat(o.errors),c=a.length)),void 0!==n.joinMiddleRight&&(o(n.joinMiddleRight,{instancePath:l+"/joinMiddleRight",parentData:n,parentDataProperty:"joinMiddleRight",rootData:s})||(a=null===a?o.errors:a.concat(o.errors),c=a.length))}else{const n={instancePath:l,schemaPath:"#/type",keyword:"type",params:{type:"object"},message:"must be object"};null===a?a=[n]:a.push(n),c++}return i.errors=a,0===c}const s={type:"string",enum:["left","right","center","justify"]};function a(n,{instancePath:l="",parentData:e,parentDataProperty:t,rootData:u=n}={}){let r=null,o=0;if("string"!=typeof n){const n={instancePath:l,schemaPath:"#/type",keyword:"type",params:{type:"string"},message:"must be string"};null===r?r=[n]:r.push(n),o++}if("left"!==n&&"right"!==n&&"center"!==n&&"justify"!==n){const n={instancePath:l,schemaPath:"#/enum",keyword:"enum",params:{allowedValues:s.enum},message:"must be equal to one of the allowed values"};null===r?r=[n]:r.push(n),o++}return a.errors=r,0===o}e(908).A;const c=new RegExp("^[0-9]+$","u");function d(n,{instancePath:l="",parentData:e,parentDataProperty:t,rootData:u=n}={}){let r=null,o=0;if("string"!=typeof n){const n={instancePath:l,schemaPath:"#/type",keyword:"type",params:{type:"string"},message:"must be string"};null===r?r=[n]:r.push(n),o++}if("left"!==n&&"right"!==n&&"center"!==n&&"justify"!==n){const n={instancePath:l,schemaPath:"#/enum",keyword:"enum",params:{allowedValues:s.enum},message:"must be equal to one of the allowed values"};null===r?r=[n]:r.push(n),o++}return d.errors=r,0===o}const h={type:"string",enum:["top","middle","bottom"]};function f(n,{instancePath:l="",parentData:e,parentDataProperty:t,rootData:u=n}={}){let r=null,o=0;if("string"!=typeof n){const n={instancePath:l,schemaPath:"#/type",keyword:"type",params:{type:"string"},message:"must be string"};null===r?r=[n]:r.push(n),o++}if("top"!==n&&"middle"!==n&&"bottom"!==n){const n={instancePath:l,schemaPath:"#/enum",keyword:"enum",params:{allowedValues:h.enum},message:"must be equal to one of the allowed values"};null===r?r=[n]:r.push(n),o++}return f.errors=r,0===o}function p(n,{instancePath:l="",parentData:e,parentDataProperty:t,rootData:u=n}={}){let r=null,o=0;if(n&&"object"==typeof n&&!Array.isArray(n)){for(const e in n)if("alignment"!==e&&"verticalAlignment"!==e&&"width"!==e&&"wrapWord"!==e&&"truncate"!==e&&"paddingLeft"!==e&&"paddingRight"!==e){const n={instancePath:l,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:e},message:"must NOT have additional properties"};null===r?r=[n]:r.push(n),o++}if(void 0!==n.alignment&&(d(n.alignment,{instancePath:l+"/alignment",parentData:n,parentDataProperty:"alignment",rootData:u})||(r=null===r?d.errors:r.concat(d.errors),o=r.length)),void 0!==n.verticalAlignment&&(f(n.verticalAlignment,{instancePath:l+"/verticalAlignment",parentData:n,parentDataProperty:"verticalAlignment",rootData:u})||(r=null===r?f.errors:r.concat(f.errors),o=r.length)),void 0!==n.width){let e=n.width;if("number"!=typeof e||e%1||isNaN(e)||!isFinite(e)){const n={instancePath:l+"/width",schemaPath:"#/properties/width/type",keyword:"type",params:{type:"integer"},message:"must be integer"};null===r?r=[n]:r.push(n),o++}if("number"==typeof e&&isFinite(e)&&(e<1||isNaN(e))){const n={instancePath:l+"/width",schemaPath:"#/properties/width/minimum",keyword:"minimum",params:{comparison:">=",limit:1},message:"must be >= 1"};null===r?r=[n]:r.push(n),o++}}if(void 0!==n.wrapWord&&"boolean"!=typeof n.wrapWord){const n={instancePath:l+"/wrapWord",schemaPath:"#/properties/wrapWord/type",keyword:"type",params:{type:"boolean"},message:"must be boolean"};null===r?r=[n]:r.push(n),o++}if(void 0!==n.truncate){let e=n.truncate;if("number"!=typeof e||e%1||isNaN(e)||!isFinite(e)){const n={instancePath:l+"/truncate",schemaPath:"#/properties/truncate/type",keyword:"type",params:{type:"integer"},message:"must be integer"};null===r?r=[n]:r.push(n),o++}}if(void 0!==n.paddingLeft){let e=n.paddingLeft;if("number"!=typeof e||e%1||isNaN(e)||!isFinite(e)){const n={instancePath:l+"/paddingLeft",schemaPath:"#/properties/paddingLeft/type",keyword:"type",params:{type:"integer"},message:"must be integer"};null===r?r=[n]:r.push(n),o++}}if(void 0!==n.paddingRight){let e=n.paddingRight;if("number"!=typeof e||e%1||isNaN(e)||!isFinite(e)){const n={instancePath:l+"/paddingRight",schemaPath:"#/properties/paddingRight/type",keyword:"type",params:{type:"integer"},message:"must be integer"};null===r?r=[n]:r.push(n),o++}}}else{const n={instancePath:l,schemaPath:"#/type",keyword:"type",params:{type:"object"},message:"must be object"};null===r?r=[n]:r.push(n),o++}return p.errors=r,0===o}function m(n,{instancePath:l="",parentData:e,parentDataProperty:t,rootData:u=n}={}){let r=null,o=0;const i=o;let s=!1,a=null;const d=o;if(n&&"object"==typeof n&&!Array.isArray(n)){for(const e in n)if(!c.test(e)){const n={instancePath:l,schemaPath:"#/oneOf/0/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:e},message:"must NOT have additional properties"};null===r?r=[n]:r.push(n),o++}for(const e in n)c.test(e)&&(p(n[e],{instancePath:l+"/"+e.replace(/~/g,"~0").replace(/\//g,"~1"),parentData:n,parentDataProperty:e,rootData:u})||(r=null===r?p.errors:r.concat(p.errors),o=r.length))}else{const n={instancePath:l,schemaPath:"#/oneOf/0/type",keyword:"type",params:{type:"object"},message:"must be object"};null===r?r=[n]:r.push(n),o++}d===o&&(s=!0,a=0);const h=o;if(Array.isArray(n)){const e=n.length;for(let t=0;t<e;t++)p(n[t],{instancePath:l+"/"+t,parentData:n,parentDataProperty:t,rootData:u})||(r=null===r?p.errors:r.concat(p.errors),o=r.length)}else{const n={instancePath:l,schemaPath:"#/oneOf/1/type",keyword:"type",params:{type:"array"},message:"must be array"};null===r?r=[n]:r.push(n),o++}var f;if((f=h===o)&&s?(s=!1,a=[a,1]):f&&(s=!0,a=1),s)o=i,null!==r&&(i?r.length=i:r=null);else{const n={instancePath:l,schemaPath:"#/oneOf",keyword:"oneOf",params:{passingSchemas:a},message:"must match exactly one schema in oneOf"};null===r?r=[n]:r.push(n),o++}return m.errors=r,0===o}function g(n,{instancePath:l="",parentData:e,parentDataProperty:t,rootData:u=n}={}){let r=null,o=0;if(n&&"object"==typeof n&&!Array.isArray(n)){for(const e in n)if("alignment"!==e&&"verticalAlignment"!==e&&"width"!==e&&"wrapWord"!==e&&"truncate"!==e&&"paddingLeft"!==e&&"paddingRight"!==e){const n={instancePath:l,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:e},message:"must NOT have additional properties"};null===r?r=[n]:r.push(n),o++}if(void 0!==n.alignment&&(d(n.alignment,{instancePath:l+"/alignment",parentData:n,parentDataProperty:"alignment",rootData:u})||(r=null===r?d.errors:r.concat(d.errors),o=r.length)),void 0!==n.verticalAlignment&&(f(n.verticalAlignment,{instancePath:l+"/verticalAlignment",parentData:n,parentDataProperty:"verticalAlignment",rootData:u})||(r=null===r?f.errors:r.concat(f.errors),o=r.length)),void 0!==n.width){let e=n.width;if("number"!=typeof e||e%1||isNaN(e)||!isFinite(e)){const n={instancePath:l+"/width",schemaPath:"#/properties/width/type",keyword:"type",params:{type:"integer"},message:"must be integer"};null===r?r=[n]:r.push(n),o++}if("number"==typeof e&&isFinite(e)&&(e<1||isNaN(e))){const n={instancePath:l+"/width",schemaPath:"#/properties/width/minimum",keyword:"minimum",params:{comparison:">=",limit:1},message:"must be >= 1"};null===r?r=[n]:r.push(n),o++}}if(void 0!==n.wrapWord&&"boolean"!=typeof n.wrapWord){const n={instancePath:l+"/wrapWord",schemaPath:"#/properties/wrapWord/type",keyword:"type",params:{type:"boolean"},message:"must be boolean"};null===r?r=[n]:r.push(n),o++}if(void 0!==n.truncate){let e=n.truncate;if("number"!=typeof e||e%1||isNaN(e)||!isFinite(e)){const n={instancePath:l+"/truncate",schemaPath:"#/properties/truncate/type",keyword:"type",params:{type:"integer"},message:"must be integer"};null===r?r=[n]:r.push(n),o++}}if(void 0!==n.paddingLeft){let e=n.paddingLeft;if("number"!=typeof e||e%1||isNaN(e)||!isFinite(e)){const n={instancePath:l+"/paddingLeft",schemaPath:"#/properties/paddingLeft/type",keyword:"type",params:{type:"integer"},message:"must be integer"};null===r?r=[n]:r.push(n),o++}}if(void 0!==n.paddingRight){let e=n.paddingRight;if("number"!=typeof e||e%1||isNaN(e)||!isFinite(e)){const n={instancePath:l+"/paddingRight",schemaPath:"#/properties/paddingRight/type",keyword:"type",params:{type:"integer"},message:"must be integer"};null===r?r=[n]:r.push(n),o++}}}else{const n={instancePath:l,schemaPath:"#/type",keyword:"type",params:{type:"object"},message:"must be object"};null===r?r=[n]:r.push(n),o++}return g.errors=r,0===o}function y(n,{instancePath:l="",parentData:e,parentDataProperty:t,rootData:u=n}={}){let r=null,o=0;if("string"!=typeof n){const n={instancePath:l,schemaPath:"#/type",keyword:"type",params:{type:"string"},message:"must be string"};null===r?r=[n]:r.push(n),o++}if("top"!==n&&"middle"!==n&&"bottom"!==n){const n={instancePath:l,schemaPath:"#/enum",keyword:"enum",params:{allowedValues:h.enum},message:"must be equal to one of the allowed values"};null===r?r=[n]:r.push(n),o++}return y.errors=r,0===o}function v(n,{instancePath:l="",parentData:e,parentDataProperty:t,rootData:i=n}={}){let s=null,a=0;if(n&&"object"==typeof n&&!Array.isArray(n)){for(const e in n)if(!r.call(u.properties,e)){const n={instancePath:l,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:e},message:"must NOT have additional properties"};null===s?s=[n]:s.push(n),a++}void 0!==n.topBody&&(o(n.topBody,{instancePath:l+"/topBody",parentData:n,parentDataProperty:"topBody",rootData:i})||(s=null===s?o.errors:s.concat(o.errors),a=s.length)),void 0!==n.topJoin&&(o(n.topJoin,{instancePath:l+"/topJoin",parentData:n,parentDataProperty:"topJoin",rootData:i})||(s=null===s?o.errors:s.concat(o.errors),a=s.length)),void 0!==n.topLeft&&(o(n.topLeft,{instancePath:l+"/topLeft",parentData:n,parentDataProperty:"topLeft",rootData:i})||(s=null===s?o.errors:s.concat(o.errors),a=s.length)),void 0!==n.topRight&&(o(n.topRight,{instancePath:l+"/topRight",parentData:n,parentDataProperty:"topRight",rootData:i})||(s=null===s?o.errors:s.concat(o.errors),a=s.length)),void 0!==n.bottomBody&&(o(n.bottomBody,{instancePath:l+"/bottomBody",parentData:n,parentDataProperty:"bottomBody",rootData:i})||(s=null===s?o.errors:s.concat(o.errors),a=s.length)),void 0!==n.bottomJoin&&(o(n.bottomJoin,{instancePath:l+"/bottomJoin",parentData:n,parentDataProperty:"bottomJoin",rootData:i})||(s=null===s?o.errors:s.concat(o.errors),a=s.length)),void 0!==n.bottomLeft&&(o(n.bottomLeft,{instancePath:l+"/bottomLeft",parentData:n,parentDataProperty:"bottomLeft",rootData:i})||(s=null===s?o.errors:s.concat(o.errors),a=s.length)),void 0!==n.bottomRight&&(o(n.bottomRight,{instancePath:l+"/bottomRight",parentData:n,parentDataProperty:"bottomRight",rootData:i})||(s=null===s?o.errors:s.concat(o.errors),a=s.length)),void 0!==n.bodyLeft&&(o(n.bodyLeft,{instancePath:l+"/bodyLeft",parentData:n,parentDataProperty:"bodyLeft",rootData:i})||(s=null===s?o.errors:s.concat(o.errors),a=s.length)),void 0!==n.bodyRight&&(o(n.bodyRight,{instancePath:l+"/bodyRight",parentData:n,parentDataProperty:"bodyRight",rootData:i})||(s=null===s?o.errors:s.concat(o.errors),a=s.length)),void 0!==n.bodyJoin&&(o(n.bodyJoin,{instancePath:l+"/bodyJoin",parentData:n,parentDataProperty:"bodyJoin",rootData:i})||(s=null===s?o.errors:s.concat(o.errors),a=s.length)),void 0!==n.headerJoin&&(o(n.headerJoin,{instancePath:l+"/headerJoin",parentData:n,parentDataProperty:"headerJoin",rootData:i})||(s=null===s?o.errors:s.concat(o.errors),a=s.length)),void 0!==n.joinBody&&(o(n.joinBody,{instancePath:l+"/joinBody",parentData:n,parentDataProperty:"joinBody",rootData:i})||(s=null===s?o.errors:s.concat(o.errors),a=s.length)),void 0!==n.joinLeft&&(o(n.joinLeft,{instancePath:l+"/joinLeft",parentData:n,parentDataProperty:"joinLeft",rootData:i})||(s=null===s?o.errors:s.concat(o.errors),a=s.length)),void 0!==n.joinRight&&(o(n.joinRight,{instancePath:l+"/joinRight",parentData:n,parentDataProperty:"joinRight",rootData:i})||(s=null===s?o.errors:s.concat(o.errors),a=s.length)),void 0!==n.joinJoin&&(o(n.joinJoin,{instancePath:l+"/joinJoin",parentData:n,parentDataProperty:"joinJoin",rootData:i})||(s=null===s?o.errors:s.concat(o.errors),a=s.length)),void 0!==n.joinMiddleUp&&(o(n.joinMiddleUp,{instancePath:l+"/joinMiddleUp",parentData:n,parentDataProperty:"joinMiddleUp",rootData:i})||(s=null===s?o.errors:s.concat(o.errors),a=s.length)),void 0!==n.joinMiddleDown&&(o(n.joinMiddleDown,{instancePath:l+"/joinMiddleDown",parentData:n,parentDataProperty:"joinMiddleDown",rootData:i})||(s=null===s?o.errors:s.concat(o.errors),a=s.length)),void 0!==n.joinMiddleLeft&&(o(n.joinMiddleLeft,{instancePath:l+"/joinMiddleLeft",parentData:n,parentDataProperty:"joinMiddleLeft",rootData:i})||(s=null===s?o.errors:s.concat(o.errors),a=s.length)),void 0!==n.joinMiddleRight&&(o(n.joinMiddleRight,{instancePath:l+"/joinMiddleRight",parentData:n,parentDataProperty:"joinMiddleRight",rootData:i})||(s=null===s?o.errors:s.concat(o.errors),a=s.length))}else{const n={instancePath:l,schemaPath:"#/type",keyword:"type",params:{type:"object"},message:"must be object"};null===s?s=[n]:s.push(n),a++}return v.errors=s,0===a}function w(n,{instancePath:l="",parentData:e,parentDataProperty:t,rootData:u=n}={}){let r=null,o=0;const i=o;let s=!1,a=null;const d=o;if(n&&"object"==typeof n&&!Array.isArray(n)){for(const e in n)if(!c.test(e)){const n={instancePath:l,schemaPath:"#/oneOf/0/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:e},message:"must NOT have additional properties"};null===r?r=[n]:r.push(n),o++}for(const e in n)c.test(e)&&(p(n[e],{instancePath:l+"/"+e.replace(/~/g,"~0").replace(/\//g,"~1"),parentData:n,parentDataProperty:e,rootData:u})||(r=null===r?p.errors:r.concat(p.errors),o=r.length))}else{const n={instancePath:l,schemaPath:"#/oneOf/0/type",keyword:"type",params:{type:"object"},message:"must be object"};null===r?r=[n]:r.push(n),o++}d===o&&(s=!0,a=0);const h=o;if(Array.isArray(n)){const e=n.length;for(let t=0;t<e;t++)p(n[t],{instancePath:l+"/"+t,parentData:n,parentDataProperty:t,rootData:u})||(r=null===r?p.errors:r.concat(p.errors),o=r.length)}else{const n={instancePath:l,schemaPath:"#/oneOf/1/type",keyword:"type",params:{type:"array"},message:"must be array"};null===r?r=[n]:r.push(n),o++}var f;if((f=h===o)&&s?(s=!1,a=[a,1]):f&&(s=!0,a=1),s)o=i,null!==r&&(i?r.length=i:r=null);else{const n={instancePath:l,schemaPath:"#/oneOf",keyword:"oneOf",params:{passingSchemas:a},message:"must match exactly one schema in oneOf"};null===r?r=[n]:r.push(n),o++}return w.errors=r,0===o}function b(n,{instancePath:l="",parentData:e,parentDataProperty:t,rootData:u=n}={}){let r=null,o=0;if(n&&"object"==typeof n&&!Array.isArray(n)){for(const e in n)if("alignment"!==e&&"verticalAlignment"!==e&&"width"!==e&&"wrapWord"!==e&&"truncate"!==e&&"paddingLeft"!==e&&"paddingRight"!==e){const n={instancePath:l,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:e},message:"must NOT have additional properties"};null===r?r=[n]:r.push(n),o++}if(void 0!==n.alignment&&(d(n.alignment,{instancePath:l+"/alignment",parentData:n,parentDataProperty:"alignment",rootData:u})||(r=null===r?d.errors:r.concat(d.errors),o=r.length)),void 0!==n.verticalAlignment&&(f(n.verticalAlignment,{instancePath:l+"/verticalAlignment",parentData:n,parentDataProperty:"verticalAlignment",rootData:u})||(r=null===r?f.errors:r.concat(f.errors),o=r.length)),void 0!==n.width){let e=n.width;if("number"!=typeof e||e%1||isNaN(e)||!isFinite(e)){const n={instancePath:l+"/width",schemaPath:"#/properties/width/type",keyword:"type",params:{type:"integer"},message:"must be integer"};null===r?r=[n]:r.push(n),o++}if("number"==typeof e&&isFinite(e)&&(e<1||isNaN(e))){const n={instancePath:l+"/width",schemaPath:"#/properties/width/minimum",keyword:"minimum",params:{comparison:">=",limit:1},message:"must be >= 1"};null===r?r=[n]:r.push(n),o++}}if(void 0!==n.wrapWord&&"boolean"!=typeof n.wrapWord){const n={instancePath:l+"/wrapWord",schemaPath:"#/properties/wrapWord/type",keyword:"type",params:{type:"boolean"},message:"must be boolean"};null===r?r=[n]:r.push(n),o++}if(void 0!==n.truncate){let e=n.truncate;if("number"!=typeof e||e%1||isNaN(e)||!isFinite(e)){const n={instancePath:l+"/truncate",schemaPath:"#/properties/truncate/type",keyword:"type",params:{type:"integer"},message:"must be integer"};null===r?r=[n]:r.push(n),o++}}if(void 0!==n.paddingLeft){let e=n.paddingLeft;if("number"!=typeof e||e%1||isNaN(e)||!isFinite(e)){const n={instancePath:l+"/paddingLeft",schemaPath:"#/properties/paddingLeft/type",keyword:"type",params:{type:"integer"},message:"must be integer"};null===r?r=[n]:r.push(n),o++}}if(void 0!==n.paddingRight){let e=n.paddingRight;if("number"!=typeof e||e%1||isNaN(e)||!isFinite(e)){const n={instancePath:l+"/paddingRight",schemaPath:"#/properties/paddingRight/type",keyword:"type",params:{type:"integer"},message:"must be integer"};null===r?r=[n]:r.push(n),o++}}}else{const n={instancePath:l,schemaPath:"#/type",keyword:"type",params:{type:"object"},message:"must be object"};null===r?r=[n]:r.push(n),o++}return b.errors=r,0===o}l["streamConfig.json"]=function n(l,{instancePath:e="",parentData:t,parentDataProperty:u,rootData:r=l}={}){let o=null,i=0;if(l&&"object"==typeof l&&!Array.isArray(l)){if(void 0===l.columnDefault){const n={instancePath:e,schemaPath:"#/required",keyword:"required",params:{missingProperty:"columnDefault"},message:"must have required property 'columnDefault'"};null===o?o=[n]:o.push(n),i++}if(void 0===l.columnCount){const n={instancePath:e,schemaPath:"#/required",keyword:"required",params:{missingProperty:"columnCount"},message:"must have required property 'columnCount'"};null===o?o=[n]:o.push(n),i++}for(const n in l)if("border"!==n&&"columns"!==n&&"columnDefault"!==n&&"columnCount"!==n&&"drawVerticalLine"!==n){const l={instancePath:e,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:n},message:"must NOT have additional properties"};null===o?o=[l]:o.push(l),i++}if(void 0!==l.border&&(v(l.border,{instancePath:e+"/border",parentData:l,parentDataProperty:"border",rootData:r})||(o=null===o?v.errors:o.concat(v.errors),i=o.length)),void 0!==l.columns&&(w(l.columns,{instancePath:e+"/columns",parentData:l,parentDataProperty:"columns",rootData:r})||(o=null===o?w.errors:o.concat(w.errors),i=o.length)),void 0!==l.columnDefault&&(b(l.columnDefault,{instancePath:e+"/columnDefault",parentData:l,parentDataProperty:"columnDefault",rootData:r})||(o=null===o?b.errors:o.concat(b.errors),i=o.length)),void 0!==l.columnCount){let n=l.columnCount;if("number"!=typeof n||n%1||isNaN(n)||!isFinite(n)){const n={instancePath:e+"/columnCount",schemaPath:"#/properties/columnCount/type",keyword:"type",params:{type:"integer"},message:"must be integer"};null===o?o=[n]:o.push(n),i++}if("number"==typeof n&&isFinite(n)&&(n<1||isNaN(n))){const n={instancePath:e+"/columnCount",schemaPath:"#/properties/columnCount/minimum",keyword:"minimum",params:{comparison:">=",limit:1},message:"must be >= 1"};null===o?o=[n]:o.push(n),i++}}if(void 0!==l.drawVerticalLine&&"function"!=typeof l.drawVerticalLine){const n={instancePath:e+"/drawVerticalLine",schemaPath:"#/properties/drawVerticalLine/typeof",keyword:"typeof",params:{},message:'must pass "typeof" keyword validation'};null===o?o=[n]:o.push(n),i++}}else{const n={instancePath:e,schemaPath:"#/type",keyword:"type",params:{type:"object"},message:"must be object"};null===o?o=[n]:o.push(n),i++}return n.errors=o,0===i}},5135:(n,l)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.getBorderCharacters=void 0,l.getBorderCharacters=n=>{if("honeywell"===n)return{topBody:"═",topJoin:"╤",topLeft:"╔",topRight:"╗",bottomBody:"═",bottomJoin:"╧",bottomLeft:"╚",bottomRight:"╝",bodyLeft:"║",bodyRight:"║",bodyJoin:"│",headerJoin:"┬",joinBody:"─",joinLeft:"╟",joinRight:"╢",joinJoin:"┼",joinMiddleDown:"┬",joinMiddleUp:"┴",joinMiddleLeft:"┤",joinMiddleRight:"├"};if("norc"===n)return{topBody:"─",topJoin:"┬",topLeft:"┌",topRight:"┐",bottomBody:"─",bottomJoin:"┴",bottomLeft:"└",bottomRight:"┘",bodyLeft:"│",bodyRight:"│",bodyJoin:"│",headerJoin:"┬",joinBody:"─",joinLeft:"├",joinRight:"┤",joinJoin:"┼",joinMiddleDown:"┬",joinMiddleUp:"┴",joinMiddleLeft:"┤",joinMiddleRight:"├"};if("ramac"===n)return{topBody:"-",topJoin:"+",topLeft:"+",topRight:"+",bottomBody:"-",bottomJoin:"+",bottomLeft:"+",bottomRight:"+",bodyLeft:"|",bodyRight:"|",bodyJoin:"|",headerJoin:"+",joinBody:"-",joinLeft:"|",joinRight:"|",joinJoin:"|",joinMiddleDown:"+",joinMiddleUp:"+",joinMiddleLeft:"+",joinMiddleRight:"+"};if("void"===n)return{topBody:"",topJoin:"",topLeft:"",topRight:"",bottomBody:"",bottomJoin:"",bottomLeft:"",bottomRight:"",bodyLeft:"",bodyRight:"",bodyJoin:"",headerJoin:"",joinBody:"",joinLeft:"",joinRight:"",joinJoin:"",joinMiddleDown:"",joinMiddleUp:"",joinMiddleLeft:"",joinMiddleRight:""};throw new Error('Unknown border template "'+n+'".')}},4249:function(n,l,e){"use strict";var t=this&&this.__createBinding||(Object.create?function(n,l,e,t){void 0===t&&(t=e),Object.defineProperty(n,t,{enumerable:!0,get:function(){return l[e]}})}:function(n,l,e,t){void 0===t&&(t=e),n[t]=l[e]}),u=this&&this.__exportStar||function(n,l){for(var e in n)"default"===e||Object.prototype.hasOwnProperty.call(l,e)||t(l,n,e)};Object.defineProperty(l,"__esModule",{value:!0}),l.getBorderCharacters=l.createStream=l.table=void 0;const r=e(7577);Object.defineProperty(l,"createStream",{enumerable:!0,get:function(){return r.createStream}});const o=e(5135);Object.defineProperty(l,"getBorderCharacters",{enumerable:!0,get:function(){return o.getBorderCharacters}});const i=e(1017);Object.defineProperty(l,"table",{enumerable:!0,get:function(){return i.table}}),u(e(4763),l)},31:(n,l)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.injectHeaderConfig=void 0,l.injectHeaderConfig=(n,l)=>{var e;let t=null!==(e=l.spanningCells)&&void 0!==e?e:[];const u=l.header,r=[...n];if(u){t=t.map((({row:n,...l})=>({...l,row:n+1})));const{content:l,...e}=u;t.unshift({alignment:"center",col:0,colSpan:n[0].length,paddingLeft:1,paddingRight:1,row:0,wrapWord:!1,...e}),r.unshift([l,...Array.from({length:n[0].length-1}).fill("")])}return[r,t]}},1860:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.makeRangeConfig=void 0;const t=e(5268);l.makeRangeConfig=(n,l)=>{var e;const{topLeft:u,bottomRight:r}=(0,t.calculateRangeCoordinate)(n);return{...{...l[u.col],...n,paddingRight:null!==(e=n.paddingRight)&&void 0!==e?e:l[r.col].paddingRight},bottomRight:r,topLeft:u}}},1281:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.makeStreamConfig=void 0;const t=e(5268),u=e(6189),r=(n,l={},e)=>Array.from({length:n}).map(((n,t)=>({alignment:"left",paddingLeft:1,paddingRight:1,truncate:Number.POSITIVE_INFINITY,verticalAlignment:"top",wrapWord:!1,...e,...l[t]})));l.makeStreamConfig=n=>{if((0,u.validateConfig)("streamConfig.json",n),void 0===n.columnDefault.width)throw new Error("Must provide config.columnDefault.width when creating a stream.");return{drawVerticalLine:()=>!0,...n,border:(0,t.makeBorderConfig)(n.border),columns:r(n.columnCount,n.columns,n.columnDefault)}}},3829:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.makeTableConfig=void 0;const t=e(1280),u=e(6204),r=e(5268),o=e(6189),i=e(5067);l.makeTableConfig=(n,l={},e)=>{var s,a,c,d,h;(0,o.validateConfig)("config.json",l),(0,i.validateSpanningCellConfig)(n,null!==(s=l.spanningCells)&&void 0!==s?s:[]);const f=null!==(a=null!=e?e:l.spanningCells)&&void 0!==a?a:[],p=((n,l,e,u)=>{const r=(0,t.calculateMaximumColumnWidths)(n,u);return n[0].map(((n,t)=>({alignment:"left",paddingLeft:1,paddingRight:1,truncate:Number.POSITIVE_INFINITY,verticalAlignment:"top",width:r[t],wrapWord:!1,...e,...null==l?void 0:l[t]})))})(n,l.columns,l.columnDefault,f),m=null!==(c=l.drawVerticalLine)&&void 0!==c?c:()=>!0,g=null!==(d=l.drawHorizontalLine)&&void 0!==d?d:()=>!0;return{...l,border:(0,r.makeBorderConfig)(l.border),columns:p,drawHorizontalLine:g,drawVerticalLine:m,singleLine:null!==(h=l.singleLine)&&void 0!==h&&h,spanningCellManager:(0,u.createSpanningCellManager)({columnsConfig:p,drawHorizontalLine:g,drawVerticalLine:m,rows:n,spanningCellConfigs:f})}}},7819:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.mapDataUsingRowHeights=l.padCellVertically=void 0;const t=e(5268),u=e(6465),r=n=>new Array(n).fill("");l.padCellVertically=(n,l,e)=>{const t=l-n.length;return"top"===e?[...n,...r(t)]:"bottom"===e?[...r(t),...n]:[...r(Math.floor(t/2)),...n,...r(Math.ceil(t/2))]},l.mapDataUsingRowHeights=(n,e,r)=>{const o=n[0].length,i=n.map(((n,t)=>{const i=e[t],s=Array.from({length:i},(()=>new Array(o).fill("")));return n.forEach(((n,e)=>{var o;const a=null===(o=r.spanningCellManager)||void 0===o?void 0:o.getContainingRange({col:e,row:t});if(a)return void a.extractCellContent(t).forEach(((n,l)=>{s[l][e]=n}));const c=(0,u.wrapCell)(n,r.columns[e].width,r.columns[e].wrapWord);(0,l.padCellVertically)(c,i,r.columns[e].verticalAlignment).forEach(((n,l)=>{s[l][e]=n}))})),s}));return(0,t.flatten)(i)}},9022:(n,l)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.padTableData=l.padString=void 0,l.padString=(n,l,e)=>" ".repeat(l)+n+" ".repeat(e),l.padTableData=(n,e)=>n.map(((n,t)=>n.map(((n,u)=>{var r;if(null===(r=e.spanningCellManager)||void 0===r?void 0:r.getContainingRange({col:u,row:t},{mapped:!0}))return n;const{paddingLeft:o,paddingRight:i}=e.columns[u];return(0,l.padString)(n,o,i)}))))},6204:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.createSpanningCellManager=void 0;const t=e(4318),u=e(3),r=e(1860),o=e(5268),i=(n,l)=>l.find((l=>(0,o.isCellInRange)(n,l))),s=(n,l)=>{const e=(0,u.calculateSpanningCellWidth)(n,l),r=(0,t.wrapRangeContent)(n,e,l),i=(0,t.alignVerticalRangeContent)(n,r,l);return{...n,extractBorderContent:e=>{const{topLeft:t}=n,u=(0,o.sumArray)(l.rowHeights.slice(t.row,e))+(e-t.row-1);return i[u]},extractCellContent:e=>{const{topLeft:t}=n,{drawHorizontalLine:u,rowHeights:r}=l,s=e-t.row,a=(0,o.sequence)(t.row+1,e).filter((n=>!(null==u?void 0:u(n,r.length)))).length,c=(0,o.sumArray)(r.slice(t.row,e))+s-a;return i.slice(c,c+r[e])},height:r.length,width:e}};l.createSpanningCellManager=n=>{const{spanningCellConfigs:l,columnsConfig:e}=n,t=l.map((n=>(0,r.makeRangeConfig)(n,e))),u={};let a=[],c=[];return{getContainingRange:(l,e)=>{var r;const o=(null==e?void 0:e.mapped)?c[l.row]:l.row,d=i({...l,row:o},t);if(!d)return;if(0===a.length)return s(d,{...n,rowHeights:a});const h=(n=>{const{row:l,col:e}=n.topLeft;return`${l}/${e}`})(d);return null!==(r=u[h])&&void 0!==r||(u[h]=s(d,{...n,rowHeights:a})),u[h]},inSameRange:(n,l)=>((n,l,e)=>{const t=i(n,e),u=i(l,e);return!(!t||!u)&&(0,o.areCellEqual)(t.topLeft,u.topLeft)})(n,l,t),rowHeights:a,rowIndexMapping:c,setRowHeights:n=>{a=n},setRowIndexMapping:n=>{c=(0,o.flatten)(n.map(((n,l)=>Array.from({length:n},(()=>l)))))}}}},1646:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.stringifyTableData=void 0;const t=e(5268);l.stringifyTableData=n=>n.map((n=>n.map((n=>(0,t.normalizeString)(String(n))))))},1017:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.table=void 0;const t=e(1454),u=e(5575),r=e(557),o=e(1847),i=e(31),s=e(3829),a=e(7819),c=e(9022),d=e(1646),h=e(2355),f=e(5268),p=e(3367);l.table=(n,l={})=>{(0,p.validateTableData)(n);let e=(0,d.stringifyTableData)(n);const[m,g]=(0,i.injectHeaderConfig)(e,l),y=(0,s.makeTableConfig)(m,l,g);e=(0,h.truncateTableData)(m,(0,f.extractTruncates)(y));const v=(0,r.calculateRowHeights)(e,y);y.spanningCellManager.setRowHeights(v),y.spanningCellManager.setRowIndexMapping(v),e=(0,a.mapDataUsingRowHeights)(e,v,y),e=(0,t.alignTableData)(e,y),e=(0,c.padTableData)(e,y);const w=(0,u.calculateOutputColumnWidths)(y);return(0,o.drawTable)(e,w,v,y)}},2355:function(n,l,e){"use strict";var t=this&&this.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(l,"__esModule",{value:!0}),l.truncateTableData=l.truncateString=void 0;const u=t(e(7352));l.truncateString=(n,l)=>(0,u.default)(n,{length:l,omission:"…"}),l.truncateTableData=(n,e)=>n.map((n=>n.map(((n,t)=>(0,l.truncateString)(n,e[t])))))},4763:(n,l)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0})},5268:function(n,l,e){"use strict";var t=this&&this.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(l,"__esModule",{value:!0}),l.isCellInRange=l.areCellEqual=l.calculateRangeCoordinate=l.flatten=l.extractTruncates=l.sumArray=l.sequence=l.distributeUnevenly=l.countSpaceSequence=l.groupBySizes=l.makeBorderConfig=l.splitAnsi=l.normalizeString=void 0;const u=t(e(975)),r=t(e(7513)),o=t(e(6231)),i=e(5135);l.normalizeString=n=>n.replace(/\r\n/g,"\n"),l.splitAnsi=n=>{const l=(0,o.default)(n).split("\n").map(r.default),e=[];let t=0;return l.forEach((l=>{e.push(0===l?"":(0,u.default)(n,t,t+l)),t+=l+1})),e},l.makeBorderConfig=n=>({...(0,i.getBorderCharacters)("honeywell"),...n}),l.groupBySizes=(n,l)=>{let e=0;return l.map((l=>{const t=n.slice(e,e+l);return e+=l,t}))},l.countSpaceSequence=n=>{var l,e;return null!==(e=null===(l=n.match(/\s+/g))||void 0===l?void 0:l.length)&&void 0!==e?e:0},l.distributeUnevenly=(n,l)=>Array.from({length:l}).fill(Math.floor(n/l)).map(((e,t)=>e+(t<n%l?1:0))),l.sequence=(n,l)=>Array.from({length:l-n+1},((l,e)=>e+n)),l.sumArray=n=>n.reduce(((n,l)=>n+l),0),l.extractTruncates=n=>n.columns.map((({truncate:n})=>n)),l.flatten=n=>[].concat(...n),l.calculateRangeCoordinate=n=>{const{row:l,col:e,colSpan:t=1,rowSpan:u=1}=n;return{bottomRight:{col:e+t-1,row:l+u-1},topLeft:{col:e,row:l}}},l.areCellEqual=(n,l)=>n.row===l.row&&n.col===l.col,l.isCellInRange=(n,{topLeft:l,bottomRight:e})=>l.row<=n.row&&n.row<=e.row&&l.col<=n.col&&n.col<=e.col},6189:function(n,l,e){"use strict";var t=this&&this.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(l,"__esModule",{value:!0}),l.validateConfig=void 0;const u=t(e(5592));l.validateConfig=(n,l)=>{const e=u.default[n];if(!e(l)&&e.errors){const n=e.errors.map((n=>({message:n.message,params:n.params,schemaPath:n.schemaPath})));throw console.log("config",l),console.log("errors",n),new Error("Invalid config.")}}},5067:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.validateSpanningCellConfig=void 0;const t=e(5268),u=(n,l,e)=>n<=e&&e<=l;l.validateSpanningCellConfig=(n,l)=>{const[e,r]=[n.length,n[0].length];l.forEach(((n,l)=>{const{colSpan:e,rowSpan:t}=n;if(void 0===e&&void 0===t)throw new Error(`Expect at least colSpan or rowSpan is provided in config.spanningCells[${l}]`);if(void 0!==e&&e<1)throw new Error(`Expect colSpan is not equal zero, instead got: ${e} in config.spanningCells[${l}]`);if(void 0!==t&&t<1)throw new Error(`Expect rowSpan is not equal zero, instead got: ${t} in config.spanningCells[${l}]`)}));const o=l.map(t.calculateRangeCoordinate);o.forEach((({topLeft:n,bottomRight:l},t)=>{if(!(u(0,r-1,n.col)&&u(0,e-1,n.row)&&u(0,r-1,l.col)&&u(0,e-1,l.row)))throw new Error(`Some cells in config.spanningCells[${t}] are out of the table`)}));const i=Array.from({length:e},(()=>Array.from({length:r})));o.forEach((({topLeft:n,bottomRight:l},e)=>{(0,t.sequence)(n.row,l.row).forEach((u=>{(0,t.sequence)(n.col,l.col).forEach((n=>{if(void 0!==i[u][n])throw new Error(`Spanning cells in config.spanningCells[${i[u][n]}] and config.spanningCells[${e}] are overlap each other`);i[u][n]=e}))}))}))}},3367:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.validateTableData=void 0;const t=e(5268);l.validateTableData=n=>{if(!Array.isArray(n))throw new TypeError("Table data must be an array.");if(0===n.length)throw new Error("Table must define at least one row.");if(0===n[0].length)throw new Error("Table must define at least one column.");const l=n[0].length;for(const e of n){if(!Array.isArray(e))throw new TypeError("Table row data must be an array.");if(e.length!==l)throw new Error("Table must have a consistent number of cells.");for(const n of e)if(/[\u0001-\u0006\u0008\u0009\u000B-\u001A]/.test((0,t.normalizeString)(String(n))))throw new Error("Table data must not contain control characters.")}}},6465:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.wrapCell=void 0;const t=e(5268),u=e(2156),r=e(1005);l.wrapCell=(n,l,e)=>{const o=(0,t.splitAnsi)(n);for(let n=0;n<o.length;){let t;t=e?(0,r.wrapWord)(o[n],l):(0,u.wrapString)(o[n],l),o.splice(n,1,...t),n+=t.length}return o}},2156:function(n,l,e){"use strict";var t=this&&this.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(l,"__esModule",{value:!0}),l.wrapString=void 0;const u=t(e(975)),r=t(e(7513));l.wrapString=(n,l)=>{let e=n;const t=[];do{t.push((0,u.default)(e,0,l)),e=(0,u.default)(e,l).trim()}while((0,r.default)(e));return t}},1005:function(n,l,e){"use strict";var t=this&&this.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(l,"__esModule",{value:!0}),l.wrapWord=void 0;const u=t(e(975)),r=t(e(6231));l.wrapWord=(n,l)=>{const e=[];let t=0;return((n,l)=>{let e=(0,r.default)(n);const t=[],u=new RegExp("(^.{1,"+String(Math.max(l,1))+"}(\\s+|$))|(^.{1,"+String(Math.max(l-1,1))+"}(\\\\|/|_|\\.|,|;|-))");do{let n;const r=u.exec(e);if(r){n=r[0],e=e.slice(n.length);const l=n.trim().length,u=n.length-l;t.push([l,u])}else n=e.slice(0,l),e=e.slice(l),t.push([n.length,0])}while(e.length);return t})(n,l).forEach((([l,r])=>{e.push((0,u.default)(n,t,t+l)),t+=l+r})),e}},908:(n,l,e)=>{"use strict";const t=e(2017);t.code='require("ajv/dist/runtime/equal").default',l.A=t},9351:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.troubleshootingWikiSource=l.tipsAndTricksWikiSource=void 0;const t=e(9142),u=e(1205);l.tipsAndTricksWikiSource=t.default,l.troubleshootingWikiSource=u.default},729:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.ComposedInteractor=l.getDownloadRequestInteractor=l.RemoteServerProgressInteractor=l.getInstallScriptOutputInteractor=l.getServerErrorLogOutputInteractor=l.getInteractorForMsg=l.getInteractorForInstallWarning=l.DuoTwoFacInteractor=l.TwoFacInteractor=l.PasswordInteractor=l.getExitCode=l.PassphraseInteractor=l.DifferingHostKeyInteractor=l.FingerprintInteractor=l.MitmInteractor=void 0;const t=e(1398),u=e(712),r=e(6296),o=e(8652),i=e(2593),s=e(4788),a=e(2869);class c{constructor(){}get id(){return c.ID}async onData(n){if(n.match("Port forwarding is disabled to avoid man-in-the-middle attacks."))throw u.SshResolverError.Create(a.UnifiedStatusCode.MitmPortForwardingDisabled,t.l10n.t("Port forwarding is disabled"));return{}}}l.MitmInteractor=c,c.ID="mitm";class d{constructor(n,l){this.params=n,this.confirmationProvider=l}get id(){return d.ID}async onData(n,l,e){const t={postAction:"keep"};let u;if((n=n.trim()).includes("Are you sure you want to continue connecting")&&(u=n.match(/fingerprint\sis\s(.+)\./))){this.params.deps.logger.debug("Detected fingerprint confirmation message"),t.postAction="consume",this.params.deps.logger.debug("Showing fingerprint confirmation dialog");const n=await this.confirmationProvider(this.params.host.hostName,u[1],l);n?(this.params.deps.logger.debug("Got fingerprint response: "+n),t.response=n):(this.params.deps.logger.debug("Fingerprint dialog canceled"),t.canceled=!0)}else if(r.isWindows&&(n.includes("The authenticity of host ")||""===n&&e?.detectedServerKey)){this.params.deps.logger.debug("Detected first line fingerprint confirmation message");const n=e?.detectedServerKey||"(unknown)";t.postAction="consume",this.params.deps.logger.debug("Showing fingerprint confirmation dialog");const u=await this.confirmationProvider(this.params.host.hostName,n,l);u?(this.params.deps.logger.debug("Got fingerprint response: "+u),t.response=u):(this.params.deps.logger.debug("Fingerprint dialog canceled"),t.canceled=!0)}return t}}l.FingerprintInteractor=d,d.ID="fingerprint";class h{constructor(n,l){this.confirmationProvider=n,this.logger=l}get id(){return h.ID}async onData(n,l,e){const t={postAction:"keep"};if((n=n.trim()).includes("Are you sure you want to continue connecting")&&n.includes("Offending key for IP in")&&n.includes("Matching host key in")){this.logger.debug('Detected "Offending key for IP in... Matching host key in...." continuation dialog.'),t.postAction="consume";const e=n.substring(n.indexOf("Warning"),n.indexOf("Are")).trim(),u=await this.confirmationProvider(e,l);u?(this.logger.debug("Got continuation response: "+u),t.response=u):(this.logger.debug("Continuation dialog canceled"),t.canceled=!0)}return t}}l.DifferingHostKeyInteractor=h,h.ID="differing host key";class f{constructor(n,l){this.passphraseProvider=n,this.logger=l}get id(){return f.ID}async onData(n,l){const e={postAction:"keep"},t=n.trim().split("\n");if(t.some((n=>n.indexOf("Enter passphrase for")>=0))){this.logger.debug("Detected passphrase message"),e.postAction="consume";const n=await this.passphraseProvider(void 0,void 0,l);"string"==typeof n?(this.logger.debug("Got passphrase response"),e.response=n,e.isPassword=!0):(this.logger.debug("Passphrase dialog canceled"),e.canceled=!0)}else t.some((n=>n.indexOf("Identity added:")>=0))&&(e.postAction="consume");return e}}l.PassphraseInteractor=f,f.ID="passphrase",l.getExitCode=function(n,l){const e=new RegExp(`${l}##([0-9]*)##`).exec(n);if(e)try{const n=parseInt(e[1]);return Number.isNaN(n)?void 0:n}catch(n){return}return 0};class p{constructor(n,l){this.passwordProvider=n,this.logger=l}get id(){return p.ID}async onData(n,l,e){const t={postAction:"keep"},u=function(n,l){if(n.includes("Password:"))return{user:""};const e=(0,i.stripEscapeSequences)(n).match(/([a-zA-Z0-9\-_@\.]*)'s password:/);return e?{user:e[1],message:l?l.detail:void 0}:void 0}(n,e);if(u&&"string"==typeof u.user){this.logger.debug("Showing password prompt"),t.postAction="consume";const n=await this.passwordProvider(u.user,u.message,l);"string"==typeof n?(this.logger.debug("Got password response"),t.response=n,t.isPassword=!0):(this.logger.debug("Password dialog canceled"),t.canceled=!0)}return t}}l.PasswordInteractor=p,p.ID="password";class m{constructor(n,l){this.verificationCodeProvider=n,this.logger=l}get id(){return m.ID}async onData(n,l){const e={postAction:"keep"};if(n.includes("Verification code:")){this.logger.debug("Detected verification code prompt"),e.postAction="consume";const n=await this.verificationCodeProvider("Enter verification code",l);"string"==typeof n?(this.logger.debug("Got verification code response"),e.response=n,e.isPassword=!0):(this.logger.debug("Verification code dialog canceled"),e.canceled=!0)}return e}}l.TwoFacInteractor=m,m.ID="2fa";class g{constructor(n,l){this.verificationCodeProvider=n,this.logger=l}get id(){return g.ID}async onData(n,l){const e={postAction:"keep"};if(n.includes("Passcode:")){this.logger.debug("Detected passcode prompt"),e.postAction="consume";const n=await this.verificationCodeProvider("Enter passcode",l);"string"==typeof n?(this.logger.debug("Got passcode response"),e.response=n,e.isPassword=!0):(this.logger.debug("passcode dialog canceled"),e.canceled=!0)}return e}}function y(n,l="consume"){const e="string"==typeof n?new RegExp((0,i.escapeRegExpCharacters)(n)):n;let t;const u=new Promise((n=>{t=n}));let r=!1;return{interactor:new class{get id(){return"anonymous"}async onData(n){if(r)return{};let u;return(u=(n=(0,i.stripEscapeSequences)(n)).match(e))?(r=!0,t(u),{postAction:l}):{}}},result:u}}l.DuoTwoFacInteractor=g,g.ID="duo-2fa",l.getInteractorForInstallWarning=function(n,l,e="consume"){return y(`${n}$$${l}$$`,e)},l.getInteractorForMsg=y,l.getServerErrorLogOutputInteractor=function(){const n=y(/'Server did not start successfully([\s\S]*?)End of server log/m,"keep");return{interactor:n.interactor,result:n.result.then((n=>{const l=n[0];return l&&(0,i.stripEscapeSequences)(l)}))}},l.getInstallScriptOutputInteractor=function(n){const l=y(new RegExp(`${n}: start([\\s\\S]*?)${n}: end|(${n}##[0-9]*##)`,"m"));return{interactor:l.interactor,result:l.result.then((n=>{const l=n[1]||n[2];return l&&(0,i.stripEscapeSequences)(l)}))}},l.RemoteServerProgressInteractor=class{constructor(n,l){this.progress=l,this.progressCodeRegex=new RegExp(`${n}%%([0-9]+)%%`)}get id(){return"anonymous"}updateProgress(n){const l=o.RemoteProgressMessages[n];l&&this.progress.report({message:l})}async onData(n){let l;if((l=(n=(0,i.stripEscapeSequences)(n)).match(this.progressCodeRegex))&&l[1]){const n=parseInt(l[1]);return this.updateProgress(n),{postAction:"consume"}}return{}}},l.getDownloadRequestInteractor=function(n,l){const e=function(n,l,e){const t=y(new RegExp(`${n}([\\s\\S]*?)${l}`,"m"));return{interactor:t.interactor,result:t.result.then((n=>{const l=n[1]&&(0,i.stripEscapeSequences)(n[1]);return(0,i.parseStringMap)(l,void 0,e)}))}}((0,s.getDownloadServerStartTrigger)(n),(0,s.getDownloadServerEndTrigger)(n),l);return{interactor:e.interactor,result:e.result.then((n=>{const{artifact:e,destFolder:r,destFolder2:o}=n;if(!e||!r)throw l.error("Got malformed request to download on client, missing data: "+JSON.stringify(n)),u.SshResolverError.Create(a.UnifiedStatusCode.BadLocalDownloadRequest,t.l10n.t("Client-side server download failed"));return{artifact:e,destPath:r+(o||"")}}))}},l.ComposedInteractor=class{constructor(n){this.interactors=n}get id(){return"composed"}async onData(n){for(const l of this.interactors){const e=await l.onData(n);if("consume"===e.postAction)return e}return{postAction:"keep"}}}},5187:function(n,l,e){"use strict";var t=this&&this.__decorate||function(n,l,e,t){var u,r=arguments.length,o=r<3?l:null===t?t=Object.getOwnPropertyDescriptor(l,e):t;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(n,l,e,t);else for(var i=n.length-1;i>=0;i--)(u=n[i])&&(o=(r<3?u(o):r>3?u(l,e,o):u(l,e))||o);return r>3&&o&&Object.defineProperty(l,e,o),o};Object.defineProperty(l,"__esModule",{value:!0}),l.openEmptyWindowOnSshHost=l.CommandService=void 0;const u=e(1398),r=e(1566),o=e(8730),i=e(8861),s=e(9480),a=e(4111),c=e(4417),d=e(1990),h=e(7154),f=e(96),p=[];function m(n){return(l,e,t)=>{if("function"!=typeof t.value)throw new Error("not supported");p.push({commandId:n,method:t.value})}}function g(n){return!!n&&"string"==typeof n.host}class y{constructor(n,l,e,t,r){this.folderHistoryManager=l,this.cleanSvc=e,this.resolver=t,this.deps={logger:n,timer:new h.Timer,serverDataPath:r},this.disposables=p.map((({commandId:n,method:l})=>u.commands.registerCommand(n,((...n)=>l.apply(this,n)))))}showLog(){this.deps.logger.showLog()}clearAllSessionHints(){const n=f.HintManager.Instance();n?(n.clearAllHints(),this.deps.logger.info("Cleared all session hints")):this.deps.logger.info("No session hints to clear")}openWebUI(){if(this.resolver.lastResolverResult&&"port"in this.resolver.lastResolverResult.serverInstallationResult.installScriptResult.serverConfiguration.remoteListeningOn){const n=this.resolver.lastResolverResult.serverInstallationResult.installScriptResult.serverConfiguration.remoteListeningOn.port;let l=u.Uri.parse("http://localhost"+(n?`:${n}`:""));this.resolver.lastResolverResult.serverInstallationResult.installScriptResult.serverConfiguration.webUiAccessToken&&(l=l.with({query:`${i.webUITokenParameter}=${this.resolver.lastResolverResult.serverInstallationResult.installScriptResult.serverConfiguration.webUiAccessToken}`})),u.env.openExternal(l)}}async openEmptyWindow(n){const l=g(n)?new d.HostInfo(n.host,n.userName,n.port):await(0,o.interactivelyPickSshHost)(this.deps.logger);l&&w(l)}async openEmptyWindowOnCurrentHost(){const n=(0,a.getActiveRemote)();n&&w(n)}async openEmptyWindowInCurrentWindow(n){const l=g(n)?new d.HostInfo(n.host,n.userName,n.port):await(0,o.interactivelyPickSshHost)(this.deps.logger);l&&w(l,!0)}async openConfigFile(){await(0,c.configureSshHosts)(this.deps.logger)}async cleanDevBox(){const n=await(0,o.interactivelyPickSshHost)(this.deps.logger);if(n)return this.cleanSvc.cleanRemoteServerAndUserData(n)}async cleanCurrentRemoteServer(){const n=(0,a.getActiveRemote)();if(n)return this.cleanSvc.cleanRemoteServer(n)}async cleanRemoteServer(){const n=await(0,o.interactivelyPickSshHost)(this.deps.logger);if(n)return this.cleanSvc.cleanRemoteServer(n)}async cleanLocalServer(){const n=await(0,o.interactivelyPickSshHost)(this.deps.logger);n&&await(0,s.killLocalServer)({deps:this.deps,host:n})}async getHelp(){return(0,r.getHelp)()}async getStarted(){return(0,r.getStarted)()}async reportIssue(){return(0,r.reportIssue)()}async settings(){return(0,r.openSettings)()}async provideFeedback(){return(0,r.provideFeedback)()}async addNewSshHost(){return(0,c.addSshHost)(this.deps.logger)}getActiveSshRemote(){return(0,a.getActiveRemote)()}async getConfiguredHostnames(){const n={};return(await(0,c.getHostsFromConfigs)(this.deps.logger)).forEach((l=>n[l.toString()]=l.toString())),n}async openRemoteSshTarget(n,l){await w(n,!l)}async getFolderHistory(n){return this.folderHistoryManager.getFolders(n)}async deleteFolderFromHistory(n){this.folderHistoryManager.removeFolder(n)}dispose(){this.disposables.forEach((n=>n.dispose()))}}function v(n){return`ssh-remote+${d.HostInfo.toAuthorityString(n)}`}async function w(n,l=!1){await u.commands.executeCommand("vscode.newWindow",{remoteAuthority:v(n),reuseWindow:l})}l.CommandService=y,t([m("opensshremotes.showLog")],y.prototype,"showLog",null),t([m("opensshremotes.clearAllSessionHints")],y.prototype,"clearAllSessionHints",null),t([m("opensshremotes.openWebUI")],y.prototype,"openWebUI",null),t([m("opensshremotes.openEmptyWindow")],y.prototype,"openEmptyWindow",null),t([m("opensshremotes.openEmptyWindowOnCurrentHost")],y.prototype,"openEmptyWindowOnCurrentHost",null),t([m("opensshremotes.openEmptyWindowInCurrentWindow")],y.prototype,"openEmptyWindowInCurrentWindow",null),t([m("opensshremotes.openConfigFile")],y.prototype,"openConfigFile",null),t([m("opensshremotes.cleanDevBox")],y.prototype,"cleanDevBox",null),t([m("opensshremotes.cleanCurrentRemoteServer")],y.prototype,"cleanCurrentRemoteServer",null),t([m("opensshremotes.cleanRemoteServer")],y.prototype,"cleanRemoteServer",null),t([m("opensshremotes.cleanLocalServer")],y.prototype,"cleanLocalServer",null),t([m("opensshremotes.getHelp")],y.prototype,"getHelp",null),t([m("opensshremotes.getStarted")],y.prototype,"getStarted",null),t([m("opensshremotes.reportIssue")],y.prototype,"reportIssue",null),t([m("opensshremotes.settings")],y.prototype,"settings",null),t([m("opensshremotes.provideFeedback")],y.prototype,"provideFeedback",null),t([m("opensshremotes.addNewSshHost")],y.prototype,"addNewSshHost",null),t([m("remote-internal.getActiveSshRemote")],y.prototype,"getActiveSshRemote",null),t([m("remote-internal.getConfiguredHostnames")],y.prototype,"getConfiguredHostnames",null),t([m("remote-internal.openRemoteSshTarget")],y.prototype,"openRemoteSshTarget",null),t([m("remote-internal.getSshFoldersHistory")],y.prototype,"getFolderHistory",null),t([m("remote-internal.deleteSshFolderFromHistory")],y.prototype,"deleteFolderFromHistory",null),l.openEmptyWindowOnSshHost=w},5677:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.pickSshConfigurationFile=void 0;const t=e(1398),u=e(3411),r=e(4417);class o{constructor(n){this.label=n}}class i{constructor(){this.label=t.l10n.t("Help"),this.description=t.l10n.t("about SSH configuration files"),this.alwaysShow=!0}}class s{constructor(){this.label=t.l10n.t("Settings"),this.description=t.l10n.t("specify a custom configuration file"),this.alwaysShow=!0}}l.pickSshConfigurationFile=async function(n){const l=(0,u.sshConfigurationFile)();return await async function(n){return new Promise(((l,e)=>{const u=function(n){const l=t.window.createQuickPick();return l.ignoreFocusOut=!0,"string"==typeof n?(l.placeholder=t.l10n.t("Edit custom SSH configuration file"),l.items=[new o(n),new s,new i]):(l.placeholder=t.l10n.t("Select SSH configuration file to update"),l.items=[...n.map((n=>new o(n))),new s,new i]),l}(n);let r;u.onDidAccept((()=>{const n=u.selectedItems[0];n instanceof i?r={type:"command",id:"help"}:n instanceof s?r={type:"command",id:"settings"}:n.label&&(r={type:"file",path:n.label}),u.hide()})),u.onDidHide((()=>{l(r||void 0)})),u.show()}))}(l||(0,r.defaultSshConfigurationFiles)())}},7166:(n,l)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.ResolverType=void 0,l.ResolverType="ssh-remote"},96:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.HintManager=l.TERMINAL_NAME=void 0;const t=e(1398),u=e(4249),r=e(9351),o=e(2869),i=e(3292),s=e(3411),a=e(6296),c=e(2137);l.TERMINAL_NAME="Remote - SSH: Session Troubleshooting";const d="[2J[3J[H",h="remote.ssh.hints";class f{constructor(n,l){if(this.extensionContext=n,this.logger=l,this.shouldCollectHints=!1,this.processedDynamicHints=[],this.globalState=n.globalState,this.shouldCollectHints="ssh-remote"===t.env.remoteName,!f._instance&&(f._instance=this,this.shouldCollectHints)){const n=this.globalState.get(h,[]);for(;n.length>1;)n.shift();n.push({hints:[],createdAt:new Date}),this._flush(n)}}static Instance(){if(f._instance)return f._instance}captureHint(n){if(!this.shouldCollectHints)return;"log"===n.type&&n.message&&(n.message=n.message.slice(0,5e4));const l=this._get();l[l.length-1].hints.push(n),this._flush(l)}captureStatus(n,l){if(!this.shouldCollectHints)return;const e=i.statusCodeMetadata[n],t=e?{...e,details:l}:{type:"error",status:n,message:`Error: ${o.UnifiedStatusCode[n]}`,details:l},u=this._get();u[u.length-1].hints.push(t),this._flush(u)}clearAllHints(){this._clearAll()}getRecentSessionHints(){const n=this._get();if(!n.length)return;const l=n[n.length-1];return{hints:l.hints.concat(this.staticHints()),createdAt:l.createdAt}}logRecentSession(n){try{if(!(0,s.useExperimentalEnhancedSessionLogs)())return void n.debug("Enhanced session logs are disabled.");const e=this.getRecentSessionHints();if(!e)return void n.debug("No recent session hints found.");const{hints:u}=e,r=[o.UnifiedStatusCode.UnparsableOutput,o.UnifiedStatusCode.UnclassifiedError];if(this.processedDynamicHints=u.filter((n=>"error"===n.type||"warning"===n.type)).map((n=>n)).filter((n=>!r.includes(n.status))),0===this.processedDynamicHints.length)return void n.debug("No hints found in the recent session.");n.error(" ---------- [Session Summary] ----------- ");for(const l of this.processedDynamicHints)n.error(`[${o.UnifiedStatusCode[l.status]}]: ${l.message} ${l.details?.length?`(${l.details})`:""}`);if(n.error(" ---------------------------------------- "),!this.terminal){const e=this.setupPty(n);this.terminal=t.window.createTerminal({name:l.TERMINAL_NAME,pty:e}),this.terminal.show()}}catch(l){n.error(`Error logging recent session hints: ${l}`)}}setupPty(n){const l=new t.EventEmitter;return{setDimensions:e=>{l.fire(d),this.renderPty(n,l,e.columns)},open:e=>{l.fire("[?25l[?12l[?9l"),l.fire(d),this.renderPty(n,l,e.columns)},close:()=>{n.debug("Terminal closed")},onDidWrite:l.event}}renderPty(n,l,e){l.fire(`\r\n${t.l10n.t("The following issues were detected in your most recent Remote - SSH session")} \r\n`),(0,s.useExperimentalChat)()&&l.fire(`${a.isWindows?"Ctrl+":"Cmd+"}${t.l10n.t("click on an issue to continue in Copilot Chat.")} \r\n`),l.fire(this.renderTable(n,e)),l.fire(`${t.l10n.t("See verbose information in the")} ${this.underlineAndBold(c.OUTPUT_LOG_MARKER)}`)}renderTable(n,l){const e=[t.l10n.t("Status"),t.l10n.t("Message"),t.l10n.t("Mitigations"),t.l10n.t("Resources")],r=this.processedDynamicHints.map((n=>[(0,s.useExperimentalChat)()?this.underlineAndBold(`${o.UnifiedStatusCode[n.status]}`):`${o.UnifiedStatusCode[n.status]}`,n.message+(n.details?` (${n.details})`:""),n.mitigations?.map((n=>`• ${n}`)).join("\n")||"-",n.resources?.map((n=>`• ${n}`)).join("\n")||"-"]));for(let n=e.length-1;n>=0;n--)if(r.every((l=>"-"===l[n]))){e.splice(n,1);for(const l of r)l.splice(n,1)}const i=Math.max(...this.processedDynamicHints.map((n=>o.UnifiedStatusCode[n.status].length))),a=Math.floor((l-i-2)/(e.length-1)-5);return u.table([e,...r],{columnDefault:{width:a,wrapWord:!0},columns:[{width:i,alignment:"center"}]}).replace(/\n/g,"\r\n")}underlineAndBold(n){return`[4m[1m${n}[0m[24m`}staticHints(){return[{type:"wiki",message:"The following is a markdown file with common troubleshooting steps.  The entire wiki is publicly available at https://github.com/microsoft/vscode-remote-release/wiki/Remote-SSH-troubleshooting",details:r.troubleshootingWikiSource},{type:"wiki",message:"The following is a markdown file with tips and tricks for using Remote - SSH.  The entire wiki is publicly available at https://github.com/microsoft/vscode-remote-release/wiki/Remote-SSH-tips-and-tricks",details:r.tipsAndTricksWikiSource}]}dispose(){}_flush(n){this.globalState.update(h,n)}_clearAll(){this.globalState.update(h,void 0)}_get(){return this.globalState.get(h,[])}}l.HintManager=f,f._instance=null},3292:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.statusCodeMetadata=void 0;const t=e(2869);l.statusCodeMetadata={[t.UnifiedStatusCode.OK]:void 0,[t.UnifiedStatusCode.LinuxPrereqs]:{type:"error",message:"The remote host may not meet VS Code Server's prerequisites for glibc and libstdc++",status:t.UnifiedStatusCode.LinuxPrereqs,mitigations:["https://aka.ms/vscode-remote/faq/old-linux"],resources:["https://aka.ms/vscode-remote/linux-prerequisites"]},[t.UnifiedStatusCode.WinCommandNotFound]:{type:"error",message:"A command required on the remote machine was not found",status:t.UnifiedStatusCode.WinCommandNotFound,mitigations:["Ensure this program is installed on the remote machine and accessible via the 'PATH' environment variable","Ensure that the 'remote.SSH.remotePlatform' setting correctly reflects the remote platform. Ensure no wildcard entry is being selected erroneously"]},[t.UnifiedStatusCode.ProxyAuthenticationRequired]:{type:"warning",message:"Received 407 from the server",status:t.UnifiedStatusCode.ProxyAuthenticationRequired,mitigations:["Check proxy settings on local machine","Set 'http.proxy' in VS Code settings to use the correct proxy"],resources:["https://github.com/microsoft/vscode-remote-release/issues/10344"]},[t.UnifiedStatusCode.LocalNetworkPermissionMacOS]:{type:"warning",message:"No route found to remote machine with a local IPv4 address.",status:t.UnifiedStatusCode.LocalNetworkPermissionMacOS,mitigations:["On Mac OS, grant VS Code the 'Local Network' permission in System Settings","Ensure the remote machine is configured to receive incoming connections on the local network"],resources:["https://github.com/microsoft/vscode-remote-release/issues/10441"]},[t.UnifiedStatusCode.UnparsableOutput]:void 0,[t.UnifiedStatusCode.EmptyOutput]:void 0,[t.UnifiedStatusCode.UnhandledResolverExitCode]:void 0,[t.UnifiedStatusCode.OfflineError]:void 0,[t.UnifiedStatusCode.SshInstall]:void 0,[t.UnifiedStatusCode.FindLocalPort]:void 0,[t.UnifiedStatusCode.Timeout]:void 0,[t.UnifiedStatusCode.ExhaustedRetries]:void 0,[t.UnifiedStatusCode.PermissionDenied]:void 0,[t.UnifiedStatusCode.MitmPortForwardingDisabled]:void 0,[t.UnifiedStatusCode.Canceled]:void 0,[t.UnifiedStatusCode.BadLocalDownloadRequest]:void 0,[t.UnifiedStatusCode.LocalDownloadFailed]:void 0,[t.UnifiedStatusCode.LocalLockTimeout]:void 0,[t.UnifiedStatusCode.NoBash]:void 0,[t.UnifiedStatusCode.InvalidHostName]:void 0,[t.UnifiedStatusCode.BadInstallScriptResult]:void 0,[t.UnifiedStatusCode.ShellRequestFailedOnChannel]:void 0,[t.UnifiedStatusCode.InvalidPortRange]:void 0,[t.UnifiedStatusCode.SendDisconnectBrokenPipe]:void 0,[t.UnifiedStatusCode.LocalServerCrashed]:void 0,[t.UnifiedStatusCode.NoFreePortInRange]:void 0,[t.UnifiedStatusCode.InvalidCustomServerPath]:{type:"error",message:"The provided custom server path is invalid",status:t.UnifiedStatusCode.InvalidCustomServerPath,mitigations:["Ensure the provide path is an absolute path","Edit setting 'remote.SSH.serverInstallPath' to an absolute path on the remote server","Do not use variables, double quotes, or other non-path characters when setting 'remote.SSH.serverInstallPath'","Delete the setting for this host to use the default path in the user home directory"]},[t.UnifiedStatusCode.AllowTcpForwardingDisabled]:{type:"error",message:"The remote server's SSH configuration may have TCP forwarding disabled",status:t.UnifiedStatusCode.AllowTcpForwardingDisabled,mitigations:["Add the setting 'AllowTcpForwarding yes' to the server's '/etc/ssh/sshd_config' (or similar) configuration file","Restart the SSH server on the remote machine to apply any changes to the configuration"],resources:["https://code.visualstudio.com/docs/remote/troubleshooting#_troubleshooting-hanging-or-failing-connections"]},[t.UnifiedStatusCode.AlreadyInProgress]:void 0,[t.UnifiedStatusCode.ServerDownloadFailed]:{type:"error",message:"A VS Code Server matching your local installation could not be downloaded from the internet.",status:t.UnifiedStatusCode.ServerDownloadFailed,mitigations:["Ensure that the remote server has internet access and has access to the VS Code CDN","If your remote server is behind a firewall, ask your IT department to allow access to the VS Code CDN","Enable 'remote.SSH.localServerDownload' to allow VS Code to download the required resources locally","If your remote server is behind a proxy, provide the proxy URL with setting 'remote.SSH.httpProxy' or 'remote.SSH.httpsProxy'","Update VS Code and try again later"],resources:["https://aka.ms/vscode-remote/ssh/connectivity"]},[t.UnifiedStatusCode.NoDownloaderAvailable]:{type:"error",message:'When first establishing a connection to the remote server, various resources must be installed from the internet. A program (either "wget" or "curl") is used to download these resources, but they are not installed on the remote server.  When this step fails, the extension attempts to use the local machine to download the resources and then upload them to the remote server.',status:t.UnifiedStatusCode.NoDownloaderAvailable,mitigations:["Install 'wget' on the remote server. Installation steps will vary per distribution.","Install 'curl' on the remote server. Installation steps will vary per distribution.","Ensure curl/wget are on the remote system's PATH","Ensure that the remote server has internet access and that the network is not blocking the download","Enable 'remote.SSH.localServerDownload' to allow VS Code to download the required resources via your local machine and then upload them to the remote server"]},[t.UnifiedStatusCode.NoDownloaderAvailableForStatusCheck]:void 0,[t.UnifiedStatusCode.UnsupportedArch]:void 0,[t.UnifiedStatusCode.StatusCheckFailed]:void 0,[t.UnifiedStatusCode.NeedInsidersArch]:void 0,[t.UnifiedStatusCode.ServerTransferFailed]:void 0,[t.UnifiedStatusCode.ServerFailedToStart]:void 0,[t.UnifiedStatusCode.NeedInsidersWindows]:void 0,[t.UnifiedStatusCode.CreateInstallDirFailed]:{type:"error",message:"The install directory on the remote host could not be created. By default this is the $HOME directory and can be overridden with the setting 'remote.SSH.serverInstallPath'",status:t.UnifiedStatusCode.CreateInstallDirFailed,mitigations:["Remove or edit setting 'remote.SSH.serverInstallPath'","Ensure that the parent directory exists","Ensure that the remote user has write permissions to the parent directory","Ensure there is sufficient free disk space on the remote machine"]},[t.UnifiedStatusCode.UnsupportedPlatform]:void 0,[t.UnifiedStatusCode.ServerTerminatedCVE20201416]:{type:"error",message:"The remote server has terminated the connection due to a known and preventable security vulnerability",status:t.UnifiedStatusCode.ServerTerminatedCVE20201416,mitigations:["View the Output Log to see mitigation steps provided by the VS Code Server"],resources:["https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-1416"]},[t.UnifiedStatusCode.UnpackFailed]:void 0,[t.UnifiedStatusCode.ChangeDirFailed]:void 0,[t.UnifiedStatusCode.UnhandledConfigParsingError]:{type:"error",message:"An error occurred while parsing the local SSH configuration file",status:t.UnifiedStatusCode.UnhandledConfigParsingError,mitigations:["Report this issue with an example configuration file"]},[t.UnifiedStatusCode.InvalidProxyUrl]:{type:"error",message:"Proxy URL in settings is invalid",status:t.UnifiedStatusCode.InvalidProxyUrl,mitigations:["Remove this value from settings or correct the URL","URL must include the scheme (http:// or https://)","URL should not contain non-URL characters"]},[t.UnifiedStatusCode.UnclassifiedError]:void 0}},2869:(n,l)=>{"use strict";var e;Object.defineProperty(l,"__esModule",{value:!0}),l.ensureError=l.UnifiedStatusCode=void 0,function(n){n[n.OK=0]="OK",n[n.ProxyAuthenticationRequired=64]="ProxyAuthenticationRequired",n[n.LocalNetworkPermissionMacOS=65]="LocalNetworkPermissionMacOS",n[n.UnparsableOutput=128]="UnparsableOutput",n[n.EmptyOutput=129]="EmptyOutput",n[n.UnhandledResolverExitCode=131]="UnhandledResolverExitCode",n[n.OfflineError=132]="OfflineError",n[n.SshInstall=133]="SshInstall",n[n.FindLocalPort=134]="FindLocalPort",n[n.Timeout=135]="Timeout",n[n.ExhaustedRetries=136]="ExhaustedRetries",n[n.PermissionDenied=137]="PermissionDenied",n[n.MitmPortForwardingDisabled=138]="MitmPortForwardingDisabled",n[n.Canceled=139]="Canceled",n[n.BadLocalDownloadRequest=140]="BadLocalDownloadRequest",n[n.LocalDownloadFailed=141]="LocalDownloadFailed",n[n.LocalLockTimeout=142]="LocalLockTimeout",n[n.NoBash=143]="NoBash",n[n.InvalidHostName=144]="InvalidHostName",n[n.BadInstallScriptResult=145]="BadInstallScriptResult",n[n.ShellRequestFailedOnChannel=146]="ShellRequestFailedOnChannel",n[n.InvalidPortRange=147]="InvalidPortRange",n[n.SendDisconnectBrokenPipe=148]="SendDisconnectBrokenPipe",n[n.LocalServerCrashed=149]="LocalServerCrashed",n[n.NoFreePortInRange=150]="NoFreePortInRange",n[n.InvalidCustomServerPath=151]="InvalidCustomServerPath",n[n.AllowTcpForwardingDisabled=152]="AllowTcpForwardingDisabled",n[n.AlreadyInProgress=192]="AlreadyInProgress",n[n.ServerDownloadFailed=193]="ServerDownloadFailed",n[n.NoDownloaderAvailable=194]="NoDownloaderAvailable",n[n.NoDownloaderAvailableForStatusCheck=195]="NoDownloaderAvailableForStatusCheck",n[n.UnsupportedArch=196]="UnsupportedArch",n[n.StatusCheckFailed=197]="StatusCheckFailed",n[n.NeedInsidersArch=198]="NeedInsidersArch",n[n.ServerTransferFailed=199]="ServerTransferFailed",n[n.ServerFailedToStart=200]="ServerFailedToStart",n[n.NeedInsidersWindows=201]="NeedInsidersWindows",n[n.CreateInstallDirFailed=202]="CreateInstallDirFailed",n[n.UnsupportedPlatform=203]="UnsupportedPlatform",n[n.ServerTerminatedCVE20201416=204]="ServerTerminatedCVE20201416",n[n.UnpackFailed=205]="UnpackFailed",n[n.ChangeDirFailed=206]="ChangeDirFailed",n[n.LinuxPrereqs=207]="LinuxPrereqs",n[n.WinCommandNotFound=208]="WinCommandNotFound",n[n.UnhandledConfigParsingError=256]="UnhandledConfigParsingError",n[n.InvalidProxyUrl=257]="InvalidProxyUrl",n[n.UnclassifiedError=1023]="UnclassifiedError"}(e||(l.UnifiedStatusCode=e={})),l.ensureError=function(n){return n instanceof Error?n:new Error(String(n))}},2137:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.registerTerminalStatusCodeLinkProvider=l.TerminalStatusCodeLinkProvider=l.OUTPUT_LOG_MARKER=void 0;const t=e(1398),u=e(96),r=e(3411),o=e(2869);l.OUTPUT_LOG_MARKER="Output Log...";class i{provideTerminalLinks(n,l){return n.terminal.name!==u.TERMINAL_NAME?[]:[...this.understandWithCopilot(n.line),...this.showOutputLog(n.line)]}handleTerminalLink(n){n.command?t.commands.executeCommand(n.command):n.uri&&t.env.openExternal(n.uri)}understandWithCopilot(n){if(!(0,r.useExperimentalChat)())return[];const l=n.indexOf("║");if(-1===l)return[];const e=n.substring(l+1).split("").findIndex((n=>" "!==n))+l+1,u=n.indexOf(" ",e),i=n.slice(e,u);if(!i)return[];if(void 0===o.UnifiedStatusCode[i])return[];const s=`${t.env.uriScheme}://ms-vscode-remote.remote-ssh/continueWithCopilot?statusCode=${i}&windowId=_blank`;return[{startIndex:e,length:u-e,tooltip:"Understand with Copilot",uri:t.Uri.parse(s)}]}showOutputLog(n){const e=n.indexOf(l.OUTPUT_LOG_MARKER);return-1===e?[]:[{startIndex:e,length:n.length-e,tooltip:"View the output log",command:"opensshremotes.showLog"}]}}l.TerminalStatusCodeLinkProvider=i,l.registerTerminalStatusCodeLinkProvider=function(n){const l=new i;n.subscriptions.push(t.window.registerTerminalLinkProvider(l))}},6144:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.resolveRemoteUsingExecServer=l.tunnelToExecServer=l.ExecServerCache=void 0;const t=e(3986),u=e(2690),r=e(6982),o=e(5692),i=e(1398),s=e(3411),a=e(712),c=e(4407),d=e(4747),h=e(1872),f=e(3505),p=e(96),m=e(2869),g=e(3968);void 0===globalThis.crypto&&(globalThis.crypto=r.webcrypto);let y=0;class v{static get(n){return this.instance||(this.instance=new v(n)),this.instance}constructor(n){this.logger=n,this.servers=new Map}async getOrInsert(n,l){const e=this.servers.get(n);if(!e)return this.insert(n,l);try{const l=await e;if(await Promise.race([l.cnx.call("ping",{}).then((()=>!0)),new Promise((n=>setTimeout((()=>n(!1)),3e3)))]))return this.logger.debug(`Verified and reusing cached exec server for ${n}`),l;this.logger.debug(`Existing exec server for ${n} timed out`)}catch(l){this.logger.debug(`Existing exec server for ${n} errored (${l})`)}return this.insert(n,l)}insert(n,l){const e=l();return e.then((l=>{this.logger.debug(`Exec server for ${n} created and cached`),l.cnx.onClose((l=>{this.servers.get(n)===e&&(this.logger.debug(`Exec server for ${n} closed (${l||"gracefully"})`),this.servers.delete(n))}))}),(l=>{this.servers.get(n)===e&&(this.logger.error(`Exec server for ${n} failed: ${l}`),this.servers.delete(n))})),this.logger.debug(`Initizing new exec server for ${n}`),this.servers.set(n,e),e}}function w(n,l,e,t,u,r=10){l.trace(`Proxying HTTPS request to '${e}' on behalf of remote server`),o.get(e,{method:t,agent:(0,d.getAgent)()},(o=>{if(function(n,l,e){n.trace(`Received response from '${e}' (${l||"(no status code)"})`),l&&407===l&&p.HintManager.Instance()?.captureStatus(m.UnifiedStatusCode.ProxyAuthenticationRequired,e)}(l,o.statusCode,e),o.statusCode&&o.statusCode>=300&&o.statusCode<400&&o.headers.location&&r>0)return w(n,l,o.headers.location,t,u,r-1),void o.resume();o.on("data",(l=>n.call("httpbody",{req_id:u,complete:!1,segment:l}))),o.on("end",(()=>n.call("httpbody",{req_id:u,complete:!0,segment:new Uint8Array}))),n.call("httpheaders",{req_id:u,status_code:o.statusCode||503,headers:Object.entries(o.headers).flatMap((([n,l])=>l instanceof Array?l.map((l=>[n,l||""])):[[n,l||""]]))})})).on("error",(t=>{l.error(`Error proxying HTTPS request to '${e}' on behalf of remote server: ${t}`),n.call("httpbody",{req_id:u,complete:!0,segment:Buffer.from(t.toString())})}))}async function b(n,l,e){return v.get(l).getOrInsert(n,(async()=>{const{installResult:n,tunnelResult:r}=await e();l.info(`Resolving exec server at ${a.ListenTarget.display(r.localTarget)}`);const o=await new Promise(((n,l)=>{const e=a.ListenTarget.connect(r.localTarget);e.on("connect",(()=>n(new u.Connection(e,t.encode)))),e.on("error",(n=>l(n)))})),i=(0,f.assertVSDA)(),{challenge:s}=await o.call("challenge_issue",{token:n.execServer?.token});return await o.call("challenge_verify",{response:(new i.signer).sign(s)}),o.onNotification("makehttpreq",(({url:n,method:e,req_id:t})=>w(o,l,n,e,t))),{cnx:o,execServer:new u.ExecServer(o)}}))}l.ExecServerCache=v,l.tunnelToExecServer=b,l.resolveRemoteUsingExecServer=async function(n,l,e,t,u){const r="remotessh",{cnx:o,execServer:a}=await b(n,l,(()=>Promise.resolve({installResult:e,tunnelResult:t}))),d=await(0,h.getProductInfo)();!function(n,l){let e;n.onNotification("serverlog",(n=>{const t=2===n.level?"debug":5===n.level?"error":3===n.level?"trace":"info";l[t](`[server] ${n.line}`),(n=>{if(n.includes("Installing and setting up"))return e?.promise.resolve(),void i.window.withProgress({title:S,location:i.ProgressLocation.Notification},(n=>{const l=(0,c.getDeferred)();return e={promise:l,handle:n,lastPercent:0},l.promise}));if(!e)return;if(n.includes("Server setup complete")||n.includes("Found running server"))return e.promise.resolve(),void(e=void 0);const l=n.match(/.*server download progress.* \((\d+)\%\)/);if(l){const[,n]=l,t=Number(n);e.handle.report({increment:t-e.lastPercent}),e.lastPercent=t}})(n.line)}))}(o,l);const f=[...new Set([...(0,s.getSshDefaultExtensions)(),...(0,g.getLocalExtensionsToInstall)(u)])];return l.debug(`Extensions to install: ${f.join(", ")}`),new i.ManagedResolvedAuthority((async()=>{const n=await a.serve({socketId:y++,extensions:f,quality:d.quality,commit:d.commit,connectionToken:r,compress:!0}),l=new i.EventEmitter,e=new i.EventEmitter;return n.onEnd.then((()=>l.fire())),o.onClose((n=>e.fire(n))),{send:l=>n.write(l),end:()=>n.end(),drain:()=>Promise.resolve(n.drain?.()),onDidEnd:l.event,onDidClose:e.event,onDidReceiveMessage:n.onData}}),r)};const S=i.l10n.t("Downloading VS Code Server...")},3411:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.getProxyUrlsForHost=l.getProxyConfig=l.maxReconnectionAttempts=l.logLevel=l.LogLevel=l.suppressWindowsSshWarning=l.connectTimeoutMilliseconds=l.connectTimeoutSetting=l.savePlatformForHost=l.interactivelyPickSshPlatform=l.getPlatformForHost=l.bindAddressForHost=l.remotePlatform=l.remotePortRanges=l.showLoginTerminal=l.useExperimentalEnhancedSessionLogs=l.useExperimentalChat=l.useLocalServer=l.remoteServerListenOnSocket=l.defaultForwardedPorts=l.serverInstallPath=l.sshPath=l.preferredLocalPortRange=l.localDownload=l.sshConfigurationFile=l.useFlock=l.lockfilesInTmp=l.getDefaultExtensionsIfInstalledLocally=l.getSshDefaultExtensions=l.externalSshAskpass=l.enableRemoteCommand=l.enableDynamicForwarding=l.bindHosts=l.useCurlAndWgetConfigurationFiles=l.permitPtyAllocation=l.enableX11Forwarding=l.enableAgentForwarding=l.useExecServer=l.enableWebAccess=l.CONFIG_FILE_SETTING=void 0;const t=e(1398),u=e(3070),r=e(6296),o=e(2593),i=e(96),s=e(2869);l.CONFIG_FILE_SETTING="remote.SSH.configFile";const a=/^[a-z0-9][a-z0-9\-]*\.[a-z0-9][a-z0-9\-]*$/i;function c(){return t.workspace.getConfiguration().get("remote.SSH.bindHost",{})}function d(){return!!t.workspace.getConfiguration().get("remote.SSH.remoteServerListenOnSocket")}function h(){const n=t.workspace.getConfiguration().get("remote.SSH.remotePlatform",{}),l={};return Object.keys(n).forEach((e=>{"macOS"===n[e]?l[e]=u.Platform.MacOS:"windows"===n[e]?l[e]=u.Platform.Windows:"linux"===n[e]&&(l[e]=u.Platform.Linux)})),l}async function f(n){const l=await t.window.showQuickPick([{label:"Linux",platform:u.Platform.Linux},{label:"Windows",platform:u.Platform.Windows},{label:"macOS",platform:u.Platform.MacOS}],{placeHolder:n,ignoreFocusOut:!0});if(l)return l.platform}l.enableWebAccess=function(){return!!t.workspace.getConfiguration().get("remote.SSH.enableWebAccess")},l.useExecServer=function(){return t.workspace.getConfiguration().get("remote.SSH.useExecServer",!0)},l.enableAgentForwarding=function(){return!1!==t.workspace.getConfiguration().get("remote.SSH.enableAgentForwarding")},l.enableX11Forwarding=function(){return!1!==t.workspace.getConfiguration().get("remote.SSH.enableX11Forwarding")},l.permitPtyAllocation=function(){return t.workspace.getConfiguration().get("remote.SSH.permitPtyAllocation")??!1},l.useCurlAndWgetConfigurationFiles=function(){return t.workspace.getConfiguration().get("remote.SSH.useCurlAndWgetConfigurationFiles")??!1},l.bindHosts=c,l.enableDynamicForwarding=function(){return!1!==t.workspace.getConfiguration().get("remote.SSH.enableDynamicForwarding")},l.enableRemoteCommand=function(){return t.workspace.getConfiguration().get("remote.SSH.enableRemoteCommand")??!1},l.externalSshAskpass=function(){return t.workspace.getConfiguration().get("remote.SSH.externalSSH_ASKPASS")??!1},l.getSshDefaultExtensions=function(){const n=t.workspace.getConfiguration().get("remote.SSH.defaultExtensions");return(Array.isArray(n)?n:[]).filter((n=>a.test(n)))},l.getDefaultExtensionsIfInstalledLocally=function(){const n=t.workspace.getConfiguration().get("remote.SSH.defaultExtensionsIfInstalledLocally");return(Array.isArray(n)?n:[]).filter((n=>a.test(n)))},l.lockfilesInTmp=function(){return!!t.workspace.getConfiguration().get("remote.SSH.lockfilesInTmp")},l.useFlock=function(){return t.workspace.getConfiguration().get("remote.SSH.useFlock")??!0},l.sshConfigurationFile=function(){return t.workspace.getConfiguration().get(l.CONFIG_FILE_SETTING)},l.localDownload=function(){const n=t.workspace.getConfiguration().get("remote.SSH.allowLocalServerDownload");if("boolean"==typeof n&&!n)return"off";const l=t.workspace.getConfiguration().get("remote.SSH.localServerDownload");return"off"===l?"off":"always"===l?"always":"auto"},l.preferredLocalPortRange=function(n){const l=t.workspace.getConfiguration().get("remote.SSH.preferredLocalPortRange");if(!l)return;if(!/^\d+-\d+$/.test(l))return void n.error(`Ignoring 'preferredLocalPortRange' setting due to invalid value.  Expected format of '[min]-[max]', got '${l}'. `);const[e,u]=l.split("-").map((n=>Number(n)));if(!(e>u||e<1||e>65535||u<1||u>65535))return{start:e,end:u};n.error(`Ignoring 'preferredLocalPortRange' setting due to invalid value.  Port values must be between 1 and 65535, and 'start' must be not be greater than 'end'.  Got '${e}-${u}'. `)},l.sshPath=function(){return t.workspace.getConfiguration().get("remote.SSH.path")},l.serverInstallPath=function(){return t.workspace.getConfiguration().get("remote.SSH.serverInstallPath")??{}},l.defaultForwardedPorts=function(){const n=t.workspace.getConfiguration().get("remote.SSH.defaultForwardedPorts");return Array.isArray(n)?n:[]},l.remoteServerListenOnSocket=d,l.useLocalServer=function(){if(d())return!1;const n=t.workspace.getConfiguration().inspect("remote.SSH.useLocalServer")?.globalValue;return"boolean"==typeof n?n:!r.isWindows},l.useExperimentalChat=function(){return t.workspace.getConfiguration().get("remote.SSH.experimental.chat")??!1},l.useExperimentalEnhancedSessionLogs=function(){return t.workspace.getConfiguration().get("remote.SSH.experimental.enhancedSessionLogs")??!1},l.showLoginTerminal=function(){return!!t.workspace.getConfiguration().get("remote.SSH.showLoginTerminal")},l.remotePortRanges=function(){const n=t.workspace.getConfiguration().get("remote.SSH.serverPickPortsFromRange",{}),l={};return Object.keys(n).forEach((e=>{const[t,u]=n[e].split("-").map((n=>Number(n)));l[e]={start:t,end:u}})),l},l.remotePlatform=h,l.bindAddressForHost=function(n){const l="127.0.0.1",e=c(),u=e.hasOwnProperty(n.hostName)?e[n.hostName]:l;return/^([A-Z\d-.]+|\[[A-Z0-9:]+\])$/i.test(u)?u:(t.window.showErrorMessage(t.l10n.t("{1} is not a valid host to bind",JSON.stringify(u))),l)},l.getPlatformForHost=async function(n,l=!0){if(function(n){return(t.workspace.getConfiguration().get("remote.SSH.windowsRemotes")||[]).includes(n.hostName)}(n))return u.Platform.Windows;const e=h();if(e.hasOwnProperty(n.hostName))return e[n.hostName];for(const[l,t]of Object.entries(e))if(l.includes("*")&&new RegExp("^"+(0,o.escapeRegExpCharacters)(l).replace(/\\\*/g,".*")+"$","i").test(n.hostName))return t;return l?f(`Select the platform of the remote host "${n.hostName}"`):void 0},l.interactivelyPickSshPlatform=f,l.savePlatformForHost=async function(n,l,e,u){const r=t.workspace.getConfiguration().get("remote.SSH.remotePlatform",{});if(!r||r[n.hostName]!==l.toString()){!function(n,l){const e="Don't Show Again";n.globalState.get(p)||t.window.showInformationMessage(`You selected "${l.toString()}" as the remote platform - this will be stored in the setting "remote.SSH.remotePlatform" and can be changed there if needed.`,e).then((l=>{l===e&&n.globalState.update(p,!0)}))}(e,l);try{await t.workspace.getConfiguration("remote").update("SSH.remotePlatform",{...r,[n.hostName]:l.toString()},t.ConfigurationTarget.Global)}catch(n){u.error(`Failed to write \`remote.SSH.remotePlatform\`: ${n.toString()}`)}}};const p="suppressRemotePlatformNotification";function m(){return t.workspace.getConfiguration().get("remote.SSH.connectTimeout")??15}var g;function y(n){const l=t.workspace.getConfiguration().get(`remote.SSH.${n}Proxy`);return"string"==typeof l?{"*":l}:l||{}}l.connectTimeoutSetting=m,l.connectTimeoutMilliseconds=function(n,l){let e=m();if(void 0!==n?.config?.ConnectTimeout){const t=parseInt(n.config.ConnectTimeout);if(void 0!==t&&!isNaN(t)){if(0===t)return l.debug("Detected connect timeout of 0. Setting maximum timeout."),2147483647;e=t}}return e<2147483646&&(e+=2),l.debug(`Using connect timeout of ${e} seconds`),1e3*e},l.suppressWindowsSshWarning=function(){return!!t.workspace.getConfiguration().get("remote.SSH.suppressWindowsSshWarning")},function(n){n[n.trace=1]="trace",n[n.debug=2]="debug",n[n.info=3]="info",n[n.warning=4]="warning",n[n.error=5]="error",n[n.critical=6]="critical",n[n.off=7]="off"}(g||(l.LogLevel=g={})),l.logLevel=function(){const n=t.workspace.getConfiguration().get("remote.SSH.logLevel")||"debug";return g[n]},l.maxReconnectionAttempts=function(){const n=t.workspace.getConfiguration().get("remote.SSH.maxReconnectionAttempts");return"number"==typeof n?n:Number.MAX_SAFE_INTEGER},l.getProxyConfig=y,l.getProxyUrlsForHost=function(n){function l(n){if(!n)return"";try{return t.Uri.parse(n,!0).toString()}catch(l){throw i.HintManager.Instance()?.captureStatus(s.UnifiedStatusCode.InvalidProxyUrl,`Provided URL '${n}' resulted in ${l}`),l}}const{hostName:e}=n,u=y("http"),r=y("https");return{httpProxy:l(u[e]||u["*"]),httpsProxy:l(r[e]||r["*"])}}},1566:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.showMissingPrereqConnectionError=l.showConnectionError=l.getHelp=l.getStarted=l.provideFeedback=l.openSettings=l.reportIssue=void 0;const t=e(1398),u=e(4417),r=e(3378),o=e(3411);function i(){const{name:n,publisher:l,extensionPack:e}=(0,r.getPackageJson)(),u=[`${l}.${n}`];return e&&e.forEach((n=>u.push(n))),t.commands.executeCommand("workbench.action.openSettings",`@ext:${u.join(",")}`)}function s(){return t.env.openExternal(t.Uri.parse("https://aka.ms/vscode-remote/ssh"))}l.reportIssue=function(){const{name:n,publisher:l}=(0,r.getPackageJson)();return t.commands.executeCommand("vscode.openIssueReporter",`${l}.${n}`)},l.openSettings=i,l.provideFeedback=function(){return t.env.openExternal(t.Uri.parse("https://aka.ms/vscode-remote/ssh/provide-feedback"))},l.getStarted=function(){return t.env.openExternal(t.Uri.parse("https://aka.ms/vscode-remote/ssh/getting-started"))},l.getHelp=s;class a{constructor(){this.title="Reload Window"}async execute(){await t.commands.executeCommand("workbench.action.reloadWindow")}}class c extends a{constructor(){super(...arguments),this.title=t.l10n.t("Retry")}}class d{constructor(){this.title=t.l10n.t("Close Remote")}async execute(){await t.commands.executeCommand("workbench.action.remote.close")}}class h{constructor(n){this.moreActions=n,this.title=t.l10n.t("More Actions..."),this.isCloseAffordance=!0}async execute(n){const l=this.moreActions.map((n=>({label:n.title,action:n}))),e=await t.window.showQuickPick(l,{ignoreFocusOut:!0,placeHolder:t.l10n.t("Pick an action to help resolve the problem.")});e&&await e.action.execute(n)}}class f{constructor(){this.title=t.l10n.t("Open Recent...")}async execute(){await t.commands.executeCommand("workbench.action.openRecent")}}class p{constructor(){this.title=t.l10n.t("Open SSH Configuration File")}async execute(n){await(0,u.configureSshHosts)(n)}}class m{constructor(){this.title=t.l10n.t("Open Settings")}async execute(){i()}}const g=[new a,new f,new class{constructor(){this.title=t.l10n.t("Open Documentation")}async execute(){await s()}},new p,new m],y=[new d,new h(g),new c,...(0,o.useExperimentalChat)()?[new class{constructor(){this.title=t.l10n.t("Diagnose with Copilot")}async execute(){const n=`${t.env.uriScheme}://ms-vscode-remote.remote-ssh/continueWithCopilot?&windowId=_blank`;await t.env.openExternal(t.Uri.parse(n))}}]:[]];l.showConnectionError=async function(n,l){n.endsWith(".")||(n+=".");const e=await t.window.showErrorMessage(n,{modal:!0},...y);e&&await e.execute(l)},l.showMissingPrereqConnectionError=async function(n,l){n.endsWith(".")||(n+=".");const e=[new a,new f,new p,new m],u=[new d,new h(e),new c],r=await t.window.showErrorMessage(n,{modal:!0},...u);r&&await r.execute(l)}},8730:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.interactivelyPickSshHost=void 0;const t=e(1398),u=e(4417),r=e(1990);class o{constructor(n){this.label=n}}class i{constructor(){this.label=t.l10n.t("Configure SSH Hosts..."),this.alwaysShow=!0}}class s{constructor(){this.label=t.l10n.t("{0} Add New SSH Host...","$(plus)"),this.alwaysShow=!0}}class a{get label(){return`➤ ${this.hostName}`}constructor(){this.hostName="",this.alwaysShow=!0}}l.interactivelyPickSshHost=async function(n){n.info("Picking SSH host");const l=await(0,u.getHostsFromConfigs)(n),e=await async function(n,l){return new Promise(((e,u)=>{const c=function(n){const l=n.map((n=>new o(n))),e=new i,u=new s,r=t.window.createQuickPick();r.ignoreFocusOut=!0,r.placeholder=t.l10n.t({message:"Select configured SSH host or enter user@host",comment:['Translate user@host such that both user and host are translated but joined by an "@" sign.']});const c=new a;let d=!1;const h=()=>{const n=[...l];d&&n.push(c),n.push(u),n.push(e),r.items=n};return h(),r.onDidChangeValue((n=>{c.hostName=n,d="string"==typeof n&&n.length>0,h()})),r}(n);let d;c.onDidAccept((async()=>{c.busy=!0;const n=c.selectedItems[0];if(n instanceof i)return void e({type:"command",id:"configure"});if(n instanceof s)return void e({type:"command",id:"new"});const t=n instanceof a?n.hostName:n.label;d=r.HostInfo.fromString(t),l.info(`Selected ${d.toString()}`),c.busy=!1,c.hide(),c.dispose()})),c.onDidHide((async()=>{e(d?{type:"host",host:d}:null)})),c.show()}))}(l,n);if(e){if("command"===e.type&&"configure"===e.id)return(0,u.configureSshHosts)(n),null;if("command"===e.type&&"new"===e.id)return t.commands.executeCommand("opensshremotes.addNewSshHost");if("host"===e.type)return e.host}return null}},2232:(n,l)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.getScriptStartMarker=void 0,l.getScriptStartMarker=function(n){return`${n}: running`}},712:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.detectPortForwardingDisabledAndWarn=l.SshResolverError=l.SshResolverErrorCode=l.parseInstallScriptOutput=l.handleInstallErrorResult=l.handleInstallOutput=l.handleServerErrorOutput=l.ListenTarget=l.InstallUnpackCode=void 0;const t=e(1398),u=e(3411),r=e(3070),o=e(2593),i=e(9278),s=e(2869),a=e(96),c=e(5521);var d,h;function f(n,l,e){let t=l.match(/(?<=Error: ).*\n/);if(t=t||l.match(/(?=Could not find free port in range: ).+?(?:\(inclusive\).)/),t&&t[0])throw e.error(t[0]),v.ServerInstallError(n,s.UnifiedStatusCode.NoFreePortInRange,t[0])}function p(n,l,e){if(n.exitCode!==s.UnifiedStatusCode.AlreadyInProgress){if(n.exitCode===s.UnifiedStatusCode.ServerDownloadFailed)throw e.error("Server download failed"),v.ServerInstallError(n,s.UnifiedStatusCode.ServerDownloadFailed,t.l10n.t("Downloading VS Code Server failed. Please try again later."));if(n.exitCode===s.UnifiedStatusCode.NoDownloaderAvailable)throw e.error("Neither curl nor wget is installed - can't download the Server"),v.ServerInstallError(n,s.UnifiedStatusCode.NoDownloaderAvailable,t.l10n.t("Downloading VS Code Server failed - please install either curl or wget on the remote."));if(n.exitCode===s.UnifiedStatusCode.NoDownloaderAvailableForStatusCheck)throw e.error("Neither curl nor wget is installed - can't check VS Code Server status"),v.ServerInstallError(n,s.UnifiedStatusCode.NoDownloaderAvailableForStatusCheck,t.l10n.t("Checking VS Code Server status failed - please install either curl or wget on the remote."));if(n.exitCode===s.UnifiedStatusCode.UnsupportedArch)throw e.error("Unsupported architecture"),v.ServerInstallError(n,s.UnifiedStatusCode.UnsupportedArch,t.l10n.t("The remote host's architecture is not supported"));if(n.exitCode===s.UnifiedStatusCode.UnsupportedPlatform)throw e.error("Unsupported platform"),v.ServerInstallError(n,s.UnifiedStatusCode.UnsupportedPlatform,t.l10n.t("The remote host's platform is not supported"));if(n.exitCode===s.UnifiedStatusCode.StatusCheckFailed)return e.debug("Server status check failed - waiting and retrying"),void a.HintManager.Instance()?.captureStatus(s.UnifiedStatusCode.StatusCheckFailed);if(n.exitCode===s.UnifiedStatusCode.NeedInsidersArch)throw v.ServerInstallError(n,s.UnifiedStatusCode.NeedInsidersArch,t.l10n.t("The remote host's architecture is only supported on VS Code Insiders"));if(n.exitCode===s.UnifiedStatusCode.NeedInsidersWindows)throw v.ServerInstallError(n,s.UnifiedStatusCode.NeedInsidersWindows,t.l10n.t("Windows hosts are only supported on VS Code Insiders"));if(n.exitCode===s.UnifiedStatusCode.ServerFailedToStart)throw v.ServerInstallError(n,s.UnifiedStatusCode.ServerFailedToStart,t.l10n.t("The VS Code Server failed to start"));if(n.exitCode===s.UnifiedStatusCode.ServerTerminatedCVE20201416)throw v.ServerInstallError(n,s.UnifiedStatusCode.ServerTerminatedCVE20201416,t.l10n.t("The VS Code Server terminated due to presence of CVE-2020-1416. Check the Remote-SSH output channel for more details."));if(n.exitCode===s.UnifiedStatusCode.CreateInstallDirFailed)throw v.ServerInstallError(n,s.UnifiedStatusCode.CreateInstallDirFailed,t.l10n.t("Failed to create the remote server's install directory"));if(n.exitCode===s.UnifiedStatusCode.UnpackFailed)throw v.ServerInstallError(n,s.UnifiedStatusCode.UnpackFailed,t.l10n.t("Failed to install the VS Code Server"));if(n.exitCode===s.UnifiedStatusCode.LinuxPrereqs)throw v.ServerInstallError(n,s.UnifiedStatusCode.LinuxPrereqs,t.l10n.t("The remote host does not meet the prerequisites for running VS Code Server"));throw e.error(`Server installation failed with exit code ${n.exitCode} and output ${l}`),v.Create(s.UnifiedStatusCode.UnhandledResolverExitCode)}e.error("Server installation process already in progress - waiting and retrying")}!function(n){n.Success="success",n.Error="error",n.MissingFiles="missingFiles"}(d||(l.InstallUnpackCode=d={})),function(n){n.display=function(n){return"port"in n?`port ${n.port}`:`socket ${n.socketPath}`},n.listen=function(n,l,e){"port"in l?n.listen(l.port,"127.0.0.1",e):n.listen(l.socketPath,e)},n.connect=function(n,l){return"port"in n?i.connect(n.port,"127.0.0.1",l):i.connect(n.socketPath,l)}}(h||(l.ListenTarget=h={})),l.handleServerErrorOutput=f,l.handleInstallOutput=function(n,l,e){!function(n){if(n.match(/WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!/))throw v.Create(s.UnifiedStatusCode.MitmPortForwardingDisabled,t.l10n.t("Remote host key has changed, port forwarding is disabled"));const l=n.match(/connect to host (?<ip>[0-9.]+) port [0-9]+: No route to host/);l&&"darwin"===process.platform&&l.groups?.ip&&(0,c.isPrivateIPv4)(l.groups.ip)&&a.HintManager.Instance()?.captureStatus(s.UnifiedStatusCode.LocalNetworkPermissionMacOS)}(l);const r=g(l,n.deps.logger);if((o=r)&&"number"==typeof o.exitCode)return e&&r.exitCode===s.UnifiedStatusCode.ServerFailedToStart&&f(r,e,n.deps.logger),void p(r,l,n.deps.logger);if(r)return n.deps.logger.info(`Remote server is listening on ${h.display(r.serverConfiguration.remoteListeningOn)}`),r;throw function(n){if(n.match(/Network is unreachable/))throw v.Offline(t.l10n.t("Network is unreachable"));if(n.match(/Could not resolve hostname/))throw v.Offline(t.l10n.t("Could not resolve hostname"));if(n.match(/The process tried to write to a nonexistent pipe/))throw v.Offline(t.l10n.t("The process tried to write to a nonexistent pipe"));if(n.match(/Connection timed out/))throw v.Offline(t.l10n.t("The connection timed out"));if(n.match(/Operation timed out/))throw v.Offline(t.l10n.t("The operation timed out"));if(n.match(/No route to host/))throw v.Offline(t.l10n.t("No route to host"));if(n.match(/Can't assign requested address/))throw v.Offline(t.l10n.t("Can't assign requested address"))}(l),function(n,l){if(!l.trim())throw v.Create(s.UnifiedStatusCode.EmptyOutput,"");const e=l.split("\n").reverse();for(const n of e){let l;if((l=n.match(/Too many authentication failures.*/))||(l=n.match(/Permission denied.*/)))throw v.Create(s.UnifiedStatusCode.PermissionDenied,l[0])}if(l.match(/bash: (command )?not found/i))throw v.Create(s.UnifiedStatusCode.NoBash,t.l10n.t("bash not found"));if(l.match(/shell request failed on channel \d/))throw v.Create(s.UnifiedStatusCode.ShellRequestFailedOnChannel);if(l.match(/client_loop: send disconnect: Broken pipe/))throw v.Create(s.UnifiedStatusCode.SendDisconnectBrokenPipe);if(l.match(/hostname contains invalid characters/))throw v.Create(s.UnifiedStatusCode.InvalidHostName,t.l10n.t("Hostname contains invalid characters"));const r=l.match(/'([^']+)' is not recognized as an internal or external command/);if(r)throw v.Create(s.UnifiedStatusCode.WinCommandNotFound,r[1]?`'${r[1]}' was not found on the remote host`:"See output log for more details");const o=n.host.config;(0,u.enableRemoteCommand)()&&l.match(/Authenticated to .* ssh child died, shutting down/s)&&o&&o.RemoteCommand&&n.deps.logger.error("You have RemoteCommand in your SSH Config for this remote which could be the cause for this crash. Try reconnecting with `enableRemoteCommand` set to `false`.")}(n,l),n.deps.logger.error("Failed to parse remote port from server output"),v.Create(s.UnifiedStatusCode.UnparsableOutput);var o},l.handleInstallErrorResult=p;const m=/^(?:[0-9.:]+:|\[[0-9a-f:]+]:)?(?<port>[0-9]+)$/;function g(n,l){const e=(0,o.parseStringMap)(n,void 0,l);let t;if(e.platform===r.Platform.Linux||e.platform===r.Platform.MacOS||e.platform===r.Platform.Windows)t=e.platform;else{if(!e.platform)return void l.error("WARN: $PLATFORM is undefined in installation script output.  Errors may be dropped.");t=void 0}const u=e.listeningOn&&m.exec(e.listeningOn),i=u?{port:Number(u.groups.port)}:e.listeningOn?{socketPath:e.listeningOn}:void 0;if(!t||e.exitCode){const n={remoteListeningOn:i,osReleaseId:e.osReleaseId,arch:e.arch,platform:t};return{exitCode:t?parseInt(e.exitCode,10):s.UnifiedStatusCode.UnsupportedPlatform,serverConfiguration:n}}if(i)return{serverConfiguration:{remoteListeningOn:i,osReleaseId:e.osReleaseId,arch:e.arch,webUiAccessToken:e.webUiAccessToken,sshAuthSock:e.SSH_AUTH_SOCK,display:e.DISPLAY,tmpDir:e.tmpDir,platform:t,connectionToken:e.connectionToken,execServerToken:e.execServerToken},downloadTime:"string"==typeof e.downloadTime&&e.downloadTime?parseInt(e.downloadTime,10):void 0,installTime:"string"==typeof e.installTime&&e.installTime?parseInt(e.installTime,10):void 0,extInstallTime:"string"==typeof e.extInstallTime&&e.extInstallTime?parseInt(e.extInstallTime,10):void 0,serverStartTime:"string"==typeof e.serverStartTime&&e.serverStartTime?parseInt(e.serverStartTime,10):void 0,didLocalDownload:"string"==typeof e.didLocalDownload&&("1"===e.didLocalDownload||"True"===e.didLocalDownload)||void 0,installUnpackCode:"string"==typeof e.unpackResult?e.unpackResult:void 0}}var y;l.parseInstallScriptOutput=g,function(n){n.NotAvailable="NotAvailable",n.TemporarilyNotAvailable="TemporarilyNotAvailable"}(y||(l.SshResolverErrorCode=y={}));class v extends Error{static ServerInstallError(n,l,e){return new v(e,y.NotAvailable,l,n)}static Create(n,l=""){return new v(l,y.NotAvailable,n)}static Offline(n){return new v(n,y.TemporarilyNotAvailable,s.UnifiedStatusCode.OfflineError)}static Timeout(n){return new v(n,y.TemporarilyNotAvailable,s.UnifiedStatusCode.Timeout)}static Canceled(){return new v(t.l10n.t("Connecting was canceled"),y.NotAvailable,s.UnifiedStatusCode.Canceled)}constructor(n,l,e,t){super(n),this.handled=!1,this._message=n,this._code=l,this.failureReason=e,this.installErrorDetails=t,"function"==typeof Object.setPrototypeOf&&Object.setPrototypeOf(this,v.prototype)}toRemoteAuthorityResolverError(){return this._code===y.NotAvailable?t.RemoteAuthorityResolverError.NotAvailable(this._message,this.handled):t.RemoteAuthorityResolverError.TemporarilyNotAvailable(this._message)}}l.SshResolverError=v;let w=!1;l.detectPortForwardingDisabledAndWarn=function(n,l){w||n.includes("open failed: administratively prohibited")&&(l.error(t.l10n.t("ERROR: TCP port forwarding appears to be disabled on the remote host. Ensure that the sshd_config has `AllowTcpForwarding yes`. Contact your system administrator if needed.")),a.HintManager.Instance()?.captureStatus(s.UnifiedStatusCode.AllowTcpForwardingDisabled),w=!0)}},8602:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.getSshdParentPid=l.execServerInstallScript=l.serverInstallScript=void 0;const t=e(4788),u=e(4430),r=e(6294),o=e(8652),i=e(2593),s=e(6444),a=e(2232),c=e(712),d=e(2869);l.serverInstallScript=function({uuid:n,quality:e,commit:h,telemetryLevel:f,extensionIds:p,basePath:m,serverDataFolderName:g,serverApplicationName:y,enableWebAccess:v,printVars:w,localDownload:b,portRange:S,bindHost:C,httpProxy:D,httpsProxy:E}){const _=p&&p.length>0?p.map(i.sanitizeExtensionId).map((n=>`"--install-extension", "${n}"`)).join(", "):'""',k="${uuid}",x=`\n$uuid = "${n}"\n"${(0,a.getScriptStartMarker)(k)}"\n"${(0,u.getPauseLogMarker)(n)}"\n$ProgressPreference = 'SilentlyContinue'\n$commitId = '${h}'\n\n# https://docs.microsoft.com/en-us/windows/win32/winprog64/wow64-implementation-details?redirectedfrom=MSDN\n$p = $env:PROCESSOR_ARCHITECTURE\n$arch = ''\nif ($p -eq 'AMD64' -or $p -eq 'IA64') {\n    $arch = 'x64'\n} elseif ($p -eq 'ARM64') {\n    $arch = 'arm64'\n}\n\nif ($arch -eq '') {\n\t"Unsupported architecture '$p'."\n\tq ${d.UnifiedStatusCode.UnsupportedArch}\n}\n\n$serverRoot = (Join-Path ${m??"(Resolve-Path ~)"} '${g}')\n$log = "$serverRoot\\.$commitId.log"\n$tokenFile = "$serverRoot\\.$commitId.token"\n$sDir = "$serverRoot\\bin\\$commitId"\n$sFile = "$serverRoot\\bin\\$commitId\\bin\\${y}.cmd"\n$quality = '${e}'\n$telemetryFlag = "--telemetry-level ${f}"\n$exts = ${_}\n$allowLocalDownload = ${"off"!==b?"$True":"$False"}\n$forceLocalDownload = ${"always"===b?"$True":"$False"}\n$global:didLocal = $False\n$global:gotUnpackResult = ''\n$global:totalDownloadTime = ''\n$global:totalInstallTime = ''\n$global:totalExtInstallTime = ''\n$global:totalServerStartTime = ''\n$global:secretToken = ''\n\nif ('${D}' -ne '') {\n\t$env:http_proxy = '${D}'\n}\n\nif ('${E}' -ne '') {\n\t$env:https_proxy = '${E}'\n}\n\nfunction printDetails {\n\t"listeningOn==$port=="\n\t"osReleaseId==windows=="\n\t"osVersion==$winVersion=="\n\t"arch==$arch=="\n\t"platform==windows=="\n\t"unpackResult==$gotUnpackResult=="\n\t"didLocalDownload==$didLocal=="\n\t"downloadTime==$totalDownloadTime=="\n\t"installTime==$totalInstallTime=="\n\t"extInstallTime==$totalExtInstallTime=="\n\t"serverStartTime==$totalServerStartTime=="\n}\n\nfunction getStopwatch {\n\treturn [system.diagnostics.stopwatch]::StartNew();\n}\n\n# failWithExitCode\nfunction q($code) {\n\t"\${uuid}: start"\n\t"exitCode==$code=="\n\tprintDetails\n\t"\${uuid}: end"\n}\n\n${l.getSshdParentPid}\n\nfunction exitIfNeeded {\n\tif ($launchedServerPid) {\n\t\tif (!(gps -Id $launchedServerPid)) {\n\t\t\t"server died, exit"\n\t\t\texit 0\n\t\t}\n\t} else {\n\t\tif (!(gps -Id $sshdPID)) {\n\t\t\t"sshd parent died, exit"\n\t\t\texit 0\n\t\t}\n\t}\n}\n\nfunction GetArtifactName {\n\t$webPart = "${v?"-web":""}"\n\t"server-win32-$arch" + $webPart\n}\n\nfunction DownloadServer {\n\t$s = getStopwatch\n\t"Downloading server $arch"\n\t"${(0,o.getProgressOutputString)(k,1)}"\n\t$serverName = GetArtifactName\n\t$splat = @{\n\t\tUri="https://update.code.visualstudio.com/commit:$commitId/$serverName/$quality"\n\t\tTimeoutSec=20\n\t\tOutFile="vscode-server.zip"\n\t\tUseBasicParsing=$True\n\t}\n\n\t# Enable TLS1.2\n\t[Net.ServicePointManager]::SecurityProtocol = 'Tls12'\n\tirm @splat\n\n\t$s.Stop()\n\t$global:totalDownloadTime = $s.ElapsedMilliseconds\n}\n\nfunction InstallServer {\n\t$global:gotUnpackResult='${c.InstallUnpackCode.Success}'\n\t$s = getStopwatch\n\n\ttry {\n\t\t# Unzip to tmp then move to destination to avoid "path too long"\n\t\t$randomDirName = [System.IO.Path]::GetRandomFileName()\n\t\t$tmpDest = "$env:TEMP\\$randomDirName"\n\t\t"Expanding server into $tmpDest"\n\t\t"${(0,o.getProgressOutputString)(k,2)}"\n\t\tExpand-Archive "vscode-server.zip" -DestinationPath "$tmpDest"\n\t\tcp -Recurse "$tmpDest\\vscode-*\\*" -Destination .\n\t\tdel -Recurse $tmpDest\n\t\t$s.Stop()\n\t\t$global:totalInstallTime = $s.ElapsedMilliseconds\n\t} catch {\n\t\t$global:gotUnpackResult='${c.InstallUnpackCode.Error}'\n\t\t"Failed to unzip server. - $($_.ToString())"\n\t\tDoLocalDownloadOrFail ${d.UnifiedStatusCode.UnpackFailed}\n\t\tInstallServer\n\t}\n\n\tif(!(Test-Path "$sFile")) {\n\t\t$global:gotUnpackResult='${c.InstallUnpackCode.MissingFiles}'\n\t\t"Downloaded server is incomplete."\n\t\tDoLocalDownloadOrFail ${d.UnifiedStatusCode.UnpackFailed}\n\t\tInstallServer\n\t}\n}\n\nfunction WriteConnectionToken {\n\t$fulluser = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name\n\t$global:secretToken = "${(0,s.generateUuid)()}"\n\tni -it f $tokenFile -Force\n\ticacls $tokenFile /reset /Q\n\ticacls $tokenFile /setowner "$fulluser" /Q\n\ticacls $tokenFile /grant "$($fulluser):(R,W)" /Q\n\ticacls $tokenFile /inheritance:r /Q\n\t# This should write in UTF-8 with no BOM. Other methods of writing to a file write UTF-16 or UTF-8 with a BOM\n\t[System.IO.File]::WriteAllLines($tokenFile, $global:secretToken)\n}\n\nfunction SetPortFlag {\n    if(${S?"$True":"$False"}) {\n\t\treturn "--port=${S?.start??0}-${S?.end??0}"\n    }\n\n    return "--port=0"\n}\n\nfunction StartServer {\n\t$s = getStopwatch\n\tif(Test-Path $log) {\n\t\tdel $log\n\t}\n\t$escapedServerFile=$sFile -replace ' ', '\` '\n\tWriteConnectionToken\n\t$portFlag = SetPortFlag\n\t$args = "--start-server --host=${C} --server-data-dir '$serverRoot' --accept-server-license-terms --enable-remote-auto-shutdown $portFlag --connection-token-file '$tokenFile' $telemetryFlag $exts *> '$log'"\n\t$splat = @{\n\t\tFilePath = "powershell.exe"\n\t\tWindowStyle = "hidden"\n\t\tArgumentList = @(\n\t\t\t"-ExecutionPolicy", "Unrestricted", "-NoLogo", "-NoProfile", "-NonInteractive", "-c", "$escapedServerFile $args"\n\t\t)\n\t\tPassThru = $True\n\t}\n\t"Starting server: & '$sFile' $args"\n\t$global:launchedServerPid = (start @splat).ID\n\t$s.Stop()\n\t$global:totalServerStartTime = $s.ElapsedMilliseconds\n}\n\nfunction DoLocalDownload {\n\t$global:didLocal=$True\n\t"Trigger local server download"\n\t$serverName = GetArtifactName\n\t"${(0,t.getDownloadServerStartTrigger)(k)}"\n\t"artifact==$serverName=="\n\t"destFolder==$serverRoot\\bin\\=="\n\t"destFolder2==$commitId\\vscode-server.zip=="\n\t"${(0,t.getDownloadServerEndTrigger)(k)}"\n\n\t"Waiting for client to transfer server archive..."\n\t"Waiting for $sDir\\vscode-server.zip.done and vscode-server.zip to exist"\n\n\twhile($True) {\n\t\tif(Test-Path "$sDir\\vscode-server.zip.done") {\n\t\t\tif(!(Test-Path "$sDir\\vscode-server.zip")) {\n\t\t\t\t"Transfer failed"\n\t\t\t\tq ${d.UnifiedStatusCode.ServerTransferFailed}\n\t\t\t}\n\n\t\t\t"Transfer complete"\n\t\t\tdel $sDir\\vscode-server.zip.done\n\t\t\tbreak\n\t\t} else {\n\t\t\tStart-Sleep -Seconds 3\n\t\t\texitIfNeeded\n\t\t}\n\t}\n}\n\nfunction DoLocalDownloadOrFail($code) {\n\tif ($didLocal) {\n\t\t"Already attempted local download, failing"\n\t\tq $code\n\t} elseif($allowLocalDownload) {\n\t\tDoLocalDownload\n\t} else {\n\t\tq $code\n\t}\n}\n\nfunction InstallExtensions {\n\t# Install extensions if needed\n\tif ($exts -ne "") {\n\t\t$s = getStopwatch\n\t\t# Can't be inlined as a variable\n\t\t& "$sFile" $telemetryFlag @exts\n\t\t$s.Stop()\n\t\t$global:totalExtInstallTime = $s.ElapsedMilliseconds\n\t}\n}\n\nfunction acquireLock() {\n\t# Init lockfile\n\t$lockFilePath = (Join-Path "$sDir" "vscode-remote-lock.$commitId")\n\ttry {\n\t\t$null = ni $lockFilePath -it f -ea si\n\t} catch {\n\t\t"Could not create server lock file. - $($_.ToString())"\n\t\treturn\n\t}\n\n\t# Acquire lock\n\ttry {\n\t\t"Acquiring lock on $lockFilePath"\n\n\t\t# .NET API needs an absolute path\n\t\t$global:file = [System.io.File]::Open($lockFilePath, 'Open', 'Read', 'None')\n\t} catch {\n\t\t"Install already in progress... - $($_.ToString())"\n\t\tq ${d.UnifiedStatusCode.AlreadyInProgress}\n\t}\n}\n\nfunction printResult() {\n\t"\${uuid}: start"\n\t${w.map((n=>`"${n}==$env:${n}=="`)).join("\n")}\n\tprintDetails\n\t"connectionToken==$global:secretToken=="\n\t"\${uuid}: end"\n}\n\nfunction main() {\n\t$global:sshdPID = getSshdParentPid\n\n\tif(!(Test-Path $sDir)) {\n\t\t$m = "Could not create server directory"\n\t\ttry {\n\t\t\t$null = ni -it d $sDir -f -ea si\n\t\t} catch {\n\t\t\t"$m. - $($_.ToString())"\n\t\t\treturn\n\t\t}\n\n\t\tif(!(Test-Path $sDir)) {\n\t\t\t"$m"\n\t\t\treturn\n\t\t}\n\t}\n\n\tcd $sDir\n\tacquireLock\n\n\ttry {\n\t\t"Looking for existing server in $sDir"\n\t\tif(Test-Path "$sFile") {\n\t\t\t"Found installed server"\n\t\t} else {\n\t\t\tif ($forceLocalDownload) {\n\t\t\t\tDoLocalDownload\n\t\t\t} else {\n\t\t\t\ttry { DownloadServer } catch {\n\t\t\t\t\t"Download failed. - $($_.ToString())"\n\t\t\t\t\tDoLocalDownloadOrFail ${d.UnifiedStatusCode.ServerDownloadFailed}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tInstallServer\n\t\t}\n\n\t\t# Find running process by name (node) then commit in path\n\t\tif(!(Get-Process node -ErrorAction SilentlyContinue | Where-Object Path -Like "$sDir\\*")) {\n\t\t\tStartServer\n\t\t} else {\n\t\t\t"Server with $commitId is already running."\n\t\t\tInstallExtensions\n\t\t\tif (Test-Path $tokenFile) {\n\t\t\t\t$global:secretToken = $(cat $tokenFile)\n\t\t\t}\n\t\t}\n\n\t\t$listeningP = @{\n\t\t\tPath = $log\n\t\t\tPattern = "Extension host agent listening on (\\d+)"\n\t\t}\n\n\t\t# Do not change this message\n\t\t$failedP = @{\n\t\t\tPath = $log\n\t\t\tPattern = "!!!! Server terminated due to presence of CVE-2020-1416 !!!!"\n\t\t}\n\n\t\t$timeoutDate = (Get-Date).AddSeconds(4)\n\t\t$serverLogMsg = "Server did not start successfully. Full server log at $log >>>"\n\t\twhile ((Get-Date) -lt $timeoutDate) {\n\t\t\tif(Test-Path $log) {\n\t\t\t\t$listeningMatch = (sls @listeningP).Matches.Groups\n\t\t\t\tif($listeningMatch) {\n\t\t\t\t\t$global:port = $listeningMatch[1].Value\n\t\t\t\t\tbreak\n\t\t\t\t}\n\n\t\t\t\t$failed = (sls @failedP).Matches.Groups\n\t\t\t\tif($failed) {\n\t\t\t\t\t$serverLogMsg\n\t\t\t\t\tcat $log\n\t\t\t\t\t"<<< End of server log"\n\t\t\t\t\tq ${d.UnifiedStatusCode.ServerTerminatedCVE20201416}\n\t\t\t\t}\n\t\t\t}\n\t\t\tsleep -Milliseconds 30\n\t\t}\n\n\t\tif (!$port) {\n\t\t\t$serverLogMsg\n\t\t\tcat $log\n\t\t\t"<<< End of server log"\n\t\t\tq ${d.UnifiedStatusCode.ServerFailedToStart}\n\t\t}\n\t} catch {\n\t\t"Server failed to start. - $($_.ToString())"\n\t\t# TODO\n\t} finally {\n\t\t$file.Close()\n\t}\n\n\t# Get windows version\n\ttry {\n\t\t$global:winVersion = (gcim Win32_OperatingSystem).Version\n\t} catch {\n\t\t"Failed to find Windows version - $($_.ToString())"\n\t\t$global:winVersion = "unknown"\n\t}\n\n\tprintResult\n\n\t#\n\t# Start infinite loop, quit when orphaned (ssh connection closed)\n\t#\n\n\t"$pid, watching $sshdPID"\n\twhile ($True) {\n\t\texitIfNeeded\n\t\tsleep 30\n\t}\n}\n\n"${(0,u.getResumeLogMarker)(n)}"\nmain\n\n`;return(0,r.minifyPwsh)(x,["getSshdParentPid","exitIfNeeded","DownloadServer","InstallServer","DoLocalDownload","DoLocalDownloadOrFail","allowLocalDownload","forceLocalDownload","getStopwatch","totalDownloadTime","totalInstallTime","totalExtInstallTime","totalServerStartTime","commitId","serverRoot","quality","telemetryFlag","didLocal","gotUnpackResult","currentPID","parentPID","launchedServerPid","webPart","archPart","serverName","randomDirName","tmpDest","escapedServerDir","lockFilePath","timeoutDate","failedP","listeningP","listeningMatch","winVersion","tokenFile","secretToken","WriteConnectionToken","StartServer","SetPortFlag","InstallExtensions","printDetails","serverLogMsg","fulluser"])},l.execServerInstallScript=function({uuid:n,quality:e,commit:i,basePath:s,serverDataFolderName:h,printVars:f,localDownload:p,token:m,bindHost:g,portRange:y,httpProxy:v,httpsProxy:w}){const b="${uuid}",S=`\n$uuid = "${n}"\n"${(0,a.getScriptStartMarker)(b)}"\n"${(0,u.getPauseLogMarker)(n)}"\n$ProgressPreference = 'SilentlyContinue'\n$commitId = '${i}'\n\n# https://docs.microsoft.com/en-us/windows/win32/winprog64/wow64-implementation-details?redirectedfrom=MSDN\n$p = $env:PROCESSOR_ARCHITECTURE\n$arch = ''\nif ($p -eq 'AMD64' -or $p -eq 'IA64') {\n    $arch = 'x64'\n} elseif ($p -eq 'ARM64') {\n    $arch = 'arm64'\n}\n\nif ($arch -eq '') {\n\t"Unsupported architecture '$p'."\n\tq ${d.UnifiedStatusCode.UnsupportedArch}\n}\n\nif ('${v}' -ne '') {\n\t$env:http_proxy = '${v}'\n}\n\nif ('${w}' -ne '') {\n\t$env:https_proxy = '${w}'\n}\n\n$serverRoot = (Join-Path ${s??"(Resolve-Path ~)"} '${h}')\n$cliDataDir = (Join-Path "$serverRoot" 'cli')\n$env:VSCODE_AGENT_FOLDER=$serverRoot\n$log = New-TemporaryFile\n$cliNameInArchiveWithoutExe = "${"stable"===e?"code":"code-insiders"}"\n$cliNameInArchve = "$cliNameInArchiveWithoutExe.exe"\n$cliNameOnDisk = "$cliNameInArchiveWithoutExe-$commitId.exe"\n$cliPath = "$serverRoot\\$cliNameOnDisk"\n$quality = '${e}'\n$allowLocalDownload = ${"off"!==p?"$True":"$False"}\n$forceLocalDownload = ${"always"===p?"$True":"$False"}\n$global:didLocal = $False\n$global:gotUnpackResult = ''\n$global:totalDownloadTime = ''\n$global:totalInstallTime = ''\n$global:totalExtInstallTime = ''\n$global:totalServerStartTime = ''\n\nfunction printDetails {\n\t"listeningOn==$port=="\n\t"osReleaseId==windows=="\n\t"osVersion==$winVersion=="\n\t"arch==$arch=="\n\t"platform==windows=="\n\t"unpackResult==$gotUnpackResult=="\n\t"didLocalDownload==$didLocal=="\n\t"downloadTime==$totalDownloadTime=="\n\t"installTime==$totalInstallTime=="\n\t"extInstallTime==$totalExtInstallTime=="\n\t"serverStartTime==$totalServerStartTime=="\n\t"execServerToken==${m}=="\n}\n\nfunction getStopwatch {\n\treturn [system.diagnostics.stopwatch]::StartNew();\n}\n\n# failWithExitCode\nfunction q($code) {\n\t"\${uuid}: start"\n\t"exitCode==$code=="\n\tprintDetails\n\t"\${uuid}: end"\n}\n\n${l.getSshdParentPid}\n\nfunction exitIfNeeded {\n\tif ($launchedCli1Pid) {\n\t\tif (!(gps -Id $launchedCliPid)) {\n\t\t\t"server died, exit"\n\t\t\texit 0\n\t\t}\n\t} else {\n\t\tif (!(gps -Id $sshdPID)) {\n\t\t\t"sshd parent died, exit"\n\t\t\texit 0\n\t\t}\n\t}\n}\n\nfunction GetArtifactName {\n\t"cli-win32-$arch"\n}\n\nfunction DownloadCli {\n\t$s = getStopwatch\n\t"Downloading cli $arch"\n\t"${(0,o.getProgressOutputString)(b,1)}"\n\t$an = GetArtifactName\n\t$splat = @{\n\t\tUri="https://update.code.visualstudio.com/commit:$commitId/$an/$quality"\n\t\tTimeoutSec=20\n\t\tOutFile="vscode-cli-$commitId.zip"\n\t\tUseBasicParsing=$True\n\t}\n\n\t# Enable TLS1.2\n\t[Net.ServicePointManager]::SecurityProtocol = 'Tls12'\n\tirm @splat\n\n\t$s.Stop()\n\t$global:totalDownloadTime = $s.ElapsedMilliseconds\n}\n\n\nfunction InstallCli {\n\t$global:gotUnpackResult='${c.InstallUnpackCode.Success}'\n\t$s = getStopwatch\n\n\ttry {\n\t\t# Unzip to tmp then move to destination to avoid "path too long"\n\t\t$randomDirName = [System.IO.Path]::GetRandomFileName()\n\t\t$tmpDest = "$env:TEMP\\$randomDirName"\n\t\t"Expanding cli into $tmpDest"\n\t\t"${(0,o.getProgressOutputString)(b,2)}"\n\t\tExpand-Archive "vscode-cli-$commitId.zip" -DestinationPath "$tmpDest"\n\t\tcp "$tmpDest\\$cliNameInArchve" -Destination $cliPath\n\t\tdel -Recurse $tmpDest\n\t\tdel "vscode-cli-$commitId.zip"\n\t\t$s.Stop()\n\t\t$global:totalInstallTime = $s.ElapsedMilliseconds\n\t} catch {\n\t\t$global:gotUnpackResult='${c.InstallUnpackCode.Error}'\n\t\t"Failed to unzip cli. - $($_.ToString())"\n\t\tDoLocalDownloadOrFail ${d.UnifiedStatusCode.UnpackFailed}\n\t\tInstallCli\n\t}\n\n\tif(!(Test-Path "$cliPath")) {\n\t\t$global:gotUnpackResult='${c.InstallUnpackCode.MissingFiles}'\n\t\t"Downloaded server is incomplete."\n\t\tDoLocalDownloadOrFail ${d.UnifiedStatusCode.UnpackFailed}\n\t\tInstallCli\n\t}\n}\n\nfunction StartCli {\n\t$s = getStopwatch\n\tif(Test-Path $log) {\n\t\tdel $log\n\t}\n\t$escapedCliFile=$cliPath -replace ' ', '\` '\n\t$args = "command-shell --cli-data-dir '$cliDataDir' --parent-process-id $sshdPID --on-host ${g} ${y?`--on-port=${y.start} --on-port=${y.end}`:"--on-port"} --require-token ${m} *> '$log'"\n\t$splat = @{\n\t\tFilePath = "powershell.exe"\n\t\tWindowStyle = "hidden"\n\t\tArgumentList = @(\n\t\t\t"-ExecutionPolicy", "Unrestricted", "-NoLogo", "-NoProfile", "-NonInteractive", "-c", "$escapedCliFile $args"\n\t\t)\n\t\tPassThru = $True\n\t}\n\t"Starting cli: & '$cliPath' $args"\n\t$global:launchedCliPid = (start @splat).ID\n\t$s.Stop()\n\t$global:totalServerStartTime = $s.ElapsedMilliseconds\n}\n\nfunction DoLocalDownload {\n\t$global:didLocal=$True\n\t"Trigger local server download"\n\t$an = GetArtifactName\n\t"${(0,t.getDownloadServerStartTrigger)(b)}"\n\t"artifact==$an=="\n\t"destFolder==$serverRoot=="\n\t"destFolder2==/vscode-cli-$commitId.zip=="\n\t"${(0,t.getDownloadServerEndTrigger)(b)}"\n\n\t"Waiting for client to transfer server archive..."\n\t"Waiting for $serverRoot\\vscode-cli-$commitId.zip.done and vscode-cli-$commitId.zip to exist"\n\n\twhile($True) {\n\t\tif(Test-Path "$serverRoot\\vscode-cli-$commitId.zip.done") {\n\t\t\tif(!(Test-Path "$serverRoot\\vscode-cli-$commitId.zip")) {\n\t\t\t\t"Transfer failed"\n\t\t\t\tq ${d.UnifiedStatusCode.ServerTransferFailed}\n\t\t\t}\n\n\t\t\t"Transfer complete"\n\t\t\tdel $serverRoot\\vscode-cli-$commitId.zip.done\n\t\t\tbreak\n\t\t} else {\n\t\t\tStart-Sleep -Seconds 3\n\t\t\texitIfNeeded\n\t\t}\n\t}\n}\n\nfunction DoLocalDownloadOrFail($code) {\n\tif ($didLocal) {\n\t\t"Already attempted local download, failing"\n\t\tq $code\n\t} elseif($allowLocalDownload) {\n\t\tDoLocalDownload\n\t} else {\n\t\tq $code\n\t}\n}\n\nfunction printResult() {\n\t"\${uuid}: start"\n\t${f.map((n=>`"${n}==$env:${n}=="`)).join("\n")}\n\tprintDetails\n\t"\${uuid}: end"\n}\n\nfunction main() {\n\t$global:sshdPID = getSshdParentPid\n\n\tif(!(Test-Path $serverRoot)) {\n\t\t$m = "Could not create CLI directory"\n\t\ttry {\n\t\t\t$null = ni -it d $serverRoot -f -ea si\n\t\t} catch {\n\t\t\t"$m. - $($_.ToString())"\n\t\t\treturn\n\t\t}\n\n\t\tif(!(Test-Path $serverRoot)) {\n\t\t\t"$m"\n\t\t\treturn\n\t\t}\n\t}\n\n\tcd $serverRoot\n\n\ttry {\n\t\t"Looking for existing CLI in $serverRoot"\n\t\tif(Test-Path "$cliPath") {\n\t\t\t"Found installed CLI"\n\t\t} else {\n\t\t\tif ($forceLocalDownload) {\n\t\t\t\tDoLocalDownload\n\t\t\t} else {\n\t\t\t\ttry { DownloadCli } catch {\n\t\t\t\t\t"Download failed. - $($_.ToString())"\n\t\t\t\t\tDoLocalDownloadOrFail ${d.UnifiedStatusCode.ServerDownloadFailed}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tInstallCli\n\t\t}\n\n\t\tStartCli\n\n\t\t$listeningP = @{\n\t\t\tPath = $log\n\t\t\tPattern = "Listening on .*?:([0-9]+)$"\n\t\t}\n\n\t\t$timeoutDate = (Get-Date).AddSeconds(4)\n\t\t$serverLogMsg = "Server did not start successfully. Full server log at $log >>>"\n\t\twhile ((Get-Date) -lt $timeoutDate) {\n\t\t\tif(Test-Path $log) {\n\t\t\t\t$listeningMatch = (sls @listeningP).Matches.Groups\n\t\t\t\tif($listeningMatch) {\n\t\t\t\t\t$global:port = $listeningMatch[1].Value\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t\tsleep -Milliseconds 30\n\t\t}\n\n\t\tif (!$port) {\n\t\t\t$serverLogMsg\n\t\t\tcat $log\n\t\t\t"<<< End of server log"\n\t\t\tq ${d.UnifiedStatusCode.ServerFailedToStart}\n\t\t}\n\t} catch {\n\t\t"Server failed to start. - $($_.ToString())"\n\t\t"$($_.ScriptStackTrace)"\n\t}\n\n\t# Get windows version\n\ttry {\n\t\t$global:winVersion = (gcim Win32_OperatingSystem).Version\n\t} catch {\n\t\t"Failed to find Windows version - $($_.ToString())"\n\t\t$global:winVersion = "unknown"\n\t}\n\n\tprintResult\n\n\t#\n\t# Start infinite loop, quit when orphaned (ssh connection closed)\n\t#\n\n\t"$pid, watching $sshdPID"\n\twhile ($True) {\n\t\texitIfNeeded\n\t\tsleep 30\n\t}\n}\n\n"${(0,u.getResumeLogMarker)(n)}"\nmain\n\n`;return(0,r.minifyPwsh)(S,["getSshdParentPid","exitIfNeeded","cliNameInArchiveWithoutExe","cliNameInArchve","cliNameOnDisk","cliPath","DownloadCli","InstallCli","DoLocalDownload","DoLocalDownloadOrFail","allowLocalDownload","forceLocalDownload","getStopwatch","totalDownloadTime","totalInstallTime","totalExtInstallTime","totalServerStartTime","commitId","serverRoot","quality","telemetryFlag","didLocal","gotUnpackResult","currentPID","parentPID","launchedCliPid","archPart","cliArtifactName","randomDirName","tmpDest","escapedServerDir","timeoutDate","listeningP","listeningMatch","winVersion","StartCli","printDetails","serverLogMsg"])},l.getSshdParentPid="function getSshdParentPid {\n\t$currentPID = $PID\n\twhile ($True) {\n\t\t$parentPID = (gcim win32_process | ? processid -eq $currentPID).parentprocessid\n\t\tif (!$parentPID) {\n\t\t\t\"no sshd parent proc\"\n\t\t\texit 0\n\t\t}\n\n\t\tif ((gps -Id $parentPID).Name -eq 'sshd') {\n\t\t\treturn $parentPID\n\t\t}\n\n\t\t$currentPID = $parentPID\n\t}\n}"},8861:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.execServerInstallScript=l.serverInstallScript=l.webUITokenParameter=l.ignoreWgetConfigFlag=l.ignoreCurlConfigFlag=l.loadInstallerScript=l.INSTALL_SCRIPT_FILE_MARKER_REGEX=void 0;const t=e(6928),u=e(3411),r=e(1943),o=e(1357),i=e(2593),s=e(6444),a=e(2232),c=e(712),d=e(8652),h=e(4788),f=e(2869);async function p(n){const l=t.resolve(__dirname,"install-script","scripts",n);let e=await(0,r.readFile)(l);if(!e||!e.length)throw new Error(`Could not load script from '${l}'`);return e.toString()}function m(n){return"off"!==n?"--tries=1":""}function g(){return(0,u.useCurlAndWgetConfigurationFiles)()?" ":" --disable "}function y(){return(0,u.useCurlAndWgetConfigurationFiles)()?" ":" --no-config "}l.INSTALL_SCRIPT_FILE_MARKER_REGEX=/#<<([\w.]+)>>/g,l.loadInstallerScript=p,l.ignoreCurlConfigFlag=g,l.ignoreWgetConfigFlag=y,l.webUITokenParameter="tkn",l.serverInstallScript=function({uuid:n,quality:e,commit:t,telemetryLevel:r,extensionIds:p,basePath:v,serverDataFolderName:w,serverApplicationName:b,preventExit:S,enableWebAccess:C,lockfilesInTmp:D,useFlock:E,printVars:_,localDownload:k,portRange:x,bindHost:T,serverListenOnSocket:P,httpProxy:I,httpsProxy:A}){const O=p?.map(i.sanitizeExtensionId).map((n=>`--install-extension "${n}"`)).join(" ")??"",R=v?`'${v.replace(/'/g,"")}'`:"$HOME";return`\necho "${(0,a.getScriptStartMarker)(n)}"\n\n#\n# Setup\n#\nVSC_TMP="\${XDG_RUNTIME_DIR:-\`echo /tmp\`}"\nCOMMIT_ID="${t}"\nSERVER_APP_NAME="${b}"\nEXTENSIONS="${O}"\nTELEMETRY="--telemetry-level ${r}"\nVSCODE_AGENT_FOLDER=${R}/${w}\nALLOW_CLIENT_DOWNLOAD="${"off"!==k?1:0}"\nFORCE_CLIENT_DOWNLOAD="${"always"===k?1:0}"\nnow=\`date +%s\`\nVERBOSE="${(0,u.logLevel)()===u.LogLevel.trace?1:0}"\n${I?`[ -n "\${http_proxy}" ] || export http_proxy="${I}"`:""}\n${A?`[ -n "\${https_proxy}" ] || export https_proxy="${A}"`:""}\n\nPORT_FLAG=${P?"":x?`--port=${x.start}-${x.end}`:"--port=0"}\n\nSERVER_LISTEN_FLAG=${P?'--socket-path="$VSC_TMP/vscode-ssh-remote-server-sock-$now"':""}\nUNPACK_RESULT=\nDID_LOCAL_DOWNLOAD=0\nDOWNLOAD_TIME=\nINSTALL_TIME=\nEXT_INSTALL_TIME=\nSERVER_START_TIME=\nCONNECTION_TOKEN=\n\nVSCH_DIR="$VSCODE_AGENT_FOLDER/bin/$COMMIT_ID"\nVSCH_SERVER_SCRIPT="$VSCH_DIR/bin/$SERVER_APP_NAME"\nVSCH_SERVER_PREREQ_SCRIPT="$VSCH_DIR/bin/helpers/check-requirements.sh"\nVSCH_LOGFILE="$VSCODE_AGENT_FOLDER/.$COMMIT_ID.log"\nVSCH_PIDFILE="$VSCODE_AGENT_FOLDER/.$COMMIT_ID.pid"\nVSCH_TOKENFILE="$VSCODE_AGENT_FOLDER/.$COMMIT_ID.token"\n\nfail_with_exitcode() {\n\techo "${n}: start"\n\techo "exitCode==$1=="\n\techo_common_results\n\techo "${n}: end"\n\texit 0\n}\n\necho_common_results() {\n\techo "listeningOn==$LISTENING_ON=="\n\techo "osReleaseId==$OSRELEASEID=="\n\techo "arch==$ARCH=="\n\techo "vscodeArch==$VSCODE_ARCH=="\n\techo "bitness==$BITNESS=="\n\techo "tmpDir==$VSC_TMP=="\n\techo "platform==$PLATFORM=="\n\techo "unpackResult==$UNPACK_RESULT=="\n\techo "didLocalDownload==$DID_LOCAL_DOWNLOAD=="\n\techo "downloadTime==$DOWNLOAD_TIME=="\n\techo "installTime==$INSTALL_TIME=="\n\techo "extInstallTime==$EXT_INSTALL_TIME=="\n\techo "serverStartTime==$SERVER_START_TIME=="\n}\n\n\nmillis() {\n\tif [[ $PLATFORM == linux ]]; then\n\t\techo $(($(date +%s%N)/1000000))\n\telse\n\t\t# Can't get actual millis on mac\n\t\techo $(($(date +%s)*1000))\n\tfi\n}\n\nelapsed() {\n\techo $(($(millis) - $1))\n}\n\ndo_create_install_dir() {\n\tif [[ ! -d "$VSCH_DIR" ]]; then\n\t\tmkdir -p "$VSCH_DIR"\n\n\t\tif (( $? > 0 ))\n\t\tthen\n\t\t\techo "Creating the server install dir failed..."\n\t\t\tfail_with_exitcode ${f.UnifiedStatusCode.CreateInstallDirFailed}\n\t\tfi\n\tfi\n}\ndo_create_install_dir\n\nprintenv_indent() {\n\tif [[ $VERBOSE == "1" ]]; then\n\t\techo "printenv:"\n\t\tprintenv | sed 's/^/    /'\n\tfi\n}\n\n\n\n#\n# Get OS name\n#\nOSRELEASEID=\`cat /etc/os-release 2>/dev/null | grep -a -E '^ID=' | sed 's/^[Ii][Dd]=//g' | sed 's/"//g'\`\nif [[ -z $OSRELEASEID ]]\nthen\n\tOSRELEASEID=\`cat /usr/lib/os-release 2>/dev/null | grep -a -E '^ID=' | sed 's/^[Ii][Dd]=//g' | sed 's/"//g'\`\n\tif [[ -z $OSRELEASEID ]]\n\tthen\n\t\tOSRELEASEID=\`uname -s\`\n\tfi\nfi\n\n\n#\n# Get host platform/architecture\n#\nUNAME=$(uname -s)\ncase $UNAME in\n\tLinux) PLATFORM=linux;;\n\tDarwin) PLATFORM=macOS;;\n\t*)\n\t\techo "Unsupported platform: $UNAME"\n\t\tfail_with_exitcode ${f.UnifiedStatusCode.UnsupportedPlatform}\n\t\t;;\nesac\n\nBITNESS=$(getconf LONG_BIT)\nARCH=$(uname -m)\ncase $ARCH in\n\tx86_64) VSCODE_ARCH="x64";;\n\tarmv7l | armv8l)\n\t\tVSCODE_ARCH="armhf"\n\t\t;;\n\tarm64 | aarch64)\n\t\tif [[ $BITNESS == 32 ]]; then\n\t\t\t# Can have 32-bit userland on 64-bit kernel\n\t\t\tVSCODE_ARCH="armhf"\n\t\telse\n\t\t\tVSCODE_ARCH="arm64"\n\t\tfi\n\t\t;;\n\t*)\n\t\tOSRELEASE=$(uname -r)\n\t\tcase $OSRELEASE in\n\t\t\t*x86_64*) VSCODE_ARCH="x64";;\n\t\t\t*)\n\t\t\t\techo "Unsupported architecture: $ARCH"\n\t\t\t\tfail_with_exitcode ${f.UnifiedStatusCode.UnsupportedArch}\n\t\t\t;;\n\t\tesac\n\t\t;;\nesac\n\nif [[ $PLATFORM == linux ]]; then\n\tPLATFORM_DOWNLOAD_PATH=server-linux-$VSCODE_ARCH\nelif [[ $VSCODE_ARCH == "arm64" ]]; then\n\tPLATFORM_DOWNLOAD_PATH=server-darwin-arm64\nelse\n\tPLATFORM_DOWNLOAD_PATH=server-darwin\nfi\n\n#\n# Acquire install lock\n#\nMAIN_LOCKFD=99\nCLEANUP_LOCKFD=98\n${function(n,l){return`\n\n\tuse_flock=${l?"1":"0"}\n\tif [[ $PLATFORM == "macOS" ]]; then\n\t\tuse_flock=0\n\tfi\n\n\t## Copyright (C) 2009 Przemyslaw Pawelczyk <przemoc@gmail.com>\n\t## This script is licensed under the terms of the MIT license.\n\t## https://opensource.org/licenses/MIT\n\n\tget_lockfile() {\n\t\tlockfiles_in_tmp=${n?"1":"0"}\n\t\tlockfile_name=vscode-remote-lock.$USER.$1\n\t\tif [[ $lockfiles_in_tmp == "1" ]]; then\n\t\t\techo "$VSC_TMP/$lockfile_name"\n\t\telse\n\t\t\techo "$VSCODE_AGENT_FOLDER/bin/$1/$lockfile_name"\n\t\tfi\n\t}\n\n\t# PRIVATE\n\t_lock() { flock -$1 $2; }\n\n\t_no_more_locking() {\n\t\tif [[ $use_flock == "1" ]]; then\n\t\t\t_lock u $2\n\t\t\t_lock xn $2 && rm -f $(get_lockfile $1)\n\t\telse\n\t\t\tlockfile_name=$(get_lockfile $1)\n\t\t\trm -f "$lockfile_name"\n\t\t\trm -f "$lockfile_name.target"\n\t\tfi\n\t}\n\n\t# PUBLIC - all take lock FD\n\n\tsetup_locking() {\n\t\tif [[ $use_flock == "1" ]]; then\n\t\t\teval "exec $2>\\"$(get_lockfile $1)\\"";\n\t\t\ttrap "_no_more_locking $1 $2" EXIT\n\t\tfi\n\t}\n\n\tsetup_lock_cleanup()  {\n\t\tif [[ $use_flock == "0" ]]; then\n\t\t\ttrap "_no_more_locking $1" EXIT\n\t\tfi\n\t}\n\n\t# obtain an exclusive lock immediately or fail\n\texlock_now() {\n\t\tif [[ $use_flock == "1" ]]; then\n\t\t\t_lock xn $1\n\t\telse\n\t\t\tlockfile_name=$(get_lockfile $2)\n\t\t\ttouch "$lockfile_name.target"\n\t\t\techo \\\\ln \\"$lockfile_name.target\\" \\"$lockfile_name\\"\n\t\t\t\\ln "$lockfile_name.target" "$lockfile_name"\n\t\tfi\n\t}\n\n\t# drop a lock\n\tunlock() {\n\t\tif [[ $use_flock == "1" ]]; then\n\t\t\t_lock u $1\n\t\telse\n\t\t\t_no_more_locking $2\n\t\tfi\n\t}\n`}(D,E)}\nsetup_locking $COMMIT_ID $MAIN_LOCKFD\n\necho "Acquiring lock on \`get_lockfile $COMMIT_ID\`"\nexlock_now $MAIN_LOCKFD $COMMIT_ID\nif (( $? > 0 ))\nthen\n\techo "Installation already in progress..."\n\techo "If you continue to see this message, you can try toggling the remote.SSH.useFlock setting"\n\tfail_with_exitcode ${f.UnifiedStatusCode.AlreadyInProgress}\nfi\n\nsetup_lock_cleanup $COMMIT_ID $MAIN_LOCKFD\n\n#\n# Delete old servers if needed\n#\n\nTO_DELETE=$(ls -1 -t "$VSCODE_AGENT_FOLDER/bin" | tail -n +6)\nfor COMMIT_TO_DELETE in $TO_DELETE; do\n\techo "Found old VS Code install $COMMIT_TO_DELETE, attempting to clean up"\n\n\tsetup_locking $COMMIT_TO_DELETE $CLEANUP_LOCKFD\n\texlock_now $CLEANUP_LOCKFD $COMMIT_TO_DELETE\n\tif (( $? == 0 )); then\n\t\tsetup_lock_cleanup $COMMIT_TO_DELETE $CLEANUP_LOCKFD\n\t\tRUNNING="\`ps ax | grep $COMMIT_TO_DELETE | grep -v grep | wc -l | tr -d '[:space:]'\`"\n\t\tif [[ $RUNNING == 0 ]]; then\n\t\t\techo "Deleting old install from $VSCODE_AGENT_FOLDER/bin/$COMMIT_TO_DELETE"\n\t\t\trm -rf "$VSCODE_AGENT_FOLDER/bin/$COMMIT_TO_DELETE"\n\n\t\t\techo "Deleting old log file from $VSCODE_AGENT_FOLDER/.$COMMIT_TO_DELETE.log"\n\t\t\trm "$VSCODE_AGENT_FOLDER/.$COMMIT_TO_DELETE.log"\n\t\t\tif [[ -f "$VSCODE_AGENT_FOLDER/.$COMMIT_TO_DELETE.pid" ]]; then\n\t\t\t\trm "$VSCODE_AGENT_FOLDER/.$COMMIT_TO_DELETE.pid"\n\t\t\tfi\n\t\t\tif [[ -f "$VSCODE_AGENT_FOLDER/.$COMMIT_TO_DELETE.token" ]]; then\n\t\t\t\trm "$VSCODE_AGENT_FOLDER/.$COMMIT_TO_DELETE.token"\n\t\t\tfi\n\t\telse\n\t\t\techo "Install still has running processes, not deleting: $COMMIT_TO_DELETE"\n\t\tfi\n\telse\n\t\techo "Failed to acquire lock for install, not deleting: $COMMIT_TO_DELETE"\n\tfi\ndone\n\ndo_client_download() {\n\tDID_LOCAL_DOWNLOAD=1\n\techo "Trigger local server download"\n\techo ${(0,h.getDownloadServerStartTrigger)(n)}\n\techo artifact==$PLATFORM_DOWNLOAD_PATH==\n\techo destFolder==$VSCODE_AGENT_FOLDER/bin/==\n\techo destFolder2==$COMMIT_ID/vscode-server.tar.gz==\n\techo ${(0,h.getDownloadServerEndTrigger)(n)}\n\techo "Waiting for client to transfer server archive..."\n\techo "Waiting for $VSCH_DIR/vscode-server.tar.gz.done and vscode-server.tar.gz to exist"\n\n\twhile true; do\n\t\tif [[ -f "$VSCH_DIR/vscode-server.tar.gz.done" ]]; then\n\t\t\tif [[ ! -f "$VSCH_DIR/vscode-server.tar.gz" ]]; then\n\t\t\t\techo "Found flag but not server tar - server transfer failed"\n\t\t\t\tfail_with_exitcode ${f.UnifiedStatusCode.ServerTransferFailed}\n\t\t\tfi\n\n\t\t\techo "Found flag and server on host"\n\t\t\trm "$VSCH_DIR/vscode-server.tar.gz.done"\n\t\t\tbreak\n\t\telse\n\t\t\techo -n ' '\n\t\t\tsleep 3\n\t\tfi\n\tdone\n}\n\ndo_client_download_or_fail() {\n\tif [[ $DID_LOCAL_DOWNLOAD == "1" ]]; then\n\t\techo "Already attempted local download, failing"\n\t\tfail_with_exitcode $1\n\telif [[ $ALLOW_CLIENT_DOWNLOAD == "1" ]]; then\n\t\tdo_client_download\n\t\tLOCAL_DOWNLOAD_RESULT=success\n\telse\n\t\tfail_with_exitcode $1\n\tfi\n}\n\ndo_host_download() {\n\tstart=$(millis)\n\techo '${(0,d.getProgressOutputString)(n,1)}'\n\n\tDOWNLOAD_URL=https://update.code.visualstudio.com/commit:$COMMIT_ID/$PLATFORM_DOWNLOAD_PATH${C?"-web":""}/${e}\n\n\twget --version &> /dev/null\n\tif (( $? == 0 ))\n\tthen\n\t\techo "Downloading with wget"\n\t\tWGET_ERRORS=$(2>&1 wget${y()}${m(k)} --connect-timeout=7 --dns-timeout=7 -nv -O vscode-server.tar.gz $DOWNLOAD_URL)\n\t\tif (( $? != 0 ))\n\t\tthen\n\t\t\techo "wget download failed"\n\t\t\techo $WGET_ERRORS\n\t\t\tprintenv_indent\n\n\t\t\tdo_client_download_or_fail ${f.UnifiedStatusCode.ServerDownloadFailed}\n\t\telse\n\t\t\techo "Download complete"\n\t\t\tDOWNLOAD_TIME=$(elapsed $start)\n\t\tfi\n\telse\n\t\tcurl --version &> /dev/null\n\t\tif (( $? == 0 ))\n\t\tthen\n\t\t\techo "Downloading with curl"\n\t\t\tCURL_OUTPUT=$(curl${g()}--connect-timeout 7 -L $DOWNLOAD_URL --output vscode-server.tar.gz -w "%{http_code}")\n\t\t\tif [[ ($? != 0) || ($CURL_OUTPUT != 2??) ]]\n\t\t\tthen\n\t\t\t\techo "curl download failed"\n\t\t\t\techo $CURL_OUTPUT\n\t\t\t\tprintenv_indent\n\n\t\t\t\tdo_client_download_or_fail ${f.UnifiedStatusCode.ServerDownloadFailed}\n\t\t\telse\n\t\t\t\techo "Download complete"\n\t\t\t\tDOWNLOAD_TIME=$(elapsed $start)\n\t\t\tfi\n\t\telse\n\t\t\tprintenv_indent\n\t\t\techo "Neither wget nor curl is installed"\n\n\t\t\tdo_client_download_or_fail ${f.UnifiedStatusCode.NoDownloaderAvailable}\n\t\tfi\n\tfi\n}\n\ndo_install() {\n\tstart=$(millis)\n\techo '${(0,d.getProgressOutputString)(n,2)}'\n\tUNPACK_RESULT=${c.InstallUnpackCode.Success}\n\techo 'tar --version:'\n\ttar --version\n\ttar -xf vscode-server.tar.gz --no-same-owner\n\tTAR_EXIT=$?\n\tINSTALL_TIME=$(elapsed $start)\n\n\tif (( $TAR_EXIT > 0 ))\n\tthen\n\t\techo "ERROR: tar exited with non-0 exit code: $?"\n\t\tUNPACK_RESULT=${c.InstallUnpackCode.Error}\n\t\tdo_client_download_or_fail ${f.UnifiedStatusCode.UnpackFailed}\n\t\tdo_install\n\t\treturn\n\tfi\n\n\tmv vscode-server*/* .\n\n\t# cheap sanity check\n\tif [[ ! -f "$VSCH_DIR/node" || ! -f "$VSCH_SERVER_SCRIPT" || ! -f "$VSCH_SERVER_PREREQ_SCRIPT" ]]\n\tthen\n\t\tUNPACK_RESULT=${c.InstallUnpackCode.MissingFiles}\n\t\techo "ERROR: $VSCH_DIR/node or $VSCH_SERVER_SCRIPT or $VSCH_SERVER_PREREQ_SCRIPT don't exist"\n\t\tdo_client_download_or_fail ${f.UnifiedStatusCode.UnpackFailed}\n\t\tdo_install\n\t\treturn\n\tfi\n\n\t# Delete the leftover folder which might have -web prefix, and the .tar.gz\n\trm -rf vscode-server*\n}\n\ndo_extension_install() {\n\t# install extensions\n\tif [[ ! -z $EXTENSIONS ]]\n\tthen\n\t\techo "Installing extensions..."\n\t\tstart=$(millis)\n\t\t"$VSCH_SERVER_SCRIPT" $TELEMETRY $EXTENSIONS\n\t\tEXT_INSTALL_TIME=$(elapsed $start)\n\tfi\n}\n\n#\n# Install if needed\n#\nif [[ ! -f "$VSCH_SERVER_SCRIPT" ]]\nthen\n\techo "Installing to $VSCH_DIR..."\n\tSTASHED_WORKING_DIR="\`pwd\`"\n\tcd "$VSCH_DIR"\n\n\tif [[ $FORCE_CLIENT_DOWNLOAD == "1" ]]; then\n\t\tdo_client_download\n\telse\n\t\tdo_host_download\n\tfi\n\n\tdo_install\n\n\t#\n\t# Verify linux prereqs\n\t#\n\tif [[ $PLATFORM == linux ]]; then\n\t\tcd "$STASHED_WORKING_DIR"\n\t\t"$VSCH_SERVER_PREREQ_SCRIPT"\n\t\tPREREQ_EXIT_CODE=$?\n\t\tif (( $PREREQ_EXIT_CODE == 99 )); then\n\t\t\tfail_with_exitcode ${f.UnifiedStatusCode.LinuxPrereqs}\n\t\telif (( $PREREQ_EXIT_CODE == 100 )); then\n\t\t\tif [[ $FORCE_CLIENT_DOWNLOAD != "1" ]]; then\n\t\t\t\tPLATFORM_DOWNLOAD_PATH=server-linux-legacy-$VSCODE_ARCH\n\t\t\t\trm -rf "$VSCH_DIR"\n\t\t\t\tdo_create_install_dir\n\t\t\t\tcd "$VSCH_DIR"\n\t\t\t\tdo_host_download\n\t\t\t\tdo_install\n\t\t\tfi\n\t\tfi\n\tfi\n\tcd "$STASHED_WORKING_DIR"\nelse\n\techo "Found existing installation at $VSCH_DIR..."\nfi\n\n\n#\n# Generate a new connection token\n#\nwrite_connection_token() {\n\trm "$VSCH_TOKENFILE"\n\tCONNECTION_TOKEN="${(0,s.generateUuid)()}"\n\ttouch "$VSCH_TOKENFILE"\n\tchmod 0700 "$VSCH_TOKENFILE"\n\techo $CONNECTION_TOKEN > "$VSCH_TOKENFILE"\n}\n\n#\n# Start the server\n#\nstart_server() {\n\techo "Starting VS Code Server... \\"$VSCH_SERVER_SCRIPT\\" --start-server --server-data-dir \\"$VSCODE_AGENT_FOLDER\\" --host=${T} --accept-server-license-terms --enable-remote-auto-shutdown $PORT_FLAG $TELEMETRY $SERVER_LISTEN_FLAG $EXTENSIONS &> \\"$VSCH_LOGFILE\\" < /dev/null"\n\techo "The VS Code Server log file is $VSCH_LOGFILE"\n\tprintenv_indent\n\tstart=$(millis)\n\twrite_connection_token\n\tif [[ -f $VSCH_LOGFILE ]]; then\n\t\techo "Removing old logfile at $VSCH_LOGFILE"\n\t\trm "$VSCH_LOGFILE" # See #6265\n\tfi\n\t"$VSCH_SERVER_SCRIPT" --start-server --server-data-dir "$VSCODE_AGENT_FOLDER" --host=${T} --accept-server-license-terms --enable-remote-auto-shutdown $PORT_FLAG $TELEMETRY $SERVER_LISTEN_FLAG $EXTENSIONS --connection-token-file "$VSCH_TOKENFILE" &> "$VSCH_LOGFILE" < /dev/null &\n\techo $! > "$VSCH_PIDFILE"\n\techo "Spawned remote server: $!"\n\n\tstopTime=$((SECONDS+15))\n\n\twhile (($SECONDS < $stopTime))\n\tdo\n\t\tLISTENING_ON=\`cat "$VSCH_LOGFILE" | grep -a -E 'Extension host agent listening on .+' | grep -v grep | sed 's/Extension host agent listening on //'\`\n\t\tif [[ $LISTENING_ON != '' ]]\n\t\tthen\n\t\t\tbreak\n\t\tfi\n\n\t\techo "Waiting for server log..."\n\t\tsleep .03\n\tdone\n\n\tSERVER_START_TIME=$(elapsed $start)\n}\n\necho "Checking $VSCH_LOGFILE and $VSCH_PIDFILE for a running server"\nif [[ -f "$VSCH_PIDFILE" ]]; then\n\tSERVER_PID=\`cat "$VSCH_PIDFILE"\`\n\techo "Looking for server with pid: $SERVER_PID"\n\tALL_PROCS=\`ps ax | grep "^\\s*$SERVER_PID\\s"\`\nelse\n\tALL_PROCS=\`ps ax\`\nfi\n\nRUNNING="\`echo $ALL_PROCS | grep "$VSCH_SERVER_SCRIPT" | grep -v grep | wc -l | tr -d '[:space:]'\`"\nif [[ $RUNNING == 0 ]]; then\n\tstart_server\nelif [[ ! -f "$VSCH_LOGFILE" ]]; then\n\techo "WARNING: VS Code Server is running but its logfile is missing. Don't delete the VS Code Server manually, run the command 'Uninstall VS Code Server'."\n\tstart_server\nelse\n\techo "Found running server..."\n\tdo_extension_install\n\tif [[ -f "$VSCH_TOKENFILE" ]]; then\n\t\tCONNECTION_TOKEN=\`cat "$VSCH_TOKENFILE"\`\n\tfi\nfi\n\necho " "\n${o.serverLicense.map((n=>`echo "${n}"`)).join("\n")}\necho " "\n\nLISTENING_ON=\`cat "$VSCH_LOGFILE" | grep -a -E 'Extension host agent listening on .+' | grep -v grep | sed 's/Extension host agent listening on //'\`\nWEBUITOKEN=\`cat "$VSCH_LOGFILE" | grep -a -E 'Web UI available at' | grep -o -E '${l.webUITokenParameter}=[0-9a-f-]+' | grep -o -E '[0-9a-f-]+'\`\nif [[ -z $LISTENING_ON ]]\nthen\n\techo "Server did not start successfully. Full server log at $VSCH_LOGFILE >>>"\n\tcat "$VSCH_LOGFILE"\n\techo "<<< End of server log"\n\tfail_with_exitcode ${f.UnifiedStatusCode.ServerFailedToStart}\nfi\n\n#\n# If the server was already running, ensure that it won't shut down in the near future\n#\nif [[ $RUNNING != 0 ]]; then\n\t# In case the server is close to timing out and shutting down, ask it to delay shutdown\n\n\twget --version &> /dev/null\n\tif [[ $? == 0 && $LISTENING_ON =~ (^[[:digit:]]+$) ]]\n\tthen\n\t\techo "Checking server status on port $LISTENING_ON with wget"\n\t\tWGET_OUT=$(wget${y()}--no-proxy -nv -O - http://${T}:$LISTENING_ON/delay-shutdown 2>&1)\n\t\tif [[ $? != 0 ]]; then\n\t\t\techo $WGET_OUT\n\t\t\tfail_with_exitcode ${f.UnifiedStatusCode.StatusCheckFailed}\n\t\tfi\n\telse\n\t\tcurl --version &> /dev/null\n\t\tif (( $? == 0 ))\n\t\tthen\n\t\t\tif [[ $LISTENING_ON =~ (^[[:digit:]]+$) ]]\n\t\t\tthen\n\t\t\t\techo "Checking server status on port $LISTENING_ON with curl"\n\t\t\t\tCURL_OUTPUT=$(curl${g()}--noproxy ${T} -s http://${T}:$LISTENING_ON/delay-shutdown -w " %{http_code}")\n\t\t\telse\n\t\t\t\techo "Checking server status on socket $LISTENING_ON with curl"\n\t\t\t\tCURL_OUTPUT=$(curl${g()}--noproxy ${T} -s --unix-socket $LISTENING_ON http://${T}/delay-shutdown -w " %{http_code}")\n\t\t\tfi\n\n\t\t\tif [[ ($? != 0) || ($CURL_OUTPUT != "OK 200") ]]; then\n\t\t\t\techo $CURL_OUTPUT\n\t\t\t\tfail_with_exitcode ${f.UnifiedStatusCode.StatusCheckFailed}\n\t\t\tfi\n\t\telse\n\t\t\techo "Neither wget nor curl is installed"\n\t\t\tfail_with_exitcode ${f.UnifiedStatusCode.NoDownloaderAvailable}\n\t\tfi\n\tfi\nfi\n\n\n# What we echo below cannot be wider than 80 characters\necho "${n}: start"\n${_.map((n=>`echo ${n}==$${n}==`)).join("\n")}\necho "webUiAccessToken==$WEBUITOKEN=="\necho_common_results\necho "connectionToken==$CONNECTION_TOKEN=="\necho "${n}: end"\n\nunlock $MAIN_LOCKFD $COMMIT_ID\n\n${S?"while true; do sleep 180; echo -n ' '; done":""}\n`},l.execServerInstallScript=async function(n,e){const{basePath:t,portRange:r,serverListenOnSocket:o,bindHost:i,httpProxy:s,httpsProxy:v}=e,w="linux-exec-server-installer.sh",b=await p(w);if(!b)throw new Error(`Could not find templated script ${w}`);const S=t?`${t.replace(/'/g,"")}`:"$HOME",C=o?"--on-socket":`--on-host=${i} `+(r?`--on-port=${r.start} --on-port=${r.end}`:"--on-port"),D={...Object.fromEntries(Object.entries(f.UnifiedStatusCode).map((([n,l])=>[`ExitCode.${n}`,`${l}`]))),...Object.fromEntries(Object.entries(c.InstallUnpackCode).map((([n,l])=>[`InstallUnpackCode.${n}`,`${l}`]))),uuid:e.uuid,startMarker:(0,a.getScriptStartMarker)(e.uuid),commitId:e.commit,quality:e.quality,token:e.token,vscodeAgentFolder:`${S}/${e.serverDataFolderName}`,allowClientDownload:"off"!==e.localDownload?"1":"0",forceClientDownload:"always"===e.localDownload?"1":"0",cliNameInArchive:"stable"===e.quality?"code":"code-insiders",ignoreWgetConfigFlag:y(),ignoreCurlConfigFlag:g(),wgetTriesSegment:m(e.localDownload),listenArgs:C,printVars:(E=e.printVars,E.map((n=>`echo "${n}==$${n}=="`)).join("\n")),verbose:(0,u.logLevel)()===u.LogLevel.trace?"1":"0",httpProxy:e.httpProxy??"",httpsProxy:e.httpsProxy??"",getDownloadServerStartTrigger:(0,h.getDownloadServerStartTrigger)(e.uuid),getDownloadServerEndTrigger:(0,h.getDownloadServerEndTrigger)(e.uuid),getProgressDownloading:(0,d.getProgressOutputString)(e.uuid,1),getProgressInstalling:(0,d.getProgressOutputString)(e.uuid,2)};var E;return b.replace(l.INSTALL_SCRIPT_FILE_MARKER_REGEX,((n,l)=>D[l]))}},4788:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.downloadAndCopyToHost=l.getScpFlag=l.getDownloadServerEndTrigger=l.getDownloadServerStartTrigger=void 0;const t=e(9896),u=e(6928),r=e(9023),o=e(1398),i=e(712),s=e(4847),a=e(4430),c=e(4407),d=e(1872),h=e(2869),f=r.promisify(t.exists),p=r.promisify(t.rename),m=r.promisify(t.mkdir);l.getDownloadServerStartTrigger=function(n){return`${n}:trigger_server_download`},l.getDownloadServerEndTrigger=function(n){return`${n}:trigger_server_download_end`},l.getScpFlag=async function(n){const l=n+".done";return await f(l)||await r.promisify(t.writeFile)(l,"finished\n"),u.basename(l)},l.downloadAndCopyToHost=async function(n,l,e,t){const r=n.deps;r.logger.debug(`Got request to download on client for ${JSON.stringify(t)}`);const g=function(n,l){return`https://update.code.visualstudio.com/commit:${l.commit}/${n.artifact}/${l.quality}`}(t,await(0,d.getProductInfo)());r.logger.debug(`server download URL: ${g}`);const y=t.destPath.split(/[\\/]/).pop();r.progress.report({message:o.l10n.t("Downloading VS Code Server locally")}),r.timer.mark(5);const v=await async function(n,l,e){try{e.debug("Downloading VS Code server locally...");const t=await o.commands.executeCommand("_workbench.downloadResource",o.Uri.parse(n));if(!t)throw new Error(o.l10n.t("Failed to download VS Code Server locally"));e.debug("Downloaded VS Code server to "+t.fsPath);const r=u.join(u.dirname(t.fsPath),`vscode_server_${Date.now()}`),i=u.join(r,l);return await f(r)||await m(r),await p(t.fsPath,i),e.debug("Renamed VS Code server to "+i),i}catch(n){throw i.SshResolverError.Create(h.UnifiedStatusCode.LocalDownloadFailed,o.l10n.t("Failed to download VS Code Server ({0})",(0,h.ensureError)(n).message))}}(g,y,r.logger);r.timer.mark(6),r.logger.debug(`Preparing to scp to host ${n.host.hostName}${n.host.port?`:${n.host.port}`:""}`);const w=await(0,s.generateScpCommand)(v,n.host,t.destPath,r.logger);r.progress.report({message:o.l10n.t("Copying VS Code Server to host with scp")}),r.logger.debug(`Copying file to remote with ${w}`);try{r.timer.mark(7),await(0,a.runSshTerminalCommandWithLogin)(n,{systemInteractor:l,command:w,cwd:u.dirname(v),nickname:"Copy server to host",revealTerminal:e}),r.timer.mark(8)}catch(n){if(n instanceof c.CanceledError)throw i.SshResolverError.Canceled();throw n}}},1615:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.handleRequestWithInteractors=l.killCurrentRemoteServer=l.tryInstallWithLocalServer=l.resolveWithLocalServer=void 0;const t=e(127),u=e(9278),r=e(857),o=e(6928),i=e(1398),s=e(729),a=e(3411),c=e(712),d=e(4788),h=e(9480),f=e(2584),p=e(3070),m=e(4111),g=e(4430),y=e(4417),v=e(8428),w=e(4407),b=e(221),S=e(1990),C=e(3001),D=e(2593),E=e(1640),_=e(2869);async function k(n,l){const e=n.deps,u=await function(n,l,e){const u=setTimeout((()=>{l.report({message:i.l10n.t("Waiting for other windows to connect")})}),1e3),s=function(n){return o.join(r.tmpdir(),`vscode-remote-ssh-${S.HostInfo.toPathString(n)}-install.lock`)}(n);return e.debug("Acquiring local install lock: "+s),new Promise(((n,l)=>{t.lock(s,{retries:240,retryWait:500,stale:24e4},(e=>{if(clearTimeout(u),e)return l(c.SshResolverError.Create(_.UnifiedStatusCode.LocalLockTimeout,"Timed out while waiting for the local startup lock"));n(s)}))}))}(n.host,e.progress,e.logger);let s;try{s=await l()}finally{await function(n,l){return new Promise((e=>{t.unlock(n,(t=>{t&&l.debug(`Failed to unlock ${n}: ${t.message}`),e()}))}))}(u,e.logger)}return s}function x(n){return`auth-prompt-${n.toString()}`}async function T(n,l){const{logger:e}=n.deps,t=function(n,l){const e=x(n.host),t=l.get(e);function u(){throw new Error("Invalid interwindow prompt data: "+t)}if(t){let l;n.deps.logger.debug("Found password prompt in other window: "+t);try{return l=JSON.parse(t),"string"==typeof l.ipcHandlePath&&l.promptMsg&&"string"==typeof l.promptMsg.message||u(),l}catch(n){u()}}return null}(n,l);if(t)return(0,b.withCancellationTokenSource)((async r=>{(async function(n,l,e){const t=x(n.host);let u;for(;!e.isCancellationRequested&&(u=l.get(t));)await(0,w.sleep)(1e3);u||n.deps.logger.debug("Detected password prompt handled in another window")})(n,l,r.token).then((()=>{r.cancel()}));try{const l=await F(n,t.promptMsg,r.token);l?(e.debug("Sending user response to primary window"),u.connect(t.ipcHandlePath).end(l.userResponse)):e.debug("User canceled prompt")}catch(n){if(!(n instanceof w.CanceledError))throw n}}))}const P=new Map,I=n=>`${n.host}-${n.useExecServer}`;l.resolveWithLocalServer=async function(n,l,e){const{logger:t}=n.deps,u=I(n);P.get(u)?.dispose(),P.delete(u);const r=n.isReconnection?Date.now():void 0;let o=!0;const i=setTimeout((async()=>{for(n.deps.logger.debug("Starting to look for password prompt from another window");o;)await T(n,e),await(0,w.sleep)(1e3)}),1500);return await k(n,(async()=>{o=!1,clearTimeout(i);const s=await(0,h.findRunningServer)(n,r);if(s){const l=!!await(0,y.getConfigurationForHost)(t,n.host);return t.debug("Found running server - short-circuiting install"),P.set(u,new h.LocalServerConnection(s,t)),{retries:1,execServer:s.execServerToken?{token:s.execServerToken}:void 0,installScriptResult:{serverConfiguration:s},usedAuthMethods:new Set,newSocksPort:s.socksPort,remoteInConfigFile:l}}return await(0,m.installServer)(n,E.defaultSystemInteractor,l,e)})).finally((()=>o=!1))};const A=new Map;async function O(n,l,e,t){const r=n.deps,o=await(0,C.getIPCHandlePath)("askpass"),i=x(n.host);let s;return new Promise(((n,a)=>{s=u.createServer((l=>{let e="";l.on("data",(n=>{e+=n.toString()})),l.on("end",(()=>{r.logger.debug("Got password from another window"),n({userResponse:e,usedInteractors:new Set})}))})).listen(o,(()=>{r.logger.debug("Listening for interwindow password on "+o),r.logger.debug("Writing password prompt to globalState"),e.update(i,JSON.stringify({ipcHandlePath:o,promptMsg:l}))})),s.on("error",(n=>{const l="Failed to start interwindow auth prompt server: "+n.message;r.logger.error(l),a(new Error(l))})),t.onCancellationRequested((()=>{a(new w.CanceledError)}))})).finally((()=>{r.logger.debug("Cleaning up other-window auth server"),R(n.host,e),s.close()}))}function R(n,l){const e=x(n);l.update(e,"")}async function F(n,l,e){const{logger:t}=n.deps,u=new Set,r=function(n){const l=n.deps.logger;return[new s.FingerprintInteractor(n,g.showHostKeyConfirmation),new s.PassphraseInteractor(g.showPassphraseInputBox,l),new s.DifferingHostKeyInteractor(g.showDifferingHostConfirmation,l),new s.PasswordInteractor(g.showPasswordInputBox,l),new s.TwoFacInteractor(g.showVerificationCodeInputBox,l),new s.DuoTwoFacInteractor(g.showVerificationCodeInputBox,l),new f.UnrecognizedRequestInteractor]}(n);for(const n of r){const r=await n.onData(l.message,e,{detail:l.detail,detectedServerKey:l.detectedServerKey});if(r.canceled)return void t.debug("Interactor signaled cancel");if("consume"===r.postAction){u.add(n.id);const l=r.isPassword?r.response.replace(/./g,"*"):r.response;return t.debug("Interactor gave response: "+l),{userResponse:r.response,usedInteractors:u}}}}l.tryInstallWithLocalServer=async function n(l,{systemInteractor:e,linuxInstallScript:t,windowsInstallScript:u,socksPort:r,revealTerminalEvent:o,usedAuthMethods:f,marker:m,globalState:g,platform:y}){const w=l.deps,S=(0,s.getInstallScriptOutputInteractor)(m),C=(0,s.getServerErrorLogOutputInteractor)(),E=(0,s.getDownloadRequestInteractor)(m,w.logger),k=await(0,v.getPrereqsWarningInteractor)(m),x=new s.RemoteServerProgressInteractor(m,w.progress);let T;if("number"!=typeof r)throw new Error("Need socksPort defined to use local server");o((()=>{w.logger.showLog()})),R(l.host,g);const L=new s.ComposedInteractor([C.interactor,S.interactor,E.interactor,k,x]),$=await h.LocalServerManager.create(l,{socksPort:r,marker:m,interactor:L,usedInteractors:f,platform:y,authRequestHandler:(n,l,e)=>async function(n,l,e,t){return(0,b.withCancellationTokenSource)((u=>(e.onCancellationRequested((()=>{u.cancel()})),Promise.race([F(n,l,u.token),O(n,l,t,u.token)]).finally((()=>{u.cancel()})))))}(n,l,e,g)});A.set(I(l),$),T=$.connect(t,u);const j=E.result.then((async n=>{await(0,d.downloadAndCopyToHost)(l,e,void 0,n)}));let M,N=Promise.race([S.result,T]);C.result.then((n=>{M=n}));try{await Promise.race([N,j])}catch(n){throw $.terminate(),n}let B=await N;if("string"!=typeof B&&!B)throw c.SshResolverError.Create(_.UnifiedStatusCode.BadInstallScriptResult,"Got bad result from install script");w.logger.debug(`Received install output: ${(0,D.sanitizeInstallScriptOutput)(B)}`);try{const n=(0,c.handleInstallOutput)(l,B,M);return n?(n.serverConfiguration.platform=$.platform,(0,v.logInstallScriptResult)(n,w.logger),await $.persistConnectionDetails(n.serverConfiguration,r)&&P.set(I(l),new h.LocalServerManagerConnection($)),n):($.terminate(),null)}catch(s){if($.terminate(),s instanceof c.SshResolverError&&s.failureReason===_.UnifiedStatusCode.SendDisconnectBrokenPipe&&!y){w.logger.debug("Error connecting, prompting to select platform. Issue related to remote-release issue #7272, temporary workaround due to OpenSSH regression.");const i=await(0,a.interactivelyPickSshPlatform)(`Error connecting, please select the platform of the remote host: "${l.host}"`);if(!i)throw w.logger.debug("Interactively Pick SSH Platform was canceled."),s;const c=await n(l,{systemInteractor:e,globalState:g,linuxInstallScript:t,windowsInstallScript:u,socksPort:r,marker:m,revealTerminalEvent:o,usedAuthMethods:f,platform:i});return c&&(c.storePlatform=!0),c}if(s instanceof c.SshResolverError&&s.failureReason===_.UnifiedStatusCode.ShellRequestFailedOnChannel&&!y){w.progress.report({message:i.l10n.t("Detected Windows host, need to reconnect")}),w.logger.debug("Detected Windows OpenSSH 7.9+ host, issue #2475. Reconnecting as Windows host.");const s=await n(l,{systemInteractor:e,globalState:g,linuxInstallScript:t,windowsInstallScript:u,socksPort:r,marker:m,revealTerminalEvent:o,usedAuthMethods:f,platform:p.Platform.Windows});return s&&(s.storePlatform=!0),s}throw s}},l.killCurrentRemoteServer=async function(n){let l=!1;for(const e of A.values())l=await e.killRemote(n)||l;return l},l.handleRequestWithInteractors=F},9480:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.killLocalServer=l.LocalServerManager=l.LocalServerManagerConnection=l.LocalServerConnection=l.findRunningServer=void 0;const t=e(5317),u=e(9896),r=e(6928),o=e(9023),i=e(3411),s=e(2232),a=e(712),c=e(5130),d=e(2584),h=e(3070),f=e(4847),p=e(3378),m=e(1990),g=e(4747),y=e(3001),v=e(4535),w=e(9350),b=e(1872),S=e(2593),C=o.promisify(u.readFile),D=o.promisify(u.exists);async function E(n){const l=n.useExecServer?"es":"tr";return r.join(n.deps.serverDataPath,await async function(n){const l=(0,p.getPackageJson)().version,e=await(0,b.getProductInfo)();return`vscode-ssh-host-${m.HostInfo.toPathString(n)}-${e.commit}-${l}`}(n.host)+"-"+l,c.dataFileName)}async function _(n,l){try{const e=await(0,g.httpGet)(void 0,{socketPath:n,path:"/delay-shutdown"},l);return"OK"===e||l.debug("Got unexpected result from running connection server: "+e),!0}catch(n){return l.debug("Server delay-shutdown request failed: "+n.message),!1}}async function k(n,l){const e=n.deps.logger,t=await async function(n){const l=await E(n);if(n.deps.logger.debug("Looking for existing server data file at "+l),await D(l)){const e=(await C(l)).toString();try{const l=JSON.parse(e);return n.deps.logger.debug("Found existing data file"),l}catch(l){return void n.deps.logger.info("Found data file but it has bad contents: "+e)}}n.deps.logger.debug("No existing data file")}(n);if(!t)return;const u={...t,connectionToken:t.connectionToken&&(0,S.sanitizeConnectionToken)(t.connectionToken)};if(e.debug(`Found local server running: ${JSON.stringify(u)}`),!(l&&t.startupTime+2e3<l))return await _(t.ipcHandlePath,e)?t:void e.debug("Existing server's health check failed, will start a new one");e.debug("Running server is stale. Ignoring")}l.findRunningServer=k,l.LocalServerConnection=class{constructor(n,l){this.serverKeepaliveTimer=I(n.ipcHandlePath,l)}dispose(){clearInterval(this.serverKeepaliveTimer)}},l.LocalServerManagerConnection=class{constructor(n){this.manager=n}dispose(){this.manager.disconnect()}};class x{constructor(n){this.interactor=n,this.stdout="",this.onDataQ=Promise.resolve()}async onData(n){return this.onDataQ=this.onDataQ.finally((()=>this._onData(n)))}async _onData(n){this.stdout+=n,"consume"===(await this.interactor.onData(this.stdout)).postAction&&(this.stdout="")}}var T;!function(n){n[n.Initial=0]="Initial",n[n.Connecting=1]="Connecting",n[n.Running=2]="Running",n[n.Connected=3]="Connected",n[n.Terminated=4]="Terminated"}(T||(T={}));class P{constructor(n,l,e,t,u){this.params=n,this.child=l,this.args=e,this.ipcHandlePath=t,this.askpass=u,this.startupTime=Date.now(),this.sshOutput="",this.stdout="",this.stderr="",this.stdoutHandler=async n=>{const l=(0,S.stripTrailingNewline)(n.toString()),e=(0,S.markLines)((0,S.sanitizeInstallScriptOutput)(l));if(this.deps.logger.debug(e),this.updateSshOutput((0,S.splitLines)(l)),this.stdout+=l,this.commandOutputMatcher&&await this.commandOutputMatcher({stdout:this.stdout}))return this.commandOutputMatcher=void 0,void(this.stdout="");this.state===T.Connecting&&l.includes((0,s.getScriptStartMarker)(this.args.marker))&&(this.params.deps.timer.mark(2),this.state=T.Running),this.interactorBuffer.onData(l)},this.stderrHandler=async n=>{const l=(0,S.stripTrailingNewline)(n.toString()),e=this.parseStderrLines(l);this.updateSshOutput(e.filter((n=>"trace"!==n.type)).map((n=>n.text))),this.stderr+=l,this.commandOutputMatcher&&this.commandOutputMatcher({stderr:this.stderr})?this.stderr="":e.forEach((n=>{this.parseAuthRequestDetail(n.text),"trace"===(n={text:(0,S.markLine)(n.text,"stderr"),type:n.type}).type?this.deps.logger.trace(n.text):this.deps.logger.info(n.text),(0,a.detectPortForwardingDisabledAndWarn)(n.text,this.deps.logger)}))},this.deps=this.params.deps,this.state=T.Initial,this.interactorBuffer=new x(this.args.interactor),this.askpass?.setAuthRequestHandler(this.askpassAuthRequestHandler.bind(this))}get platform(){return this._platform}static async create(n,l){const e=n.deps,{socksPort:u}=l,o="number"==typeof u?["-D",String(u)]:void 0,{serverDataFolderName:s}=await(0,b.getProductInfo)(),a=l.platform===h.Platform.Windows?"powershell":l.platform===h.Platform.Linux||l.platform===h.Platform.MacOS?"bash":void 0,c={serverId:P.NEXT_SERVER_ID++,ipcHandlePath:await(0,y.getIPCHandlePath)("askpass"),sshCommand:await(0,f.getSshCommandPath)(e.logger),sshArgs:["-v",...await(0,f.getSshConnectionArgs)(n,{cmdSegment:o,allowPortForward:!0,allowRemoteCommand:void 0===a}),...a?[a]:[]],serverDataFolderName:s,dataFilePath:n.deps.serverDataPath?await E(n):void 0};let p,m;void 0!==process.env.SSH_ASKPASS&&(0,i.externalSshAskpass)()||(p=new d.Askpass(n),m=await p.getEnv()),e.logger.debug(`Spawning local server with ${JSON.stringify(c)}`),e.logger.debug(`Local server env: ${JSON.stringify({SSH_AUTH_SOCK:process.env.SSH_AUTH_SOCK,SHELL:process.env.SHELL,...m})}`),e.timer.mark(1);const g=t.spawn(process.execPath,[r.join(__dirname,"localServer.js"),JSON.stringify(c)],{detached:!0,stdio:"pipe",env:{...process.env,...m}});return g.unref(),e.logger.debug("Spawned "+g.pid),new P(n,g,l,c.ipcHandlePath,p)}async askpassAuthRequestHandler(n,l,e){const t={message:l,detail:this.authRequestDetail,detectedServerKey:this.serverKey},u=await this.args.authRequestHandler(n,t,e);return u&&(this.serverKey=void 0),u}connect(n,l){return this.state=T.Connecting,this.keepaliveTimer=setTimeout((()=>{this.keepaliveTimer=I(this.ipcHandlePath,this.deps.logger)}),500),new Promise((async(e,t)=>{const u=()=>setTimeout((()=>{this.state===T.Connecting&&(t(a.SshResolverError.Timeout("Connecting with SSH timed out")),this.terminate())}),(0,i.connectTimeoutMilliseconds)(this.params.host,this.deps.logger));let r=u();const o=this.askpass?.onAuthRequestReceived((()=>{clearTimeout(r)})),s=this.askpass?.onAuthRequestHandled((()=>{r=u()}));this.child.on("exit",(n=>{this.state=T.Terminated,this.deps.logger.debug(`Local server exit: ${n}`),e(this.sshOutput),this.cleanup()})),this.child.stdout.on("data",this.stdoutHandler),this.child.stderr.on("data",this.stderrHandler);try{await this._checkPlatformAndRunScript(n,l)}catch(n){t(n)}finally{o?.dispose(),s?.dispose()}})).finally((()=>{setTimeout((()=>{this.state===T.Connecting&&(this.deps.logger.debug("Connecting failed, terminating local server"),this.cleanup())}),10)}))}async killRemote(n){if(!this._platform)return this.deps.logger.error("Unexpectedly did not know platform of remote."),!1;const l={platform:this._platform,cleanRemoteUserData:n};try{const n=await(0,g.httpPost)(void 0,JSON.stringify(l),{socketPath:this.ipcHandlePath,path:"/kill-remote"},this.deps.logger);return this.deps.logger.debug(n),!0}catch(n){return this.deps.logger.debug("Server kill-remote request failed: "+n.message),!1}}async _checkPlatformAndRunScript(n,l){const{logger:e}=this.deps;if(await this.waitForReady(),this._platform=await this.probeServerPlatform(),e.debug("Platform: "+this._platform),this._platform===h.Platform.Windows){const n=(0,f.getEscapedPowershellCommandForLocalServer)(l,this.deps.logger);await this.startPowershellAndWait(),this.execute(n)}else{const l=`mainScriptWrapper() {\n ${n}\n }\n mainScriptWrapper`,t=await this.probeShell();e.debug("Parent Shell: "+t),e.debug("Parent Shell pid: "+this.child.pid),await this.startSubshellAndWait(this.child.pid,e),this.execute(l)}}terminate(){this.state!==T.Terminated&&(this.state=T.Terminated,this.deps.logger.debug("Terminating local server"),this.cleanup())}disconnect(){var n;this.keepaliveTimer&&(n=this.keepaliveTimer,clearInterval(n),this.keepaliveTimer=void 0)}execute(n,l){l&&(this.commandOutputMatcher=l),this.child.stdin.write(`${n}\n`)}updateSshOutput(n){const l=n.filter((n=>!n.startsWith("local-server> "))).join("\n");l&&(this.sshOutput=this.sshOutput+l+"\n")}parseStderrLines(n){return(0,S.splitLines)(n).map((n=>{if(!n.startsWith("debug1:"))return{text:n};const l=n.match(/^debug1: Server host key: (.+)/);if(l){const e=l[1].trim();return this.serverKey=e.split(" ")[1]||e,{text:n}}return n.match(/debug1: Host .* is known and matches/)&&(this.serverKey=void 0),{text:n,type:"trace"}}))}parseAuthRequestDetail(n){n.match(/Permission denied/i)&&(this.authRequestDetail=n)}async probeShell(){return new Promise(((n,l)=>{this.execute("echo $SHELL",(l=>{if("stdout"in l){const e=l.stdout.substring(l.stdout.lastIndexOf("/")+1);return n(e),!0}return!1}))}))}async startPowershellAndWait(){return new Promise(((n,l)=>{this.execute("powershell -NoProfile",(l=>!(!("stdout"in l)||!l.stdout.match(/Windows PowerShell/)||(n(),0))))}))}async startSubshellAndWait(n,l){const e=(0,i.useExecServer)()?"sh":"bash";return new Promise(((t,u)=>{let r=!1,o=0;const i=()=>{o++,r||(l.debug("Waiting for subshell to start"),this.execute("echo $$",s),o<=100?setTimeout((()=>{i()}),50):(u(a.SshResolverError.Timeout(`Creating '${e}' subshell timed out`)),this.terminate()))},s=e=>{if("stdout"in e){l.debug(`stdout -> '${e.stdout}'`);const u=e.stdout.match(/\d+/);if(u&&n!==parseInt(u[0],10))return l.debug("sub-process detected"),r=!0,t(),!0;l.debug("sub-process not detected yet")}return"stderr"in e&&l.debug(`stderr -> '${e.stderr}'`),!1};this.execute(e),i()}))}async waitForReady(){const n=`ready: ${this.args.marker}`;return new Promise(((l,e)=>{this.execute(`echo '${n}'`,(e=>!(!("stdout"in e)||!e.stdout.includes(n)||(l(),0))))}))}async probeServerPlatform(){return new Promise(((n,l)=>{this.execute("uname -rsv",(l=>{let e;return"stdout"in l?l.stdout.includes("Darwin")?e=h.Platform.MacOS:l.stdout.toLowerCase().includes("msys")||l.stdout.toLowerCase().includes("windows32")||l.stdout.toLowerCase().includes("cygwin")||l.stdout.toLowerCase().includes("Windows_NT")?e=h.Platform.Windows:(l.stdout.includes("Linux")||l.stdout.toLowerCase().includes("bsd"))&&(e=h.Platform.Linux):l.stderr&&l.stderr.includes("uname")&&(e=h.Platform.Windows),!!e&&(n(e),!0)}))}))}cleanup(){this.disconnect(),this.child.kill()}getServerData(n,l){return{...n,pid:this.child.pid,ipcHandlePath:this.ipcHandlePath,socksPort:l,startupTime:this.startupTime}}async persistConnectionDetails(n,l){if(this.state=T.Connected,this.deps.timer.mark(3),this.deps.serverDataPath)try{this.askpass?.dispose();const e=this.getServerData(n,l),t=await E(this.params);return await(0,v.mkdirp)(r.dirname(t)),this.deps.logger.debug("Persisting server connection details to "+t),o.promisify(u.writeFile)(t,JSON.stringify(e,void 0,2)),e}catch(n){this.deps.logger.debug("Failed to persist local server connection details: "+n.message)}}}function I(n,l){const e=async()=>{await _(n,l)};return e(),setInterval(e,2e3)}l.LocalServerManager=P,P.NEXT_SERVER_ID=1,l.killLocalServer=async function(n){for(const l of[!0,!1]){const e=await k({...n,useExecServer:l},void 0);e&&await(0,w.killTree)(e.pid,n.deps.logger)}}},5130:(n,l)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.dataFileName=void 0,l.dataFileName="data.json"},2584:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.UnrecognizedRequestInteractor=l.Askpass=void 0;const t=e(9896),u=e(8611),r=e(6928),o=e(9023),i=e(1398),s=e(4430),a=e(3001),c=e(6296);l.Askpass=class{constructor(n){this.params=n,this._onAuthRequestReceived=new i.EventEmitter,this.onAuthRequestReceived=this._onAuthRequestReceived.event,this._onAuthRequestHandled=new i.EventEmitter,this.onAuthRequestHandled=this._onAuthRequestHandled.event,this._usedInteractors=new Set,this.enabled=!0,this.requestQ=Promise.resolve(),this.isCanceled=!1,this.currentHandlerCancelTokenSource=null,this.authRequestHandler=null,this.server=u.createServer(((n,l)=>this.onRequest(n,l))),this.server.setTimeout(6e5),this.ipcHandlePathPromise=this.setup().catch((n=>(console.error(n),"")))}get usedInteractors(){return this._usedInteractors}setAuthRequestHandler(n){this.authRequestHandler=n}async setup(){this.ipcHandlePath=await(0,a.getIPCHandlePath)("askpass");try{this.params.deps.logger.debug("askpass server listening on "+this.ipcHandlePath),this.server.listen(this.ipcHandlePath),this.server.on("error",(n=>console.error(n)))}catch(n){console.error("Could not launch ssh askpass helper."),this.enabled=!1}return this.ipcHandlePath}onRequest(n,l){this._onAuthRequestReceived.fire(),this.currentHandlerCancelTokenSource&&this.currentHandlerCancelTokenSource.cancel(),this.requestQ=this.requestQ.finally((()=>new Promise(((e,t)=>{const u=[];n.setEncoding("utf8"),n.on("data",(n=>u.push(n))),l.on("timeout",(()=>{this.params.deps.logger.debug("Askpass request timed out"),n.socket.destroy(),this.currentHandlerCancelTokenSource&&(this.currentHandlerCancelTokenSource.cancel(),this.currentHandlerCancelTokenSource=null)})),n.on("end",(async()=>{const n=u.join("");try{const e=await this.handleRequest(n);l.writeHead(200),l.end(JSON.stringify(e)),this._onAuthRequestHandled.fire()}catch(n){this.params.deps.logger.error(n.message),l.writeHead(500),l.end(),t(new Error(n.message))}e()}))}))))}async handleRequest(n){if(this.params.deps.logger.debug("Got askpass request: "+n),this.isCanceled)return{canceled:!0};let l,e;try{if(l=JSON.parse(n).request,"string"!=typeof l)throw new Error('Missing "request" property')}catch(n){throw new Error("Got malformed askpass request: "+n.message)}try{if(this.currentHandlerCancelTokenSource=new i.CancellationTokenSource,!this.authRequestHandler)throw new Error("No authRequestHandler registered");const n=await this.authRequestHandler(this.params,l,this.currentHandlerCancelTokenSource.token);this.currentHandlerCancelTokenSource.dispose(),this.currentHandlerCancelTokenSource=null,void 0===n||void 0===n.userResponse?(this.isCanceled=!0,e={canceled:!0}):(e={response:n.userResponse},this._usedInteractors=n.usedInteractors)}catch(n){throw new Error("Handling auth request failed: "+n.stack)}return e}async getEnv(){if(!this.enabled)return{SSH_ASKPASS:r.join(__dirname,"askpass-empty.sh")};const n=c.isWindows?"askpass.bat":"askpass.sh";return{DISPLAY:process.env.DISPLAY||"1",ELECTRON_RUN_AS_NODE:"1",SSH_ASKPASS:r.join(__dirname,"local-server",n),VSCODE_SSH_ASKPASS_NODE:process.execPath,VSCODE_SSH_ASKPASS_EXTRA_ARGS:"",VSCODE_SSH_ASKPASS_MAIN:r.join(__dirname,"askpass-main.js"),VSCODE_SSH_ASKPASS_HANDLE:await this.ipcHandlePathPromise}}async dispose(){this.server.close(),this.ipcHandlePath&&await o.promisify(t.exists)(this.ipcHandlePath)&&"win32"!==process.platform&&await o.promisify(t.unlink)(this.ipcHandlePath)}};class d{get id(){return d.ID}async onData(n){const l={postAction:"keep"},e=await(0,s.showInputBox)(n);return"string"!=typeof e?l.canceled=!0:(l.response=e,l.postAction="consume",l.isPassword=!0),l}}l.UnrecognizedRequestInteractor=d,d.ID="unrecognizedRequest"},3070:(n,l)=>{"use strict";var e;Object.defineProperty(l,"__esModule",{value:!0}),l.Platform=l.warnForPreviewPlatform=void 0,l.warnForPreviewPlatform=function(n,l){"aarch64"!==n.arch&&"arm64"!==n.arch||l.info(`** Note: Support for architecture "${n.arch}" is in preview **`)},function(n){n.Linux="linux",n.Windows="windows",n.MacOS="macOS"}(e||(l.Platform=e={}))},4111:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.shutdown=l.getActiveRemote=l.installServer=l.storePlatform=l.resolveExecServer=l.resolve=void 0;const t=e(1398),u=e(3411),r=e(712),o=e(8861),i=e(8602),s=e(1615),a=e(3070),c=e(8993),d=e(27),h=e(4417),f=e(1577),p=e(8428),m=e(5691),g=e(1872),y=e(1640),v=e(6444),w=e(8214),b=e(3510),S=e(6982),C=e(3505),D=e(2869),E=e(2593),_=e(3968),k="remote.sshContext";let x;const T=new Map,P=(n,l)=>`${n}-${l.useExecServer}`;let I=null;async function A(n,l,e){const t=P(l,n);let o,i=T.get(t);if(i||(i={manager:new d.SshAuthSockManager(l,n.deps),port:void 0},T.set(t,i)),!i.port||n.isReconnection)if((0,u.enableDynamicForwarding)()||(0,u.useLocalServer)())try{i.port=await(0,m.findAnyFreePort)()}catch(n){throw r.SshResolverError.Create(D.UnifiedStatusCode.FindLocalPort,"Failed to find a free local port for dynamic forwarding")}else i.port=void 0;(0,u.useLocalServer)()?(o=await(0,s.resolveWithLocalServer)(n,i.port,e.globalState),o.newSocksPort&&(i.port=o.newSocksPort)):o=await R(n,y.defaultSystemInteractor,i.port,e.globalState);const a=await(0,f.createTunnel)(n,{platform:o.installScriptResult.serverConfiguration.platform,socksPort:i.port,name:"VS Code Server",remoteListeningOn:o.installScriptResult.serverConfiguration.remoteListeningOn,preferredLocalPortRange:(0,u.preferredLocalPortRange)(n.deps.logger)});if(!a)throw new Error("Expected to have opened primary tunnel");return n.deps.logger.info(`Resolved "${l}" to "${r.ListenTarget.display(a.localTarget)}"`),{installResult:o,tunnelResult:a}}function O(n,l,e,t){setTimeout((()=>{(0,u.savePlatformForHost)(l,n,e,t)}),4e3)}async function R(n,l,e,d,f=(0,v.insecureRandomString)()){const{logger:m,progress:y,telemetry:b}=n.deps,C=(0,u.remotePortRanges)()[n.host.hostName];if(C&&C.end<C.start)throw r.SshResolverError.Create(D.UnifiedStatusCode.InvalidPortRange,"Invaid port range set");const k=(0,u.serverInstallPath)()[n.host.hostName],x=b.getTelemetryLevel(),T=(0,S.randomUUID)(),P=await async function(n,l,e,t,r,s,a,c,d,h){const f=await(0,g.getProductInfo)();c.info(`Using commit id "${f.commit}" and quality "${f.quality}" for server`);const p=[...new Set([...(0,u.getSshDefaultExtensions)(),...(0,_.getLocalExtensionsToInstall)(d)])];c.debug(`Extensions to install: ${p.join(", ")}`);const m={uuid:t,basePath:n,serverDataFolderName:f.serverDataFolderName,serverApplicationName:f.serverApplicationName,quality:f.quality,commit:f.commit,telemetryLevel:r,extensionIds:p,bindHost:a,printVars:(0,u.enableAgentForwarding)()&&(0,u.enableDynamicForwarding)()?["SSH_AUTH_SOCK"]:[],localDownload:(0,u.localDownload)(),enableWebAccess:(0,u.enableWebAccess)(),portRange:e,httpProxy:h.httpProxy,httpsProxy:h.httpsProxy},y={...m},v={...m,preventExit:!!l&&!(0,u.useLocalServer)(),lockfilesInTmp:(0,u.lockfilesInTmp)(),useFlock:(0,u.useFlock)(),serverListenOnSocket:(0,u.remoteServerListenOnSocket)()};(0,u.enableX11Forwarding)()&&(v.printVars=[...v.printVars,"DISPLAY"]);return{linuxInstallScript:(0,o.serverInstallScript)(v),linuxExecServerInstallScript:await(0,o.execServerInstallScript)(c,{...v,token:s}),windowsInstallScript:(0,i.serverInstallScript)(y),windowsExecServerInstallScript:(0,i.execServerInstallScript)({...y,token:s})}}(k,e,C,f,x,T,(0,u.bindAddressForHost)(n.host),m,d,(0,u.getProxyUrlsForHost)(n.host));return m.info("Install and start server if needed"),(0,c.withShowDetailsEvent)((async o=>{const i=function(n,l){return{report(e){e.message?n.report({message:l+e.message}):n.report(e)}}}(y,`([details](command:${c.SHOW_DETAILS_COMMAND} "Show details")) `);i.report({message:t.l10n.t("Initializing VS Code Server")});const g=await(0,u.getPlatformForHost)(n.host,!(0,u.useLocalServer)());if(!(0,E.validateCustomServerPath)(k,g))throw r.SshResolverError.Create(D.UnifiedStatusCode.InvalidCustomServerPath,`Provided: "${k}"`);let v=0;n:for(;v++<30;){const c=!!await(0,h.getConfigurationForHost)(m,n.host),y=new Set;try{let h;const b=n.useExecServer?{linux:P.linuxExecServerInstallScript,windows:P.windowsExecServerInstallScript}:{linux:P.linuxInstallScript,windows:P.windowsInstallScript};if((0,u.useLocalServer)())h=await(0,s.tryInstallWithLocalServer)(n,{systemInteractor:l,linuxInstallScript:b.linux,windowsInstallScript:b.windows,socksPort:e,marker:f,revealTerminalEvent:o,usedAuthMethods:y,globalState:d,platform:g});else{if(!g)throw m.debug("getPlatformForHost was canceled"),r.SshResolverError.Canceled();const t=g===a.Platform.Windows?b.windows:b.linux,u=await(0,p.generateSshCommand)(n,g,t,e);n.deps.logger.debug(`Generated SSH command: '${u}'`),h=await(0,p.tryInstall)(n,{systemInteractor:l,command:u,marker:f,platform:g,revealTerminalEvent:o,usedAuthMethods:y})}if(h)return{installScriptResult:h,retries:v,usedAuthMethods:y,remoteInConfigFile:c,execServer:n.useExecServer?{token:T}:void 0};i.report({message:t.l10n.t("Connect to VS Code Server - retry {0}",v)}),await(0,w.wait)(1e3);continue n}catch(l){throw l instanceof r.SshResolverError&&(l.retries=v,l.usedAuthMethods=y,l.remoteInConfigFile=c,l.wasExecServer=n.useExecServer),l}}throw r.SshResolverError.Create(D.UnifiedStatusCode.ExhaustedRetries)}))}l.resolve=async function(n,l,u,r){(0,C.assertVSDA)();const{installResult:o,tunnelResult:i}=await A(n,l,u),{logger:s}=n.deps;let c;if(I??(I=new b.VariablesManager(u.environmentVariableCollection,n.deps)),x=n.host,t.commands.executeCommand("setContext",k,!0),r.push(function(n,l,e){const u=l.port?`:${l.port}`:"",r=`SSH: ${l.hostName}${u}`,o=e===a.Platform.Windows;return t.workspace.registerResourceLabelFormatter({scheme:"vscode-remote",authority:n,formatting:{label:"${path}",separator:o?"\\":"/",workspaceSuffix:r,tildify:!0,normalizeDriveLetter:!0}})}(l,n.host,o.installScriptResult.serverConfiguration.platform)),o.execServer){const{resolveRemoteUsingExecServer:n}=await Promise.resolve().then((()=>e(6144)));c=await n(l,s,o,i,u.globalState)}else{if(!("port"in i.localTarget))throw new Error("Non-exec servers must forward a port, not a socket");c=new t.ResolvedAuthority("127.0.0.1",i.localTarget.port,o.installScriptResult.serverConfiguration.connectionToken||void 0)}const d=T.get(P(l,n))?.manager,f=function(n,l,e,t,u){let r={};const o=l.installScriptResult.serverConfiguration.sshAuthSock||e.sshAuthSock;o&&(r={...r,...n?.update(o,l.installScriptResult.serverConfiguration.tmpDir,t,l.installScriptResult.serverConfiguration.platform)});const i=l.installScriptResult.serverConfiguration.display;return i&&(r={...r,DISPLAY:i}),Object.keys(r).length&&u.info(`Remote extension host environment: ${JSON.stringify(r)}`),r}(d,o,i,n.host,s);return I.update(f),c.extensionHostEnv=f,c.environmentTunnels=(await(0,h.localForwardsForHost)(s,n.host)).map((n=>({localAddress:n.localAddress+":"+n.localPort,remoteAddress:{host:n.remoteAddress,port:n.remotePort}}))),{serverInstallationResult:o,resolvedAuthority:c}},l.resolveExecServer=async function(n,l,t){const{tunnelToExecServer:u}=await Promise.resolve().then((()=>e(6144))),{execServer:r}=await u(l,n.deps.logger,(async()=>{const e=await A({...n,useExecServer:!0},l,t);return e.installResult.installScriptResult.storePlatform&&O(e.installResult.installScriptResult.serverConfiguration.platform,n.host,t,n.deps.logger),e}));return r},l.storePlatform=O,l.installServer=R,l.getActiveRemote=function(){return x},l.shutdown=function(){t.commands.executeCommand("setContext",k,!1),x=void 0}},8993:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.withShowDetailsEvent=l.SHOW_DETAILS_COMMAND=void 0;const t=e(1398);let u;l.SHOW_DETAILS_COMMAND="opensshremotes.showDetails",t.commands.registerCommand(l.SHOW_DETAILS_COMMAND,(()=>{u&&u.fire()})),l.withShowDetailsEvent=async function(n){if(u)throw new Error("withRevealTerminalEvent can only be called once at a time globally within the app");u=new t.EventEmitter;try{return await n(u.event)}finally{u.dispose(),u=void 0}}},27:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.SshAuthSockManager=void 0;const t=e(1398),u=e(4430),r=e(1640),o=e(3070);l.SshAuthSockManager=class{constructor(n,l){this.remoteAuthority=n,this.deps=l,this.sessionId=Math.floor(1e9*Math.random())}update(n,l,e,i){const s=i===o.Platform.Windows?`${l}\\vscode-ssh-auth-sock-${this.sessionId}`:`${l}/vscode-ssh-auth-sock-${this.sessionId}`,a=i===o.Platform.Windows?`mklink "${s}" "${n}"`:`ln -f -s "${n}" "${s}"`,c=t.Uri.parse(`vscode-remote://${this.remoteAuthority}/`);return this.deps.logger.debug("Updating $SSH_AUTH_SOCK: "+a),(0,u.runInteractiveSshTerminalCommand)({cwd:c,command:a,logger:this.deps.logger,nickname:"Update SSH_AUTH_SOCK",systemInteractor:r.defaultSystemInteractor,host:e,terminalIsWindows:i===o.Platform.Windows}).then((n=>{n&&this.deps.logger.debug('"Update SSH_AUTH_SOCK" task produced unexpected output, it may have failed')})),{SSH_AUTH_SOCK:s}}}},4847:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.generateScpCommand=l.handleSshNotFoundError=l.ScpNotFoundError=l.SshNotFoundError=l.getSshCommand=l.getSshCommandPath=l.getEscapedPowershellCommandForLocalServer=l.getEncodedPowershellCommand=l.generateMultiLineCommand=l.getSshConnectionArgs=void 0;const t=e(5317),u=e(9896),r=e(6928),o=e(9023),i=e(1398),s=e(3411),a=e(4788),c=e(3070),d=e(4417),h=e(4535),f=e(6296),p=e(2593);async function m(n,l){const{logger:e}=n.deps,t=n.host,u=(l&&l.cmdSegment)??[],r=l&&l.allowPortForward?[]:["-o","ClearAllForwardings=true"],o=l?.quoteForShell||!1,i=l?.allowRemoteCommand??!0,a=await(0,d.getConfigurationForHost)(e,t);return[(0,s.permitPtyAllocation)()?"":"-T",...u,...r,...w(a),...y(a,i,n.deps.logger),...await S(o,t,n.deps.logger),...b(t,"ssh"),v(t,o)].filter((n=>!!n))}async function g(n,l,e){const t=(e&&e.cmdSegment)??[],u=e&&e.allowPortForward?"":"-o ClearAllForwardings=true",r=await(0,d.getConfigurationForHost)(l,n),o=e?.quoteForShell||!1,i=e?.allowRemoteCommand??!0;return[(0,s.permitPtyAllocation)()?"":"-T",...t,u,...w(r),...y(r,i,l),...await S(o,n,l),...b(n,"ssh"),v(n,o)].filter((n=>!!n))}function y(n,l,e){if((0,s.enableRemoteCommand)()&&(0,s.useLocalServer)()){if(l)return[];n&&n.RemoteCommand&&e.info('Cannot use RemoteCommand if you have this remote in your "remote.SSH.remotePlatform" setting.')}return n&&n.RemoteCommand?["-o","RemoteCommand=none"]:[]}function v(n,l){(0,d.assertValidHost)(n);const e=n.hostName,t=n.user?`${n.user}@${e}`:e;return l?(0,p.quoteForShellIfNeeded)(t,f.isWindows):t}function w(n){return f.isWindows||n&&n.ConnectTimeout?[]:["-o",`ConnectTimeout=${(0,s.connectTimeoutSetting)()}`]}function b(n,l){const e="ssh"===l?"-p":"-P";return n.port?[e,n.port+""]:[]}async function S(n,l,e){let t=[],u=(0,s.sshConfigurationFile)();return!u&&f.isWindows&&(0,s.useLocalServer)()&&(u=await(0,d.getConfigurationFileForHost)(e,l)),u&&(u=(0,h.untildify)(u),e.info(`Using SSH config file "${u}"`),t=["-F",n?(0,p.quoteForShellIfNeeded)(u,f.isWindows):u]),t}let C,D;async function E(n){return await _(n),C}async function _(n){const l=(0,s.sshPath)();if("string"!=typeof C||l&&l!==D)try{D=await I(l,n),C=f.isWindows&&"ssh"!==D?(0,p.quoteForShell)(D,f.isWindows):(0,p.quoteForShellIfNeeded)(D,f.isWindows)}catch(l){throw n.error("Finding installed ssh failed: "+l.message),l}return C}var k;async function x(n,l){return await T(n,l)!==k.NotFound}async function T(n,l){return new Promise(((e,u)=>{l.debug(`Checking ssh with "${n} -V"`);const r=[],o=[];let i,s=n;f.isWindows&&(s.endsWith(".bat")||s.endsWith(".cmd"))&&(s=`"${s}"`,i={shell:!0});const a=t.spawn(s,["-V"],i);a.stdout.on("data",(n=>{r.push(n),l.debug("stdout> "+n.toString())})),a.stderr.on("data",(n=>{o.push(n),l.debug("> "+n.toString())})),a.on("error",(n=>{l.debug("Got error from ssh: "+n.message),clearTimeout(d),e(k.NotFound)}));let c=!1;const d=setTimeout((()=>{c=!0,l.debug("ssh is not exiting, continuing"),e(k.NotFound),a.kill()}),1e4);a.on("exit",(n=>{if(c)return;if(clearTimeout(d),n)return l.debug("ssh exited with code: "+n),void e(k.NotFound);const t=Buffer.concat(r).toString("utf8").trim(),u=Buffer.concat(o).toString("utf8").trim()||t;u&&(u.match(/OpenSSH_for_Windows/i)?e(k.WindowsSsh):u.match(/OpenSSH/i)?e(k.Other):(l.debug("ssh output did not match /OpenSSH/"),e(k.NotFound)))}))}))}l.getSshConnectionArgs=m,l.generateMultiLineCommand=async function(n,l,e,t){const i=n.deps;let a;if(l===c.Platform.Windows?(a=await async function(n,l,e){return[await E(l),...await g(n,l,e),"powershell"].join(" ")}(n.host,i.logger,t),e=e.replace(/\}\n/g,"}\n\n"),i.logger.debug(`Remote command length: ${e.length}/8192 characters`),e.length>8192&&i.logger.error('Warning: Remote install script may be too long. If it hangs during connecting, try reducing the length of your setting "remote.SSH.defaultExtensions".')):a=[await E(i.logger),...await m(n,t),(0,s.useExecServer)()?"sh":"bash"].join(" "),i.logger.debug("Running script with connection command: "+a),f.isWindows){if(!process.env.TEMP)throw new Error("The TEMP environment variable must be set");const l=Math.floor(1e9*Math.random()),t=r.join(process.env.TEMP,`vscode-linux-multi-line-command-${(0,h.sanitizeFileName)(n.host.hostName)}-${l}.sh`);try{e=e.replace(/\r\n/g,"\n"),await o.promisify(u.writeFile)(t,e)}catch(n){throw new Error(`Failed to write install script to path ${t}. ${n.message}`)}return`type "${t}" | ${a}`}return`${a} << 'EOSSH'\n${e}\nEOSSH`},l.getEncodedPowershellCommand=function(n,l,e){const t=`powershell -ExecutionPolicy Unrestricted -NoLogo -NoProfile -NonInteractive -EncodedCommand ${l?"":"\\"}$([Convert]::ToBase64String([Text.Encoding]::Unicode.GetBytes([Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('${Buffer.from(n,"utf8").toString("base64")}')))))  # RemoteSSHConfigurationScript`;return e.debug(`Remote command length: ${t.length}/8192 characters`),t},l.getEscapedPowershellCommandForLocalServer=function(n,l){const e=Buffer.from(n,"utf8").toString("base64");return l.debug(`Remote command length: ${e.length}/8192 characters`),`powershell -ExecutionPolicy Unrestricted -NoLogo -NoProfile -NonInteractive -Command "\`$remoteSSHConfigurationScript=[Convert]::ToBase64String([Text.Encoding]::Unicode.GetBytes([Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('${e}')))); powershell -ExecutionPolicy Unrestricted -NoLogo -NoProfile -NonInteractive -EncodedCommand \`$remoteSSHConfigurationScript"`},l.getSshCommandPath=async function(n){return await _(n),D},l.getSshCommand=E,function(n){n[n.NotFound=0]="NotFound",n[n.WindowsSsh=1]="WindowsSsh",n[n.Other=2]="Other"}(k||(k={}));const P=process.env.hasOwnProperty("PROCESSOR_ARCHITEW6432");async function I(n,l){if(n){if(await x(n,l))return n;l.error(`The specified path ${n} is not a valid SSH binary`)}return f.isWindows?async function(n){const l=process.env.PATH;let e=[];if(l&&(e=l.split(";").filter((n=>r.isAbsolute(n))).map((n=>r.join(n,"ssh.exe")))),e.push(r.join(process.env.windir,"System32\\OpenSSH\\ssh.exe"),r.join(process.env.ProgramFiles,"Git\\usr\\bin\\ssh.exe"),r.join(process.env["ProgramFiles(x86)"],"Git\\usr\\bin\\ssh.exe"),r.join(process.env.LOCALAPPDATA,"Programs\\Git\\usr\\bin\\ssh.exe")),P&&e){const n=process.env.SystemRoot||"C:\\WINDOWS",l=r.join(n,"Sysnative","OpenSSH","ssh.exe");e.unshift(l)}if((0,s.useLocalServer)()){for(const l of e){if(await T(l,n)===k.Other)return l;n.trace("Preferring non-windows OpenSSH, skipping")}!function(){if(!(0,s.suppressWindowsSshWarning)()){const n=i.l10n.t("Don't Show Again");i.window.showWarningMessage(i.l10n.t({message:"Failed to find a non-Windows SSH installed. Password prompts may not be displayed properly! Disable `remote.SSH.useLocalServer` if needed.",comment:['{Locked="`remote.SSH.useLocalServer`"}',"Do not translate `remote.SSH.useLocalServer`, it is a VS Code command."]}),n).then((l=>{l===n&&i.workspace.getConfiguration("remote").update("SSH.suppressWindowsSshWarning",!0,!0)}))}}()}for(const l of e)if(await x(l,n))return l;throw new A}(l):async function(n){if(n.debug("PATH: "+process.env.PATH),await x("ssh",n))return"ssh";throw new Error("ssh is not on the PATH")}(l)}class A extends Error{constructor(){super("ssh installation not found")}}l.SshNotFoundError=A;class O extends Error{constructor(){super("scp installation not found")}}l.ScpNotFoundError=O;const R=i.l10n.t("Learn More");async function F(n){const l=await async function(n){const l=await I((0,s.sshPath)(),n),e=f.isWindows?"scp.exe":"scp",u="ssh"===l?"scp":r.join(r.dirname(l),e);"scp"!==u&&n.debug(`Expecting scp to be next to ssh at ${u}`);const o=await async function(n,l){return new Promise(((e,u)=>{l.debug(`Testing scp with "${n}"`);const r=[],o=[],i=t.spawn(n);i.stdout.on("data",(n=>r.push(n))),i.stderr.on("data",(n=>o.push(n))),i.on("error",(n=>{l.debug("Got error from scp: "+n.message),e(!1)})),i.on("exit",(n=>{l.debug("scp exited with code: "+n);const t=Buffer.concat(r).toString("utf8").trim();t&&l.debug("Got stdout from scp: "+t);const u=Buffer.concat(o).toString("utf8").trim();u&&l.debug("Got stderr from scp: "+u);const i=u||t;i&&(i.match(/usage: scp/i)?e(!0):(l.debug("ssh output did not match /usage: scp/"),e(!1)))}))}))}(u,n);if(!o)throw new O;return u}(n);return(0,p.quoteForShellIfNeeded)(l,f.isWindows)}l.handleSshNotFoundError=async function(){const n=await i.window.showErrorMessage(i.l10n.t("An SSH installation couldn't be found"),{modal:!0},{title:R});if(n&&n.title===R)return i.commands.executeCommand("opensshremotes.getStarted")},l.generateScpCommand=async function(n,l,e,t){const u=(0,p.quoteForShellIfNeeded)(await(0,a.getScpFlag)(n),f.isWindows),o=((0,h.isWindowsPath)(e)?r.win32:r.posix).dirname(e),i=(0,h.isWindowsPath)(n)?r.win32:r.posix;n=(0,p.quoteForShellIfNeeded)(i.basename(n),f.isWindows);const s=await(0,d.getConfigurationForHost)(t,l);return`${[await F(t),...w(s),...b(l,"scp"),...await S(!0,l,t)].filter((n=>!!n)).join(" ")} ${n} ${u} ${v(l,!0)}:${(0,p.quoteForShellIfNeeded)(o,f.isWindows)}`}},4430:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.runInteractiveSshTerminalCommand=l.getResumeLogMarker=l.getPauseLogMarker=l.runSshTerminalCommandWithLogin=l.showDifferingHostConfirmation=l.showHostKeyConfirmation=l.ConfirmationItem=l.showInputBox=l.showVerificationCodeInputBox=l.showPasswordInputBox=l.showPassphraseInputBox=void 0;const t=e(857),u=e(6928),r=e(1398),o=e(729),i=e(3411),s=e(4417),a=e(3357),c=e(4407),d=e(221),h=e(6296),f=e(2593);function p(n,l,e){const t=n?`"${n}"`:"";return y(r.l10n.t("Enter passphrase for ssh key {0}",t),l,e)}function m(n,l,e){return y(n?r.l10n.t("Enter password for {0}",n):r.l10n.t("Enter password"),l,e)}function g(n,l){return y(n,void 0,l)}async function y(n,l,e){return new Promise(((t,u)=>{const o=r.window.createInputBox();o.placeholder=n,o.prompt=l,o.password=!0,o.ignoreFocusOut=!0;let i=!1;o.onDidAccept((()=>{i=!0;const n=o.value;o.dispose(),t(n)})),o.onDidHide((()=>{i||t(void 0)})),o.show(),e&&e.onCancellationRequested((()=>{u(new c.CanceledError),o.dispose()}))}))}l.showPassphraseInputBox=p,l.showPasswordInputBox=m,l.showVerificationCodeInputBox=g,l.showInputBox=y;class v{constructor(n,l){this.label=n,this.value=l,this.isCloseAffordance=!0,this.title=n}}async function w(n,l,e){return S(r.l10n.t('"{0}" has fingerprint "{1}".',n,l),r.l10n.t("Are you sure you want to continue?"),e)}async function b(n,l){return S(n,r.l10n.t("Are you sure you want to continue connecting?"),l)}async function S(n,l,e){return new Promise(((t,u)=>{const o=r.window.createQuickPick();o.canSelectMany=!1,o.title=n,o.items=[new v(r.l10n.t("Continue"),"yes"),new v(r.l10n.t("Cancel"),"no")],o.placeholder=l;let i=!1;o.onDidAccept((async()=>{i=!0;const n=o.selectedItems[0].value;o.dispose(),t(n)})),o.onDidHide((()=>{i||t(void 0)})),o.show(),e&&e.onCancellationRequested((()=>{o.hide(),u(new c.CanceledError)}))}))}function C(n){return`${n}: pauseLog`}function D(n){return`${n}: resumeLog`}function E(n){const l=[];let{systemInteractor:e,command:u,interactors:o,nickname:s,logger:a,token:p}=n,m=!1;return new Promise((async(g,y)=>{let v,w,b,S,E="";function k(){w&&(w.dispose(),w=void 0),b&&(b.dispose(),b=void 0),v&&(v.dispose(),v=void 0),S&&S.dispose(),(0,d.dispose)(l)}function x(n=!1){if(k(),a.debug(`"${s}" terminal command ${n?"canceled":"done"}`),n)return y(new c.CanceledError);const l=n?"":(0,f.lastNonemptyLine)(E);g(l||"")}function T(n){k(),a.error(`"${s}" process failed: ${n}`),y(n)}p&&(S=p.onCancellationRequested((()=>{x(!0)})));const P=n.cwd&&"vscode-remote"===n.cwd.scheme;if(P&&!n.host)throw new Error("Invalid terminal request, missing host");if(P&&"boolean"!=typeof n.terminalIsWindows)throw new Error("Invalid terminal request, missing terminalIsWindows");const I="boolean"==typeof n.terminalIsWindows?n.terminalIsWindows:h.isWindows;try{let c;c=n.sendText?"":I?`/c (${u}) & exit /b 0`:["-c",u+"\nexit 0"],n.cwd&&a.debug("Using cwd: "+n.cwd);const d={cwd:n.cwd||(I?r.Uri.file(t.homedir()||"c:\\"):r.Uri.file(t.homedir()||"/")),name:s,shellPath:_(I,a),shellArgs:c,hideFromUser:!0,isTransient:!0};let h=Promise.resolve();if(w=e.onDidWriteTerminalData((async l=>{l.terminal===b&&(h=h.finally((()=>async function(l){const e=(0,f.stripEscapeSequences)(l.data);if(function(l){let e;if(n.marker){const t=C(n.marker),u=l.lastIndexOf(t);u>=0&&(l=l.substring(0,u+t.length),e=!0);const r=l.lastIndexOf(D(n.marker));r>=0&&(l=l.substring(r),e=!1)}m&&(0,i.logLevel)()!==i.LogLevel.trace||function(n,l,e){const t=(n=(0,f.sanitizeInstallScriptOutput)(n)).replace(/\r?\n$/,"");if((0,i.logLevel)()===i.LogLevel.trace)e.debug(`"${l}" terminal received data: "${t}"`);else{if(" "===t)return;const n=t.split(/\n/).map((n=>`> ${n}`)).join("\n");e.debug(n)}}(l,s,a),"boolean"==typeof e&&(m=e)}(e),E+=e,o)for(const e of o)try{const l=await e.onData(E);if("consume"===l.postAction&&(n.usedInteractors&&n.usedInteractors.add(e.id),E=""),l.canceled)return n.usedInteractors&&n.usedInteractors.add(e.id),void x(!0);if("string"==typeof l.response){n.usedInteractors&&n.usedInteractors.add(e.id),b.sendText(`${l.response}\n`);const t=l.isPassword?l.response.replace(/./g,"*"):l.response;a.debug(`"${s}" wrote data to terminal: "${t}"`)}}catch(l){T(l)}}(l))))})),b=e.createTerminal(d),n.revealTerminal&&l.push(n.revealTerminal((()=>{b&&b.show()}))),n.sendText){const l=I?`(${n.sendText}) & exit /b 0`:n.sendText+"\nexit 0";b.sendText(l),a.debug(`"${s}" wrote data to terminal: "${n.sendText}"`)}n.allowShowTerminal&&(0,i.showLoginTerminal)()&&b.show(),v=e.onDidCloseTerminal((n=>{n===b&&(b=void 0,x())}))}catch(n){T(n)}}))}function _(n,l){if(n){if(process.env.SystemRoot){const n=u.join(process.env.SystemRoot,"System32","cmd.exe");return l.debug("Terminal shell path: "+n),n}return"cmd.exe"}return"/bin/sh"}l.ConfirmationItem=v,l.showHostKeyConfirmation=w,l.showDifferingHostConfirmation=b,l.runSshTerminalCommandWithLogin=async function(n,l){let e;const t=(0,i.showLoginTerminal)();let u=[];l.interactor&&u.push(l.interactor),t||u.push(new o.MitmInteractor,new o.FingerprintInteractor(n,w),new o.PassphraseInteractor((async n=>(e=await p(n),e)),n.deps.logger),new o.DifferingHostKeyInteractor(b,n.deps.logger),new o.PasswordInteractor(m,n.deps.logger),new o.TwoFacInteractor(g,n.deps.logger),new o.DuoTwoFacInteractor(g,n.deps.logger));const c=await E({systemInteractor:l.systemInteractor,command:l.command,interactors:u,usedInteractors:l.usedInteractors,nickname:l.nickname,logger:n.deps.logger,token:l.token,marker:l.marker,revealTerminal:l.revealTerminal,allowShowTerminal:!0,cwd:l.cwd?r.Uri.file(l.cwd):void 0});if(e){n.deps.logger.debug("User entered passphrase");const l=await(0,s.getConfigurationForHost)(n.deps.logger,n.host);n.deps.logger.debug("Passphrase was entered and ssh config entry was found - adding SSH key to agent");const t=l&&l.IdentityFile&&l.IdentityFile[0]||void 0;await(0,a.addKeyToSshAgent)(t,(async()=>e),n.deps.logger)}return c},l.getPauseLogMarker=C,l.getResumeLogMarker=D,l.runInteractiveSshTerminalCommand=E},1036:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.sshCommandToConfig=l.CommandParseError=void 0;const t=e(8289),u=e(5192),r={1:n=>n.Protocol="1",2:n=>n.Protocol="2",4:n=>n.AddressFamily="inet",6:n=>n.AddressFamily="inet6",A:n=>n.ForwardAgent="yes",b:(n,l)=>n.BindAddress=l,C:n=>n.Compression="yes",c:(n,l)=>n.Cipher=l,D:(n,l)=>n.DynamicForward=l,e:null,F:null,f:null,g:n=>n.GatewayPorts="yes",I:(n,l)=>n.SmartcardDevice=l,i:(n,l)=>n.IdentityFile=l,J:(n,l)=>n.ProxyJump=l,K:n=>n.GSSAPIAuthentication="yes",k:n=>n.GSSAPIDelegateCredentials="no",L:(n,l)=>{const e=l.match(/^((.*):?\d+)?:(.+?)?$/);if(e){const[,t,,u]=e;if(t&&u)return void(n.LocalForward=`${t} ${u}`);throw new o(`LocalFoward needs a listener and a destination separate by a colon. ${l} does not match.`)}let t=l.indexOf(":");if(-1===t)throw new o(`LocalFoward needs a listener and a destination separate by a colon. ${l} does not match.`);n.LocalForward=`${l.substring(0,t)} ${l.substring(t+1)}`},l:(n,l)=>n.User=l,M:n=>n.ControlMaster="yes",m:(n,l)=>n.MACs=l,N:null,n:null,o:(n,l)=>{const e=l.indexOf("=");if(-1===e)throw new o(`Argument missing for option ${l}`);n[l.slice(0,e)]=l.slice(e+1)},p:(n,l)=>n.Port=l,q:null,R:(n,l)=>n.RemoteForward=l,S:(n,l)=>n.ControlPath=l,s:null,T:null,t:null,V:null,v:n=>n.LogLevel="verbose",W:(n,l)=>n.RemoteForward=l,w:(n,l)=>n.TunnelDevice=l,X:n=>n.ForwardX11="yes",x:n=>n.ForwardX11="no",Y:n=>n.ForwardX11Trusted="yes",y:null};class o extends Error{}function i(n,l){const e=new t.BasicParser(":1246ab:c:e:fgi:kl:m:no:p:qstvxAB:CD:E:F:GI:J:KL:MNO:PQ:R:S:TVw:W:XYy",n,0);for(;;){const n=e.getopt();if(!n)break;if(":"===n.option)throw new o(`Expected flag -${n.optopt} to have an argument but it did not`);if("?"===n.option)throw new o(`Unknown flag ${n.optopt}`);const t=r[n.option];t&&t(l,n.optarg)}return e.optind()}function s(n){let l;try{l=new URL(n)}catch{}if(l&&"ssh:"===l.protocol)return l;const e=n.lastIndexOf("@");if(-1===e)return{hostname:n};let t=n.slice(e+1),u=n.slice(0,e);const r=u.indexOf(":");let o;-1!==r&&(u=u.slice(0,r));const i=t.indexOf(":");return-1!==i&&(o=t.slice(i+1),t=t.slice(0,i)),{hostname:t,username:u,port:o}}l.CommandParseError=o,l.sshCommandToConfig=function(n){const l=(0,u.parse)(n);"ssh"===l[0]&&l.shift();const e={};for(let n=0;n<l.length;n++)if(n+=i(l.slice(n),e),n<l.length&&!e.Host){const{hostname:t,port:u,username:r}=s(l[n]);e.Host=t,e.HostName=t,!e.Port&&u&&(e.Port=u),!e.User&&r&&(e.User=r)}if(!e.Host)throw new o("Missing host in SSH connection string");const{Host:t,HostName:r,...a}=e;return{Host:t,HostName:r,...a}}},4417:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.assertValidHost=l.addSshHost=l.configureSshHosts=l.onDidChangeSshConfiguration=l.localForwardsForHost=l.getConfigurationFileForHost=l._getConfigurationForHost=l.getConfigurationForHost=l.getHostsFromConfigs=l.getSshConfigurationFiles=l.defaultSshConfigurationFiles=void 0;const t=e(9896),u=e(1756),r=e(857),o=e(6928),i=e(9023),s=e(1398),a=e(5187),c=e(5677),d=e(3411),h=e(712),f=e(1036),p=e(3378),m=e(1990),g=e(4535),y=e(6296),v=e(2869),w=e(1182),b=e(96),S=i.promisify(t.readFile),C=i.promisify(t.writeFile),D=i.promisify(t.exists),E=i.promisify(t.stat),_=i.promisify(t.chmod),k=o.resolve(r.homedir(),".ssh/config"),x=process.env.ALLUSERSPROFILE||process.env.PROGRAMDATA||"C:\\ProgramData",T=y.isWindows?`${x}\\ssh\\ssh_config`:"/etc/ssh/ssh_config";function P(n){return"string"==typeof n?[n]:n.map((n=>n.val))}function I(){return[k,T]}function A(){const n=(0,d.sshConfigurationFile)();return n?[n]:I()}async function O(n,l){return F(n,l,A())}function R(n){return n&&!!n.HostName}async function F(n,l,e){for(let t of e){const e=(await L(n,t)).compute(l.hostName);if(R(e)){if(e.IdentityFile){const n=Array.isArray(e.IdentityFile)?e.IdentityFile:[e.IdentityFile];e.IdentityFile=n.map((n=>(0,g.untildify)(n)))}return e}}return null}async function L(n,l,e=!0){const t=await async function(n,l){if(l=(0,g.untildify)(l),await D(l))try{const n=(await S(l)).toString("utf8").trim();return""===n||"\n"===n||"\r\n"===n?"":n}catch(e){n.error(`Failed to read SSH configuration file '${l}': ${e}`)}return""}(n,l),r=function(n){function l(n){n.param=H.get(n.param.toLowerCase())||n.param}return n.filter(j).forEach((n=>{if(l(n),M(n)&&n.config.filter(j).forEach(l),N(n)){const l=n.criteria,e=Object.create(null);Object.keys(l).forEach((n=>{e[H.get(n.toLowerCase())||n]=l[n]})),n.criteria=e}})),n}((0,w.parse)(t));return e&&await async function(n,l){const e=new Set;async function t(t){if("string"!=typeof t.value)return void b.HintManager.Instance()?.captureStatus(v.UnifiedStatusCode.UnhandledConfigParsingError,"More than one value parsed from Include directive");let r=(0,g.untildify)(t.value);y.isWindows&&r.match(/^\/[a-z]:/i)&&(r=r.substring(1)),o.isAbsolute(r)||(r=o.resolve(o.dirname(l),r));try{const l=(await(0,u.glob)(r,{windowsPathsNoEscape:y.isWindows})).filter((n=>!e.has(n)));for(let t of l)(await E(t)).isFile()&&await $(n,t),e.add(t)}catch(n){console.error(`Failed to resolve "${t.param} ${t.value}": ${n.message}`)}}for(let l=0;l<n.length;l++){const e=n[l];if(j(e)&&"include"===e.param.toLowerCase()&&await t(e),M(e)&&P(e.value).includes("*"))for(const n of e.config)j(n)&&"include"===n.param.toLowerCase()&&await t(n)}}(r,l),r}async function $(n,l){const e=(await S(l)).toString(),t=(0,w.parse)(e);n.push(...t)}function j(n){return n.type===w.LineType.DIRECTIVE}function M(n){return j(n)&&"host"===n.param?.toLowerCase()&&!!n.value&&!!n.config}function N(n){return j(n)&&"match"===n.param?.toLowerCase()&&!!n.criteria&&!!n.config}function B(n){const l=n.split(":");return{address:l[1]?l[0]:"localhost",port:parseInt(l[1]?l[1]:l[0])}}l.defaultSshConfigurationFiles=I,l.getSshConfigurationFiles=A,l.getHostsFromConfigs=async function(n){const l=[];for(let e of A()){const t=await L(n,e);l.push(...U(t))}return l},l.getConfigurationForHost=O,l._getConfigurationForHost=F,l.getConfigurationFileForHost=async function(n,l,e=A()){for(let t of e)if(R((await L(n,t)).compute(l.hostName)))return t},l.localForwardsForHost=async function(n,l){const e=await O(n,l);return e?.LocalForward?(Array.isArray(e.LocalForward)?e.LocalForward:[e.LocalForward]).map((n=>{const[l,e]=n.split(/[\t ]+/),t=B(l),u=B(e);return{localPort:t.port,localAddress:t.address,remotePort:u.port,remoteAddress:u.address}})):[]};const H=new Map([["host","Host"],["hostname","HostName"],["identityfile","IdentityFile"],["user","User"],["port","Port"],["connecttimeout","ConnectTimeout"],["remotecommand","RemoteCommand"],["localforward","LocalForward"]]);function U(n){const l=new Set;return n.filter((n=>M(n)||N(n))).forEach((n=>{if(N(n)){const e=function(n){const l=n.criteria.Host;return l?q(P(l)):[]}(n);if(0===e.length)return;q(e).forEach((n=>l.add(n)))}else q(P(n.value)).forEach((n=>l.add(n)))})),Array.from(l.keys())}function q(n){return(Array.isArray(n)?n:[n]).filter((n=>!(n.match(/[?*]/)||n.match(/^\s*$/)||n.match(/^!/))))}const W=new s.EventEmitter,z=W.event;l.onDidChangeSshConfiguration=z,z((async()=>{s.extensions.getExtension("ms-vscode.remote-explorer")&&await s.commands.executeCommand("remote-explorer.refresh")})),s.workspace.onDidChangeConfiguration((n=>{n.affectsConfiguration(d.CONFIG_FILE_SETTING)&&W.fire()}));class V{constructor(n){this.logger=n,this.fileBeingWatched=new Set}startWatching(n){this.logger.debug(`ConfigFileWatcher: start watching ${n.toString()}`),this.fileBeingWatched.add(n.toString()),this.saveListener||(this.logger.debug("ConfigFileWatcher: adding save listener"),this.saveListener=s.workspace.onDidSaveTextDocument((n=>this.documentSaved(n)))),this.closeListener||(this.logger.debug("ConfigFileWatcher: adding close listener"),this.closeListener=s.workspace.onDidCloseTextDocument((n=>this.documentClosed(n))))}stopWatching(n){this.logger.debug(`ConfigFileWatcher: stop watching ${n.toString()}`),this.fileBeingWatched.delete(n.toString()),0===this.fileBeingWatched.size&&(this.saveListener&&(this.logger.debug("ConfigFileWatcher: removing save listener"),this.saveListener.dispose(),this.saveListener=void 0),this.closeListener&&(this.logger.debug("ConfigFileWatcher: removing close listener"),this.closeListener.dispose(),this.closeListener=void 0))}documentSaved(n){this.logger.debug(`ConfigFileWatcher: saving ${n.uri}`),this.fileBeingWatched.has(n.uri.toString())&&(this.logger.debug(`ConfigFileWatcher: firing change event for ${n.uri}`),W.fire())}documentClosed(n){this.logger.debug(`ConfigFileWatcher: closing ${n.uri}`),this.fileBeingWatched.has(n.uri.toString())&&this.stopWatching(n.uri)}}let G;l.configureSshHosts=async function(n){const l=await(0,c.pickSshConfigurationFile)();if(l)if("command"===l.type)"help"===l.id?s.env.openExternal(s.Uri.parse("https://aka.ms/vscode-remote/ssh/config-file")):"settings"===l.id&&async function(){const{name:n,publisher:l,extensionPack:e}=(0,p.getPackageJson)(),t=[`${l}.${n}`];e&&e.forEach((n=>t.push(n))),await s.commands.executeCommand("workbench.action.openSettings",`@ext:${t.join(",")} config file`)}();else if("file"===l.type){let e=l.path;if(e){e=(0,g.untildify)(e);const l=s.Uri.file(e);G||(G=new V(n)),G.startWatching(l),await D(e)?await s.commands.executeCommand("vscode.open",l):await async function(n){const l=o.dirname(n);await D(l)||(await(0,g.mkdirp)(l),y.isWindows||n!==k||await _(l,448)),await C(n,""),y.isWindows||n!==k||await _(n,384);const e=await s.window.showTextDocument(s.Uri.file(n));await e.insertSnippet(new s.SnippetString("# Read more about SSH config files: https://linux.die.net/man/5/ssh_config\nHost ${1:alias}\n    HostName ${2:hostname}\n    User ${3:user}"))}(e)}}},l.addSshHost=async function(n){const l=await new Promise(((n,l)=>{const e=s.window.createInputBox();e.title=s.l10n.t("Enter SSH Connection Command"),e.placeholder="E.g. ssh hello@microsoft.com -A",e.ignoreFocusOut=!0,e.onDidAccept((()=>{n(e.value.trim()||void 0),e.dispose()})),e.onDidHide((()=>{n(void 0)})),e.show()}));if(!l)return;let e;try{e=(0,f.sshCommandToConfig)(l)}catch(n){if(!(n instanceof f.CommandParseError))throw n;return void s.window.showErrorMessage(n.message)}const t=await(0,c.pickSshConfigurationFile)(s.l10n.t("Config file to save in"));if(!t||"file"!==t.type)return;const u=await L(n,t.path,!1);u.prepend(e,!0),await async function(n,l){n=(0,g.untildify)(n),await(0,g.mkdirp)(o.dirname(n)),await C(n,l.toString())}(t.path,u),W.fire();const r=s.l10n.t("Open Config"),i=s.l10n.t("Connect");switch(await s.window.showInformationMessage(s.l10n.t("Host added!"),r,i)){case r:const n=await s.workspace.openTextDocument((0,g.untildify)(t.path));await s.window.showTextDocument(n);break;case i:const l=new m.HostInfo(e.Host);(0,a.openEmptyWindowOnSshHost)(l)}};const K="\\'\"`!%\r\n".split("");l.assertValidHost=function(n){if(n.hostName.startsWith("-"))throw h.SshResolverError.Create(v.UnifiedStatusCode.InvalidHostName,s.l10n.t("SSH host name cannot begin with {0}","-"));if(n.user?.startsWith("-"))throw h.SshResolverError.Create(v.UnifiedStatusCode.InvalidHostName,s.l10n.t("SSH user name cannot begin with {0}","-"));K.forEach((l=>{if(n.hostName.includes(l))throw h.SshResolverError.Create(v.UnifiedStatusCode.InvalidHostName,s.l10n.t("SSH host name cannot include the character {0}",l));if(n.user?.includes(l))throw h.SshResolverError.Create(v.UnifiedStatusCode.InvalidHostName,s.l10n.t("SSH user name cannot include the character {0}",l))}))}},3357:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.addKeyToSshAgent=void 0;const t=e(9896),u=e(857),r=e(6928),o=e(9023),i=e(729),s=e(4430),a=e(6296),c=e(1640),d=e(6444),h=o.promisify(t.writeFile);l.addKeyToSshAgent=async function(n,l,e){const t=(0,d.insecureRandomString)(),o=await async function(n,l){return a.isWindows?await async function(n,l){n=n||"";const e=u.tmpdir(),t=r.join(e,"vscode_add_ssh_key_to_agent.ps1"),o=`\n\t\t# Check if it's already in the ssh-agent\n\t\t$KEY = "${n}"\n\t\tif ($KEY -ne "") {\n\t\t\t$KEY = (Resolve-Path "${n}").toString()\n\t\t}\n\n\t\techo 'PS: adding key to ssh-agent'\n\t\techo ssh-add $KEY\n\t\tssh-add $KEY\n\t\tif ($LASTEXITCODE -ne 0) {\n\t\t\techo ${l}##5##\n\t\t}\n\t`;return await h(t,o),{command:"",sendText:`powershell -ExecutionPolicy Bypass ${t}`}}(n,l):function(n,l){return{command:`\nINSTALL_SCRIPT=\`mktemp\`.sh\ncat << 'EOF' > $INSTALL_SCRIPT\n\t# expand the key path to be absolute\n\tKEY="\`echo ${n=n||""}\`"\n\techo SHELL-SCRIPT: KEY=$KEY\n\techo SHELL-SCRIPT: adding key to ssh-agent\n\tssh-add ${n}\n\tif (( $? > 0 ))\n\tthen\n\t\techo ${l}##5##\n\tfi\nEOF\n\nchmod +x $INSTALL_SCRIPT\n\n/bin/bash -ilc $INSTALL_SCRIPT\n`}}(n,l)}(n,t),f=new i.PassphraseInteractor(l,e),p={id:"ssh-add",onData:async n=>{let l=(0,i.getExitCode)(n,t);if(void 0===l)e.error("Malformed exit code from ssh-add script, failed to add key to ssh agent.");else{if(0===l)return f.onData(n);e.error("ssh-add failed"),e.error("Consider setting up the ssh agent: https://aka.ms/vscode-remote/troubleshooting#_setting-up-the-ssh-agent")}return{}}};e.debug("Executing add-ssh-key:\n"+(o.sendText||o.command)),await(0,s.runInteractiveSshTerminalCommand)({systemInteractor:c.defaultSystemInteractor,command:o.command,sendText:o.sendText,interactors:[p],nickname:"add-ssh-key",allowShowTerminal:!0,logger:e})}},1577:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.createTunnel=void 0;const t=e(9278),u=e(5861),r=e(1398),o=e(729),i=e(3411),s=e(712),a=e(8602),c=e(3070),d=e(8993),h=e(4847),f=e(4430),p=e(4417),m=e(221),g=e(5691),y=e(2593),v=e(1640),w=e(8214),b=e(2869);class S{constructor(n,l,e,t){this.host=n,this.remoteTarget=l,this.localTarget=e,this.name=t}close(){E(this)}}class C extends S{constructor(n,l,e,t,u){super(n,l,e,t),this.tokenSource=u}set sshAuthSock(n){this._sshAuthSock=n}get sshAuthSock(){return this._sshAuthSock}dispose(){this.tokenSource.cancel()}}let D=[];function E(n){D=D.filter((l=>l!==n)),n.dispose()}l.createTunnel=async function(n,{remoteListeningOn:l,platform:e,preferredLocalPortRange:a,name:S,socksPort:x}){try{let T;try{const n=await async function(n){if(n){let l=n.end-n.start+1,e=await g.findFreePortFrom(n.start,l,3e3);if(0===e)throw new Error(r.l10n.t("No free ports in specified range '{0}-{1}'.  Remove or update the 'Preferred Local Port Range' setting and try again.",n.start,n.end));return e}return await g.findAnyFreePort()}(a);T={port:n}}catch(n){throw s.SshResolverError.Create(b.UnifiedStatusCode.FindLocalPort,r.l10n.t("Failed to find a free local port: {0}",n.message))}const P=x&&"port"in l?await async function(n,l,e,o,i){const{logger:a}=n.deps;n.deps.progress.report({message:r.l10n.t("Setting up SSH tunnel")});const c=await(0,p.getConfigurationForHost)(a,n.host),d=c&&t.isIPv6(c.HostName)||"inet6"===c?.AddressFamily?"::1":"127.0.0.1",h=new r.CancellationTokenSource,f=new C(n.host,{port:o},l,i,h);D.push(f);const g=await async function(n,l,e,o,i){const a={proxy:{host:o,port:l,type:5},command:"connect",destination:{host:"127.0.0.1",port:e}};let c=0;return new Promise((o=>{i.debug(`Starting forwarding server. local ${s.ListenTarget.display(n)} -> socksPort ${l} -> remotePort ${e}`);const d=[],h=t.createServer((async l=>{try{c<10&&i.debug(`[Forwarding server ${s.ListenTarget.display(n)}] Got connection ${c++}`);const e=await u.SocksClient.createConnection(a);l.pipe(e.socket),e.socket.pipe(l),d.push({dispose(){l.end(),e.socket.end()}})}catch(n){i.error(`Failed to set up socket for dynamic port forward to remote port ${e}: ${n.message}. TCP port forwarding may be disabled, or the remote server may have crashed. See the VS Code Server log above for details.`),r.window.showErrorMessage('Failed to set up dynamic port forwarding connection over SSH to the VS Code Server. ([Show log](command:opensshremotes.showLog "Show log"))')}}));s.ListenTarget.listen(h,n,(()=>{i.debug("Forwarding server listening on "+s.ListenTarget.display(n)),o({dispose(){h.close(),(0,m.dispose)(d)}})}))}))}(l,e,o,d,n.deps.logger);return h.token.onCancellationRequested((()=>{(0,m.dispose)(g)})),f}(n,T,x,l.port,S):await async function(n,l,e,t,u){const a=n.deps;return(0,d.withShowDetailsEvent)((async p=>{let m;a.progress.report({message:`([details](command:${d.SHOW_DETAILS_COMMAND} "${r.l10n.t("Show details in terminal")}")) ${r.l10n.t("Setting up SSH tunnel")}`});const g=await async function(n,l,e,t){let u;u=l===c.Platform.Windows?`${(0,i.enableAgentForwarding)()?"echo $env:SSH_AUTH_SOCK; ":""}echo '${k}'; ${_}`:`${(0,i.enableAgentForwarding)()?"echo $SSH_AUTH_SOCK && ":""}echo -e '${k}' && while true; do sleep 180; echo -n ' '; done`;const r=n=>"port"in n?`127.0.0.1:${n.port}`:n.socketPath.startsWith("\\\\.\\pipe\\")?"/"+n.socketPath.slice(1):n.socketPath,o=`${r(t)}:${r(e)}`;return(0,h.generateMultiLineCommand)(n,l,u,{cmdSegment:["-L",o],allowPortForward:!0,quoteForShell:!0})}(n,l,e,t);a.logger.debug(`Spawning tunnel with: ${g}`);const w=new r.CancellationTokenSource;m=new C(n.host,e,t,u,w),D.push(m);const b=(0,o.getInteractorForMsg)(new RegExp(`(SSH_AUTH_SOCK=(.*)\\r?\\n)?${k}`));(0,f.runSshTerminalCommandWithLogin)(n,{systemInteractor:v.defaultSystemInteractor,command:g,nickname:"SSH Tunnel",interactor:b.interactor,revealTerminal:p,token:w.token}).then((()=>{a.logger.debug("SSH tunnel command completed unexpectedly")}),(n=>{a.logger.debug("SSH tunnel command completed unexpectedly with error: "+(n&&n.message))})).finally((()=>{E(m)}));const S=await b.result,x=S&&S[2]&&(0,y.stripEscapeSequences)(S[2]);return m.sshAuthSock=x,a.logger.info(`Spawned SSH tunnel between local ${s.ListenTarget.display(t)} and remote target ${s.ListenTarget.display(e)}`),m}))}(n,e,l,T,S);return n.deps.progress.report({message:r.l10n.t("Waiting for port forwarding to be ready")}),n.deps.logger.info("Waiting for ssh tunnel to be ready"),await async function(n,l=1e4){return async function(n,l){let e=0;for(;!await n();){if(e>l)throw new Error(r.l10n.t("Max wait time exhausted"));await(0,w.wait)(100),e+=100}}((async()=>!await g.isFreePort(n)),l)}(T.port),n.deps.logger.info(`Tunneled ${s.ListenTarget.display(l)} to local ${s.ListenTarget.display(T)}`),{localTarget:P.localTarget,sshAuthSock:P.sshAuthSock}}catch(l){const e=l.message||l;throw n.deps.logger.error(`Error establishing tunnel (${e}).`),new Error(r.l10n.t("Error establishing tunnel ({0}).",`${e}`))}};const _=`\n${a.getSshdParentPid}\n\n$sshdPID = getSshdParentPid\n\nwhile ($True) {\n\tif (!(gps -Id $sshdPID)) {\n\t\t"sshd parent died, exit"\n\t\texit 0\n\t}\n\tsleep 30\n}\n`,k="Connected to SSH Host - Please do not close this terminal"},8428:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.getPortForwardingDisabledInteractor=l.getPrereqsWarningInteractor=l.logInstallScriptResult=l.generateSshCommand=l.tryInstall=void 0;const t=e(1398),u=e(729),r=e(3411),o=e(2232),i=e(712),s=e(4788),a=e(3070),c=e(4847),d=e(4430),h=e(4407),f=e(2593),p=e(2869);function m(n,l){const e=(0,u.getInteractorForMsg)((0,o.getScriptStartMarker)(n),"keep");return e.result.then((()=>{l.mark(2)})),e.interactor}function g(n,l){const e={...n,serverConfiguration:{...n.serverConfiguration,connectionToken:n.serverConfiguration.connectionToken&&(0,f.sanitizeConnectionToken)(n.serverConfiguration.connectionToken),execServerToken:n.serverConfiguration.execServerToken&&(0,f.sanitizeConnectionToken)(n.serverConfiguration.execServerToken)}};l.debug(`Parsed server configuration: ${JSON.stringify(e)}`),(0,a.warnForPreviewPlatform)(n.serverConfiguration,l)}async function y(n){const l=(0,u.getInteractorForInstallWarning)(n,p.UnifiedStatusCode.LinuxPrereqs);return l.result.then((async()=>{const n=await t.window.showWarningMessage(t.l10n.t("The remote host may not meet VS Code Server's prerequisites for glibc and libstdc++"),{id:"moreInfo",title:t.l10n.t("More Info")});n&&"moreInfo"===n.id&&await t.env.openExternal(t.Uri.parse("https://aka.ms/vscode-remote/linux-prerequisites"))})),l.interactor}function v(n){const l=(0,u.getInteractorForMsg)("open failed: administratively prohibited");return l.result.then((async l=>{(0,i.detectPortForwardingDisabledAndWarn)(l[0],n)})),l.interactor}l.tryInstall=async function(n,{systemInteractor:l,command:e,revealTerminalEvent:o,usedAuthMethods:a,marker:c}){const w=n.deps,b=(0,u.getInstallScriptOutputInteractor)(c),S=(0,u.getServerErrorLogOutputInteractor)(),C=(0,u.getDownloadRequestInteractor)(c,w.logger),D=new t.CancellationTokenSource,E=new u.RemoteServerProgressInteractor(c,w.progress);let _;const k=await async function(n,l){const e=(0,u.getInteractorForMsg)("","keep"),t=(0,h.getDeferred)(),o=setTimeout((()=>{t.reject(i.SshResolverError.Timeout("Connecting with SSH timed out"))}),(0,r.connectTimeoutMilliseconds)(n,l));return e.result.then((()=>{l.debug("Got some output, clearing connection timeout"),clearTimeout(o)})),{interactor:e.interactor,result:t.promise}}(n.host,w.logger),x=await y(c),T=new u.ComposedInteractor([S.interactor,k.interactor,b.interactor,C.interactor,x,E,m(c,w.timer),v(w.logger)]);w.timer.mark(1),_=(0,d.runSshTerminalCommandWithLogin)(n,{interactor:T,marker:c,systemInteractor:l,command:e,nickname:"install",usedInteractors:a,revealTerminal:o,token:D.token}).catch((n=>{if(n instanceof h.CanceledError)throw i.SshResolverError.Canceled();throw n})),_.then((n=>{w.logger.debug("Install terminal quit with output: "+n)}),(()=>{}));const P=C.result.then((async e=>{await(0,s.downloadAndCopyToHost)(n,l,o,e).catch((n=>{throw n instanceof i.SshResolverError&&n.failureReason===p.UnifiedStatusCode.Canceled&&D.cancel(),n}))}));let I,A;try{let n=Promise.race([b.result,k.result,_]);S.result.then((n=>{A=n})),await Promise.race([n,P]);let l=await n;if(!l)throw i.SshResolverError.Create(p.UnifiedStatusCode.BadInstallScriptResult,"Got bad result from install script");I=l}catch(n){throw w.timer.mark(3),n}w.timer.mark(3),w.logger.debug(`Received install output: ${(0,f.sanitizeInstallScriptOutput)(I)}`);const O=(0,i.handleInstallOutput)(n,I,A);return O?(g(O,w.logger),O.storePlatform=!0,O):null},l.generateSshCommand=async function(n,l,e,t){const u=t?{cmdSegment:["-D",String(t)],allowPortForward:!0}:{};return u.quoteForShell=!0,await(0,c.generateMultiLineCommand)(n,l,e,u)},l.logInstallScriptResult=g,l.getPrereqsWarningInteractor=y,l.getPortForwardingDisabledInteractor=v},8007:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.cleanupKnownHosts=l.tryCleanupScenarioEnvironment=l.setupScenarioEnvironment=l.resetVSCodeSettings=l.createTestLogDir=l.logInfo=l.logVerbose=l.readBaselineConfig=l.createInMemoryMemento=l.MockExtensionContext=void 0;const t=e(6928),u=e(1943),r=e(9896),o=e(9023),i=e(857),s=e(1398),a=e(5317),c=e(2869);function d(){const n=new Map;return{keys:()=>[...n.keys()],get:(l,e)=>n.get(l)??e,update:(l,e)=>(n.set(l,e),Promise.resolve()),setKeysForSync:n=>{},dump:()=>n}}l.MockExtensionContext=class{constructor(n,l,e){this._serviceBrand=void 0,this.extension={id:"ms-vscode-remote.remote-ssh",packageJSON:{name:"remote-ssh"}},this.extensionMode=s.ExtensionMode.Test,this.subscriptions=[],this.workspaceState=d(),this.globalStorageUri=e?function(n){return s.Uri.file(n)}(e):void 0,this.globalState=n??d(),this.storageUri=void 0,this.logUri=s.Uri.file("/mock/log"),this.extensionUri=s.Uri.file("/mock/extension"),this.extensionPath="/mock/extension",this.environmentVariableCollection=new h,this.secrets=new f,this.storagePath="/tmp/storage",this.globalStoragePath="/tmp/globalStorage",this.logPath="/tmp/log",this.languageModelAccessInformation={onDidChange:(new s.EventEmitter).event,canSendRequest:n=>!1}}asAbsolutePath(n){return t.join(this.extensionPath,n)}},l.createInMemoryMemento=d;class h{constructor(){this.persistent=!0}[Symbol.iterator](){throw new Error("Method not implemented.")}replace(n,l){}append(n,l){}prepend(n,l){}get(n){}forEach(n,l){}clear(){}delete(n){}getScoped(n){return this}}class f{constructor(){this.onDidChange=(new s.EventEmitter).event}get(n){return Promise.resolve(void 0)}store(n,l){return Promise.resolve()}delete(n){return Promise.resolve()}}const p=t.resolve(__dirname,"test","baseline.json"),m=t.resolve(__dirname,"test","baseline-configs");function g(n,l,...e){n.verbose&&console.log(...e),l&&l.write(o.format(...e)+"\n")}function y(n,l,...e){console.log(...e),l&&l.write(o.format(...e)+"\n")}async function v(n,l,e){const{id:t}=e,{cleanup:u}=n;if(u){y(0,l,`🧹 [${t}] cleanup`);try{const t=await w(n,l,`docker ps -a --filter "label=remote-ssh.scenario=${e.id}" -q`);await w(n,l,`docker rm -f ${t}`)}catch(n){throw new Error(`Failed cleaning up scenario '${t}': ${n}`)}y(0,l,`🧹 [${t}] cleanup done`)}else y(0,l,`🤨 scenario '${t}' cleanup skipped`)}function w(n,l,e){return new Promise(((t,u)=>{const r=(0,a.exec)(e);let o="";r.stdout?.on("data",(e=>{const t=`${e}\n`;o+=t,g(n,void 0,t),l&&l.write(t)})),r.stderr?.on("data",(e=>{const t=e.toString();g(n,void 0,t),l&&l.write(t)})),r.on("close",(n=>{if(0!==n)u(`Command failed with exit code ${n}`);else{const n=o.match(/exitCode==(\d+)==/);if(n&&n[1]){const l=c.UnifiedStatusCode[n[1]];u({code:n[1],installExitCodeEnum:l})}else t(o)}})),r.on("error",(n=>{u(`Error: ${n.message} `)}))}))}l.readBaselineConfig=function(){const n=r.readFileSync(p,"utf8");return JSON.parse(n)},l.logVerbose=g,l.logInfo=y,l.createTestLogDir=function(){const n=process.env.BASELINE_LOG_PATH||t.join(i.tmpdir(),`ssh-baseline-${Date.now()}`);return r.mkdirSync(n),n},l.resetVSCodeSettings=async function(n){for(const l of Object.keys(n))-1===["has","get","update","inspect"].indexOf(l)&&await n.update(l,void 0,s.ConfigurationTarget.Global)},l.setupScenarioEnvironment=async function(n,l,e){const{id:r,config:o}=e,s=t.join(m,o),a=t.join(i.tmpdir(),`${e.id}-${Date.now()}`);y(0,l,`📦 [${r}] Setting up ${r}`);try{await u.mkdir(a,{recursive:!0}),await u.cp(s,a,{recursive:!0});const e=await w(n,l,`devcontainer up --workspace-folder ${a} --id-label remote-ssh.scenario=${r} --id-label remote-ssh.isTestContainer=true`),t=JSON.parse(e);if(!t||"success"!==t.outcome)throw new Error("'devcontainer up' command was not successful");return t}catch(t){throw console.error(`❌ Failed setting up scenario '${r}': ${t}`),await v(n,l,e),new Error(`Failed setting up scenario '${r}': ${t}`)}},l.tryCleanupScenarioEnvironment=v,l.cleanupKnownHosts=function(){const n=t.join(i.homedir(),".ssh","known_hosts");if(r.existsSync(n)){r.existsSync(`${n}.bak`)||r.copyFileSync(n,`${n}.bak`);const l=r.readFileSync(n,"utf8").split("\n").filter((n=>!n.includes("localhost"))).join("\n");r.writeFileSync(n,l)}}},7361:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.MockTelemetry=l.MockMemento=l.MockLogger=void 0;const t=e(1170),u=e(5880);class r{constructor(n=!1,l){this.logToConsole=!1,this.savedLog="",this.shouldSaveLog=n,this.stream=l}getSavedLog(){return this.savedLog}dumpLog(){return this.savedLog}showLog(){}info(n){this.log(n)}trace(n){this.log(n)}debug(n){this.log(n)}error(n){this.log(n)}logWithoutTimestamp(n,l){this.log(n)}log(n){this.logToConsole&&console.log(n),this.shouldSaveLog&&(this.savedLog=this.savedLog.concat(n,"\n")),this.stream&&this.stream.write(n)}dispose(){}}l.MockLogger=r,l.MockMemento=class{get(n,l){}keys(){return[]}async update(n,l){}};class o extends u.Telemetry{constructor(){super(new t.default(""),0,new r)}}l.MockTelemetry=o},7247:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.generateRandomizedSettings=void 0;const t=e(9896),u=e(6928),r=e(8007),o=["remote.SSH.useLocalServer","remote.SSH.experimental.chat","remote.SSH.logLevel"],i=n=>n[Math.floor(Math.random()*n.length)],s=n=>{if("remote.SSH.defaultExtensions"===n)return i([[],["EditorConfig.EditorConfig"],["EditorConfig.EditorConfig","EditorConfig.EditorConfig"]])},a=n=>{if("remote.SSH.serverInstallPath"===n)return i([""])};l.generateRandomizedSettings=function(n,l){const e={},c=(()=>{const n=u.join(__dirname,"..","package.json");return console.log(`packageFilePath: ${n}`),JSON.parse(t.readFileSync(n,"utf-8")).contributes.configuration.properties})();for(const t in c){if(o.includes(t)){(0,r.logVerbose)(n,l,`WARN: Ignoring key: ${t}`);continue}let u;const d=c[t];"boolean"===d.type?u=Math.random()>=.5:d.enum?u=i(d.enum):"array"===d.type?u=s(t):"string"===d.type&&(u=a(t)),void 0!==u?e[t]=u:(0,r.logVerbose)(n,l,`WARN: Did not randomize '${t}'`)}return e}},4407:(n,l)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.CanceledError=l.sleep=l.getDeferred=void 0,l.getDeferred=function(){let n,l;const e=new Promise(((e,t)=>{n=e,l=t}));return{resolve:n,reject:l,promise:e}},l.sleep=function(n){return new Promise((l=>{setTimeout(l,n)}))};class e extends Error{constructor(){super("Canceled")}}l.CanceledError=e},221:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.withCancellationTokenSource=l.withDisposable=l.dispose=l.addDisposableListener=void 0;const t=e(1398);async function u(n,l){try{return await l()}finally{n.dispose()}}l.addDisposableListener=function(n,l,e){return n.on(l,e),{dispose(){n.removeListener(l,e)}}},l.dispose=function n(l,...e){return Array.isArray(l)?(l.forEach((n=>n&&n.dispose())),[]):0===e.length?l?(l.dispose(),l):void 0:(n(l),n(e),[])},l.withDisposable=u,l.withCancellationTokenSource=function(n){const l=new t.CancellationTokenSource;return u(l,(()=>n(l)))}},3378:(n,l,e)=>{"use strict";let t,u;Object.defineProperty(l,"__esModule",{value:!0}),l.getPackageNlsJson=l.getPackageJson=void 0,l.getPackageJson=function(){return t||(t=e(8330)),t},l.getPackageNlsJson=function(){return u||(u=e(9707)),u??{}}},1990:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.HostInfo=void 0;const t=e(8583),u=e(9278),r=e(4417);class o{constructor(n,l,e,t){this.hostName=n,this.user=l,this.port=e,this.config=t}toString(){return this.user?`${this.user}@${this.hostName}`:this.hostName}static toPathString(n){return t.fast1a32hex(n.toString())}static toAuthorityString(n){if(n.user||n.hostName.toLowerCase()!==n.hostName||n.port||n.hostName.match(/[\/\\\+]/)){const l={hostName:n.hostName};n.user&&(l.user=n.user),n.port&&(l.port=n.port);const e=JSON.stringify(l);return Buffer.from(e,"utf8").toString("hex")}return n.hostName}static async parseWithConfig(n,l){const e=this.parse(l);{const t=await(0,r.getConfigurationForHost)(n,{hostName:l});if(t)return n.trace(`Found relevant configuration for host ${l} in JSON data`),new o(l,e.user,void 0,t)}{const l=`${e.hostName}:${e.port}`,t=await(0,r.getConfigurationForHost)(n,{hostName:l});if(t)return n.trace(`Found relevant configuration for host using hostName='${l}' after parsing data`),new o(l,e.user,void 0,t)}const t=await(0,r.getConfigurationForHost)(n,e);return t?(n.trace(`Found relevant configuration for host '${e.hostName}' after parsing data`),new o(e.hostName,e.user,void 0,t)):(n.trace(`No relevant configuration found for host '${e.hostName}'`),e)}static parse(n){try{const l=JSON.parse(Buffer.from(n,"hex").toString("utf8"));if(l&&l.hostName)return new o(l.hostName,l.user,l.port)}catch(n){}return o.fromString(n)}static fromString(n){const l=n.match(/^(?:(.*)@)?(.+?)$/);if(l){const[,n,e]=l;let t;if(n&&""!==n&&(t=n),u.isIPv6(e))return new o(e,t,void 0);let r=e.match(/^\[(.+?)\](?::(\d+))?$/);if(r){const[,n,l]=r;if(u.isIPv6(n))return new o(n,t,l?parseInt(l,10):void 0)}if(r=e.match(/^(.+?)(?::(\d+))?$/),r){const[,n,l]=r;return new o(n,t,l?parseInt(l,10):void 0)}}return new o(n)}}l.HostInfo=o},4747:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.httpPost=l.httpGet=l.getAgent=void 0;const t=e(8611),u=e(5692),r=e(7016),o=e(1398),i=e(2288);let s;l.getAgent=()=>{if(!s){const n=o.workspace.getConfiguration("http").get("proxy");s=n?new i.HttpsProxyAgent(n):void 0}return s},l.httpGet=function(n,l={},e){return new Promise(((o,i)=>{l={rejectUnauthorized:!1,...l};let s=t.get;if(n){const e=r.parse(n);l={...e},s="https:"===e.protocol?u.get:t.get}s(l,(n=>{let l="";n.on("data",(n=>l+=n)),n.on("end",(()=>{200===n.statusCode?o(l):(e.error("HTTP GET failed with: "+n.statusCode+" "+n.statusMessage),i(new Error(l.trim())))}))})).on("error",(n=>{i(n)}))}))},l.httpPost=function(n,l,e={},o){return new Promise(((i,s)=>{e={rejectUnauthorized:!1,method:"POST",...e};const a=n=>{let l="";n.on("data",(n=>l+=n)),n.on("end",(()=>{200===n.statusCode?i(l):(o.error("HTTP POST failed with: "+n.statusCode+" "+n.statusMessage),s(new Error(l.trim())))}))};let c;if(n){const l=r.parse(n);e={...l},"https:"===l.protocol&&(c=u.request(e,a))}else c=t.request(e,a);c.write(l),c.end()}))}},3001:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.getIPCHandlePath=void 0;const t=e(9023),u=e(6982),r=e(6928),o=e(857);l.getIPCHandlePath=async function(n,l=20){const e=t.promisify(u.randomBytes);return function(n,l){return"win32"===process.platform?`\\\\.\\pipe\\vscode-ssh-${n}-${l}-sock`:process.env.XDG_RUNTIME_DIR?r.join(process.env.XDG_RUNTIME_DIR,`vscode-ssh-${n}-${l}.sock`):r.join(o.tmpdir(),`vscode-ssh-${n}-${l}.sock`)}(n,(await e(l)).toString("hex"))}},3968:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.getLocalExtensionsToInstall=l.rememberLocalExtensions=void 0;const t=e(1398),u=e(3411),r="localExtensions";l.rememberLocalExtensions=async function(n){if(t.env.remoteName)return;const l=t.extensions.all.filter((n=>!n.packageJSON.isBuiltin)).map((n=>n.id));await n.globalState.update(r,l)},l.getLocalExtensionsToInstall=function(n){const l=new Set(n.get(r)||[]);return(0,u.getDefaultExtensionsIfInstalledLocally)().filter((n=>l.has(n)))}},5521:(n,l)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.isPrivateIPv4=void 0;const e=[/^10\./,/^172\.(1[6-9]|2[0-9]|3[0-1])\./,/^192\.168\./];l.isPrivateIPv4=function(n){return e.some((l=>l.test(n)))}},1976:(n,l)=>{"use strict";function e(n,l){const e={};for(let t in n)l(t,n)&&(e[t]=n[t]);return e}function t(n,l){const e={};for(const t of Object.keys(n)){const u=n[t];e[t]=l(u,t)}return e}function u(n){return e(n,((n,l)=>void 0!==l[n]))}Object.defineProperty(l,"__esModule",{value:!0}),l.removeUndefinedsRecursive=l.removeUndefineds=l.mapValues=l.filterObject=void 0,l.filterObject=e,l.mapValues=t,l.removeUndefineds=u,l.removeUndefinedsRecursive=function n(l){return t(u(l),(l=>"object"==typeof l?n(l):l))}},4535:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.isWindowsPath=l.sanitizeFileName=l.mkdirp=l.untildify=void 0;const t=e(857),u=e(9896),r=e(6928),o=e(9023),i=o.promisify(u.mkdir),s=o.promisify(u.exists);async function a(n,l,e){if(!(l>=e||await s(n))){const t=r.dirname(n);t!==n&&await a(t,++l,e),await i(n)}}l.untildify=function(n){return n.replace(/^~($|\/|\\)/,`${t.homedir()}$1`)},l.mkdirp=async function(n){return await a(n,0,100)},l.sanitizeFileName=function(n){return n.replace(/[^a-z0-9._]/g,"-")},l.isWindowsPath=function(n){return/^[a-zA-Z]:\\/.test(n)}},6296:(n,l)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.isWindows=void 0,l.isWindows="win32"===process.platform},5691:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.isFreePort=l.findAnyFreePort=l.findFreePortFrom=l.randomPort=void 0;const t=e(9278);function u(n,l,e){if(0===l)return e(0);const o=new t.Socket;o.once("connect",(()=>(r(o),u(n+1,l-1,e)))),o.once("data",(()=>{})),o.once("error",(t=>(r(o),"ECONNREFUSED"!==t.code?u(n+1,l-1,e):e(n)))),o.connect(n,"127.0.0.1")}function r(n){try{n.removeAllListeners("connect"),n.removeAllListeners("error"),n.end(),n.destroy(),n.unref()}catch(n){console.error(n)}}l.randomPort=function(){return 1025+Math.floor(64510*Math.random())},l.findFreePortFrom=function(n,l=300,e=3e3){let t=!1;return new Promise((r=>{const o=setTimeout((()=>{if(!t)return t=!0,r(0)}),e);u(n,l,(n=>{if(!t)return t=!0,clearTimeout(o),r(n)}))}))},l.findAnyFreePort=function(){return new Promise(((n,l)=>{const e=t.createServer();e.on("error",l),e.listen(0,"127.0.0.1",(()=>{const{port:l}=e.address();e.close((()=>{n(l)}))}))}))},l.isFreePort=async function(n){return new Promise((l=>{const e=new t.Socket;e.once("connect",(()=>{r(e),l(!1)})),e.once("data",(()=>{})),e.once("error",(n=>{r(e),l("ECONNREFUSED"===n.code)})),e.connect(n,"127.0.0.1")}))}},6294:(n,l)=>{"use strict";function e(n){return t(n)+"_"}function t(n){const l=n%26,e=Math.floor(n/26);return(e>0?t(e-1):"")+String.fromCharCode(l+"a".charCodeAt(0))}function u(n,l){l=[...l].sort(((n,l)=>n[0].length-l[0].length));for(let[e,t]of l)n=n.replace(new RegExp(`\\b${e}\\b`,"g"),t);return n}Object.defineProperty(l,"__esModule",{value:!0}),l.minifyNames=l.minNameForNumber=l.minifyPwsh=void 0,l.minifyPwsh=function(n,l){return n=u(n,l.map(((n,l)=>[n,e(l)]))),(n=(n=(n=n.replace(/^(\s*\$[a-z_]+) = /gim,"$1=")).split("\n").filter((n=>!n.match(/^\s*#/))).join("\n")).split("\n").map((n=>n.replace(/^\s+/,""))).join("\n")).replace(/\n\n+/g,"\n")},l.minNameForNumber=e,l.minifyNames=u},9350:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.killTree=void 0;const t=e(6928),u=e(5317),r=e(9023);l.killTree=async function(n,l){let e;if("win32"===process.platform){const l=process.env.WINDIR||"C:\\Windows";e=`${t.join(l,"System32","taskkill.exe")} /F /T /PID ${n}`}else e=`"${t.join(__dirname,"./utils/terminateProcess.sh")}" ${n.toString()}`;try{l.debug(`Killing process with command "${e}"`);const n=await r.promisify(u.exec)(e);n.stdout&&l.debug("stdout: "+n.stdout),n.stderr&&l.debug("stderr: "+n.stderr)}catch(n){l.error("Killing server failed: "+n.message)}}},1872:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.getProductInfo=void 0;const t=e(9896),u=e(6928),r=e(9023),o=e(1398);let i;async function s(){if(!i){const n=await(0,r.promisify)(t.readFile)(u.join(o.env.appRoot,"product.json"),"utf8");i=JSON.parse(n)}return i}l.getProductInfo=async function(){let n=await s();return n.commit&&n.serverDataFolderName||(n={commit:"22e3447b4b410dcf8426bf70743c5dd4030d6122",quality:"insider",serverDataFolderName:".vscode-server-oss",serverApplicationName:"code-server-insiders",version:"dev-insiders"}),n}},8652:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.getProgressOutputString=l.RemoteProgressMessages=void 0;const t=e(1398);l.RemoteProgressMessages={1:t.l10n.t("Downloading VS Code Server"),2:t.l10n.t("Installing VS Code Server")},l.getProgressOutputString=function(n,l){return`${n}%%${l}%%`}},1357:(n,l)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.serverLicense=void 0,l.serverLicense=["*","* Visual Studio Code Server","*","* By using the software, you agree to","* the Visual Studio Code Server License Terms (https://aka.ms/vscode-server-license) and","* the Microsoft Privacy Statement (https://privacy.microsoft.com/en-US/privacystatement).","*"]},2593:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.validateCustomServerPath=l.parseStringMap=l.stripAllNewlines=l.escapeRegExpCharacters=l.splitLines=l.markLine=l.markLines=l.sanitizeCopyofScriptVars=l.sanitizeExtensionId=l.sanitizeConnectionToken=l.sanitizeInstallScriptOutput=l.stripTrailingNewline=l.quoteForShellIfNeeded=l.quoteForShell=l.stripEscapeSequences=l.lastNonemptyLine=void 0;const t=e(6928),u=e(6296),r=e(3070),o=/(?:(?:\x1b\[|\x9B)[=?>!]?[\d;:]*["$#'* ]?[a-zA-Z@^`{}|~])|(:?\x1b\].*?\x07)/g;function i(n){return n&&(n=n.replace(o,"").replace(/\u0008/g,"").replace(/\r/g,"")),n}function s(n,l){return l?`"${n}"`:`'${n}'`}function a(n){return n.replace(/\r?\n$/,"")}function c(n){return n.replace(/[a-z]/g,"a").replace(/[A-Z]/g,"A").replace(/[0-9]/g,"1")}l.lastNonemptyLine=function(n){const l=h(n);if(u.isWindows){let n="";for(let e=l.length-1;e>=0;e--){const t=i(l[e]);if(t.match(/The process tried to write to a nonexistent pipe/))n=t;else if(t)return t}if(n)return n}const e=l.filter((n=>!!n));return e[e.length-1]},l.stripEscapeSequences=i,l.quoteForShell=s,l.quoteForShellIfNeeded=function(n,l){return n.match(/[^a-z0-9]/)?s(n,l):n},l.stripTrailingNewline=a,l.sanitizeInstallScriptOutput=function(n){return function(n){return n.replace(/(connectionToken|execServerToken)==(.*)==/,((n,l,e)=>`${l}==${c(e)}==`))}(n)},l.sanitizeConnectionToken=c,l.sanitizeExtensionId=function(n){return n.replace(/[^a-z0-9\.\-_]/gi,"")};const d={token:c};function h(n){return n.split(/\r?\n/g)}l.sanitizeCopyofScriptVars=function(n){const l={};for(const e in n){const t=n[e],u=d[e];l[e]=u?u(t):t}return l},l.markLines=function(n,l=""){return h(a(n)).map((n=>`${l}> ${n}`)).join("\n")},l.markLine=function(n,l=""){return`${l}> ${n}`},l.splitLines=h,l.escapeRegExpCharacters=function(n){return n.replace(/[\\\{\}\*\+\?\|\^\$\.\[\]\(\)]/g,"\\$&")},l.stripAllNewlines=function(n){return n.replace(/\r?\n/,"")},l.parseStringMap=function(n,l="==",e){n=n.trim().replace(/\r?\n/g,"");const t={};for(let u=0;u<n.length;){const r=n.indexOf(l,u),o=n.indexOf(l,r+l.length);if(-1===r||-1===o)return e.trace("Stopped parsing output early. Remaining text: "+n.substring(u)),t;const i=n.slice(r+l.length,o);t[n.slice(u,r)]=i,u=o+l.length;const s=n.substr(u).match(/^\s+/);s&&s[0]&&(u+=s[0].length)}return t};const f=/^[a-zA-Z]:[\\/](?:[^<>:"|?*\\/]+[\\/]?)*$/,p=/^\/[A-Za-z0-9_\/.\- ]*$/;l.validateCustomServerPath=function(n,l){return!n||!(l&&l!==r.Platform.Windows||!f.test(n)||!t.win32.isAbsolute(n))||!(l&&l!==r.Platform.Linux&&l!==r.Platform.MacOS||!p.test(n)||!t.posix.isAbsolute(n))}},1640:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.defaultSystemInteractor=void 0;const t=e(1398);l.defaultSystemInteractor={createTerminal:t.window.createTerminal,onDidCloseTerminal:t.window.onDidCloseTerminal,onDidWriteTerminalData:t.window.onDidWriteTerminalData}},5880:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.Telemetry=l.createTelemetryReporter=void 0;const t=e(1170),u=e(729),r=e(3411),o=e(2584),i=e(3378),s=e(1976),a=e(2869);l.createTelemetryReporter=async function(n){const l=(0,i.getPackageJson)(),e=new t.default(l.aiKey);return n.subscriptions.push(e),e},l.Telemetry=class{constructor(n,l,e){this.reporter=n,this.resolveAttempt=l,this.logger=e}getCommonMeasures(n,l,e,t){const u=n.computeStats(),r={resolveAttempts:this.resolveAttempt,retries:l,isExecServer:t?1:0,"timing.totalResolveTime":u.totalResolveTime,"timing.preSshTime":u.preSshTime,"timing.establishSshTime":u.establishSshTime,"timing.scriptTime":u.scriptTime,"timing.localDownloadTime":u.localDownloadTime,"timing.scpTime":u.scpTime,"timing.downloadTime":e?.downloadTime,"timing.installTime":e?.installTime,"timing.serverStartTime":e?.serverStartTime,"timing.extInstallTime":e?.extInstallTime};return(0,s.removeUndefineds)(r)}getCommonProperties(n,l,e){return{osReleaseId:(n&&n.serverConfiguration.osReleaseId)??"",arch:(n&&n.serverConfiguration.arch)??"",askedPw:l&&l.has(u.PasswordInteractor.ID)?"1":"0",askedPassphrase:l&&l.has(u.PassphraseInteractor.ID)?"1":"0",asked2fa:l&&l.has(u.TwoFacInteractor.ID)?"1":"0",askedHostKey:l&&l.has(u.FingerprintInteractor.ID)?"1":"0",remoteInConfigFile:e?"1":"0",gotUnrecognizedPrompt:l&&l.has(o.UnrecognizedRequestInteractor.ID)?"1":"0",dynamicForwarding:(0,r.enableDynamicForwarding)()?"1":"0",localServer:(0,r.useLocalServer)()?"1":"0",didLocalDownload:n?.didLocalDownload?"1":"0",installUnpackCode:n?.installUnpackCode?"1":"0"}}getTelemetryLevel(){return this.reporter.telemetryLevel}install(n,l){this.sendTelemetryEvent("resolver",{...this.getCommonProperties(n.installScriptResult,n.usedAuthMethods,n.remoteInConfigFile),outcome:"success"},this.getCommonMeasures(l,n.retries,n.installScriptResult,!!n.execServer))}success(n,l){this.sendTelemetryEvent("resolver",{...this.getCommonProperties(n.installScriptResult,n.usedAuthMethods,n.remoteInConfigFile),outcome:"success"},this.getCommonMeasures(l,n.retries,n.installScriptResult,!!n.execServer))}failure(n,l,e,t,u,r,o){const i={exitCode:t&&t.exitCode,...this.getCommonMeasures(l,u,t,e)},c=(0,s.removeUndefineds)(i);this.sendTelemetryEvent("resolver",{...this.getCommonProperties(t,r,o),outcome:"failure",reason:a.UnifiedStatusCode[n],exitCodeLabel:t?a.UnifiedStatusCode[t.exitCode]:""},c)}reportExtraInfo(n){this.sendTelemetryEvent("extraInfo",{remoteCloud:n?n.toString():""},{})}sendTelemetryEvent(n,l,e){const t={eventName:n,properties:l,measures:e};this.logger.trace(`TELEMETRY: ${JSON.stringify(t)}`),this.reporter.sendTelemetryEvent(n,l,e)}static sendCopilotChatTelemetry(n,l,e){e.trace(`TELEMETRY: ${JSON.stringify(n)}`),l.sendTelemetryEvent("copilotChat",{isDiagnoseWithCopilotSession:`${n.isDiagnoseWithCopilotSession}`,conversationHasHistory:`${n.conversationHasHistory}`},{})}}},7154:(n,l)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.RawTimer=l.Timer=void 0,l.Timer=class{constructor(){this.timer=new e}mark(n){this.timer.mark(n)}computeStats(){return{totalResolveTime:this.timer.getDuration(0,4),preSshTime:this.timer.getDuration(0,1),establishSshTime:this.timer.getDuration(1,2),scriptTime:this.timer.getDuration(1,3),localDownloadTime:this.timer.getDuration(5,6),scpTime:this.timer.getDuration(7,8)}}};class e{constructor(){this.times=new Map}mark(n){this.times.set(n,Date.now())}getDuration(n,l){const e=this.times.get(n),t=this.times.get(l);if("number"==typeof e&&"number"==typeof t)return t-e}}l.RawTimer=e},6444:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.generateUuid=l.insecureRandomString=void 0;const t=e(6982);l.insecureRandomString=function(n=12){let l="";for(let e=0;e<n;e++){l+="0123456789abcdef"[Math.floor(16*Math.random())]}return l},l.generateUuid=function(){return t.randomUUID()}},8214:(n,l)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.wait=void 0,l.wait=async function(n){return new Promise(((l,e)=>{setTimeout((()=>l()),n)}))}},3510:(n,l)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.VariablesManager=void 0,l.VariablesManager=class{constructor(n,l){this.collection=n,this.deps=l,n.persistent=!1}update(n){this.deps.logger.trace(`Updating terminal environments: ${JSON.stringify(n)}`);for(let l in n)this.collection.replace(l,n[l])}}},3505:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.assertVSDA=l.licenseErrorText=void 0;const t="undefined"!=typeof require?require:e(4403),u=e(6982),r=e(6928),o=e(1398);l.licenseErrorText=["You may install and use any number of copies of the software only with Microsoft Visual Studio,","Visual Studio for Mac, Visual Studio Code, Azure DevOps, Team Foundation Server, and successor Microsoft products","and services (collectively, the “Visual Studio Products and Services”) to develop and test your applications.","The software is licensed, not sold. This agreement only gives you some rights to use the software. Microsoft reserves all other rights.","You may not:","work around any technical limitations in the software that only allow you to use it in certain ways;","reverse engineer, decompile or disassemble the software, or otherwise attempt to derive the source code for the software,","except and to the extent required by third party licensing terms governing use of certain open source components that may be included in the software;","remove, minimize, block, or modify any notices of Microsoft or its suppliers in the software;","use the software in any way that is against the law or to create or propagate malware; or","share, publish, distribute, or lease the software (except for any distributable code, subject to the terms above),","provide the software as a stand-alone offering for others to use, or transfer the software or this agreement to any third party."].join(" ");const i="SEE  LICENSE.txt",s=u.scryptSync(l.licenseErrorText,i,24),a=Buffer.from(i);function c(n){try{const l=t.resolve(d("bdf000de72c4f5f5d7cff4fa6dd90b95"),{paths:n}),e=t(l);if(!e[d("0fd50b75eeecb3b44b3932921442f72c")]||!e[d("80c3ae7905cba507debf9b326fc386ab")])return;return e}catch(n){return}}function d(n){const l=u.createDecipheriv("aes-192-cbc",s,a);let e=l.update(n,"hex","utf8");return e+=l.final("utf8"),e}l.assertVSDA=function(){const n=c(t.main?.paths.map((n=>n+d("f70715b752c50649525efc24a1d133eb")))??[])||c([r.posix.join(o.env.appRoot,d("9e4708daf438152c7e63cf9f3b24d92c"))]);if(!n)throw new Error("Remote - SSH is only supported in Microsoft versions of VS Code");return n}},9679:function(n,l,e){"use strict";var t=this&&this.__spreadArrays||function(){for(var n=0,l=0,e=arguments.length;l<e;l++)n+=arguments[l].length;var t=Array(n),u=0;for(l=0;l<e;l++)for(var r=arguments[l],o=0,i=r.length;o<i;o++,u++)t[u]=r[o];return t};Object.defineProperty(l,"__esModule",{value:!0}),l.stubInterface=l.stubConstructor=l.stubObject=void 0;var u=e(7538);function r(n,l){var e=Object.assign({},n),t=function(n){for(var l=[];n=Reflect.getPrototypeOf(n);)Reflect.ownKeys(n).forEach((function(n){"string"==typeof n&&l.push(n)}));return l}(n),r=["__defineGetter__","__defineSetter__","hasOwnProperty","__lookupGetter__","__lookupSetter__","propertyIsEnumerable","toString","valueOf","__proto__","toLocaleString","isPrototypeOf"];for(var o in n)"function"==typeof n[o]&&t.push(o);for(var i=0,s=t;i<s.length;i++)o=s[i],r.includes(o)||(e[o]=n[o]);if(Array.isArray(l))for(var a=0,c=l;a<c.length;a++)e[o=c[a]]=u.stub();else if("object"==typeof l)for(var o in l)e[o]=u.stub(),e[o].returns(l[o]);else for(var d=0,h=t;d<h.length;d++)"function"==typeof n[o=h[d]]&&"constructor"!==o&&(e[o]=u.stub());return e}function o(n){void 0===n&&(n={});var l=r({},n);return new Proxy(l,{get:function(n,l){return n.hasOwnProperty(l)||"then"===l||(n[l]=u.stub()),n[l]}})}l.stubObject=r,l.stubConstructor=function(n){for(var l=[],e=1;e<arguments.length;e++)l[e-1]=arguments[e];return r(new(n.bind.apply(n,t([void 0],l))))},l.stubInterface=o,u.stubObject=r,u.stubInterface=o,l.default=u},7538:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";let sinon;__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{FakeXMLHttpRequest:()=>_FakeXMLHttpRequest,addBehavior:()=>_addBehavior,assert:()=>_assert,createFakeServer:()=>_createFakeServer,createFakeServerWithClock:()=>_createFakeServerWithClock,createSandbox:()=>_createSandbox,createStubInstance:()=>_createStubInstance,default:()=>__WEBPACK_DEFAULT_EXPORT__,defaultConfig:()=>_defaultConfig,expectation:()=>_expectation,fake:()=>_fake,fakeServer:()=>_fakeServer,fakeServerWithClock:()=>_fakeServerWithClock,getFakes:()=>_getFakes,getRestorers:()=>_getRestorers,inject:()=>_inject,match:()=>_match,mock:()=>_mock,replace:()=>_replace,replaceGetter:()=>_replaceGetter,replaceSetter:()=>_replaceSetter,reset:()=>_reset,resetBehavior:()=>_resetBehavior,resetHistory:()=>_resetHistory,restore:()=>_restore,restoreContext:()=>_restoreContext,restoreObject:()=>_restoreObject,serverPrototype:()=>_serverPrototype,setFormatter:()=>_setFormatter,spy:()=>_spy,stub:()=>_stub,timers:()=>_timers,useFakeServer:()=>_useFakeServer,useFakeTimers:()=>_useFakeTimers,useFakeXMLHttpRequest:()=>_useFakeXMLHttpRequest,usingPromise:()=>_usingPromise,verify:()=>_verify,verifyAndRestore:()=>_verifyAndRestore,xhr:()=>_xhr}),function n(l,e,t){function u(o,i){if(!e[o]){if(!l[o]){if(!i&&__webpack_require__(1395))return require(o,!0);if(r)return r(o,!0);var s=new Error("Cannot find module '"+o+"'");throw s.code="MODULE_NOT_FOUND",s}var a=e[o]={exports:{}};l[o][0].call(a.exports,(function(n){return u(l[o][1][n]||n)}),a,a.exports,n,l,e,t)}return e[o].exports}for(var r=void 0,o=0;o<t.length;o++)u(t[o]);return u}({1:[function(n,l,e){sinon=n("./sinon")},{"./sinon":2}],2:[function(n,l,e){var t=n("./sinon/behavior"),u=n("./sinon/create-sandbox"),r=n("./sinon/util/core/extend"),o=n("./sinon/util/fake-timers"),i=n("./sinon/util/core/format"),s=n("nise"),a=n("./sinon/sandbox"),c=n("./sinon/stub"),d={createSandbox:u,assert:n("./sinon/assert"),match:n("@sinonjs/samsam").createMatcher,restoreObject:n("./sinon/restore-object"),expectation:n("./sinon/mock-expectation"),defaultConfig:n("./sinon/util/core/default-config"),setFormatter:i.setFormatter,timers:o.timers,xhr:s.fakeXhr.xhr,FakeXMLHttpRequest:s.fakeXhr.FakeXMLHttpRequest,fakeServer:s.fakeServer,fakeServerWithClock:s.fakeServerWithClock,createFakeServer:s.fakeServer.create.bind(s.fakeServer),createFakeServerWithClock:s.fakeServerWithClock.create.bind(s.fakeServerWithClock),addBehavior:function(n,l){t.addBehavior(c,n,l)}},h=r(new a,d);l.exports=h},{"./sinon/assert":3,"./sinon/behavior":4,"./sinon/create-sandbox":7,"./sinon/mock-expectation":10,"./sinon/restore-object":16,"./sinon/sandbox":17,"./sinon/stub":20,"./sinon/util/core/default-config":22,"./sinon/util/core/extend":24,"./sinon/util/core/format":25,"./sinon/util/fake-timers":38,"@sinonjs/samsam":83,nise:102}],3:[function(n,l,e){var t=n("@sinonjs/commons").prototypes.array,u=n("@sinonjs/commons").calledInOrder,r=n("@sinonjs/samsam").createMatcher,o=n("@sinonjs/commons").orderByFirstCall,i=n("./util/core/times-in-words"),s=n("./util/core/format"),a=n("@sinonjs/commons").prototypes.string.slice,c=n("@sinonjs/commons").global,d=t.slice,h=t.concat,f=t.forEach,p=t.join,m=t.splice;function g(){var n;function l(){var e=d(arguments);f(e,(function(e){e||n.fail("fake is not a spy"),e.proxy&&e.proxy.isSinonProxy?l(e.proxy):("function"!=typeof e&&n.fail(e+" is not a function"),"function"!=typeof e.getCall&&n.fail(e+" is not stubbed"))}))}function e(l,e){var t=l||c;(t.fail||n.fail).call(t,e)}function t(t,u,r){var o=r,i=u;2===arguments.length&&(o=u,i=t),n[t]=function(u){l(u);var r=d(arguments,1);!function(l,e){switch(l){case"notCalled":case"called":case"calledOnce":case"calledTwice":case"calledThrice":0!==e.length&&n.fail(l+" takes 1 argument but was called with "+(e.length+1)+" arguments")}}(t,r),("function"==typeof i?i(u):"function"==typeof u[i]?u[i].apply(u,r):u[i])?n.pass(t):e(this,(u.printf||u.proxy.printf).apply(u,h([o],r)))}}return n={failException:"AssertError",fail:function(l){var e=new Error(l);throw e.name=this.failException||n.failException,e},pass:function(){},callOrder:function(){l.apply(null,arguments);var t="",r="";if(u(arguments))n.pass("callOrder");else{try{t=p(arguments,", ");for(var i=d(arguments),s=i.length;s;)i[--s].called||m(i,s,1);r=p(o(i),", ")}catch(n){}e(this,"expected "+t+" to be called in order but were called as "+r)}},callCount:function(t,u){if(l(t),t.callCount!==u){var r="expected %n to be called "+i(u)+" but was called %c%C";e(this,t.printf(r))}else n.pass("callCount")},expose:function(n,l){if(!n)throw new TypeError("target is null or undefined");var e=l||{},t=void 0===e.prefix?"assert":e.prefix,u=void 0===e.includeFail||Boolean(e.includeFail),r=this;return f(Object.keys(r),(function(l){"expose"===l||!u&&/^(fail)/.test(l)||(n[function(n,l){return!n||/^fail/.test(l)?l:n+a(l,0,1).toUpperCase()+a(l,1)}(t,l)]=r[l])})),n},match:function(l,t){if(r(t).test(l))n.pass("match");else{var u=["expected value to match","    expected = "+s(t),"    actual = "+s(l)];e(this,p(u,"\n"))}}},t("called","expected %n to have been called at least once but was never called"),t("notCalled",(function(n){return!n.called}),"expected %n to not have been called but was called %c%C"),t("calledOnce","expected %n to be called once but was called %c%C"),t("calledTwice","expected %n to be called twice but was called %c%C"),t("calledThrice","expected %n to be called thrice but was called %c%C"),t("calledOn","expected %n to be called with %1 as this but was called with %t"),t("alwaysCalledOn","expected %n to always be called with %1 as this but was called with %t"),t("calledWithNew","expected %n to be called with new"),t("alwaysCalledWithNew","expected %n to always be called with new"),t("calledWith","expected %n to be called with arguments %D"),t("calledWithMatch","expected %n to be called with match %D"),t("alwaysCalledWith","expected %n to always be called with arguments %D"),t("alwaysCalledWithMatch","expected %n to always be called with match %D"),t("calledWithExactly","expected %n to be called with exact arguments %D"),t("calledOnceWithExactly","expected %n to be called once and with exact arguments %D"),t("calledOnceWithMatch","expected %n to be called once and with match %D"),t("alwaysCalledWithExactly","expected %n to always be called with exact arguments %D"),t("neverCalledWith","expected %n to never be called with arguments %*%C"),t("neverCalledWithMatch","expected %n to never be called with match %*%C"),t("threw","%n did not throw exception%C"),t("alwaysThrew","%n did not always throw exception%C"),n}l.exports=g(),l.exports.createAssertObject=g},{"./util/core/format":25,"./util/core/times-in-words":33,"@sinonjs/commons":45,"@sinonjs/samsam":83}],4:[function(n,l,e){var t=n("@sinonjs/commons").prototypes.array,u=n("./util/core/extend"),r=n("@sinonjs/commons").functionName,o=n("./util/core/next-tick"),i=n("@sinonjs/commons").valueToString,s=n("./util/core/export-async-behaviors"),a=t.concat,c=t.join,d=t.reverse,h=t.slice;function f(n,l,e){var t=l[n.replace(/sArg/,"ArgAt")];if(t>=e.length)throw new TypeError(n+" failed: "+(t+1)+" arguments required but only "+e.length+" present")}var p={create:function(n){var l=u({},p);return delete l.create,delete l.addBehavior,delete l.createBehavior,l.stub=n,n.defaultBehavior&&n.defaultBehavior.promiseLibrary&&(l.promiseLibrary=n.defaultBehavior.promiseLibrary),l},isPresent:function(){return"number"==typeof this.callArgAt||this.exception||this.exceptionCreator||"number"==typeof this.returnArgAt||this.returnThis||"number"==typeof this.resolveArgAt||this.resolveThis||"number"==typeof this.throwArgAt||this.fakeFn||this.returnValueDefined},invoke:function(n,l){var e=function(n,l){if("number"==typeof n.callArgAt){f("callsArg",n,l);var e=function(n,l){var e,t=n.callArgAt;if(t>=0)return l[t];-1===t&&(e=l),-2===t&&(e=d(h(l)));for(var u=n.callArgProp,r=0,o=e.length;r<o;++r){if(!u&&"function"==typeof e[r])return e[r];if(u&&e[r]&&"function"==typeof e[r][u])return e[r][u]}return null}(n,l);if("function"!=typeof e)throw new TypeError(function(n,l,e){var t;return n.callArgAt<0?(t=n.callArgProp?r(n.stub)+" expected to yield to '"+i(n.callArgProp)+"', but no object with such a property was passed.":r(n.stub)+" expected to yield, but no callback was passed.",e.length>0&&(t+=" Received ["+c(e,", ")+"]"),t):"argument at index "+n.callArgAt+" is not a function: "+l}(n,e,l));if(!n.callbackAsync)return e.apply(n.callbackContext,n.callbackArguments);o((function(){e.apply(n.callbackContext,n.callbackArguments)}))}}(this,l);if(this.exception)throw this.exception;if(this.exceptionCreator)throw this.exception=this.exceptionCreator(),this.exceptionCreator=void 0,this.exception;if("number"==typeof this.returnArgAt)return f("returnsArg",this,l),l[this.returnArgAt];if(this.returnThis)return n;if("number"==typeof this.throwArgAt)throw f("throwsArg",this,l),l[this.throwArgAt];if(this.fakeFn)return this.fakeFn.apply(n,l);if("number"==typeof this.resolveArgAt)return f("resolvesArg",this,l),(this.promiseLibrary||Promise).resolve(l[this.resolveArgAt]);if(this.resolveThis)return(this.promiseLibrary||Promise).resolve(n);if(this.resolve)return(this.promiseLibrary||Promise).resolve(this.returnValue);if(this.reject)return(this.promiseLibrary||Promise).reject(this.returnValue);if(this.callsThrough)return this.effectiveWrappedMethod().apply(n,l);if(this.callsThroughWithNew){var t=this.effectiveWrappedMethod(),u=h(l);return new(t.bind.apply(t,a([null],u)))}return void 0!==this.returnValue?this.returnValue:"number"==typeof this.callArgAt?e:this.returnValue},effectiveWrappedMethod:function(){for(var n=this.stub;n;n=n.parent)if(n.wrappedMethod)return n.wrappedMethod;throw new Error("Unable to find wrapped method")},onCall:function(n){return this.stub.onCall(n)},onFirstCall:function(){return this.stub.onFirstCall()},onSecondCall:function(){return this.stub.onSecondCall()},onThirdCall:function(){return this.stub.onThirdCall()},withArgs:function(){throw new Error('Defining a stub by invoking "stub.onCall(...).withArgs(...)" is not supported. Use "stub.withArgs(...).onCall(...)" to define sequential behavior for calls with certain arguments.')}};function m(n){return function(){return this.defaultBehavior=this.defaultBehavior||p.create(this),this.defaultBehavior[n].apply(this.defaultBehavior,arguments),this}}p.addBehavior=function(n,l,e){p[l]=function(){return e.apply(this,a([this],h(arguments))),this.stub||this},n[l]=m(l)},p.createBehavior=m;var g=s(p);l.exports=u.nonEnum({},p,g)},{"./util/core/export-async-behaviors":23,"./util/core/extend":24,"./util/core/next-tick":32,"@sinonjs/commons":45}],5:[function(n,l,e){var t=n("./util/core/walk"),u=n("./util/core/get-property-descriptor"),r=n("@sinonjs/commons").prototypes.object.hasOwnProperty,o=n("@sinonjs/commons").prototypes.array.push;function i(n,l,e,t){"function"==typeof u(t,e).value&&r(l,e)&&o(n,l[e])}l.exports=function(n){var l=[];return t(n,i.bind(null,l,n)),l}},{"./util/core/get-property-descriptor":28,"./util/core/walk":36,"@sinonjs/commons":45}],6:[function(n,l,e){var t=n("supports-color");function u(n,l){return!1===t.stdout?n:"["+l+"m"+n+"[0m"}e.red=function(n){return u(n,31)},e.green=function(n){return u(n,32)},e.cyan=function(n){return u(n,96)},e.white=function(n){return u(n,39)},e.bold=function(n){return u(n,1)}},{"supports-color":104}],7:[function(n,l,e){var t=n("@sinonjs/commons").prototypes.array,u=n("./sandbox"),r=t.forEach,o=t.push;function i(n,l,e,t){t&&(l.injectInto&&!(e in l.injectInto)?(l.injectInto[e]=t,o(n.injectedKeys,e)):o(n.args,t))}l.exports=function(n){if(!n)return new u;var l=function(n){var l=new u;return n.useFakeServer&&("object"==typeof n.useFakeServer&&(l.serverPrototype=n.useFakeServer),l.useFakeServer()),n.useFakeTimers&&("object"==typeof n.useFakeTimers?l.useFakeTimers(n.useFakeTimers):l.useFakeTimers()),l}(n);l.args=l.args||[],l.injectedKeys=[],l.injectInto=n.injectInto;var e=l.inject({});return n.properties?r(n.properties,(function(t){var u=e[t]||"sandbox"===t&&l;i(l,n,t,u)})):i(l,n,"sandbox"),l}},{"./sandbox":17,"@sinonjs/commons":45}],8:[function(n,l,e){var t=n("@sinonjs/commons").prototypes.array,u=n("./util/core/is-property-configurable"),r=n("./util/core/export-async-behaviors"),o=n("./util/core/extend"),i=t.slice;function s(n,l,e){"function"==typeof l?n.exceptionCreator=l:"string"==typeof l?n.exceptionCreator=function(){var n=new Error(e||"");return n.name=l,n}:l?n.exception=l:n.exceptionCreator=function(){return new Error("Error")}}var a={callsFake:function(n,l){n.fakeFn=l},callsArg:function(n,l){if("number"!=typeof l)throw new TypeError("argument index is not number");n.callArgAt=l,n.callbackArguments=[],n.callbackContext=void 0,n.callArgProp=void 0,n.callbackAsync=!1},callsArgOn:function(n,l,e){if("number"!=typeof l)throw new TypeError("argument index is not number");n.callArgAt=l,n.callbackArguments=[],n.callbackContext=e,n.callArgProp=void 0,n.callbackAsync=!1},callsArgWith:function(n,l){if("number"!=typeof l)throw new TypeError("argument index is not number");n.callArgAt=l,n.callbackArguments=i(arguments,2),n.callbackContext=void 0,n.callArgProp=void 0,n.callbackAsync=!1},callsArgOnWith:function(n,l,e){if("number"!=typeof l)throw new TypeError("argument index is not number");n.callArgAt=l,n.callbackArguments=i(arguments,3),n.callbackContext=e,n.callArgProp=void 0,n.callbackAsync=!1},usingPromise:function(n,l){n.promiseLibrary=l},yields:function(n){n.callArgAt=-1,n.callbackArguments=i(arguments,1),n.callbackContext=void 0,n.callArgProp=void 0,n.callbackAsync=!1},yieldsRight:function(n){n.callArgAt=-2,n.callbackArguments=i(arguments,1),n.callbackContext=void 0,n.callArgProp=void 0,n.callbackAsync=!1},yieldsOn:function(n,l){n.callArgAt=-1,n.callbackArguments=i(arguments,2),n.callbackContext=l,n.callArgProp=void 0,n.callbackAsync=!1},yieldsTo:function(n,l){n.callArgAt=-1,n.callbackArguments=i(arguments,2),n.callbackContext=void 0,n.callArgProp=l,n.callbackAsync=!1},yieldsToOn:function(n,l,e){n.callArgAt=-1,n.callbackArguments=i(arguments,3),n.callbackContext=e,n.callArgProp=l,n.callbackAsync=!1},throws:s,throwsException:s,returns:function(n,l){n.returnValue=l,n.resolve=!1,n.reject=!1,n.returnValueDefined=!0,n.exception=void 0,n.exceptionCreator=void 0,n.fakeFn=void 0},returnsArg:function(n,l){if("number"!=typeof l)throw new TypeError("argument index is not number");n.returnArgAt=l},throwsArg:function(n,l){if("number"!=typeof l)throw new TypeError("argument index is not number");n.throwArgAt=l},returnsThis:function(n){n.returnThis=!0},resolves:function(n,l){n.returnValue=l,n.resolve=!0,n.resolveThis=!1,n.reject=!1,n.returnValueDefined=!0,n.exception=void 0,n.exceptionCreator=void 0,n.fakeFn=void 0},resolvesArg:function(n,l){if("number"!=typeof l)throw new TypeError("argument index is not number");n.resolveArgAt=l,n.returnValue=void 0,n.resolve=!0,n.resolveThis=!1,n.reject=!1,n.returnValueDefined=!1,n.exception=void 0,n.exceptionCreator=void 0,n.fakeFn=void 0},rejects:function(n,l,e){var t;return"string"==typeof l?(t=new Error(e||"")).name=l:t=l||new Error("Error"),n.returnValue=t,n.resolve=!1,n.resolveThis=!1,n.reject=!0,n.returnValueDefined=!0,n.exception=void 0,n.exceptionCreator=void 0,n.fakeFn=void 0,n},resolvesThis:function(n){n.returnValue=void 0,n.resolve=!1,n.resolveThis=!0,n.reject=!1,n.returnValueDefined=!1,n.exception=void 0,n.exceptionCreator=void 0,n.fakeFn=void 0},callThrough:function(n){n.callsThrough=!0},callThroughWithNew:function(n){n.callsThroughWithNew=!0},get:function(n,l){var e=n.stub||n;return Object.defineProperty(e.rootObj,e.propName,{get:l,configurable:u(e.rootObj,e.propName)}),n},set:function(n,l){var e=n.stub||n;return Object.defineProperty(e.rootObj,e.propName,{set:l,configurable:u(e.rootObj,e.propName)}),n},value:function(n,l){var e=n.stub||n;return Object.defineProperty(e.rootObj,e.propName,{value:l,enumerable:!0,configurable:e.shadowsPropOnPrototype||u(e.rootObj,e.propName)}),n}},c=r(a);l.exports=o({},a,c)},{"./util/core/export-async-behaviors":23,"./util/core/extend":24,"./util/core/is-property-configurable":31,"@sinonjs/commons":45}],9:[function(n,l,e){var t=n("@sinonjs/commons").prototypes.array,u=n("./proxy"),r=n("./util/core/next-tick"),o=t.slice;function i(n){return n instanceof Error?n:new Error(n)}var s=0;function a(n){var l,e=function(){var e,t;arguments.length>0&&(e=arguments[0],t=arguments[arguments.length-1]);var u=t&&"function"==typeof t?t:void 0;return l.firstArg=e,l.lastArg=t,l.callback=u,n&&n.apply(this,arguments)};return(l=u(e,n||e)).displayName="fake",l.id="fake#"+s++,l}l.exports=function(){var n=null;function l(n){if(arguments.length>0&&"function"!=typeof n)throw new TypeError("Expected f argument to be a Function");return a(n)}function e(n,l){return a((function(){var e=arguments[arguments.length-1];if("function"!=typeof e)throw new TypeError("Expected last argument to be a function");n?r((function(){e.apply(null,l)})):e.apply(null,l)}))}return"function"==typeof Promise&&(n=Promise),l.returns=function(n){return a((function(){return n}))},l.throws=function(n){return a((function(){throw i(n)}))},l.resolves=function(l){return a((function(){return n.resolve(l)}))},l.rejects=function(l){return a((function(){return n.reject(i(l))}))},l.usingPromise=function(e){return n=e,l},l.yields=function(){return e(!1,o(arguments))},l.yieldsAsync=function(){return e(!0,o(arguments))},l}()},{"./proxy":15,"./util/core/next-tick":32,"@sinonjs/commons":45}],10:[function(n,l,e){var t=n("@sinonjs/commons").prototypes.array,u=n("./proxy-invoke"),r=n("./proxy-call").toString,o=n("./util/core/times-in-words"),i=n("./util/core/extend"),s=n("@sinonjs/samsam").createMatcher,a=n("./stub"),c=n("./assert"),d=n("@sinonjs/samsam").deepEqual,h=n("./util/core/format"),f=n("@sinonjs/commons").valueToString,p=t.every,m=t.forEach,g=t.push,y=t.slice;function v(n){return"number"==typeof n.maxCalls&&n.callCount===n.maxCalls}function w(n,l){return s.isMatcher(n)&&n.test(l)||!0}var b={minCalls:1,maxCalls:1,create:function(n){var l=i.nonEnum(a(),b);return delete l.create,l.method=n,l},invoke:function(n,l,e){return this.verifyCallAllowed(l,e),u.apply(this,arguments)},atLeast:function(n){if("number"!=typeof n)throw new TypeError("'"+f(n)+"' is not number");return this.limitsSet||(this.maxCalls=null,this.limitsSet=!0),this.minCalls=n,this},atMost:function(n){if("number"!=typeof n)throw new TypeError("'"+f(n)+"' is not number");return this.limitsSet||(this.minCalls=null,this.limitsSet=!0),this.maxCalls=n,this},never:function(){return this.exactly(0)},once:function(){return this.exactly(1)},twice:function(){return this.exactly(2)},thrice:function(){return this.exactly(3)},exactly:function(n){if("number"!=typeof n)throw new TypeError("'"+f(n)+"' is not a number");return this.atLeast(n),this.atMost(n)},met:function(){return!this.failed&&(!("number"==typeof this.minCalls)||this.callCount>=this.minCalls)},verifyCallAllowed:function(n,l){var e=this.expectedArguments;v(this)&&(this.failed=!0,b.fail(this.method+" already called "+o(this.maxCalls))),"expectedThis"in this&&this.expectedThis!==n&&b.fail(this.method+" called with "+f(n)+" as thisValue, expected "+f(this.expectedThis)),"expectedArguments"in this&&(l||b.fail(this.method+" received no arguments, expected "+h(e)),l.length<e.length&&b.fail(this.method+" received too few arguments ("+h(l)+"), expected "+h(e)),this.expectsExactArgCount&&l.length!==e.length&&b.fail(this.method+" received too many arguments ("+h(l)+"), expected "+h(e)),m(e,(function(n,t){w(n,l[t])||b.fail(this.method+" received wrong arguments "+h(l)+", didn't match "+String(e)),d(l[t],n)||b.fail(this.method+" received wrong arguments "+h(l)+", expected "+h(e))}),this))},allowsCall:function(n,l){var e=this.expectedArguments;if(this.met()&&v(this))return!1;if("expectedThis"in this&&this.expectedThis!==n)return!1;if(!("expectedArguments"in this))return!0;var t=l||[];return!(t.length<e.length)&&(!this.expectsExactArgCount||t.length===e.length)&&p(e,(function(n,l){return!!w(n,t[l])&&!!d(t[l],n)}))},withArgs:function(){return this.expectedArguments=y(arguments),this},withExactArgs:function(){return this.withArgs.apply(this,arguments),this.expectsExactArgCount=!0,this},on:function(n){return this.expectedThis=n,this},toString:function(){var n=y(this.expectedArguments||[]);this.expectsExactArgCount||g(n,"[...]");var l,e=r.call({proxy:this.method||"anonymous mock expectation",args:n}).replace(", [...","[, ...")+" "+function(n){var l=n.minCalls,e=n.maxCalls;if("number"==typeof l&&"number"==typeof e){var t=o(l);return l!==e&&(t="at least "+t+" and at most "+o(e)),t}return"number"==typeof l?"at least "+o(l):"at most "+o(e)}(this);return this.met()?"Expectation met: "+e:"Expected "+e+" ("+(0===(l=this.callCount)?"never called":"called "+o(l))+")"},verify:function(){return this.met()?b.pass(String(this)):b.fail(String(this)),!0},pass:function(n){c.pass(n)},fail:function(n){var l=new Error(n);throw l.name="ExpectationError",l}};l.exports=b},{"./assert":3,"./proxy-call":13,"./proxy-invoke":14,"./stub":20,"./util/core/extend":24,"./util/core/format":25,"./util/core/times-in-words":33,"@sinonjs/commons":45,"@sinonjs/samsam":83}],11:[function(n,l,e){var t=n("@sinonjs/commons").prototypes.array,u=n("./mock-expectation"),r=n("./proxy-call").toString,o=n("./util/core/extend"),i=n("@sinonjs/samsam").deepEqual,s=n("./util/core/wrap-method"),a=n("./util/core/use-promise-library"),c=t.concat,d=t.filter,h=t.forEach,f=t.every,p=t.join,m=t.push,g=t.slice,y=t.unshift;function v(n){return n&&"string"!=typeof n?v.create(n):u.create(n||"Anonymous mock")}function w(n,l){h(n||[],l)}o(v,{create:function(n){if(!n)throw new TypeError("object is null");var l=o.nonEnum({},v,{object:n});return delete l.create,l},expects:function(n){if(!n)throw new TypeError("method is falsy");if(this.expectations||(this.expectations={},this.proxies=[],this.failures=[]),!this.expectations[n]){this.expectations[n]=[];var l=this;s(this.object,n,(function(){return l.invokeMethod(n,this,arguments)})),m(this.proxies,n)}var e=u.create(n);return e.wrappedMethod=this.object[n].wrappedMethod,m(this.expectations[n],e),a(this.promiseLibrary,e),e},restore:function(){var n=this.object;w(this.proxies,(function(l){"function"==typeof n[l].restore&&n[l].restore()}))},verify:function(){var n=this.expectations||{},l=this.failures?g(this.failures):[],e=[];return w(this.proxies,(function(t){w(n[t],(function(n){n.met()?m(e,String(n)):m(l,String(n))}))})),this.restore(),l.length>0?u.fail(p(c(l,e),"\n")):e.length>0&&u.pass(p(c(l,e),"\n")),!0},usingPromise:function(n){return this.promiseLibrary=n,this},invokeMethod:function(n,l,e){var t,o=this.expectations&&this.expectations[n]?this.expectations[n]:[],s=e||[],a=d(o,(function(n){var l,e;return l=n.expectedArguments||[],e=s,(!n.expectsExactArgCount||l.length===e.length)&&f(l,(function(n,l){return i(e[l],n)}))})),c=d(a,(function(n){return!n.met()&&n.allowsCall(l,e)}));if(c.length>0)return c[0].apply(l,e);var g=[],v=0;if(h(a,(function(n){n.allowsCall(l,e)?t=t||n:v+=1})),t&&0===v)return t.apply(l,e);h(o,(function(n){m(g,"    "+String(n))})),y(g,"Unexpected call: "+r.call({proxy:n,args:e}));var w=new Error;if(!w.stack)try{throw w}catch(n){}m(this.failures,"Unexpected call: "+r.call({proxy:n,args:e,stack:w.stack})),u.fail(p(g,"\n"))}}),l.exports=v},{"./mock-expectation":10,"./proxy-call":13,"./util/core/extend":24,"./util/core/use-promise-library":34,"./util/core/wrap-method":37,"@sinonjs/commons":45,"@sinonjs/samsam":83}],12:[function(n,l,e){var t=n("@sinonjs/commons").prototypes.array.push;e.incrementCallCount=function(n){n.called=!0,n.callCount+=1,n.notCalled=!1,n.calledOnce=1===n.callCount,n.calledTwice=2===n.callCount,n.calledThrice=3===n.callCount},e.createCallProperties=function(n){n.firstCall=n.getCall(0),n.secondCall=n.getCall(1),n.thirdCall=n.getCall(2),n.lastCall=n.getCall(n.callCount-1)},e.delegateToCalls=function(n,l,e,u,r,o,i){n[l]=function(){if(!this.called)return!!o&&o.apply(this,arguments);if(void 0!==i&&this.callCount!==i)return!1;for(var n,s=0,a=[],c=0,d=this.callCount;c<d;c+=1){var h=(n=this.getCall(c))[u||l].apply(n,arguments);if(t(a,h),h&&(s+=1,e))return!0}return r?a:s===this.callCount}}},{"@sinonjs/commons":45}],13:[function(n,l,e){var t=n("@sinonjs/commons").prototypes.array,u=n("@sinonjs/samsam").createMatcher,r=n("@sinonjs/samsam").deepEqual,o=n("@sinonjs/commons").functionName,i=n("./util/core/format"),s=n("@sinonjs/commons").valueToString,a=t.concat,c=t.filter,d=t.join,h=t.map,f=t.reduce,p=t.slice;function m(n,l,e){var t=o(n)+l;throw e.length&&(t+=" Received ["+d(p(e),", ")+"]"),new Error(t)}var g={calledOn:function(n){return u.isMatcher(n)?n.test(this.thisValue):this.thisValue===n},calledWith:function(){var n=this,l=p(arguments);return!(l.length>n.args.length)&&f(l,(function(l,e,t){return l&&r(n.args[t],e)}),!0)},calledWithMatch:function(){var n=this,l=p(arguments);return!(l.length>n.args.length)&&f(l,(function(l,e,t){var r=n.args[t];return l&&u(e).test(r)}),!0)},calledWithExactly:function(){return arguments.length===this.args.length&&this.calledWith.apply(this,arguments)},notCalledWith:function(){return!this.calledWith.apply(this,arguments)},notCalledWithMatch:function(){return!this.calledWithMatch.apply(this,arguments)},returned:function(n){return r(this.returnValue,n)},threw:function(n){return void 0!==n&&this.exception?this.exception===n||this.exception.name===n:Boolean(this.exception)},calledWithNew:function(){return this.proxy.prototype&&this.thisValue instanceof this.proxy},calledBefore:function(n){return this.callId<n.callId},calledAfter:function(n){return this.callId>n.callId},calledImmediatelyBefore:function(n){return this.callId===n.callId-1},calledImmediatelyAfter:function(n){return this.callId===n.callId+1},callArg:function(n){return this.ensureArgIsAFunction(n),this.args[n]()},callArgOn:function(n,l){return this.ensureArgIsAFunction(n),this.args[n].apply(l)},callArgWith:function(n){return this.callArgOnWith.apply(this,a([n,null],p(arguments,1)))},callArgOnWith:function(n,l){this.ensureArgIsAFunction(n);var e=p(arguments,2);return this.args[n].apply(l,e)},throwArg:function(n){if(n>this.args.length)throw new TypeError("Not enough arguments: "+n+" required but only "+this.args.length+" present");throw this.args[n]},yield:function(){return this.yieldOn.apply(this,a([null],p(arguments,0)))},yieldOn:function(n){var l=p(this.args),e=c(l,(function(n){return"function"==typeof n}))[0];return e||m(this.proxy," cannot yield since no callback was passed.",l),e.apply(n,p(arguments,1))},yieldTo:function(n){return this.yieldToOn.apply(this,a([n,null],p(arguments,1)))},yieldToOn:function(n,l){var e=p(this.args),t=c(e,(function(l){return l&&"function"==typeof l[n]}))[0],u=t&&t[n];return u||m(this.proxy," cannot yield to '"+s(n)+"' since no callback was passed.",e),u.apply(l,p(arguments,2))},toString:function(){var n,l=this.proxy?String(this.proxy)+"(":"";return this.args?(n=h(this.args,(function(n){return i(n)})),l=l+d(n,", ")+")",void 0!==this.returnValue&&(l+=" => "+i(this.returnValue)),this.exception&&(l+=" !"+this.exception.name,this.exception.message&&(l+="("+this.exception.message+")")),this.stack&&(l+=(this.stack.split("\n")[3]||"unknown").replace(/^\s*(?:at\s+|@)?/," at ")),l):":("},ensureArgIsAFunction:function(n){if("function"!=typeof this.args[n])throw new TypeError("Expected argument at position "+n+" to be a Function, but was "+typeof this.args[n])}};function y(n,l,e,t,u,r,o){if("number"!=typeof r)throw new TypeError("Call id is not a number");var i,s;e.length>0&&(i=e[0],s=e[e.length-1]);var a=Object.create(g),c=s&&"function"==typeof s?s:void 0;return a.proxy=n,a.thisValue=l,a.args=e,a.firstArg=i,a.lastArg=s,a.callback=c,a.returnValue=t,a.exception=u,a.callId=r,a.errorWithCallStack=o,a}Object.defineProperty(g,"stack",{enumerable:!0,configurable:!0,get:function(){return this.errorWithCallStack&&this.errorWithCallStack.stack||""}}),g.invokeCallback=g.yield,y.toString=g.toString,l.exports=y},{"./util/core/format":25,"@sinonjs/commons":45,"@sinonjs/samsam":83}],14:[function(n,l,e){var t=n("@sinonjs/commons").prototypes.array,u=n("./proxy-call-util"),r=t.push,o=t.forEach,i=t.concat,s=Error.prototype.constructor,a=Function.prototype.bind,c=0;l.exports=function(n,l,e){var t,d,h=this.matchingFakes(e),f=c++;u.incrementCallCount(this),r(this.thisValues,l),r(this.args,e),r(this.callIds,f),o(h,(function(n){u.incrementCallCount(n),r(n.thisValues,l),r(n.args,e),r(n.callIds,f)})),u.createCallProperties(this),o(h,u.createCallProperties);try{this.invoking=!0,this.getCall(this.callCount-1).calledWithNew()?"object"!=typeof(d=new(a.apply(this.func||n,i([l],e))))&&(d=l):d=(this.func||n).apply(l,e)}catch(n){t=n}finally{delete this.invoking}r(this.exceptions,t),r(this.returnValues,d),o(h,(function(n){r(n.exceptions,t),r(n.returnValues,d)}));var p=new s;try{throw p}catch(n){}if(r(this.errorsWithCallStack,p),o(h,(function(n){r(n.errorsWithCallStack,p)})),u.createCallProperties(this),o(h,u.createCallProperties),void 0!==t)throw t;return d}},{"./proxy-call-util":12,"@sinonjs/commons":45}],15:[function(n,l,e){var t=n("@sinonjs/commons").prototypes.array,u=n("./util/core/extend"),r=n("./util/core/function-to-string"),o=n("./proxy-call"),i=n("./proxy-call-util"),s=n("./proxy-invoke"),a=n("./util/core/format"),c=t.push,d=t.forEach,h=t.slice,f=Object.freeze([]),p={toString:r,named:function(n){this.displayName=n;var l=Object.getOwnPropertyDescriptor(this,"name");return l&&l.configurable&&(l.value=n,Object.defineProperty(this,"name",l)),this},invoke:s,matchingFakes:function(){return f},getCall:function(n){var l=n;return l<0&&(l+=this.callCount),l<0||l>=this.callCount?null:o(this,this.thisValues[l],this.args[l],this.returnValues[l],this.exceptions[l],this.callIds[l],this.errorsWithCallStack[l])},getCalls:function(){var n,l=[];for(n=0;n<this.callCount;n++)c(l,this.getCall(n));return l},calledBefore:function(n){return!!this.called&&(!n.called||this.callIds[0]<n.callIds[n.callIds.length-1])},calledAfter:function(n){return!(!this.called||!n.called)&&this.callIds[this.callCount-1]>n.callIds[0]},calledImmediatelyBefore:function(n){return!(!this.called||!n.called)&&this.callIds[this.callCount-1]===n.callIds[n.callCount-1]-1},calledImmediatelyAfter:function(n){return!(!this.called||!n.called)&&this.callIds[this.callCount-1]===n.callIds[n.callCount-1]+1},formatters:n("./spy-formatters"),printf:function(n){var l,e=this,t=h(arguments,1);return(n||"").replace(/%(.)/g,(function(n,u){return"function"==typeof(l=p.formatters[u])?String(l(e,t)):isNaN(parseInt(u,10))?"%"+u:a(t[u-1])}))},resetHistory:function(){if(this.invoking){var n=new Error("Cannot reset Sinon function while invoking it. Move the call to .resetHistory outside of the callback.");throw n.name="InvalidResetException",n}return this.called=!1,this.notCalled=!0,this.calledOnce=!1,this.calledTwice=!1,this.calledThrice=!1,this.callCount=0,this.firstCall=null,this.secondCall=null,this.thirdCall=null,this.lastCall=null,this.args=[],this.firstArg=null,this.lastArg=null,this.returnValues=[],this.thisValues=[],this.exceptions=[],this.callIds=[],this.errorsWithCallStack=[],this.fakes&&d(this.fakes,(function(n){n.resetHistory()})),this}},m=i.delegateToCalls;m(p,"calledOn",!0),m(p,"alwaysCalledOn",!1,"calledOn"),m(p,"calledWith",!0),m(p,"calledOnceWith",!0,"calledWith",!1,void 0,1),m(p,"calledWithMatch",!0),m(p,"alwaysCalledWith",!1,"calledWith"),m(p,"alwaysCalledWithMatch",!1,"calledWithMatch"),m(p,"calledWithExactly",!0),m(p,"calledOnceWithExactly",!0,"calledWithExactly",!1,void 0,1),m(p,"calledOnceWithMatch",!0,"calledWithMatch",!1,void 0,1),m(p,"alwaysCalledWithExactly",!1,"calledWithExactly"),m(p,"neverCalledWith",!1,"notCalledWith",!1,(function(){return!0})),m(p,"neverCalledWithMatch",!1,"notCalledWithMatch",!1,(function(){return!0})),m(p,"threw",!0),m(p,"alwaysThrew",!1,"threw"),m(p,"returned",!0),m(p,"alwaysReturned",!1,"returned"),m(p,"calledWithNew",!0),m(p,"alwaysCalledWithNew",!1,"calledWithNew"),l.exports=function(n,l){var e=function(n,l){var e;switch(l.length){case 0:default:e=function(){return e.invoke(n,this,h(arguments))};break;case 1:e=function(l){return e.invoke(n,this,h(arguments))};break;case 2:e=function(l,t){return e.invoke(n,this,h(arguments))};break;case 3:e=function(l,t,u){return e.invoke(n,this,h(arguments))};break;case 4:e=function(l,t,u,r){return e.invoke(n,this,h(arguments))};break;case 5:e=function(l,t,u,r,o){return e.invoke(n,this,h(arguments))};break;case 6:e=function(l,t,u,r,o,i){return e.invoke(n,this,h(arguments))};break;case 7:e=function(l,t,u,r,o,i,s){return e.invoke(n,this,h(arguments))};break;case 8:e=function(l,t,u,r,o,i,s,a){return e.invoke(n,this,h(arguments))};break;case 9:e=function(l,t,u,r,o,i,s,a,c){return e.invoke(n,this,h(arguments))};break;case 10:e=function(l,t,u,r,o,i,s,a,c,d){return e.invoke(n,this,h(arguments))};break;case 11:e=function(l,t,u,r,o,i,s,a,c,d,f){return e.invoke(n,this,h(arguments))};break;case 12:e=function(l,t,u,r,o,i,s,a,c,d,f,p){return e.invoke(n,this,h(arguments))}}var t=Object.getOwnPropertyDescriptor(l,"name");return t&&t.configurable&&Object.defineProperty(e,"name",t),u.nonEnum(e,{isSinonProxy:!0,called:!1,notCalled:!0,calledOnce:!1,calledTwice:!1,calledThrice:!1,callCount:0,firstCall:null,firstArg:null,secondCall:null,thirdCall:null,lastCall:null,lastArg:null,args:[],returnValues:[],thisValues:[],exceptions:[],callIds:[],errorsWithCallStack:[]}),e}(n,l);return u(e,n),e.prototype=n.prototype,u.nonEnum(e,p),e}},{"./proxy-call":13,"./proxy-call-util":12,"./proxy-invoke":14,"./spy-formatters":18,"./util/core/extend":24,"./util/core/format":25,"./util/core/function-to-string":26,"@sinonjs/commons":45}],16:[function(n,l,e){var t=n("./util/core/walk-object");function u(n,l){return n[l].restore&&n[l].restore.sinon}function r(n,l){n[l].restore()}l.exports=function(n){return t(r,n,u)}},{"./util/core/walk-object":35}],17:[function(n,l,e){var t=n("@sinonjs/commons").prototypes.array,u=n("./collect-own-methods"),r=n("./util/core/get-property-descriptor"),o=n("./util/core/is-property-configurable"),i=n("@sinonjs/samsam").createMatcher,s=n("./assert"),a=n("./util/fake-timers"),c=n("./mock"),d=n("./spy"),h=n("./stub"),f=n("./fake"),p=n("@sinonjs/commons").valueToString,m=n("nise").fakeServer,g=n("nise").fakeXhr,y=n("./util/core/use-promise-library"),v=t.filter,w=t.forEach,b=t.push,S=t.reverse;function C(n,l){var e=v(n,(function(n){return"function"==typeof n[l]}));w(e,(function(n){n[l]()}))}function D(){var n,l=this,e=[],t=[];function v(n,l){var e=r(n,l);function t(){e.isOwn?Object.defineProperty(n,l,e):delete n[l]}return t.object=n,t.property=l,t}function D(n,l){w(t,(function(e){if(e.object===n&&e.property===l)throw new TypeError("Attempted to replace "+l+" which is already replaced")}))}function E(l,t){var r=l[0];if(void 0===l[1]&&"object"==typeof r){var o=u(t);w(o,(function(n){b(e,n)})),y(n,o)}else b(e,t),y(n,t);return t}l.assert=s.createAssertObject(),l.serverPrototype=m,l.getFakes=function(){return e},l.getRestorers=function(){return t},l.createStubInstance=function(){var l=h.createStubInstance.apply(null,arguments),t=u(l);return w(t,(function(n){b(e,n)})),y(n,t),l},l.inject=function(n){return n.spy=function(){return l.spy.apply(null,arguments)},n.stub=function(){return l.stub.apply(null,arguments)},n.mock=function(){return l.mock.apply(null,arguments)},n.createStubInstance=function(){return l.createStubInstance.apply(l,arguments)},n.fake=function(){return l.fake.apply(null,arguments)},n.replace=function(){return l.replace.apply(null,arguments)},n.replaceSetter=function(){return l.replaceSetter.apply(null,arguments)},n.replaceGetter=function(){return l.replaceGetter.apply(null,arguments)},l.clock&&(n.clock=l.clock),l.server&&(n.server=l.server,n.requests=l.server.requests),n.match=i,n},l.mock=function(){var l=c.apply(null,arguments);return b(e,l),y(n,l),l},l.reset=function(){C(e,"reset"),C(e,"resetHistory")},l.resetBehavior=function(){C(e,"resetBehavior")},l.resetHistory=function(){function n(n){var l=n.resetHistory||n.reset;l&&l.call(n)}w(e,(function(l){if("function"!=typeof l){var e=[];l.get&&b(e,l.get),l.set&&b(e,l.set),w(e,n)}else n(l)}))},l.restore=function(){if(arguments.length)throw new Error("sandbox.restore() does not take any parameters. Perhaps you meant stub.restore()");S(e),C(e,"restore"),e=[],w(t,(function(n){n()})),t=[],l.restoreContext()},l.restoreContext=function(){var n=l.injectedKeys,e=l.injectInto;n&&(w(n,(function(n){delete e[n]})),n=[])},l.replace=function(n,l,e){var u=r(n,l);if(void 0===u)throw new TypeError("Cannot replace non-existent property "+p(l));if(void 0===e)throw new TypeError("Expected replacement argument to be defined");if("function"==typeof u.get)throw new Error("Use sandbox.replaceGetter for replacing getters");if("function"==typeof u.set)throw new Error("Use sandbox.replaceSetter for replacing setters");if(typeof n[l]!=typeof e)throw new TypeError("Cannot replace "+typeof n[l]+" with "+typeof e);return D(n,l),b(t,v(n,l)),n[l]=e,e},l.replaceGetter=function(n,l,e){var u=r(n,l);if(void 0===u)throw new TypeError("Cannot replace non-existent property "+p(l));if("function"!=typeof e)throw new TypeError("Expected replacement argument to be a function");if("function"!=typeof u.get)throw new Error("`object.property` is not a getter");return D(n,l),b(t,v(n,l)),Object.defineProperty(n,l,{get:e,configurable:o(n,l)}),e},l.replaceSetter=function(n,l,e){var u=r(n,l);if(void 0===u)throw new TypeError("Cannot replace non-existent property "+p(l));if("function"!=typeof e)throw new TypeError("Expected replacement argument to be a function");if("function"!=typeof u.set)throw new Error("`object.property` is not a setter");return D(n,l),b(t,v(n,l)),Object.defineProperty(n,l,{set:e,configurable:o(n,l)}),e},l.spy=function(){return E(arguments,d.apply(d,arguments))},l.stub=function(){return E(arguments,h.apply(h,arguments))},l.fake=function(n){var l=f.apply(f,arguments);return b(e,l),l},w(Object.keys(f),(function(n){var t=f[n];"function"==typeof t&&(l.fake[n]=function(){var n=t.apply(t,arguments);return b(e,n),n})})),l.useFakeTimers=function(n){var t=a.useFakeTimers.call(null,n);return l.clock=t,b(e,t),t},l.verify=function(){C(e,"verify")},l.verifyAndRestore=function(){var n;try{l.verify()}catch(l){n=l}if(l.restore(),n)throw n},l.useFakeServer=function(){var n=l.serverPrototype||m;return n&&n.create?(l.server=n.create(),b(e,l.server),l.server):null},l.useFakeXMLHttpRequest=function(){var n=g.useFakeXMLHttpRequest();return b(e,n),n},l.usingPromise=function(t){return n=t,e.promiseLibrary=t,l}}D.prototype.match=i,l.exports=D},{"./assert":3,"./collect-own-methods":5,"./fake":9,"./mock":11,"./spy":19,"./stub":20,"./util/core/get-property-descriptor":28,"./util/core/is-property-configurable":31,"./util/core/use-promise-library":34,"./util/fake-timers":38,"@sinonjs/commons":45,"@sinonjs/samsam":83,nise:102}],18:[function(n,l,e){var t=n("@sinonjs/commons").prototypes.array,u=n("./color"),r=n("@sinonjs/samsam").createMatcher,o=n("./util/core/times-in-words"),i=n("./util/core/format"),s=n("diff"),a=t.join,c=t.map,d=t.push,h=t.slice;function f(n,l,e){var t=e;return n.test(l)||(n.message=u.red(n.message),t&&(t=u.green(t))),t+" "+n.message}function p(n){var l=c(n,(function(l){var e=l.value;return l.added?e=u.green(e):l.removed&&(e=u.red(e)),2===n.length&&(e+=" "),e}));return a(l,"")}function m(n){return"string"==typeof n?JSON.stringify(n):n}l.exports={c:function(n){return o(n.callCount)},n:function(n){return n.toString()},D:function(n,l){for(var e="",t=0,u=n.callCount;t<u;++t){u>1&&(e+="\nCall "+(t+1)+":");for(var o=n.getCall(t).args,a=h(l),c=0;c<o.length||c<a.length;++c){o[c]&&(o[c]=m(o[c])),a[c]&&(a[c]=m(a[c])),e+="\n";var d=c<o.length?i(o[c]):"";if(r.isMatcher(a[c]))e+=f(a[c],o[c],d);else{var g=c<a.length?i(a[c]):"";e+=p(s.diffJson(d,g))}}}return e},C:function(n){for(var l=[],e=0,t=n.callCount;e<t;++e){var u="    "+n.getCall(e).toString();/\n/.test(l[e-1])&&(u="\n"+u),d(l,u)}return l.length>0?"\n"+a(l,"\n"):""},t:function(n){for(var l=[],e=0,t=n.callCount;e<t;++e)d(l,i(n.thisValues[e]));return a(l,", ")},"*":function(n,l){return a(c(l,(function(n){return i(n)})),", ")}}},{"./color":6,"./util/core/format":25,"./util/core/times-in-words":33,"@sinonjs/commons":45,"@sinonjs/samsam":83,diff:87}],19:[function(n,l,e){var t=n("@sinonjs/commons").prototypes.array,u=n("./proxy"),r=n("./util/core/extend"),o=n("@sinonjs/commons").functionName,i=n("./util/core/get-property-descriptor"),s=n("@sinonjs/samsam").deepEqual,a=n("./util/core/is-es-module"),c=n("./proxy-call-util"),d=n("./util/core/walk-object"),h=n("./util/core/wrap-method"),f=n("@sinonjs/commons").valueToString,p=t.forEach,m=t.pop,g=t.push,y=t.slice,v=Array.prototype.filter,w=0;function b(n,l,e){var t=n.matchingArguments;return!(!(t.length<=l.length&&s(y(l,0,t.length),t))||e&&t.length!==l.length)}var S={withArgs:function(){var n=y(arguments),l=m(this.matchingFakes(n,!0));if(l)return l;var e=this,t=this.instantiateFake();return t.matchingArguments=n,t.parent=this,g(this.fakes,t),t.withArgs=function(){return e.withArgs.apply(e,arguments)},p(e.args,(function(n,l){b(t,n)&&(c.incrementCallCount(t),g(t.thisValues,e.thisValues[l]),g(t.args,n),g(t.returnValues,e.returnValues[l]),g(t.exceptions,e.exceptions[l]),g(t.callIds,e.callIds[l]))})),c.createCallProperties(t),t},matchingFakes:function(n,l){return v.call(this.fakes,(function(e){return b(e,n,l)}))}},C=c.delegateToCalls;function D(n){var l,e=n;"function"!=typeof e?e=function(){}:l=o(e);var t=u(e,e);return r.nonEnum(t,S),r.nonEnum(t,{displayName:l||"spy",fakes:[],instantiateFake:D,id:"spy#"+w++}),t}function E(n,l,e){var t,u;if(a(n))throw new TypeError("ES Modules cannot be spied");return l||"function"!=typeof n?l||"object"!=typeof n?n||l?e?(t={},u=i(n,l),p(e,(function(n){t[n]=D(u[n])})),h(n,l,t)):h(n,l,D(n[l])):D((function(){})):d(E,n):D(n)}C(S,"callArg",!1,"callArgWith",!0,(function(){throw new Error(this.toString()+" cannot call arg since it was not yet invoked.")})),S.callArgWith=S.callArg,C(S,"callArgOn",!1,"callArgOnWith",!0,(function(){throw new Error(this.toString()+" cannot call arg since it was not yet invoked.")})),S.callArgOnWith=S.callArgOn,C(S,"throwArg",!1,"throwArg",!1,(function(){throw new Error(this.toString()+" cannot throw arg since it was not yet invoked.")})),C(S,"yield",!1,"yield",!0,(function(){throw new Error(this.toString()+" cannot yield since it was not yet invoked.")})),S.invokeCallback=S.yield,C(S,"yieldOn",!1,"yieldOn",!0,(function(){throw new Error(this.toString()+" cannot yield since it was not yet invoked.")})),C(S,"yieldTo",!1,"yieldTo",!0,(function(n){throw new Error(this.toString()+" cannot yield to '"+f(n)+"' since it was not yet invoked.")})),C(S,"yieldToOn",!1,"yieldToOn",!0,(function(n){throw new Error(this.toString()+" cannot yield to '"+f(n)+"' since it was not yet invoked.")})),r(E,S),l.exports=E},{"./proxy":15,"./proxy-call-util":12,"./util/core/extend":24,"./util/core/get-property-descriptor":28,"./util/core/is-es-module":29,"./util/core/walk-object":35,"./util/core/wrap-method":37,"@sinonjs/commons":45,"@sinonjs/samsam":83}],20:[function(n,l,e){var t=n("@sinonjs/commons").prototypes.array,u=n("./behavior"),r=n("./default-behaviors"),o=n("./proxy"),i=n("@sinonjs/commons").functionName,s=n("@sinonjs/commons").prototypes.object.hasOwnProperty,a=n("./util/core/is-non-existent-property"),c=n("./spy"),d=n("./util/core/extend"),h=n("./util/core/get-property-descriptor"),f=n("./util/core/is-es-module"),p=n("./util/core/wrap-method"),m=n("./throw-on-falsy-object"),g=n("@sinonjs/commons").valueToString,y=n("./util/core/walk-object"),v=t.forEach,w=t.pop,b=t.slice,S=t.sort,C=0;function D(n){var l;function e(){var n=b(arguments),e=l.matchingFakes(n);return _(w(S(e,(function(n,l){return n.matchingArguments.length-l.matchingArguments.length})))||l).invoke(this,arguments)}l=o(e,n||e),d.nonEnum(l,c),d.nonEnum(l,E);var t=n?i(n):null;return d.nonEnum(l,{fakes:[],instantiateFake:D,displayName:t||"stub",defaultBehavior:null,behaviors:[],id:"stub#"+C++}),l}function E(n,l){if(arguments.length>2)throw new TypeError("stub(obj, 'meth', fn) has been removed, see documentation");if(f(n))throw new TypeError("ES Modules cannot be stubbed");if(m.apply(null,arguments),a(n,l))throw new TypeError("Cannot stub non-existent property "+g(l));var e=h(n,l),t="object"==typeof n||"function"==typeof n,u=void 0===l&&t,r=!n&&void 0===l,o=t&&void 0!==l&&(void 0===e||"function"!=typeof e.value);if(u)return y(E,n);if(r)return D();var i=D("function"==typeof e.value?e.value:null);return d.nonEnum(i,{rootObj:n,propName:l,shadowsPropOnPrototype:!e.isOwn,restore:function(){void 0!==e&&e.isOwn?Object.defineProperty(n,l,e):delete n[l]}}),o?i:p(n,l,i)}function _(n){var l=n.behaviors[n.callCount-1];return l&&l.isPresent()?l:function(n){return n.defaultBehavior||function(n){return n.parent&&_(n.parent)}(n)||u.create(n)}(n)}E.createStubInstance=function(n,l){if("function"!=typeof n)throw new TypeError("The constructor should be a function.");var e=E(Object.create(n.prototype));return v(Object.keys(l||{}),(function(n){if(!(n in e))throw new Error("Cannot stub "+n+". Property does not exist!");var t=l[n];t&&t.createStubInstance?e[n]=t:e[n].returns(t)})),e};var k={resetBehavior:function(){this.defaultBehavior=null,this.behaviors=[],delete this.returnValue,delete this.returnArgAt,delete this.throwArgAt,delete this.resolveArgAt,delete this.fakeFn,this.returnThis=!1,this.resolveThis=!1,v(this.fakes,(function(n){n.resetBehavior()}))},reset:function(){this.resetHistory(),this.resetBehavior()},onCall:function(n){return this.behaviors[n]||(this.behaviors[n]=u.create(this)),this.behaviors[n]},onFirstCall:function(){return this.onCall(0)},onSecondCall:function(){return this.onCall(1)},onThirdCall:function(){return this.onCall(2)},withArgs:function(){var n=c.withArgs.apply(this,arguments);return this.defaultBehavior&&this.defaultBehavior.promiseLibrary&&(n.defaultBehavior=n.defaultBehavior||u.create(n),n.defaultBehavior.promiseLibrary=this.defaultBehavior.promiseLibrary),n}};v(Object.keys(u),(function(n){s(u,n)&&!s(k,n)&&"create"!==n&&"invoke"!==n&&(k[n]=u.createBehavior(n))})),v(Object.keys(r),(function(n){s(r,n)&&!s(k,n)&&u.addBehavior(E,n,r[n])})),d(E,k),l.exports=E},{"./behavior":4,"./default-behaviors":8,"./proxy":15,"./spy":19,"./throw-on-falsy-object":21,"./util/core/extend":24,"./util/core/get-property-descriptor":28,"./util/core/is-es-module":29,"./util/core/is-non-existent-property":30,"./util/core/walk-object":35,"./util/core/wrap-method":37,"@sinonjs/commons":45}],21:[function(n,l,e){var t=n("@sinonjs/commons").valueToString;l.exports=function(n,l){if(l&&!n){var e=null===n?"null":"undefined";throw new Error("Trying to stub property '"+t(l)+"' of "+e)}}},{"@sinonjs/commons":45}],22:[function(n,l,e){l.exports={injectInto:null,properties:["spy","stub","mock","clock","server","requests","fake","replace","replaceSetter","replaceGetter","createStubInstance"],useFakeTimers:!0,useFakeServer:!0}},{}],23:[function(n,l,e){var t=n("@sinonjs/commons").prototypes.array.reduce;l.exports=function(n){return t(Object.keys(n),(function(l,e){return e.match(/^(callsArg|yields)/)&&!e.match(/Async/)&&(l[e+"Async"]=function(){var l=n[e].apply(this,arguments);return this.callbackAsync=!0,l}),l}),{})}},{"@sinonjs/commons":45}],24:[function(n,l,e){var t=n("@sinonjs/commons").prototypes.array,u=n("@sinonjs/commons").prototypes.object.hasOwnProperty,r=t.join,o=t.push,i=t.slice,s=function(){var n={constructor:function(){return"0"},toString:function(){return"1"},valueOf:function(){return"2"},toLocaleString:function(){return"3"},prototype:function(){return"4"},isPrototypeOf:function(){return"5"},propertyIsEnumerable:function(){return"6"},hasOwnProperty:function(){return"7"},length:function(){return"8"},unique:function(){return"9"}},l=[];for(var e in n)u(n,e)&&o(l,n[e]());return"0123456789"!==r(l,"")}();function a(n,l,e){var t,r,o;for(r=0;r<l.length;r++){for(o in t=l[r])u(t,o)&&e(n,t,o);s&&u(t,"toString")&&t.toString!==n.toString&&(n.toString=t.toString)}return n}l.exports=function(n){return a(n,i(arguments,1),(function(n,l,e){var t=Object.getOwnPropertyDescriptor(n,e),u=Object.getOwnPropertyDescriptor(l,e);("name"!==e||t.writable)&&Object.defineProperty(n,e,{configurable:u.configurable,enumerable:u.enumerable,writable:u.writable,value:u.value})}))},l.exports.nonEnum=function(n){return a(n,i(arguments,1),(function(n,l,e){Object.defineProperty(n,e,{value:l[e],enumerable:!1,configurable:!0,writable:!0})}))}},{"@sinonjs/commons":45}],25:[function(n,l,e){var t,u=n("util").inspect;function r(){return t?t.apply(null,arguments):u.apply(u,arguments)}r.setFormatter=function(n){if("function"!=typeof n)throw new Error("format.setFormatter must be called with a function");t=n},l.exports=r},{util:108}],26:[function(n,l,e){l.exports=function(){var n,l,e;if(this.getCall&&this.callCount)for(n=this.callCount;n--;)for(l in e=this.getCall(n).thisValue)try{if(e[l]===this)return l}catch(n){}return this.displayName||"sinon fake"}},{}],27:[function(n,l,e){function t(n){setTimeout(n,0)}l.exports=function(n,l){return"object"==typeof n&&"function"==typeof n.nextTick?n.nextTick:"function"==typeof l?l:t}},{}],28:[function(n,l,e){l.exports=function(n,l){for(var e,t=n,u=Boolean(n&&Object.getOwnPropertyDescriptor(n,l));t&&!(e=Object.getOwnPropertyDescriptor(t,l));)t=Object.getPrototypeOf(t);return e&&(e.isOwn=u),e}},{}],29:[function(n,l,e){l.exports=function(n){return n&&"undefined"!=typeof Symbol&&"Module"===n[Symbol.toStringTag]&&Object.isSealed(n)}},{}],30:[function(n,l,e){l.exports=function(n,l){return n&&void 0!==l&&!(l in n)}},{}],31:[function(n,l,e){var t=n("./get-property-descriptor");l.exports=function(n,l){var e=t(n,l);return!e||e.configurable}},{"./get-property-descriptor":28}],32:[function(n,l,e){var t=n("@sinonjs/commons").global,u=n("./get-next-tick");l.exports=u(t.process,t.setImmediate)},{"./get-next-tick":27,"@sinonjs/commons":45}],33:[function(n,l,e){var t=[null,"once","twice","thrice"];l.exports=function(n){return t[n]||(n||0)+" times"}},{}],34:[function(n,l,e){var t=Array.prototype.forEach;l.exports=function n(l,e){void 0!==l&&(Array.isArray(e)?t.call(e,n.bind(null,l)):"function"==typeof e.usingPromise&&e.usingPromise(l))}},{}],35:[function(n,l,e){var t=n("@sinonjs/commons").functionName,u=n("./get-property-descriptor"),r=n("./walk");l.exports=function(n,l,e){var o=!1,i=t(n);if(!l)throw new Error("Trying to "+i+" object but received "+String(l));if(r(l,(function(t,r){r!==Object.prototype&&"constructor"!==t&&"function"==typeof u(r,t).value&&(e?e(l,t)&&(o=!0,n(l,t)):(o=!0,n(l,t)))})),!o)throw new Error("Expected to "+i+" methods on object but found none");return l}},{"./get-property-descriptor":28,"./walk":36,"@sinonjs/commons":45}],36:[function(n,l,e){var t=n("@sinonjs/commons").prototypes.array.forEach;function u(n,l,e,r,o){var i,s;if("function"==typeof Object.getOwnPropertyNames)t(Object.getOwnPropertyNames(n),(function(t){if(!0!==o[t]){o[t]=!0;var u="function"==typeof Object.getOwnPropertyDescriptor(n,t).get?r:n;l.call(e,t,u)}})),(i=Object.getPrototypeOf(n))&&u(i,l,e,r,o);else for(s in n)l.call(e,n[s],s,n)}l.exports=function(n,l,e){return u(n,l,e,n,{})}},{"@sinonjs/commons":45}],37:[function(n,l,e){var t=n("./get-property-descriptor"),u=n("./extend"),r=n("@sinonjs/commons").prototypes.object.hasOwnProperty,o=n("@sinonjs/commons").valueToString;function i(n,l){for(var e in l)r(n,e)||(n[e]=l[e])}var s="keys"in Object;l.exports=function(n,l,e){if(!n)throw new TypeError("Should wrap property of object");if("function"!=typeof e&&"object"!=typeof e)throw new TypeError("Method wrapper should be a function or a property descriptor");function a(n){var e,t;if("function"==typeof(t=n)||Boolean(t&&t.constructor&&t.call&&t.apply)){if(n.restore&&n.restore.sinon)e=new TypeError("Attempted to wrap "+o(l)+" which is already wrapped");else if(n.calledBefore){var u=n.returns?"stubbed":"spied on";e=new TypeError("Attempted to wrap "+o(l)+" which is already "+u)}}else e=new TypeError("Attempted to wrap "+typeof n+" property "+o(l)+" as function");if(e)throw n&&n.stackTraceError&&(e.stack+="\n--------------\n"+n.stackTraceError.stack),e}var c,d,h,f;function p(){a(d=n[l]),n[l]=e,e.displayName=l}var m=n.hasOwnProperty?n.hasOwnProperty(l):r(n,l);if(s){var g="function"==typeof e?{value:e}:e;if((f=t(n,l))?f.restore&&f.restore.sinon&&(c=new TypeError("Attempted to wrap "+l+" which is already wrapped")):c=new TypeError("Attempted to wrap "+typeof d+" property "+l+" as function"),c)throw f&&f.stackTraceError&&(c.stack+="\n--------------\n"+f.stackTraceError.stack),c;var y=Object.keys(g);for(h=0;h<y.length;h++)a(d=f[y[h]]);for(i(g,f),h=0;h<y.length;h++)i(g[y[h]],f[y[h]]);Object.defineProperty(n,l,g),"function"==typeof e&&n[l]!==e&&(delete n[l],p())}else p();return u.nonEnum(e,{displayName:l,wrappedMethod:d,stackTraceError:new Error("Stack Trace for original"),restore:function(){if(m)s&&Object.defineProperty(n,l,f);else try{delete n[l]}catch(n){}if(s){var u=t(n,l);u&&u.value===e&&(n[l]=d)}else n[l]===e&&(n[l]=d)}}),e.restore.sinon=!0,s||i(e,d),e}},{"./extend":24,"./get-property-descriptor":28,"@sinonjs/commons":45}],38:[function(n,l,e){var t=n("./core/extend"),u=n("@sinonjs/fake-timers"),r=n("@sinonjs/commons").global;function o(n,l){var e=u;null!==l&&"object"==typeof l&&(e=u.withGlobal(l));var t=e.install(n);return t.restore=t.uninstall,t}function i(n,l){var e=r[l];void 0!==e&&(n[l]=e)}e.useFakeTimers=function(n){var l=("number"==typeof n||n instanceof Date)&&1===arguments.length,e=null!==n&&"object"==typeof n&&1===arguments.length;if(void 0===n)return o({now:0});if(l)return o({now:n});if(e){var u=t.nonEnum({},n),r=u.global;return delete u.global,o(u,r)}throw new TypeError("useFakeTimers expected epoch or config object. See https://github.com/sinonjs/sinon")},e.clock={create:function(n){return u.createClock(n)}};var s={setTimeout,clearTimeout,setInterval,clearInterval,Date};i(s,"setImmediate"),i(s,"clearImmediate"),e.timers=s},{"./core/extend":24,"@sinonjs/commons":45,"@sinonjs/fake-timers":57}],39:[function(n,l,e){var t=n("./prototypes/array").every;function u(n,l,e,t){var u=!0;return e!==t.length-1&&(u=l.calledBefore(t[e+1])),!(!function(n,l){return void 0===n[l.id]&&(n[l.id]=0),n[l.id]<l.callCount}(n,l)||!u||(n[l.id]+=1,0))}l.exports=function(n){return t(arguments.length>1?arguments:n,u.bind(null,{}))}},{"./prototypes/array":47}],40:[function(n,l,e){var t=n("./function-name");l.exports=function(n){return n.constructor&&n.constructor.name||"function"==typeof n.constructor&&t(n.constructor)||null}},{"./function-name":43}],41:[function(n,l,e){e.wrap=function(n,l){var t=function(){return e.printWarning(l),n.apply(this,arguments)};return n.prototype&&(t.prototype=n.prototype),t},e.defaultMsg=function(n,l){return n+"."+l+" is deprecated and will be removed from the public API in a future version of "+n+"."},e.printWarning=function(n){"object"==typeof process&&process.emitWarning?process.emitWarning(n):console.info?console.info(n):console.log(n)}},{}],42:[function(n,l,e){l.exports=function(n,l){var e=!0;try{n.forEach((function(){if(!l.apply(this,arguments))throw new Error}))}catch(n){e=!1}return e}},{}],43:[function(n,l,e){l.exports=function(n){if(!n)return"";try{return n.displayName||n.name||(String(n).match(/function ([^\s(]+)/)||[])[1]}catch(n){return""}}},{}],44:[function(n,l,e){var t;t="undefined"!=typeof global?global:"undefined"!=typeof window?window:self,l.exports=t},{}],45:[function(n,l,e){l.exports={global:n("./global"),calledInOrder:n("./called-in-order"),className:n("./class-name"),deprecated:n("./deprecated"),every:n("./every"),functionName:n("./function-name"),orderByFirstCall:n("./order-by-first-call"),prototypes:n("./prototypes"),typeOf:n("./type-of"),valueToString:n("./value-to-string")}},{"./called-in-order":39,"./class-name":40,"./deprecated":41,"./every":42,"./function-name":43,"./global":44,"./order-by-first-call":46,"./prototypes":50,"./type-of":55,"./value-to-string":56}],46:[function(n,l,e){var t=n("./prototypes/array").sort,u=n("./prototypes/array").slice;function r(n,l){var e=n.getCall(0),t=l.getCall(0);return(e&&e.callId||-1)<(t&&t.callId||-1)?-1:1}l.exports=function(n){return t(u(n),r)}},{"./prototypes/array":47}],47:[function(n,l,e){var t=n("./copy-prototype");l.exports=t(Array.prototype)},{"./copy-prototype":48}],48:[function(n,l,e){var t=Function.call;l.exports=function(n){return Object.getOwnPropertyNames(n).reduce((function(l,e){return"size"!==e&&"caller"!==e&&"callee"!==e&&"arguments"!==e&&"function"==typeof n[e]&&(l[e]=t.bind(n[e])),l}),Object.create(null))}},{}],49:[function(n,l,e){var t=n("./copy-prototype");l.exports=t(Function.prototype)},{"./copy-prototype":48}],50:[function(n,l,e){l.exports={array:n("./array"),function:n("./function"),map:n("./map"),object:n("./object"),set:n("./set"),string:n("./string")}},{"./array":47,"./function":49,"./map":51,"./object":52,"./set":53,"./string":54}],51:[function(n,l,e){var t=n("./copy-prototype");l.exports=t(Map.prototype)},{"./copy-prototype":48}],52:[function(n,l,e){var t=n("./copy-prototype");l.exports=t(Object.prototype)},{"./copy-prototype":48}],53:[function(n,l,e){var t=n("./copy-prototype");l.exports=t(Set.prototype)},{"./copy-prototype":48}],54:[function(n,l,e){var t=n("./copy-prototype");l.exports=t(String.prototype)},{"./copy-prototype":48}],55:[function(n,l,e){var t=n("type-detect");l.exports=function(n){return t(n).toLowerCase()}},{"type-detect":105}],56:[function(n,l,e){l.exports=function(n){return n&&n.toString?n.toString():String(n)}},{}],57:[function(require,module,exports){var globalObject=require("@sinonjs/commons").global;function withGlobal(_global){var userAgent=_global.navigator&&_global.navigator.userAgent,isRunningInIE=userAgent&&userAgent.indexOf("MSIE ")>-1,maxTimeout=Math.pow(2,31)-1,NOOP=function(){},NOOP_ARRAY=function(){return[]},timeoutResult=_global.setTimeout(NOOP,0),addTimerReturnsObject="object"==typeof timeoutResult,hrtimePresent=_global.process&&"function"==typeof _global.process.hrtime,hrtimeBigintPresent=hrtimePresent&&"function"==typeof _global.process.hrtime.bigint,nextTickPresent=_global.process&&"function"==typeof _global.process.nextTick,utilPromisify=_global.process&&require("util").promisify,performancePresent=_global.performance&&"function"==typeof _global.performance.now,hasPerformancePrototype=_global.Performance&&(typeof _global.Performance).match(/^(function|object)$/),queueMicrotaskPresent=_global.hasOwnProperty("queueMicrotask"),requestAnimationFramePresent=_global.requestAnimationFrame&&"function"==typeof _global.requestAnimationFrame,cancelAnimationFramePresent=_global.cancelAnimationFrame&&"function"==typeof _global.cancelAnimationFrame,requestIdleCallbackPresent=_global.requestIdleCallback&&"function"==typeof _global.requestIdleCallback,cancelIdleCallbackPresent=_global.cancelIdleCallback&&"function"==typeof _global.cancelIdleCallback,setImmediatePresent=_global.setImmediate&&"function"==typeof _global.setImmediate;isRunningInIE&&(_global.setTimeout=_global.setTimeout,_global.clearTimeout=_global.clearTimeout,_global.setInterval=_global.setInterval,_global.clearInterval=_global.clearInterval,_global.Date=_global.Date),setImmediatePresent&&(_global.setImmediate=_global.setImmediate,_global.clearImmediate=_global.clearImmediate),_global.clearTimeout(timeoutResult);var NativeDate=_global.Date,uniqueTimerId=1;function isNumberFinite(n){return Number.isFinite?Number.isFinite(n):"number"==typeof n&&isFinite(n)}function parseTime(n){if(!n)return 0;var l,e=n.split(":"),t=e.length,u=t,r=0;if(t>3||!/^(\d\d:){0,2}\d\d?$/.test(n))throw new Error("tick only understands numbers, 'm:s' and 'h:m:s'. Each part must be two digits");for(;u--;){if((l=parseInt(e[u],10))>=60)throw new Error("Invalid time "+n);r+=l*Math.pow(60,t-u-1)}return 1e3*r}function nanoRemainder(n){var l=1e6,e=1e6*n%l,t=e<0?e+l:e;return Math.floor(t)}function getEpoch(n){if(!n)return 0;if("function"==typeof n.getTime)return n.getTime();if("number"==typeof n)return n;throw new TypeError("now should be milliseconds since UNIX epoch")}function inRange(n,l,e){return e&&e.callAt>=n&&e.callAt<=l}function mirrorDateProperties(n,l){var e;for(e in l)l.hasOwnProperty(e)&&(n[e]=l[e]);return l.now?n.now=function(){return n.clock.now}:delete n.now,l.toSource?n.toSource=function(){return l.toSource()}:delete n.toSource,n.toString=function(){return l.toString()},n.prototype=l.prototype,n.parse=l.parse,n.UTC=l.UTC,n.prototype.toUTCString=l.prototype.toUTCString,n}function createDate(){return mirrorDateProperties((function n(l,e,t,u,r,o,i){if(!(this instanceof n))return new NativeDate(n.clock.now).toString();switch(arguments.length){case 0:return new NativeDate(n.clock.now);case 1:return new NativeDate(l);case 2:return new NativeDate(l,e);case 3:return new NativeDate(l,e,t);case 4:return new NativeDate(l,e,t,u);case 5:return new NativeDate(l,e,t,u,r);case 6:return new NativeDate(l,e,t,u,r,o);default:return new NativeDate(l,e,t,u,r,o,i)}}),NativeDate)}function enqueueJob(n,l){n.jobs||(n.jobs=[]),n.jobs.push(l)}function runJobs(n){if(n.jobs){for(var l=0;l<n.jobs.length;l++){var e=n.jobs[l];if(e.func.apply(null,e.args),n.loopLimit&&l>n.loopLimit)throw new Error("Aborting after running "+n.loopLimit+" timers, assuming an infinite loop!")}n.jobs=[]}}function addTimer(n,l){if(void 0===l.func)throw new Error("Callback must be provided to timer calls");if(l.type=l.immediate?"Immediate":"Timeout",l.hasOwnProperty("delay")&&(isNumberFinite(l.delay)||(l.delay=0),l.delay=l.delay>maxTimeout?1:l.delay,l.delay=Math.max(0,l.delay)),l.hasOwnProperty("interval")&&(l.type="Interval",l.interval=l.interval>maxTimeout?1:l.interval),l.hasOwnProperty("animation")&&(l.type="AnimationFrame",l.animation=!0),n.timers||(n.timers={}),l.id=uniqueTimerId++,l.createdAt=n.now,l.callAt=n.now+(parseInt(l.delay)||(n.duringTick?1:0)),n.timers[l.id]=l,addTimerReturnsObject){var e={id:l.id,ref:function(){return e},unref:function(){return e},refresh:function(){return e}};return e}return l.id}function compareTimers(n,l){return n.callAt<l.callAt?-1:n.callAt>l.callAt?1:n.immediate&&!l.immediate?-1:!n.immediate&&l.immediate?1:n.createdAt<l.createdAt?-1:n.createdAt>l.createdAt?1:n.id<l.id?-1:n.id>l.id?1:void 0}function firstTimerInRange(n,l,e){var t,u=n.timers,r=null;for(t in u)u.hasOwnProperty(t)&&(!inRange(l,e,u[t])||r&&1!==compareTimers(r,u[t])||(r=u[t]));return r}function firstTimer(n){var l,e=n.timers,t=null;for(l in e)e.hasOwnProperty(l)&&(t&&1!==compareTimers(t,e[l])||(t=e[l]));return t}function lastTimer(n){var l,e=n.timers,t=null;for(l in e)e.hasOwnProperty(l)&&(t&&-1!==compareTimers(t,e[l])||(t=e[l]));return t}function callTimer(clock,timer){"number"==typeof timer.interval?clock.timers[timer.id].callAt+=timer.interval:delete clock.timers[timer.id],"function"==typeof timer.func?timer.func.apply(null,timer.args):eval(timer.func)}function clearTimer(n,l,e){if(l){n.timers||(n.timers={});var t="object"==typeof l?l.id:l;if(n.timers.hasOwnProperty(t)){var u=n.timers[t];if(u.type!==e){var r="AnimationFrame"===e?"cancelAnimationFrame":"clear"+e,o="AnimationFrame"===u.type?"requestAnimationFrame":"set"+u.type;throw new Error("Cannot clear timer: timer created with "+o+"() but cleared with "+r+"()")}delete n.timers[t]}}}function uninstall(n,l,e){var t,u,r;for(u=0,r=n.methods.length;u<r;u++)if("hrtime"===(t=n.methods[u])&&l.process)l.process.hrtime=n._hrtime;else if("nextTick"===t&&l.process)l.process.nextTick=n._nextTick;else if("performance"===t){var o=Object.getOwnPropertyDescriptor(n,"_"+t);o&&o.get&&!o.set?Object.defineProperty(l,t,o):o.configurable&&(l[t]=n["_"+t])}else if(l[t]&&l[t].hadOwnProperty)l[t]=n["_"+t],"clearInterval"===t&&!0===e.shouldAdvanceTime&&l[t](n.attachedInterval);else try{delete l[t]}catch(n){}return n.methods=[],n.timers?Object.keys(n.timers).map((function(l){return n.timers[l]})):[]}function hijackMethod(n,l,e){var t;if(e[l].hadOwnProperty=Object.prototype.hasOwnProperty.call(n,l),e["_"+l]=n[l],"Date"===l){var u=mirrorDateProperties(e[l],n[l]);n[l]=u}else if("performance"===l){var r=Object.getOwnPropertyDescriptor(n,l);if(r&&r.get&&!r.set){Object.defineProperty(e,"_"+l,r);var o=Object.getOwnPropertyDescriptor(e,l);Object.defineProperty(n,l,o)}else n[l]=e[l]}else for(t in n[l]=function(){return e[l].apply(e,arguments)},e[l])e[l].hasOwnProperty(t)&&(n[l][t]=e[l][t]);n[l].clock=e}function doIntervalTick(n,l){n.tick(l)}var timers={setTimeout:_global.setTimeout,clearTimeout:_global.clearTimeout,setInterval:_global.setInterval,clearInterval:_global.clearInterval,Date:_global.Date};setImmediatePresent&&(timers.setImmediate=_global.setImmediate,timers.clearImmediate=_global.clearImmediate),hrtimePresent&&(timers.hrtime=_global.process.hrtime),nextTickPresent&&(timers.nextTick=_global.process.nextTick),performancePresent&&(timers.performance=_global.performance),requestAnimationFramePresent&&(timers.requestAnimationFrame=_global.requestAnimationFrame),queueMicrotaskPresent&&(timers.queueMicrotask=!0),cancelAnimationFramePresent&&(timers.cancelAnimationFrame=_global.cancelAnimationFrame),requestIdleCallbackPresent&&(timers.requestIdleCallback=_global.requestIdleCallback),cancelIdleCallbackPresent&&(timers.cancelIdleCallback=_global.cancelIdleCallback);var keys=Object.keys||function(n){var l,e=[];for(l in n)n.hasOwnProperty(l)&&e.push(l);return e},originalSetTimeout=_global.setImmediate||_global.setTimeout;function createClock(n,l){n=Math.floor(getEpoch(n)),l=l||1e3;var e=0,t=[0,0];if(void 0===NativeDate)throw new Error("The global scope doesn't have a `Date` object (see https://github.com/sinonjs/sinon/issues/1852#issuecomment-419622780)");var u={now:n,timeouts:{},Date:createDate(),loopLimit:l};function r(){return 16-(u.now-n)%16}function o(l){var r=u.now-t[0]-n,o=Math.floor(r/1e3),i=1e6*(r-1e3*o)+e-t[1];if(Array.isArray(l)){if(l[1]>1e9)throw new TypeError("Number of nanoseconds can't exceed a billion");var s=l[0],a=i-l[1],c=o-s;return a<0&&(a+=1e9,c-=1),[c,a]}return[o,i]}function i(n,l,t,r){var o="number"==typeof n?n:parseTime(n),i=Math.floor(o),s=nanoRemainder(o),a=e+s,c=u.now+i;if(o<0)throw new TypeError("Negative ticks are not supported");a>=1e6&&(c+=1,a-=1e6),e=a;var d,h,f,p,m,g,y=u.now,v=u.now;function w(){for(d=firstTimerInRange(u,y,c);d&&y<=c;){if(u.timers[d.id]){y=d.callAt,u.now=d.callAt,f=u.now;try{runJobs(u),callTimer(u,d)}catch(n){h=h||n}if(l)return void originalSetTimeout(p);m()}g()}if(f=u.now,runJobs(u),f!==u.now&&(y+=u.now-f,c+=u.now-f),u.duringTick=!1,d=firstTimerInRange(u,y,c))try{u.tick(c-u.now)}catch(n){h=h||n}else u.now=c,e=a;if(h)throw h;if(!l)return u.now;t(u.now)}return u.duringTick=!0,f=u.now,runJobs(u),f!==u.now&&(y+=u.now-f,c+=u.now-f),p=l&&function(){try{m(),g(),w()}catch(n){r(n)}},m=function(){f!==u.now&&(y+=u.now-f,c+=u.now-f,v+=u.now-f)},g=function(){d=firstTimerInRange(u,v,c),v=y},w()}if(u.Date.clock=u,hrtimeBigintPresent&&(o.bigint=function(){var n=o();return BigInt(n[0])*BigInt(1e9)+BigInt(n[1])}),u.requestIdleCallback=function(n,l){var e=0;u.countTimers()>0&&(e=50);var t=addTimer(u,{func:n,args:Array.prototype.slice.call(arguments,2),delay:void 0===l?e:Math.min(l,e)});return t.id||t},u.cancelIdleCallback=function(n){return clearTimer(u,n,"Timeout")},u.setTimeout=function(n,l){return addTimer(u,{func:n,args:Array.prototype.slice.call(arguments,2),delay:l})},void 0!==_global.Promise&&utilPromisify&&(u.setTimeout[utilPromisify.custom]=function(n,l){return new _global.Promise((function(e){addTimer(u,{func:e,args:[l],delay:n})}))}),u.clearTimeout=function(n){return clearTimer(u,n,"Timeout")},u.nextTick=function(n){return enqueueJob(u,{func:n,args:Array.prototype.slice.call(arguments,1)})},u.queueMicrotask=function(n){return u.nextTick(n)},u.setInterval=function(n,l){return l=parseInt(l,10),addTimer(u,{func:n,args:Array.prototype.slice.call(arguments,2),delay:l,interval:l})},u.clearInterval=function(n){return clearTimer(u,n,"Interval")},setImmediatePresent&&(u.setImmediate=function(n){return addTimer(u,{func:n,args:Array.prototype.slice.call(arguments,1),immediate:!0})},void 0!==_global.Promise&&utilPromisify&&(u.setImmediate[utilPromisify.custom]=function(n){return new _global.Promise((function(l){addTimer(u,{func:l,args:[n],immediate:!0})}))}),u.clearImmediate=function(n){return clearTimer(u,n,"Immediate")}),u.countTimers=function(){return Object.keys(u.timers||{}).length+(u.jobs||[]).length},u.requestAnimationFrame=function(n){var l=addTimer(u,{func:n,delay:r(),args:[u.now+r()],animation:!0});return l.id||l},u.cancelAnimationFrame=function(n){return clearTimer(u,n,"AnimationFrame")},u.runMicrotasks=function(){runJobs(u)},u.tick=function(n){return i(n,!1)},void 0!==_global.Promise&&(u.tickAsync=function(n){return new _global.Promise((function(l,e){originalSetTimeout((function(){try{i(n,!0,l,e)}catch(n){e(n)}}))}))}),u.next=function(){runJobs(u);var n=firstTimer(u);if(!n)return u.now;u.duringTick=!0;try{return u.now=n.callAt,callTimer(u,n),runJobs(u),u.now}finally{u.duringTick=!1}},void 0!==_global.Promise&&(u.nextAsync=function(){return new _global.Promise((function(n,l){originalSetTimeout((function(){try{var e,t=firstTimer(u);if(!t)return void n(u.now);u.duringTick=!0,u.now=t.callAt;try{callTimer(u,t)}catch(n){e=n}u.duringTick=!1,originalSetTimeout((function(){e?l(e):n(u.now)}))}catch(n){l(n)}}))}))}),u.runAll=function(){var n;for(runJobs(u),n=0;n<u.loopLimit;n++){if(!u.timers)return u.now;if(0===keys(u.timers).length)return u.now;u.next()}throw new Error("Aborting after running "+u.loopLimit+" timers, assuming an infinite loop!")},u.runToFrame=function(){return u.tick(r())},void 0!==_global.Promise&&(u.runAllAsync=function(){return new _global.Promise((function(n,l){var e=0;!function t(){originalSetTimeout((function(){try{if(e<u.loopLimit)return u.timers?0===Object.keys(u.timers).length?void n(u.now):(u.next(),e++,void t()):void n(u.now);l(new Error("Aborting after running "+u.loopLimit+" timers, assuming an infinite loop!"))}catch(n){l(n)}}))}()}))}),u.runToLast=function(){var n=lastTimer(u);return n?u.tick(n.callAt-u.now):(runJobs(u),u.now)},void 0!==_global.Promise&&(u.runToLastAsync=function(){return new _global.Promise((function(n,l){originalSetTimeout((function(){try{var e=lastTimer(u);e||n(u.now),n(u.tickAsync(e.callAt))}catch(n){l(n)}}))}))}),u.reset=function(){e=0,u.timers={},u.jobs=[],u.now=n},u.setSystemTime=function(n){var l,r,o=getEpoch(n),i=o-u.now;for(l in t[0]=t[0]+i,t[1]=t[1]+e,u.now=o,e=0,u.timers)u.timers.hasOwnProperty(l)&&((r=u.timers[l]).createdAt+=i,r.callAt+=i)},performancePresent){if(u.performance=Object.create(null),hasPerformancePrototype){var s=_global.Performance.prototype;Object.getOwnPropertyNames(s).forEach((function(n){0===n.indexOf("getEntries")?u.performance[n]=NOOP_ARRAY:u.performance[n]=NOOP}))}u.performance.now=function(){var n=o();return 1e3*n[0]+n[1]/1e6}}return hrtimePresent&&(u.hrtime=o),u}function install(n){if(arguments.length>1||n instanceof Date||Array.isArray(n)||"number"==typeof n)throw new TypeError("FakeTimers.install called with "+String(n)+" install requires an object parameter");var l,e;(n=void 0!==n?n:{}).shouldAdvanceTime=n.shouldAdvanceTime||!1,n.advanceTimeDelta=n.advanceTimeDelta||20;var t=n.target||_global,u=createClock(n.now,n.loopLimit);for(u.uninstall=function(){return uninstall(u,t,n)},u.methods=n.toFake||[],0===u.methods.length&&(u.methods=keys(timers).filter((function(n){return"nextTick"!==n&&"queueMicrotask"!==n}))),l=0,e=u.methods.length;l<e;l++)if("hrtime"===u.methods[l])t.process&&"function"==typeof t.process.hrtime&&hijackMethod(t.process,u.methods[l],u);else if("nextTick"===u.methods[l])t.process&&"function"==typeof t.process.nextTick&&hijackMethod(t.process,u.methods[l],u);else{if("setInterval"===u.methods[l]&&!0===n.shouldAdvanceTime){var r=doIntervalTick.bind(null,u,n.advanceTimeDelta),o=t[u.methods[l]](r,n.advanceTimeDelta);u.attachedInterval=o}hijackMethod(t,u.methods[l],u)}return u}return{timers,createClock,install,withGlobal}}var defaultImplementation=withGlobal(globalObject);exports.timers=defaultImplementation.timers,exports.createClock=defaultImplementation.createClock,exports.install=defaultImplementation.install,exports.withGlobal=withGlobal},{"@sinonjs/commons":45,util:108}],58:[function(n,l,e){var t=[Array,Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array];l.exports=t},{}],59:[function(n,l,e){var t=n("@sinonjs/commons").prototypes.array,u=n("./deep-equal").use(D),r=n("@sinonjs/commons").every,o=n("@sinonjs/commons").functionName,i=n("lodash.get"),s=n("./iterable-to-string"),a=n("@sinonjs/commons").prototypes.object,c=n("@sinonjs/commons").typeOf,d=n("@sinonjs/commons").valueToString,h=n("./create-matcher/assert-matcher"),f=n("./create-matcher/assert-method-exists"),p=n("./create-matcher/assert-type"),m=n("./create-matcher/is-iterable"),g=n("./create-matcher/is-matcher"),y=n("./create-matcher/matcher-prototype"),v=t.indexOf,w=t.some,b=a.hasOwnProperty,S=a.toString,C=n("./create-matcher/type-map")(D);function D(n,l){var e=Object.create(y),t=c(n);if(void 0!==l&&"string"!=typeof l)throw new TypeError("Message should be a string");if(arguments.length>2)throw new TypeError("Expected 1 or 2 arguments, received "+arguments.length);return t in C?C[t](e,n,l):e.test=function(l){return u(l,n)},e.message||(e.message="match("+d(n)+")"),e}function E(n,l){return function(e,t){p(e,"string","property");var r=1===arguments.length,o=l+'("'+e+'"';return r||(o+=", "+d(t)),D((function(l){return!(null==l||!n(l,e))&&(r||u(l[e],t))}),o+=")")}}D.isMatcher=g,D.any=D((function(){return!0}),"any"),D.defined=D((function(n){return null!=n}),"defined"),D.truthy=D((function(n){return Boolean(n)}),"truthy"),D.falsy=D((function(n){return!n}),"falsy"),D.same=function(n){return D((function(l){return n===l}),"same("+d(n)+")")},D.in=function(n){if("array"!==c(n))throw new TypeError("array expected");return D((function(l){return w(n,(function(n){return n===l}))}),"in("+d(n)+")")},D.typeOf=function(n){return p(n,"string","type"),D((function(l){return c(l)===n}),'typeOf("'+n+'")')},D.instanceOf=function(n){return"undefined"==typeof Symbol||void 0===Symbol.hasInstance?p(n,"function","type"):f(n,Symbol.hasInstance,"type","[Symbol.hasInstance]"),D((function(l){return l instanceof n}),"instanceOf("+(o(n)||S(n))+")")},D.has=E((function(n,l){return"object"==typeof n?l in n:void 0!==n[l]}),"has"),D.hasOwn=E((function(n,l){return b(n,l)}),"hasOwn"),D.hasNested=function(n,l){p(n,"string","property");var e=1===arguments.length,t='hasNested("'+n+'"';return e||(t+=", "+d(l)),D((function(t){return null!=t&&void 0!==i(t,n)&&(e||u(i(t,n),l))}),t+=")")};var _={null:!0,boolean:!0,number:!0,string:!0,object:!0,array:!0};D.json=function(n){if(!_[c(n)])throw new TypeError("Value cannot be the result of JSON.parse");return D((function(l){var e;try{e=JSON.parse(l)}catch(n){return!1}return u(e,n)}),"json("+JSON.stringify(n,null,"  ")+")")},D.every=function(n){return h(n),D((function(l){return"object"===c(l)?r(Object.keys(l),(function(e){return n.test(l[e])})):m(l)&&r(l,(function(l){return n.test(l)}))}),"every("+n.message+")")},D.some=function(n){return h(n),D((function(l){return"object"===c(l)?!r(Object.keys(l),(function(e){return!n.test(l[e])})):m(l)&&!r(l,(function(l){return!n.test(l)}))}),"some("+n.message+")")},D.array=D.typeOf("array"),D.array.deepEquals=function(n){return D((function(l){var e=l.length===n.length;return"array"===c(l)&&e&&r(l,(function(l,e){var t=n[e];return"array"===c(t)&&"array"===c(l)?D.array.deepEquals(t).test(l):u(t,l)}))}),"deepEquals(["+s(n)+"])")},D.array.startsWith=function(n){return D((function(l){return"array"===c(l)&&r(n,(function(n,e){return l[e]===n}))}),"startsWith(["+s(n)+"])")},D.array.endsWith=function(n){return D((function(l){var e=l.length-n.length;return"array"===c(l)&&r(n,(function(n,t){return l[e+t]===n}))}),"endsWith(["+s(n)+"])")},D.array.contains=function(n){return D((function(l){return"array"===c(l)&&r(n,(function(n){return-1!==v(l,n)}))}),"contains(["+s(n)+"])")},D.map=D.typeOf("map"),D.map.deepEquals=function(n){return D((function(l){var e=l.size===n.size;return"map"===c(l)&&e&&r(l,(function(l,e){return n.has(e)&&n.get(e)===l}))}),"deepEquals(Map["+s(n)+"])")},D.map.contains=function(n){return D((function(l){return"map"===c(l)&&r(n,(function(n,e){return l.has(e)&&l.get(e)===n}))}),"contains(Map["+s(n)+"])")},D.set=D.typeOf("set"),D.set.deepEquals=function(n){return D((function(l){var e=l.size===n.size;return"set"===c(l)&&e&&r(l,(function(l){return n.has(l)}))}),"deepEquals(Set["+s(n)+"])")},D.set.contains=function(n){return D((function(l){return"set"===c(l)&&r(n,(function(n){return l.has(n)}))}),"contains(Set["+s(n)+"])")},D.bool=D.typeOf("boolean"),D.number=D.typeOf("number"),D.string=D.typeOf("string"),D.object=D.typeOf("object"),D.func=D.typeOf("function"),D.regexp=D.typeOf("regexp"),D.date=D.typeOf("date"),D.symbol=D.typeOf("symbol"),l.exports=D},{"./create-matcher/assert-matcher":60,"./create-matcher/assert-method-exists":61,"./create-matcher/assert-type":62,"./create-matcher/is-iterable":63,"./create-matcher/is-matcher":64,"./create-matcher/matcher-prototype":66,"./create-matcher/type-map":67,"./deep-equal":68,"./iterable-to-string":81,"@sinonjs/commons":45,"lodash.get":90}],60:[function(n,l,e){var t=n("./is-matcher");l.exports=function(n){if(!t(n))throw new TypeError("Matcher expected")}},{"./is-matcher":64}],61:[function(n,l,e){l.exports=function(n,l,e,t){if(null===n[l]||void 0===n[l])throw new TypeError("Expected "+e+" to have method "+t)}},{}],62:[function(n,l,e){var t=n("@sinonjs/commons").typeOf;l.exports=function(n,l,e){var u=t(n);if(u!==l)throw new TypeError("Expected type of "+e+" to be "+l+", but was "+u)}},{"@sinonjs/commons":45}],63:[function(n,l,e){var t=n("@sinonjs/commons").typeOf;l.exports=function(n){return Boolean(n)&&"function"===t(n.forEach)}},{"@sinonjs/commons":45}],64:[function(n,l,e){var t=n("@sinonjs/commons").prototypes.object.isPrototypeOf,u=n("./matcher-prototype");l.exports=function(n){return t(u,n)}},{"./matcher-prototype":66,"@sinonjs/commons":45}],65:[function(n,l,e){var t=n("@sinonjs/commons").prototypes.array.every,u=n("@sinonjs/commons").prototypes.array.concat,r=n("@sinonjs/commons").typeOf,o=n("../deep-equal").use,i=n("./is-matcher"),s=Object.keys,a=Object.getOwnPropertySymbols;l.exports=function n(l,e,c){var d=o(c);if(null==l)return!1;var h=s(e);return"function"===r(a)&&(h=u(h,a(e))),t(h,(function(t){var u=e[t],o=l[t];if(i(u)){if(!u.test(o))return!1}else if("object"===r(u)){if(!n(o,u,c))return!1}else if(!d(o,u))return!1;return!0}))}},{"../deep-equal":68,"./is-matcher":64,"@sinonjs/commons":45}],66:[function(n,l,e){var t={toString:function(){return this.message},or:function(l){var e=n("../create-matcher"),u=e.isMatcher;if(!arguments.length)throw new TypeError("Matcher expected");var r=u(l)?l:e(l),o=this,i=Object.create(t);return i.test=function(n){return o.test(n)||r.test(n)},i.message=o.message+".or("+r.message+")",i},and:function(l){var e=n("../create-matcher"),u=e.isMatcher;if(!arguments.length)throw new TypeError("Matcher expected");var r=u(l)?l:e(l),o=this,i=Object.create(t);return i.test=function(n){return o.test(n)&&r.test(n)},i.message=o.message+".and("+r.message+")",i}};l.exports=t},{"../create-matcher":59}],67:[function(n,l,e){var t=n("@sinonjs/commons").functionName,u=n("@sinonjs/commons").prototypes.array.join,r=n("@sinonjs/commons").prototypes.array.map,o=n("@sinonjs/commons").prototypes.string.indexOf,i=n("@sinonjs/commons").valueToString,s=n("./match-object");l.exports=function(n){return{function:function(n,l,e){n.test=l,n.message=e||"match("+t(l)+")"},number:function(n,l){n.test=function(n){return l==n}},object:function(l,e){var o;return"function"==typeof e.test?(l.test=function(n){return!0===e.test(n)},l.message="match("+t(e.test)+")",l):(o=r(Object.keys(e),(function(n){return n+": "+i(e[n])})),l.test=function(l){return s(l,e,n)},l.message="match("+u(o,", ")+")",l)},regexp:function(n,l){n.test=function(n){return"string"==typeof n&&l.test(n)}},string:function(n,l){n.test=function(n){return"string"==typeof n&&-1!==o(n,l)},n.message='match("'+l+'")'}}}},{"./match-object":65,"@sinonjs/commons":45}],68:[function(n,l,e){var t=n("@sinonjs/commons").valueToString,u=n("@sinonjs/commons").className,r=n("@sinonjs/commons").typeOf,o=n("@sinonjs/commons").prototypes.array,i=n("@sinonjs/commons").prototypes.object,s=n("@sinonjs/commons").prototypes.map.forEach,a=n("./get-class"),c=n("./identical"),d=n("./is-arguments"),h=n("./is-date"),f=n("./is-element"),p=n("./is-map"),m=n("./is-nan"),g=n("./is-object"),y=n("./is-set"),v=n("./is-subset"),w=o.concat,b=o.every,S=o.push,C=Date.prototype.getTime,D=i.hasOwnProperty,E=o.indexOf,_=Object.keys,k=Object.getOwnPropertySymbols;function x(n,l,e){var o=[],i=[],T=[],P=[],I={};return function n(l,A,O,R){if(e&&e.isMatcher(A))return e.isMatcher(l)?l===A:A.test(l);var F=typeof l,L=typeof A;if(l===A||m(l)||m(A)||null===l||null===A||void 0===l||void 0===A||"object"!==F||"object"!==L)return c(l,A);if(f(l)||f(A))return!1;var $=h(l),j=h(A);if(($||j)&&(!$||!j||C.call(l)!==C.call(A)))return!1;if(l instanceof RegExp&&A instanceof RegExp&&t(l)!==t(A))return!1;if(l instanceof Error&&A instanceof Error)return l===A;var M=a(l),N=a(A),B=_(l),H=_(A),U=u(l),q=u(A),W="function"===r(k)?k(A):[],z=w(H,W);if(d(l)||d(A)){if(l.length!==A.length)return!1}else if(F!==L||M!==N||B.length!==H.length||U&&q&&U!==q)return!1;if(y(l)||y(A))return!(!y(l)||!y(A)||l.size!==A.size)&&v(l,A,n);if(p(l)||p(A)){if(!p(l)||!p(A)||l.size!==A.size)return!1;var V=!0;return s(l,(function(n,l){V=V&&x(n,A.get(l))})),V}return b(z,(function(e){if(!D(l,e))return!1;var t=l[e],u=A[e],r=g(t),s=g(u),a=r?E(o,t):-1,c=s?E(i,u):-1,d=-1!==a?T[a]:O+"["+JSON.stringify(e)+"]",h=-1!==c?P[c]:R+"["+JSON.stringify(e)+"]",f=d+h;return!!I[f]||(-1===a&&r&&(S(o,t),S(T,d)),-1===c&&s&&(S(i,u),S(P,h)),r&&s&&(I[f]=!0),n(t,u,d,h))}))}(n,l,"$1","$2")}x.use=function(n){return function(l,e){return x(l,e,n)}},l.exports=x},{"./get-class":69,"./identical":70,"./is-arguments":71,"./is-date":73,"./is-element":74,"./is-map":75,"./is-nan":76,"./is-object":78,"./is-set":79,"./is-subset":80,"@sinonjs/commons":45}],69:[function(n,l,e){var t=n("@sinonjs/commons").prototypes.object.toString;l.exports=function(n){return t(n).split(/[ \]]/)[1]}},{"@sinonjs/commons":45}],70:[function(n,l,e){var t=n("./is-nan"),u=n("./is-neg-zero");l.exports=function(n,l){return!!(n===l||t(n)&&t(l))&&(0!==n||u(n)===u(l))}},{"./is-nan":76,"./is-neg-zero":77}],71:[function(n,l,e){var t=n("./get-class");l.exports=function(n){return"Arguments"===t(n)}},{"./get-class":69}],72:[function(n,l,e){var t=n("@sinonjs/commons").functionName,u=n("@sinonjs/commons").prototypes.array.indexOf,r=n("@sinonjs/commons").prototypes.array.map,o=n("./array-types"),i=n("type-detect");l.exports=function(n){return-1!==u(r(o,t),i(n))}},{"./array-types":58,"@sinonjs/commons":45,"type-detect":105}],73:[function(n,l,e){l.exports=function(n){return n instanceof Date}},{}],74:[function(n,l,e){var t="undefined"!=typeof document&&document.createElement("div");l.exports=function(n){if(!n||1!==n.nodeType||!t)return!1;try{n.appendChild(t),n.removeChild(t)}catch(n){return!1}return!0}},{}],75:[function(n,l,e){l.exports=function(n){return"undefined"!=typeof Map&&n instanceof Map}},{}],76:[function(n,l,e){l.exports=function(n){return"number"==typeof n&&n!=n}},{}],77:[function(n,l,e){l.exports=function(n){return 0===n&&1/n==-1/0}},{}],78:[function(n,l,e){l.exports=function(n){return!("object"!=typeof n||null===n||n instanceof Boolean||n instanceof Date||n instanceof Error||n instanceof Number||n instanceof RegExp||n instanceof String)}},{}],79:[function(n,l,e){l.exports=function(n){return"undefined"!=typeof Set&&n instanceof Set||!1}},{}],80:[function(n,l,e){var t=n("@sinonjs/commons").prototypes.set.forEach;l.exports=function(n,l,e){var u=!0;return t(n,(function(n){var r=!1;t(l,(function(l){e(l,n)&&(r=!0)})),u=u&&r})),u}},{"@sinonjs/commons":45}],81:[function(n,l,e){var t=n("@sinonjs/commons").prototypes.string.slice,u=n("@sinonjs/commons").typeOf,r=n("@sinonjs/commons").valueToString;function o(n){return"string"==typeof n?"'"+n+"'":r(n)}l.exports=function(n){return"map"===u(n)?(l="",n.forEach((function(n,e){l+="["+o(e)+","+o(n)+"],"})),l=t(l,0,-1)):function(n){var l="";return n.forEach((function(n){l+=o(n)+","})),l=t(l,0,-1)}(n);var l}},{"@sinonjs/commons":45}],82:[function(n,l,e){var t=n("@sinonjs/commons").valueToString,u=n("@sinonjs/commons").prototypes.string.indexOf,r=n("@sinonjs/commons").prototypes.array.forEach,o=n("type-detect"),i="function"==typeof Array.from,s=n("./deep-equal").use(f),a=n("./is-array-type"),c=n("./is-subset"),d=n("./create-matcher");function h(n,l,e){if(0===l.length)return!0;var t,u,r,o;for(t=0,u=n.length;t<u;++t)if(e(n[t],l[0])){for(r=0,o=l.length;r<o;++r){if(t+r>=u)return!1;if(!e(n[t+r],l[r]))return!1}return!0}return!1}function f(n,l){if(l&&"function"==typeof l.test)return l.test(n);switch(o(l)){case"bigint":case"boolean":case"number":case"symbol":return l===n;case"function":return!0===l(n);case"string":return("string"==typeof n||Boolean(n))&&u(t(n).toLowerCase(),l.toLowerCase())>=0;case"null":return null===n;case"undefined":return void 0===n;case"Date":if("Date"===o(n))return n.getTime()===l.getTime();break;case"Array":case"Int8Array":case"Uint8Array":case"Uint8ClampedArray":case"Int16Array":case"Uint16Array":case"Int32Array":case"Uint32Array":case"Float32Array":case"Float64Array":return a(l)&&h(n,l,f);case"Map":if(!i)throw new Error("The JavaScript engine does not support Array.from and cannot reliably do value comparison of Map instances");return"Map"===o(n)&&h(Array.from(n),Array.from(l),f)}switch(o(n)){case"null":return!1;case"Set":return c(l,n,f)}if(l&&"object"==typeof l){if(l===n)return!0;if("object"!=typeof n)return!1;var e;for(e in l){var r=n[e];if(void 0===r&&"function"==typeof n.getAttribute&&(r=n.getAttribute(e)),null===l[e]||void 0===l[e]){if(r!==l[e])return!1}else if(void 0===r||!s(r,l[e]))return!1}return!0}throw new Error("Matcher was an unknown or unsupported type")}r(Object.keys(d),(function(n){f[n]=d[n]})),l.exports=f},{"./create-matcher":59,"./deep-equal":68,"./is-array-type":72,"./is-subset":80,"@sinonjs/commons":45,"type-detect":105}],83:[function(n,l,e){var t=n("./identical"),u=n("./is-arguments"),r=n("./is-element"),o=n("./is-neg-zero"),i=n("./is-set"),s=n("./is-map"),a=n("./match"),c=n("./deep-equal").use(a),d=n("./create-matcher");l.exports={createMatcher:d,deepEqual:c,identical:t,isArguments:u,isElement:r,isMap:s,isNegZero:o,isSet:i,match:a}},{"./create-matcher":59,"./deep-equal":68,"./identical":70,"./is-arguments":71,"./is-element":74,"./is-map":75,"./is-neg-zero":77,"./is-set":79,"./match":82}],84:[function(n,l,e){var t=n("./lib/encoding.js");l.exports={TextEncoder:t.TextEncoder,TextDecoder:t.TextDecoder}},{"./lib/encoding.js":86}],85:[function(n,l,e){!function(n){void 0!==l&&l.exports&&(l.exports=n),n["encoding-indexes"]={big5:[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,17392,19506,17923,17830,17784,160359,19831,17843,162993,19682,163013,15253,18230,18244,19527,19520,148159,144919,160594,159371,159954,19543,172881,18255,17882,19589,162924,19719,19108,18081,158499,29221,154196,137827,146950,147297,26189,22267,null,32149,22813,166841,15860,38708,162799,23515,138590,23204,13861,171696,23249,23479,23804,26478,34195,170309,29793,29853,14453,138579,145054,155681,16108,153822,15093,31484,40855,147809,166157,143850,133770,143966,17162,33924,40854,37935,18736,34323,22678,38730,37400,31184,31282,26208,27177,34973,29772,31685,26498,31276,21071,36934,13542,29636,155065,29894,40903,22451,18735,21580,16689,145038,22552,31346,162661,35727,18094,159368,16769,155033,31662,140476,40904,140481,140489,140492,40905,34052,144827,16564,40906,17633,175615,25281,28782,40907,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,12736,12737,12738,12739,12740,131340,12741,131281,131277,12742,12743,131275,139240,12744,131274,12745,12746,12747,12748,131342,12749,12750,256,193,461,192,274,201,282,200,332,211,465,210,null,7870,null,7872,202,257,225,462,224,593,275,233,283,232,299,237,464,236,333,243,466,242,363,250,468,249,470,472,474,476,252,null,7871,null,7873,234,609,9178,9179,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,172969,135493,null,25866,null,null,20029,28381,40270,37343,null,null,161589,25745,20250,20264,20392,20822,20852,20892,20964,21153,21160,21307,21326,21457,21464,22242,22768,22788,22791,22834,22836,23398,23454,23455,23706,24198,24635,25993,26622,26628,26725,27982,28860,30005,32420,32428,32442,32455,32463,32479,32518,32567,33402,33487,33647,35270,35774,35810,36710,36711,36718,29713,31996,32205,26950,31433,21031,null,null,null,null,37260,30904,37214,32956,null,36107,33014,133607,null,null,32927,40647,19661,40393,40460,19518,171510,159758,40458,172339,13761,null,28314,33342,29977,null,18705,39532,39567,40857,31111,164972,138698,132560,142054,20004,20097,20096,20103,20159,20203,20279,13388,20413,15944,20483,20616,13437,13459,13477,20870,22789,20955,20988,20997,20105,21113,21136,21287,13767,21417,13649,21424,13651,21442,21539,13677,13682,13953,21651,21667,21684,21689,21712,21743,21784,21795,21800,13720,21823,13733,13759,21975,13765,163204,21797,null,134210,134421,151851,21904,142534,14828,131905,36422,150968,169189,16467,164030,30586,142392,14900,18389,164189,158194,151018,25821,134524,135092,134357,135412,25741,36478,134806,134155,135012,142505,164438,148691,null,134470,170573,164073,18420,151207,142530,39602,14951,169460,16365,13574,152263,169940,161992,142660,40302,38933,null,17369,155813,25780,21731,142668,142282,135287,14843,135279,157402,157462,162208,25834,151634,134211,36456,139681,166732,132913,null,18443,131497,16378,22643,142733,null,148936,132348,155799,134988,134550,21881,16571,17338,null,19124,141926,135325,33194,39157,134556,25465,14846,141173,36288,22177,25724,15939,null,173569,134665,142031,142537,null,135368,145858,14738,14854,164507,13688,155209,139463,22098,134961,142514,169760,13500,27709,151099,null,null,161140,142987,139784,173659,167117,134778,134196,157724,32659,135375,141315,141625,13819,152035,134796,135053,134826,16275,134960,134471,135503,134732,null,134827,134057,134472,135360,135485,16377,140950,25650,135085,144372,161337,142286,134526,134527,142417,142421,14872,134808,135367,134958,173618,158544,167122,167321,167114,38314,21708,33476,21945,null,171715,39974,39606,161630,142830,28992,33133,33004,23580,157042,33076,14231,21343,164029,37302,134906,134671,134775,134907,13789,151019,13833,134358,22191,141237,135369,134672,134776,135288,135496,164359,136277,134777,151120,142756,23124,135197,135198,135413,135414,22428,134673,161428,164557,135093,134779,151934,14083,135094,135552,152280,172733,149978,137274,147831,164476,22681,21096,13850,153405,31666,23400,18432,19244,40743,18919,39967,39821,154484,143677,22011,13810,22153,20008,22786,138177,194680,38737,131206,20059,20155,13630,23587,24401,24516,14586,25164,25909,27514,27701,27706,28780,29227,20012,29357,149737,32594,31035,31993,32595,156266,13505,null,156491,32770,32896,157202,158033,21341,34916,35265,161970,35744,36125,38021,38264,38271,38376,167439,38886,39029,39118,39134,39267,17e4,40060,40479,40644,27503,63751,20023,131207,38429,25143,38050,null,20539,28158,171123,40870,15817,34959,147790,28791,23797,19232,152013,13657,154928,24866,166450,36775,37366,29073,26393,29626,144001,172295,15499,137600,19216,30948,29698,20910,165647,16393,27235,172730,16931,34319,133743,31274,170311,166634,38741,28749,21284,139390,37876,30425,166371,40871,30685,20131,20464,20668,20015,20247,40872,21556,32139,22674,22736,138678,24210,24217,24514,141074,25995,144377,26905,27203,146531,27903,null,29184,148741,29580,16091,150035,23317,29881,35715,154788,153237,31379,31724,31939,32364,33528,34199,40873,34960,40874,36537,40875,36815,34143,39392,37409,40876,167353,136255,16497,17058,23066,null,null,null,39016,26475,17014,22333,null,34262,149883,33471,160013,19585,159092,23931,158485,159678,40877,40878,23446,40879,26343,32347,28247,31178,15752,17603,143958,141206,17306,17718,null,23765,146202,35577,23672,15634,144721,23928,40882,29015,17752,147692,138787,19575,14712,13386,131492,158785,35532,20404,131641,22975,33132,38998,170234,24379,134047,null,139713,166253,16642,18107,168057,16135,40883,172469,16632,14294,18167,158790,16764,165554,160767,17773,14548,152730,17761,17691,19849,19579,19830,17898,16328,150287,13921,17630,17597,16877,23870,23880,23894,15868,14351,23972,23993,14368,14392,24130,24253,24357,24451,14600,14612,14655,14669,24791,24893,23781,14729,25015,25017,25039,14776,25132,25232,25317,25368,14840,22193,14851,25570,25595,25607,25690,14923,25792,23829,22049,40863,14999,25990,15037,26111,26195,15090,26258,15138,26390,15170,26532,26624,15192,26698,26756,15218,15217,15227,26889,26947,29276,26980,27039,27013,15292,27094,15325,27237,27252,27249,27266,15340,27289,15346,27307,27317,27348,27382,27521,27585,27626,27765,27818,15563,27906,27910,27942,28033,15599,28068,28081,28181,28184,28201,28294,166336,28347,28386,28378,40831,28392,28393,28452,28468,15686,147265,28545,28606,15722,15733,29111,23705,15754,28716,15761,28752,28756,28783,28799,28809,131877,17345,13809,134872,147159,22462,159443,28990,153568,13902,27042,166889,23412,31305,153825,169177,31333,31357,154028,31419,31408,31426,31427,29137,156813,16842,31450,31453,31466,16879,21682,154625,31499,31573,31529,152334,154878,31650,31599,33692,154548,158847,31696,33825,31634,31672,154912,15789,154725,33938,31738,31750,31797,154817,31812,31875,149634,31910,26237,148856,31945,31943,31974,31860,31987,31989,31950,32359,17693,159300,32093,159446,29837,32137,32171,28981,32179,32210,147543,155689,32228,15635,32245,137209,32229,164717,32285,155937,155994,32366,32402,17195,37996,32295,32576,32577,32583,31030,156368,39393,32663,156497,32675,136801,131176,17756,145254,17667,164666,32762,156809,32773,32776,32797,32808,32815,172167,158915,32827,32828,32865,141076,18825,157222,146915,157416,26405,32935,166472,33031,33050,22704,141046,27775,156824,151480,25831,136330,33304,137310,27219,150117,150165,17530,33321,133901,158290,146814,20473,136445,34018,33634,158474,149927,144688,137075,146936,33450,26907,194964,16859,34123,33488,33562,134678,137140,14017,143741,144730,33403,33506,33560,147083,159139,158469,158615,144846,15807,33565,21996,33669,17675,159141,33708,33729,33747,13438,159444,27223,34138,13462,159298,143087,33880,154596,33905,15827,17636,27303,33866,146613,31064,33960,158614,159351,159299,34014,33807,33681,17568,33939,34020,154769,16960,154816,17731,34100,23282,159385,17703,34163,17686,26559,34326,165413,165435,34241,159880,34306,136578,159949,194994,17770,34344,13896,137378,21495,160666,34430,34673,172280,34798,142375,34737,34778,34831,22113,34412,26710,17935,34885,34886,161248,146873,161252,34910,34972,18011,34996,34997,25537,35013,30583,161551,35207,35210,35238,35241,35239,35260,166437,35303,162084,162493,35484,30611,37374,35472,162393,31465,162618,147343,18195,162616,29052,35596,35615,152624,152933,35647,35660,35661,35497,150138,35728,35739,35503,136927,17941,34895,35995,163156,163215,195028,14117,163155,36054,163224,163261,36114,36099,137488,36059,28764,36113,150729,16080,36215,36265,163842,135188,149898,15228,164284,160012,31463,36525,36534,36547,37588,36633,36653,164709,164882,36773,37635,172703,133712,36787,18730,166366,165181,146875,24312,143970,36857,172052,165564,165121,140069,14720,159447,36919,165180,162494,36961,165228,165387,37032,165651,37060,165606,37038,37117,37223,15088,37289,37316,31916,166195,138889,37390,27807,37441,37474,153017,37561,166598,146587,166668,153051,134449,37676,37739,166625,166891,28815,23235,166626,166629,18789,37444,166892,166969,166911,37747,37979,36540,38277,38310,37926,38304,28662,17081,140922,165592,135804,146990,18911,27676,38523,38550,16748,38563,159445,25050,38582,30965,166624,38589,21452,18849,158904,131700,156688,168111,168165,150225,137493,144138,38705,34370,38710,18959,17725,17797,150249,28789,23361,38683,38748,168405,38743,23370,168427,38751,37925,20688,143543,143548,38793,38815,38833,38846,38848,38866,38880,152684,38894,29724,169011,38911,38901,168989,162170,19153,38964,38963,38987,39014,15118,160117,15697,132656,147804,153350,39114,39095,39112,39111,19199,159015,136915,21936,39137,39142,39148,37752,39225,150057,19314,170071,170245,39413,39436,39483,39440,39512,153381,14020,168113,170965,39648,39650,170757,39668,19470,39700,39725,165376,20532,39732,158120,14531,143485,39760,39744,171326,23109,137315,39822,148043,39938,39935,39948,171624,40404,171959,172434,172459,172257,172323,172511,40318,40323,172340,40462,26760,40388,139611,172435,172576,137531,172595,40249,172217,172724,40592,40597,40606,40610,19764,40618,40623,148324,40641,15200,14821,15645,20274,14270,166955,40706,40712,19350,37924,159138,40727,40726,40761,22175,22154,40773,39352,168075,38898,33919,40802,40809,31452,40846,29206,19390,149877,149947,29047,150008,148296,150097,29598,166874,137466,31135,166270,167478,37737,37875,166468,37612,37761,37835,166252,148665,29207,16107,30578,31299,28880,148595,148472,29054,137199,28835,137406,144793,16071,137349,152623,137208,14114,136955,137273,14049,137076,137425,155467,14115,136896,22363,150053,136190,135848,136134,136374,34051,145062,34051,33877,149908,160101,146993,152924,147195,159826,17652,145134,170397,159526,26617,14131,15381,15847,22636,137506,26640,16471,145215,147681,147595,147727,158753,21707,22174,157361,22162,135135,134056,134669,37830,166675,37788,20216,20779,14361,148534,20156,132197,131967,20299,20362,153169,23144,131499,132043,14745,131850,132116,13365,20265,131776,167603,131701,35546,131596,20120,20685,20749,20386,20227,150030,147082,20290,20526,20588,20609,20428,20453,20568,20732,20825,20827,20829,20830,28278,144789,147001,147135,28018,137348,147081,20904,20931,132576,17629,132259,132242,132241,36218,166556,132878,21081,21156,133235,21217,37742,18042,29068,148364,134176,149932,135396,27089,134685,29817,16094,29849,29716,29782,29592,19342,150204,147597,21456,13700,29199,147657,21940,131909,21709,134086,22301,37469,38644,37734,22493,22413,22399,13886,22731,23193,166470,136954,137071,136976,23084,22968,37519,23166,23247,23058,153926,137715,137313,148117,14069,27909,29763,23073,155267,23169,166871,132115,37856,29836,135939,28933,18802,37896,166395,37821,14240,23582,23710,24158,24136,137622,137596,146158,24269,23375,137475,137476,14081,137376,14045,136958,14035,33066,166471,138682,144498,166312,24332,24334,137511,137131,23147,137019,23364,34324,161277,34912,24702,141408,140843,24539,16056,140719,140734,168072,159603,25024,131134,131142,140827,24985,24984,24693,142491,142599,149204,168269,25713,149093,142186,14889,142114,144464,170218,142968,25399,173147,25782,25393,25553,149987,142695,25252,142497,25659,25963,26994,15348,143502,144045,149897,144043,21773,144096,137433,169023,26318,144009,143795,15072,16784,152964,166690,152975,136956,152923,152613,30958,143619,137258,143924,13412,143887,143746,148169,26254,159012,26219,19347,26160,161904,138731,26211,144082,144097,26142,153714,14545,145466,145340,15257,145314,144382,29904,15254,26511,149034,26806,26654,15300,27326,14435,145365,148615,27187,27218,27337,27397,137490,25873,26776,27212,15319,27258,27479,147392,146586,37792,37618,166890,166603,37513,163870,166364,37991,28069,28427,149996,28007,147327,15759,28164,147516,23101,28170,22599,27940,30786,28987,148250,148086,28913,29264,29319,29332,149391,149285,20857,150180,132587,29818,147192,144991,150090,149783,155617,16134,16049,150239,166947,147253,24743,16115,29900,29756,37767,29751,17567,159210,17745,30083,16227,150745,150790,16216,30037,30323,173510,15129,29800,166604,149931,149902,15099,15821,150094,16127,149957,149747,37370,22322,37698,166627,137316,20703,152097,152039,30584,143922,30478,30479,30587,149143,145281,14942,149744,29752,29851,16063,150202,150215,16584,150166,156078,37639,152961,30750,30861,30856,30930,29648,31065,161601,153315,16654,31131,33942,31141,27181,147194,31290,31220,16750,136934,16690,37429,31217,134476,149900,131737,146874,137070,13719,21867,13680,13994,131540,134157,31458,23129,141045,154287,154268,23053,131675,30960,23082,154566,31486,16889,31837,31853,16913,154547,155324,155302,31949,150009,137136,31886,31868,31918,27314,32220,32263,32211,32590,156257,155996,162632,32151,155266,17002,158581,133398,26582,131150,144847,22468,156690,156664,149858,32733,31527,133164,154345,154947,31500,155150,39398,34373,39523,27164,144447,14818,150007,157101,39455,157088,33920,160039,158929,17642,33079,17410,32966,33033,33090,157620,39107,158274,33378,33381,158289,33875,159143,34320,160283,23174,16767,137280,23339,137377,23268,137432,34464,195004,146831,34861,160802,23042,34926,20293,34951,35007,35046,35173,35149,153219,35156,161669,161668,166901,166873,166812,166393,16045,33955,18165,18127,14322,35389,35356,169032,24397,37419,148100,26068,28969,28868,137285,40301,35999,36073,163292,22938,30659,23024,17262,14036,36394,36519,150537,36656,36682,17140,27736,28603,140065,18587,28537,28299,137178,39913,14005,149807,37051,37015,21873,18694,37307,37892,166475,16482,166652,37927,166941,166971,34021,35371,38297,38311,38295,38294,167220,29765,16066,149759,150082,148458,16103,143909,38543,167655,167526,167525,16076,149997,150136,147438,29714,29803,16124,38721,168112,26695,18973,168083,153567,38749,37736,166281,166950,166703,156606,37562,23313,35689,18748,29689,147995,38811,38769,39224,134950,24001,166853,150194,38943,169178,37622,169431,37349,17600,166736,150119,166756,39132,166469,16128,37418,18725,33812,39227,39245,162566,15869,39323,19311,39338,39516,166757,153800,27279,39457,23294,39471,170225,19344,170312,39356,19389,19351,37757,22642,135938,22562,149944,136424,30788,141087,146872,26821,15741,37976,14631,24912,141185,141675,24839,40015,40019,40059,39989,39952,39807,39887,171565,39839,172533,172286,40225,19630,147716,40472,19632,40204,172468,172269,172275,170287,40357,33981,159250,159711,158594,34300,17715,159140,159364,159216,33824,34286,159232,145367,155748,31202,144796,144960,18733,149982,15714,37851,37566,37704,131775,30905,37495,37965,20452,13376,36964,152925,30781,30804,30902,30795,137047,143817,149825,13978,20338,28634,28633,28702,28702,21524,147893,22459,22771,22410,40214,22487,28980,13487,147884,29163,158784,151447,23336,137141,166473,24844,23246,23051,17084,148616,14124,19323,166396,37819,37816,137430,134941,33906,158912,136211,148218,142374,148417,22932,146871,157505,32168,155995,155812,149945,149899,166394,37605,29666,16105,29876,166755,137375,16097,150195,27352,29683,29691,16086,150078,150164,137177,150118,132007,136228,149989,29768,149782,28837,149878,37508,29670,37727,132350,37681,166606,166422,37766,166887,153045,18741,166530,29035,149827,134399,22180,132634,134123,134328,21762,31172,137210,32254,136898,150096,137298,17710,37889,14090,166592,149933,22960,137407,137347,160900,23201,14050,146779,14e3,37471,23161,166529,137314,37748,15565,133812,19094,14730,20724,15721,15692,136092,29045,17147,164376,28175,168164,17643,27991,163407,28775,27823,15574,147437,146989,28162,28428,15727,132085,30033,14012,13512,18048,16090,18545,22980,37486,18750,36673,166940,158656,22546,22472,14038,136274,28926,148322,150129,143331,135856,140221,26809,26983,136088,144613,162804,145119,166531,145366,144378,150687,27162,145069,158903,33854,17631,17614,159014,159057,158850,159710,28439,160009,33597,137018,33773,158848,159827,137179,22921,23170,137139,23137,23153,137477,147964,14125,23023,137020,14023,29070,37776,26266,148133,23150,23083,148115,27179,147193,161590,148571,148170,28957,148057,166369,20400,159016,23746,148686,163405,148413,27148,148054,135940,28838,28979,148457,15781,27871,194597,150095,32357,23019,23855,15859,24412,150109,137183,32164,33830,21637,146170,144128,131604,22398,133333,132633,16357,139166,172726,28675,168283,23920,29583,31955,166489,168992,20424,32743,29389,29456,162548,29496,29497,153334,29505,29512,16041,162584,36972,29173,149746,29665,33270,16074,30476,16081,27810,22269,29721,29726,29727,16098,16112,16116,16122,29907,16142,16211,30018,30061,30066,30093,16252,30152,30172,16320,30285,16343,30324,16348,30330,151388,29064,22051,35200,22633,16413,30531,16441,26465,16453,13787,30616,16490,16495,23646,30654,30667,22770,30744,28857,30748,16552,30777,30791,30801,30822,33864,152885,31027,26627,31026,16643,16649,31121,31129,36795,31238,36796,16743,31377,16818,31420,33401,16836,31439,31451,16847,20001,31586,31596,31611,31762,31771,16992,17018,31867,31900,17036,31928,17044,31981,36755,28864,134351,32207,32212,32208,32253,32686,32692,29343,17303,32800,32805,31545,32814,32817,32852,15820,22452,28832,32951,33001,17389,33036,29482,33038,33042,30048,33044,17409,15161,33110,33113,33114,17427,22586,33148,33156,17445,33171,17453,33189,22511,33217,33252,33364,17551,33446,33398,33482,33496,33535,17584,33623,38505,27018,33797,28917,33892,24803,33928,17668,33982,34017,34040,34064,34104,34130,17723,34159,34160,34272,17783,34418,34450,34482,34543,38469,34699,17926,17943,34990,35071,35108,35143,35217,162151,35369,35384,35476,35508,35921,36052,36082,36124,18328,22623,36291,18413,20206,36410,21976,22356,36465,22005,36528,18487,36558,36578,36580,36589,36594,36791,36801,36810,36812,36915,39364,18605,39136,37395,18718,37416,37464,37483,37553,37550,37567,37603,37611,37619,37620,37629,37699,37764,37805,18757,18769,40639,37911,21249,37917,37933,37950,18794,37972,38009,38189,38306,18855,38388,38451,18917,26528,18980,38720,18997,38834,38850,22100,19172,24808,39097,19225,39153,22596,39182,39193,20916,39196,39223,39234,39261,39266,19312,39365,19357,39484,39695,31363,39785,39809,39901,39921,39924,19565,39968,14191,138178,40265,39994,40702,22096,40339,40381,40384,40444,38134,36790,40571,40620,40625,40637,40646,38108,40674,40689,40696,31432,40772,131220,131767,132e3,26906,38083,22956,132311,22592,38081,14265,132565,132629,132726,136890,22359,29043,133826,133837,134079,21610,194619,134091,21662,134139,134203,134227,134245,134268,24807,134285,22138,134325,134365,134381,134511,134578,134600,26965,39983,34725,134660,134670,134871,135056,134957,134771,23584,135100,24075,135260,135247,135286,26398,135291,135304,135318,13895,135359,135379,135471,135483,21348,33965,135907,136053,135990,35713,136567,136729,137155,137159,20088,28859,137261,137578,137773,137797,138282,138352,138412,138952,25283,138965,139029,29080,26709,139333,27113,14024,139900,140247,140282,141098,141425,141647,33533,141671,141715,142037,35237,142056,36768,142094,38840,142143,38983,39613,142412,null,142472,142519,154600,142600,142610,142775,142741,142914,143220,143308,143411,143462,144159,144350,24497,26184,26303,162425,144743,144883,29185,149946,30679,144922,145174,32391,131910,22709,26382,26904,146087,161367,155618,146961,147129,161278,139418,18640,19128,147737,166554,148206,148237,147515,148276,148374,150085,132554,20946,132625,22943,138920,15294,146687,148484,148694,22408,149108,14747,149295,165352,170441,14178,139715,35678,166734,39382,149522,149755,150037,29193,150208,134264,22885,151205,151430,132985,36570,151596,21135,22335,29041,152217,152601,147274,150183,21948,152646,152686,158546,37332,13427,152895,161330,152926,18200,152930,152934,153543,149823,153693,20582,13563,144332,24798,153859,18300,166216,154286,154505,154630,138640,22433,29009,28598,155906,162834,36950,156082,151450,35682,156674,156746,23899,158711,36662,156804,137500,35562,150006,156808,147439,156946,19392,157119,157365,141083,37989,153569,24981,23079,194765,20411,22201,148769,157436,20074,149812,38486,28047,158909,13848,35191,157593,157806,156689,157790,29151,157895,31554,168128,133649,157990,37124,158009,31301,40432,158202,39462,158253,13919,156777,131105,31107,158260,158555,23852,144665,33743,158621,18128,158884,30011,34917,159150,22710,14108,140685,159819,160205,15444,160384,160389,37505,139642,160395,37680,160486,149968,27705,38047,160848,134904,34855,35061,141606,164979,137137,28344,150058,137248,14756,14009,23568,31203,17727,26294,171181,170148,35139,161740,161880,22230,16607,136714,14753,145199,164072,136133,29101,33638,162269,168360,23143,19639,159919,166315,162301,162314,162571,163174,147834,31555,31102,163849,28597,172767,27139,164632,21410,159239,37823,26678,38749,164207,163875,158133,136173,143919,163912,23941,166960,163971,22293,38947,166217,23979,149896,26046,27093,21458,150181,147329,15377,26422,163984,164084,164142,139169,164175,164233,164271,164378,164614,164655,164746,13770,164968,165546,18682,25574,166230,30728,37461,166328,17394,166375,17375,166376,166726,166868,23032,166921,36619,167877,168172,31569,168208,168252,15863,168286,150218,36816,29327,22155,169191,169449,169392,169400,169778,170193,170313,170346,170435,170536,170766,171354,171419,32415,171768,171811,19620,38215,172691,29090,172799,19857,36882,173515,19868,134300,36798,21953,36794,140464,36793,150163,17673,32383,28502,27313,20202,13540,166700,161949,14138,36480,137205,163876,166764,166809,162366,157359,15851,161365,146615,153141,153942,20122,155265,156248,22207,134765,36366,23405,147080,150686,25566,25296,137206,137339,25904,22061,154698,21530,152337,15814,171416,19581,22050,22046,32585,155352,22901,146752,34672,19996,135146,134473,145082,33047,40286,36120,30267,40005,30286,30649,37701,21554,33096,33527,22053,33074,33816,32957,21994,31074,22083,21526,134813,13774,22021,22001,26353,164578,13869,30004,22e3,21946,21655,21874,134209,134294,24272,151880,134774,142434,134818,40619,32090,21982,135285,25245,38765,21652,36045,29174,37238,25596,25529,25598,21865,142147,40050,143027,20890,13535,134567,20903,21581,21790,21779,30310,36397,157834,30129,32950,34820,34694,35015,33206,33820,135361,17644,29444,149254,23440,33547,157843,22139,141044,163119,147875,163187,159440,160438,37232,135641,37384,146684,173737,134828,134905,29286,138402,18254,151490,163833,135147,16634,40029,25887,142752,18675,149472,171388,135148,134666,24674,161187,135149,null,155720,135559,29091,32398,40272,19994,19972,13687,23309,27826,21351,13996,14812,21373,13989,149016,22682,150382,33325,21579,22442,154261,133497,null,14930,140389,29556,171692,19721,39917,146686,171824,19547,151465,169374,171998,33884,146870,160434,157619,145184,25390,32037,147191,146988,14890,36872,21196,15988,13946,17897,132238,30272,23280,134838,30842,163630,22695,16575,22140,39819,23924,30292,173108,40581,19681,30201,14331,24857,143578,148466,null,22109,135849,22439,149859,171526,21044,159918,13741,27722,40316,31830,39737,22494,137068,23635,25811,169168,156469,160100,34477,134440,159010,150242,134513,null,20990,139023,23950,38659,138705,40577,36940,31519,39682,23761,31651,25192,25397,39679,31695,39722,31870,39726,31810,31878,39957,31740,39689,40727,39963,149822,40794,21875,23491,20477,40600,20466,21088,15878,21201,22375,20566,22967,24082,38856,40363,36700,21609,38836,39232,38842,21292,24880,26924,21466,39946,40194,19515,38465,27008,20646,30022,137069,39386,21107,null,37209,38529,37212,null,37201,167575,25471,159011,27338,22033,37262,30074,25221,132092,29519,31856,154657,146685,null,149785,30422,39837,20010,134356,33726,34882,null,23626,27072,20717,22394,21023,24053,20174,27697,131570,20281,21660,21722,21146,36226,13822,24332,13811,null,27474,37244,40869,39831,38958,39092,39610,40616,40580,29050,31508,null,27642,34840,32632,null,22048,173642,36471,40787,null,36308,36431,40476,36353,25218,164733,36392,36469,31443,150135,31294,30936,27882,35431,30215,166490,40742,27854,34774,30147,172722,30803,194624,36108,29410,29553,35629,29442,29937,36075,150203,34351,24506,34976,17591,null,137275,159237,null,35454,140571,null,24829,30311,39639,40260,37742,39823,34805,null,34831,36087,29484,38689,39856,13782,29362,19463,31825,39242,155993,24921,19460,40598,24957,null,22367,24943,25254,25145,25294,14940,25058,21418,144373,25444,26626,13778,23895,166850,36826,167481,null,20697,138566,30982,21298,38456,134971,16485,null,30718,null,31938,155418,31962,31277,32870,32867,32077,29957,29938,35220,33306,26380,32866,160902,32859,29936,33027,30500,35209,157644,30035,159441,34729,34766,33224,34700,35401,36013,35651,30507,29944,34010,13877,27058,36262,null,35241,29800,28089,34753,147473,29927,15835,29046,24740,24988,15569,29026,24695,null,32625,166701,29264,24809,19326,21024,15384,146631,155351,161366,152881,137540,135934,170243,159196,159917,23745,156077,166415,145015,131310,157766,151310,17762,23327,156492,40784,40614,156267,12288,65292,12289,12290,65294,8231,65307,65306,65311,65281,65072,8230,8229,65104,65105,65106,183,65108,65109,65110,65111,65372,8211,65073,8212,65075,9588,65076,65103,65288,65289,65077,65078,65371,65373,65079,65080,12308,12309,65081,65082,12304,12305,65083,65084,12298,12299,65085,65086,12296,12297,65087,65088,12300,12301,65089,65090,12302,12303,65091,65092,65113,65114,65115,65116,65117,65118,8216,8217,8220,8221,12317,12318,8245,8242,65283,65286,65290,8251,167,12291,9675,9679,9651,9650,9678,9734,9733,9671,9670,9633,9632,9661,9660,12963,8453,175,65507,65343,717,65097,65098,65101,65102,65099,65100,65119,65120,65121,65291,65293,215,247,177,8730,65308,65310,65309,8806,8807,8800,8734,8786,8801,65122,65123,65124,65125,65126,65374,8745,8746,8869,8736,8735,8895,13266,13265,8747,8750,8757,8756,9792,9794,8853,8857,8593,8595,8592,8594,8598,8599,8601,8600,8741,8739,65295,65340,8725,65128,65284,65509,12306,65504,65505,65285,65312,8451,8457,65129,65130,65131,13269,13212,13213,13214,13262,13217,13198,13199,13252,176,20825,20827,20830,20829,20833,20835,21991,29929,31950,9601,9602,9603,9604,9605,9606,9607,9608,9615,9614,9613,9612,9611,9610,9609,9532,9524,9516,9508,9500,9620,9472,9474,9621,9484,9488,9492,9496,9581,9582,9584,9583,9552,9566,9578,9569,9698,9699,9701,9700,9585,9586,9587,65296,65297,65298,65299,65300,65301,65302,65303,65304,65305,8544,8545,8546,8547,8548,8549,8550,8551,8552,8553,12321,12322,12323,12324,12325,12326,12327,12328,12329,21313,21316,21317,65313,65314,65315,65316,65317,65318,65319,65320,65321,65322,65323,65324,65325,65326,65327,65328,65329,65330,65331,65332,65333,65334,65335,65336,65337,65338,65345,65346,65347,65348,65349,65350,65351,65352,65353,65354,65355,65356,65357,65358,65359,65360,65361,65362,65363,65364,65365,65366,65367,65368,65369,65370,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,931,932,933,934,935,936,937,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,963,964,965,966,967,968,969,12549,12550,12551,12552,12553,12554,12555,12556,12557,12558,12559,12560,12561,12562,12563,12564,12565,12566,12567,12568,12569,12570,12571,12572,12573,12574,12575,12576,12577,12578,12579,12580,12581,12582,12583,12584,12585,729,713,714,711,715,9216,9217,9218,9219,9220,9221,9222,9223,9224,9225,9226,9227,9228,9229,9230,9231,9232,9233,9234,9235,9236,9237,9238,9239,9240,9241,9242,9243,9244,9245,9246,9247,9249,8364,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,19968,20057,19969,19971,20035,20061,20102,20108,20154,20799,20837,20843,20960,20992,20993,21147,21269,21313,21340,21448,19977,19979,19976,19978,20011,20024,20961,20037,20040,20063,20062,20110,20129,20800,20995,21242,21315,21449,21475,22303,22763,22805,22823,22899,23376,23377,23379,23544,23567,23586,23608,23665,24029,24037,24049,24050,24051,24062,24178,24318,24331,24339,25165,19985,19984,19981,20013,20016,20025,20043,23609,20104,20113,20117,20114,20116,20130,20161,20160,20163,20166,20167,20173,20170,20171,20164,20803,20801,20839,20845,20846,20844,20887,20982,20998,20999,21e3,21243,21246,21247,21270,21305,21320,21319,21317,21342,21380,21451,21450,21453,22764,22825,22827,22826,22829,23380,23569,23588,23610,23663,24052,24187,24319,24340,24341,24515,25096,25142,25163,25166,25903,25991,26007,26020,26041,26085,26352,26376,26408,27424,27490,27513,27595,27604,27611,27663,27700,28779,29226,29238,29243,29255,29273,29275,29356,29579,19993,19990,19989,19988,19992,20027,20045,20047,20046,20197,20184,20180,20181,20182,20183,20195,20196,20185,20190,20805,20804,20873,20874,20908,20985,20986,20984,21002,21152,21151,21253,21254,21271,21277,20191,21322,21321,21345,21344,21359,21358,21435,21487,21476,21491,21484,21486,21481,21480,21500,21496,21493,21483,21478,21482,21490,21489,21488,21477,21485,21499,22235,22234,22806,22830,22833,22900,22902,23381,23427,23612,24040,24039,24038,24066,24067,24179,24188,24321,24344,24343,24517,25098,25171,25172,25170,25169,26021,26086,26414,26412,26410,26411,26413,27491,27597,27665,27664,27704,27713,27712,27710,29359,29572,29577,29916,29926,29976,29983,29992,29993,3e4,30001,30002,30003,30091,30333,30382,30399,30446,30683,30690,30707,31034,31166,31348,31435,19998,19999,20050,20051,20073,20121,20132,20134,20133,20223,20233,20249,20234,20245,20237,20240,20241,20239,20210,20214,20219,20208,20211,20221,20225,20235,20809,20807,20806,20808,20840,20849,20877,20912,21015,21009,21010,21006,21014,21155,21256,21281,21280,21360,21361,21513,21519,21516,21514,21520,21505,21515,21508,21521,21517,21512,21507,21518,21510,21522,22240,22238,22237,22323,22320,22312,22317,22316,22319,22313,22809,22810,22839,22840,22916,22904,22915,22909,22905,22914,22913,23383,23384,23431,23432,23429,23433,23546,23574,23673,24030,24070,24182,24180,24335,24347,24537,24534,25102,25100,25101,25104,25187,25179,25176,25910,26089,26088,26092,26093,26354,26355,26377,26429,26420,26417,26421,27425,27492,27515,27670,27741,27735,27737,27743,27744,27728,27733,27745,27739,27725,27726,28784,29279,29277,30334,31481,31859,31992,32566,32650,32701,32769,32771,32780,32786,32819,32895,32905,32907,32908,33251,33258,33267,33276,33292,33307,33311,33390,33394,33406,34411,34880,34892,34915,35199,38433,20018,20136,20301,20303,20295,20311,20318,20276,20315,20309,20272,20304,20305,20285,20282,20280,20291,20308,20284,20294,20323,20316,20320,20271,20302,20278,20313,20317,20296,20314,20812,20811,20813,20853,20918,20919,21029,21028,21033,21034,21032,21163,21161,21162,21164,21283,21363,21365,21533,21549,21534,21566,21542,21582,21543,21574,21571,21555,21576,21570,21531,21545,21578,21561,21563,21560,21550,21557,21558,21536,21564,21568,21553,21547,21535,21548,22250,22256,22244,22251,22346,22353,22336,22349,22343,22350,22334,22352,22351,22331,22767,22846,22941,22930,22952,22942,22947,22937,22934,22925,22948,22931,22922,22949,23389,23388,23386,23387,23436,23435,23439,23596,23616,23617,23615,23614,23696,23697,23700,23692,24043,24076,24207,24199,24202,24311,24324,24351,24420,24418,24439,24441,24536,24524,24535,24525,24561,24555,24568,24554,25106,25105,25220,25239,25238,25216,25206,25225,25197,25226,25212,25214,25209,25203,25234,25199,25240,25198,25237,25235,25233,25222,25913,25915,25912,26097,26356,26463,26446,26447,26448,26449,26460,26454,26462,26441,26438,26464,26451,26455,27493,27599,27714,27742,27801,27777,27784,27785,27781,27803,27754,27770,27792,27760,27788,27752,27798,27794,27773,27779,27762,27774,27764,27782,27766,27789,27796,27800,27778,28790,28796,28797,28792,29282,29281,29280,29380,29378,29590,29996,29995,30007,30008,30338,30447,30691,31169,31168,31167,31350,31995,32597,32918,32915,32925,32920,32923,32922,32946,33391,33426,33419,33421,35211,35282,35328,35895,35910,35925,35997,36196,36208,36275,36523,36554,36763,36784,36802,36806,36805,36804,24033,37009,37026,37034,37030,37027,37193,37318,37324,38450,38446,38449,38442,38444,20006,20054,20083,20107,20123,20126,20139,20140,20335,20381,20365,20339,20351,20332,20379,20363,20358,20355,20336,20341,20360,20329,20347,20374,20350,20367,20369,20346,20820,20818,20821,20841,20855,20854,20856,20925,20989,21051,21048,21047,21050,21040,21038,21046,21057,21182,21179,21330,21332,21331,21329,21350,21367,21368,21369,21462,21460,21463,21619,21621,21654,21624,21653,21632,21627,21623,21636,21650,21638,21628,21648,21617,21622,21644,21658,21602,21608,21643,21629,21646,22266,22403,22391,22378,22377,22369,22374,22372,22396,22812,22857,22855,22856,22852,22868,22974,22971,22996,22969,22958,22993,22982,22992,22989,22987,22995,22986,22959,22963,22994,22981,23391,23396,23395,23447,23450,23448,23452,23449,23451,23578,23624,23621,23622,23735,23713,23736,23721,23723,23729,23731,24088,24090,24086,24085,24091,24081,24184,24218,24215,24220,24213,24214,24310,24358,24359,24361,24448,24449,24447,24444,24541,24544,24573,24565,24575,24591,24596,24623,24629,24598,24618,24597,24609,24615,24617,24619,24603,25110,25109,25151,25150,25152,25215,25289,25292,25284,25279,25282,25273,25298,25307,25259,25299,25300,25291,25288,25256,25277,25276,25296,25305,25287,25293,25269,25306,25265,25304,25302,25303,25286,25260,25294,25918,26023,26044,26106,26132,26131,26124,26118,26114,26126,26112,26127,26133,26122,26119,26381,26379,26477,26507,26517,26481,26524,26483,26487,26503,26525,26519,26479,26480,26495,26505,26494,26512,26485,26522,26515,26492,26474,26482,27427,27494,27495,27519,27667,27675,27875,27880,27891,27825,27852,27877,27827,27837,27838,27836,27874,27819,27861,27859,27832,27844,27833,27841,27822,27863,27845,27889,27839,27835,27873,27867,27850,27820,27887,27868,27862,27872,28821,28814,28818,28810,28825,29228,29229,29240,29256,29287,29289,29376,29390,29401,29399,29392,29609,29608,29599,29611,29605,30013,30109,30105,30106,30340,30402,30450,30452,30693,30717,31038,31040,31041,31177,31176,31354,31353,31482,31998,32596,32652,32651,32773,32954,32933,32930,32945,32929,32939,32937,32948,32938,32943,33253,33278,33293,33459,33437,33433,33453,33469,33439,33465,33457,33452,33445,33455,33464,33443,33456,33470,33463,34382,34417,21021,34920,36555,36814,36820,36817,37045,37048,37041,37046,37319,37329,38263,38272,38428,38464,38463,38459,38468,38466,38585,38632,38738,38750,20127,20141,20142,20449,20405,20399,20415,20448,20433,20431,20445,20419,20406,20440,20447,20426,20439,20398,20432,20420,20418,20442,20430,20446,20407,20823,20882,20881,20896,21070,21059,21066,21069,21068,21067,21063,21191,21193,21187,21185,21261,21335,21371,21402,21467,21676,21696,21672,21710,21705,21688,21670,21683,21703,21698,21693,21674,21697,21700,21704,21679,21675,21681,21691,21673,21671,21695,22271,22402,22411,22432,22435,22434,22478,22446,22419,22869,22865,22863,22862,22864,23004,23e3,23039,23011,23016,23043,23013,23018,23002,23014,23041,23035,23401,23459,23462,23460,23458,23461,23553,23630,23631,23629,23627,23769,23762,24055,24093,24101,24095,24189,24224,24230,24314,24328,24365,24421,24456,24453,24458,24459,24455,24460,24457,24594,24605,24608,24613,24590,24616,24653,24688,24680,24674,24646,24643,24684,24683,24682,24676,25153,25308,25366,25353,25340,25325,25345,25326,25341,25351,25329,25335,25327,25324,25342,25332,25361,25346,25919,25925,26027,26045,26082,26149,26157,26144,26151,26159,26143,26152,26161,26148,26359,26623,26579,26609,26580,26576,26604,26550,26543,26613,26601,26607,26564,26577,26548,26586,26597,26552,26575,26590,26611,26544,26585,26594,26589,26578,27498,27523,27526,27573,27602,27607,27679,27849,27915,27954,27946,27969,27941,27916,27953,27934,27927,27963,27965,27966,27958,27931,27893,27961,27943,27960,27945,27950,27957,27918,27947,28843,28858,28851,28844,28847,28845,28856,28846,28836,29232,29298,29295,29300,29417,29408,29409,29623,29642,29627,29618,29645,29632,29619,29978,29997,30031,30028,30030,30027,30123,30116,30117,30114,30115,30328,30342,30343,30344,30408,30406,30403,30405,30465,30457,30456,30473,30475,30462,30460,30471,30684,30722,30740,30732,30733,31046,31049,31048,31047,31161,31162,31185,31186,31179,31359,31361,31487,31485,31869,32002,32005,32e3,32009,32007,32004,32006,32568,32654,32703,32772,32784,32781,32785,32822,32982,32997,32986,32963,32964,32972,32993,32987,32974,32990,32996,32989,33268,33314,33511,33539,33541,33507,33499,33510,33540,33509,33538,33545,33490,33495,33521,33537,33500,33492,33489,33502,33491,33503,33519,33542,34384,34425,34427,34426,34893,34923,35201,35284,35336,35330,35331,35998,36e3,36212,36211,36276,36557,36556,36848,36838,36834,36842,36837,36845,36843,36836,36840,37066,37070,37057,37059,37195,37194,37325,38274,38480,38475,38476,38477,38754,38761,38859,38893,38899,38913,39080,39131,39135,39318,39321,20056,20147,20492,20493,20515,20463,20518,20517,20472,20521,20502,20486,20540,20511,20506,20498,20497,20474,20480,20500,20520,20465,20513,20491,20505,20504,20467,20462,20525,20522,20478,20523,20489,20860,20900,20901,20898,20941,20940,20934,20939,21078,21084,21076,21083,21085,21290,21375,21407,21405,21471,21736,21776,21761,21815,21756,21733,21746,21766,21754,21780,21737,21741,21729,21769,21742,21738,21734,21799,21767,21757,21775,22275,22276,22466,22484,22475,22467,22537,22799,22871,22872,22874,23057,23064,23068,23071,23067,23059,23020,23072,23075,23081,23077,23052,23049,23403,23640,23472,23475,23478,23476,23470,23477,23481,23480,23556,23633,23637,23632,23789,23805,23803,23786,23784,23792,23798,23809,23796,24046,24109,24107,24235,24237,24231,24369,24466,24465,24464,24665,24675,24677,24656,24661,24685,24681,24687,24708,24735,24730,24717,24724,24716,24709,24726,25159,25331,25352,25343,25422,25406,25391,25429,25410,25414,25423,25417,25402,25424,25405,25386,25387,25384,25421,25420,25928,25929,26009,26049,26053,26178,26185,26191,26179,26194,26188,26181,26177,26360,26388,26389,26391,26657,26680,26696,26694,26707,26681,26690,26708,26665,26803,26647,26700,26705,26685,26612,26704,26688,26684,26691,26666,26693,26643,26648,26689,27530,27529,27575,27683,27687,27688,27686,27684,27888,28010,28053,28040,28039,28006,28024,28023,27993,28051,28012,28041,28014,27994,28020,28009,28044,28042,28025,28037,28005,28052,28874,28888,28900,28889,28872,28879,29241,29305,29436,29433,29437,29432,29431,29574,29677,29705,29678,29664,29674,29662,30036,30045,30044,30042,30041,30142,30149,30151,30130,30131,30141,30140,30137,30146,30136,30347,30384,30410,30413,30414,30505,30495,30496,30504,30697,30768,30759,30776,30749,30772,30775,30757,30765,30752,30751,30770,31061,31056,31072,31071,31062,31070,31069,31063,31066,31204,31203,31207,31199,31206,31209,31192,31364,31368,31449,31494,31505,31881,32033,32023,32011,32010,32032,32034,32020,32016,32021,32026,32028,32013,32025,32027,32570,32607,32660,32709,32705,32774,32792,32789,32793,32791,32829,32831,33009,33026,33008,33029,33005,33012,33030,33016,33011,33032,33021,33034,33020,33007,33261,33260,33280,33296,33322,33323,33320,33324,33467,33579,33618,33620,33610,33592,33616,33609,33589,33588,33615,33586,33593,33590,33559,33600,33585,33576,33603,34388,34442,34474,34451,34468,34473,34444,34467,34460,34928,34935,34945,34946,34941,34937,35352,35344,35342,35340,35349,35338,35351,35347,35350,35343,35345,35912,35962,35961,36001,36002,36215,36524,36562,36564,36559,36785,36865,36870,36855,36864,36858,36852,36867,36861,36869,36856,37013,37089,37085,37090,37202,37197,37196,37336,37341,37335,37340,37337,38275,38498,38499,38497,38491,38493,38500,38488,38494,38587,39138,39340,39592,39640,39717,39730,39740,20094,20602,20605,20572,20551,20547,20556,20570,20553,20581,20598,20558,20565,20597,20596,20599,20559,20495,20591,20589,20828,20885,20976,21098,21103,21202,21209,21208,21205,21264,21263,21273,21311,21312,21310,21443,26364,21830,21866,21862,21828,21854,21857,21827,21834,21809,21846,21839,21845,21807,21860,21816,21806,21852,21804,21859,21811,21825,21847,22280,22283,22281,22495,22533,22538,22534,22496,22500,22522,22530,22581,22519,22521,22816,22882,23094,23105,23113,23142,23146,23104,23100,23138,23130,23110,23114,23408,23495,23493,23492,23490,23487,23494,23561,23560,23559,23648,23644,23645,23815,23814,23822,23835,23830,23842,23825,23849,23828,23833,23844,23847,23831,24034,24120,24118,24115,24119,24247,24248,24246,24245,24254,24373,24375,24407,24428,24425,24427,24471,24473,24478,24472,24481,24480,24476,24703,24739,24713,24736,24744,24779,24756,24806,24765,24773,24763,24757,24796,24764,24792,24789,24774,24799,24760,24794,24775,25114,25115,25160,25504,25511,25458,25494,25506,25509,25463,25447,25496,25514,25457,25513,25481,25475,25499,25451,25512,25476,25480,25497,25505,25516,25490,25487,25472,25467,25449,25448,25466,25949,25942,25937,25945,25943,21855,25935,25944,25941,25940,26012,26011,26028,26063,26059,26060,26062,26205,26202,26212,26216,26214,26206,26361,21207,26395,26753,26799,26786,26771,26805,26751,26742,26801,26791,26775,26800,26755,26820,26797,26758,26757,26772,26781,26792,26783,26785,26754,27442,27578,27627,27628,27691,28046,28092,28147,28121,28082,28129,28108,28132,28155,28154,28165,28103,28107,28079,28113,28078,28126,28153,28088,28151,28149,28101,28114,28186,28085,28122,28139,28120,28138,28145,28142,28136,28102,28100,28074,28140,28095,28134,28921,28937,28938,28925,28911,29245,29309,29313,29468,29467,29462,29459,29465,29575,29701,29706,29699,29702,29694,29709,29920,29942,29943,29980,29986,30053,30054,30050,30064,30095,30164,30165,30133,30154,30157,30350,30420,30418,30427,30519,30526,30524,30518,30520,30522,30827,30787,30798,31077,31080,31085,31227,31378,31381,31520,31528,31515,31532,31526,31513,31518,31534,31890,31895,31893,32070,32067,32113,32046,32057,32060,32064,32048,32051,32068,32047,32066,32050,32049,32573,32670,32666,32716,32718,32722,32796,32842,32838,33071,33046,33059,33067,33065,33072,33060,33282,33333,33335,33334,33337,33678,33694,33688,33656,33698,33686,33725,33707,33682,33674,33683,33673,33696,33655,33659,33660,33670,33703,34389,24426,34503,34496,34486,34500,34485,34502,34507,34481,34479,34505,34899,34974,34952,34987,34962,34966,34957,34955,35219,35215,35370,35357,35363,35365,35377,35373,35359,35355,35362,35913,35930,36009,36012,36011,36008,36010,36007,36199,36198,36286,36282,36571,36575,36889,36877,36890,36887,36899,36895,36893,36880,36885,36894,36896,36879,36898,36886,36891,36884,37096,37101,37117,37207,37326,37365,37350,37347,37351,37357,37353,38281,38506,38517,38515,38520,38512,38516,38518,38519,38508,38592,38634,38633,31456,31455,38914,38915,39770,40165,40565,40575,40613,40635,20642,20621,20613,20633,20625,20608,20630,20632,20634,26368,20977,21106,21108,21109,21097,21214,21213,21211,21338,21413,21883,21888,21927,21884,21898,21917,21912,21890,21916,21930,21908,21895,21899,21891,21939,21934,21919,21822,21938,21914,21947,21932,21937,21886,21897,21931,21913,22285,22575,22570,22580,22564,22576,22577,22561,22557,22560,22777,22778,22880,23159,23194,23167,23186,23195,23207,23411,23409,23506,23500,23507,23504,23562,23563,23601,23884,23888,23860,23879,24061,24133,24125,24128,24131,24190,24266,24257,24258,24260,24380,24429,24489,24490,24488,24785,24801,24754,24758,24800,24860,24867,24826,24853,24816,24827,24820,24936,24817,24846,24822,24841,24832,24850,25119,25161,25507,25484,25551,25536,25577,25545,25542,25549,25554,25571,25552,25569,25558,25581,25582,25462,25588,25578,25563,25682,25562,25593,25950,25958,25954,25955,26001,26e3,26031,26222,26224,26228,26230,26223,26257,26234,26238,26231,26366,26367,26399,26397,26874,26837,26848,26840,26839,26885,26847,26869,26862,26855,26873,26834,26866,26851,26827,26829,26893,26898,26894,26825,26842,26990,26875,27454,27450,27453,27544,27542,27580,27631,27694,27695,27692,28207,28216,28244,28193,28210,28263,28234,28192,28197,28195,28187,28251,28248,28196,28246,28270,28205,28198,28271,28212,28237,28218,28204,28227,28189,28222,28363,28297,28185,28238,28259,28228,28274,28265,28255,28953,28954,28966,28976,28961,28982,29038,28956,29260,29316,29312,29494,29477,29492,29481,29754,29738,29747,29730,29733,29749,29750,29748,29743,29723,29734,29736,29989,29990,30059,30058,30178,30171,30179,30169,30168,30174,30176,30331,30332,30358,30355,30388,30428,30543,30701,30813,30828,30831,31245,31240,31243,31237,31232,31384,31383,31382,31461,31459,31561,31574,31558,31568,31570,31572,31565,31563,31567,31569,31903,31909,32094,32080,32104,32085,32043,32110,32114,32097,32102,32098,32112,32115,21892,32724,32725,32779,32850,32901,33109,33108,33099,33105,33102,33081,33094,33086,33100,33107,33140,33298,33308,33769,33795,33784,33805,33760,33733,33803,33729,33775,33777,33780,33879,33802,33776,33804,33740,33789,33778,33738,33848,33806,33796,33756,33799,33748,33759,34395,34527,34521,34541,34516,34523,34532,34512,34526,34903,35009,35010,34993,35203,35222,35387,35424,35413,35422,35388,35393,35412,35419,35408,35398,35380,35386,35382,35414,35937,35970,36015,36028,36019,36029,36033,36027,36032,36020,36023,36022,36031,36024,36234,36229,36225,36302,36317,36299,36314,36305,36300,36315,36294,36603,36600,36604,36764,36910,36917,36913,36920,36914,36918,37122,37109,37129,37118,37219,37221,37327,37396,37397,37411,37385,37406,37389,37392,37383,37393,38292,38287,38283,38289,38291,38290,38286,38538,38542,38539,38525,38533,38534,38541,38514,38532,38593,38597,38596,38598,38599,38639,38642,38860,38917,38918,38920,39143,39146,39151,39145,39154,39149,39342,39341,40643,40653,40657,20098,20653,20661,20658,20659,20677,20670,20652,20663,20667,20655,20679,21119,21111,21117,21215,21222,21220,21218,21219,21295,21983,21992,21971,21990,21966,21980,21959,21969,21987,21988,21999,21978,21985,21957,21958,21989,21961,22290,22291,22622,22609,22616,22615,22618,22612,22635,22604,22637,22602,22626,22610,22603,22887,23233,23241,23244,23230,23229,23228,23219,23234,23218,23913,23919,24140,24185,24265,24264,24338,24409,24492,24494,24858,24847,24904,24863,24819,24859,24825,24833,24840,24910,24908,24900,24909,24894,24884,24871,24845,24838,24887,25121,25122,25619,25662,25630,25642,25645,25661,25644,25615,25628,25620,25613,25654,25622,25623,25606,25964,26015,26032,26263,26249,26247,26248,26262,26244,26264,26253,26371,27028,26989,26970,26999,26976,26964,26997,26928,27010,26954,26984,26987,26974,26963,27001,27014,26973,26979,26971,27463,27506,27584,27583,27603,27645,28322,28335,28371,28342,28354,28304,28317,28359,28357,28325,28312,28348,28346,28331,28369,28310,28316,28356,28372,28330,28327,28340,29006,29017,29033,29028,29001,29031,29020,29036,29030,29004,29029,29022,28998,29032,29014,29242,29266,29495,29509,29503,29502,29807,29786,29781,29791,29790,29761,29759,29785,29787,29788,30070,30072,30208,30192,30209,30194,30193,30202,30207,30196,30195,30430,30431,30555,30571,30566,30558,30563,30585,30570,30572,30556,30565,30568,30562,30702,30862,30896,30871,30872,30860,30857,30844,30865,30867,30847,31098,31103,31105,33836,31165,31260,31258,31264,31252,31263,31262,31391,31392,31607,31680,31584,31598,31591,31921,31923,31925,32147,32121,32145,32129,32143,32091,32622,32617,32618,32626,32681,32680,32676,32854,32856,32902,32900,33137,33136,33144,33125,33134,33139,33131,33145,33146,33126,33285,33351,33922,33911,33853,33841,33909,33894,33899,33865,33900,33883,33852,33845,33889,33891,33897,33901,33862,34398,34396,34399,34553,34579,34568,34567,34560,34558,34555,34562,34563,34566,34570,34905,35039,35028,35033,35036,35032,35037,35041,35018,35029,35026,35228,35299,35435,35442,35443,35430,35433,35440,35463,35452,35427,35488,35441,35461,35437,35426,35438,35436,35449,35451,35390,35432,35938,35978,35977,36042,36039,36040,36036,36018,36035,36034,36037,36321,36319,36328,36335,36339,36346,36330,36324,36326,36530,36611,36617,36606,36618,36767,36786,36939,36938,36947,36930,36948,36924,36949,36944,36935,36943,36942,36941,36945,36926,36929,37138,37143,37228,37226,37225,37321,37431,37463,37432,37437,37440,37438,37467,37451,37476,37457,37428,37449,37453,37445,37433,37439,37466,38296,38552,38548,38549,38605,38603,38601,38602,38647,38651,38649,38646,38742,38772,38774,38928,38929,38931,38922,38930,38924,39164,39156,39165,39166,39347,39345,39348,39649,40169,40578,40718,40723,40736,20711,20718,20709,20694,20717,20698,20693,20687,20689,20721,20686,20713,20834,20979,21123,21122,21297,21421,22014,22016,22043,22039,22013,22036,22022,22025,22029,22030,22007,22038,22047,22024,22032,22006,22296,22294,22645,22654,22659,22675,22666,22649,22661,22653,22781,22821,22818,22820,22890,22889,23265,23270,23273,23255,23254,23256,23267,23413,23518,23527,23521,23525,23526,23528,23522,23524,23519,23565,23650,23940,23943,24155,24163,24149,24151,24148,24275,24278,24330,24390,24432,24505,24903,24895,24907,24951,24930,24931,24927,24922,24920,24949,25130,25735,25688,25684,25764,25720,25695,25722,25681,25703,25652,25709,25723,25970,26017,26071,26070,26274,26280,26269,27036,27048,27029,27073,27054,27091,27083,27035,27063,27067,27051,27060,27088,27085,27053,27084,27046,27075,27043,27465,27468,27699,28467,28436,28414,28435,28404,28457,28478,28448,28460,28431,28418,28450,28415,28399,28422,28465,28472,28466,28451,28437,28459,28463,28552,28458,28396,28417,28402,28364,28407,29076,29081,29053,29066,29060,29074,29246,29330,29334,29508,29520,29796,29795,29802,29808,29805,29956,30097,30247,30221,30219,30217,30227,30433,30435,30596,30589,30591,30561,30913,30879,30887,30899,30889,30883,31118,31119,31117,31278,31281,31402,31401,31469,31471,31649,31637,31627,31605,31639,31645,31636,31631,31672,31623,31620,31929,31933,31934,32187,32176,32156,32189,32190,32160,32202,32180,32178,32177,32186,32162,32191,32181,32184,32173,32210,32199,32172,32624,32736,32737,32735,32862,32858,32903,33104,33152,33167,33160,33162,33151,33154,33255,33274,33287,33300,33310,33355,33993,33983,33990,33988,33945,33950,33970,33948,33995,33976,33984,34003,33936,33980,34001,33994,34623,34588,34619,34594,34597,34612,34584,34645,34615,34601,35059,35074,35060,35065,35064,35069,35048,35098,35055,35494,35468,35486,35491,35469,35489,35475,35492,35498,35493,35496,35480,35473,35482,35495,35946,35981,35980,36051,36049,36050,36203,36249,36245,36348,36628,36626,36629,36627,36771,36960,36952,36956,36963,36953,36958,36962,36957,36955,37145,37144,37150,37237,37240,37239,37236,37496,37504,37509,37528,37526,37499,37523,37532,37544,37500,37521,38305,38312,38313,38307,38309,38308,38553,38556,38555,38604,38610,38656,38780,38789,38902,38935,38936,39087,39089,39171,39173,39180,39177,39361,39599,39600,39654,39745,39746,40180,40182,40179,40636,40763,40778,20740,20736,20731,20725,20729,20738,20744,20745,20741,20956,21127,21128,21129,21133,21130,21232,21426,22062,22075,22073,22066,22079,22068,22057,22099,22094,22103,22132,22070,22063,22064,22656,22687,22686,22707,22684,22702,22697,22694,22893,23305,23291,23307,23285,23308,23304,23534,23532,23529,23531,23652,23653,23965,23956,24162,24159,24161,24290,24282,24287,24285,24291,24288,24392,24433,24503,24501,24950,24935,24942,24925,24917,24962,24956,24944,24939,24958,24999,24976,25003,24974,25004,24986,24996,24980,25006,25134,25705,25711,25721,25758,25778,25736,25744,25776,25765,25747,25749,25769,25746,25774,25773,25771,25754,25772,25753,25762,25779,25973,25975,25976,26286,26283,26292,26289,27171,27167,27112,27137,27166,27161,27133,27169,27155,27146,27123,27138,27141,27117,27153,27472,27470,27556,27589,27590,28479,28540,28548,28497,28518,28500,28550,28525,28507,28536,28526,28558,28538,28528,28516,28567,28504,28373,28527,28512,28511,29087,29100,29105,29096,29270,29339,29518,29527,29801,29835,29827,29822,29824,30079,30240,30249,30239,30244,30246,30241,30242,30362,30394,30436,30606,30599,30604,30609,30603,30923,30917,30906,30922,30910,30933,30908,30928,31295,31292,31296,31293,31287,31291,31407,31406,31661,31665,31684,31668,31686,31687,31681,31648,31692,31946,32224,32244,32239,32251,32216,32236,32221,32232,32227,32218,32222,32233,32158,32217,32242,32249,32629,32631,32687,32745,32806,33179,33180,33181,33184,33178,33176,34071,34109,34074,34030,34092,34093,34067,34065,34083,34081,34068,34028,34085,34047,34054,34690,34676,34678,34656,34662,34680,34664,34649,34647,34636,34643,34907,34909,35088,35079,35090,35091,35093,35082,35516,35538,35527,35524,35477,35531,35576,35506,35529,35522,35519,35504,35542,35533,35510,35513,35547,35916,35918,35948,36064,36062,36070,36068,36076,36077,36066,36067,36060,36074,36065,36205,36255,36259,36395,36368,36381,36386,36367,36393,36383,36385,36382,36538,36637,36635,36639,36649,36646,36650,36636,36638,36645,36969,36974,36968,36973,36983,37168,37165,37159,37169,37255,37257,37259,37251,37573,37563,37559,37610,37548,37604,37569,37555,37564,37586,37575,37616,37554,38317,38321,38660,38662,38663,38665,38752,38797,38795,38799,38945,38955,38940,39091,39178,39187,39186,39192,39389,39376,39391,39387,39377,39381,39378,39385,39607,39662,39663,39719,39749,39748,39799,39791,40198,40201,40195,40617,40638,40654,22696,40786,20754,20760,20756,20752,20757,20864,20906,20957,21137,21139,21235,22105,22123,22137,22121,22116,22136,22122,22120,22117,22129,22127,22124,22114,22134,22721,22718,22727,22725,22894,23325,23348,23416,23536,23566,24394,25010,24977,25001,24970,25037,25014,25022,25034,25032,25136,25797,25793,25803,25787,25788,25818,25796,25799,25794,25805,25791,25810,25812,25790,25972,26310,26313,26297,26308,26311,26296,27197,27192,27194,27225,27243,27224,27193,27204,27234,27233,27211,27207,27189,27231,27208,27481,27511,27653,28610,28593,28577,28611,28580,28609,28583,28595,28608,28601,28598,28582,28576,28596,29118,29129,29136,29138,29128,29141,29113,29134,29145,29148,29123,29124,29544,29852,29859,29848,29855,29854,29922,29964,29965,30260,30264,30266,30439,30437,30624,30622,30623,30629,30952,30938,30956,30951,31142,31309,31310,31302,31308,31307,31418,31705,31761,31689,31716,31707,31713,31721,31718,31957,31958,32266,32273,32264,32283,32291,32286,32285,32265,32272,32633,32690,32752,32753,32750,32808,33203,33193,33192,33275,33288,33368,33369,34122,34137,34120,34152,34153,34115,34121,34157,34154,34142,34691,34719,34718,34722,34701,34913,35114,35122,35109,35115,35105,35242,35238,35558,35578,35563,35569,35584,35548,35559,35566,35582,35585,35586,35575,35565,35571,35574,35580,35947,35949,35987,36084,36420,36401,36404,36418,36409,36405,36667,36655,36664,36659,36776,36774,36981,36980,36984,36978,36988,36986,37172,37266,37664,37686,37624,37683,37679,37666,37628,37675,37636,37658,37648,37670,37665,37653,37678,37657,38331,38567,38568,38570,38613,38670,38673,38678,38669,38675,38671,38747,38748,38758,38808,38960,38968,38971,38967,38957,38969,38948,39184,39208,39198,39195,39201,39194,39405,39394,39409,39608,39612,39675,39661,39720,39825,40213,40227,40230,40232,40210,40219,40664,40660,40845,40860,20778,20767,20769,20786,21237,22158,22144,22160,22149,22151,22159,22741,22739,22737,22734,23344,23338,23332,23418,23607,23656,23996,23994,23997,23992,24171,24396,24509,25033,25026,25031,25062,25035,25138,25140,25806,25802,25816,25824,25840,25830,25836,25841,25826,25837,25986,25987,26329,26326,27264,27284,27268,27298,27292,27355,27299,27262,27287,27280,27296,27484,27566,27610,27656,28632,28657,28639,28640,28635,28644,28651,28655,28544,28652,28641,28649,28629,28654,28656,29159,29151,29166,29158,29157,29165,29164,29172,29152,29237,29254,29552,29554,29865,29872,29862,29864,30278,30274,30284,30442,30643,30634,30640,30636,30631,30637,30703,30967,30970,30964,30959,30977,31143,31146,31319,31423,31751,31757,31742,31735,31756,31712,31968,31964,31966,31970,31967,31961,31965,32302,32318,32326,32311,32306,32323,32299,32317,32305,32325,32321,32308,32313,32328,32309,32319,32303,32580,32755,32764,32881,32882,32880,32879,32883,33222,33219,33210,33218,33216,33215,33213,33225,33214,33256,33289,33393,34218,34180,34174,34204,34193,34196,34223,34203,34183,34216,34186,34407,34752,34769,34739,34770,34758,34731,34747,34746,34760,34763,35131,35126,35140,35128,35133,35244,35598,35607,35609,35611,35594,35616,35613,35588,35600,35905,35903,35955,36090,36093,36092,36088,36091,36264,36425,36427,36424,36426,36676,36670,36674,36677,36671,36991,36989,36996,36993,36994,36992,37177,37283,37278,37276,37709,37762,37672,37749,37706,37733,37707,37656,37758,37740,37723,37744,37722,37716,38346,38347,38348,38344,38342,38577,38584,38614,38684,38686,38816,38867,38982,39094,39221,39425,39423,39854,39851,39850,39853,40251,40255,40587,40655,40670,40668,40669,40667,40766,40779,21474,22165,22190,22745,22744,23352,24413,25059,25139,25844,25842,25854,25862,25850,25851,25847,26039,26332,26406,27315,27308,27331,27323,27320,27330,27310,27311,27487,27512,27567,28681,28683,28670,28678,28666,28689,28687,29179,29180,29182,29176,29559,29557,29863,29887,29973,30294,30296,30290,30653,30655,30651,30652,30990,31150,31329,31330,31328,31428,31429,31787,31783,31786,31774,31779,31777,31975,32340,32341,32350,32346,32353,32338,32345,32584,32761,32763,32887,32886,33229,33231,33290,34255,34217,34253,34256,34249,34224,34234,34233,34214,34799,34796,34802,34784,35206,35250,35316,35624,35641,35628,35627,35920,36101,36441,36451,36454,36452,36447,36437,36544,36681,36685,36999,36995,37e3,37291,37292,37328,37780,37770,37782,37794,37811,37806,37804,37808,37784,37786,37783,38356,38358,38352,38357,38626,38620,38617,38619,38622,38692,38819,38822,38829,38905,38989,38991,38988,38990,38995,39098,39230,39231,39229,39214,39333,39438,39617,39683,39686,39759,39758,39757,39882,39881,39933,39880,39872,40273,40285,40288,40672,40725,40748,20787,22181,22750,22751,22754,23541,40848,24300,25074,25079,25078,25077,25856,25871,26336,26333,27365,27357,27354,27347,28699,28703,28712,28698,28701,28693,28696,29190,29197,29272,29346,29560,29562,29885,29898,29923,30087,30086,30303,30305,30663,31001,31153,31339,31337,31806,31807,31800,31805,31799,31808,32363,32365,32377,32361,32362,32645,32371,32694,32697,32696,33240,34281,34269,34282,34261,34276,34277,34295,34811,34821,34829,34809,34814,35168,35167,35158,35166,35649,35676,35672,35657,35674,35662,35663,35654,35673,36104,36106,36476,36466,36487,36470,36460,36474,36468,36692,36686,36781,37002,37003,37297,37294,37857,37841,37855,37827,37832,37852,37853,37846,37858,37837,37848,37860,37847,37864,38364,38580,38627,38698,38695,38753,38876,38907,39006,39e3,39003,39100,39237,39241,39446,39449,39693,39912,39911,39894,39899,40329,40289,40306,40298,40300,40594,40599,40595,40628,21240,22184,22199,22198,22196,22204,22756,23360,23363,23421,23542,24009,25080,25082,25880,25876,25881,26342,26407,27372,28734,28720,28722,29200,29563,29903,30306,30309,31014,31018,31020,31019,31431,31478,31820,31811,31821,31983,31984,36782,32381,32380,32386,32588,32768,33242,33382,34299,34297,34321,34298,34310,34315,34311,34314,34836,34837,35172,35258,35320,35696,35692,35686,35695,35679,35691,36111,36109,36489,36481,36485,36482,37300,37323,37912,37891,37885,38369,38704,39108,39250,39249,39336,39467,39472,39479,39477,39955,39949,40569,40629,40680,40751,40799,40803,40801,20791,20792,22209,22208,22210,22804,23660,24013,25084,25086,25885,25884,26005,26345,27387,27396,27386,27570,28748,29211,29351,29910,29908,30313,30675,31824,32399,32396,32700,34327,34349,34330,34851,34850,34849,34847,35178,35180,35261,35700,35703,35709,36115,36490,36493,36491,36703,36783,37306,37934,37939,37941,37946,37944,37938,37931,38370,38712,38713,38706,38911,39015,39013,39255,39493,39491,39488,39486,39631,39764,39761,39981,39973,40367,40372,40386,40376,40605,40687,40729,40796,40806,40807,20796,20795,22216,22218,22217,23423,24020,24018,24398,25087,25892,27402,27489,28753,28760,29568,29924,30090,30318,30316,31155,31840,31839,32894,32893,33247,35186,35183,35324,35712,36118,36119,36497,36499,36705,37192,37956,37969,37970,38717,38718,38851,38849,39019,39253,39509,39501,39634,39706,40009,39985,39998,39995,40403,40407,40756,40812,40810,40852,22220,24022,25088,25891,25899,25898,26348,27408,29914,31434,31844,31843,31845,32403,32406,32404,33250,34360,34367,34865,35722,37008,37007,37987,37984,37988,38760,39023,39260,39514,39515,39511,39635,39636,39633,40020,40023,40022,40421,40607,40692,22225,22761,25900,28766,30321,30322,30679,32592,32648,34870,34873,34914,35731,35730,35734,33399,36123,37312,37994,38722,38728,38724,38854,39024,39519,39714,39768,40031,40441,40442,40572,40573,40711,40823,40818,24307,27414,28771,31852,31854,34875,35264,36513,37313,38002,38e3,39025,39262,39638,39715,40652,28772,30682,35738,38007,38857,39522,39525,32412,35740,36522,37317,38013,38014,38012,40055,40056,40695,35924,38015,40474,29224,39530,39729,40475,40478,31858,9312,9313,9314,9315,9316,9317,9318,9319,9320,9321,9332,9333,9334,9335,9336,9337,9338,9339,9340,9341,8560,8561,8562,8563,8564,8565,8566,8567,8568,8569,20022,20031,20101,20128,20866,20886,20907,21241,21304,21353,21430,22794,23424,24027,12083,24191,24308,24400,24417,25908,26080,30098,30326,36789,38582,168,710,12541,12542,12445,12446,12291,20189,12293,12294,12295,12540,65339,65341,10045,12353,12354,12355,12356,12357,12358,12359,12360,12361,12362,12363,12364,12365,12366,12367,12368,12369,12370,12371,12372,12373,12374,12375,12376,12377,12378,12379,12380,12381,12382,12383,12384,12385,12386,12387,12388,12389,12390,12391,12392,12393,12394,12395,12396,12397,12398,12399,12400,12401,12402,12403,12404,12405,12406,12407,12408,12409,12410,12411,12412,12413,12414,12415,12416,12417,12418,12419,12420,12421,12422,12423,12424,12425,12426,12427,12428,12429,12430,12431,12432,12433,12434,12435,12449,12450,12451,12452,12453,12454,12455,12456,12457,12458,12459,12460,12461,12462,12463,12464,12465,12466,12467,12468,12469,12470,12471,12472,12473,12474,12475,12476,12477,12478,12479,12480,12481,12482,12483,12484,12485,12486,12487,12488,12489,12490,12491,12492,12493,12494,12495,12496,12497,12498,12499,12500,12501,12502,12503,12504,12505,12506,12507,12508,12509,12510,12511,12512,12513,12514,12515,12516,12517,12518,12519,12520,12521,12522,12523,12524,12525,12526,12527,12528,12529,12530,12531,12532,12533,12534,1040,1041,1042,1043,1044,1045,1025,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1105,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,8679,8632,8633,12751,131276,20058,131210,20994,17553,40880,20872,40881,161287,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,65506,65508,65287,65282,12849,8470,8481,12443,12444,11904,11908,11910,11911,11912,11914,11916,11917,11925,11932,11933,11941,11943,11946,11948,11950,11958,11964,11966,11974,11978,11980,11981,11983,11990,11991,11998,12003,null,null,null,643,592,603,596,629,339,248,331,650,618,20034,20060,20981,21274,21378,19975,19980,20039,20109,22231,64012,23662,24435,19983,20871,19982,20014,20115,20162,20169,20168,20888,21244,21356,21433,22304,22787,22828,23568,24063,26081,27571,27596,27668,29247,20017,20028,20200,20188,20201,20193,20189,20186,21004,21276,21324,22306,22307,22807,22831,23425,23428,23570,23611,23668,23667,24068,24192,24194,24521,25097,25168,27669,27702,27715,27711,27707,29358,29360,29578,31160,32906,38430,20238,20248,20268,20213,20244,20209,20224,20215,20232,20253,20226,20229,20258,20243,20228,20212,20242,20913,21011,21001,21008,21158,21282,21279,21325,21386,21511,22241,22239,22318,22314,22324,22844,22912,22908,22917,22907,22910,22903,22911,23382,23573,23589,23676,23674,23675,23678,24031,24181,24196,24322,24346,24436,24533,24532,24527,25180,25182,25188,25185,25190,25186,25177,25184,25178,25189,26095,26094,26430,26425,26424,26427,26426,26431,26428,26419,27672,27718,27730,27740,27727,27722,27732,27723,27724,28785,29278,29364,29365,29582,29994,30335,31349,32593,33400,33404,33408,33405,33407,34381,35198,37017,37015,37016,37019,37012,38434,38436,38432,38435,20310,20283,20322,20297,20307,20324,20286,20327,20306,20319,20289,20312,20269,20275,20287,20321,20879,20921,21020,21022,21025,21165,21166,21257,21347,21362,21390,21391,21552,21559,21546,21588,21573,21529,21532,21541,21528,21565,21583,21569,21544,21540,21575,22254,22247,22245,22337,22341,22348,22345,22347,22354,22790,22848,22950,22936,22944,22935,22926,22946,22928,22927,22951,22945,23438,23442,23592,23594,23693,23695,23688,23691,23689,23698,23690,23686,23699,23701,24032,24074,24078,24203,24201,24204,24200,24205,24325,24349,24440,24438,24530,24529,24528,24557,24552,24558,24563,24545,24548,24547,24570,24559,24567,24571,24576,24564,25146,25219,25228,25230,25231,25236,25223,25201,25211,25210,25200,25217,25224,25207,25213,25202,25204,25911,26096,26100,26099,26098,26101,26437,26439,26457,26453,26444,26440,26461,26445,26458,26443,27600,27673,27674,27768,27751,27755,27780,27787,27791,27761,27759,27753,27802,27757,27783,27797,27804,27750,27763,27749,27771,27790,28788,28794,29283,29375,29373,29379,29382,29377,29370,29381,29589,29591,29587,29588,29586,30010,30009,30100,30101,30337,31037,32820,32917,32921,32912,32914,32924,33424,33423,33413,33422,33425,33427,33418,33411,33412,35960,36809,36799,37023,37025,37029,37022,37031,37024,38448,38440,38447,38445,20019,20376,20348,20357,20349,20352,20359,20342,20340,20361,20356,20343,20300,20375,20330,20378,20345,20353,20344,20368,20380,20372,20382,20370,20354,20373,20331,20334,20894,20924,20926,21045,21042,21043,21062,21041,21180,21258,21259,21308,21394,21396,21639,21631,21633,21649,21634,21640,21611,21626,21630,21605,21612,21620,21606,21645,21615,21601,21600,21656,21603,21607,21604,22263,22265,22383,22386,22381,22379,22385,22384,22390,22400,22389,22395,22387,22388,22370,22376,22397,22796,22853,22965,22970,22991,22990,22962,22988,22977,22966,22972,22979,22998,22961,22973,22976,22984,22964,22983,23394,23397,23443,23445,23620,23623,23726,23716,23712,23733,23727,23720,23724,23711,23715,23725,23714,23722,23719,23709,23717,23734,23728,23718,24087,24084,24089,24360,24354,24355,24356,24404,24450,24446,24445,24542,24549,24621,24614,24601,24626,24587,24628,24586,24599,24627,24602,24606,24620,24610,24589,24592,24622,24595,24593,24588,24585,24604,25108,25149,25261,25268,25297,25278,25258,25270,25290,25262,25267,25263,25275,25257,25264,25272,25917,26024,26043,26121,26108,26116,26130,26120,26107,26115,26123,26125,26117,26109,26129,26128,26358,26378,26501,26476,26510,26514,26486,26491,26520,26502,26500,26484,26509,26508,26490,26527,26513,26521,26499,26493,26497,26488,26489,26516,27429,27520,27518,27614,27677,27795,27884,27883,27886,27865,27830,27860,27821,27879,27831,27856,27842,27834,27843,27846,27885,27890,27858,27869,27828,27786,27805,27776,27870,27840,27952,27853,27847,27824,27897,27855,27881,27857,28820,28824,28805,28819,28806,28804,28817,28822,28802,28826,28803,29290,29398,29387,29400,29385,29404,29394,29396,29402,29388,29393,29604,29601,29613,29606,29602,29600,29612,29597,29917,29928,30015,30016,30014,30092,30104,30383,30451,30449,30448,30453,30712,30716,30713,30715,30714,30711,31042,31039,31173,31352,31355,31483,31861,31997,32821,32911,32942,32931,32952,32949,32941,33312,33440,33472,33451,33434,33432,33435,33461,33447,33454,33468,33438,33466,33460,33448,33441,33449,33474,33444,33475,33462,33442,34416,34415,34413,34414,35926,36818,36811,36819,36813,36822,36821,36823,37042,37044,37039,37043,37040,38457,38461,38460,38458,38467,20429,20421,20435,20402,20425,20427,20417,20436,20444,20441,20411,20403,20443,20423,20438,20410,20416,20409,20460,21060,21065,21184,21186,21309,21372,21399,21398,21401,21400,21690,21665,21677,21669,21711,21699,33549,21687,21678,21718,21686,21701,21702,21664,21616,21692,21666,21694,21618,21726,21680,22453,22430,22431,22436,22412,22423,22429,22427,22420,22424,22415,22425,22437,22426,22421,22772,22797,22867,23009,23006,23022,23040,23025,23005,23034,23037,23036,23030,23012,23026,23031,23003,23017,23027,23029,23008,23038,23028,23021,23464,23628,23760,23768,23756,23767,23755,23771,23774,23770,23753,23751,23754,23766,23763,23764,23759,23752,23750,23758,23775,23800,24057,24097,24098,24099,24096,24100,24240,24228,24226,24219,24227,24229,24327,24366,24406,24454,24631,24633,24660,24690,24670,24645,24659,24647,24649,24667,24652,24640,24642,24671,24612,24644,24664,24678,24686,25154,25155,25295,25357,25355,25333,25358,25347,25323,25337,25359,25356,25336,25334,25344,25363,25364,25338,25365,25339,25328,25921,25923,26026,26047,26166,26145,26162,26165,26140,26150,26146,26163,26155,26170,26141,26164,26169,26158,26383,26384,26561,26610,26568,26554,26588,26555,26616,26584,26560,26551,26565,26603,26596,26591,26549,26573,26547,26615,26614,26606,26595,26562,26553,26574,26599,26608,26546,26620,26566,26605,26572,26542,26598,26587,26618,26569,26570,26563,26602,26571,27432,27522,27524,27574,27606,27608,27616,27680,27681,27944,27956,27949,27935,27964,27967,27922,27914,27866,27955,27908,27929,27962,27930,27921,27904,27933,27970,27905,27928,27959,27907,27919,27968,27911,27936,27948,27912,27938,27913,27920,28855,28831,28862,28849,28848,28833,28852,28853,28841,29249,29257,29258,29292,29296,29299,29294,29386,29412,29416,29419,29407,29418,29414,29411,29573,29644,29634,29640,29637,29625,29622,29621,29620,29675,29631,29639,29630,29635,29638,29624,29643,29932,29934,29998,30023,30024,30119,30122,30329,30404,30472,30467,30468,30469,30474,30455,30459,30458,30695,30696,30726,30737,30738,30725,30736,30735,30734,30729,30723,30739,31050,31052,31051,31045,31044,31189,31181,31183,31190,31182,31360,31358,31441,31488,31489,31866,31864,31865,31871,31872,31873,32003,32008,32001,32600,32657,32653,32702,32775,32782,32783,32788,32823,32984,32967,32992,32977,32968,32962,32976,32965,32995,32985,32988,32970,32981,32969,32975,32983,32998,32973,33279,33313,33428,33497,33534,33529,33543,33512,33536,33493,33594,33515,33494,33524,33516,33505,33522,33525,33548,33531,33526,33520,33514,33508,33504,33530,33523,33517,34423,34420,34428,34419,34881,34894,34919,34922,34921,35283,35332,35335,36210,36835,36833,36846,36832,37105,37053,37055,37077,37061,37054,37063,37067,37064,37332,37331,38484,38479,38481,38483,38474,38478,20510,20485,20487,20499,20514,20528,20507,20469,20468,20531,20535,20524,20470,20471,20503,20508,20512,20519,20533,20527,20529,20494,20826,20884,20883,20938,20932,20933,20936,20942,21089,21082,21074,21086,21087,21077,21090,21197,21262,21406,21798,21730,21783,21778,21735,21747,21732,21786,21759,21764,21768,21739,21777,21765,21745,21770,21755,21751,21752,21728,21774,21763,21771,22273,22274,22476,22578,22485,22482,22458,22470,22461,22460,22456,22454,22463,22471,22480,22457,22465,22798,22858,23065,23062,23085,23086,23061,23055,23063,23050,23070,23091,23404,23463,23469,23468,23555,23638,23636,23788,23807,23790,23793,23799,23808,23801,24105,24104,24232,24238,24234,24236,24371,24368,24423,24669,24666,24679,24641,24738,24712,24704,24722,24705,24733,24707,24725,24731,24727,24711,24732,24718,25113,25158,25330,25360,25430,25388,25412,25413,25398,25411,25572,25401,25419,25418,25404,25385,25409,25396,25432,25428,25433,25389,25415,25395,25434,25425,25400,25431,25408,25416,25930,25926,26054,26051,26052,26050,26186,26207,26183,26193,26386,26387,26655,26650,26697,26674,26675,26683,26699,26703,26646,26673,26652,26677,26667,26669,26671,26702,26692,26676,26653,26642,26644,26662,26664,26670,26701,26682,26661,26656,27436,27439,27437,27441,27444,27501,32898,27528,27622,27620,27624,27619,27618,27623,27685,28026,28003,28004,28022,27917,28001,28050,27992,28002,28013,28015,28049,28045,28143,28031,28038,27998,28007,28e3,28055,28016,28028,27999,28034,28056,27951,28008,28043,28030,28032,28036,27926,28035,28027,28029,28021,28048,28892,28883,28881,28893,28875,32569,28898,28887,28882,28894,28896,28884,28877,28869,28870,28871,28890,28878,28897,29250,29304,29303,29302,29440,29434,29428,29438,29430,29427,29435,29441,29651,29657,29669,29654,29628,29671,29667,29673,29660,29650,29659,29652,29661,29658,29655,29656,29672,29918,29919,29940,29941,29985,30043,30047,30128,30145,30139,30148,30144,30143,30134,30138,30346,30409,30493,30491,30480,30483,30482,30499,30481,30485,30489,30490,30498,30503,30755,30764,30754,30773,30767,30760,30766,30763,30753,30761,30771,30762,30769,31060,31067,31055,31068,31059,31058,31057,31211,31212,31200,31214,31213,31210,31196,31198,31197,31366,31369,31365,31371,31372,31370,31367,31448,31504,31492,31507,31493,31503,31496,31498,31502,31497,31506,31876,31889,31882,31884,31880,31885,31877,32030,32029,32017,32014,32024,32022,32019,32031,32018,32015,32012,32604,32609,32606,32608,32605,32603,32662,32658,32707,32706,32704,32790,32830,32825,33018,33010,33017,33013,33025,33019,33024,33281,33327,33317,33587,33581,33604,33561,33617,33573,33622,33599,33601,33574,33564,33570,33602,33614,33563,33578,33544,33596,33613,33558,33572,33568,33591,33583,33577,33607,33605,33612,33619,33566,33580,33611,33575,33608,34387,34386,34466,34472,34454,34445,34449,34462,34439,34455,34438,34443,34458,34437,34469,34457,34465,34471,34453,34456,34446,34461,34448,34452,34883,34884,34925,34933,34934,34930,34944,34929,34943,34927,34947,34942,34932,34940,35346,35911,35927,35963,36004,36003,36214,36216,36277,36279,36278,36561,36563,36862,36853,36866,36863,36859,36868,36860,36854,37078,37088,37081,37082,37091,37087,37093,37080,37083,37079,37084,37092,37200,37198,37199,37333,37346,37338,38492,38495,38588,39139,39647,39727,20095,20592,20586,20577,20574,20576,20563,20555,20573,20594,20552,20557,20545,20571,20554,20578,20501,20549,20575,20585,20587,20579,20580,20550,20544,20590,20595,20567,20561,20944,21099,21101,21100,21102,21206,21203,21293,21404,21877,21878,21820,21837,21840,21812,21802,21841,21858,21814,21813,21808,21842,21829,21772,21810,21861,21838,21817,21832,21805,21819,21824,21835,22282,22279,22523,22548,22498,22518,22492,22516,22528,22509,22525,22536,22520,22539,22515,22479,22535,22510,22499,22514,22501,22508,22497,22542,22524,22544,22503,22529,22540,22513,22505,22512,22541,22532,22876,23136,23128,23125,23143,23134,23096,23093,23149,23120,23135,23141,23148,23123,23140,23127,23107,23133,23122,23108,23131,23112,23182,23102,23117,23097,23116,23152,23145,23111,23121,23126,23106,23132,23410,23406,23489,23488,23641,23838,23819,23837,23834,23840,23820,23848,23821,23846,23845,23823,23856,23826,23843,23839,23854,24126,24116,24241,24244,24249,24242,24243,24374,24376,24475,24470,24479,24714,24720,24710,24766,24752,24762,24787,24788,24783,24804,24793,24797,24776,24753,24795,24759,24778,24767,24771,24781,24768,25394,25445,25482,25474,25469,25533,25502,25517,25501,25495,25515,25486,25455,25479,25488,25454,25519,25461,25500,25453,25518,25468,25508,25403,25503,25464,25477,25473,25489,25485,25456,25939,26061,26213,26209,26203,26201,26204,26210,26392,26745,26759,26768,26780,26733,26734,26798,26795,26966,26735,26787,26796,26793,26741,26740,26802,26767,26743,26770,26748,26731,26738,26794,26752,26737,26750,26779,26774,26763,26784,26761,26788,26744,26747,26769,26764,26762,26749,27446,27443,27447,27448,27537,27535,27533,27534,27532,27690,28096,28075,28084,28083,28276,28076,28137,28130,28087,28150,28116,28160,28104,28128,28127,28118,28094,28133,28124,28125,28123,28148,28106,28093,28141,28144,28090,28117,28098,28111,28105,28112,28146,28115,28157,28119,28109,28131,28091,28922,28941,28919,28951,28916,28940,28912,28932,28915,28944,28924,28927,28934,28947,28928,28920,28918,28939,28930,28942,29310,29307,29308,29311,29469,29463,29447,29457,29464,29450,29448,29439,29455,29470,29576,29686,29688,29685,29700,29697,29693,29703,29696,29690,29692,29695,29708,29707,29684,29704,30052,30051,30158,30162,30159,30155,30156,30161,30160,30351,30345,30419,30521,30511,30509,30513,30514,30516,30515,30525,30501,30523,30517,30792,30802,30793,30797,30794,30796,30758,30789,30800,31076,31079,31081,31082,31075,31083,31073,31163,31226,31224,31222,31223,31375,31380,31376,31541,31559,31540,31525,31536,31522,31524,31539,31512,31530,31517,31537,31531,31533,31535,31538,31544,31514,31523,31892,31896,31894,31907,32053,32061,32056,32054,32058,32069,32044,32041,32065,32071,32062,32063,32074,32059,32040,32611,32661,32668,32669,32667,32714,32715,32717,32720,32721,32711,32719,32713,32799,32798,32795,32839,32835,32840,33048,33061,33049,33051,33069,33055,33068,33054,33057,33045,33063,33053,33058,33297,33336,33331,33338,33332,33330,33396,33680,33699,33704,33677,33658,33651,33700,33652,33679,33665,33685,33689,33653,33684,33705,33661,33667,33676,33693,33691,33706,33675,33662,33701,33711,33672,33687,33712,33663,33702,33671,33710,33654,33690,34393,34390,34495,34487,34498,34497,34501,34490,34480,34504,34489,34483,34488,34508,34484,34491,34492,34499,34493,34494,34898,34953,34965,34984,34978,34986,34970,34961,34977,34975,34968,34983,34969,34971,34967,34980,34988,34956,34963,34958,35202,35286,35289,35285,35376,35367,35372,35358,35897,35899,35932,35933,35965,36005,36221,36219,36217,36284,36290,36281,36287,36289,36568,36574,36573,36572,36567,36576,36577,36900,36875,36881,36892,36876,36897,37103,37098,37104,37108,37106,37107,37076,37099,37100,37097,37206,37208,37210,37203,37205,37356,37364,37361,37363,37368,37348,37369,37354,37355,37367,37352,37358,38266,38278,38280,38524,38509,38507,38513,38511,38591,38762,38916,39141,39319,20635,20629,20628,20638,20619,20643,20611,20620,20622,20637,20584,20636,20626,20610,20615,20831,20948,21266,21265,21412,21415,21905,21928,21925,21933,21879,22085,21922,21907,21896,21903,21941,21889,21923,21906,21924,21885,21900,21926,21887,21909,21921,21902,22284,22569,22583,22553,22558,22567,22563,22568,22517,22600,22565,22556,22555,22579,22591,22582,22574,22585,22584,22573,22572,22587,22881,23215,23188,23199,23162,23202,23198,23160,23206,23164,23205,23212,23189,23214,23095,23172,23178,23191,23171,23179,23209,23163,23165,23180,23196,23183,23187,23197,23530,23501,23499,23508,23505,23498,23502,23564,23600,23863,23875,23915,23873,23883,23871,23861,23889,23886,23893,23859,23866,23890,23869,23857,23897,23874,23865,23881,23864,23868,23858,23862,23872,23877,24132,24129,24408,24486,24485,24491,24777,24761,24780,24802,24782,24772,24852,24818,24842,24854,24837,24821,24851,24824,24828,24830,24769,24835,24856,24861,24848,24831,24836,24843,25162,25492,25521,25520,25550,25573,25576,25583,25539,25757,25587,25546,25568,25590,25557,25586,25589,25697,25567,25534,25565,25564,25540,25560,25555,25538,25543,25548,25547,25544,25584,25559,25561,25906,25959,25962,25956,25948,25960,25957,25996,26013,26014,26030,26064,26066,26236,26220,26235,26240,26225,26233,26218,26226,26369,26892,26835,26884,26844,26922,26860,26858,26865,26895,26838,26871,26859,26852,26870,26899,26896,26867,26849,26887,26828,26888,26992,26804,26897,26863,26822,26900,26872,26832,26877,26876,26856,26891,26890,26903,26830,26824,26845,26846,26854,26868,26833,26886,26836,26857,26901,26917,26823,27449,27451,27455,27452,27540,27543,27545,27541,27581,27632,27634,27635,27696,28156,28230,28231,28191,28233,28296,28220,28221,28229,28258,28203,28223,28225,28253,28275,28188,28211,28235,28224,28241,28219,28163,28206,28254,28264,28252,28257,28209,28200,28256,28273,28267,28217,28194,28208,28243,28261,28199,28280,28260,28279,28245,28281,28242,28262,28213,28214,28250,28960,28958,28975,28923,28974,28977,28963,28965,28962,28978,28959,28968,28986,28955,29259,29274,29320,29321,29318,29317,29323,29458,29451,29488,29474,29489,29491,29479,29490,29485,29478,29475,29493,29452,29742,29740,29744,29739,29718,29722,29729,29741,29745,29732,29731,29725,29737,29728,29746,29947,29999,30063,30060,30183,30170,30177,30182,30173,30175,30180,30167,30357,30354,30426,30534,30535,30532,30541,30533,30538,30542,30539,30540,30686,30700,30816,30820,30821,30812,30829,30833,30826,30830,30832,30825,30824,30814,30818,31092,31091,31090,31088,31234,31242,31235,31244,31236,31385,31462,31460,31562,31547,31556,31560,31564,31566,31552,31576,31557,31906,31902,31912,31905,32088,32111,32099,32083,32086,32103,32106,32079,32109,32092,32107,32082,32084,32105,32081,32095,32078,32574,32575,32613,32614,32674,32672,32673,32727,32849,32847,32848,33022,32980,33091,33098,33106,33103,33095,33085,33101,33082,33254,33262,33271,33272,33273,33284,33340,33341,33343,33397,33595,33743,33785,33827,33728,33768,33810,33767,33764,33788,33782,33808,33734,33736,33771,33763,33727,33793,33757,33765,33752,33791,33761,33739,33742,33750,33781,33737,33801,33807,33758,33809,33798,33730,33779,33749,33786,33735,33745,33770,33811,33731,33772,33774,33732,33787,33751,33762,33819,33755,33790,34520,34530,34534,34515,34531,34522,34538,34525,34539,34524,34540,34537,34519,34536,34513,34888,34902,34901,35002,35031,35001,35e3,35008,35006,34998,35004,34999,35005,34994,35073,35017,35221,35224,35223,35293,35290,35291,35406,35405,35385,35417,35392,35415,35416,35396,35397,35410,35400,35409,35402,35404,35407,35935,35969,35968,36026,36030,36016,36025,36021,36228,36224,36233,36312,36307,36301,36295,36310,36316,36303,36309,36313,36296,36311,36293,36591,36599,36602,36601,36582,36590,36581,36597,36583,36584,36598,36587,36593,36588,36596,36585,36909,36916,36911,37126,37164,37124,37119,37116,37128,37113,37115,37121,37120,37127,37125,37123,37217,37220,37215,37218,37216,37377,37386,37413,37379,37402,37414,37391,37388,37376,37394,37375,37373,37382,37380,37415,37378,37404,37412,37401,37399,37381,37398,38267,38285,38284,38288,38535,38526,38536,38537,38531,38528,38594,38600,38595,38641,38640,38764,38768,38766,38919,39081,39147,40166,40697,20099,20100,20150,20669,20671,20678,20654,20676,20682,20660,20680,20674,20656,20673,20666,20657,20683,20681,20662,20664,20951,21114,21112,21115,21116,21955,21979,21964,21968,21963,21962,21981,21952,21972,21956,21993,21951,21970,21901,21967,21973,21986,21974,21960,22002,21965,21977,21954,22292,22611,22632,22628,22607,22605,22601,22639,22613,22606,22621,22617,22629,22619,22589,22627,22641,22780,23239,23236,23243,23226,23224,23217,23221,23216,23231,23240,23227,23238,23223,23232,23242,23220,23222,23245,23225,23184,23510,23512,23513,23583,23603,23921,23907,23882,23909,23922,23916,23902,23912,23911,23906,24048,24143,24142,24138,24141,24139,24261,24268,24262,24267,24263,24384,24495,24493,24823,24905,24906,24875,24901,24886,24882,24878,24902,24879,24911,24873,24896,25120,37224,25123,25125,25124,25541,25585,25579,25616,25618,25609,25632,25636,25651,25667,25631,25621,25624,25657,25655,25634,25635,25612,25638,25648,25640,25665,25653,25647,25610,25626,25664,25637,25639,25611,25575,25627,25646,25633,25614,25967,26002,26067,26246,26252,26261,26256,26251,26250,26265,26260,26232,26400,26982,26975,26936,26958,26978,26993,26943,26949,26986,26937,26946,26967,26969,27002,26952,26953,26933,26988,26931,26941,26981,26864,27e3,26932,26985,26944,26991,26948,26998,26968,26945,26996,26956,26939,26955,26935,26972,26959,26961,26930,26962,26927,27003,26940,27462,27461,27459,27458,27464,27457,27547,64013,27643,27644,27641,27639,27640,28315,28374,28360,28303,28352,28319,28307,28308,28320,28337,28345,28358,28370,28349,28353,28318,28361,28343,28336,28365,28326,28367,28338,28350,28355,28380,28376,28313,28306,28302,28301,28324,28321,28351,28339,28368,28362,28311,28334,28323,28999,29012,29010,29027,29024,28993,29021,29026,29042,29048,29034,29025,28994,29016,28995,29003,29040,29023,29008,29011,28996,29005,29018,29263,29325,29324,29329,29328,29326,29500,29506,29499,29498,29504,29514,29513,29764,29770,29771,29778,29777,29783,29760,29775,29776,29774,29762,29766,29773,29780,29921,29951,29950,29949,29981,30073,30071,27011,30191,30223,30211,30199,30206,30204,30201,30200,30224,30203,30198,30189,30197,30205,30361,30389,30429,30549,30559,30560,30546,30550,30554,30569,30567,30548,30553,30573,30688,30855,30874,30868,30863,30852,30869,30853,30854,30881,30851,30841,30873,30848,30870,30843,31100,31106,31101,31097,31249,31256,31257,31250,31255,31253,31266,31251,31259,31248,31395,31394,31390,31467,31590,31588,31597,31604,31593,31602,31589,31603,31601,31600,31585,31608,31606,31587,31922,31924,31919,32136,32134,32128,32141,32127,32133,32122,32142,32123,32131,32124,32140,32148,32132,32125,32146,32621,32619,32615,32616,32620,32678,32677,32679,32731,32732,32801,33124,33120,33143,33116,33129,33115,33122,33138,26401,33118,33142,33127,33135,33092,33121,33309,33353,33348,33344,33346,33349,34033,33855,33878,33910,33913,33935,33933,33893,33873,33856,33926,33895,33840,33869,33917,33882,33881,33908,33907,33885,34055,33886,33847,33850,33844,33914,33859,33912,33842,33861,33833,33753,33867,33839,33858,33837,33887,33904,33849,33870,33868,33874,33903,33989,33934,33851,33863,33846,33843,33896,33918,33860,33835,33888,33876,33902,33872,34571,34564,34551,34572,34554,34518,34549,34637,34552,34574,34569,34561,34550,34573,34565,35030,35019,35021,35022,35038,35035,35034,35020,35024,35205,35227,35295,35301,35300,35297,35296,35298,35292,35302,35446,35462,35455,35425,35391,35447,35458,35460,35445,35459,35457,35444,35450,35900,35915,35914,35941,35940,35942,35974,35972,35973,36044,36200,36201,36241,36236,36238,36239,36237,36243,36244,36240,36242,36336,36320,36332,36337,36334,36304,36329,36323,36322,36327,36338,36331,36340,36614,36607,36609,36608,36613,36615,36616,36610,36619,36946,36927,36932,36937,36925,37136,37133,37135,37137,37142,37140,37131,37134,37230,37231,37448,37458,37424,37434,37478,37427,37477,37470,37507,37422,37450,37446,37485,37484,37455,37472,37479,37487,37430,37473,37488,37425,37460,37475,37456,37490,37454,37459,37452,37462,37426,38303,38300,38302,38299,38546,38547,38545,38551,38606,38650,38653,38648,38645,38771,38775,38776,38770,38927,38925,38926,39084,39158,39161,39343,39346,39344,39349,39597,39595,39771,40170,40173,40167,40576,40701,20710,20692,20695,20712,20723,20699,20714,20701,20708,20691,20716,20720,20719,20707,20704,20952,21120,21121,21225,21227,21296,21420,22055,22037,22028,22034,22012,22031,22044,22017,22035,22018,22010,22045,22020,22015,22009,22665,22652,22672,22680,22662,22657,22655,22644,22667,22650,22663,22673,22670,22646,22658,22664,22651,22676,22671,22782,22891,23260,23278,23269,23253,23274,23258,23277,23275,23283,23266,23264,23259,23276,23262,23261,23257,23272,23263,23415,23520,23523,23651,23938,23936,23933,23942,23930,23937,23927,23946,23945,23944,23934,23932,23949,23929,23935,24152,24153,24147,24280,24273,24279,24270,24284,24277,24281,24274,24276,24388,24387,24431,24502,24876,24872,24897,24926,24945,24947,24914,24915,24946,24940,24960,24948,24916,24954,24923,24933,24891,24938,24929,24918,25129,25127,25131,25643,25677,25691,25693,25716,25718,25714,25715,25725,25717,25702,25766,25678,25730,25694,25692,25675,25683,25696,25680,25727,25663,25708,25707,25689,25701,25719,25971,26016,26273,26272,26271,26373,26372,26402,27057,27062,27081,27040,27086,27030,27056,27052,27068,27025,27033,27022,27047,27021,27049,27070,27055,27071,27076,27069,27044,27092,27065,27082,27034,27087,27059,27027,27050,27041,27038,27097,27031,27024,27074,27061,27045,27078,27466,27469,27467,27550,27551,27552,27587,27588,27646,28366,28405,28401,28419,28453,28408,28471,28411,28462,28425,28494,28441,28442,28455,28440,28475,28434,28397,28426,28470,28531,28409,28398,28461,28480,28464,28476,28469,28395,28423,28430,28483,28421,28413,28406,28473,28444,28412,28474,28447,28429,28446,28424,28449,29063,29072,29065,29056,29061,29058,29071,29051,29062,29057,29079,29252,29267,29335,29333,29331,29507,29517,29521,29516,29794,29811,29809,29813,29810,29799,29806,29952,29954,29955,30077,30096,30230,30216,30220,30229,30225,30218,30228,30392,30593,30588,30597,30594,30574,30592,30575,30590,30595,30898,30890,30900,30893,30888,30846,30891,30878,30885,30880,30892,30882,30884,31128,31114,31115,31126,31125,31124,31123,31127,31112,31122,31120,31275,31306,31280,31279,31272,31270,31400,31403,31404,31470,31624,31644,31626,31633,31632,31638,31629,31628,31643,31630,31621,31640,21124,31641,31652,31618,31931,31935,31932,31930,32167,32183,32194,32163,32170,32193,32192,32197,32157,32206,32196,32198,32203,32204,32175,32185,32150,32188,32159,32166,32174,32169,32161,32201,32627,32738,32739,32741,32734,32804,32861,32860,33161,33158,33155,33159,33165,33164,33163,33301,33943,33956,33953,33951,33978,33998,33986,33964,33966,33963,33977,33972,33985,33997,33962,33946,33969,34e3,33949,33959,33979,33954,33940,33991,33996,33947,33961,33967,33960,34006,33944,33974,33999,33952,34007,34004,34002,34011,33968,33937,34401,34611,34595,34600,34667,34624,34606,34590,34593,34585,34587,34627,34604,34625,34622,34630,34592,34610,34602,34605,34620,34578,34618,34609,34613,34626,34598,34599,34616,34596,34586,34608,34577,35063,35047,35057,35058,35066,35070,35054,35068,35062,35067,35056,35052,35051,35229,35233,35231,35230,35305,35307,35304,35499,35481,35467,35474,35471,35478,35901,35944,35945,36053,36047,36055,36246,36361,36354,36351,36365,36349,36362,36355,36359,36358,36357,36350,36352,36356,36624,36625,36622,36621,37155,37148,37152,37154,37151,37149,37146,37156,37153,37147,37242,37234,37241,37235,37541,37540,37494,37531,37498,37536,37524,37546,37517,37542,37530,37547,37497,37527,37503,37539,37614,37518,37506,37525,37538,37501,37512,37537,37514,37510,37516,37529,37543,37502,37511,37545,37533,37515,37421,38558,38561,38655,38744,38781,38778,38782,38787,38784,38786,38779,38788,38785,38783,38862,38861,38934,39085,39086,39170,39168,39175,39325,39324,39363,39353,39355,39354,39362,39357,39367,39601,39651,39655,39742,39743,39776,39777,39775,40177,40178,40181,40615,20735,20739,20784,20728,20742,20743,20726,20734,20747,20748,20733,20746,21131,21132,21233,21231,22088,22082,22092,22069,22081,22090,22089,22086,22104,22106,22080,22067,22077,22060,22078,22072,22058,22074,22298,22699,22685,22705,22688,22691,22703,22700,22693,22689,22783,23295,23284,23293,23287,23286,23299,23288,23298,23289,23297,23303,23301,23311,23655,23961,23959,23967,23954,23970,23955,23957,23968,23964,23969,23962,23966,24169,24157,24160,24156,32243,24283,24286,24289,24393,24498,24971,24963,24953,25009,25008,24994,24969,24987,24979,25007,25005,24991,24978,25002,24993,24973,24934,25011,25133,25710,25712,25750,25760,25733,25751,25756,25743,25739,25738,25740,25763,25759,25704,25777,25752,25974,25978,25977,25979,26034,26035,26293,26288,26281,26290,26295,26282,26287,27136,27142,27159,27109,27128,27157,27121,27108,27168,27135,27116,27106,27163,27165,27134,27175,27122,27118,27156,27127,27111,27200,27144,27110,27131,27149,27132,27115,27145,27140,27160,27173,27151,27126,27174,27143,27124,27158,27473,27557,27555,27554,27558,27649,27648,27647,27650,28481,28454,28542,28551,28614,28562,28557,28553,28556,28514,28495,28549,28506,28566,28534,28524,28546,28501,28530,28498,28496,28503,28564,28563,28509,28416,28513,28523,28541,28519,28560,28499,28555,28521,28543,28565,28515,28535,28522,28539,29106,29103,29083,29104,29088,29082,29097,29109,29085,29093,29086,29092,29089,29098,29084,29095,29107,29336,29338,29528,29522,29534,29535,29536,29533,29531,29537,29530,29529,29538,29831,29833,29834,29830,29825,29821,29829,29832,29820,29817,29960,29959,30078,30245,30238,30233,30237,30236,30243,30234,30248,30235,30364,30365,30366,30363,30605,30607,30601,30600,30925,30907,30927,30924,30929,30926,30932,30920,30915,30916,30921,31130,31137,31136,31132,31138,31131,27510,31289,31410,31412,31411,31671,31691,31678,31660,31694,31663,31673,31690,31669,31941,31944,31948,31947,32247,32219,32234,32231,32215,32225,32259,32250,32230,32246,32241,32240,32238,32223,32630,32684,32688,32685,32749,32747,32746,32748,32742,32744,32868,32871,33187,33183,33182,33173,33186,33177,33175,33302,33359,33363,33362,33360,33358,33361,34084,34107,34063,34048,34089,34062,34057,34061,34079,34058,34087,34076,34043,34091,34042,34056,34060,34036,34090,34034,34069,34039,34027,34035,34044,34066,34026,34025,34070,34046,34088,34077,34094,34050,34045,34078,34038,34097,34086,34023,34024,34032,34031,34041,34072,34080,34096,34059,34073,34095,34402,34646,34659,34660,34679,34785,34675,34648,34644,34651,34642,34657,34650,34641,34654,34669,34666,34640,34638,34655,34653,34671,34668,34682,34670,34652,34661,34639,34683,34677,34658,34663,34665,34906,35077,35084,35092,35083,35095,35096,35097,35078,35094,35089,35086,35081,35234,35236,35235,35309,35312,35308,35535,35526,35512,35539,35537,35540,35541,35515,35543,35518,35520,35525,35544,35523,35514,35517,35545,35902,35917,35983,36069,36063,36057,36072,36058,36061,36071,36256,36252,36257,36251,36384,36387,36389,36388,36398,36373,36379,36374,36369,36377,36390,36391,36372,36370,36376,36371,36380,36375,36378,36652,36644,36632,36634,36640,36643,36630,36631,36979,36976,36975,36967,36971,37167,37163,37161,37162,37170,37158,37166,37253,37254,37258,37249,37250,37252,37248,37584,37571,37572,37568,37593,37558,37583,37617,37599,37592,37609,37591,37597,37580,37615,37570,37608,37578,37576,37582,37606,37581,37589,37577,37600,37598,37607,37585,37587,37557,37601,37574,37556,38268,38316,38315,38318,38320,38564,38562,38611,38661,38664,38658,38746,38794,38798,38792,38864,38863,38942,38941,38950,38953,38952,38944,38939,38951,39090,39176,39162,39185,39188,39190,39191,39189,39388,39373,39375,39379,39380,39374,39369,39382,39384,39371,39383,39372,39603,39660,39659,39667,39666,39665,39750,39747,39783,39796,39793,39782,39798,39797,39792,39784,39780,39788,40188,40186,40189,40191,40183,40199,40192,40185,40187,40200,40197,40196,40579,40659,40719,40720,20764,20755,20759,20762,20753,20958,21300,21473,22128,22112,22126,22131,22118,22115,22125,22130,22110,22135,22300,22299,22728,22717,22729,22719,22714,22722,22716,22726,23319,23321,23323,23329,23316,23315,23312,23318,23336,23322,23328,23326,23535,23980,23985,23977,23975,23989,23984,23982,23978,23976,23986,23981,23983,23988,24167,24168,24166,24175,24297,24295,24294,24296,24293,24395,24508,24989,25e3,24982,25029,25012,25030,25025,25036,25018,25023,25016,24972,25815,25814,25808,25807,25801,25789,25737,25795,25819,25843,25817,25907,25983,25980,26018,26312,26302,26304,26314,26315,26319,26301,26299,26298,26316,26403,27188,27238,27209,27239,27186,27240,27198,27229,27245,27254,27227,27217,27176,27226,27195,27199,27201,27242,27236,27216,27215,27220,27247,27241,27232,27196,27230,27222,27221,27213,27214,27206,27477,27476,27478,27559,27562,27563,27592,27591,27652,27651,27654,28589,28619,28579,28615,28604,28622,28616,28510,28612,28605,28574,28618,28584,28676,28581,28590,28602,28588,28586,28623,28607,28600,28578,28617,28587,28621,28591,28594,28592,29125,29122,29119,29112,29142,29120,29121,29131,29140,29130,29127,29135,29117,29144,29116,29126,29146,29147,29341,29342,29545,29542,29543,29548,29541,29547,29546,29823,29850,29856,29844,29842,29845,29857,29963,30080,30255,30253,30257,30269,30259,30268,30261,30258,30256,30395,30438,30618,30621,30625,30620,30619,30626,30627,30613,30617,30615,30941,30953,30949,30954,30942,30947,30939,30945,30946,30957,30943,30944,31140,31300,31304,31303,31414,31416,31413,31409,31415,31710,31715,31719,31709,31701,31717,31706,31720,31737,31700,31722,31714,31708,31723,31704,31711,31954,31956,31959,31952,31953,32274,32289,32279,32268,32287,32288,32275,32270,32284,32277,32282,32290,32267,32271,32278,32269,32276,32293,32292,32579,32635,32636,32634,32689,32751,32810,32809,32876,33201,33190,33198,33209,33205,33195,33200,33196,33204,33202,33207,33191,33266,33365,33366,33367,34134,34117,34155,34125,34131,34145,34136,34112,34118,34148,34113,34146,34116,34129,34119,34147,34110,34139,34161,34126,34158,34165,34133,34151,34144,34188,34150,34141,34132,34149,34156,34403,34405,34404,34715,34703,34711,34707,34706,34696,34689,34710,34712,34681,34695,34723,34693,34704,34705,34717,34692,34708,34716,34714,34697,35102,35110,35120,35117,35118,35111,35121,35106,35113,35107,35119,35116,35103,35313,35552,35554,35570,35572,35573,35549,35604,35556,35551,35568,35528,35550,35553,35560,35583,35567,35579,35985,35986,35984,36085,36078,36081,36080,36083,36204,36206,36261,36263,36403,36414,36408,36416,36421,36406,36412,36413,36417,36400,36415,36541,36662,36654,36661,36658,36665,36663,36660,36982,36985,36987,36998,37114,37171,37173,37174,37267,37264,37265,37261,37263,37671,37662,37640,37663,37638,37647,37754,37688,37692,37659,37667,37650,37633,37702,37677,37646,37645,37579,37661,37626,37669,37651,37625,37623,37684,37634,37668,37631,37673,37689,37685,37674,37652,37644,37643,37630,37641,37632,37627,37654,38332,38349,38334,38329,38330,38326,38335,38325,38333,38569,38612,38667,38674,38672,38809,38807,38804,38896,38904,38965,38959,38962,39204,39199,39207,39209,39326,39406,39404,39397,39396,39408,39395,39402,39401,39399,39609,39615,39604,39611,39670,39674,39673,39671,39731,39808,39813,39815,39804,39806,39803,39810,39827,39826,39824,39802,39829,39805,39816,40229,40215,40224,40222,40212,40233,40221,40216,40226,40208,40217,40223,40584,40582,40583,40622,40621,40661,40662,40698,40722,40765,20774,20773,20770,20772,20768,20777,21236,22163,22156,22157,22150,22148,22147,22142,22146,22143,22145,22742,22740,22735,22738,23341,23333,23346,23331,23340,23335,23334,23343,23342,23419,23537,23538,23991,24172,24170,24510,24507,25027,25013,25020,25063,25056,25061,25060,25064,25054,25839,25833,25827,25835,25828,25832,25985,25984,26038,26074,26322,27277,27286,27265,27301,27273,27295,27291,27297,27294,27271,27283,27278,27285,27267,27304,27300,27281,27263,27302,27290,27269,27276,27282,27483,27565,27657,28620,28585,28660,28628,28643,28636,28653,28647,28646,28638,28658,28637,28642,28648,29153,29169,29160,29170,29156,29168,29154,29555,29550,29551,29847,29874,29867,29840,29866,29869,29873,29861,29871,29968,29969,29970,29967,30084,30275,30280,30281,30279,30372,30441,30645,30635,30642,30647,30646,30644,30641,30632,30704,30963,30973,30978,30971,30972,30962,30981,30969,30974,30980,31147,31144,31324,31323,31318,31320,31316,31322,31422,31424,31425,31749,31759,31730,31744,31743,31739,31758,31732,31755,31731,31746,31753,31747,31745,31736,31741,31750,31728,31729,31760,31754,31976,32301,32316,32322,32307,38984,32312,32298,32329,32320,32327,32297,32332,32304,32315,32310,32324,32314,32581,32639,32638,32637,32756,32754,32812,33211,33220,33228,33226,33221,33223,33212,33257,33371,33370,33372,34179,34176,34191,34215,34197,34208,34187,34211,34171,34212,34202,34206,34167,34172,34185,34209,34170,34168,34135,34190,34198,34182,34189,34201,34205,34177,34210,34178,34184,34181,34169,34166,34200,34192,34207,34408,34750,34730,34733,34757,34736,34732,34745,34741,34748,34734,34761,34755,34754,34764,34743,34735,34756,34762,34740,34742,34751,34744,34749,34782,34738,35125,35123,35132,35134,35137,35154,35127,35138,35245,35247,35246,35314,35315,35614,35608,35606,35601,35589,35595,35618,35599,35602,35605,35591,35597,35592,35590,35612,35603,35610,35919,35952,35954,35953,35951,35989,35988,36089,36207,36430,36429,36435,36432,36428,36423,36675,36672,36997,36990,37176,37274,37282,37275,37273,37279,37281,37277,37280,37793,37763,37807,37732,37718,37703,37756,37720,37724,37750,37705,37712,37713,37728,37741,37775,37708,37738,37753,37719,37717,37714,37711,37745,37751,37755,37729,37726,37731,37735,37760,37710,37721,38343,38336,38345,38339,38341,38327,38574,38576,38572,38688,38687,38680,38685,38681,38810,38817,38812,38814,38813,38869,38868,38897,38977,38980,38986,38985,38981,38979,39205,39211,39212,39210,39219,39218,39215,39213,39217,39216,39320,39331,39329,39426,39418,39412,39415,39417,39416,39414,39419,39421,39422,39420,39427,39614,39678,39677,39681,39676,39752,39834,39848,39838,39835,39846,39841,39845,39844,39814,39842,39840,39855,40243,40257,40295,40246,40238,40239,40241,40248,40240,40261,40258,40259,40254,40247,40256,40253,32757,40237,40586,40585,40589,40624,40648,40666,40699,40703,40740,40739,40738,40788,40864,20785,20781,20782,22168,22172,22167,22170,22173,22169,22896,23356,23657,23658,24e3,24173,24174,25048,25055,25069,25070,25073,25066,25072,25067,25046,25065,25855,25860,25853,25848,25857,25859,25852,26004,26075,26330,26331,26328,27333,27321,27325,27361,27334,27322,27318,27319,27335,27316,27309,27486,27593,27659,28679,28684,28685,28673,28677,28692,28686,28671,28672,28667,28710,28668,28663,28682,29185,29183,29177,29187,29181,29558,29880,29888,29877,29889,29886,29878,29883,29890,29972,29971,30300,30308,30297,30288,30291,30295,30298,30374,30397,30444,30658,30650,30975,30988,30995,30996,30985,30992,30994,30993,31149,31148,31327,31772,31785,31769,31776,31775,31789,31773,31782,31784,31778,31781,31792,32348,32336,32342,32355,32344,32354,32351,32337,32352,32343,32339,32693,32691,32759,32760,32885,33233,33234,33232,33375,33374,34228,34246,34240,34243,34242,34227,34229,34237,34247,34244,34239,34251,34254,34248,34245,34225,34230,34258,34340,34232,34231,34238,34409,34791,34790,34786,34779,34795,34794,34789,34783,34803,34788,34772,34780,34771,34797,34776,34787,34724,34775,34777,34817,34804,34792,34781,35155,35147,35151,35148,35142,35152,35153,35145,35626,35623,35619,35635,35632,35637,35655,35631,35644,35646,35633,35621,35639,35622,35638,35630,35620,35643,35645,35642,35906,35957,35993,35992,35991,36094,36100,36098,36096,36444,36450,36448,36439,36438,36446,36453,36455,36443,36442,36449,36445,36457,36436,36678,36679,36680,36683,37160,37178,37179,37182,37288,37285,37287,37295,37290,37813,37772,37778,37815,37787,37789,37769,37799,37774,37802,37790,37798,37781,37768,37785,37791,37773,37809,37777,37810,37796,37800,37812,37795,37797,38354,38355,38353,38579,38615,38618,24002,38623,38616,38621,38691,38690,38693,38828,38830,38824,38827,38820,38826,38818,38821,38871,38873,38870,38872,38906,38992,38993,38994,39096,39233,39228,39226,39439,39435,39433,39437,39428,39441,39434,39429,39431,39430,39616,39644,39688,39684,39685,39721,39733,39754,39756,39755,39879,39878,39875,39871,39873,39861,39864,39891,39862,39876,39865,39869,40284,40275,40271,40266,40283,40267,40281,40278,40268,40279,40274,40276,40287,40280,40282,40590,40588,40671,40705,40704,40726,40741,40747,40746,40745,40744,40780,40789,20788,20789,21142,21239,21428,22187,22189,22182,22183,22186,22188,22746,22749,22747,22802,23357,23358,23359,24003,24176,24511,25083,25863,25872,25869,25865,25868,25870,25988,26078,26077,26334,27367,27360,27340,27345,27353,27339,27359,27356,27344,27371,27343,27341,27358,27488,27568,27660,28697,28711,28704,28694,28715,28705,28706,28707,28713,28695,28708,28700,28714,29196,29194,29191,29186,29189,29349,29350,29348,29347,29345,29899,29893,29879,29891,29974,30304,30665,30666,30660,30705,31005,31003,31009,31004,30999,31006,31152,31335,31336,31795,31804,31801,31788,31803,31980,31978,32374,32373,32376,32368,32375,32367,32378,32370,32372,32360,32587,32586,32643,32646,32695,32765,32766,32888,33239,33237,33380,33377,33379,34283,34289,34285,34265,34273,34280,34266,34263,34284,34290,34296,34264,34271,34275,34268,34257,34288,34278,34287,34270,34274,34816,34810,34819,34806,34807,34825,34828,34827,34822,34812,34824,34815,34826,34818,35170,35162,35163,35159,35169,35164,35160,35165,35161,35208,35255,35254,35318,35664,35656,35658,35648,35667,35670,35668,35659,35669,35665,35650,35666,35671,35907,35959,35958,35994,36102,36103,36105,36268,36266,36269,36267,36461,36472,36467,36458,36463,36475,36546,36690,36689,36687,36688,36691,36788,37184,37183,37296,37293,37854,37831,37839,37826,37850,37840,37881,37868,37836,37849,37801,37862,37834,37844,37870,37859,37845,37828,37838,37824,37842,37863,38269,38362,38363,38625,38697,38699,38700,38696,38694,38835,38839,38838,38877,38878,38879,39004,39001,39005,38999,39103,39101,39099,39102,39240,39239,39235,39334,39335,39450,39445,39461,39453,39460,39451,39458,39456,39463,39459,39454,39452,39444,39618,39691,39690,39694,39692,39735,39914,39915,39904,39902,39908,39910,39906,39920,39892,39895,39916,39900,39897,39909,39893,39905,39898,40311,40321,40330,40324,40328,40305,40320,40312,40326,40331,40332,40317,40299,40308,40309,40304,40297,40325,40307,40315,40322,40303,40313,40319,40327,40296,40596,40593,40640,40700,40749,40768,40769,40781,40790,40791,40792,21303,22194,22197,22195,22755,23365,24006,24007,24302,24303,24512,24513,25081,25879,25878,25877,25875,26079,26344,26339,26340,27379,27376,27370,27368,27385,27377,27374,27375,28732,28725,28719,28727,28724,28721,28738,28728,28735,28730,28729,28736,28731,28723,28737,29203,29204,29352,29565,29564,29882,30379,30378,30398,30445,30668,30670,30671,30669,30706,31013,31011,31015,31016,31012,31017,31154,31342,31340,31341,31479,31817,31816,31818,31815,31813,31982,32379,32382,32385,32384,32698,32767,32889,33243,33241,33291,33384,33385,34338,34303,34305,34302,34331,34304,34294,34308,34313,34309,34316,34301,34841,34832,34833,34839,34835,34838,35171,35174,35257,35319,35680,35690,35677,35688,35683,35685,35687,35693,36270,36486,36488,36484,36697,36694,36695,36693,36696,36698,37005,37187,37185,37303,37301,37298,37299,37899,37907,37883,37920,37903,37908,37886,37909,37904,37928,37913,37901,37877,37888,37879,37895,37902,37910,37906,37882,37897,37880,37898,37887,37884,37900,37878,37905,37894,38366,38368,38367,38702,38703,38841,38843,38909,38910,39008,39010,39011,39007,39105,39106,39248,39246,39257,39244,39243,39251,39474,39476,39473,39468,39466,39478,39465,39470,39480,39469,39623,39626,39622,39696,39698,39697,39947,39944,39927,39941,39954,39928,4e4,39943,39950,39942,39959,39956,39945,40351,40345,40356,40349,40338,40344,40336,40347,40352,40340,40348,40362,40343,40353,40346,40354,40360,40350,40355,40383,40361,40342,40358,40359,40601,40603,40602,40677,40676,40679,40678,40752,40750,40795,40800,40798,40797,40793,40849,20794,20793,21144,21143,22211,22205,22206,23368,23367,24011,24015,24305,25085,25883,27394,27388,27395,27384,27392,28739,28740,28746,28744,28745,28741,28742,29213,29210,29209,29566,29975,30314,30672,31021,31025,31023,31828,31827,31986,32394,32391,32392,32395,32390,32397,32589,32699,32816,33245,34328,34346,34342,34335,34339,34332,34329,34343,34350,34337,34336,34345,34334,34341,34857,34845,34843,34848,34852,34844,34859,34890,35181,35177,35182,35179,35322,35705,35704,35653,35706,35707,36112,36116,36271,36494,36492,36702,36699,36701,37190,37188,37189,37305,37951,37947,37942,37929,37949,37948,37936,37945,37930,37943,37932,37952,37937,38373,38372,38371,38709,38714,38847,38881,39012,39113,39110,39104,39256,39254,39481,39485,39494,39492,39490,39489,39482,39487,39629,39701,39703,39704,39702,39738,39762,39979,39965,39964,39980,39971,39976,39977,39972,39969,40375,40374,40380,40385,40391,40394,40399,40382,40389,40387,40379,40373,40398,40377,40378,40364,40392,40369,40365,40396,40371,40397,40370,40570,40604,40683,40686,40685,40731,40728,40730,40753,40782,40805,40804,40850,20153,22214,22213,22219,22897,23371,23372,24021,24017,24306,25889,25888,25894,25890,27403,27400,27401,27661,28757,28758,28759,28754,29214,29215,29353,29567,29912,29909,29913,29911,30317,30381,31029,31156,31344,31345,31831,31836,31833,31835,31834,31988,31985,32401,32591,32647,33246,33387,34356,34357,34355,34348,34354,34358,34860,34856,34854,34858,34853,35185,35263,35262,35323,35710,35716,35714,35718,35717,35711,36117,36501,36500,36506,36498,36496,36502,36503,36704,36706,37191,37964,37968,37962,37963,37967,37959,37957,37960,37961,37958,38719,38883,39018,39017,39115,39252,39259,39502,39507,39508,39500,39503,39496,39498,39497,39506,39504,39632,39705,39723,39739,39766,39765,40006,40008,39999,40004,39993,39987,40001,39996,39991,39988,39986,39997,39990,40411,40402,40414,40410,40395,40400,40412,40401,40415,40425,40409,40408,40406,40437,40405,40413,40630,40688,40757,40755,40754,40770,40811,40853,40866,20797,21145,22760,22759,22898,23373,24024,34863,24399,25089,25091,25092,25897,25893,26006,26347,27409,27410,27407,27594,28763,28762,29218,29570,29569,29571,30320,30676,31847,31846,32405,33388,34362,34368,34361,34364,34353,34363,34366,34864,34866,34862,34867,35190,35188,35187,35326,35724,35726,35723,35720,35909,36121,36504,36708,36707,37308,37986,37973,37981,37975,37982,38852,38853,38912,39510,39513,39710,39711,39712,40018,40024,40016,40010,40013,40011,40021,40025,40012,40014,40443,40439,40431,40419,40427,40440,40420,40438,40417,40430,40422,40434,40432,40418,40428,40436,40435,40424,40429,40642,40656,40690,40691,40710,40732,40760,40759,40758,40771,40783,40817,40816,40814,40815,22227,22221,23374,23661,25901,26349,26350,27411,28767,28769,28765,28768,29219,29915,29925,30677,31032,31159,31158,31850,32407,32649,33389,34371,34872,34871,34869,34891,35732,35733,36510,36511,36512,36509,37310,37309,37314,37995,37992,37993,38629,38726,38723,38727,38855,38885,39518,39637,39769,40035,40039,40038,40034,40030,40032,40450,40446,40455,40451,40454,40453,40448,40449,40457,40447,40445,40452,40608,40734,40774,40820,40821,40822,22228,25902,26040,27416,27417,27415,27418,28770,29222,29354,30680,30681,31033,31849,31851,31990,32410,32408,32411,32409,33248,33249,34374,34375,34376,35193,35194,35196,35195,35327,35736,35737,36517,36516,36515,37998,37997,37999,38001,38003,38729,39026,39263,40040,40046,40045,40459,40461,40464,40463,40466,40465,40609,40693,40713,40775,40824,40827,40826,40825,22302,28774,31855,34876,36274,36518,37315,38004,38008,38006,38005,39520,40052,40051,40049,40053,40468,40467,40694,40714,40868,28776,28773,31991,34410,34878,34877,34879,35742,35996,36521,36553,38731,39027,39028,39116,39265,39339,39524,39526,39527,39716,40469,40471,40776,25095,27422,29223,34380,36520,38018,38016,38017,39529,39528,39726,40473,29225,34379,35743,38019,40057,40631,30325,39531,40058,40477,28777,28778,40612,40830,40777,40856,30849,37561,35023,22715,24658,31911,23290,9556,9574,9559,9568,9580,9571,9562,9577,9565,9554,9572,9557,9566,9578,9569,9560,9575,9563,9555,9573,9558,9567,9579,9570,9561,9576,9564,9553,9552,9581,9582,9584,9583,65517,132423,37595,132575,147397,34124,17077,29679,20917,13897,149826,166372,37700,137691,33518,146632,30780,26436,25311,149811,166314,131744,158643,135941,20395,140525,20488,159017,162436,144896,150193,140563,20521,131966,24484,131968,131911,28379,132127,20605,20737,13434,20750,39020,14147,33814,149924,132231,20832,144308,20842,134143,139516,131813,140592,132494,143923,137603,23426,34685,132531,146585,20914,20920,40244,20937,20943,20945,15580,20947,150182,20915,20962,21314,20973,33741,26942,145197,24443,21003,21030,21052,21173,21079,21140,21177,21189,31765,34114,21216,34317,158483,21253,166622,21833,28377,147328,133460,147436,21299,21316,134114,27851,136998,26651,29653,24650,16042,14540,136936,29149,17570,21357,21364,165547,21374,21375,136598,136723,30694,21395,166555,21408,21419,21422,29607,153458,16217,29596,21441,21445,27721,20041,22526,21465,15019,134031,21472,147435,142755,21494,134263,21523,28793,21803,26199,27995,21613,158547,134516,21853,21647,21668,18342,136973,134877,15796,134477,166332,140952,21831,19693,21551,29719,21894,21929,22021,137431,147514,17746,148533,26291,135348,22071,26317,144010,26276,26285,22093,22095,30961,22257,38791,21502,22272,22255,22253,166758,13859,135759,22342,147877,27758,28811,22338,14001,158846,22502,136214,22531,136276,148323,22566,150517,22620,22698,13665,22752,22748,135740,22779,23551,22339,172368,148088,37843,13729,22815,26790,14019,28249,136766,23076,21843,136850,34053,22985,134478,158849,159018,137180,23001,137211,137138,159142,28017,137256,136917,23033,159301,23211,23139,14054,149929,23159,14088,23190,29797,23251,159649,140628,15749,137489,14130,136888,24195,21200,23414,25992,23420,162318,16388,18525,131588,23509,24928,137780,154060,132517,23539,23453,19728,23557,138052,23571,29646,23572,138405,158504,23625,18653,23685,23785,23791,23947,138745,138807,23824,23832,23878,138916,23738,24023,33532,14381,149761,139337,139635,33415,14390,15298,24110,27274,24181,24186,148668,134355,21414,20151,24272,21416,137073,24073,24308,164994,24313,24315,14496,24316,26686,37915,24333,131521,194708,15070,18606,135994,24378,157832,140240,24408,140401,24419,38845,159342,24434,37696,166454,24487,23990,15711,152144,139114,159992,140904,37334,131742,166441,24625,26245,137335,14691,15815,13881,22416,141236,31089,15936,24734,24740,24755,149890,149903,162387,29860,20705,23200,24932,33828,24898,194726,159442,24961,20980,132694,24967,23466,147383,141407,25043,166813,170333,25040,14642,141696,141505,24611,24924,25886,25483,131352,25285,137072,25301,142861,25452,149983,14871,25656,25592,136078,137212,25744,28554,142902,38932,147596,153373,25825,25829,38011,14950,25658,14935,25933,28438,150056,150051,25989,25965,25951,143486,26037,149824,19255,26065,16600,137257,26080,26083,24543,144384,26136,143863,143864,26180,143780,143781,26187,134773,26215,152038,26227,26228,138813,143921,165364,143816,152339,30661,141559,39332,26370,148380,150049,15147,27130,145346,26462,26471,26466,147917,168173,26583,17641,26658,28240,37436,26625,144358,159136,26717,144495,27105,27147,166623,26995,26819,144845,26881,26880,15666,14849,144956,15232,26540,26977,166474,17148,26934,27032,15265,132041,33635,20624,27129,144985,139562,27205,145155,27293,15347,26545,27336,168348,15373,27421,133411,24798,27445,27508,141261,28341,146139,132021,137560,14144,21537,146266,27617,147196,27612,27703,140427,149745,158545,27738,33318,27769,146876,17605,146877,147876,149772,149760,146633,14053,15595,134450,39811,143865,140433,32655,26679,159013,159137,159211,28054,27996,28284,28420,149887,147589,159346,34099,159604,20935,27804,28189,33838,166689,28207,146991,29779,147330,31180,28239,23185,143435,28664,14093,28573,146992,28410,136343,147517,17749,37872,28484,28508,15694,28532,168304,15675,28575,147780,28627,147601,147797,147513,147440,147380,147775,20959,147798,147799,147776,156125,28747,28798,28839,28801,28876,28885,28886,28895,16644,15848,29108,29078,148087,28971,28997,23176,29002,29038,23708,148325,29007,37730,148161,28972,148570,150055,150050,29114,166888,28861,29198,37954,29205,22801,37955,29220,37697,153093,29230,29248,149876,26813,29269,29271,15957,143428,26637,28477,29314,29482,29483,149539,165931,18669,165892,29480,29486,29647,29610,134202,158254,29641,29769,147938,136935,150052,26147,14021,149943,149901,150011,29687,29717,26883,150054,29753,132547,16087,29788,141485,29792,167602,29767,29668,29814,33721,29804,14128,29812,37873,27180,29826,18771,150156,147807,150137,166799,23366,166915,137374,29896,137608,29966,29929,29982,167641,137803,23511,167596,37765,30029,30026,30055,30062,151426,16132,150803,30094,29789,30110,30132,30210,30252,30289,30287,30319,30326,156661,30352,33263,14328,157969,157966,30369,30373,30391,30412,159647,33890,151709,151933,138780,30494,30502,30528,25775,152096,30552,144044,30639,166244,166248,136897,30708,30729,136054,150034,26826,30895,30919,30931,38565,31022,153056,30935,31028,30897,161292,36792,34948,166699,155779,140828,31110,35072,26882,31104,153687,31133,162617,31036,31145,28202,160038,16040,31174,168205,31188],"euc-kr":[44034,44035,44037,44038,44043,44044,44045,44046,44047,44056,44062,44063,44065,44066,44067,44069,44070,44071,44072,44073,44074,44075,44078,44082,44083,44084,null,null,null,null,null,null,44085,44086,44087,44090,44091,44093,44094,44095,44097,44098,44099,44100,44101,44102,44103,44104,44105,44106,44108,44110,44111,44112,44113,44114,44115,44117,null,null,null,null,null,null,44118,44119,44121,44122,44123,44125,44126,44127,44128,44129,44130,44131,44132,44133,44134,44135,44136,44137,44138,44139,44140,44141,44142,44143,44146,44147,44149,44150,44153,44155,44156,44157,44158,44159,44162,44167,44168,44173,44174,44175,44177,44178,44179,44181,44182,44183,44184,44185,44186,44187,44190,44194,44195,44196,44197,44198,44199,44203,44205,44206,44209,44210,44211,44212,44213,44214,44215,44218,44222,44223,44224,44226,44227,44229,44230,44231,44233,44234,44235,44237,44238,44239,44240,44241,44242,44243,44244,44246,44248,44249,44250,44251,44252,44253,44254,44255,44258,44259,44261,44262,44265,44267,44269,44270,44274,44276,44279,44280,44281,44282,44283,44286,44287,44289,44290,44291,44293,44295,44296,44297,44298,44299,44302,44304,44306,44307,44308,44309,44310,44311,44313,44314,44315,44317,44318,44319,44321,44322,44323,44324,44325,44326,44327,44328,44330,44331,44334,44335,44336,44337,44338,44339,null,null,null,null,null,null,44342,44343,44345,44346,44347,44349,44350,44351,44352,44353,44354,44355,44358,44360,44362,44363,44364,44365,44366,44367,44369,44370,44371,44373,44374,44375,null,null,null,null,null,null,44377,44378,44379,44380,44381,44382,44383,44384,44386,44388,44389,44390,44391,44392,44393,44394,44395,44398,44399,44401,44402,44407,44408,44409,44410,44414,44416,44419,44420,44421,44422,44423,44426,44427,44429,44430,44431,44433,44434,44435,44436,44437,44438,44439,44440,44441,44442,44443,44446,44447,44448,44449,44450,44451,44453,44454,44455,44456,44457,44458,44459,44460,44461,44462,44463,44464,44465,44466,44467,44468,44469,44470,44472,44473,44474,44475,44476,44477,44478,44479,44482,44483,44485,44486,44487,44489,44490,44491,44492,44493,44494,44495,44498,44500,44501,44502,44503,44504,44505,44506,44507,44509,44510,44511,44513,44514,44515,44517,44518,44519,44520,44521,44522,44523,44524,44525,44526,44527,44528,44529,44530,44531,44532,44533,44534,44535,44538,44539,44541,44542,44546,44547,44548,44549,44550,44551,44554,44556,44558,44559,44560,44561,44562,44563,44565,44566,44567,44568,44569,44570,44571,44572,null,null,null,null,null,null,44573,44574,44575,44576,44577,44578,44579,44580,44581,44582,44583,44584,44585,44586,44587,44588,44589,44590,44591,44594,44595,44597,44598,44601,44603,44604,null,null,null,null,null,null,44605,44606,44607,44610,44612,44615,44616,44617,44619,44623,44625,44626,44627,44629,44631,44632,44633,44634,44635,44638,44642,44643,44644,44646,44647,44650,44651,44653,44654,44655,44657,44658,44659,44660,44661,44662,44663,44666,44670,44671,44672,44673,44674,44675,44678,44679,44680,44681,44682,44683,44685,44686,44687,44688,44689,44690,44691,44692,44693,44694,44695,44696,44697,44698,44699,44700,44701,44702,44703,44704,44705,44706,44707,44708,44709,44710,44711,44712,44713,44714,44715,44716,44717,44718,44719,44720,44721,44722,44723,44724,44725,44726,44727,44728,44729,44730,44731,44735,44737,44738,44739,44741,44742,44743,44744,44745,44746,44747,44750,44754,44755,44756,44757,44758,44759,44762,44763,44765,44766,44767,44768,44769,44770,44771,44772,44773,44774,44775,44777,44778,44780,44782,44783,44784,44785,44786,44787,44789,44790,44791,44793,44794,44795,44797,44798,44799,44800,44801,44802,44803,44804,44805,null,null,null,null,null,null,44806,44809,44810,44811,44812,44814,44815,44817,44818,44819,44820,44821,44822,44823,44824,44825,44826,44827,44828,44829,44830,44831,44832,44833,44834,44835,null,null,null,null,null,null,44836,44837,44838,44839,44840,44841,44842,44843,44846,44847,44849,44851,44853,44854,44855,44856,44857,44858,44859,44862,44864,44868,44869,44870,44871,44874,44875,44876,44877,44878,44879,44881,44882,44883,44884,44885,44886,44887,44888,44889,44890,44891,44894,44895,44896,44897,44898,44899,44902,44903,44904,44905,44906,44907,44908,44909,44910,44911,44912,44913,44914,44915,44916,44917,44918,44919,44920,44922,44923,44924,44925,44926,44927,44929,44930,44931,44933,44934,44935,44937,44938,44939,44940,44941,44942,44943,44946,44947,44948,44950,44951,44952,44953,44954,44955,44957,44958,44959,44960,44961,44962,44963,44964,44965,44966,44967,44968,44969,44970,44971,44972,44973,44974,44975,44976,44977,44978,44979,44980,44981,44982,44983,44986,44987,44989,44990,44991,44993,44994,44995,44996,44997,44998,45002,45004,45007,45008,45009,45010,45011,45013,45014,45015,45016,45017,45018,45019,45021,45022,45023,45024,45025,null,null,null,null,null,null,45026,45027,45028,45029,45030,45031,45034,45035,45036,45037,45038,45039,45042,45043,45045,45046,45047,45049,45050,45051,45052,45053,45054,45055,45058,45059,null,null,null,null,null,null,45061,45062,45063,45064,45065,45066,45067,45069,45070,45071,45073,45074,45075,45077,45078,45079,45080,45081,45082,45083,45086,45087,45088,45089,45090,45091,45092,45093,45094,45095,45097,45098,45099,45100,45101,45102,45103,45104,45105,45106,45107,45108,45109,45110,45111,45112,45113,45114,45115,45116,45117,45118,45119,45120,45121,45122,45123,45126,45127,45129,45131,45133,45135,45136,45137,45138,45142,45144,45146,45147,45148,45150,45151,45152,45153,45154,45155,45156,45157,45158,45159,45160,45161,45162,45163,45164,45165,45166,45167,45168,45169,45170,45171,45172,45173,45174,45175,45176,45177,45178,45179,45182,45183,45185,45186,45187,45189,45190,45191,45192,45193,45194,45195,45198,45200,45202,45203,45204,45205,45206,45207,45211,45213,45214,45219,45220,45221,45222,45223,45226,45232,45234,45238,45239,45241,45242,45243,45245,45246,45247,45248,45249,45250,45251,45254,45258,45259,45260,45261,45262,45263,45266,null,null,null,null,null,null,45267,45269,45270,45271,45273,45274,45275,45276,45277,45278,45279,45281,45282,45283,45284,45286,45287,45288,45289,45290,45291,45292,45293,45294,45295,45296,null,null,null,null,null,null,45297,45298,45299,45300,45301,45302,45303,45304,45305,45306,45307,45308,45309,45310,45311,45312,45313,45314,45315,45316,45317,45318,45319,45322,45325,45326,45327,45329,45332,45333,45334,45335,45338,45342,45343,45344,45345,45346,45350,45351,45353,45354,45355,45357,45358,45359,45360,45361,45362,45363,45366,45370,45371,45372,45373,45374,45375,45378,45379,45381,45382,45383,45385,45386,45387,45388,45389,45390,45391,45394,45395,45398,45399,45401,45402,45403,45405,45406,45407,45409,45410,45411,45412,45413,45414,45415,45416,45417,45418,45419,45420,45421,45422,45423,45424,45425,45426,45427,45428,45429,45430,45431,45434,45435,45437,45438,45439,45441,45443,45444,45445,45446,45447,45450,45452,45454,45455,45456,45457,45461,45462,45463,45465,45466,45467,45469,45470,45471,45472,45473,45474,45475,45476,45477,45478,45479,45481,45482,45483,45484,45485,45486,45487,45488,45489,45490,45491,45492,45493,45494,45495,45496,null,null,null,null,null,null,45497,45498,45499,45500,45501,45502,45503,45504,45505,45506,45507,45508,45509,45510,45511,45512,45513,45514,45515,45517,45518,45519,45521,45522,45523,45525,null,null,null,null,null,null,45526,45527,45528,45529,45530,45531,45534,45536,45537,45538,45539,45540,45541,45542,45543,45546,45547,45549,45550,45551,45553,45554,45555,45556,45557,45558,45559,45560,45562,45564,45566,45567,45568,45569,45570,45571,45574,45575,45577,45578,45581,45582,45583,45584,45585,45586,45587,45590,45592,45594,45595,45596,45597,45598,45599,45601,45602,45603,45604,45605,45606,45607,45608,45609,45610,45611,45612,45613,45614,45615,45616,45617,45618,45619,45621,45622,45623,45624,45625,45626,45627,45629,45630,45631,45632,45633,45634,45635,45636,45637,45638,45639,45640,45641,45642,45643,45644,45645,45646,45647,45648,45649,45650,45651,45652,45653,45654,45655,45657,45658,45659,45661,45662,45663,45665,45666,45667,45668,45669,45670,45671,45674,45675,45676,45677,45678,45679,45680,45681,45682,45683,45686,45687,45688,45689,45690,45691,45693,45694,45695,45696,45697,45698,45699,45702,45703,45704,45706,45707,45708,45709,45710,null,null,null,null,null,null,45711,45714,45715,45717,45718,45719,45723,45724,45725,45726,45727,45730,45732,45735,45736,45737,45739,45741,45742,45743,45745,45746,45747,45749,45750,45751,null,null,null,null,null,null,45752,45753,45754,45755,45756,45757,45758,45759,45760,45761,45762,45763,45764,45765,45766,45767,45770,45771,45773,45774,45775,45777,45779,45780,45781,45782,45783,45786,45788,45790,45791,45792,45793,45795,45799,45801,45802,45808,45809,45810,45814,45820,45821,45822,45826,45827,45829,45830,45831,45833,45834,45835,45836,45837,45838,45839,45842,45846,45847,45848,45849,45850,45851,45853,45854,45855,45856,45857,45858,45859,45860,45861,45862,45863,45864,45865,45866,45867,45868,45869,45870,45871,45872,45873,45874,45875,45876,45877,45878,45879,45880,45881,45882,45883,45884,45885,45886,45887,45888,45889,45890,45891,45892,45893,45894,45895,45896,45897,45898,45899,45900,45901,45902,45903,45904,45905,45906,45907,45911,45913,45914,45917,45920,45921,45922,45923,45926,45928,45930,45932,45933,45935,45938,45939,45941,45942,45943,45945,45946,45947,45948,45949,45950,45951,45954,45958,45959,45960,45961,45962,45963,45965,null,null,null,null,null,null,45966,45967,45969,45970,45971,45973,45974,45975,45976,45977,45978,45979,45980,45981,45982,45983,45986,45987,45988,45989,45990,45991,45993,45994,45995,45997,null,null,null,null,null,null,45998,45999,46e3,46001,46002,46003,46004,46005,46006,46007,46008,46009,46010,46011,46012,46013,46014,46015,46016,46017,46018,46019,46022,46023,46025,46026,46029,46031,46033,46034,46035,46038,46040,46042,46044,46046,46047,46049,46050,46051,46053,46054,46055,46057,46058,46059,46060,46061,46062,46063,46064,46065,46066,46067,46068,46069,46070,46071,46072,46073,46074,46075,46077,46078,46079,46080,46081,46082,46083,46084,46085,46086,46087,46088,46089,46090,46091,46092,46093,46094,46095,46097,46098,46099,46100,46101,46102,46103,46105,46106,46107,46109,46110,46111,46113,46114,46115,46116,46117,46118,46119,46122,46124,46125,46126,46127,46128,46129,46130,46131,46133,46134,46135,46136,46137,46138,46139,46140,46141,46142,46143,46144,46145,46146,46147,46148,46149,46150,46151,46152,46153,46154,46155,46156,46157,46158,46159,46162,46163,46165,46166,46167,46169,46170,46171,46172,46173,46174,46175,46178,46180,46182,null,null,null,null,null,null,46183,46184,46185,46186,46187,46189,46190,46191,46192,46193,46194,46195,46196,46197,46198,46199,46200,46201,46202,46203,46204,46205,46206,46207,46209,46210,null,null,null,null,null,null,46211,46212,46213,46214,46215,46217,46218,46219,46220,46221,46222,46223,46224,46225,46226,46227,46228,46229,46230,46231,46232,46233,46234,46235,46236,46238,46239,46240,46241,46242,46243,46245,46246,46247,46249,46250,46251,46253,46254,46255,46256,46257,46258,46259,46260,46262,46264,46266,46267,46268,46269,46270,46271,46273,46274,46275,46277,46278,46279,46281,46282,46283,46284,46285,46286,46287,46289,46290,46291,46292,46294,46295,46296,46297,46298,46299,46302,46303,46305,46306,46309,46311,46312,46313,46314,46315,46318,46320,46322,46323,46324,46325,46326,46327,46329,46330,46331,46332,46333,46334,46335,46336,46337,46338,46339,46340,46341,46342,46343,46344,46345,46346,46347,46348,46349,46350,46351,46352,46353,46354,46355,46358,46359,46361,46362,46365,46366,46367,46368,46369,46370,46371,46374,46379,46380,46381,46382,46383,46386,46387,46389,46390,46391,46393,46394,46395,46396,46397,46398,46399,46402,46406,null,null,null,null,null,null,46407,46408,46409,46410,46414,46415,46417,46418,46419,46421,46422,46423,46424,46425,46426,46427,46430,46434,46435,46436,46437,46438,46439,46440,46441,46442,null,null,null,null,null,null,46443,46444,46445,46446,46447,46448,46449,46450,46451,46452,46453,46454,46455,46456,46457,46458,46459,46460,46461,46462,46463,46464,46465,46466,46467,46468,46469,46470,46471,46472,46473,46474,46475,46476,46477,46478,46479,46480,46481,46482,46483,46484,46485,46486,46487,46488,46489,46490,46491,46492,46493,46494,46495,46498,46499,46501,46502,46503,46505,46508,46509,46510,46511,46514,46518,46519,46520,46521,46522,46526,46527,46529,46530,46531,46533,46534,46535,46536,46537,46538,46539,46542,46546,46547,46548,46549,46550,46551,46553,46554,46555,46556,46557,46558,46559,46560,46561,46562,46563,46564,46565,46566,46567,46568,46569,46570,46571,46573,46574,46575,46576,46577,46578,46579,46580,46581,46582,46583,46584,46585,46586,46587,46588,46589,46590,46591,46592,46593,46594,46595,46596,46597,46598,46599,46600,46601,46602,46603,46604,46605,46606,46607,46610,46611,46613,46614,46615,46617,46618,46619,46620,46621,null,null,null,null,null,null,46622,46623,46624,46625,46626,46627,46628,46630,46631,46632,46633,46634,46635,46637,46638,46639,46640,46641,46642,46643,46645,46646,46647,46648,46649,46650,null,null,null,null,null,null,46651,46652,46653,46654,46655,46656,46657,46658,46659,46660,46661,46662,46663,46665,46666,46667,46668,46669,46670,46671,46672,46673,46674,46675,46676,46677,46678,46679,46680,46681,46682,46683,46684,46685,46686,46687,46688,46689,46690,46691,46693,46694,46695,46697,46698,46699,46700,46701,46702,46703,46704,46705,46706,46707,46708,46709,46710,46711,46712,46713,46714,46715,46716,46717,46718,46719,46720,46721,46722,46723,46724,46725,46726,46727,46728,46729,46730,46731,46732,46733,46734,46735,46736,46737,46738,46739,46740,46741,46742,46743,46744,46745,46746,46747,46750,46751,46753,46754,46755,46757,46758,46759,46760,46761,46762,46765,46766,46767,46768,46770,46771,46772,46773,46774,46775,46776,46777,46778,46779,46780,46781,46782,46783,46784,46785,46786,46787,46788,46789,46790,46791,46792,46793,46794,46795,46796,46797,46798,46799,46800,46801,46802,46803,46805,46806,46807,46808,46809,46810,46811,46812,46813,null,null,null,null,null,null,46814,46815,46816,46817,46818,46819,46820,46821,46822,46823,46824,46825,46826,46827,46828,46829,46830,46831,46833,46834,46835,46837,46838,46839,46841,46842,null,null,null,null,null,null,46843,46844,46845,46846,46847,46850,46851,46852,46854,46855,46856,46857,46858,46859,46860,46861,46862,46863,46864,46865,46866,46867,46868,46869,46870,46871,46872,46873,46874,46875,46876,46877,46878,46879,46880,46881,46882,46883,46884,46885,46886,46887,46890,46891,46893,46894,46897,46898,46899,46900,46901,46902,46903,46906,46908,46909,46910,46911,46912,46913,46914,46915,46917,46918,46919,46921,46922,46923,46925,46926,46927,46928,46929,46930,46931,46934,46935,46936,46937,46938,46939,46940,46941,46942,46943,46945,46946,46947,46949,46950,46951,46953,46954,46955,46956,46957,46958,46959,46962,46964,46966,46967,46968,46969,46970,46971,46974,46975,46977,46978,46979,46981,46982,46983,46984,46985,46986,46987,46990,46995,46996,46997,47002,47003,47005,47006,47007,47009,47010,47011,47012,47013,47014,47015,47018,47022,47023,47024,47025,47026,47027,47030,47031,47033,47034,47035,47036,47037,47038,47039,47040,47041,null,null,null,null,null,null,47042,47043,47044,47045,47046,47048,47050,47051,47052,47053,47054,47055,47056,47057,47058,47059,47060,47061,47062,47063,47064,47065,47066,47067,47068,47069,null,null,null,null,null,null,47070,47071,47072,47073,47074,47075,47076,47077,47078,47079,47080,47081,47082,47083,47086,47087,47089,47090,47091,47093,47094,47095,47096,47097,47098,47099,47102,47106,47107,47108,47109,47110,47114,47115,47117,47118,47119,47121,47122,47123,47124,47125,47126,47127,47130,47132,47134,47135,47136,47137,47138,47139,47142,47143,47145,47146,47147,47149,47150,47151,47152,47153,47154,47155,47158,47162,47163,47164,47165,47166,47167,47169,47170,47171,47173,47174,47175,47176,47177,47178,47179,47180,47181,47182,47183,47184,47186,47188,47189,47190,47191,47192,47193,47194,47195,47198,47199,47201,47202,47203,47205,47206,47207,47208,47209,47210,47211,47214,47216,47218,47219,47220,47221,47222,47223,47225,47226,47227,47229,47230,47231,47232,47233,47234,47235,47236,47237,47238,47239,47240,47241,47242,47243,47244,47246,47247,47248,47249,47250,47251,47252,47253,47254,47255,47256,47257,47258,47259,47260,47261,47262,47263,null,null,null,null,null,null,47264,47265,47266,47267,47268,47269,47270,47271,47273,47274,47275,47276,47277,47278,47279,47281,47282,47283,47285,47286,47287,47289,47290,47291,47292,47293,null,null,null,null,null,null,47294,47295,47298,47300,47302,47303,47304,47305,47306,47307,47309,47310,47311,47313,47314,47315,47317,47318,47319,47320,47321,47322,47323,47324,47326,47328,47330,47331,47332,47333,47334,47335,47338,47339,47341,47342,47343,47345,47346,47347,47348,47349,47350,47351,47354,47356,47358,47359,47360,47361,47362,47363,47365,47366,47367,47368,47369,47370,47371,47372,47373,47374,47375,47376,47377,47378,47379,47380,47381,47382,47383,47385,47386,47387,47388,47389,47390,47391,47393,47394,47395,47396,47397,47398,47399,47400,47401,47402,47403,47404,47405,47406,47407,47408,47409,47410,47411,47412,47413,47414,47415,47416,47417,47418,47419,47422,47423,47425,47426,47427,47429,47430,47431,47432,47433,47434,47435,47437,47438,47440,47442,47443,47444,47445,47446,47447,47450,47451,47453,47454,47455,47457,47458,47459,47460,47461,47462,47463,47466,47468,47470,47471,47472,47473,47474,47475,47478,47479,47481,47482,47483,47485,null,null,null,null,null,null,47486,47487,47488,47489,47490,47491,47494,47496,47499,47500,47503,47504,47505,47506,47507,47508,47509,47510,47511,47512,47513,47514,47515,47516,47517,47518,null,null,null,null,null,null,47519,47520,47521,47522,47523,47524,47525,47526,47527,47528,47529,47530,47531,47534,47535,47537,47538,47539,47541,47542,47543,47544,47545,47546,47547,47550,47552,47554,47555,47556,47557,47558,47559,47562,47563,47565,47571,47572,47573,47574,47575,47578,47580,47583,47584,47586,47590,47591,47593,47594,47595,47597,47598,47599,47600,47601,47602,47603,47606,47611,47612,47613,47614,47615,47618,47619,47620,47621,47622,47623,47625,47626,47627,47628,47629,47630,47631,47632,47633,47634,47635,47636,47638,47639,47640,47641,47642,47643,47644,47645,47646,47647,47648,47649,47650,47651,47652,47653,47654,47655,47656,47657,47658,47659,47660,47661,47662,47663,47664,47665,47666,47667,47668,47669,47670,47671,47674,47675,47677,47678,47679,47681,47683,47684,47685,47686,47687,47690,47692,47695,47696,47697,47698,47702,47703,47705,47706,47707,47709,47710,47711,47712,47713,47714,47715,47718,47722,47723,47724,47725,47726,47727,null,null,null,null,null,null,47730,47731,47733,47734,47735,47737,47738,47739,47740,47741,47742,47743,47744,47745,47746,47750,47752,47753,47754,47755,47757,47758,47759,47760,47761,47762,null,null,null,null,null,null,47763,47764,47765,47766,47767,47768,47769,47770,47771,47772,47773,47774,47775,47776,47777,47778,47779,47780,47781,47782,47783,47786,47789,47790,47791,47793,47795,47796,47797,47798,47799,47802,47804,47806,47807,47808,47809,47810,47811,47813,47814,47815,47817,47818,47819,47820,47821,47822,47823,47824,47825,47826,47827,47828,47829,47830,47831,47834,47835,47836,47837,47838,47839,47840,47841,47842,47843,47844,47845,47846,47847,47848,47849,47850,47851,47852,47853,47854,47855,47856,47857,47858,47859,47860,47861,47862,47863,47864,47865,47866,47867,47869,47870,47871,47873,47874,47875,47877,47878,47879,47880,47881,47882,47883,47884,47886,47888,47890,47891,47892,47893,47894,47895,47897,47898,47899,47901,47902,47903,47905,47906,47907,47908,47909,47910,47911,47912,47914,47916,47917,47918,47919,47920,47921,47922,47923,47927,47929,47930,47935,47936,47937,47938,47939,47942,47944,47946,47947,47948,47950,47953,47954,null,null,null,null,null,null,47955,47957,47958,47959,47961,47962,47963,47964,47965,47966,47967,47968,47970,47972,47973,47974,47975,47976,47977,47978,47979,47981,47982,47983,47984,47985,null,null,null,null,null,null,47986,47987,47988,47989,47990,47991,47992,47993,47994,47995,47996,47997,47998,47999,48e3,48001,48002,48003,48004,48005,48006,48007,48009,48010,48011,48013,48014,48015,48017,48018,48019,48020,48021,48022,48023,48024,48025,48026,48027,48028,48029,48030,48031,48032,48033,48034,48035,48037,48038,48039,48041,48042,48043,48045,48046,48047,48048,48049,48050,48051,48053,48054,48056,48057,48058,48059,48060,48061,48062,48063,48065,48066,48067,48069,48070,48071,48073,48074,48075,48076,48077,48078,48079,48081,48082,48084,48085,48086,48087,48088,48089,48090,48091,48092,48093,48094,48095,48096,48097,48098,48099,48100,48101,48102,48103,48104,48105,48106,48107,48108,48109,48110,48111,48112,48113,48114,48115,48116,48117,48118,48119,48122,48123,48125,48126,48129,48131,48132,48133,48134,48135,48138,48142,48144,48146,48147,48153,48154,48160,48161,48162,48163,48166,48168,48170,48171,48172,48174,48175,48178,48179,48181,null,null,null,null,null,null,48182,48183,48185,48186,48187,48188,48189,48190,48191,48194,48198,48199,48200,48202,48203,48206,48207,48209,48210,48211,48212,48213,48214,48215,48216,48217,null,null,null,null,null,null,48218,48219,48220,48222,48223,48224,48225,48226,48227,48228,48229,48230,48231,48232,48233,48234,48235,48236,48237,48238,48239,48240,48241,48242,48243,48244,48245,48246,48247,48248,48249,48250,48251,48252,48253,48254,48255,48256,48257,48258,48259,48262,48263,48265,48266,48269,48271,48272,48273,48274,48275,48278,48280,48283,48284,48285,48286,48287,48290,48291,48293,48294,48297,48298,48299,48300,48301,48302,48303,48306,48310,48311,48312,48313,48314,48315,48318,48319,48321,48322,48323,48325,48326,48327,48328,48329,48330,48331,48332,48334,48338,48339,48340,48342,48343,48345,48346,48347,48349,48350,48351,48352,48353,48354,48355,48356,48357,48358,48359,48360,48361,48362,48363,48364,48365,48366,48367,48368,48369,48370,48371,48375,48377,48378,48379,48381,48382,48383,48384,48385,48386,48387,48390,48392,48394,48395,48396,48397,48398,48399,48401,48402,48403,48405,48406,48407,48408,48409,48410,48411,48412,48413,null,null,null,null,null,null,48414,48415,48416,48417,48418,48419,48421,48422,48423,48424,48425,48426,48427,48429,48430,48431,48432,48433,48434,48435,48436,48437,48438,48439,48440,48441,null,null,null,null,null,null,48442,48443,48444,48445,48446,48447,48449,48450,48451,48452,48453,48454,48455,48458,48459,48461,48462,48463,48465,48466,48467,48468,48469,48470,48471,48474,48475,48476,48477,48478,48479,48480,48481,48482,48483,48485,48486,48487,48489,48490,48491,48492,48493,48494,48495,48496,48497,48498,48499,48500,48501,48502,48503,48504,48505,48506,48507,48508,48509,48510,48511,48514,48515,48517,48518,48523,48524,48525,48526,48527,48530,48532,48534,48535,48536,48539,48541,48542,48543,48544,48545,48546,48547,48549,48550,48551,48552,48553,48554,48555,48556,48557,48558,48559,48561,48562,48563,48564,48565,48566,48567,48569,48570,48571,48572,48573,48574,48575,48576,48577,48578,48579,48580,48581,48582,48583,48584,48585,48586,48587,48588,48589,48590,48591,48592,48593,48594,48595,48598,48599,48601,48602,48603,48605,48606,48607,48608,48609,48610,48611,48612,48613,48614,48615,48616,48618,48619,48620,48621,48622,48623,48625,null,null,null,null,null,null,48626,48627,48629,48630,48631,48633,48634,48635,48636,48637,48638,48639,48641,48642,48644,48646,48647,48648,48649,48650,48651,48654,48655,48657,48658,48659,null,null,null,null,null,null,48661,48662,48663,48664,48665,48666,48667,48670,48672,48673,48674,48675,48676,48677,48678,48679,48680,48681,48682,48683,48684,48685,48686,48687,48688,48689,48690,48691,48692,48693,48694,48695,48696,48697,48698,48699,48700,48701,48702,48703,48704,48705,48706,48707,48710,48711,48713,48714,48715,48717,48719,48720,48721,48722,48723,48726,48728,48732,48733,48734,48735,48738,48739,48741,48742,48743,48745,48747,48748,48749,48750,48751,48754,48758,48759,48760,48761,48762,48766,48767,48769,48770,48771,48773,48774,48775,48776,48777,48778,48779,48782,48786,48787,48788,48789,48790,48791,48794,48795,48796,48797,48798,48799,48800,48801,48802,48803,48804,48805,48806,48807,48809,48810,48811,48812,48813,48814,48815,48816,48817,48818,48819,48820,48821,48822,48823,48824,48825,48826,48827,48828,48829,48830,48831,48832,48833,48834,48835,48836,48837,48838,48839,48840,48841,48842,48843,48844,48845,48846,48847,48850,48851,null,null,null,null,null,null,48853,48854,48857,48858,48859,48860,48861,48862,48863,48865,48866,48870,48871,48872,48873,48874,48875,48877,48878,48879,48880,48881,48882,48883,48884,48885,null,null,null,null,null,null,48886,48887,48888,48889,48890,48891,48892,48893,48894,48895,48896,48898,48899,48900,48901,48902,48903,48906,48907,48908,48909,48910,48911,48912,48913,48914,48915,48916,48917,48918,48919,48922,48926,48927,48928,48929,48930,48931,48932,48933,48934,48935,48936,48937,48938,48939,48940,48941,48942,48943,48944,48945,48946,48947,48948,48949,48950,48951,48952,48953,48954,48955,48956,48957,48958,48959,48962,48963,48965,48966,48967,48969,48970,48971,48972,48973,48974,48975,48978,48979,48980,48982,48983,48984,48985,48986,48987,48988,48989,48990,48991,48992,48993,48994,48995,48996,48997,48998,48999,49e3,49001,49002,49003,49004,49005,49006,49007,49008,49009,49010,49011,49012,49013,49014,49015,49016,49017,49018,49019,49020,49021,49022,49023,49024,49025,49026,49027,49028,49029,49030,49031,49032,49033,49034,49035,49036,49037,49038,49039,49040,49041,49042,49043,49045,49046,49047,49048,49049,49050,49051,49052,49053,null,null,null,null,null,null,49054,49055,49056,49057,49058,49059,49060,49061,49062,49063,49064,49065,49066,49067,49068,49069,49070,49071,49073,49074,49075,49076,49077,49078,49079,49080,null,null,null,null,null,null,49081,49082,49083,49084,49085,49086,49087,49088,49089,49090,49091,49092,49094,49095,49096,49097,49098,49099,49102,49103,49105,49106,49107,49109,49110,49111,49112,49113,49114,49115,49117,49118,49120,49122,49123,49124,49125,49126,49127,49128,49129,49130,49131,49132,49133,49134,49135,49136,49137,49138,49139,49140,49141,49142,49143,49144,49145,49146,49147,49148,49149,49150,49151,49152,49153,49154,49155,49156,49157,49158,49159,49160,49161,49162,49163,49164,49165,49166,49167,49168,49169,49170,49171,49172,49173,49174,49175,49176,49177,49178,49179,49180,49181,49182,49183,49184,49185,49186,49187,49188,49189,49190,49191,49192,49193,49194,49195,49196,49197,49198,49199,49200,49201,49202,49203,49204,49205,49206,49207,49208,49209,49210,49211,49213,49214,49215,49216,49217,49218,49219,49220,49221,49222,49223,49224,49225,49226,49227,49228,49229,49230,49231,49232,49234,49235,49236,49237,49238,49239,49241,49242,49243,null,null,null,null,null,null,49245,49246,49247,49249,49250,49251,49252,49253,49254,49255,49258,49259,49260,49261,49262,49263,49264,49265,49266,49267,49268,49269,49270,49271,49272,49273,null,null,null,null,null,null,49274,49275,49276,49277,49278,49279,49280,49281,49282,49283,49284,49285,49286,49287,49288,49289,49290,49291,49292,49293,49294,49295,49298,49299,49301,49302,49303,49305,49306,49307,49308,49309,49310,49311,49314,49316,49318,49319,49320,49321,49322,49323,49326,49329,49330,49335,49336,49337,49338,49339,49342,49346,49347,49348,49350,49351,49354,49355,49357,49358,49359,49361,49362,49363,49364,49365,49366,49367,49370,49374,49375,49376,49377,49378,49379,49382,49383,49385,49386,49387,49389,49390,49391,49392,49393,49394,49395,49398,49400,49402,49403,49404,49405,49406,49407,49409,49410,49411,49413,49414,49415,49417,49418,49419,49420,49421,49422,49423,49425,49426,49427,49428,49430,49431,49432,49433,49434,49435,49441,49442,49445,49448,49449,49450,49451,49454,49458,49459,49460,49461,49463,49466,49467,49469,49470,49471,49473,49474,49475,49476,49477,49478,49479,49482,49486,49487,49488,49489,49490,49491,49494,49495,null,null,null,null,null,null,49497,49498,49499,49501,49502,49503,49504,49505,49506,49507,49510,49514,49515,49516,49517,49518,49519,49521,49522,49523,49525,49526,49527,49529,49530,49531,null,null,null,null,null,null,49532,49533,49534,49535,49536,49537,49538,49539,49540,49542,49543,49544,49545,49546,49547,49551,49553,49554,49555,49557,49559,49560,49561,49562,49563,49566,49568,49570,49571,49572,49574,49575,49578,49579,49581,49582,49583,49585,49586,49587,49588,49589,49590,49591,49592,49593,49594,49595,49596,49598,49599,49600,49601,49602,49603,49605,49606,49607,49609,49610,49611,49613,49614,49615,49616,49617,49618,49619,49621,49622,49625,49626,49627,49628,49629,49630,49631,49633,49634,49635,49637,49638,49639,49641,49642,49643,49644,49645,49646,49647,49650,49652,49653,49654,49655,49656,49657,49658,49659,49662,49663,49665,49666,49667,49669,49670,49671,49672,49673,49674,49675,49678,49680,49682,49683,49684,49685,49686,49687,49690,49691,49693,49694,49697,49698,49699,49700,49701,49702,49703,49706,49708,49710,49712,49715,49717,49718,49719,49720,49721,49722,49723,49724,49725,49726,49727,49728,49729,49730,49731,49732,49733,null,null,null,null,null,null,49734,49735,49737,49738,49739,49740,49741,49742,49743,49746,49747,49749,49750,49751,49753,49754,49755,49756,49757,49758,49759,49761,49762,49763,49764,49766,null,null,null,null,null,null,49767,49768,49769,49770,49771,49774,49775,49777,49778,49779,49781,49782,49783,49784,49785,49786,49787,49790,49792,49794,49795,49796,49797,49798,49799,49802,49803,49804,49805,49806,49807,49809,49810,49811,49812,49813,49814,49815,49817,49818,49820,49822,49823,49824,49825,49826,49827,49830,49831,49833,49834,49835,49838,49839,49840,49841,49842,49843,49846,49848,49850,49851,49852,49853,49854,49855,49856,49857,49858,49859,49860,49861,49862,49863,49864,49865,49866,49867,49868,49869,49870,49871,49872,49873,49874,49875,49876,49877,49878,49879,49880,49881,49882,49883,49886,49887,49889,49890,49893,49894,49895,49896,49897,49898,49902,49904,49906,49907,49908,49909,49911,49914,49917,49918,49919,49921,49922,49923,49924,49925,49926,49927,49930,49931,49934,49935,49936,49937,49938,49942,49943,49945,49946,49947,49949,49950,49951,49952,49953,49954,49955,49958,49959,49962,49963,49964,49965,49966,49967,49968,49969,49970,null,null,null,null,null,null,49971,49972,49973,49974,49975,49976,49977,49978,49979,49980,49981,49982,49983,49984,49985,49986,49987,49988,49990,49991,49992,49993,49994,49995,49996,49997,null,null,null,null,null,null,49998,49999,5e4,50001,50002,50003,50004,50005,50006,50007,50008,50009,50010,50011,50012,50013,50014,50015,50016,50017,50018,50019,50020,50021,50022,50023,50026,50027,50029,50030,50031,50033,50035,50036,50037,50038,50039,50042,50043,50046,50047,50048,50049,50050,50051,50053,50054,50055,50057,50058,50059,50061,50062,50063,50064,50065,50066,50067,50068,50069,50070,50071,50072,50073,50074,50075,50076,50077,50078,50079,50080,50081,50082,50083,50084,50085,50086,50087,50088,50089,50090,50091,50092,50093,50094,50095,50096,50097,50098,50099,50100,50101,50102,50103,50104,50105,50106,50107,50108,50109,50110,50111,50113,50114,50115,50116,50117,50118,50119,50120,50121,50122,50123,50124,50125,50126,50127,50128,50129,50130,50131,50132,50133,50134,50135,50138,50139,50141,50142,50145,50147,50148,50149,50150,50151,50154,50155,50156,50158,50159,50160,50161,50162,50163,50166,50167,50169,50170,50171,50172,50173,50174,null,null,null,null,null,null,50175,50176,50177,50178,50179,50180,50181,50182,50183,50185,50186,50187,50188,50189,50190,50191,50193,50194,50195,50196,50197,50198,50199,50200,50201,50202,null,null,null,null,null,null,50203,50204,50205,50206,50207,50208,50209,50210,50211,50213,50214,50215,50216,50217,50218,50219,50221,50222,50223,50225,50226,50227,50229,50230,50231,50232,50233,50234,50235,50238,50239,50240,50241,50242,50243,50244,50245,50246,50247,50249,50250,50251,50252,50253,50254,50255,50256,50257,50258,50259,50260,50261,50262,50263,50264,50265,50266,50267,50268,50269,50270,50271,50272,50273,50274,50275,50278,50279,50281,50282,50283,50285,50286,50287,50288,50289,50290,50291,50294,50295,50296,50298,50299,50300,50301,50302,50303,50305,50306,50307,50308,50309,50310,50311,50312,50313,50314,50315,50316,50317,50318,50319,50320,50321,50322,50323,50325,50326,50327,50328,50329,50330,50331,50333,50334,50335,50336,50337,50338,50339,50340,50341,50342,50343,50344,50345,50346,50347,50348,50349,50350,50351,50352,50353,50354,50355,50356,50357,50358,50359,50361,50362,50363,50365,50366,50367,50368,50369,50370,50371,50372,50373,null,null,null,null,null,null,50374,50375,50376,50377,50378,50379,50380,50381,50382,50383,50384,50385,50386,50387,50388,50389,50390,50391,50392,50393,50394,50395,50396,50397,50398,50399,null,null,null,null,null,null,50400,50401,50402,50403,50404,50405,50406,50407,50408,50410,50411,50412,50413,50414,50415,50418,50419,50421,50422,50423,50425,50427,50428,50429,50430,50434,50435,50436,50437,50438,50439,50440,50441,50442,50443,50445,50446,50447,50449,50450,50451,50453,50454,50455,50456,50457,50458,50459,50461,50462,50463,50464,50465,50466,50467,50468,50469,50470,50471,50474,50475,50477,50478,50479,50481,50482,50483,50484,50485,50486,50487,50490,50492,50494,50495,50496,50497,50498,50499,50502,50503,50507,50511,50512,50513,50514,50518,50522,50523,50524,50527,50530,50531,50533,50534,50535,50537,50538,50539,50540,50541,50542,50543,50546,50550,50551,50552,50553,50554,50555,50558,50559,50561,50562,50563,50565,50566,50568,50569,50570,50571,50574,50576,50578,50579,50580,50582,50585,50586,50587,50589,50590,50591,50593,50594,50595,50596,50597,50598,50599,50600,50602,50603,50604,50605,50606,50607,50608,50609,50610,50611,50614,null,null,null,null,null,null,50615,50618,50623,50624,50625,50626,50627,50635,50637,50639,50642,50643,50645,50646,50647,50649,50650,50651,50652,50653,50654,50655,50658,50660,50662,50663,null,null,null,null,null,null,50664,50665,50666,50667,50671,50673,50674,50675,50677,50680,50681,50682,50683,50690,50691,50692,50697,50698,50699,50701,50702,50703,50705,50706,50707,50708,50709,50710,50711,50714,50717,50718,50719,50720,50721,50722,50723,50726,50727,50729,50730,50731,50735,50737,50738,50742,50744,50746,50748,50749,50750,50751,50754,50755,50757,50758,50759,50761,50762,50763,50764,50765,50766,50767,50770,50774,50775,50776,50777,50778,50779,50782,50783,50785,50786,50787,50788,50789,50790,50791,50792,50793,50794,50795,50797,50798,50800,50802,50803,50804,50805,50806,50807,50810,50811,50813,50814,50815,50817,50818,50819,50820,50821,50822,50823,50826,50828,50830,50831,50832,50833,50834,50835,50838,50839,50841,50842,50843,50845,50846,50847,50848,50849,50850,50851,50854,50856,50858,50859,50860,50861,50862,50863,50866,50867,50869,50870,50871,50875,50876,50877,50878,50879,50882,50884,50886,50887,50888,50889,50890,50891,50894,null,null,null,null,null,null,50895,50897,50898,50899,50901,50902,50903,50904,50905,50906,50907,50910,50911,50914,50915,50916,50917,50918,50919,50922,50923,50925,50926,50927,50929,50930,null,null,null,null,null,null,50931,50932,50933,50934,50935,50938,50939,50940,50942,50943,50944,50945,50946,50947,50950,50951,50953,50954,50955,50957,50958,50959,50960,50961,50962,50963,50966,50968,50970,50971,50972,50973,50974,50975,50978,50979,50981,50982,50983,50985,50986,50987,50988,50989,50990,50991,50994,50996,50998,51e3,51001,51002,51003,51006,51007,51009,51010,51011,51013,51014,51015,51016,51017,51019,51022,51024,51033,51034,51035,51037,51038,51039,51041,51042,51043,51044,51045,51046,51047,51049,51050,51052,51053,51054,51055,51056,51057,51058,51059,51062,51063,51065,51066,51067,51071,51072,51073,51074,51078,51083,51084,51085,51087,51090,51091,51093,51097,51099,51100,51101,51102,51103,51106,51111,51112,51113,51114,51115,51118,51119,51121,51122,51123,51125,51126,51127,51128,51129,51130,51131,51134,51138,51139,51140,51141,51142,51143,51146,51147,51149,51151,51153,51154,51155,51156,51157,51158,51159,51161,51162,51163,51164,null,null,null,null,null,null,51166,51167,51168,51169,51170,51171,51173,51174,51175,51177,51178,51179,51181,51182,51183,51184,51185,51186,51187,51188,51189,51190,51191,51192,51193,51194,null,null,null,null,null,null,51195,51196,51197,51198,51199,51202,51203,51205,51206,51207,51209,51211,51212,51213,51214,51215,51218,51220,51223,51224,51225,51226,51227,51230,51231,51233,51234,51235,51237,51238,51239,51240,51241,51242,51243,51246,51248,51250,51251,51252,51253,51254,51255,51257,51258,51259,51261,51262,51263,51265,51266,51267,51268,51269,51270,51271,51274,51275,51278,51279,51280,51281,51282,51283,51285,51286,51287,51288,51289,51290,51291,51292,51293,51294,51295,51296,51297,51298,51299,51300,51301,51302,51303,51304,51305,51306,51307,51308,51309,51310,51311,51314,51315,51317,51318,51319,51321,51323,51324,51325,51326,51327,51330,51332,51336,51337,51338,51342,51343,51344,51345,51346,51347,51349,51350,51351,51352,51353,51354,51355,51356,51358,51360,51362,51363,51364,51365,51366,51367,51369,51370,51371,51372,51373,51374,51375,51376,51377,51378,51379,51380,51381,51382,51383,51384,51385,51386,51387,51390,51391,51392,51393,null,null,null,null,null,null,51394,51395,51397,51398,51399,51401,51402,51403,51405,51406,51407,51408,51409,51410,51411,51414,51416,51418,51419,51420,51421,51422,51423,51426,51427,51429,null,null,null,null,null,null,51430,51431,51432,51433,51434,51435,51436,51437,51438,51439,51440,51441,51442,51443,51444,51446,51447,51448,51449,51450,51451,51454,51455,51457,51458,51459,51463,51464,51465,51466,51467,51470,12288,12289,12290,183,8229,8230,168,12291,173,8213,8741,65340,8764,8216,8217,8220,8221,12308,12309,12296,12297,12298,12299,12300,12301,12302,12303,12304,12305,177,215,247,8800,8804,8805,8734,8756,176,8242,8243,8451,8491,65504,65505,65509,9794,9792,8736,8869,8978,8706,8711,8801,8786,167,8251,9734,9733,9675,9679,9678,9671,9670,9633,9632,9651,9650,9661,9660,8594,8592,8593,8595,8596,12307,8810,8811,8730,8765,8733,8757,8747,8748,8712,8715,8838,8839,8834,8835,8746,8745,8743,8744,65506,51472,51474,51475,51476,51477,51478,51479,51481,51482,51483,51484,51485,51486,51487,51488,51489,51490,51491,51492,51493,51494,51495,51496,51497,51498,51499,null,null,null,null,null,null,51501,51502,51503,51504,51505,51506,51507,51509,51510,51511,51512,51513,51514,51515,51516,51517,51518,51519,51520,51521,51522,51523,51524,51525,51526,51527,null,null,null,null,null,null,51528,51529,51530,51531,51532,51533,51534,51535,51538,51539,51541,51542,51543,51545,51546,51547,51548,51549,51550,51551,51554,51556,51557,51558,51559,51560,51561,51562,51563,51565,51566,51567,8658,8660,8704,8707,180,65374,711,728,733,730,729,184,731,161,191,720,8750,8721,8719,164,8457,8240,9665,9664,9655,9654,9828,9824,9825,9829,9831,9827,8857,9672,9635,9680,9681,9618,9636,9637,9640,9639,9638,9641,9832,9743,9742,9756,9758,182,8224,8225,8597,8599,8601,8598,8600,9837,9833,9834,9836,12927,12828,8470,13255,8482,13250,13272,8481,8364,174,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,51569,51570,51571,51573,51574,51575,51576,51577,51578,51579,51581,51582,51583,51584,51585,51586,51587,51588,51589,51590,51591,51594,51595,51597,51598,51599,null,null,null,null,null,null,51601,51602,51603,51604,51605,51606,51607,51610,51612,51614,51615,51616,51617,51618,51619,51620,51621,51622,51623,51624,51625,51626,51627,51628,51629,51630,null,null,null,null,null,null,51631,51632,51633,51634,51635,51636,51637,51638,51639,51640,51641,51642,51643,51644,51645,51646,51647,51650,51651,51653,51654,51657,51659,51660,51661,51662,51663,51666,51668,51671,51672,51675,65281,65282,65283,65284,65285,65286,65287,65288,65289,65290,65291,65292,65293,65294,65295,65296,65297,65298,65299,65300,65301,65302,65303,65304,65305,65306,65307,65308,65309,65310,65311,65312,65313,65314,65315,65316,65317,65318,65319,65320,65321,65322,65323,65324,65325,65326,65327,65328,65329,65330,65331,65332,65333,65334,65335,65336,65337,65338,65339,65510,65341,65342,65343,65344,65345,65346,65347,65348,65349,65350,65351,65352,65353,65354,65355,65356,65357,65358,65359,65360,65361,65362,65363,65364,65365,65366,65367,65368,65369,65370,65371,65372,65373,65507,51678,51679,51681,51683,51685,51686,51688,51689,51690,51691,51694,51698,51699,51700,51701,51702,51703,51706,51707,51709,51710,51711,51713,51714,51715,51716,null,null,null,null,null,null,51717,51718,51719,51722,51726,51727,51728,51729,51730,51731,51733,51734,51735,51737,51738,51739,51740,51741,51742,51743,51744,51745,51746,51747,51748,51749,null,null,null,null,null,null,51750,51751,51752,51754,51755,51756,51757,51758,51759,51760,51761,51762,51763,51764,51765,51766,51767,51768,51769,51770,51771,51772,51773,51774,51775,51776,51777,51778,51779,51780,51781,51782,12593,12594,12595,12596,12597,12598,12599,12600,12601,12602,12603,12604,12605,12606,12607,12608,12609,12610,12611,12612,12613,12614,12615,12616,12617,12618,12619,12620,12621,12622,12623,12624,12625,12626,12627,12628,12629,12630,12631,12632,12633,12634,12635,12636,12637,12638,12639,12640,12641,12642,12643,12644,12645,12646,12647,12648,12649,12650,12651,12652,12653,12654,12655,12656,12657,12658,12659,12660,12661,12662,12663,12664,12665,12666,12667,12668,12669,12670,12671,12672,12673,12674,12675,12676,12677,12678,12679,12680,12681,12682,12683,12684,12685,12686,51783,51784,51785,51786,51787,51790,51791,51793,51794,51795,51797,51798,51799,51800,51801,51802,51803,51806,51810,51811,51812,51813,51814,51815,51817,51818,null,null,null,null,null,null,51819,51820,51821,51822,51823,51824,51825,51826,51827,51828,51829,51830,51831,51832,51833,51834,51835,51836,51838,51839,51840,51841,51842,51843,51845,51846,null,null,null,null,null,null,51847,51848,51849,51850,51851,51852,51853,51854,51855,51856,51857,51858,51859,51860,51861,51862,51863,51865,51866,51867,51868,51869,51870,51871,51872,51873,51874,51875,51876,51877,51878,51879,8560,8561,8562,8563,8564,8565,8566,8567,8568,8569,null,null,null,null,null,8544,8545,8546,8547,8548,8549,8550,8551,8552,8553,null,null,null,null,null,null,null,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,931,932,933,934,935,936,937,null,null,null,null,null,null,null,null,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,963,964,965,966,967,968,969,null,null,null,null,null,null,51880,51881,51882,51883,51884,51885,51886,51887,51888,51889,51890,51891,51892,51893,51894,51895,51896,51897,51898,51899,51902,51903,51905,51906,51907,51909,null,null,null,null,null,null,51910,51911,51912,51913,51914,51915,51918,51920,51922,51924,51925,51926,51927,51930,51931,51932,51933,51934,51935,51937,51938,51939,51940,51941,51942,51943,null,null,null,null,null,null,51944,51945,51946,51947,51949,51950,51951,51952,51953,51954,51955,51957,51958,51959,51960,51961,51962,51963,51964,51965,51966,51967,51968,51969,51970,51971,51972,51973,51974,51975,51977,51978,9472,9474,9484,9488,9496,9492,9500,9516,9508,9524,9532,9473,9475,9487,9491,9499,9495,9507,9523,9515,9531,9547,9504,9519,9512,9527,9535,9501,9520,9509,9528,9538,9490,9489,9498,9497,9494,9493,9486,9485,9502,9503,9505,9506,9510,9511,9513,9514,9517,9518,9521,9522,9525,9526,9529,9530,9533,9534,9536,9537,9539,9540,9541,9542,9543,9544,9545,9546,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,51979,51980,51981,51982,51983,51985,51986,51987,51989,51990,51991,51993,51994,51995,51996,51997,51998,51999,52002,52003,52004,52005,52006,52007,52008,52009,null,null,null,null,null,null,52010,52011,52012,52013,52014,52015,52016,52017,52018,52019,52020,52021,52022,52023,52024,52025,52026,52027,52028,52029,52030,52031,52032,52034,52035,52036,null,null,null,null,null,null,52037,52038,52039,52042,52043,52045,52046,52047,52049,52050,52051,52052,52053,52054,52055,52058,52059,52060,52062,52063,52064,52065,52066,52067,52069,52070,52071,52072,52073,52074,52075,52076,13205,13206,13207,8467,13208,13252,13219,13220,13221,13222,13209,13210,13211,13212,13213,13214,13215,13216,13217,13218,13258,13197,13198,13199,13263,13192,13193,13256,13223,13224,13232,13233,13234,13235,13236,13237,13238,13239,13240,13241,13184,13185,13186,13187,13188,13242,13243,13244,13245,13246,13247,13200,13201,13202,13203,13204,8486,13248,13249,13194,13195,13196,13270,13253,13229,13230,13231,13275,13225,13226,13227,13228,13277,13264,13267,13251,13257,13276,13254,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,52077,52078,52079,52080,52081,52082,52083,52084,52085,52086,52087,52090,52091,52092,52093,52094,52095,52096,52097,52098,52099,52100,52101,52102,52103,52104,null,null,null,null,null,null,52105,52106,52107,52108,52109,52110,52111,52112,52113,52114,52115,52116,52117,52118,52119,52120,52121,52122,52123,52125,52126,52127,52128,52129,52130,52131,null,null,null,null,null,null,52132,52133,52134,52135,52136,52137,52138,52139,52140,52141,52142,52143,52144,52145,52146,52147,52148,52149,52150,52151,52153,52154,52155,52156,52157,52158,52159,52160,52161,52162,52163,52164,198,208,170,294,null,306,null,319,321,216,338,186,222,358,330,null,12896,12897,12898,12899,12900,12901,12902,12903,12904,12905,12906,12907,12908,12909,12910,12911,12912,12913,12914,12915,12916,12917,12918,12919,12920,12921,12922,12923,9424,9425,9426,9427,9428,9429,9430,9431,9432,9433,9434,9435,9436,9437,9438,9439,9440,9441,9442,9443,9444,9445,9446,9447,9448,9449,9312,9313,9314,9315,9316,9317,9318,9319,9320,9321,9322,9323,9324,9325,9326,189,8531,8532,188,190,8539,8540,8541,8542,52165,52166,52167,52168,52169,52170,52171,52172,52173,52174,52175,52176,52177,52178,52179,52181,52182,52183,52184,52185,52186,52187,52188,52189,52190,52191,null,null,null,null,null,null,52192,52193,52194,52195,52197,52198,52200,52202,52203,52204,52205,52206,52207,52208,52209,52210,52211,52212,52213,52214,52215,52216,52217,52218,52219,52220,null,null,null,null,null,null,52221,52222,52223,52224,52225,52226,52227,52228,52229,52230,52231,52232,52233,52234,52235,52238,52239,52241,52242,52243,52245,52246,52247,52248,52249,52250,52251,52254,52255,52256,52259,52260,230,273,240,295,305,307,312,320,322,248,339,223,254,359,331,329,12800,12801,12802,12803,12804,12805,12806,12807,12808,12809,12810,12811,12812,12813,12814,12815,12816,12817,12818,12819,12820,12821,12822,12823,12824,12825,12826,12827,9372,9373,9374,9375,9376,9377,9378,9379,9380,9381,9382,9383,9384,9385,9386,9387,9388,9389,9390,9391,9392,9393,9394,9395,9396,9397,9332,9333,9334,9335,9336,9337,9338,9339,9340,9341,9342,9343,9344,9345,9346,185,178,179,8308,8319,8321,8322,8323,8324,52261,52262,52266,52267,52269,52271,52273,52274,52275,52276,52277,52278,52279,52282,52287,52288,52289,52290,52291,52294,52295,52297,52298,52299,52301,52302,null,null,null,null,null,null,52303,52304,52305,52306,52307,52310,52314,52315,52316,52317,52318,52319,52321,52322,52323,52325,52327,52329,52330,52331,52332,52333,52334,52335,52337,52338,null,null,null,null,null,null,52339,52340,52342,52343,52344,52345,52346,52347,52348,52349,52350,52351,52352,52353,52354,52355,52356,52357,52358,52359,52360,52361,52362,52363,52364,52365,52366,52367,52368,52369,52370,52371,12353,12354,12355,12356,12357,12358,12359,12360,12361,12362,12363,12364,12365,12366,12367,12368,12369,12370,12371,12372,12373,12374,12375,12376,12377,12378,12379,12380,12381,12382,12383,12384,12385,12386,12387,12388,12389,12390,12391,12392,12393,12394,12395,12396,12397,12398,12399,12400,12401,12402,12403,12404,12405,12406,12407,12408,12409,12410,12411,12412,12413,12414,12415,12416,12417,12418,12419,12420,12421,12422,12423,12424,12425,12426,12427,12428,12429,12430,12431,12432,12433,12434,12435,null,null,null,null,null,null,null,null,null,null,null,52372,52373,52374,52375,52378,52379,52381,52382,52383,52385,52386,52387,52388,52389,52390,52391,52394,52398,52399,52400,52401,52402,52403,52406,52407,52409,null,null,null,null,null,null,52410,52411,52413,52414,52415,52416,52417,52418,52419,52422,52424,52426,52427,52428,52429,52430,52431,52433,52434,52435,52437,52438,52439,52440,52441,52442,null,null,null,null,null,null,52443,52444,52445,52446,52447,52448,52449,52450,52451,52453,52454,52455,52456,52457,52458,52459,52461,52462,52463,52465,52466,52467,52468,52469,52470,52471,52472,52473,52474,52475,52476,52477,12449,12450,12451,12452,12453,12454,12455,12456,12457,12458,12459,12460,12461,12462,12463,12464,12465,12466,12467,12468,12469,12470,12471,12472,12473,12474,12475,12476,12477,12478,12479,12480,12481,12482,12483,12484,12485,12486,12487,12488,12489,12490,12491,12492,12493,12494,12495,12496,12497,12498,12499,12500,12501,12502,12503,12504,12505,12506,12507,12508,12509,12510,12511,12512,12513,12514,12515,12516,12517,12518,12519,12520,12521,12522,12523,12524,12525,12526,12527,12528,12529,12530,12531,12532,12533,12534,null,null,null,null,null,null,null,null,52478,52479,52480,52482,52483,52484,52485,52486,52487,52490,52491,52493,52494,52495,52497,52498,52499,52500,52501,52502,52503,52506,52508,52510,52511,52512,null,null,null,null,null,null,52513,52514,52515,52517,52518,52519,52521,52522,52523,52525,52526,52527,52528,52529,52530,52531,52532,52533,52534,52535,52536,52538,52539,52540,52541,52542,null,null,null,null,null,null,52543,52544,52545,52546,52547,52548,52549,52550,52551,52552,52553,52554,52555,52556,52557,52558,52559,52560,52561,52562,52563,52564,52565,52566,52567,52568,52569,52570,52571,52573,52574,52575,1040,1041,1042,1043,1044,1045,1025,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1072,1073,1074,1075,1076,1077,1105,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,null,null,null,null,null,null,null,null,null,null,null,null,null,52577,52578,52579,52581,52582,52583,52584,52585,52586,52587,52590,52592,52594,52595,52596,52597,52598,52599,52601,52602,52603,52604,52605,52606,52607,52608,null,null,null,null,null,null,52609,52610,52611,52612,52613,52614,52615,52617,52618,52619,52620,52621,52622,52623,52624,52625,52626,52627,52630,52631,52633,52634,52635,52637,52638,52639,null,null,null,null,null,null,52640,52641,52642,52643,52646,52648,52650,52651,52652,52653,52654,52655,52657,52658,52659,52660,52661,52662,52663,52664,52665,52666,52667,52668,52669,52670,52671,52672,52673,52674,52675,52677,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,52678,52679,52680,52681,52682,52683,52685,52686,52687,52689,52690,52691,52692,52693,52694,52695,52696,52697,52698,52699,52700,52701,52702,52703,52704,52705,null,null,null,null,null,null,52706,52707,52708,52709,52710,52711,52713,52714,52715,52717,52718,52719,52721,52722,52723,52724,52725,52726,52727,52730,52732,52734,52735,52736,52737,52738,null,null,null,null,null,null,52739,52741,52742,52743,52745,52746,52747,52749,52750,52751,52752,52753,52754,52755,52757,52758,52759,52760,52762,52763,52764,52765,52766,52767,52770,52771,52773,52774,52775,52777,52778,52779,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,52780,52781,52782,52783,52786,52788,52790,52791,52792,52793,52794,52795,52796,52797,52798,52799,52800,52801,52802,52803,52804,52805,52806,52807,52808,52809,null,null,null,null,null,null,52810,52811,52812,52813,52814,52815,52816,52817,52818,52819,52820,52821,52822,52823,52826,52827,52829,52830,52834,52835,52836,52837,52838,52839,52842,52844,null,null,null,null,null,null,52846,52847,52848,52849,52850,52851,52854,52855,52857,52858,52859,52861,52862,52863,52864,52865,52866,52867,52870,52872,52874,52875,52876,52877,52878,52879,52882,52883,52885,52886,52887,52889,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,52890,52891,52892,52893,52894,52895,52898,52902,52903,52904,52905,52906,52907,52910,52911,52912,52913,52914,52915,52916,52917,52918,52919,52920,52921,52922,null,null,null,null,null,null,52923,52924,52925,52926,52927,52928,52930,52931,52932,52933,52934,52935,52936,52937,52938,52939,52940,52941,52942,52943,52944,52945,52946,52947,52948,52949,null,null,null,null,null,null,52950,52951,52952,52953,52954,52955,52956,52957,52958,52959,52960,52961,52962,52963,52966,52967,52969,52970,52973,52974,52975,52976,52977,52978,52979,52982,52986,52987,52988,52989,52990,52991,44032,44033,44036,44039,44040,44041,44042,44048,44049,44050,44051,44052,44053,44054,44055,44057,44058,44059,44060,44061,44064,44068,44076,44077,44079,44080,44081,44088,44089,44092,44096,44107,44109,44116,44120,44124,44144,44145,44148,44151,44152,44154,44160,44161,44163,44164,44165,44166,44169,44170,44171,44172,44176,44180,44188,44189,44191,44192,44193,44200,44201,44202,44204,44207,44208,44216,44217,44219,44220,44221,44225,44228,44232,44236,44245,44247,44256,44257,44260,44263,44264,44266,44268,44271,44272,44273,44275,44277,44278,44284,44285,44288,44292,44294,52994,52995,52997,52998,52999,53001,53002,53003,53004,53005,53006,53007,53010,53012,53014,53015,53016,53017,53018,53019,53021,53022,53023,53025,53026,53027,null,null,null,null,null,null,53029,53030,53031,53032,53033,53034,53035,53038,53042,53043,53044,53045,53046,53047,53049,53050,53051,53052,53053,53054,53055,53056,53057,53058,53059,53060,null,null,null,null,null,null,53061,53062,53063,53064,53065,53066,53067,53068,53069,53070,53071,53072,53073,53074,53075,53078,53079,53081,53082,53083,53085,53086,53087,53088,53089,53090,53091,53094,53096,53098,53099,53100,44300,44301,44303,44305,44312,44316,44320,44329,44332,44333,44340,44341,44344,44348,44356,44357,44359,44361,44368,44372,44376,44385,44387,44396,44397,44400,44403,44404,44405,44406,44411,44412,44413,44415,44417,44418,44424,44425,44428,44432,44444,44445,44452,44471,44480,44481,44484,44488,44496,44497,44499,44508,44512,44516,44536,44537,44540,44543,44544,44545,44552,44553,44555,44557,44564,44592,44593,44596,44599,44600,44602,44608,44609,44611,44613,44614,44618,44620,44621,44622,44624,44628,44630,44636,44637,44639,44640,44641,44645,44648,44649,44652,44656,44664,53101,53102,53103,53106,53107,53109,53110,53111,53113,53114,53115,53116,53117,53118,53119,53121,53122,53123,53124,53126,53127,53128,53129,53130,53131,53133,null,null,null,null,null,null,53134,53135,53136,53137,53138,53139,53140,53141,53142,53143,53144,53145,53146,53147,53148,53149,53150,53151,53152,53154,53155,53156,53157,53158,53159,53161,null,null,null,null,null,null,53162,53163,53164,53165,53166,53167,53169,53170,53171,53172,53173,53174,53175,53176,53177,53178,53179,53180,53181,53182,53183,53184,53185,53186,53187,53189,53190,53191,53192,53193,53194,53195,44665,44667,44668,44669,44676,44677,44684,44732,44733,44734,44736,44740,44748,44749,44751,44752,44753,44760,44761,44764,44776,44779,44781,44788,44792,44796,44807,44808,44813,44816,44844,44845,44848,44850,44852,44860,44861,44863,44865,44866,44867,44872,44873,44880,44892,44893,44900,44901,44921,44928,44932,44936,44944,44945,44949,44956,44984,44985,44988,44992,44999,45e3,45001,45003,45005,45006,45012,45020,45032,45033,45040,45041,45044,45048,45056,45057,45060,45068,45072,45076,45084,45085,45096,45124,45125,45128,45130,45132,45134,45139,45140,45141,45143,45145,53196,53197,53198,53199,53200,53201,53202,53203,53204,53205,53206,53207,53208,53209,53210,53211,53212,53213,53214,53215,53218,53219,53221,53222,53223,53225,null,null,null,null,null,null,53226,53227,53228,53229,53230,53231,53234,53236,53238,53239,53240,53241,53242,53243,53245,53246,53247,53249,53250,53251,53253,53254,53255,53256,53257,53258,null,null,null,null,null,null,53259,53260,53261,53262,53263,53264,53266,53267,53268,53269,53270,53271,53273,53274,53275,53276,53277,53278,53279,53280,53281,53282,53283,53284,53285,53286,53287,53288,53289,53290,53291,53292,45149,45180,45181,45184,45188,45196,45197,45199,45201,45208,45209,45210,45212,45215,45216,45217,45218,45224,45225,45227,45228,45229,45230,45231,45233,45235,45236,45237,45240,45244,45252,45253,45255,45256,45257,45264,45265,45268,45272,45280,45285,45320,45321,45323,45324,45328,45330,45331,45336,45337,45339,45340,45341,45347,45348,45349,45352,45356,45364,45365,45367,45368,45369,45376,45377,45380,45384,45392,45393,45396,45397,45400,45404,45408,45432,45433,45436,45440,45442,45448,45449,45451,45453,45458,45459,45460,45464,45468,45480,45516,45520,45524,45532,45533,53294,53295,53296,53297,53298,53299,53302,53303,53305,53306,53307,53309,53310,53311,53312,53313,53314,53315,53318,53320,53322,53323,53324,53325,53326,53327,null,null,null,null,null,null,53329,53330,53331,53333,53334,53335,53337,53338,53339,53340,53341,53342,53343,53345,53346,53347,53348,53349,53350,53351,53352,53353,53354,53355,53358,53359,null,null,null,null,null,null,53361,53362,53363,53365,53366,53367,53368,53369,53370,53371,53374,53375,53376,53378,53379,53380,53381,53382,53383,53384,53385,53386,53387,53388,53389,53390,53391,53392,53393,53394,53395,53396,45535,45544,45545,45548,45552,45561,45563,45565,45572,45573,45576,45579,45580,45588,45589,45591,45593,45600,45620,45628,45656,45660,45664,45672,45673,45684,45685,45692,45700,45701,45705,45712,45713,45716,45720,45721,45722,45728,45729,45731,45733,45734,45738,45740,45744,45748,45768,45769,45772,45776,45778,45784,45785,45787,45789,45794,45796,45797,45798,45800,45803,45804,45805,45806,45807,45811,45812,45813,45815,45816,45817,45818,45819,45823,45824,45825,45828,45832,45840,45841,45843,45844,45845,45852,45908,45909,45910,45912,45915,45916,45918,45919,45924,45925,53397,53398,53399,53400,53401,53402,53403,53404,53405,53406,53407,53408,53409,53410,53411,53414,53415,53417,53418,53419,53421,53422,53423,53424,53425,53426,null,null,null,null,null,null,53427,53430,53432,53434,53435,53436,53437,53438,53439,53442,53443,53445,53446,53447,53450,53451,53452,53453,53454,53455,53458,53462,53463,53464,53465,53466,null,null,null,null,null,null,53467,53470,53471,53473,53474,53475,53477,53478,53479,53480,53481,53482,53483,53486,53490,53491,53492,53493,53494,53495,53497,53498,53499,53500,53501,53502,53503,53504,53505,53506,53507,53508,45927,45929,45931,45934,45936,45937,45940,45944,45952,45953,45955,45956,45957,45964,45968,45972,45984,45985,45992,45996,46020,46021,46024,46027,46028,46030,46032,46036,46037,46039,46041,46043,46045,46048,46052,46056,46076,46096,46104,46108,46112,46120,46121,46123,46132,46160,46161,46164,46168,46176,46177,46179,46181,46188,46208,46216,46237,46244,46248,46252,46261,46263,46265,46272,46276,46280,46288,46293,46300,46301,46304,46307,46308,46310,46316,46317,46319,46321,46328,46356,46357,46360,46363,46364,46372,46373,46375,46376,46377,46378,46384,46385,46388,46392,53509,53510,53511,53512,53513,53514,53515,53516,53518,53519,53520,53521,53522,53523,53524,53525,53526,53527,53528,53529,53530,53531,53532,53533,53534,53535,null,null,null,null,null,null,53536,53537,53538,53539,53540,53541,53542,53543,53544,53545,53546,53547,53548,53549,53550,53551,53554,53555,53557,53558,53559,53561,53563,53564,53565,53566,null,null,null,null,null,null,53567,53570,53574,53575,53576,53577,53578,53579,53582,53583,53585,53586,53587,53589,53590,53591,53592,53593,53594,53595,53598,53600,53602,53603,53604,53605,53606,53607,53609,53610,53611,53613,46400,46401,46403,46404,46405,46411,46412,46413,46416,46420,46428,46429,46431,46432,46433,46496,46497,46500,46504,46506,46507,46512,46513,46515,46516,46517,46523,46524,46525,46528,46532,46540,46541,46543,46544,46545,46552,46572,46608,46609,46612,46616,46629,46636,46644,46664,46692,46696,46748,46749,46752,46756,46763,46764,46769,46804,46832,46836,46840,46848,46849,46853,46888,46889,46892,46895,46896,46904,46905,46907,46916,46920,46924,46932,46933,46944,46948,46952,46960,46961,46963,46965,46972,46973,46976,46980,46988,46989,46991,46992,46993,46994,46998,46999,53614,53615,53616,53617,53618,53619,53620,53621,53622,53623,53624,53625,53626,53627,53629,53630,53631,53632,53633,53634,53635,53637,53638,53639,53641,53642,null,null,null,null,null,null,53643,53644,53645,53646,53647,53648,53649,53650,53651,53652,53653,53654,53655,53656,53657,53658,53659,53660,53661,53662,53663,53666,53667,53669,53670,53671,null,null,null,null,null,null,53673,53674,53675,53676,53677,53678,53679,53682,53684,53686,53687,53688,53689,53691,53693,53694,53695,53697,53698,53699,53700,53701,53702,53703,53704,53705,53706,53707,53708,53709,53710,53711,47e3,47001,47004,47008,47016,47017,47019,47020,47021,47028,47029,47032,47047,47049,47084,47085,47088,47092,47100,47101,47103,47104,47105,47111,47112,47113,47116,47120,47128,47129,47131,47133,47140,47141,47144,47148,47156,47157,47159,47160,47161,47168,47172,47185,47187,47196,47197,47200,47204,47212,47213,47215,47217,47224,47228,47245,47272,47280,47284,47288,47296,47297,47299,47301,47308,47312,47316,47325,47327,47329,47336,47337,47340,47344,47352,47353,47355,47357,47364,47384,47392,47420,47421,47424,47428,47436,47439,47441,47448,47449,47452,47456,47464,47465,53712,53713,53714,53715,53716,53717,53718,53719,53721,53722,53723,53724,53725,53726,53727,53728,53729,53730,53731,53732,53733,53734,53735,53736,53737,53738,null,null,null,null,null,null,53739,53740,53741,53742,53743,53744,53745,53746,53747,53749,53750,53751,53753,53754,53755,53756,53757,53758,53759,53760,53761,53762,53763,53764,53765,53766,null,null,null,null,null,null,53768,53770,53771,53772,53773,53774,53775,53777,53778,53779,53780,53781,53782,53783,53784,53785,53786,53787,53788,53789,53790,53791,53792,53793,53794,53795,53796,53797,53798,53799,53800,53801,47467,47469,47476,47477,47480,47484,47492,47493,47495,47497,47498,47501,47502,47532,47533,47536,47540,47548,47549,47551,47553,47560,47561,47564,47566,47567,47568,47569,47570,47576,47577,47579,47581,47582,47585,47587,47588,47589,47592,47596,47604,47605,47607,47608,47609,47610,47616,47617,47624,47637,47672,47673,47676,47680,47682,47688,47689,47691,47693,47694,47699,47700,47701,47704,47708,47716,47717,47719,47720,47721,47728,47729,47732,47736,47747,47748,47749,47751,47756,47784,47785,47787,47788,47792,47794,47800,47801,47803,47805,47812,47816,47832,47833,47868,53802,53803,53806,53807,53809,53810,53811,53813,53814,53815,53816,53817,53818,53819,53822,53824,53826,53827,53828,53829,53830,53831,53833,53834,53835,53836,null,null,null,null,null,null,53837,53838,53839,53840,53841,53842,53843,53844,53845,53846,53847,53848,53849,53850,53851,53853,53854,53855,53856,53857,53858,53859,53861,53862,53863,53864,null,null,null,null,null,null,53865,53866,53867,53868,53869,53870,53871,53872,53873,53874,53875,53876,53877,53878,53879,53880,53881,53882,53883,53884,53885,53886,53887,53890,53891,53893,53894,53895,53897,53898,53899,53900,47872,47876,47885,47887,47889,47896,47900,47904,47913,47915,47924,47925,47926,47928,47931,47932,47933,47934,47940,47941,47943,47945,47949,47951,47952,47956,47960,47969,47971,47980,48008,48012,48016,48036,48040,48044,48052,48055,48064,48068,48072,48080,48083,48120,48121,48124,48127,48128,48130,48136,48137,48139,48140,48141,48143,48145,48148,48149,48150,48151,48152,48155,48156,48157,48158,48159,48164,48165,48167,48169,48173,48176,48177,48180,48184,48192,48193,48195,48196,48197,48201,48204,48205,48208,48221,48260,48261,48264,48267,48268,48270,48276,48277,48279,53901,53902,53903,53906,53907,53908,53910,53911,53912,53913,53914,53915,53917,53918,53919,53921,53922,53923,53925,53926,53927,53928,53929,53930,53931,53933,null,null,null,null,null,null,53934,53935,53936,53938,53939,53940,53941,53942,53943,53946,53947,53949,53950,53953,53955,53956,53957,53958,53959,53962,53964,53965,53966,53967,53968,53969,null,null,null,null,null,null,53970,53971,53973,53974,53975,53977,53978,53979,53981,53982,53983,53984,53985,53986,53987,53990,53991,53992,53993,53994,53995,53996,53997,53998,53999,54002,54003,54005,54006,54007,54009,54010,48281,48282,48288,48289,48292,48295,48296,48304,48305,48307,48308,48309,48316,48317,48320,48324,48333,48335,48336,48337,48341,48344,48348,48372,48373,48374,48376,48380,48388,48389,48391,48393,48400,48404,48420,48428,48448,48456,48457,48460,48464,48472,48473,48484,48488,48512,48513,48516,48519,48520,48521,48522,48528,48529,48531,48533,48537,48538,48540,48548,48560,48568,48596,48597,48600,48604,48617,48624,48628,48632,48640,48643,48645,48652,48653,48656,48660,48668,48669,48671,48708,48709,48712,48716,48718,48724,48725,48727,48729,48730,48731,48736,48737,48740,54011,54012,54013,54014,54015,54018,54020,54022,54023,54024,54025,54026,54027,54031,54033,54034,54035,54037,54039,54040,54041,54042,54043,54046,54050,54051,null,null,null,null,null,null,54052,54054,54055,54058,54059,54061,54062,54063,54065,54066,54067,54068,54069,54070,54071,54074,54078,54079,54080,54081,54082,54083,54086,54087,54088,54089,null,null,null,null,null,null,54090,54091,54092,54093,54094,54095,54096,54097,54098,54099,54100,54101,54102,54103,54104,54105,54106,54107,54108,54109,54110,54111,54112,54113,54114,54115,54116,54117,54118,54119,54120,54121,48744,48746,48752,48753,48755,48756,48757,48763,48764,48765,48768,48772,48780,48781,48783,48784,48785,48792,48793,48808,48848,48849,48852,48855,48856,48864,48867,48868,48869,48876,48897,48904,48905,48920,48921,48923,48924,48925,48960,48961,48964,48968,48976,48977,48981,49044,49072,49093,49100,49101,49104,49108,49116,49119,49121,49212,49233,49240,49244,49248,49256,49257,49296,49297,49300,49304,49312,49313,49315,49317,49324,49325,49327,49328,49331,49332,49333,49334,49340,49341,49343,49344,49345,49349,49352,49353,49356,49360,49368,49369,49371,49372,49373,49380,54122,54123,54124,54125,54126,54127,54128,54129,54130,54131,54132,54133,54134,54135,54136,54137,54138,54139,54142,54143,54145,54146,54147,54149,54150,54151,null,null,null,null,null,null,54152,54153,54154,54155,54158,54162,54163,54164,54165,54166,54167,54170,54171,54173,54174,54175,54177,54178,54179,54180,54181,54182,54183,54186,54188,54190,null,null,null,null,null,null,54191,54192,54193,54194,54195,54197,54198,54199,54201,54202,54203,54205,54206,54207,54208,54209,54210,54211,54214,54215,54218,54219,54220,54221,54222,54223,54225,54226,54227,54228,54229,54230,49381,49384,49388,49396,49397,49399,49401,49408,49412,49416,49424,49429,49436,49437,49438,49439,49440,49443,49444,49446,49447,49452,49453,49455,49456,49457,49462,49464,49465,49468,49472,49480,49481,49483,49484,49485,49492,49493,49496,49500,49508,49509,49511,49512,49513,49520,49524,49528,49541,49548,49549,49550,49552,49556,49558,49564,49565,49567,49569,49573,49576,49577,49580,49584,49597,49604,49608,49612,49620,49623,49624,49632,49636,49640,49648,49649,49651,49660,49661,49664,49668,49676,49677,49679,49681,49688,49689,49692,49695,49696,49704,49705,49707,49709,54231,54233,54234,54235,54236,54237,54238,54239,54240,54242,54244,54245,54246,54247,54248,54249,54250,54251,54254,54255,54257,54258,54259,54261,54262,54263,null,null,null,null,null,null,54264,54265,54266,54267,54270,54272,54274,54275,54276,54277,54278,54279,54281,54282,54283,54284,54285,54286,54287,54288,54289,54290,54291,54292,54293,54294,null,null,null,null,null,null,54295,54296,54297,54298,54299,54300,54302,54303,54304,54305,54306,54307,54308,54309,54310,54311,54312,54313,54314,54315,54316,54317,54318,54319,54320,54321,54322,54323,54324,54325,54326,54327,49711,49713,49714,49716,49736,49744,49745,49748,49752,49760,49765,49772,49773,49776,49780,49788,49789,49791,49793,49800,49801,49808,49816,49819,49821,49828,49829,49832,49836,49837,49844,49845,49847,49849,49884,49885,49888,49891,49892,49899,49900,49901,49903,49905,49910,49912,49913,49915,49916,49920,49928,49929,49932,49933,49939,49940,49941,49944,49948,49956,49957,49960,49961,49989,50024,50025,50028,50032,50034,50040,50041,50044,50045,50052,50056,50060,50112,50136,50137,50140,50143,50144,50146,50152,50153,50157,50164,50165,50168,50184,50192,50212,50220,50224,54328,54329,54330,54331,54332,54333,54334,54335,54337,54338,54339,54341,54342,54343,54344,54345,54346,54347,54348,54349,54350,54351,54352,54353,54354,54355,null,null,null,null,null,null,54356,54357,54358,54359,54360,54361,54362,54363,54365,54366,54367,54369,54370,54371,54373,54374,54375,54376,54377,54378,54379,54380,54382,54384,54385,54386,null,null,null,null,null,null,54387,54388,54389,54390,54391,54394,54395,54397,54398,54401,54403,54404,54405,54406,54407,54410,54412,54414,54415,54416,54417,54418,54419,54421,54422,54423,54424,54425,54426,54427,54428,54429,50228,50236,50237,50248,50276,50277,50280,50284,50292,50293,50297,50304,50324,50332,50360,50364,50409,50416,50417,50420,50424,50426,50431,50432,50433,50444,50448,50452,50460,50472,50473,50476,50480,50488,50489,50491,50493,50500,50501,50504,50505,50506,50508,50509,50510,50515,50516,50517,50519,50520,50521,50525,50526,50528,50529,50532,50536,50544,50545,50547,50548,50549,50556,50557,50560,50564,50567,50572,50573,50575,50577,50581,50583,50584,50588,50592,50601,50612,50613,50616,50617,50619,50620,50621,50622,50628,50629,50630,50631,50632,50633,50634,50636,50638,54430,54431,54432,54433,54434,54435,54436,54437,54438,54439,54440,54442,54443,54444,54445,54446,54447,54448,54449,54450,54451,54452,54453,54454,54455,54456,null,null,null,null,null,null,54457,54458,54459,54460,54461,54462,54463,54464,54465,54466,54467,54468,54469,54470,54471,54472,54473,54474,54475,54477,54478,54479,54481,54482,54483,54485,null,null,null,null,null,null,54486,54487,54488,54489,54490,54491,54493,54494,54496,54497,54498,54499,54500,54501,54502,54503,54505,54506,54507,54509,54510,54511,54513,54514,54515,54516,54517,54518,54519,54521,54522,54524,50640,50641,50644,50648,50656,50657,50659,50661,50668,50669,50670,50672,50676,50678,50679,50684,50685,50686,50687,50688,50689,50693,50694,50695,50696,50700,50704,50712,50713,50715,50716,50724,50725,50728,50732,50733,50734,50736,50739,50740,50741,50743,50745,50747,50752,50753,50756,50760,50768,50769,50771,50772,50773,50780,50781,50784,50796,50799,50801,50808,50809,50812,50816,50824,50825,50827,50829,50836,50837,50840,50844,50852,50853,50855,50857,50864,50865,50868,50872,50873,50874,50880,50881,50883,50885,50892,50893,50896,50900,50908,50909,50912,50913,50920,54526,54527,54528,54529,54530,54531,54533,54534,54535,54537,54538,54539,54541,54542,54543,54544,54545,54546,54547,54550,54552,54553,54554,54555,54556,54557,null,null,null,null,null,null,54558,54559,54560,54561,54562,54563,54564,54565,54566,54567,54568,54569,54570,54571,54572,54573,54574,54575,54576,54577,54578,54579,54580,54581,54582,54583,null,null,null,null,null,null,54584,54585,54586,54587,54590,54591,54593,54594,54595,54597,54598,54599,54600,54601,54602,54603,54606,54608,54610,54611,54612,54613,54614,54615,54618,54619,54621,54622,54623,54625,54626,54627,50921,50924,50928,50936,50937,50941,50948,50949,50952,50956,50964,50965,50967,50969,50976,50977,50980,50984,50992,50993,50995,50997,50999,51004,51005,51008,51012,51018,51020,51021,51023,51025,51026,51027,51028,51029,51030,51031,51032,51036,51040,51048,51051,51060,51061,51064,51068,51069,51070,51075,51076,51077,51079,51080,51081,51082,51086,51088,51089,51092,51094,51095,51096,51098,51104,51105,51107,51108,51109,51110,51116,51117,51120,51124,51132,51133,51135,51136,51137,51144,51145,51148,51150,51152,51160,51165,51172,51176,51180,51200,51201,51204,51208,51210,54628,54630,54631,54634,54636,54638,54639,54640,54641,54642,54643,54646,54647,54649,54650,54651,54653,54654,54655,54656,54657,54658,54659,54662,54666,54667,null,null,null,null,null,null,54668,54669,54670,54671,54673,54674,54675,54676,54677,54678,54679,54680,54681,54682,54683,54684,54685,54686,54687,54688,54689,54690,54691,54692,54694,54695,null,null,null,null,null,null,54696,54697,54698,54699,54700,54701,54702,54703,54704,54705,54706,54707,54708,54709,54710,54711,54712,54713,54714,54715,54716,54717,54718,54719,54720,54721,54722,54723,54724,54725,54726,54727,51216,51217,51219,51221,51222,51228,51229,51232,51236,51244,51245,51247,51249,51256,51260,51264,51272,51273,51276,51277,51284,51312,51313,51316,51320,51322,51328,51329,51331,51333,51334,51335,51339,51340,51341,51348,51357,51359,51361,51368,51388,51389,51396,51400,51404,51412,51413,51415,51417,51424,51425,51428,51445,51452,51453,51456,51460,51461,51462,51468,51469,51471,51473,51480,51500,51508,51536,51537,51540,51544,51552,51553,51555,51564,51568,51572,51580,51592,51593,51596,51600,51608,51609,51611,51613,51648,51649,51652,51655,51656,51658,51664,51665,51667,54730,54731,54733,54734,54735,54737,54739,54740,54741,54742,54743,54746,54748,54750,54751,54752,54753,54754,54755,54758,54759,54761,54762,54763,54765,54766,null,null,null,null,null,null,54767,54768,54769,54770,54771,54774,54776,54778,54779,54780,54781,54782,54783,54786,54787,54789,54790,54791,54793,54794,54795,54796,54797,54798,54799,54802,null,null,null,null,null,null,54806,54807,54808,54809,54810,54811,54813,54814,54815,54817,54818,54819,54821,54822,54823,54824,54825,54826,54827,54828,54830,54831,54832,54833,54834,54835,54836,54837,54838,54839,54842,54843,51669,51670,51673,51674,51676,51677,51680,51682,51684,51687,51692,51693,51695,51696,51697,51704,51705,51708,51712,51720,51721,51723,51724,51725,51732,51736,51753,51788,51789,51792,51796,51804,51805,51807,51808,51809,51816,51837,51844,51864,51900,51901,51904,51908,51916,51917,51919,51921,51923,51928,51929,51936,51948,51956,51976,51984,51988,51992,52e3,52001,52033,52040,52041,52044,52048,52056,52057,52061,52068,52088,52089,52124,52152,52180,52196,52199,52201,52236,52237,52240,52244,52252,52253,52257,52258,52263,52264,52265,52268,52270,52272,52280,52281,52283,54845,54846,54847,54849,54850,54851,54852,54854,54855,54858,54860,54862,54863,54864,54866,54867,54870,54871,54873,54874,54875,54877,54878,54879,54880,54881,null,null,null,null,null,null,54882,54883,54884,54885,54886,54888,54890,54891,54892,54893,54894,54895,54898,54899,54901,54902,54903,54904,54905,54906,54907,54908,54909,54910,54911,54912,null,null,null,null,null,null,54913,54914,54916,54918,54919,54920,54921,54922,54923,54926,54927,54929,54930,54931,54933,54934,54935,54936,54937,54938,54939,54940,54942,54944,54946,54947,54948,54949,54950,54951,54953,54954,52284,52285,52286,52292,52293,52296,52300,52308,52309,52311,52312,52313,52320,52324,52326,52328,52336,52341,52376,52377,52380,52384,52392,52393,52395,52396,52397,52404,52405,52408,52412,52420,52421,52423,52425,52432,52436,52452,52460,52464,52481,52488,52489,52492,52496,52504,52505,52507,52509,52516,52520,52524,52537,52572,52576,52580,52588,52589,52591,52593,52600,52616,52628,52629,52632,52636,52644,52645,52647,52649,52656,52676,52684,52688,52712,52716,52720,52728,52729,52731,52733,52740,52744,52748,52756,52761,52768,52769,52772,52776,52784,52785,52787,52789,54955,54957,54958,54959,54961,54962,54963,54964,54965,54966,54967,54968,54970,54972,54973,54974,54975,54976,54977,54978,54979,54982,54983,54985,54986,54987,null,null,null,null,null,null,54989,54990,54991,54992,54994,54995,54997,54998,55e3,55002,55003,55004,55005,55006,55007,55009,55010,55011,55013,55014,55015,55017,55018,55019,55020,55021,null,null,null,null,null,null,55022,55023,55025,55026,55027,55028,55030,55031,55032,55033,55034,55035,55038,55039,55041,55042,55043,55045,55046,55047,55048,55049,55050,55051,55052,55053,55054,55055,55056,55058,55059,55060,52824,52825,52828,52831,52832,52833,52840,52841,52843,52845,52852,52853,52856,52860,52868,52869,52871,52873,52880,52881,52884,52888,52896,52897,52899,52900,52901,52908,52909,52929,52964,52965,52968,52971,52972,52980,52981,52983,52984,52985,52992,52993,52996,53e3,53008,53009,53011,53013,53020,53024,53028,53036,53037,53039,53040,53041,53048,53076,53077,53080,53084,53092,53093,53095,53097,53104,53105,53108,53112,53120,53125,53132,53153,53160,53168,53188,53216,53217,53220,53224,53232,53233,53235,53237,53244,53248,53252,53265,53272,53293,53300,53301,53304,53308,55061,55062,55063,55066,55067,55069,55070,55071,55073,55074,55075,55076,55077,55078,55079,55082,55084,55086,55087,55088,55089,55090,55091,55094,55095,55097,null,null,null,null,null,null,55098,55099,55101,55102,55103,55104,55105,55106,55107,55109,55110,55112,55114,55115,55116,55117,55118,55119,55122,55123,55125,55130,55131,55132,55133,55134,null,null,null,null,null,null,55135,55138,55140,55142,55143,55144,55146,55147,55149,55150,55151,55153,55154,55155,55157,55158,55159,55160,55161,55162,55163,55166,55167,55168,55170,55171,55172,55173,55174,55175,55178,55179,53316,53317,53319,53321,53328,53332,53336,53344,53356,53357,53360,53364,53372,53373,53377,53412,53413,53416,53420,53428,53429,53431,53433,53440,53441,53444,53448,53449,53456,53457,53459,53460,53461,53468,53469,53472,53476,53484,53485,53487,53488,53489,53496,53517,53552,53553,53556,53560,53562,53568,53569,53571,53572,53573,53580,53581,53584,53588,53596,53597,53599,53601,53608,53612,53628,53636,53640,53664,53665,53668,53672,53680,53681,53683,53685,53690,53692,53696,53720,53748,53752,53767,53769,53776,53804,53805,53808,53812,53820,53821,53823,53825,53832,53852,55181,55182,55183,55185,55186,55187,55188,55189,55190,55191,55194,55196,55198,55199,55200,55201,55202,55203,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,53860,53888,53889,53892,53896,53904,53905,53909,53916,53920,53924,53932,53937,53944,53945,53948,53951,53952,53954,53960,53961,53963,53972,53976,53980,53988,53989,54e3,54001,54004,54008,54016,54017,54019,54021,54028,54029,54030,54032,54036,54038,54044,54045,54047,54048,54049,54053,54056,54057,54060,54064,54072,54073,54075,54076,54077,54084,54085,54140,54141,54144,54148,54156,54157,54159,54160,54161,54168,54169,54172,54176,54184,54185,54187,54189,54196,54200,54204,54212,54213,54216,54217,54224,54232,54241,54243,54252,54253,54256,54260,54268,54269,54271,54273,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,54280,54301,54336,54340,54364,54368,54372,54381,54383,54392,54393,54396,54399,54400,54402,54408,54409,54411,54413,54420,54441,54476,54480,54484,54492,54495,54504,54508,54512,54520,54523,54525,54532,54536,54540,54548,54549,54551,54588,54589,54592,54596,54604,54605,54607,54609,54616,54617,54620,54624,54629,54632,54633,54635,54637,54644,54645,54648,54652,54660,54661,54663,54664,54665,54672,54693,54728,54729,54732,54736,54738,54744,54745,54747,54749,54756,54757,54760,54764,54772,54773,54775,54777,54784,54785,54788,54792,54800,54801,54803,54804,54805,54812,54816,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,54820,54829,54840,54841,54844,54848,54853,54856,54857,54859,54861,54865,54868,54869,54872,54876,54887,54889,54896,54897,54900,54915,54917,54924,54925,54928,54932,54941,54943,54945,54952,54956,54960,54969,54971,54980,54981,54984,54988,54993,54996,54999,55001,55008,55012,55016,55024,55029,55036,55037,55040,55044,55057,55064,55065,55068,55072,55080,55081,55083,55085,55092,55093,55096,55100,55108,55111,55113,55120,55121,55124,55126,55127,55128,55129,55136,55137,55139,55141,55145,55148,55152,55156,55164,55165,55169,55176,55177,55180,55184,55192,55193,55195,55197,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,20285,20339,20551,20729,21152,21487,21621,21733,22025,23233,23478,26247,26550,26551,26607,27468,29634,30146,31292,33499,33540,34903,34952,35382,36040,36303,36603,36838,39381,21051,21364,21508,24682,24932,27580,29647,33050,35258,35282,38307,20355,21002,22718,22904,23014,24178,24185,25031,25536,26438,26604,26751,28567,30286,30475,30965,31240,31487,31777,32925,33390,33393,35563,38291,20075,21917,26359,28212,30883,31469,33883,35088,34638,38824,21208,22350,22570,23884,24863,25022,25121,25954,26577,27204,28187,29976,30131,30435,30640,32058,37039,37969,37970,40853,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,21283,23724,30002,32987,37440,38296,21083,22536,23004,23713,23831,24247,24378,24394,24951,27743,30074,30086,31968,32115,32177,32652,33108,33313,34193,35137,35611,37628,38477,40007,20171,20215,20491,20977,22607,24887,24894,24936,25913,27114,28433,30117,30342,30422,31623,33445,33995,63744,37799,38283,21888,23458,22353,63745,31923,32697,37301,20520,21435,23621,24040,25298,25454,25818,25831,28192,28844,31067,36317,36382,63746,36989,37445,37624,20094,20214,20581,24062,24314,24838,26967,33137,34388,36423,37749,39467,20062,20625,26480,26688,20745,21133,21138,27298,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,30652,37392,40660,21163,24623,36850,20552,25001,25581,25802,26684,27268,28608,33160,35233,38548,22533,29309,29356,29956,32121,32365,32937,35211,35700,36963,40273,25225,27770,28500,32080,32570,35363,20860,24906,31645,35609,37463,37772,20140,20435,20510,20670,20742,21185,21197,21375,22384,22659,24218,24465,24950,25004,25806,25964,26223,26299,26356,26775,28039,28805,28913,29855,29861,29898,30169,30828,30956,31455,31478,32069,32147,32789,32831,33051,33686,35686,36629,36885,37857,38915,38968,39514,39912,20418,21843,22586,22865,23395,23622,24760,25106,26690,26800,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,26856,28330,30028,30328,30926,31293,31995,32363,32380,35336,35489,35903,38542,40388,21476,21481,21578,21617,22266,22993,23396,23611,24235,25335,25911,25925,25970,26272,26543,27073,27837,30204,30352,30590,31295,32660,32771,32929,33167,33510,33533,33776,34241,34865,34996,35493,63747,36764,37678,38599,39015,39640,40723,21741,26011,26354,26767,31296,35895,40288,22256,22372,23825,26118,26801,26829,28414,29736,34974,39908,27752,63748,39592,20379,20844,20849,21151,23380,24037,24656,24685,25329,25511,25915,29657,31354,34467,36002,38799,20018,23521,25096,26524,29916,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,31185,33747,35463,35506,36328,36942,37707,38982,24275,27112,34303,37101,63749,20896,23448,23532,24931,26874,27454,28748,29743,29912,31649,32592,33733,35264,36011,38364,39208,21038,24669,25324,36866,20362,20809,21281,22745,24291,26336,27960,28826,29378,29654,31568,33009,37979,21350,25499,32619,20054,20608,22602,22750,24618,24871,25296,27088,39745,23439,32024,32945,36703,20132,20689,21676,21932,23308,23968,24039,25898,25934,26657,27211,29409,30350,30703,32094,32761,33184,34126,34527,36611,36686,37066,39171,39509,39851,19992,20037,20061,20167,20465,20855,21246,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,21312,21475,21477,21646,22036,22389,22434,23495,23943,24272,25084,25304,25937,26552,26601,27083,27472,27590,27628,27714,28317,28792,29399,29590,29699,30655,30697,31350,32127,32777,33276,33285,33290,33503,34914,35635,36092,36544,36881,37041,37476,37558,39378,39493,40169,40407,40860,22283,23616,33738,38816,38827,40628,21531,31384,32676,35033,36557,37089,22528,23624,25496,31391,23470,24339,31353,31406,33422,36524,20518,21048,21240,21367,22280,25331,25458,27402,28099,30519,21413,29527,34152,36470,38357,26426,27331,28528,35437,36556,39243,63750,26231,27512,36020,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,39740,63751,21483,22317,22862,25542,27131,29674,30789,31418,31429,31998,33909,35215,36211,36917,38312,21243,22343,30023,31584,33740,37406,63752,27224,20811,21067,21127,25119,26840,26997,38553,20677,21156,21220,25027,26020,26681,27135,29822,31563,33465,33771,35250,35641,36817,39241,63753,20170,22935,25810,26129,27278,29748,31105,31165,33449,34942,34943,35167,63754,37670,20235,21450,24613,25201,27762,32026,32102,20120,20834,30684,32943,20225,20238,20854,20864,21980,22120,22331,22522,22524,22804,22855,22931,23492,23696,23822,24049,24190,24524,25216,26071,26083,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,26398,26399,26462,26827,26820,27231,27450,27683,27773,27778,28103,29592,29734,29738,29826,29859,30072,30079,30849,30959,31041,31047,31048,31098,31637,32e3,32186,32648,32774,32813,32908,35352,35663,35912,36215,37665,37668,39138,39249,39438,39439,39525,40594,32202,20342,21513,25326,26708,37329,21931,20794,63755,63756,23068,25062,63757,25295,25343,63758,63759,63760,63761,63762,63763,37027,63764,63765,63766,63767,63768,35582,63769,63770,63771,63772,26262,63773,29014,63774,63775,38627,63776,25423,25466,21335,63777,26511,26976,28275,63778,30007,63779,63780,63781,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,32013,63782,63783,34930,22218,23064,63784,63785,63786,63787,63788,20035,63789,20839,22856,26608,32784,63790,22899,24180,25754,31178,24565,24684,25288,25467,23527,23511,21162,63791,22900,24361,24594,63792,63793,63794,29785,63795,63796,63797,63798,63799,63800,39377,63801,63802,63803,63804,63805,63806,63807,63808,63809,63810,63811,28611,63812,63813,33215,36786,24817,63814,63815,33126,63816,63817,23615,63818,63819,63820,63821,63822,63823,63824,63825,23273,35365,26491,32016,63826,63827,63828,63829,63830,63831,33021,63832,63833,23612,27877,21311,28346,22810,33590,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,20025,20150,20294,21934,22296,22727,24406,26039,26086,27264,27573,28237,30701,31471,31774,32222,34507,34962,37170,37723,25787,28606,29562,30136,36948,21846,22349,25018,25812,26311,28129,28251,28525,28601,30192,32835,33213,34113,35203,35527,35674,37663,27795,30035,31572,36367,36957,21776,22530,22616,24162,25095,25758,26848,30070,31958,34739,40680,20195,22408,22382,22823,23565,23729,24118,24453,25140,25825,29619,33274,34955,36024,38538,40667,23429,24503,24755,20498,20992,21040,22294,22581,22615,23566,23648,23798,23947,24230,24466,24764,25361,25481,25623,26691,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,26873,27330,28120,28193,28372,28644,29182,30428,30585,31153,31291,33796,35241,36077,36339,36424,36867,36884,36947,37117,37709,38518,38876,27602,28678,29272,29346,29544,30563,31167,31716,32411,35712,22697,24775,25958,26109,26302,27788,28958,29129,35930,38931,20077,31361,20189,20908,20941,21205,21516,24999,26481,26704,26847,27934,28540,30140,30643,31461,33012,33891,37509,20828,26007,26460,26515,30168,31431,33651,63834,35910,36887,38957,23663,33216,33434,36929,36975,37389,24471,23965,27225,29128,30331,31561,34276,35588,37159,39472,21895,25078,63835,30313,32645,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,34367,34746,35064,37007,63836,27931,28889,29662,32097,33853,63837,37226,39409,63838,20098,21365,27396,27410,28734,29211,34349,40478,21068,36771,23888,25829,25900,27414,28651,31811,32412,34253,35172,35261,25289,33240,34847,24266,26391,28010,29436,29701,29807,34690,37086,20358,23821,24480,33802,20919,25504,30053,20142,20486,20841,20937,26753,27153,31918,31921,31975,33391,35538,36635,37327,20406,20791,21237,21570,24300,24942,25150,26053,27354,28670,31018,34268,34851,38317,39522,39530,40599,40654,21147,26310,27511,28701,31019,36706,38722,24976,25088,25891,28451,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,29001,29833,32244,32879,34030,36646,36899,37706,20925,21015,21155,27916,28872,35010,24265,25986,27566,28610,31806,29557,20196,20278,22265,63839,23738,23994,24604,29618,31533,32666,32718,32838,36894,37428,38646,38728,38936,40801,20363,28583,31150,37300,38583,21214,63840,25736,25796,27347,28510,28696,29200,30439,32769,34310,34396,36335,36613,38706,39791,40442,40565,30860,31103,32160,33737,37636,40575,40595,35542,22751,24324,26407,28711,29903,31840,32894,20769,28712,29282,30922,36034,36058,36084,38647,20102,20698,23534,24278,26009,29134,30274,30637,32842,34044,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,36988,39719,40845,22744,23105,23650,27155,28122,28431,30267,32047,32311,34078,35128,37860,38475,21129,26066,26611,27060,27969,28316,28687,29705,29792,30041,30244,30827,35628,39006,20845,25134,38520,20374,20523,23833,28138,32184,36650,24459,24900,26647,63841,38534,21202,32907,20956,20940,26974,31260,32190,33777,38517,20442,21033,21400,21519,21774,23653,24743,26446,26792,28012,29313,29432,29702,29827,63842,30178,31852,32633,32696,33673,35023,35041,37324,37328,38626,39881,21533,28542,29136,29848,34298,36522,38563,40023,40607,26519,28107,29747,33256,38678,30764,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,31435,31520,31890,25705,29802,30194,30908,30952,39340,39764,40635,23518,24149,28448,33180,33707,37e3,19975,21325,23081,24018,24398,24930,25405,26217,26364,28415,28459,28771,30622,33836,34067,34875,36627,39237,39995,21788,25273,26411,27819,33545,35178,38778,20129,22916,24536,24537,26395,32178,32596,33426,33579,33725,36638,37017,22475,22969,23186,23504,26151,26522,26757,27599,29028,32629,36023,36067,36993,39749,33032,35978,38476,39488,40613,23391,27667,29467,30450,30431,33804,20906,35219,20813,20885,21193,26825,27796,30468,30496,32191,32236,38754,40629,28357,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,34065,20901,21517,21629,26126,26269,26919,28319,30399,30609,33559,33986,34719,37225,37528,40180,34946,20398,20882,21215,22982,24125,24917,25720,25721,26286,26576,27169,27597,27611,29279,29281,29761,30520,30683,32791,33468,33541,35584,35624,35980,26408,27792,29287,30446,30566,31302,40361,27519,27794,22818,26406,33945,21359,22675,22937,24287,25551,26164,26483,28218,29483,31447,33495,37672,21209,24043,25006,25035,25098,25287,25771,26080,26969,27494,27595,28961,29687,30045,32326,33310,33538,34154,35491,36031,38695,40289,22696,40664,20497,21006,21563,21839,25991,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,27766,32010,32011,32862,34442,38272,38639,21247,27797,29289,21619,23194,23614,23883,24396,24494,26410,26806,26979,28220,28228,30473,31859,32654,34183,35598,36855,38753,40692,23735,24758,24845,25003,25935,26107,26108,27665,27887,29599,29641,32225,38292,23494,34588,35600,21085,21338,25293,25615,25778,26420,27192,27850,29632,29854,31636,31893,32283,33162,33334,34180,36843,38649,39361,20276,21322,21453,21467,25292,25644,25856,26001,27075,27886,28504,29677,30036,30242,30436,30460,30928,30971,31020,32070,33324,34784,36820,38930,39151,21187,25300,25765,28196,28497,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,30332,36299,37297,37474,39662,39747,20515,20621,22346,22952,23592,24135,24439,25151,25918,26041,26049,26121,26507,27036,28354,30917,32033,32938,33152,33323,33459,33953,34444,35370,35607,37030,38450,40848,20493,20467,63843,22521,24472,25308,25490,26479,28227,28953,30403,32972,32986,35060,35061,35097,36064,36649,37197,38506,20271,20336,24091,26575,26658,30333,30334,39748,24161,27146,29033,29140,30058,63844,32321,34115,34281,39132,20240,31567,32624,38309,20961,24070,26805,27710,27726,27867,29359,31684,33539,27861,29754,20731,21128,22721,25816,27287,29863,30294,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,30887,34327,38370,38713,63845,21342,24321,35722,36776,36783,37002,21029,30629,40009,40712,19993,20482,20853,23643,24183,26142,26170,26564,26821,28851,29953,30149,31177,31453,36647,39200,39432,20445,22561,22577,23542,26222,27493,27921,28282,28541,29668,29995,33769,35036,35091,35676,36628,20239,20693,21264,21340,23443,24489,26381,31119,33145,33583,34068,35079,35206,36665,36667,39333,39954,26412,20086,20472,22857,23553,23791,23792,25447,26834,28925,29090,29739,32299,34028,34562,36898,37586,40179,19981,20184,20463,20613,21078,21103,21542,21648,22496,22827,23142,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,23386,23413,23500,24220,63846,25206,25975,26023,28014,28325,29238,31526,31807,32566,33104,33105,33178,33344,33433,33705,35331,36e3,36070,36091,36212,36282,37096,37340,38428,38468,39385,40167,21271,20998,21545,22132,22707,22868,22894,24575,24996,25198,26128,27774,28954,30406,31881,31966,32027,33452,36033,38640,63847,20315,24343,24447,25282,23849,26379,26842,30844,32323,40300,19989,20633,21269,21290,21329,22915,23138,24199,24754,24970,25161,25209,26e3,26503,27047,27604,27606,27607,27608,27832,63848,29749,30202,30738,30865,31189,31192,31875,32203,32737,32933,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,33086,33218,33778,34586,35048,35513,35692,36027,37145,38750,39131,40763,22188,23338,24428,25996,27315,27567,27996,28657,28693,29277,29613,36007,36051,38971,24977,27703,32856,39425,20045,20107,20123,20181,20282,20284,20351,20447,20735,21490,21496,21766,21987,22235,22763,22882,23057,23531,23546,23556,24051,24107,24473,24605,25448,26012,26031,26614,26619,26797,27515,27801,27863,28195,28681,29509,30722,31038,31040,31072,31169,31721,32023,32114,32902,33293,33678,34001,34503,35039,35408,35422,35613,36060,36198,36781,37034,39164,39391,40605,21066,63849,26388,63850,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,20632,21034,23665,25955,27733,29642,29987,30109,31639,33948,37240,38704,20087,25746,27578,29022,34217,19977,63851,26441,26862,28183,33439,34072,34923,25591,28545,37394,39087,19978,20663,20687,20767,21830,21930,22039,23360,23577,23776,24120,24202,24224,24258,24819,26705,27233,28248,29245,29248,29376,30456,31077,31665,32724,35059,35316,35443,35937,36062,38684,22622,29885,36093,21959,63852,31329,32034,33394,29298,29983,29989,63853,31513,22661,22779,23996,24207,24246,24464,24661,25234,25471,25933,26257,26329,26360,26646,26866,29312,29790,31598,32110,32214,32626,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,32997,33298,34223,35199,35475,36893,37604,40653,40736,22805,22893,24109,24796,26132,26227,26512,27728,28101,28511,30707,30889,33990,37323,37675,20185,20682,20808,21892,23307,23459,25159,25982,26059,28210,29053,29697,29764,29831,29887,30316,31146,32218,32341,32680,33146,33203,33337,34330,34796,35445,36323,36984,37521,37925,39245,39854,21352,23633,26964,27844,27945,28203,33292,34203,35131,35373,35498,38634,40807,21089,26297,27570,32406,34814,36109,38275,38493,25885,28041,29166,63854,22478,22995,23468,24615,24826,25104,26143,26207,29481,29689,30427,30465,31596,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,32854,32882,33125,35488,37266,19990,21218,27506,27927,31237,31545,32048,63855,36016,21484,22063,22609,23477,23567,23569,24034,25152,25475,25620,26157,26803,27836,28040,28335,28703,28836,29138,29990,30095,30094,30233,31505,31712,31787,32032,32057,34092,34157,34311,35380,36877,36961,37045,37559,38902,39479,20439,23660,26463,28049,31903,32396,35606,36118,36895,23403,24061,25613,33984,36956,39137,29575,23435,24730,26494,28126,35359,35494,36865,38924,21047,63856,28753,30862,37782,34928,37335,20462,21463,22013,22234,22402,22781,23234,23432,23723,23744,24101,24833,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,25101,25163,25480,25628,25910,25976,27193,27530,27700,27929,28465,29159,29417,29560,29703,29874,30246,30561,31168,31319,31466,31929,32143,32172,32353,32670,33065,33585,33936,34010,34282,34966,35504,35728,36664,36930,36995,37228,37526,37561,38539,38567,38568,38614,38656,38920,39318,39635,39706,21460,22654,22809,23408,23487,28113,28506,29087,29729,29881,32901,33789,24033,24455,24490,24642,26092,26642,26991,27219,27529,27957,28147,29667,30462,30636,31565,32020,33059,33308,33600,34036,34147,35426,35524,37255,37662,38918,39348,25100,34899,36848,37477,23815,23847,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,23913,29791,33181,34664,28629,25342,32722,35126,35186,19998,20056,20711,21213,21319,25215,26119,32361,34821,38494,20365,21273,22070,22987,23204,23608,23630,23629,24066,24337,24643,26045,26159,26178,26558,26612,29468,30690,31034,32709,33940,33997,35222,35430,35433,35553,35925,35962,22516,23508,24335,24687,25325,26893,27542,28252,29060,31698,34645,35672,36606,39135,39166,20280,20353,20449,21627,23072,23480,24892,26032,26216,29180,30003,31070,32051,33102,33251,33688,34218,34254,34563,35338,36523,36763,63857,36805,22833,23460,23526,24713,23529,23563,24515,27777,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,63858,28145,28683,29978,33455,35574,20160,21313,63859,38617,27663,20126,20420,20818,21854,23077,23784,25105,29273,33469,33706,34558,34905,35357,38463,38597,39187,40201,40285,22538,23731,23997,24132,24801,24853,25569,27138,28197,37122,37716,38990,39952,40823,23433,23736,25353,26191,26696,30524,38593,38797,38996,39839,26017,35585,36555,38332,21813,23721,24022,24245,26263,30284,33780,38343,22739,25276,29390,40232,20208,22830,24591,26171,27523,31207,40230,21395,21696,22467,23830,24859,26326,28079,30861,33406,38552,38724,21380,25212,25494,28082,32266,33099,38989,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,27387,32588,40367,40474,20063,20539,20918,22812,24825,25590,26928,29242,32822,63860,37326,24369,63861,63862,32004,33509,33903,33979,34277,36493,63863,20335,63864,63865,22756,23363,24665,25562,25880,25965,26264,63866,26954,27171,27915,28673,29036,30162,30221,31155,31344,63867,32650,63868,35140,63869,35731,37312,38525,63870,39178,22276,24481,26044,28417,30208,31142,35486,39341,39770,40812,20740,25014,25233,27277,33222,20547,22576,24422,28937,35328,35578,23420,34326,20474,20796,22196,22852,25513,28153,23978,26989,20870,20104,20313,63871,63872,63873,22914,63874,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,63875,27487,27741,63876,29877,30998,63877,33287,33349,33593,36671,36701,63878,39192,63879,63880,63881,20134,63882,22495,24441,26131,63883,63884,30123,32377,35695,63885,36870,39515,22181,22567,23032,23071,23476,63886,24310,63887,63888,25424,25403,63889,26941,27783,27839,28046,28051,28149,28436,63890,28895,28982,29017,63891,29123,29141,63892,30799,30831,63893,31605,32227,63894,32303,63895,34893,36575,63896,63897,63898,37467,63899,40182,63900,63901,63902,24709,28037,63903,29105,63904,63905,38321,21421,63906,63907,63908,26579,63909,28814,28976,29744,33398,33490,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,63910,38331,39653,40573,26308,63911,29121,33865,63912,63913,22603,63914,63915,23992,24433,63916,26144,26254,27001,27054,27704,27891,28214,28481,28634,28699,28719,29008,29151,29552,63917,29787,63918,29908,30408,31310,32403,63919,63920,33521,35424,36814,63921,37704,63922,38681,63923,63924,20034,20522,63925,21e3,21473,26355,27757,28618,29450,30591,31330,33454,34269,34306,63926,35028,35427,35709,35947,63927,37555,63928,38675,38928,20116,20237,20425,20658,21320,21566,21555,21978,22626,22714,22887,23067,23524,24735,63929,25034,25942,26111,26212,26791,27738,28595,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,28879,29100,29522,31613,34568,35492,39986,40711,23627,27779,29508,29577,37434,28331,29797,30239,31337,32277,34314,20800,22725,25793,29934,29973,30320,32705,37013,38605,39252,28198,29926,31401,31402,33253,34521,34680,35355,23113,23436,23451,26785,26880,28003,29609,29715,29740,30871,32233,32747,33048,33109,33694,35916,38446,38929,26352,24448,26106,26505,27754,29579,20525,23043,27498,30702,22806,23916,24013,29477,30031,63930,63931,20709,20985,22575,22829,22934,23002,23525,63932,63933,23970,25303,25622,25747,25854,63934,26332,63935,27208,63936,29183,29796,63937,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,31368,31407,32327,32350,32768,33136,63938,34799,35201,35616,36953,63939,36992,39250,24958,27442,28020,32287,35109,36785,20433,20653,20887,21191,22471,22665,23481,24248,24898,27029,28044,28263,28342,29076,29794,29992,29996,32883,33592,33993,36362,37780,37854,63940,20110,20305,20598,20778,21448,21451,21491,23431,23507,23588,24858,24962,26100,29275,29591,29760,30402,31056,31121,31161,32006,32701,33419,34261,34398,36802,36935,37109,37354,38533,38632,38633,21206,24423,26093,26161,26671,29020,31286,37057,38922,20113,63941,27218,27550,28560,29065,32792,33464,34131,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,36939,38549,38642,38907,34074,39729,20112,29066,38596,20803,21407,21729,22291,22290,22435,23195,23236,23491,24616,24895,25588,27781,27961,28274,28304,29232,29503,29783,33489,34945,36677,36960,63942,38498,39e3,40219,26376,36234,37470,20301,20553,20702,21361,22285,22996,23041,23561,24944,26256,28205,29234,29771,32239,32963,33806,33894,34111,34655,34907,35096,35586,36949,38859,39759,20083,20369,20754,20842,63943,21807,21929,23418,23461,24188,24189,24254,24736,24799,24840,24841,25540,25912,26377,63944,26580,26586,63945,26977,26978,27833,27943,63946,28216,63947,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,28641,29494,29495,63948,29788,30001,63949,30290,63950,63951,32173,33278,33848,35029,35480,35547,35565,36400,36418,36938,36926,36986,37193,37321,37742,63952,63953,22537,63954,27603,32905,32946,63955,63956,20801,22891,23609,63957,63958,28516,29607,32996,36103,63959,37399,38287,63960,63961,63962,63963,32895,25102,28700,32104,34701,63964,22432,24681,24903,27575,35518,37504,38577,20057,21535,28139,34093,38512,38899,39150,25558,27875,37009,20957,25033,33210,40441,20381,20506,20736,23452,24847,25087,25836,26885,27589,30097,30691,32681,33380,34191,34811,34915,35516,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,35696,37291,20108,20197,20234,63965,63966,22839,23016,63967,24050,24347,24411,24609,63968,63969,63970,63971,29246,29669,63972,30064,30157,63973,31227,63974,32780,32819,32900,33505,33617,63975,63976,36029,36019,36999,63977,63978,39156,39180,63979,63980,28727,30410,32714,32716,32764,35610,20154,20161,20995,21360,63981,21693,22240,23035,23493,24341,24525,28270,63982,63983,32106,33589,63984,34451,35469,63985,38765,38775,63986,63987,19968,20314,20350,22777,26085,28322,36920,37808,39353,20219,22764,22922,23001,24641,63988,63989,31252,63990,33615,36035,20837,21316,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,63991,63992,63993,20173,21097,23381,33471,20180,21050,21672,22985,23039,23376,23383,23388,24675,24904,28363,28825,29038,29574,29943,30133,30913,32043,32773,33258,33576,34071,34249,35566,36039,38604,20316,21242,22204,26027,26152,28796,28856,29237,32189,33421,37196,38592,40306,23409,26855,27544,28538,30430,23697,26283,28507,31668,31786,34870,38620,19976,20183,21280,22580,22715,22767,22892,23559,24115,24196,24373,25484,26290,26454,27167,27299,27404,28479,29254,63994,29520,29835,31456,31911,33144,33247,33255,33674,33900,34083,34196,34255,35037,36115,37292,38263,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,38556,20877,21705,22312,23472,25165,26448,26685,26771,28221,28371,28797,32289,35009,36001,36617,40779,40782,29229,31631,35533,37658,20295,20302,20786,21632,22992,24213,25269,26485,26990,27159,27822,28186,29401,29482,30141,31672,32053,33511,33785,33879,34295,35419,36015,36487,36889,37048,38606,40799,21219,21514,23265,23490,25688,25973,28404,29380,63995,30340,31309,31515,31821,32318,32735,33659,35627,36042,36196,36321,36447,36842,36857,36969,37841,20291,20346,20659,20840,20856,21069,21098,22625,22652,22880,23560,23637,24283,24731,25136,26643,27583,27656,28593,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,29006,29728,3e4,30008,30033,30322,31564,31627,31661,31686,32399,35438,36670,36681,37439,37523,37666,37931,38651,39002,39019,39198,20999,25130,25240,27993,30308,31434,31680,32118,21344,23742,24215,28472,28857,31896,38673,39822,40670,25509,25722,34678,19969,20117,20141,20572,20597,21576,22979,23450,24128,24237,24311,24449,24773,25402,25919,25972,26060,26230,26232,26622,26984,27273,27491,27712,28096,28136,28191,28254,28702,28833,29582,29693,30010,30555,30855,31118,31243,31357,31934,32142,33351,35330,35562,35998,37165,37194,37336,37478,37580,37664,38662,38742,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,38748,38914,40718,21046,21137,21884,22564,24093,24351,24716,25552,26799,28639,31085,31532,33229,34234,35069,35576,36420,37261,38500,38555,38717,38988,40778,20430,20806,20939,21161,22066,24340,24427,25514,25805,26089,26177,26362,26361,26397,26781,26839,27133,28437,28526,29031,29157,29226,29866,30522,31062,31066,31199,31264,31381,31895,31967,32068,32368,32903,34299,34468,35412,35519,36249,36481,36896,36973,37347,38459,38613,40165,26063,31751,36275,37827,23384,23562,21330,25305,29469,20519,23447,24478,24752,24939,26837,28121,29742,31278,32066,32156,32305,33131,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,36394,36405,37758,37912,20304,22352,24038,24231,25387,32618,20027,20303,20367,20570,23005,32964,21610,21608,22014,22863,23449,24030,24282,26205,26417,26609,26666,27880,27954,28234,28557,28855,29664,30087,31820,32002,32044,32162,33311,34523,35387,35461,36208,36490,36659,36913,37198,37202,37956,39376,31481,31909,20426,20737,20934,22472,23535,23803,26201,27197,27994,28310,28652,28940,30063,31459,34850,36897,36981,38603,39423,33537,20013,20210,34886,37325,21373,27355,26987,27713,33914,22686,24974,26366,25327,28893,29969,30151,32338,33976,35657,36104,20043,21482,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,21675,22320,22336,24535,25345,25351,25711,25903,26088,26234,26525,26547,27490,27744,27802,28460,30693,30757,31049,31063,32025,32930,33026,33267,33437,33463,34584,35468,63996,36100,36286,36978,30452,31257,31287,32340,32887,21767,21972,22645,25391,25634,26185,26187,26733,27035,27524,27941,28337,29645,29800,29857,30043,30137,30433,30494,30603,31206,32265,32285,33275,34095,34967,35386,36049,36587,36784,36914,37805,38499,38515,38663,20356,21489,23018,23241,24089,26702,29894,30142,31209,31378,33187,34541,36074,36300,36845,26015,26389,63997,22519,28503,32221,36655,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,37878,38598,24501,25074,28548,19988,20376,20511,21449,21983,23919,24046,27425,27492,30923,31642,63998,36425,36554,36974,25417,25662,30528,31364,37679,38015,40810,25776,28591,29158,29864,29914,31428,31762,32386,31922,32408,35738,36106,38013,39184,39244,21049,23519,25830,26413,32046,20717,21443,22649,24920,24921,25082,26028,31449,35730,35734,20489,20513,21109,21809,23100,24288,24432,24884,25950,26124,26166,26274,27085,28356,28466,29462,30241,31379,33081,33369,33750,33980,20661,22512,23488,23528,24425,25505,30758,32181,33756,34081,37319,37365,20874,26613,31574,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,36012,20932,22971,24765,34389,20508,63999,21076,23610,24957,25114,25299,25842,26021,28364,30240,33034,36448,38495,38587,20191,21315,21912,22825,24029,25797,27849,28154,29588,31359,33307,34214,36068,36368,36983,37351,38369,38433,38854,20984,21746,21894,24505,25764,28552,32180,36639,36685,37941,20681,23574,27838,28155,29979,30651,31805,31844,35449,35522,22558,22974,24086,25463,29266,30090,30571,35548,36028,36626,24307,26228,28152,32893,33729,35531,38737,39894,64e3,21059,26367,28053,28399,32224,35558,36910,36958,39636,21021,21119,21736,24980,25220,25307,26786,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,26898,26970,27189,28818,28966,30813,30977,30990,31186,31245,32918,33400,33493,33609,34121,35970,36229,37218,37259,37294,20419,22225,29165,30679,34560,35320,23544,24534,26449,37032,21474,22618,23541,24740,24961,25696,32317,32880,34085,37507,25774,20652,23828,26368,22684,25277,25512,26894,27e3,27166,28267,30394,31179,33467,33833,35535,36264,36861,37138,37195,37276,37648,37656,37786,38619,39478,39949,19985,30044,31069,31482,31569,31689,32302,33988,36441,36468,36600,36880,26149,26943,29763,20986,26414,40668,20805,24544,27798,34802,34909,34935,24756,33205,33795,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,36101,21462,21561,22068,23094,23601,28810,32736,32858,33030,33261,36259,37257,39519,40434,20596,20164,21408,24827,28204,23652,20360,20516,21988,23769,24159,24677,26772,27835,28100,29118,30164,30196,30305,31258,31305,32199,32251,32622,33268,34473,36636,38601,39347,40786,21063,21189,39149,35242,19971,26578,28422,20405,23522,26517,27784,28024,29723,30759,37341,37756,34756,31204,31281,24555,20182,21668,21822,22702,22949,24816,25171,25302,26422,26965,33333,38464,39345,39389,20524,21331,21828,22396,64001,25176,64002,25826,26219,26589,28609,28655,29730,29752,35351,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,37944,21585,22022,22374,24392,24986,27470,28760,28845,32187,35477,22890,33067,25506,30472,32829,36010,22612,25645,27067,23445,24081,28271,64003,34153,20812,21488,22826,24608,24907,27526,27760,27888,31518,32974,33492,36294,37040,39089,64004,25799,28580,25745,25860,20814,21520,22303,35342,24927,26742,64005,30171,31570,32113,36890,22534,27084,33151,35114,36864,38969,20600,22871,22956,25237,36879,39722,24925,29305,38358,22369,23110,24052,25226,25773,25850,26487,27874,27966,29228,29750,30772,32631,33453,36315,38935,21028,22338,26495,29256,29923,36009,36774,37393,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,38442,20843,21485,25420,20329,21764,24726,25943,27803,28031,29260,29437,31255,35207,35997,24429,28558,28921,33192,24846,20415,20559,25153,29255,31687,32232,32745,36941,38829,39449,36022,22378,24179,26544,33805,35413,21536,23318,24163,24290,24330,25987,32954,34109,38281,38491,20296,21253,21261,21263,21638,21754,22275,24067,24598,25243,25265,25429,64006,27873,28006,30129,30770,32990,33071,33502,33889,33970,34957,35090,36875,37610,39165,39825,24133,26292,26333,28689,29190,64007,20469,21117,24426,24915,26451,27161,28418,29922,31080,34920,35961,39111,39108,39491,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,21697,31263,26963,35575,35914,39080,39342,24444,25259,30130,30382,34987,36991,38466,21305,24380,24517,27852,29644,30050,30091,31558,33534,39325,20047,36924,19979,20309,21414,22799,24264,26160,27827,29781,33655,34662,36032,36944,38686,39957,22737,23416,34384,35604,40372,23506,24680,24717,26097,27735,28450,28579,28698,32597,32752,38289,38290,38480,38867,21106,36676,20989,21547,21688,21859,21898,27323,28085,32216,33382,37532,38519,40569,21512,21704,30418,34532,38308,38356,38492,20130,20233,23022,23270,24055,24658,25239,26477,26689,27782,28207,32568,32923,33322,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,64008,64009,38917,20133,20565,21683,22419,22874,23401,23475,25032,26999,28023,28707,34809,35299,35442,35559,36994,39405,39608,21182,26680,20502,24184,26447,33607,34892,20139,21521,22190,29670,37141,38911,39177,39255,39321,22099,22687,34395,35377,25010,27382,29563,36562,27463,38570,39511,22869,29184,36203,38761,20436,23796,24358,25080,26203,27883,28843,29572,29625,29694,30505,30541,32067,32098,32291,33335,34898,64010,36066,37449,39023,23377,31348,34880,38913,23244,20448,21332,22846,23805,25406,28025,29433,33029,33031,33698,37583,38960,20136,20804,21009,22411,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,24418,27842,28366,28677,28752,28847,29074,29673,29801,33610,34722,34913,36872,37026,37795,39336,20846,24407,24800,24935,26291,34137,36426,37295,38795,20046,20114,21628,22741,22778,22909,23733,24359,25142,25160,26122,26215,27627,28009,28111,28246,28408,28564,28640,28649,28765,29392,29733,29786,29920,30355,31068,31946,32286,32993,33446,33899,33983,34382,34399,34676,35703,35946,37804,38912,39013,24785,25110,37239,23130,26127,28151,28222,29759,39746,24573,24794,31503,21700,24344,27742,27859,27946,28888,32005,34425,35340,40251,21270,21644,23301,27194,28779,30069,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,31117,31166,33457,33775,35441,35649,36008,38772,64011,25844,25899,30906,30907,31339,20024,21914,22864,23462,24187,24739,25563,27489,26213,26707,28185,29029,29872,32008,36996,39529,39973,27963,28369,29502,35905,38346,20976,24140,24488,24653,24822,24880,24908,26179,26180,27045,27841,28255,28361,28514,29004,29852,30343,31681,31783,33618,34647,36945,38541,40643,21295,22238,24315,24458,24674,24724,25079,26214,26371,27292,28142,28590,28784,29546,32362,33214,33588,34516,35496,36036,21123,29554,23446,27243,37892,21742,22150,23389,25928,25989,26313,26783,28045,28102,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,29243,32948,37237,39501,20399,20505,21402,21518,21564,21897,21957,24127,24460,26429,29030,29661,36869,21211,21235,22628,22734,28932,29071,29179,34224,35347,26248,34216,21927,26244,29002,33841,21321,21913,27585,24409,24509,25582,26249,28999,35569,36637,40638,20241,25658,28875,30054,34407,24676,35662,40440,20807,20982,21256,27958,33016,40657,26133,27427,28824,30165,21507,23673,32007,35350,27424,27453,27462,21560,24688,27965,32725,33288,20694,20958,21916,22123,22221,23020,23305,24076,24985,24984,25137,26206,26342,29081,29113,29114,29351,31143,31232,32690,35440,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],gb18030:[19970,19972,19973,19974,19983,19986,19991,19999,2e4,20001,20003,20006,20009,20014,20015,20017,20019,20021,20023,20028,20032,20033,20034,20036,20038,20042,20049,20053,20055,20058,20059,20066,20067,20068,20069,20071,20072,20074,20075,20076,20077,20078,20079,20082,20084,20085,20086,20087,20088,20089,20090,20091,20092,20093,20095,20096,20097,20098,20099,20100,20101,20103,20106,20112,20118,20119,20121,20124,20125,20126,20131,20138,20143,20144,20145,20148,20150,20151,20152,20153,20156,20157,20158,20168,20172,20175,20176,20178,20186,20187,20188,20192,20194,20198,20199,20201,20205,20206,20207,20209,20212,20216,20217,20218,20220,20222,20224,20226,20227,20228,20229,20230,20231,20232,20235,20236,20242,20243,20244,20245,20246,20252,20253,20257,20259,20264,20265,20268,20269,20270,20273,20275,20277,20279,20281,20283,20286,20287,20288,20289,20290,20292,20293,20295,20296,20297,20298,20299,20300,20306,20308,20310,20321,20322,20326,20328,20330,20331,20333,20334,20337,20338,20341,20343,20344,20345,20346,20349,20352,20353,20354,20357,20358,20359,20362,20364,20366,20368,20370,20371,20373,20374,20376,20377,20378,20380,20382,20383,20385,20386,20388,20395,20397,20400,20401,20402,20403,20404,20406,20407,20408,20409,20410,20411,20412,20413,20414,20416,20417,20418,20422,20423,20424,20425,20427,20428,20429,20434,20435,20436,20437,20438,20441,20443,20448,20450,20452,20453,20455,20459,20460,20464,20466,20468,20469,20470,20471,20473,20475,20476,20477,20479,20480,20481,20482,20483,20484,20485,20486,20487,20488,20489,20490,20491,20494,20496,20497,20499,20501,20502,20503,20507,20509,20510,20512,20514,20515,20516,20519,20523,20527,20528,20529,20530,20531,20532,20533,20534,20535,20536,20537,20539,20541,20543,20544,20545,20546,20548,20549,20550,20553,20554,20555,20557,20560,20561,20562,20563,20564,20566,20567,20568,20569,20571,20573,20574,20575,20576,20577,20578,20579,20580,20582,20583,20584,20585,20586,20587,20589,20590,20591,20592,20593,20594,20595,20596,20597,20600,20601,20602,20604,20605,20609,20610,20611,20612,20614,20615,20617,20618,20619,20620,20622,20623,20624,20625,20626,20627,20628,20629,20630,20631,20632,20633,20634,20635,20636,20637,20638,20639,20640,20641,20642,20644,20646,20650,20651,20653,20654,20655,20656,20657,20659,20660,20661,20662,20663,20664,20665,20668,20669,20670,20671,20672,20673,20674,20675,20676,20677,20678,20679,20680,20681,20682,20683,20684,20685,20686,20688,20689,20690,20691,20692,20693,20695,20696,20697,20699,20700,20701,20702,20703,20704,20705,20706,20707,20708,20709,20712,20713,20714,20715,20719,20720,20721,20722,20724,20726,20727,20728,20729,20730,20732,20733,20734,20735,20736,20737,20738,20739,20740,20741,20744,20745,20746,20748,20749,20750,20751,20752,20753,20755,20756,20757,20758,20759,20760,20761,20762,20763,20764,20765,20766,20767,20768,20770,20771,20772,20773,20774,20775,20776,20777,20778,20779,20780,20781,20782,20783,20784,20785,20786,20787,20788,20789,20790,20791,20792,20793,20794,20795,20796,20797,20798,20802,20807,20810,20812,20814,20815,20816,20818,20819,20823,20824,20825,20827,20829,20830,20831,20832,20833,20835,20836,20838,20839,20841,20842,20847,20850,20858,20862,20863,20867,20868,20870,20871,20874,20875,20878,20879,20880,20881,20883,20884,20888,20890,20893,20894,20895,20897,20899,20902,20903,20904,20905,20906,20909,20910,20916,20920,20921,20922,20926,20927,20929,20930,20931,20933,20936,20938,20941,20942,20944,20946,20947,20948,20949,20950,20951,20952,20953,20954,20956,20958,20959,20962,20963,20965,20966,20967,20968,20969,20970,20972,20974,20977,20978,20980,20983,20990,20996,20997,21001,21003,21004,21007,21008,21011,21012,21013,21020,21022,21023,21025,21026,21027,21029,21030,21031,21034,21036,21039,21041,21042,21044,21045,21052,21054,21060,21061,21062,21063,21064,21065,21067,21070,21071,21074,21075,21077,21079,21080,21081,21082,21083,21085,21087,21088,21090,21091,21092,21094,21096,21099,21100,21101,21102,21104,21105,21107,21108,21109,21110,21111,21112,21113,21114,21115,21116,21118,21120,21123,21124,21125,21126,21127,21129,21130,21131,21132,21133,21134,21135,21137,21138,21140,21141,21142,21143,21144,21145,21146,21148,21156,21157,21158,21159,21166,21167,21168,21172,21173,21174,21175,21176,21177,21178,21179,21180,21181,21184,21185,21186,21188,21189,21190,21192,21194,21196,21197,21198,21199,21201,21203,21204,21205,21207,21209,21210,21211,21212,21213,21214,21216,21217,21218,21219,21221,21222,21223,21224,21225,21226,21227,21228,21229,21230,21231,21233,21234,21235,21236,21237,21238,21239,21240,21243,21244,21245,21249,21250,21251,21252,21255,21257,21258,21259,21260,21262,21265,21266,21267,21268,21272,21275,21276,21278,21279,21282,21284,21285,21287,21288,21289,21291,21292,21293,21295,21296,21297,21298,21299,21300,21301,21302,21303,21304,21308,21309,21312,21314,21316,21318,21323,21324,21325,21328,21332,21336,21337,21339,21341,21349,21352,21354,21356,21357,21362,21366,21369,21371,21372,21373,21374,21376,21377,21379,21383,21384,21386,21390,21391,21392,21393,21394,21395,21396,21398,21399,21401,21403,21404,21406,21408,21409,21412,21415,21418,21419,21420,21421,21423,21424,21425,21426,21427,21428,21429,21431,21432,21433,21434,21436,21437,21438,21440,21443,21444,21445,21446,21447,21454,21455,21456,21458,21459,21461,21466,21468,21469,21470,21473,21474,21479,21492,21498,21502,21503,21504,21506,21509,21511,21515,21524,21528,21529,21530,21532,21538,21540,21541,21546,21552,21555,21558,21559,21562,21565,21567,21569,21570,21572,21573,21575,21577,21580,21581,21582,21583,21585,21594,21597,21598,21599,21600,21601,21603,21605,21607,21609,21610,21611,21612,21613,21614,21615,21616,21620,21625,21626,21630,21631,21633,21635,21637,21639,21640,21641,21642,21645,21649,21651,21655,21656,21660,21662,21663,21664,21665,21666,21669,21678,21680,21682,21685,21686,21687,21689,21690,21692,21694,21699,21701,21706,21707,21718,21720,21723,21728,21729,21730,21731,21732,21739,21740,21743,21744,21745,21748,21749,21750,21751,21752,21753,21755,21758,21760,21762,21763,21764,21765,21768,21770,21771,21772,21773,21774,21778,21779,21781,21782,21783,21784,21785,21786,21788,21789,21790,21791,21793,21797,21798,21800,21801,21803,21805,21810,21812,21813,21814,21816,21817,21818,21819,21821,21824,21826,21829,21831,21832,21835,21836,21837,21838,21839,21841,21842,21843,21844,21847,21848,21849,21850,21851,21853,21854,21855,21856,21858,21859,21864,21865,21867,21871,21872,21873,21874,21875,21876,21881,21882,21885,21887,21893,21894,21900,21901,21902,21904,21906,21907,21909,21910,21911,21914,21915,21918,21920,21921,21922,21923,21924,21925,21926,21928,21929,21930,21931,21932,21933,21934,21935,21936,21938,21940,21942,21944,21946,21948,21951,21952,21953,21954,21955,21958,21959,21960,21962,21963,21966,21967,21968,21973,21975,21976,21977,21978,21979,21982,21984,21986,21991,21993,21997,21998,22e3,22001,22004,22006,22008,22009,22010,22011,22012,22015,22018,22019,22020,22021,22022,22023,22026,22027,22029,22032,22033,22034,22035,22036,22037,22038,22039,22041,22042,22044,22045,22048,22049,22050,22053,22054,22056,22057,22058,22059,22062,22063,22064,22067,22069,22071,22072,22074,22076,22077,22078,22080,22081,22082,22083,22084,22085,22086,22087,22088,22089,22090,22091,22095,22096,22097,22098,22099,22101,22102,22106,22107,22109,22110,22111,22112,22113,22115,22117,22118,22119,22125,22126,22127,22128,22130,22131,22132,22133,22135,22136,22137,22138,22141,22142,22143,22144,22145,22146,22147,22148,22151,22152,22153,22154,22155,22156,22157,22160,22161,22162,22164,22165,22166,22167,22168,22169,22170,22171,22172,22173,22174,22175,22176,22177,22178,22180,22181,22182,22183,22184,22185,22186,22187,22188,22189,22190,22192,22193,22194,22195,22196,22197,22198,22200,22201,22202,22203,22205,22206,22207,22208,22209,22210,22211,22212,22213,22214,22215,22216,22217,22219,22220,22221,22222,22223,22224,22225,22226,22227,22229,22230,22232,22233,22236,22243,22245,22246,22247,22248,22249,22250,22252,22254,22255,22258,22259,22262,22263,22264,22267,22268,22272,22273,22274,22277,22279,22283,22284,22285,22286,22287,22288,22289,22290,22291,22292,22293,22294,22295,22296,22297,22298,22299,22301,22302,22304,22305,22306,22308,22309,22310,22311,22315,22321,22322,22324,22325,22326,22327,22328,22332,22333,22335,22337,22339,22340,22341,22342,22344,22345,22347,22354,22355,22356,22357,22358,22360,22361,22370,22371,22373,22375,22380,22382,22384,22385,22386,22388,22389,22392,22393,22394,22397,22398,22399,22400,22401,22407,22408,22409,22410,22413,22414,22415,22416,22417,22420,22421,22422,22423,22424,22425,22426,22428,22429,22430,22431,22437,22440,22442,22444,22447,22448,22449,22451,22453,22454,22455,22457,22458,22459,22460,22461,22462,22463,22464,22465,22468,22469,22470,22471,22472,22473,22474,22476,22477,22480,22481,22483,22486,22487,22491,22492,22494,22497,22498,22499,22501,22502,22503,22504,22505,22506,22507,22508,22510,22512,22513,22514,22515,22517,22518,22519,22523,22524,22526,22527,22529,22531,22532,22533,22536,22537,22538,22540,22542,22543,22544,22546,22547,22548,22550,22551,22552,22554,22555,22556,22557,22559,22562,22563,22565,22566,22567,22568,22569,22571,22572,22573,22574,22575,22577,22578,22579,22580,22582,22583,22584,22585,22586,22587,22588,22589,22590,22591,22592,22593,22594,22595,22597,22598,22599,22600,22601,22602,22603,22606,22607,22608,22610,22611,22613,22614,22615,22617,22618,22619,22620,22621,22623,22624,22625,22626,22627,22628,22630,22631,22632,22633,22634,22637,22638,22639,22640,22641,22642,22643,22644,22645,22646,22647,22648,22649,22650,22651,22652,22653,22655,22658,22660,22662,22663,22664,22666,22667,22668,22669,22670,22671,22672,22673,22676,22677,22678,22679,22680,22683,22684,22685,22688,22689,22690,22691,22692,22693,22694,22695,22698,22699,22700,22701,22702,22703,22704,22705,22706,22707,22708,22709,22710,22711,22712,22713,22714,22715,22717,22718,22719,22720,22722,22723,22724,22726,22727,22728,22729,22730,22731,22732,22733,22734,22735,22736,22738,22739,22740,22742,22743,22744,22745,22746,22747,22748,22749,22750,22751,22752,22753,22754,22755,22757,22758,22759,22760,22761,22762,22765,22767,22769,22770,22772,22773,22775,22776,22778,22779,22780,22781,22782,22783,22784,22785,22787,22789,22790,22792,22793,22794,22795,22796,22798,22800,22801,22802,22803,22807,22808,22811,22813,22814,22816,22817,22818,22819,22822,22824,22828,22832,22834,22835,22837,22838,22843,22845,22846,22847,22848,22851,22853,22854,22858,22860,22861,22864,22866,22867,22873,22875,22876,22877,22878,22879,22881,22883,22884,22886,22887,22888,22889,22890,22891,22892,22893,22894,22895,22896,22897,22898,22901,22903,22906,22907,22908,22910,22911,22912,22917,22921,22923,22924,22926,22927,22928,22929,22932,22933,22936,22938,22939,22940,22941,22943,22944,22945,22946,22950,22951,22956,22957,22960,22961,22963,22964,22965,22966,22967,22968,22970,22972,22973,22975,22976,22977,22978,22979,22980,22981,22983,22984,22985,22988,22989,22990,22991,22997,22998,23001,23003,23006,23007,23008,23009,23010,23012,23014,23015,23017,23018,23019,23021,23022,23023,23024,23025,23026,23027,23028,23029,23030,23031,23032,23034,23036,23037,23038,23040,23042,23050,23051,23053,23054,23055,23056,23058,23060,23061,23062,23063,23065,23066,23067,23069,23070,23073,23074,23076,23078,23079,23080,23082,23083,23084,23085,23086,23087,23088,23091,23093,23095,23096,23097,23098,23099,23101,23102,23103,23105,23106,23107,23108,23109,23111,23112,23115,23116,23117,23118,23119,23120,23121,23122,23123,23124,23126,23127,23128,23129,23131,23132,23133,23134,23135,23136,23137,23139,23140,23141,23142,23144,23145,23147,23148,23149,23150,23151,23152,23153,23154,23155,23160,23161,23163,23164,23165,23166,23168,23169,23170,23171,23172,23173,23174,23175,23176,23177,23178,23179,23180,23181,23182,23183,23184,23185,23187,23188,23189,23190,23191,23192,23193,23196,23197,23198,23199,23200,23201,23202,23203,23204,23205,23206,23207,23208,23209,23211,23212,23213,23214,23215,23216,23217,23220,23222,23223,23225,23226,23227,23228,23229,23231,23232,23235,23236,23237,23238,23239,23240,23242,23243,23245,23246,23247,23248,23249,23251,23253,23255,23257,23258,23259,23261,23262,23263,23266,23268,23269,23271,23272,23274,23276,23277,23278,23279,23280,23282,23283,23284,23285,23286,23287,23288,23289,23290,23291,23292,23293,23294,23295,23296,23297,23298,23299,23300,23301,23302,23303,23304,23306,23307,23308,23309,23310,23311,23312,23313,23314,23315,23316,23317,23320,23321,23322,23323,23324,23325,23326,23327,23328,23329,23330,23331,23332,23333,23334,23335,23336,23337,23338,23339,23340,23341,23342,23343,23344,23345,23347,23349,23350,23352,23353,23354,23355,23356,23357,23358,23359,23361,23362,23363,23364,23365,23366,23367,23368,23369,23370,23371,23372,23373,23374,23375,23378,23382,23390,23392,23393,23399,23400,23403,23405,23406,23407,23410,23412,23414,23415,23416,23417,23419,23420,23422,23423,23426,23430,23434,23437,23438,23440,23441,23442,23444,23446,23455,23463,23464,23465,23468,23469,23470,23471,23473,23474,23479,23482,23483,23484,23488,23489,23491,23496,23497,23498,23499,23501,23502,23503,23505,23508,23509,23510,23511,23512,23513,23514,23515,23516,23520,23522,23523,23526,23527,23529,23530,23531,23532,23533,23535,23537,23538,23539,23540,23541,23542,23543,23549,23550,23552,23554,23555,23557,23559,23560,23563,23564,23565,23566,23568,23570,23571,23575,23577,23579,23582,23583,23584,23585,23587,23590,23592,23593,23594,23595,23597,23598,23599,23600,23602,23603,23605,23606,23607,23619,23620,23622,23623,23628,23629,23634,23635,23636,23638,23639,23640,23642,23643,23644,23645,23647,23650,23652,23655,23656,23657,23658,23659,23660,23661,23664,23666,23667,23668,23669,23670,23671,23672,23675,23676,23677,23678,23680,23683,23684,23685,23686,23687,23689,23690,23691,23694,23695,23698,23699,23701,23709,23710,23711,23712,23713,23716,23717,23718,23719,23720,23722,23726,23727,23728,23730,23732,23734,23737,23738,23739,23740,23742,23744,23746,23747,23749,23750,23751,23752,23753,23754,23756,23757,23758,23759,23760,23761,23763,23764,23765,23766,23767,23768,23770,23771,23772,23773,23774,23775,23776,23778,23779,23783,23785,23787,23788,23790,23791,23793,23794,23795,23796,23797,23798,23799,23800,23801,23802,23804,23805,23806,23807,23808,23809,23812,23813,23816,23817,23818,23819,23820,23821,23823,23824,23825,23826,23827,23829,23831,23832,23833,23834,23836,23837,23839,23840,23841,23842,23843,23845,23848,23850,23851,23852,23855,23856,23857,23858,23859,23861,23862,23863,23864,23865,23866,23867,23868,23871,23872,23873,23874,23875,23876,23877,23878,23880,23881,23885,23886,23887,23888,23889,23890,23891,23892,23893,23894,23895,23897,23898,23900,23902,23903,23904,23905,23906,23907,23908,23909,23910,23911,23912,23914,23917,23918,23920,23921,23922,23923,23925,23926,23927,23928,23929,23930,23931,23932,23933,23934,23935,23936,23937,23939,23940,23941,23942,23943,23944,23945,23946,23947,23948,23949,23950,23951,23952,23953,23954,23955,23956,23957,23958,23959,23960,23962,23963,23964,23966,23967,23968,23969,23970,23971,23972,23973,23974,23975,23976,23977,23978,23979,23980,23981,23982,23983,23984,23985,23986,23987,23988,23989,23990,23992,23993,23994,23995,23996,23997,23998,23999,24e3,24001,24002,24003,24004,24006,24007,24008,24009,24010,24011,24012,24014,24015,24016,24017,24018,24019,24020,24021,24022,24023,24024,24025,24026,24028,24031,24032,24035,24036,24042,24044,24045,24048,24053,24054,24056,24057,24058,24059,24060,24063,24064,24068,24071,24073,24074,24075,24077,24078,24082,24083,24087,24094,24095,24096,24097,24098,24099,24100,24101,24104,24105,24106,24107,24108,24111,24112,24114,24115,24116,24117,24118,24121,24122,24126,24127,24128,24129,24131,24134,24135,24136,24137,24138,24139,24141,24142,24143,24144,24145,24146,24147,24150,24151,24152,24153,24154,24156,24157,24159,24160,24163,24164,24165,24166,24167,24168,24169,24170,24171,24172,24173,24174,24175,24176,24177,24181,24183,24185,24190,24193,24194,24195,24197,24200,24201,24204,24205,24206,24210,24216,24219,24221,24225,24226,24227,24228,24232,24233,24234,24235,24236,24238,24239,24240,24241,24242,24244,24250,24251,24252,24253,24255,24256,24257,24258,24259,24260,24261,24262,24263,24264,24267,24268,24269,24270,24271,24272,24276,24277,24279,24280,24281,24282,24284,24285,24286,24287,24288,24289,24290,24291,24292,24293,24294,24295,24297,24299,24300,24301,24302,24303,24304,24305,24306,24307,24309,24312,24313,24315,24316,24317,24325,24326,24327,24329,24332,24333,24334,24336,24338,24340,24342,24345,24346,24348,24349,24350,24353,24354,24355,24356,24360,24363,24364,24366,24368,24370,24371,24372,24373,24374,24375,24376,24379,24381,24382,24383,24385,24386,24387,24388,24389,24390,24391,24392,24393,24394,24395,24396,24397,24398,24399,24401,24404,24409,24410,24411,24412,24414,24415,24416,24419,24421,24423,24424,24427,24430,24431,24434,24436,24437,24438,24440,24442,24445,24446,24447,24451,24454,24461,24462,24463,24465,24467,24468,24470,24474,24475,24477,24478,24479,24480,24482,24483,24484,24485,24486,24487,24489,24491,24492,24495,24496,24497,24498,24499,24500,24502,24504,24505,24506,24507,24510,24511,24512,24513,24514,24519,24520,24522,24523,24526,24531,24532,24533,24538,24539,24540,24542,24543,24546,24547,24549,24550,24552,24553,24556,24559,24560,24562,24563,24564,24566,24567,24569,24570,24572,24583,24584,24585,24587,24588,24592,24593,24595,24599,24600,24602,24606,24607,24610,24611,24612,24620,24621,24622,24624,24625,24626,24627,24628,24630,24631,24632,24633,24634,24637,24638,24640,24644,24645,24646,24647,24648,24649,24650,24652,24654,24655,24657,24659,24660,24662,24663,24664,24667,24668,24670,24671,24672,24673,24677,24678,24686,24689,24690,24692,24693,24695,24702,24704,24705,24706,24709,24710,24711,24712,24714,24715,24718,24719,24720,24721,24723,24725,24727,24728,24729,24732,24734,24737,24738,24740,24741,24743,24745,24746,24750,24752,24755,24757,24758,24759,24761,24762,24765,24766,24767,24768,24769,24770,24771,24772,24775,24776,24777,24780,24781,24782,24783,24784,24786,24787,24788,24790,24791,24793,24795,24798,24801,24802,24803,24804,24805,24810,24817,24818,24821,24823,24824,24827,24828,24829,24830,24831,24834,24835,24836,24837,24839,24842,24843,24844,24848,24849,24850,24851,24852,24854,24855,24856,24857,24859,24860,24861,24862,24865,24866,24869,24872,24873,24874,24876,24877,24878,24879,24880,24881,24882,24883,24884,24885,24886,24887,24888,24889,24890,24891,24892,24893,24894,24896,24897,24898,24899,24900,24901,24902,24903,24905,24907,24909,24911,24912,24914,24915,24916,24918,24919,24920,24921,24922,24923,24924,24926,24927,24928,24929,24931,24932,24933,24934,24937,24938,24939,24940,24941,24942,24943,24945,24946,24947,24948,24950,24952,24953,24954,24955,24956,24957,24958,24959,24960,24961,24962,24963,24964,24965,24966,24967,24968,24969,24970,24972,24973,24975,24976,24977,24978,24979,24981,24982,24983,24984,24985,24986,24987,24988,24990,24991,24992,24993,24994,24995,24996,24997,24998,25002,25003,25005,25006,25007,25008,25009,25010,25011,25012,25013,25014,25016,25017,25018,25019,25020,25021,25023,25024,25025,25027,25028,25029,25030,25031,25033,25036,25037,25038,25039,25040,25043,25045,25046,25047,25048,25049,25050,25051,25052,25053,25054,25055,25056,25057,25058,25059,25060,25061,25063,25064,25065,25066,25067,25068,25069,25070,25071,25072,25073,25074,25075,25076,25078,25079,25080,25081,25082,25083,25084,25085,25086,25088,25089,25090,25091,25092,25093,25095,25097,25107,25108,25113,25116,25117,25118,25120,25123,25126,25127,25128,25129,25131,25133,25135,25136,25137,25138,25141,25142,25144,25145,25146,25147,25148,25154,25156,25157,25158,25162,25167,25168,25173,25174,25175,25177,25178,25180,25181,25182,25183,25184,25185,25186,25188,25189,25192,25201,25202,25204,25205,25207,25208,25210,25211,25213,25217,25218,25219,25221,25222,25223,25224,25227,25228,25229,25230,25231,25232,25236,25241,25244,25245,25246,25251,25254,25255,25257,25258,25261,25262,25263,25264,25266,25267,25268,25270,25271,25272,25274,25278,25280,25281,25283,25291,25295,25297,25301,25309,25310,25312,25313,25316,25322,25323,25328,25330,25333,25336,25337,25338,25339,25344,25347,25348,25349,25350,25354,25355,25356,25357,25359,25360,25362,25363,25364,25365,25367,25368,25369,25372,25382,25383,25385,25388,25389,25390,25392,25393,25395,25396,25397,25398,25399,25400,25403,25404,25406,25407,25408,25409,25412,25415,25416,25418,25425,25426,25427,25428,25430,25431,25432,25433,25434,25435,25436,25437,25440,25444,25445,25446,25448,25450,25451,25452,25455,25456,25458,25459,25460,25461,25464,25465,25468,25469,25470,25471,25473,25475,25476,25477,25478,25483,25485,25489,25491,25492,25493,25495,25497,25498,25499,25500,25501,25502,25503,25505,25508,25510,25515,25519,25521,25522,25525,25526,25529,25531,25533,25535,25536,25537,25538,25539,25541,25543,25544,25546,25547,25548,25553,25555,25556,25557,25559,25560,25561,25562,25563,25564,25565,25567,25570,25572,25573,25574,25575,25576,25579,25580,25582,25583,25584,25585,25587,25589,25591,25593,25594,25595,25596,25598,25603,25604,25606,25607,25608,25609,25610,25613,25614,25617,25618,25621,25622,25623,25624,25625,25626,25629,25631,25634,25635,25636,25637,25639,25640,25641,25643,25646,25647,25648,25649,25650,25651,25653,25654,25655,25656,25657,25659,25660,25662,25664,25666,25667,25673,25675,25676,25677,25678,25679,25680,25681,25683,25685,25686,25687,25689,25690,25691,25692,25693,25695,25696,25697,25698,25699,25700,25701,25702,25704,25706,25707,25708,25710,25711,25712,25713,25714,25715,25716,25717,25718,25719,25723,25724,25725,25726,25727,25728,25729,25731,25734,25736,25737,25738,25739,25740,25741,25742,25743,25744,25747,25748,25751,25752,25754,25755,25756,25757,25759,25760,25761,25762,25763,25765,25766,25767,25768,25770,25771,25775,25777,25778,25779,25780,25782,25785,25787,25789,25790,25791,25793,25795,25796,25798,25799,25800,25801,25802,25803,25804,25807,25809,25811,25812,25813,25814,25817,25818,25819,25820,25821,25823,25824,25825,25827,25829,25831,25832,25833,25834,25835,25836,25837,25838,25839,25840,25841,25842,25843,25844,25845,25846,25847,25848,25849,25850,25851,25852,25853,25854,25855,25857,25858,25859,25860,25861,25862,25863,25864,25866,25867,25868,25869,25870,25871,25872,25873,25875,25876,25877,25878,25879,25881,25882,25883,25884,25885,25886,25887,25888,25889,25890,25891,25892,25894,25895,25896,25897,25898,25900,25901,25904,25905,25906,25907,25911,25914,25916,25917,25920,25921,25922,25923,25924,25926,25927,25930,25931,25933,25934,25936,25938,25939,25940,25943,25944,25946,25948,25951,25952,25953,25956,25957,25959,25960,25961,25962,25965,25966,25967,25969,25971,25973,25974,25976,25977,25978,25979,25980,25981,25982,25983,25984,25985,25986,25987,25988,25989,25990,25992,25993,25994,25997,25998,25999,26002,26004,26005,26006,26008,26010,26013,26014,26016,26018,26019,26022,26024,26026,26028,26030,26033,26034,26035,26036,26037,26038,26039,26040,26042,26043,26046,26047,26048,26050,26055,26056,26057,26058,26061,26064,26065,26067,26068,26069,26072,26073,26074,26075,26076,26077,26078,26079,26081,26083,26084,26090,26091,26098,26099,26100,26101,26104,26105,26107,26108,26109,26110,26111,26113,26116,26117,26119,26120,26121,26123,26125,26128,26129,26130,26134,26135,26136,26138,26139,26140,26142,26145,26146,26147,26148,26150,26153,26154,26155,26156,26158,26160,26162,26163,26167,26168,26169,26170,26171,26173,26175,26176,26178,26180,26181,26182,26183,26184,26185,26186,26189,26190,26192,26193,26200,26201,26203,26204,26205,26206,26208,26210,26211,26213,26215,26217,26218,26219,26220,26221,26225,26226,26227,26229,26232,26233,26235,26236,26237,26239,26240,26241,26243,26245,26246,26248,26249,26250,26251,26253,26254,26255,26256,26258,26259,26260,26261,26264,26265,26266,26267,26268,26270,26271,26272,26273,26274,26275,26276,26277,26278,26281,26282,26283,26284,26285,26287,26288,26289,26290,26291,26293,26294,26295,26296,26298,26299,26300,26301,26303,26304,26305,26306,26307,26308,26309,26310,26311,26312,26313,26314,26315,26316,26317,26318,26319,26320,26321,26322,26323,26324,26325,26326,26327,26328,26330,26334,26335,26336,26337,26338,26339,26340,26341,26343,26344,26346,26347,26348,26349,26350,26351,26353,26357,26358,26360,26362,26363,26365,26369,26370,26371,26372,26373,26374,26375,26380,26382,26383,26385,26386,26387,26390,26392,26393,26394,26396,26398,26400,26401,26402,26403,26404,26405,26407,26409,26414,26416,26418,26419,26422,26423,26424,26425,26427,26428,26430,26431,26433,26436,26437,26439,26442,26443,26445,26450,26452,26453,26455,26456,26457,26458,26459,26461,26466,26467,26468,26470,26471,26475,26476,26478,26481,26484,26486,26488,26489,26490,26491,26493,26496,26498,26499,26501,26502,26504,26506,26508,26509,26510,26511,26513,26514,26515,26516,26518,26521,26523,26527,26528,26529,26532,26534,26537,26540,26542,26545,26546,26548,26553,26554,26555,26556,26557,26558,26559,26560,26562,26565,26566,26567,26568,26569,26570,26571,26572,26573,26574,26581,26582,26583,26587,26591,26593,26595,26596,26598,26599,26600,26602,26603,26605,26606,26610,26613,26614,26615,26616,26617,26618,26619,26620,26622,26625,26626,26627,26628,26630,26637,26640,26642,26644,26645,26648,26649,26650,26651,26652,26654,26655,26656,26658,26659,26660,26661,26662,26663,26664,26667,26668,26669,26670,26671,26672,26673,26676,26677,26678,26682,26683,26687,26695,26699,26701,26703,26706,26710,26711,26712,26713,26714,26715,26716,26717,26718,26719,26730,26732,26733,26734,26735,26736,26737,26738,26739,26741,26744,26745,26746,26747,26748,26749,26750,26751,26752,26754,26756,26759,26760,26761,26762,26763,26764,26765,26766,26768,26769,26770,26772,26773,26774,26776,26777,26778,26779,26780,26781,26782,26783,26784,26785,26787,26788,26789,26793,26794,26795,26796,26798,26801,26802,26804,26806,26807,26808,26809,26810,26811,26812,26813,26814,26815,26817,26819,26820,26821,26822,26823,26824,26826,26828,26830,26831,26832,26833,26835,26836,26838,26839,26841,26843,26844,26845,26846,26847,26849,26850,26852,26853,26854,26855,26856,26857,26858,26859,26860,26861,26863,26866,26867,26868,26870,26871,26872,26875,26877,26878,26879,26880,26882,26883,26884,26886,26887,26888,26889,26890,26892,26895,26897,26899,26900,26901,26902,26903,26904,26905,26906,26907,26908,26909,26910,26913,26914,26915,26917,26918,26919,26920,26921,26922,26923,26924,26926,26927,26929,26930,26931,26933,26934,26935,26936,26938,26939,26940,26942,26944,26945,26947,26948,26949,26950,26951,26952,26953,26954,26955,26956,26957,26958,26959,26960,26961,26962,26963,26965,26966,26968,26969,26971,26972,26975,26977,26978,26980,26981,26983,26984,26985,26986,26988,26989,26991,26992,26994,26995,26996,26997,26998,27002,27003,27005,27006,27007,27009,27011,27013,27018,27019,27020,27022,27023,27024,27025,27026,27027,27030,27031,27033,27034,27037,27038,27039,27040,27041,27042,27043,27044,27045,27046,27049,27050,27052,27054,27055,27056,27058,27059,27061,27062,27064,27065,27066,27068,27069,27070,27071,27072,27074,27075,27076,27077,27078,27079,27080,27081,27083,27085,27087,27089,27090,27091,27093,27094,27095,27096,27097,27098,27100,27101,27102,27105,27106,27107,27108,27109,27110,27111,27112,27113,27114,27115,27116,27118,27119,27120,27121,27123,27124,27125,27126,27127,27128,27129,27130,27131,27132,27134,27136,27137,27138,27139,27140,27141,27142,27143,27144,27145,27147,27148,27149,27150,27151,27152,27153,27154,27155,27156,27157,27158,27161,27162,27163,27164,27165,27166,27168,27170,27171,27172,27173,27174,27175,27177,27179,27180,27181,27182,27184,27186,27187,27188,27190,27191,27192,27193,27194,27195,27196,27199,27200,27201,27202,27203,27205,27206,27208,27209,27210,27211,27212,27213,27214,27215,27217,27218,27219,27220,27221,27222,27223,27226,27228,27229,27230,27231,27232,27234,27235,27236,27238,27239,27240,27241,27242,27243,27244,27245,27246,27247,27248,27250,27251,27252,27253,27254,27255,27256,27258,27259,27261,27262,27263,27265,27266,27267,27269,27270,27271,27272,27273,27274,27275,27276,27277,27279,27282,27283,27284,27285,27286,27288,27289,27290,27291,27292,27293,27294,27295,27297,27298,27299,27300,27301,27302,27303,27304,27306,27309,27310,27311,27312,27313,27314,27315,27316,27317,27318,27319,27320,27321,27322,27323,27324,27325,27326,27327,27328,27329,27330,27331,27332,27333,27334,27335,27336,27337,27338,27339,27340,27341,27342,27343,27344,27345,27346,27347,27348,27349,27350,27351,27352,27353,27354,27355,27356,27357,27358,27359,27360,27361,27362,27363,27364,27365,27366,27367,27368,27369,27370,27371,27372,27373,27374,27375,27376,27377,27378,27379,27380,27381,27382,27383,27384,27385,27386,27387,27388,27389,27390,27391,27392,27393,27394,27395,27396,27397,27398,27399,27400,27401,27402,27403,27404,27405,27406,27407,27408,27409,27410,27411,27412,27413,27414,27415,27416,27417,27418,27419,27420,27421,27422,27423,27429,27430,27432,27433,27434,27435,27436,27437,27438,27439,27440,27441,27443,27444,27445,27446,27448,27451,27452,27453,27455,27456,27457,27458,27460,27461,27464,27466,27467,27469,27470,27471,27472,27473,27474,27475,27476,27477,27478,27479,27480,27482,27483,27484,27485,27486,27487,27488,27489,27496,27497,27499,27500,27501,27502,27503,27504,27505,27506,27507,27508,27509,27510,27511,27512,27514,27517,27518,27519,27520,27525,27528,27532,27534,27535,27536,27537,27540,27541,27543,27544,27545,27548,27549,27550,27551,27552,27554,27555,27556,27557,27558,27559,27560,27561,27563,27564,27565,27566,27567,27568,27569,27570,27574,27576,27577,27578,27579,27580,27581,27582,27584,27587,27588,27590,27591,27592,27593,27594,27596,27598,27600,27601,27608,27610,27612,27613,27614,27615,27616,27618,27619,27620,27621,27622,27623,27624,27625,27628,27629,27630,27632,27633,27634,27636,27638,27639,27640,27642,27643,27644,27646,27647,27648,27649,27650,27651,27652,27656,27657,27658,27659,27660,27662,27666,27671,27676,27677,27678,27680,27683,27685,27691,27692,27693,27697,27699,27702,27703,27705,27706,27707,27708,27710,27711,27715,27716,27717,27720,27723,27724,27725,27726,27727,27729,27730,27731,27734,27736,27737,27738,27746,27747,27749,27750,27751,27755,27756,27757,27758,27759,27761,27763,27765,27767,27768,27770,27771,27772,27775,27776,27780,27783,27786,27787,27789,27790,27793,27794,27797,27798,27799,27800,27802,27804,27805,27806,27808,27810,27816,27820,27823,27824,27828,27829,27830,27831,27834,27840,27841,27842,27843,27846,27847,27848,27851,27853,27854,27855,27857,27858,27864,27865,27866,27868,27869,27871,27876,27878,27879,27881,27884,27885,27890,27892,27897,27903,27904,27906,27907,27909,27910,27912,27913,27914,27917,27919,27920,27921,27923,27924,27925,27926,27928,27932,27933,27935,27936,27937,27938,27939,27940,27942,27944,27945,27948,27949,27951,27952,27956,27958,27959,27960,27962,27967,27968,27970,27972,27977,27980,27984,27989,27990,27991,27992,27995,27997,27999,28001,28002,28004,28005,28007,28008,28011,28012,28013,28016,28017,28018,28019,28021,28022,28025,28026,28027,28029,28030,28031,28032,28033,28035,28036,28038,28039,28042,28043,28045,28047,28048,28050,28054,28055,28056,28057,28058,28060,28066,28069,28076,28077,28080,28081,28083,28084,28086,28087,28089,28090,28091,28092,28093,28094,28097,28098,28099,28104,28105,28106,28109,28110,28111,28112,28114,28115,28116,28117,28119,28122,28123,28124,28127,28130,28131,28133,28135,28136,28137,28138,28141,28143,28144,28146,28148,28149,28150,28152,28154,28157,28158,28159,28160,28161,28162,28163,28164,28166,28167,28168,28169,28171,28175,28178,28179,28181,28184,28185,28187,28188,28190,28191,28194,28198,28199,28200,28202,28204,28206,28208,28209,28211,28213,28214,28215,28217,28219,28220,28221,28222,28223,28224,28225,28226,28229,28230,28231,28232,28233,28234,28235,28236,28239,28240,28241,28242,28245,28247,28249,28250,28252,28253,28254,28256,28257,28258,28259,28260,28261,28262,28263,28264,28265,28266,28268,28269,28271,28272,28273,28274,28275,28276,28277,28278,28279,28280,28281,28282,28283,28284,28285,28288,28289,28290,28292,28295,28296,28298,28299,28300,28301,28302,28305,28306,28307,28308,28309,28310,28311,28313,28314,28315,28317,28318,28320,28321,28323,28324,28326,28328,28329,28331,28332,28333,28334,28336,28339,28341,28344,28345,28348,28350,28351,28352,28355,28356,28357,28358,28360,28361,28362,28364,28365,28366,28368,28370,28374,28376,28377,28379,28380,28381,28387,28391,28394,28395,28396,28397,28398,28399,28400,28401,28402,28403,28405,28406,28407,28408,28410,28411,28412,28413,28414,28415,28416,28417,28419,28420,28421,28423,28424,28426,28427,28428,28429,28430,28432,28433,28434,28438,28439,28440,28441,28442,28443,28444,28445,28446,28447,28449,28450,28451,28453,28454,28455,28456,28460,28462,28464,28466,28468,28469,28471,28472,28473,28474,28475,28476,28477,28479,28480,28481,28482,28483,28484,28485,28488,28489,28490,28492,28494,28495,28496,28497,28498,28499,28500,28501,28502,28503,28505,28506,28507,28509,28511,28512,28513,28515,28516,28517,28519,28520,28521,28522,28523,28524,28527,28528,28529,28531,28533,28534,28535,28537,28539,28541,28542,28543,28544,28545,28546,28547,28549,28550,28551,28554,28555,28559,28560,28561,28562,28563,28564,28565,28566,28567,28568,28569,28570,28571,28573,28574,28575,28576,28578,28579,28580,28581,28582,28584,28585,28586,28587,28588,28589,28590,28591,28592,28593,28594,28596,28597,28599,28600,28602,28603,28604,28605,28606,28607,28609,28611,28612,28613,28614,28615,28616,28618,28619,28620,28621,28622,28623,28624,28627,28628,28629,28630,28631,28632,28633,28634,28635,28636,28637,28639,28642,28643,28644,28645,28646,28647,28648,28649,28650,28651,28652,28653,28656,28657,28658,28659,28660,28661,28662,28663,28664,28665,28666,28667,28668,28669,28670,28671,28672,28673,28674,28675,28676,28677,28678,28679,28680,28681,28682,28683,28684,28685,28686,28687,28688,28690,28691,28692,28693,28694,28695,28696,28697,28700,28701,28702,28703,28704,28705,28706,28708,28709,28710,28711,28712,28713,28714,28715,28716,28717,28718,28719,28720,28721,28722,28723,28724,28726,28727,28728,28730,28731,28732,28733,28734,28735,28736,28737,28738,28739,28740,28741,28742,28743,28744,28745,28746,28747,28749,28750,28752,28753,28754,28755,28756,28757,28758,28759,28760,28761,28762,28763,28764,28765,28767,28768,28769,28770,28771,28772,28773,28774,28775,28776,28777,28778,28782,28785,28786,28787,28788,28791,28793,28794,28795,28797,28801,28802,28803,28804,28806,28807,28808,28811,28812,28813,28815,28816,28817,28819,28823,28824,28826,28827,28830,28831,28832,28833,28834,28835,28836,28837,28838,28839,28840,28841,28842,28848,28850,28852,28853,28854,28858,28862,28863,28868,28869,28870,28871,28873,28875,28876,28877,28878,28879,28880,28881,28882,28883,28884,28885,28886,28887,28890,28892,28893,28894,28896,28897,28898,28899,28901,28906,28910,28912,28913,28914,28915,28916,28917,28918,28920,28922,28923,28924,28926,28927,28928,28929,28930,28931,28932,28933,28934,28935,28936,28939,28940,28941,28942,28943,28945,28946,28948,28951,28955,28956,28957,28958,28959,28960,28961,28962,28963,28964,28965,28967,28968,28969,28970,28971,28972,28973,28974,28978,28979,28980,28981,28983,28984,28985,28986,28987,28988,28989,28990,28991,28992,28993,28994,28995,28996,28998,28999,29e3,29001,29003,29005,29007,29008,29009,29010,29011,29012,29013,29014,29015,29016,29017,29018,29019,29021,29023,29024,29025,29026,29027,29029,29033,29034,29035,29036,29037,29039,29040,29041,29044,29045,29046,29047,29049,29051,29052,29054,29055,29056,29057,29058,29059,29061,29062,29063,29064,29065,29067,29068,29069,29070,29072,29073,29074,29075,29077,29078,29079,29082,29083,29084,29085,29086,29089,29090,29091,29092,29093,29094,29095,29097,29098,29099,29101,29102,29103,29104,29105,29106,29108,29110,29111,29112,29114,29115,29116,29117,29118,29119,29120,29121,29122,29124,29125,29126,29127,29128,29129,29130,29131,29132,29133,29135,29136,29137,29138,29139,29142,29143,29144,29145,29146,29147,29148,29149,29150,29151,29153,29154,29155,29156,29158,29160,29161,29162,29163,29164,29165,29167,29168,29169,29170,29171,29172,29173,29174,29175,29176,29178,29179,29180,29181,29182,29183,29184,29185,29186,29187,29188,29189,29191,29192,29193,29194,29195,29196,29197,29198,29199,29200,29201,29202,29203,29204,29205,29206,29207,29208,29209,29210,29211,29212,29214,29215,29216,29217,29218,29219,29220,29221,29222,29223,29225,29227,29229,29230,29231,29234,29235,29236,29242,29244,29246,29248,29249,29250,29251,29252,29253,29254,29257,29258,29259,29262,29263,29264,29265,29267,29268,29269,29271,29272,29274,29276,29278,29280,29283,29284,29285,29288,29290,29291,29292,29293,29296,29297,29299,29300,29302,29303,29304,29307,29308,29309,29314,29315,29317,29318,29319,29320,29321,29324,29326,29328,29329,29331,29332,29333,29334,29335,29336,29337,29338,29339,29340,29341,29342,29344,29345,29346,29347,29348,29349,29350,29351,29352,29353,29354,29355,29358,29361,29362,29363,29365,29370,29371,29372,29373,29374,29375,29376,29381,29382,29383,29385,29386,29387,29388,29391,29393,29395,29396,29397,29398,29400,29402,29403,58566,58567,58568,58569,58570,58571,58572,58573,58574,58575,58576,58577,58578,58579,58580,58581,58582,58583,58584,58585,58586,58587,58588,58589,58590,58591,58592,58593,58594,58595,58596,58597,58598,58599,58600,58601,58602,58603,58604,58605,58606,58607,58608,58609,58610,58611,58612,58613,58614,58615,58616,58617,58618,58619,58620,58621,58622,58623,58624,58625,58626,58627,58628,58629,58630,58631,58632,58633,58634,58635,58636,58637,58638,58639,58640,58641,58642,58643,58644,58645,58646,58647,58648,58649,58650,58651,58652,58653,58654,58655,58656,58657,58658,58659,58660,58661,12288,12289,12290,183,713,711,168,12291,12293,8212,65374,8214,8230,8216,8217,8220,8221,12308,12309,12296,12297,12298,12299,12300,12301,12302,12303,12310,12311,12304,12305,177,215,247,8758,8743,8744,8721,8719,8746,8745,8712,8759,8730,8869,8741,8736,8978,8857,8747,8750,8801,8780,8776,8765,8733,8800,8814,8815,8804,8805,8734,8757,8756,9794,9792,176,8242,8243,8451,65284,164,65504,65505,8240,167,8470,9734,9733,9675,9679,9678,9671,9670,9633,9632,9651,9650,8251,8594,8592,8593,8595,12307,58662,58663,58664,58665,58666,58667,58668,58669,58670,58671,58672,58673,58674,58675,58676,58677,58678,58679,58680,58681,58682,58683,58684,58685,58686,58687,58688,58689,58690,58691,58692,58693,58694,58695,58696,58697,58698,58699,58700,58701,58702,58703,58704,58705,58706,58707,58708,58709,58710,58711,58712,58713,58714,58715,58716,58717,58718,58719,58720,58721,58722,58723,58724,58725,58726,58727,58728,58729,58730,58731,58732,58733,58734,58735,58736,58737,58738,58739,58740,58741,58742,58743,58744,58745,58746,58747,58748,58749,58750,58751,58752,58753,58754,58755,58756,58757,8560,8561,8562,8563,8564,8565,8566,8567,8568,8569,59238,59239,59240,59241,59242,59243,9352,9353,9354,9355,9356,9357,9358,9359,9360,9361,9362,9363,9364,9365,9366,9367,9368,9369,9370,9371,9332,9333,9334,9335,9336,9337,9338,9339,9340,9341,9342,9343,9344,9345,9346,9347,9348,9349,9350,9351,9312,9313,9314,9315,9316,9317,9318,9319,9320,9321,8364,59245,12832,12833,12834,12835,12836,12837,12838,12839,12840,12841,59246,59247,8544,8545,8546,8547,8548,8549,8550,8551,8552,8553,8554,8555,59248,59249,58758,58759,58760,58761,58762,58763,58764,58765,58766,58767,58768,58769,58770,58771,58772,58773,58774,58775,58776,58777,58778,58779,58780,58781,58782,58783,58784,58785,58786,58787,58788,58789,58790,58791,58792,58793,58794,58795,58796,58797,58798,58799,58800,58801,58802,58803,58804,58805,58806,58807,58808,58809,58810,58811,58812,58813,58814,58815,58816,58817,58818,58819,58820,58821,58822,58823,58824,58825,58826,58827,58828,58829,58830,58831,58832,58833,58834,58835,58836,58837,58838,58839,58840,58841,58842,58843,58844,58845,58846,58847,58848,58849,58850,58851,58852,12288,65281,65282,65283,65509,65285,65286,65287,65288,65289,65290,65291,65292,65293,65294,65295,65296,65297,65298,65299,65300,65301,65302,65303,65304,65305,65306,65307,65308,65309,65310,65311,65312,65313,65314,65315,65316,65317,65318,65319,65320,65321,65322,65323,65324,65325,65326,65327,65328,65329,65330,65331,65332,65333,65334,65335,65336,65337,65338,65339,65340,65341,65342,65343,65344,65345,65346,65347,65348,65349,65350,65351,65352,65353,65354,65355,65356,65357,65358,65359,65360,65361,65362,65363,65364,65365,65366,65367,65368,65369,65370,65371,65372,65373,65507,58854,58855,58856,58857,58858,58859,58860,58861,58862,58863,58864,58865,58866,58867,58868,58869,58870,58871,58872,58873,58874,58875,58876,58877,58878,58879,58880,58881,58882,58883,58884,58885,58886,58887,58888,58889,58890,58891,58892,58893,58894,58895,58896,58897,58898,58899,58900,58901,58902,58903,58904,58905,58906,58907,58908,58909,58910,58911,58912,58913,58914,58915,58916,58917,58918,58919,58920,58921,58922,58923,58924,58925,58926,58927,58928,58929,58930,58931,58932,58933,58934,58935,58936,58937,58938,58939,58940,58941,58942,58943,58944,58945,58946,58947,58948,58949,12353,12354,12355,12356,12357,12358,12359,12360,12361,12362,12363,12364,12365,12366,12367,12368,12369,12370,12371,12372,12373,12374,12375,12376,12377,12378,12379,12380,12381,12382,12383,12384,12385,12386,12387,12388,12389,12390,12391,12392,12393,12394,12395,12396,12397,12398,12399,12400,12401,12402,12403,12404,12405,12406,12407,12408,12409,12410,12411,12412,12413,12414,12415,12416,12417,12418,12419,12420,12421,12422,12423,12424,12425,12426,12427,12428,12429,12430,12431,12432,12433,12434,12435,59250,59251,59252,59253,59254,59255,59256,59257,59258,59259,59260,58950,58951,58952,58953,58954,58955,58956,58957,58958,58959,58960,58961,58962,58963,58964,58965,58966,58967,58968,58969,58970,58971,58972,58973,58974,58975,58976,58977,58978,58979,58980,58981,58982,58983,58984,58985,58986,58987,58988,58989,58990,58991,58992,58993,58994,58995,58996,58997,58998,58999,59e3,59001,59002,59003,59004,59005,59006,59007,59008,59009,59010,59011,59012,59013,59014,59015,59016,59017,59018,59019,59020,59021,59022,59023,59024,59025,59026,59027,59028,59029,59030,59031,59032,59033,59034,59035,59036,59037,59038,59039,59040,59041,59042,59043,59044,59045,12449,12450,12451,12452,12453,12454,12455,12456,12457,12458,12459,12460,12461,12462,12463,12464,12465,12466,12467,12468,12469,12470,12471,12472,12473,12474,12475,12476,12477,12478,12479,12480,12481,12482,12483,12484,12485,12486,12487,12488,12489,12490,12491,12492,12493,12494,12495,12496,12497,12498,12499,12500,12501,12502,12503,12504,12505,12506,12507,12508,12509,12510,12511,12512,12513,12514,12515,12516,12517,12518,12519,12520,12521,12522,12523,12524,12525,12526,12527,12528,12529,12530,12531,12532,12533,12534,59261,59262,59263,59264,59265,59266,59267,59268,59046,59047,59048,59049,59050,59051,59052,59053,59054,59055,59056,59057,59058,59059,59060,59061,59062,59063,59064,59065,59066,59067,59068,59069,59070,59071,59072,59073,59074,59075,59076,59077,59078,59079,59080,59081,59082,59083,59084,59085,59086,59087,59088,59089,59090,59091,59092,59093,59094,59095,59096,59097,59098,59099,59100,59101,59102,59103,59104,59105,59106,59107,59108,59109,59110,59111,59112,59113,59114,59115,59116,59117,59118,59119,59120,59121,59122,59123,59124,59125,59126,59127,59128,59129,59130,59131,59132,59133,59134,59135,59136,59137,59138,59139,59140,59141,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,931,932,933,934,935,936,937,59269,59270,59271,59272,59273,59274,59275,59276,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,963,964,965,966,967,968,969,59277,59278,59279,59280,59281,59282,59283,65077,65078,65081,65082,65087,65088,65085,65086,65089,65090,65091,65092,59284,59285,65083,65084,65079,65080,65073,59286,65075,65076,59287,59288,59289,59290,59291,59292,59293,59294,59295,59142,59143,59144,59145,59146,59147,59148,59149,59150,59151,59152,59153,59154,59155,59156,59157,59158,59159,59160,59161,59162,59163,59164,59165,59166,59167,59168,59169,59170,59171,59172,59173,59174,59175,59176,59177,59178,59179,59180,59181,59182,59183,59184,59185,59186,59187,59188,59189,59190,59191,59192,59193,59194,59195,59196,59197,59198,59199,59200,59201,59202,59203,59204,59205,59206,59207,59208,59209,59210,59211,59212,59213,59214,59215,59216,59217,59218,59219,59220,59221,59222,59223,59224,59225,59226,59227,59228,59229,59230,59231,59232,59233,59234,59235,59236,59237,1040,1041,1042,1043,1044,1045,1025,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,59296,59297,59298,59299,59300,59301,59302,59303,59304,59305,59306,59307,59308,59309,59310,1072,1073,1074,1075,1076,1077,1105,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,59311,59312,59313,59314,59315,59316,59317,59318,59319,59320,59321,59322,59323,714,715,729,8211,8213,8229,8245,8453,8457,8598,8599,8600,8601,8725,8735,8739,8786,8806,8807,8895,9552,9553,9554,9555,9556,9557,9558,9559,9560,9561,9562,9563,9564,9565,9566,9567,9568,9569,9570,9571,9572,9573,9574,9575,9576,9577,9578,9579,9580,9581,9582,9583,9584,9585,9586,9587,9601,9602,9603,9604,9605,9606,9607,9608,9609,9610,9611,9612,9613,9614,9615,9619,9620,9621,9660,9661,9698,9699,9700,9701,9737,8853,12306,12317,12318,59324,59325,59326,59327,59328,59329,59330,59331,59332,59333,59334,257,225,462,224,275,233,283,232,299,237,464,236,333,243,466,242,363,250,468,249,470,472,474,476,252,234,593,7743,324,328,505,609,59337,59338,59339,59340,12549,12550,12551,12552,12553,12554,12555,12556,12557,12558,12559,12560,12561,12562,12563,12564,12565,12566,12567,12568,12569,12570,12571,12572,12573,12574,12575,12576,12577,12578,12579,12580,12581,12582,12583,12584,12585,59341,59342,59343,59344,59345,59346,59347,59348,59349,59350,59351,59352,59353,59354,59355,59356,59357,59358,59359,59360,59361,12321,12322,12323,12324,12325,12326,12327,12328,12329,12963,13198,13199,13212,13213,13214,13217,13252,13262,13265,13266,13269,65072,65506,65508,59362,8481,12849,59363,8208,59364,59365,59366,12540,12443,12444,12541,12542,12294,12445,12446,65097,65098,65099,65100,65101,65102,65103,65104,65105,65106,65108,65109,65110,65111,65113,65114,65115,65116,65117,65118,65119,65120,65121,65122,65123,65124,65125,65126,65128,65129,65130,65131,12350,12272,12273,12274,12275,12276,12277,12278,12279,12280,12281,12282,12283,12295,59380,59381,59382,59383,59384,59385,59386,59387,59388,59389,59390,59391,59392,9472,9473,9474,9475,9476,9477,9478,9479,9480,9481,9482,9483,9484,9485,9486,9487,9488,9489,9490,9491,9492,9493,9494,9495,9496,9497,9498,9499,9500,9501,9502,9503,9504,9505,9506,9507,9508,9509,9510,9511,9512,9513,9514,9515,9516,9517,9518,9519,9520,9521,9522,9523,9524,9525,9526,9527,9528,9529,9530,9531,9532,9533,9534,9535,9536,9537,9538,9539,9540,9541,9542,9543,9544,9545,9546,9547,59393,59394,59395,59396,59397,59398,59399,59400,59401,59402,59403,59404,59405,59406,59407,29404,29405,29407,29410,29411,29412,29413,29414,29415,29418,29419,29429,29430,29433,29437,29438,29439,29440,29442,29444,29445,29446,29447,29448,29449,29451,29452,29453,29455,29456,29457,29458,29460,29464,29465,29466,29471,29472,29475,29476,29478,29479,29480,29485,29487,29488,29490,29491,29493,29494,29498,29499,29500,29501,29504,29505,29506,29507,29508,29509,29510,29511,29512,29513,29514,29515,29516,29518,29519,29521,29523,29524,29525,29526,29528,29529,29530,29531,29532,29533,29534,29535,29537,29538,29539,29540,29541,29542,29543,29544,29545,29546,29547,29550,29552,29553,57344,57345,57346,57347,57348,57349,57350,57351,57352,57353,57354,57355,57356,57357,57358,57359,57360,57361,57362,57363,57364,57365,57366,57367,57368,57369,57370,57371,57372,57373,57374,57375,57376,57377,57378,57379,57380,57381,57382,57383,57384,57385,57386,57387,57388,57389,57390,57391,57392,57393,57394,57395,57396,57397,57398,57399,57400,57401,57402,57403,57404,57405,57406,57407,57408,57409,57410,57411,57412,57413,57414,57415,57416,57417,57418,57419,57420,57421,57422,57423,57424,57425,57426,57427,57428,57429,57430,57431,57432,57433,57434,57435,57436,57437,29554,29555,29556,29557,29558,29559,29560,29561,29562,29563,29564,29565,29567,29568,29569,29570,29571,29573,29574,29576,29578,29580,29581,29583,29584,29586,29587,29588,29589,29591,29592,29593,29594,29596,29597,29598,29600,29601,29603,29604,29605,29606,29607,29608,29610,29612,29613,29617,29620,29621,29622,29624,29625,29628,29629,29630,29631,29633,29635,29636,29637,29638,29639,29643,29644,29646,29650,29651,29652,29653,29654,29655,29656,29658,29659,29660,29661,29663,29665,29666,29667,29668,29670,29672,29674,29675,29676,29678,29679,29680,29681,29683,29684,29685,29686,29687,57438,57439,57440,57441,57442,57443,57444,57445,57446,57447,57448,57449,57450,57451,57452,57453,57454,57455,57456,57457,57458,57459,57460,57461,57462,57463,57464,57465,57466,57467,57468,57469,57470,57471,57472,57473,57474,57475,57476,57477,57478,57479,57480,57481,57482,57483,57484,57485,57486,57487,57488,57489,57490,57491,57492,57493,57494,57495,57496,57497,57498,57499,57500,57501,57502,57503,57504,57505,57506,57507,57508,57509,57510,57511,57512,57513,57514,57515,57516,57517,57518,57519,57520,57521,57522,57523,57524,57525,57526,57527,57528,57529,57530,57531,29688,29689,29690,29691,29692,29693,29694,29695,29696,29697,29698,29700,29703,29704,29707,29708,29709,29710,29713,29714,29715,29716,29717,29718,29719,29720,29721,29724,29725,29726,29727,29728,29729,29731,29732,29735,29737,29739,29741,29743,29745,29746,29751,29752,29753,29754,29755,29757,29758,29759,29760,29762,29763,29764,29765,29766,29767,29768,29769,29770,29771,29772,29773,29774,29775,29776,29777,29778,29779,29780,29782,29784,29789,29792,29793,29794,29795,29796,29797,29798,29799,29800,29801,29802,29803,29804,29806,29807,29809,29810,29811,29812,29813,29816,29817,29818,57532,57533,57534,57535,57536,57537,57538,57539,57540,57541,57542,57543,57544,57545,57546,57547,57548,57549,57550,57551,57552,57553,57554,57555,57556,57557,57558,57559,57560,57561,57562,57563,57564,57565,57566,57567,57568,57569,57570,57571,57572,57573,57574,57575,57576,57577,57578,57579,57580,57581,57582,57583,57584,57585,57586,57587,57588,57589,57590,57591,57592,57593,57594,57595,57596,57597,57598,57599,57600,57601,57602,57603,57604,57605,57606,57607,57608,57609,57610,57611,57612,57613,57614,57615,57616,57617,57618,57619,57620,57621,57622,57623,57624,57625,29819,29820,29821,29823,29826,29828,29829,29830,29832,29833,29834,29836,29837,29839,29841,29842,29843,29844,29845,29846,29847,29848,29849,29850,29851,29853,29855,29856,29857,29858,29859,29860,29861,29862,29866,29867,29868,29869,29870,29871,29872,29873,29874,29875,29876,29877,29878,29879,29880,29881,29883,29884,29885,29886,29887,29888,29889,29890,29891,29892,29893,29894,29895,29896,29897,29898,29899,29900,29901,29902,29903,29904,29905,29907,29908,29909,29910,29911,29912,29913,29914,29915,29917,29919,29921,29925,29927,29928,29929,29930,29931,29932,29933,29936,29937,29938,57626,57627,57628,57629,57630,57631,57632,57633,57634,57635,57636,57637,57638,57639,57640,57641,57642,57643,57644,57645,57646,57647,57648,57649,57650,57651,57652,57653,57654,57655,57656,57657,57658,57659,57660,57661,57662,57663,57664,57665,57666,57667,57668,57669,57670,57671,57672,57673,57674,57675,57676,57677,57678,57679,57680,57681,57682,57683,57684,57685,57686,57687,57688,57689,57690,57691,57692,57693,57694,57695,57696,57697,57698,57699,57700,57701,57702,57703,57704,57705,57706,57707,57708,57709,57710,57711,57712,57713,57714,57715,57716,57717,57718,57719,29939,29941,29944,29945,29946,29947,29948,29949,29950,29952,29953,29954,29955,29957,29958,29959,29960,29961,29962,29963,29964,29966,29968,29970,29972,29973,29974,29975,29979,29981,29982,29984,29985,29986,29987,29988,29990,29991,29994,29998,30004,30006,30009,30012,30013,30015,30017,30018,30019,30020,30022,30023,30025,30026,30029,30032,30033,30034,30035,30037,30038,30039,30040,30045,30046,30047,30048,30049,30050,30051,30052,30055,30056,30057,30059,30060,30061,30062,30063,30064,30065,30067,30069,30070,30071,30074,30075,30076,30077,30078,30080,30081,30082,30084,30085,30087,57720,57721,57722,57723,57724,57725,57726,57727,57728,57729,57730,57731,57732,57733,57734,57735,57736,57737,57738,57739,57740,57741,57742,57743,57744,57745,57746,57747,57748,57749,57750,57751,57752,57753,57754,57755,57756,57757,57758,57759,57760,57761,57762,57763,57764,57765,57766,57767,57768,57769,57770,57771,57772,57773,57774,57775,57776,57777,57778,57779,57780,57781,57782,57783,57784,57785,57786,57787,57788,57789,57790,57791,57792,57793,57794,57795,57796,57797,57798,57799,57800,57801,57802,57803,57804,57805,57806,57807,57808,57809,57810,57811,57812,57813,30088,30089,30090,30092,30093,30094,30096,30099,30101,30104,30107,30108,30110,30114,30118,30119,30120,30121,30122,30125,30134,30135,30138,30139,30143,30144,30145,30150,30155,30156,30158,30159,30160,30161,30163,30167,30169,30170,30172,30173,30175,30176,30177,30181,30185,30188,30189,30190,30191,30194,30195,30197,30198,30199,30200,30202,30203,30205,30206,30210,30212,30214,30215,30216,30217,30219,30221,30222,30223,30225,30226,30227,30228,30230,30234,30236,30237,30238,30241,30243,30247,30248,30252,30254,30255,30257,30258,30262,30263,30265,30266,30267,30269,30273,30274,30276,57814,57815,57816,57817,57818,57819,57820,57821,57822,57823,57824,57825,57826,57827,57828,57829,57830,57831,57832,57833,57834,57835,57836,57837,57838,57839,57840,57841,57842,57843,57844,57845,57846,57847,57848,57849,57850,57851,57852,57853,57854,57855,57856,57857,57858,57859,57860,57861,57862,57863,57864,57865,57866,57867,57868,57869,57870,57871,57872,57873,57874,57875,57876,57877,57878,57879,57880,57881,57882,57883,57884,57885,57886,57887,57888,57889,57890,57891,57892,57893,57894,57895,57896,57897,57898,57899,57900,57901,57902,57903,57904,57905,57906,57907,30277,30278,30279,30280,30281,30282,30283,30286,30287,30288,30289,30290,30291,30293,30295,30296,30297,30298,30299,30301,30303,30304,30305,30306,30308,30309,30310,30311,30312,30313,30314,30316,30317,30318,30320,30321,30322,30323,30324,30325,30326,30327,30329,30330,30332,30335,30336,30337,30339,30341,30345,30346,30348,30349,30351,30352,30354,30356,30357,30359,30360,30362,30363,30364,30365,30366,30367,30368,30369,30370,30371,30373,30374,30375,30376,30377,30378,30379,30380,30381,30383,30384,30387,30389,30390,30391,30392,30393,30394,30395,30396,30397,30398,30400,30401,30403,21834,38463,22467,25384,21710,21769,21696,30353,30284,34108,30702,33406,30861,29233,38552,38797,27688,23433,20474,25353,26263,23736,33018,26696,32942,26114,30414,20985,25942,29100,32753,34948,20658,22885,25034,28595,33453,25420,25170,21485,21543,31494,20843,30116,24052,25300,36299,38774,25226,32793,22365,38712,32610,29240,30333,26575,30334,25670,20336,36133,25308,31255,26001,29677,25644,25203,33324,39041,26495,29256,25198,25292,20276,29923,21322,21150,32458,37030,24110,26758,27036,33152,32465,26834,30917,34444,38225,20621,35876,33502,32990,21253,35090,21093,30404,30407,30409,30411,30412,30419,30421,30425,30426,30428,30429,30430,30432,30433,30434,30435,30436,30438,30439,30440,30441,30442,30443,30444,30445,30448,30451,30453,30454,30455,30458,30459,30461,30463,30464,30466,30467,30469,30470,30474,30476,30478,30479,30480,30481,30482,30483,30484,30485,30486,30487,30488,30491,30492,30493,30494,30497,30499,30500,30501,30503,30506,30507,30508,30510,30512,30513,30514,30515,30516,30521,30523,30525,30526,30527,30530,30532,30533,30534,30536,30537,30538,30539,30540,30541,30542,30543,30546,30547,30548,30549,30550,30551,30552,30553,30556,34180,38649,20445,22561,39281,23453,25265,25253,26292,35961,40077,29190,26479,30865,24754,21329,21271,36744,32972,36125,38049,20493,29384,22791,24811,28953,34987,22868,33519,26412,31528,23849,32503,29997,27893,36454,36856,36924,40763,27604,37145,31508,24444,30887,34006,34109,27605,27609,27606,24065,24199,30201,38381,25949,24330,24517,36767,22721,33218,36991,38491,38829,36793,32534,36140,25153,20415,21464,21342,36776,36777,36779,36941,26631,24426,33176,34920,40150,24971,21035,30250,24428,25996,28626,28392,23486,25672,20853,20912,26564,19993,31177,39292,28851,30557,30558,30559,30560,30564,30567,30569,30570,30573,30574,30575,30576,30577,30578,30579,30580,30581,30582,30583,30584,30586,30587,30588,30593,30594,30595,30598,30599,30600,30601,30602,30603,30607,30608,30611,30612,30613,30614,30615,30616,30617,30618,30619,30620,30621,30622,30625,30627,30628,30630,30632,30635,30637,30638,30639,30641,30642,30644,30646,30647,30648,30649,30650,30652,30654,30656,30657,30658,30659,30660,30661,30662,30663,30664,30665,30666,30667,30668,30670,30671,30672,30673,30674,30675,30676,30677,30678,30680,30681,30682,30685,30686,30687,30688,30689,30692,30149,24182,29627,33760,25773,25320,38069,27874,21338,21187,25615,38082,31636,20271,24091,33334,33046,33162,28196,27850,39539,25429,21340,21754,34917,22496,19981,24067,27493,31807,37096,24598,25830,29468,35009,26448,25165,36130,30572,36393,37319,24425,33756,34081,39184,21442,34453,27531,24813,24808,28799,33485,33329,20179,27815,34255,25805,31961,27133,26361,33609,21397,31574,20391,20876,27979,23618,36461,25554,21449,33580,33590,26597,30900,25661,23519,23700,24046,35815,25286,26612,35962,25600,25530,34633,39307,35863,32544,38130,20135,38416,39076,26124,29462,30694,30696,30698,30703,30704,30705,30706,30708,30709,30711,30713,30714,30715,30716,30723,30724,30725,30726,30727,30728,30730,30731,30734,30735,30736,30739,30741,30745,30747,30750,30752,30753,30754,30756,30760,30762,30763,30766,30767,30769,30770,30771,30773,30774,30781,30783,30785,30786,30787,30788,30790,30792,30793,30794,30795,30797,30799,30801,30803,30804,30808,30809,30810,30811,30812,30814,30815,30816,30817,30818,30819,30820,30821,30822,30823,30824,30825,30831,30832,30833,30834,30835,30836,30837,30838,30840,30841,30842,30843,30845,30846,30847,30848,30849,30850,30851,22330,23581,24120,38271,20607,32928,21378,25950,30021,21809,20513,36229,25220,38046,26397,22066,28526,24034,21557,28818,36710,25199,25764,25507,24443,28552,37108,33251,36784,23576,26216,24561,27785,38472,36225,34924,25745,31216,22478,27225,25104,21576,20056,31243,24809,28548,35802,25215,36894,39563,31204,21507,30196,25345,21273,27744,36831,24347,39536,32827,40831,20360,23610,36196,32709,26021,28861,20805,20914,34411,23815,23456,25277,37228,30068,36364,31264,24833,31609,20167,32504,30597,19985,33261,21021,20986,27249,21416,36487,38148,38607,28353,38500,26970,30852,30853,30854,30856,30858,30859,30863,30864,30866,30868,30869,30870,30873,30877,30878,30880,30882,30884,30886,30888,30889,30890,30891,30892,30893,30894,30895,30901,30902,30903,30904,30906,30907,30908,30909,30911,30912,30914,30915,30916,30918,30919,30920,30924,30925,30926,30927,30929,30930,30931,30934,30935,30936,30938,30939,30940,30941,30942,30943,30944,30945,30946,30947,30948,30949,30950,30951,30953,30954,30955,30957,30958,30959,30960,30961,30963,30965,30966,30968,30969,30971,30972,30973,30974,30975,30976,30978,30979,30980,30982,30983,30984,30985,30986,30987,30988,30784,20648,30679,25616,35302,22788,25571,24029,31359,26941,20256,33337,21912,20018,30126,31383,24162,24202,38383,21019,21561,28810,25462,38180,22402,26149,26943,37255,21767,28147,32431,34850,25139,32496,30133,33576,30913,38604,36766,24904,29943,35789,27492,21050,36176,27425,32874,33905,22257,21254,20174,19995,20945,31895,37259,31751,20419,36479,31713,31388,25703,23828,20652,33030,30209,31929,28140,32736,26449,23384,23544,30923,25774,25619,25514,25387,38169,25645,36798,31572,30249,25171,22823,21574,27513,20643,25140,24102,27526,20195,36151,34955,24453,36910,30989,30990,30991,30992,30993,30994,30996,30997,30998,30999,31e3,31001,31002,31003,31004,31005,31007,31008,31009,31010,31011,31013,31014,31015,31016,31017,31018,31019,31020,31021,31022,31023,31024,31025,31026,31027,31029,31030,31031,31032,31033,31037,31039,31042,31043,31044,31045,31047,31050,31051,31052,31053,31054,31055,31056,31057,31058,31060,31061,31064,31065,31073,31075,31076,31078,31081,31082,31083,31084,31086,31088,31089,31090,31091,31092,31093,31094,31097,31099,31100,31101,31102,31103,31106,31107,31110,31111,31112,31113,31115,31116,31117,31118,31120,31121,31122,24608,32829,25285,20025,21333,37112,25528,32966,26086,27694,20294,24814,28129,35806,24377,34507,24403,25377,20826,33633,26723,20992,25443,36424,20498,23707,31095,23548,21040,31291,24764,36947,30423,24503,24471,30340,36460,28783,30331,31561,30634,20979,37011,22564,20302,28404,36842,25932,31515,29380,28068,32735,23265,25269,24213,22320,33922,31532,24093,24351,36882,32532,39072,25474,28359,30872,28857,20856,38747,22443,30005,20291,30008,24215,24806,22880,28096,27583,30857,21500,38613,20939,20993,25481,21514,38035,35843,36300,29241,30879,34678,36845,35853,21472,31123,31124,31125,31126,31127,31128,31129,31131,31132,31133,31134,31135,31136,31137,31138,31139,31140,31141,31142,31144,31145,31146,31147,31148,31149,31150,31151,31152,31153,31154,31156,31157,31158,31159,31160,31164,31167,31170,31172,31173,31175,31176,31178,31180,31182,31183,31184,31187,31188,31190,31191,31193,31194,31195,31196,31197,31198,31200,31201,31202,31205,31208,31210,31212,31214,31217,31218,31219,31220,31221,31222,31223,31225,31226,31228,31230,31231,31233,31236,31237,31239,31240,31241,31242,31244,31247,31248,31249,31250,31251,31253,31254,31256,31257,31259,31260,19969,30447,21486,38025,39030,40718,38189,23450,35746,20002,19996,20908,33891,25026,21160,26635,20375,24683,20923,27934,20828,25238,26007,38497,35910,36887,30168,37117,30563,27602,29322,29420,35835,22581,30585,36172,26460,38208,32922,24230,28193,22930,31471,30701,38203,27573,26029,32526,22534,20817,38431,23545,22697,21544,36466,25958,39039,22244,38045,30462,36929,25479,21702,22810,22842,22427,36530,26421,36346,33333,21057,24816,22549,34558,23784,40517,20420,39069,35769,23077,24694,21380,25212,36943,37122,39295,24681,32780,20799,32819,23572,39285,27953,20108,31261,31263,31265,31266,31268,31269,31270,31271,31272,31273,31274,31275,31276,31277,31278,31279,31280,31281,31282,31284,31285,31286,31288,31290,31294,31296,31297,31298,31299,31300,31301,31303,31304,31305,31306,31307,31308,31309,31310,31311,31312,31314,31315,31316,31317,31318,31320,31321,31322,31323,31324,31325,31326,31327,31328,31329,31330,31331,31332,31333,31334,31335,31336,31337,31338,31339,31340,31341,31342,31343,31345,31346,31347,31349,31355,31356,31357,31358,31362,31365,31367,31369,31370,31371,31372,31374,31375,31376,31379,31380,31385,31386,31387,31390,31393,31394,36144,21457,32602,31567,20240,20047,38400,27861,29648,34281,24070,30058,32763,27146,30718,38034,32321,20961,28902,21453,36820,33539,36137,29359,39277,27867,22346,33459,26041,32938,25151,38450,22952,20223,35775,32442,25918,33778,38750,21857,39134,32933,21290,35837,21536,32954,24223,27832,36153,33452,37210,21545,27675,20998,32439,22367,28954,27774,31881,22859,20221,24575,24868,31914,20016,23553,26539,34562,23792,38155,39118,30127,28925,36898,20911,32541,35773,22857,20964,20315,21542,22827,25975,32932,23413,25206,25282,36752,24133,27679,31526,20239,20440,26381,31395,31396,31399,31401,31402,31403,31406,31407,31408,31409,31410,31412,31413,31414,31415,31416,31417,31418,31419,31420,31421,31422,31424,31425,31426,31427,31428,31429,31430,31431,31432,31433,31434,31436,31437,31438,31439,31440,31441,31442,31443,31444,31445,31447,31448,31450,31451,31452,31453,31457,31458,31460,31463,31464,31465,31466,31467,31468,31470,31472,31473,31474,31475,31476,31477,31478,31479,31480,31483,31484,31486,31488,31489,31490,31493,31495,31497,31500,31501,31502,31504,31506,31507,31510,31511,31512,31514,31516,31517,31519,31521,31522,31523,31527,31529,31533,28014,28074,31119,34993,24343,29995,25242,36741,20463,37340,26023,33071,33105,24220,33104,36212,21103,35206,36171,22797,20613,20184,38428,29238,33145,36127,23500,35747,38468,22919,32538,21648,22134,22030,35813,25913,27010,38041,30422,28297,24178,29976,26438,26577,31487,32925,36214,24863,31174,25954,36195,20872,21018,38050,32568,32923,32434,23703,28207,26464,31705,30347,39640,33167,32660,31957,25630,38224,31295,21578,21733,27468,25601,25096,40509,33011,30105,21106,38761,33883,26684,34532,38401,38548,38124,20010,21508,32473,26681,36319,32789,26356,24218,32697,31535,31536,31538,31540,31541,31542,31543,31545,31547,31549,31551,31552,31553,31554,31555,31556,31558,31560,31562,31565,31566,31571,31573,31575,31577,31580,31582,31583,31585,31587,31588,31589,31590,31591,31592,31593,31594,31595,31596,31597,31599,31600,31603,31604,31606,31608,31610,31612,31613,31615,31617,31618,31619,31620,31622,31623,31624,31625,31626,31627,31628,31630,31631,31633,31634,31635,31638,31640,31641,31642,31643,31646,31647,31648,31651,31652,31653,31662,31663,31664,31666,31667,31669,31670,31671,31673,31674,31675,31676,31677,31678,31679,31680,31682,31683,31684,22466,32831,26775,24037,25915,21151,24685,40858,20379,36524,20844,23467,24339,24041,27742,25329,36129,20849,38057,21246,27807,33503,29399,22434,26500,36141,22815,36764,33735,21653,31629,20272,27837,23396,22993,40723,21476,34506,39592,35895,32929,25925,39038,22266,38599,21038,29916,21072,23521,25346,35074,20054,25296,24618,26874,20851,23448,20896,35266,31649,39302,32592,24815,28748,36143,20809,24191,36891,29808,35268,22317,30789,24402,40863,38394,36712,39740,35809,30328,26690,26588,36330,36149,21053,36746,28378,26829,38149,37101,22269,26524,35065,36807,21704,31685,31688,31689,31690,31691,31693,31694,31695,31696,31698,31700,31701,31702,31703,31704,31707,31708,31710,31711,31712,31714,31715,31716,31719,31720,31721,31723,31724,31725,31727,31728,31730,31731,31732,31733,31734,31736,31737,31738,31739,31741,31743,31744,31745,31746,31747,31748,31749,31750,31752,31753,31754,31757,31758,31760,31761,31762,31763,31764,31765,31767,31768,31769,31770,31771,31772,31773,31774,31776,31777,31778,31779,31780,31781,31784,31785,31787,31788,31789,31790,31791,31792,31793,31794,31795,31796,31797,31798,31799,31801,31802,31803,31804,31805,31806,31810,39608,23401,28023,27686,20133,23475,39559,37219,25e3,37039,38889,21547,28085,23506,20989,21898,32597,32752,25788,25421,26097,25022,24717,28938,27735,27721,22831,26477,33322,22741,22158,35946,27627,37085,22909,32791,21495,28009,21621,21917,33655,33743,26680,31166,21644,20309,21512,30418,35977,38402,27827,28088,36203,35088,40548,36154,22079,40657,30165,24456,29408,24680,21756,20136,27178,34913,24658,36720,21700,28888,34425,40511,27946,23439,24344,32418,21897,20399,29492,21564,21402,20505,21518,21628,20046,24573,29786,22774,33899,32993,34676,29392,31946,28246,31811,31812,31813,31814,31815,31816,31817,31818,31819,31820,31822,31823,31824,31825,31826,31827,31828,31829,31830,31831,31832,31833,31834,31835,31836,31837,31838,31839,31840,31841,31842,31843,31844,31845,31846,31847,31848,31849,31850,31851,31852,31853,31854,31855,31856,31857,31858,31861,31862,31863,31864,31865,31866,31870,31871,31872,31873,31874,31875,31876,31877,31878,31879,31880,31882,31883,31884,31885,31886,31887,31888,31891,31892,31894,31897,31898,31899,31904,31905,31907,31910,31911,31912,31913,31915,31916,31917,31919,31920,31924,31925,31926,31927,31928,31930,31931,24359,34382,21804,25252,20114,27818,25143,33457,21719,21326,29502,28369,30011,21010,21270,35805,27088,24458,24576,28142,22351,27426,29615,26707,36824,32531,25442,24739,21796,30186,35938,28949,28067,23462,24187,33618,24908,40644,30970,34647,31783,30343,20976,24822,29004,26179,24140,24653,35854,28784,25381,36745,24509,24674,34516,22238,27585,24724,24935,21321,24800,26214,36159,31229,20250,28905,27719,35763,35826,32472,33636,26127,23130,39746,27985,28151,35905,27963,20249,28779,33719,25110,24785,38669,36135,31096,20987,22334,22522,26426,30072,31293,31215,31637,31935,31936,31938,31939,31940,31942,31945,31947,31950,31951,31952,31953,31954,31955,31956,31960,31962,31963,31965,31966,31969,31970,31971,31972,31973,31974,31975,31977,31978,31979,31980,31981,31982,31984,31985,31986,31987,31988,31989,31990,31991,31993,31994,31996,31997,31998,31999,32e3,32001,32002,32003,32004,32005,32006,32007,32008,32009,32011,32012,32013,32014,32015,32016,32017,32018,32019,32020,32021,32022,32023,32024,32025,32026,32027,32028,32029,32030,32031,32033,32035,32036,32037,32038,32040,32041,32042,32044,32045,32046,32048,32049,32050,32051,32052,32053,32054,32908,39269,36857,28608,35749,40481,23020,32489,32521,21513,26497,26840,36753,31821,38598,21450,24613,30142,27762,21363,23241,32423,25380,20960,33034,24049,34015,25216,20864,23395,20238,31085,21058,24760,27982,23492,23490,35745,35760,26082,24524,38469,22931,32487,32426,22025,26551,22841,20339,23478,21152,33626,39050,36158,30002,38078,20551,31292,20215,26550,39550,23233,27516,30417,22362,23574,31546,38388,29006,20860,32937,33392,22904,32516,33575,26816,26604,30897,30839,25315,25441,31616,20461,21098,20943,33616,27099,37492,36341,36145,35265,38190,31661,20214,32055,32056,32057,32058,32059,32060,32061,32062,32063,32064,32065,32066,32067,32068,32069,32070,32071,32072,32073,32074,32075,32076,32077,32078,32079,32080,32081,32082,32083,32084,32085,32086,32087,32088,32089,32090,32091,32092,32093,32094,32095,32096,32097,32098,32099,32100,32101,32102,32103,32104,32105,32106,32107,32108,32109,32111,32112,32113,32114,32115,32116,32117,32118,32120,32121,32122,32123,32124,32125,32126,32127,32128,32129,32130,32131,32132,32133,32134,32135,32136,32137,32138,32139,32140,32141,32142,32143,32144,32145,32146,32147,32148,32149,32150,32151,32152,20581,33328,21073,39279,28176,28293,28071,24314,20725,23004,23558,27974,27743,30086,33931,26728,22870,35762,21280,37233,38477,34121,26898,30977,28966,33014,20132,37066,27975,39556,23047,22204,25605,38128,30699,20389,33050,29409,35282,39290,32564,32478,21119,25945,37237,36735,36739,21483,31382,25581,25509,30342,31224,34903,38454,25130,21163,33410,26708,26480,25463,30571,31469,27905,32467,35299,22992,25106,34249,33445,30028,20511,20171,30117,35819,23626,24062,31563,26020,37329,20170,27941,35167,32039,38182,20165,35880,36827,38771,26187,31105,36817,28908,28024,32153,32154,32155,32156,32157,32158,32159,32160,32161,32162,32163,32164,32165,32167,32168,32169,32170,32171,32172,32173,32175,32176,32177,32178,32179,32180,32181,32182,32183,32184,32185,32186,32187,32188,32189,32190,32191,32192,32193,32194,32195,32196,32197,32198,32199,32200,32201,32202,32203,32204,32205,32206,32207,32208,32209,32210,32211,32212,32213,32214,32215,32216,32217,32218,32219,32220,32221,32222,32223,32224,32225,32226,32227,32228,32229,32230,32231,32232,32233,32234,32235,32236,32237,32238,32239,32240,32241,32242,32243,32244,32245,32246,32247,32248,32249,32250,23613,21170,33606,20834,33550,30555,26230,40120,20140,24778,31934,31923,32463,20117,35686,26223,39048,38745,22659,25964,38236,24452,30153,38742,31455,31454,20928,28847,31384,25578,31350,32416,29590,38893,20037,28792,20061,37202,21417,25937,26087,33276,33285,21646,23601,30106,38816,25304,29401,30141,23621,39545,33738,23616,21632,30697,20030,27822,32858,25298,25454,24040,20855,36317,36382,38191,20465,21477,24807,28844,21095,25424,40515,23071,20518,30519,21367,32482,25733,25899,25225,25496,20500,29237,35273,20915,35776,32477,22343,33740,38055,20891,21531,23803,32251,32252,32253,32254,32255,32256,32257,32258,32259,32260,32261,32262,32263,32264,32265,32266,32267,32268,32269,32270,32271,32272,32273,32274,32275,32276,32277,32278,32279,32280,32281,32282,32283,32284,32285,32286,32287,32288,32289,32290,32291,32292,32293,32294,32295,32296,32297,32298,32299,32300,32301,32302,32303,32304,32305,32306,32307,32308,32309,32310,32311,32312,32313,32314,32316,32317,32318,32319,32320,32322,32323,32324,32325,32326,32328,32329,32330,32331,32332,32333,32334,32335,32336,32337,32338,32339,32340,32341,32342,32343,32344,32345,32346,32347,32348,32349,20426,31459,27994,37089,39567,21888,21654,21345,21679,24320,25577,26999,20975,24936,21002,22570,21208,22350,30733,30475,24247,24951,31968,25179,25239,20130,28821,32771,25335,28900,38752,22391,33499,26607,26869,30933,39063,31185,22771,21683,21487,28212,20811,21051,23458,35838,32943,21827,22438,24691,22353,21549,31354,24656,23380,25511,25248,21475,25187,23495,26543,21741,31391,33510,37239,24211,35044,22840,22446,25358,36328,33007,22359,31607,20393,24555,23485,27454,21281,31568,29378,26694,30719,30518,26103,20917,20111,30420,23743,31397,33909,22862,39745,20608,32350,32351,32352,32353,32354,32355,32356,32357,32358,32359,32360,32361,32362,32363,32364,32365,32366,32367,32368,32369,32370,32371,32372,32373,32374,32375,32376,32377,32378,32379,32380,32381,32382,32383,32384,32385,32387,32388,32389,32390,32391,32392,32393,32394,32395,32396,32397,32398,32399,32400,32401,32402,32403,32404,32405,32406,32407,32408,32409,32410,32412,32413,32414,32430,32436,32443,32444,32470,32484,32492,32505,32522,32528,32542,32567,32569,32571,32572,32573,32574,32575,32576,32577,32579,32582,32583,32584,32585,32586,32587,32588,32589,32590,32591,32594,32595,39304,24871,28291,22372,26118,25414,22256,25324,25193,24275,38420,22403,25289,21895,34593,33098,36771,21862,33713,26469,36182,34013,23146,26639,25318,31726,38417,20848,28572,35888,25597,35272,25042,32518,28866,28389,29701,27028,29436,24266,37070,26391,28010,25438,21171,29282,32769,20332,23013,37226,28889,28061,21202,20048,38647,38253,34174,30922,32047,20769,22418,25794,32907,31867,27882,26865,26974,20919,21400,26792,29313,40654,31729,29432,31163,28435,29702,26446,37324,40100,31036,33673,33620,21519,26647,20029,21385,21169,30782,21382,21033,20616,20363,20432,32598,32601,32603,32604,32605,32606,32608,32611,32612,32613,32614,32615,32619,32620,32621,32623,32624,32627,32629,32630,32631,32632,32634,32635,32636,32637,32639,32640,32642,32643,32644,32645,32646,32647,32648,32649,32651,32653,32655,32656,32657,32658,32659,32661,32662,32663,32664,32665,32667,32668,32672,32674,32675,32677,32678,32680,32681,32682,32683,32684,32685,32686,32689,32691,32692,32693,32694,32695,32698,32699,32702,32704,32706,32707,32708,32710,32711,32712,32713,32715,32717,32719,32720,32721,32722,32723,32726,32727,32729,32730,32731,32732,32733,32734,32738,32739,30178,31435,31890,27813,38582,21147,29827,21737,20457,32852,33714,36830,38256,24265,24604,28063,24088,25947,33080,38142,24651,28860,32451,31918,20937,26753,31921,33391,20004,36742,37327,26238,20142,35845,25769,32842,20698,30103,29134,23525,36797,28518,20102,25730,38243,24278,26009,21015,35010,28872,21155,29454,29747,26519,30967,38678,20020,37051,40158,28107,20955,36161,21533,25294,29618,33777,38646,40836,38083,20278,32666,20940,28789,38517,23725,39046,21478,20196,28316,29705,27060,30827,39311,30041,21016,30244,27969,26611,20845,40857,32843,21657,31548,31423,32740,32743,32744,32746,32747,32748,32749,32751,32754,32756,32757,32758,32759,32760,32761,32762,32765,32766,32767,32770,32775,32776,32777,32778,32782,32783,32785,32787,32794,32795,32797,32798,32799,32801,32803,32804,32811,32812,32813,32814,32815,32816,32818,32820,32825,32826,32828,32830,32832,32833,32836,32837,32839,32840,32841,32846,32847,32848,32849,32851,32853,32854,32855,32857,32859,32860,32861,32862,32863,32864,32865,32866,32867,32868,32869,32870,32871,32872,32875,32876,32877,32878,32879,32880,32882,32883,32884,32885,32886,32887,32888,32889,32890,32891,32892,32893,38534,22404,25314,38471,27004,23044,25602,31699,28431,38475,33446,21346,39045,24208,28809,25523,21348,34383,40065,40595,30860,38706,36335,36162,40575,28510,31108,24405,38470,25134,39540,21525,38109,20387,26053,23653,23649,32533,34385,27695,24459,29575,28388,32511,23782,25371,23402,28390,21365,20081,25504,30053,25249,36718,20262,20177,27814,32438,35770,33821,34746,32599,36923,38179,31657,39585,35064,33853,27931,39558,32476,22920,40635,29595,30721,34434,39532,39554,22043,21527,22475,20080,40614,21334,36808,33033,30610,39314,34542,28385,34067,26364,24930,28459,32894,32897,32898,32901,32904,32906,32909,32910,32911,32912,32913,32914,32916,32917,32919,32921,32926,32931,32934,32935,32936,32940,32944,32947,32949,32950,32952,32953,32955,32965,32967,32968,32969,32970,32971,32975,32976,32977,32978,32979,32980,32981,32984,32991,32992,32994,32995,32998,33006,33013,33015,33017,33019,33022,33023,33024,33025,33027,33028,33029,33031,33032,33035,33036,33045,33047,33049,33051,33052,33053,33055,33056,33057,33058,33059,33060,33061,33062,33063,33064,33065,33066,33067,33069,33070,33072,33075,33076,33077,33079,33081,33082,33083,33084,33085,33087,35881,33426,33579,30450,27667,24537,33725,29483,33541,38170,27611,30683,38086,21359,33538,20882,24125,35980,36152,20040,29611,26522,26757,37238,38665,29028,27809,30473,23186,38209,27599,32654,26151,23504,22969,23194,38376,38391,20204,33804,33945,27308,30431,38192,29467,26790,23391,30511,37274,38753,31964,36855,35868,24357,31859,31192,35269,27852,34588,23494,24130,26825,30496,32501,20885,20813,21193,23081,32517,38754,33495,25551,30596,34256,31186,28218,24217,22937,34065,28781,27665,25279,30399,25935,24751,38397,26126,34719,40483,38125,21517,21629,35884,25720,33088,33089,33090,33091,33092,33093,33095,33097,33101,33102,33103,33106,33110,33111,33112,33115,33116,33117,33118,33119,33121,33122,33123,33124,33126,33128,33130,33131,33132,33135,33138,33139,33141,33142,33143,33144,33153,33155,33156,33157,33158,33159,33161,33163,33164,33165,33166,33168,33170,33171,33172,33173,33174,33175,33177,33178,33182,33183,33184,33185,33186,33188,33189,33191,33193,33195,33196,33197,33198,33199,33200,33201,33202,33204,33205,33206,33207,33208,33209,33212,33213,33214,33215,33220,33221,33223,33224,33225,33227,33229,33230,33231,33232,33233,33234,33235,25721,34321,27169,33180,30952,25705,39764,25273,26411,33707,22696,40664,27819,28448,23518,38476,35851,29279,26576,25287,29281,20137,22982,27597,22675,26286,24149,21215,24917,26408,30446,30566,29287,31302,25343,21738,21584,38048,37027,23068,32435,27670,20035,22902,32784,22856,21335,30007,38590,22218,25376,33041,24700,38393,28118,21602,39297,20869,23273,33021,22958,38675,20522,27877,23612,25311,20320,21311,33147,36870,28346,34091,25288,24180,30910,25781,25467,24565,23064,37247,40479,23615,25423,32834,23421,21870,38218,38221,28037,24744,26592,29406,20957,23425,33236,33237,33238,33239,33240,33241,33242,33243,33244,33245,33246,33247,33248,33249,33250,33252,33253,33254,33256,33257,33259,33262,33263,33264,33265,33266,33269,33270,33271,33272,33273,33274,33277,33279,33283,33287,33288,33289,33290,33291,33294,33295,33297,33299,33301,33302,33303,33304,33305,33306,33309,33312,33316,33317,33318,33319,33321,33326,33330,33338,33340,33341,33343,33344,33345,33346,33347,33349,33350,33352,33354,33356,33357,33358,33360,33361,33362,33363,33364,33365,33366,33367,33369,33371,33372,33373,33374,33376,33377,33378,33379,33380,33381,33382,33383,33385,25319,27870,29275,25197,38062,32445,33043,27987,20892,24324,22900,21162,24594,22899,26262,34384,30111,25386,25062,31983,35834,21734,27431,40485,27572,34261,21589,20598,27812,21866,36276,29228,24085,24597,29750,25293,25490,29260,24472,28227,27966,25856,28504,30424,30928,30460,30036,21028,21467,20051,24222,26049,32810,32982,25243,21638,21032,28846,34957,36305,27873,21624,32986,22521,35060,36180,38506,37197,20329,27803,21943,30406,30768,25256,28921,28558,24429,34028,26842,30844,31735,33192,26379,40527,25447,30896,22383,30738,38713,25209,25259,21128,29749,27607,33386,33387,33388,33389,33393,33397,33398,33399,33400,33403,33404,33408,33409,33411,33413,33414,33415,33417,33420,33424,33427,33428,33429,33430,33434,33435,33438,33440,33442,33443,33447,33458,33461,33462,33466,33467,33468,33471,33472,33474,33475,33477,33478,33481,33488,33494,33497,33498,33501,33506,33511,33512,33513,33514,33516,33517,33518,33520,33522,33523,33525,33526,33528,33530,33532,33533,33534,33535,33536,33546,33547,33549,33552,33554,33555,33558,33560,33561,33565,33566,33567,33568,33569,33570,33571,33572,33573,33574,33577,33578,33582,33584,33586,33591,33595,33597,21860,33086,30130,30382,21305,30174,20731,23617,35692,31687,20559,29255,39575,39128,28418,29922,31080,25735,30629,25340,39057,36139,21697,32856,20050,22378,33529,33805,24179,20973,29942,35780,23631,22369,27900,39047,23110,30772,39748,36843,31893,21078,25169,38138,20166,33670,33889,33769,33970,22484,26420,22275,26222,28006,35889,26333,28689,26399,27450,26646,25114,22971,19971,20932,28422,26578,27791,20854,26827,22855,27495,30054,23822,33040,40784,26071,31048,31041,39569,36215,23682,20062,20225,21551,22865,30732,22120,27668,36804,24323,27773,27875,35755,25488,33598,33599,33601,33602,33604,33605,33608,33610,33611,33612,33613,33614,33619,33621,33622,33623,33624,33625,33629,33634,33648,33649,33650,33651,33652,33653,33654,33657,33658,33662,33663,33664,33665,33666,33667,33668,33671,33672,33674,33675,33676,33677,33679,33680,33681,33684,33685,33686,33687,33689,33690,33693,33695,33697,33698,33699,33700,33701,33702,33703,33708,33709,33710,33711,33717,33723,33726,33727,33730,33731,33732,33734,33736,33737,33739,33741,33742,33744,33745,33746,33747,33749,33751,33753,33754,33755,33758,33762,33763,33764,33766,33767,33768,33771,33772,33773,24688,27965,29301,25190,38030,38085,21315,36801,31614,20191,35878,20094,40660,38065,38067,21069,28508,36963,27973,35892,22545,23884,27424,27465,26538,21595,33108,32652,22681,34103,24378,25250,27207,38201,25970,24708,26725,30631,20052,20392,24039,38808,25772,32728,23789,20431,31373,20999,33540,19988,24623,31363,38054,20405,20146,31206,29748,21220,33465,25810,31165,23517,27777,38738,36731,27682,20542,21375,28165,25806,26228,27696,24773,39031,35831,24198,29756,31351,31179,19992,37041,29699,27714,22234,37195,27845,36235,21306,34502,26354,36527,23624,39537,28192,33774,33775,33779,33780,33781,33782,33783,33786,33787,33788,33790,33791,33792,33794,33797,33799,33800,33801,33802,33808,33810,33811,33812,33813,33814,33815,33817,33818,33819,33822,33823,33824,33825,33826,33827,33833,33834,33835,33836,33837,33838,33839,33840,33842,33843,33844,33845,33846,33847,33849,33850,33851,33854,33855,33856,33857,33858,33859,33860,33861,33863,33864,33865,33866,33867,33868,33869,33870,33871,33872,33874,33875,33876,33877,33878,33880,33885,33886,33887,33888,33890,33892,33893,33894,33895,33896,33898,33902,33903,33904,33906,33908,33911,33913,33915,33916,21462,23094,40843,36259,21435,22280,39079,26435,37275,27849,20840,30154,25331,29356,21048,21149,32570,28820,30264,21364,40522,27063,30830,38592,35033,32676,28982,29123,20873,26579,29924,22756,25880,22199,35753,39286,25200,32469,24825,28909,22764,20161,20154,24525,38887,20219,35748,20995,22922,32427,25172,20173,26085,25102,33592,33993,33635,34701,29076,28342,23481,32466,20887,25545,26580,32905,33593,34837,20754,23418,22914,36785,20083,27741,20837,35109,36719,38446,34122,29790,38160,38384,28070,33509,24369,25746,27922,33832,33134,40131,22622,36187,19977,21441,33917,33918,33919,33920,33921,33923,33924,33925,33926,33930,33933,33935,33936,33937,33938,33939,33940,33941,33942,33944,33946,33947,33949,33950,33951,33952,33954,33955,33956,33957,33958,33959,33960,33961,33962,33963,33964,33965,33966,33968,33969,33971,33973,33974,33975,33979,33980,33982,33984,33986,33987,33989,33990,33991,33992,33995,33996,33998,33999,34002,34004,34005,34007,34008,34009,34010,34011,34012,34014,34017,34018,34020,34023,34024,34025,34026,34027,34029,34030,34031,34033,34034,34035,34036,34037,34038,34039,34040,34041,34042,34043,34045,34046,34048,34049,34050,20254,25955,26705,21971,20007,25620,39578,25195,23234,29791,33394,28073,26862,20711,33678,30722,26432,21049,27801,32433,20667,21861,29022,31579,26194,29642,33515,26441,23665,21024,29053,34923,38378,38485,25797,36193,33203,21892,27733,25159,32558,22674,20260,21830,36175,26188,19978,23578,35059,26786,25422,31245,28903,33421,21242,38902,23569,21736,37045,32461,22882,36170,34503,33292,33293,36198,25668,23556,24913,28041,31038,35774,30775,30003,21627,20280,36523,28145,23072,32453,31070,27784,23457,23158,29978,32958,24910,28183,22768,29983,29989,29298,21319,32499,34051,34052,34053,34054,34055,34056,34057,34058,34059,34061,34062,34063,34064,34066,34068,34069,34070,34072,34073,34075,34076,34077,34078,34080,34082,34083,34084,34085,34086,34087,34088,34089,34090,34093,34094,34095,34096,34097,34098,34099,34100,34101,34102,34110,34111,34112,34113,34114,34116,34117,34118,34119,34123,34124,34125,34126,34127,34128,34129,34130,34131,34132,34133,34135,34136,34138,34139,34140,34141,34143,34144,34145,34146,34147,34149,34150,34151,34153,34154,34155,34156,34157,34158,34159,34160,34161,34163,34165,34166,34167,34168,34172,34173,34175,34176,34177,30465,30427,21097,32988,22307,24072,22833,29422,26045,28287,35799,23608,34417,21313,30707,25342,26102,20160,39135,34432,23454,35782,21490,30690,20351,23630,39542,22987,24335,31034,22763,19990,26623,20107,25325,35475,36893,21183,26159,21980,22124,36866,20181,20365,37322,39280,27663,24066,24643,23460,35270,35797,25910,25163,39318,23432,23551,25480,21806,21463,30246,20861,34092,26530,26803,27530,25234,36755,21460,33298,28113,30095,20070,36174,23408,29087,34223,26257,26329,32626,34560,40653,40736,23646,26415,36848,26641,26463,25101,31446,22661,24246,25968,28465,34178,34179,34182,34184,34185,34186,34187,34188,34189,34190,34192,34193,34194,34195,34196,34197,34198,34199,34200,34201,34202,34205,34206,34207,34208,34209,34210,34211,34213,34214,34215,34217,34219,34220,34221,34225,34226,34227,34228,34229,34230,34232,34234,34235,34236,34237,34238,34239,34240,34242,34243,34244,34245,34246,34247,34248,34250,34251,34252,34253,34254,34257,34258,34260,34262,34263,34264,34265,34266,34267,34269,34270,34271,34272,34273,34274,34275,34277,34278,34279,34280,34282,34283,34284,34285,34286,34287,34288,34289,34290,34291,34292,34293,34294,34295,34296,24661,21047,32781,25684,34928,29993,24069,26643,25332,38684,21452,29245,35841,27700,30561,31246,21550,30636,39034,33308,35828,30805,26388,28865,26031,25749,22070,24605,31169,21496,19997,27515,32902,23546,21987,22235,20282,20284,39282,24051,26494,32824,24578,39042,36865,23435,35772,35829,25628,33368,25822,22013,33487,37221,20439,32032,36895,31903,20723,22609,28335,23487,35785,32899,37240,33948,31639,34429,38539,38543,32485,39635,30862,23681,31319,36930,38567,31071,23385,25439,31499,34001,26797,21766,32553,29712,32034,38145,25152,22604,20182,23427,22905,22612,34297,34298,34300,34301,34302,34304,34305,34306,34307,34308,34310,34311,34312,34313,34314,34315,34316,34317,34318,34319,34320,34322,34323,34324,34325,34327,34328,34329,34330,34331,34332,34333,34334,34335,34336,34337,34338,34339,34340,34341,34342,34344,34346,34347,34348,34349,34350,34351,34352,34353,34354,34355,34356,34357,34358,34359,34361,34362,34363,34365,34366,34367,34368,34369,34370,34371,34372,34373,34374,34375,34376,34377,34378,34379,34380,34386,34387,34389,34390,34391,34392,34393,34395,34396,34397,34399,34400,34401,34403,34404,34405,34406,34407,34408,34409,34410,29549,25374,36427,36367,32974,33492,25260,21488,27888,37214,22826,24577,27760,22349,25674,36138,30251,28393,22363,27264,30192,28525,35885,35848,22374,27631,34962,30899,25506,21497,28845,27748,22616,25642,22530,26848,33179,21776,31958,20504,36538,28108,36255,28907,25487,28059,28372,32486,33796,26691,36867,28120,38518,35752,22871,29305,34276,33150,30140,35466,26799,21076,36386,38161,25552,39064,36420,21884,20307,26367,22159,24789,28053,21059,23625,22825,28155,22635,3e4,29980,24684,33300,33094,25361,26465,36834,30522,36339,36148,38081,24086,21381,21548,28867,34413,34415,34416,34418,34419,34420,34421,34422,34423,34424,34435,34436,34437,34438,34439,34440,34441,34446,34447,34448,34449,34450,34452,34454,34455,34456,34457,34458,34459,34462,34463,34464,34465,34466,34469,34470,34475,34477,34478,34482,34483,34487,34488,34489,34491,34492,34493,34494,34495,34497,34498,34499,34501,34504,34508,34509,34514,34515,34517,34518,34519,34522,34524,34525,34528,34529,34530,34531,34533,34534,34535,34536,34538,34539,34540,34543,34549,34550,34551,34554,34555,34556,34557,34559,34561,34564,34565,34566,34571,34572,34574,34575,34576,34577,34580,34582,27712,24311,20572,20141,24237,25402,33351,36890,26704,37230,30643,21516,38108,24420,31461,26742,25413,31570,32479,30171,20599,25237,22836,36879,20984,31171,31361,22270,24466,36884,28034,23648,22303,21520,20820,28237,22242,25512,39059,33151,34581,35114,36864,21534,23663,33216,25302,25176,33073,40501,38464,39534,39548,26925,22949,25299,21822,25366,21703,34521,27964,23043,29926,34972,27498,22806,35916,24367,28286,29609,39037,20024,28919,23436,30871,25405,26202,30358,24779,23451,23113,19975,33109,27754,29579,20129,26505,32593,24448,26106,26395,24536,22916,23041,34585,34587,34589,34591,34592,34596,34598,34599,34600,34602,34603,34604,34605,34607,34608,34610,34611,34613,34614,34616,34617,34618,34620,34621,34624,34625,34626,34627,34628,34629,34630,34634,34635,34637,34639,34640,34641,34642,34644,34645,34646,34648,34650,34651,34652,34653,34654,34655,34657,34658,34662,34663,34664,34665,34666,34667,34668,34669,34671,34673,34674,34675,34677,34679,34680,34681,34682,34687,34688,34689,34692,34694,34695,34697,34698,34700,34702,34703,34704,34705,34706,34708,34709,34710,34712,34713,34714,34715,34716,34717,34718,34720,34721,34722,34723,34724,24013,24494,21361,38886,36829,26693,22260,21807,24799,20026,28493,32500,33479,33806,22996,20255,20266,23614,32428,26410,34074,21619,30031,32963,21890,39759,20301,28205,35859,23561,24944,21355,30239,28201,34442,25991,38395,32441,21563,31283,32010,38382,21985,32705,29934,25373,34583,28065,31389,25105,26017,21351,25569,27779,24043,21596,38056,20044,27745,35820,23627,26080,33436,26791,21566,21556,27595,27494,20116,25410,21320,33310,20237,20398,22366,25098,38654,26212,29289,21247,21153,24735,35823,26132,29081,26512,35199,30802,30717,26224,22075,21560,38177,29306,34725,34726,34727,34729,34730,34734,34736,34737,34738,34740,34742,34743,34744,34745,34747,34748,34750,34751,34753,34754,34755,34756,34757,34759,34760,34761,34764,34765,34766,34767,34768,34772,34773,34774,34775,34776,34777,34778,34780,34781,34782,34783,34785,34786,34787,34788,34790,34791,34792,34793,34795,34796,34797,34799,34800,34801,34802,34803,34804,34805,34806,34807,34808,34810,34811,34812,34813,34815,34816,34817,34818,34820,34821,34822,34823,34824,34825,34827,34828,34829,34830,34831,34832,34833,34834,34836,34839,34840,34841,34842,34844,34845,34846,34847,34848,34851,31232,24687,24076,24713,33181,22805,24796,29060,28911,28330,27728,29312,27268,34989,24109,20064,23219,21916,38115,27927,31995,38553,25103,32454,30606,34430,21283,38686,36758,26247,23777,20384,29421,19979,21414,22799,21523,25472,38184,20808,20185,40092,32420,21688,36132,34900,33335,38386,28046,24358,23244,26174,38505,29616,29486,21439,33146,39301,32673,23466,38519,38480,32447,30456,21410,38262,39321,31665,35140,28248,20065,32724,31077,35814,24819,21709,20139,39033,24055,27233,20687,21521,35937,33831,30813,38660,21066,21742,22179,38144,28040,23477,28102,26195,34852,34853,34854,34855,34856,34857,34858,34859,34860,34861,34862,34863,34864,34865,34867,34868,34869,34870,34871,34872,34874,34875,34877,34878,34879,34881,34882,34883,34886,34887,34888,34889,34890,34891,34894,34895,34896,34897,34898,34899,34901,34902,34904,34906,34907,34908,34909,34910,34911,34912,34918,34919,34922,34925,34927,34929,34931,34932,34933,34934,34936,34937,34938,34939,34940,34944,34947,34950,34951,34953,34954,34956,34958,34959,34960,34961,34963,34964,34965,34967,34968,34969,34970,34971,34973,34974,34975,34976,34977,34979,34981,34982,34983,34984,34985,34986,23567,23389,26657,32918,21880,31505,25928,26964,20123,27463,34638,38795,21327,25375,25658,37034,26012,32961,35856,20889,26800,21368,34809,25032,27844,27899,35874,23633,34218,33455,38156,27427,36763,26032,24571,24515,20449,34885,26143,33125,29481,24826,20852,21009,22411,24418,37026,34892,37266,24184,26447,24615,22995,20804,20982,33016,21256,27769,38596,29066,20241,20462,32670,26429,21957,38152,31168,34966,32483,22687,25100,38656,34394,22040,39035,24464,35768,33988,37207,21465,26093,24207,30044,24676,32110,23167,32490,32493,36713,21927,23459,24748,26059,29572,34988,34990,34991,34992,34994,34995,34996,34997,34998,35e3,35001,35002,35003,35005,35006,35007,35008,35011,35012,35015,35016,35018,35019,35020,35021,35023,35024,35025,35027,35030,35031,35034,35035,35036,35037,35038,35040,35041,35046,35047,35049,35050,35051,35052,35053,35054,35055,35058,35061,35062,35063,35066,35067,35069,35071,35072,35073,35075,35076,35077,35078,35079,35080,35081,35083,35084,35085,35086,35087,35089,35092,35093,35094,35095,35096,35100,35101,35102,35103,35104,35106,35107,35108,35110,35111,35112,35113,35116,35117,35118,35119,35121,35122,35123,35125,35127,36873,30307,30505,32474,38772,34203,23398,31348,38634,34880,21195,29071,24490,26092,35810,23547,39535,24033,27529,27739,35757,35759,36874,36805,21387,25276,40486,40493,21568,20011,33469,29273,34460,23830,34905,28079,38597,21713,20122,35766,28937,21693,38409,28895,28153,30416,20005,30740,34578,23721,24310,35328,39068,38414,28814,27839,22852,25513,30524,34893,28436,33395,22576,29141,21388,30746,38593,21761,24422,28976,23476,35866,39564,27523,22830,40495,31207,26472,25196,20335,30113,32650,27915,38451,27687,20208,30162,20859,26679,28478,36992,33136,22934,29814,35128,35129,35130,35131,35132,35133,35134,35135,35136,35138,35139,35141,35142,35143,35144,35145,35146,35147,35148,35149,35150,35151,35152,35153,35154,35155,35156,35157,35158,35159,35160,35161,35162,35163,35164,35165,35168,35169,35170,35171,35172,35173,35175,35176,35177,35178,35179,35180,35181,35182,35183,35184,35185,35186,35187,35188,35189,35190,35191,35192,35193,35194,35196,35197,35198,35200,35202,35204,35205,35207,35208,35209,35210,35211,35212,35213,35214,35215,35216,35217,35218,35219,35220,35221,35222,35223,35224,35225,35226,35227,35228,35229,35230,35231,35232,35233,25671,23591,36965,31377,35875,23002,21676,33280,33647,35201,32768,26928,22094,32822,29239,37326,20918,20063,39029,25494,19994,21494,26355,33099,22812,28082,19968,22777,21307,25558,38129,20381,20234,34915,39056,22839,36951,31227,20202,33008,30097,27778,23452,23016,24413,26885,34433,20506,24050,20057,30691,20197,33402,25233,26131,37009,23673,20159,24441,33222,36920,32900,30123,20134,35028,24847,27589,24518,20041,30410,28322,35811,35758,35850,35793,24322,32764,32716,32462,33589,33643,22240,27575,38899,38452,23035,21535,38134,28139,23493,39278,23609,24341,38544,35234,35235,35236,35237,35238,35239,35240,35241,35242,35243,35244,35245,35246,35247,35248,35249,35250,35251,35252,35253,35254,35255,35256,35257,35258,35259,35260,35261,35262,35263,35264,35267,35277,35283,35284,35285,35287,35288,35289,35291,35293,35295,35296,35297,35298,35300,35303,35304,35305,35306,35308,35309,35310,35312,35313,35314,35316,35317,35318,35319,35320,35321,35322,35323,35324,35325,35326,35327,35329,35330,35331,35332,35333,35334,35336,35337,35338,35339,35340,35341,35342,35343,35344,35345,35346,35347,35348,35349,35350,35351,35352,35353,35354,35355,35356,35357,21360,33521,27185,23156,40560,24212,32552,33721,33828,33829,33639,34631,36814,36194,30408,24433,39062,30828,26144,21727,25317,20323,33219,30152,24248,38605,36362,34553,21647,27891,28044,27704,24703,21191,29992,24189,20248,24736,24551,23588,30001,37038,38080,29369,27833,28216,37193,26377,21451,21491,20305,37321,35825,21448,24188,36802,28132,20110,30402,27014,34398,24858,33286,20313,20446,36926,40060,24841,28189,28180,38533,20104,23089,38632,19982,23679,31161,23431,35821,32701,29577,22495,33419,37057,21505,36935,21947,23786,24481,24840,27442,29425,32946,35465,35358,35359,35360,35361,35362,35363,35364,35365,35366,35367,35368,35369,35370,35371,35372,35373,35374,35375,35376,35377,35378,35379,35380,35381,35382,35383,35384,35385,35386,35387,35388,35389,35391,35392,35393,35394,35395,35396,35397,35398,35399,35401,35402,35403,35404,35405,35406,35407,35408,35409,35410,35411,35412,35413,35414,35415,35416,35417,35418,35419,35420,35421,35422,35423,35424,35425,35426,35427,35428,35429,35430,35431,35432,35433,35434,35435,35436,35437,35438,35439,35440,35441,35442,35443,35444,35445,35446,35447,35448,35450,35451,35452,35453,35454,35455,35456,28020,23507,35029,39044,35947,39533,40499,28170,20900,20803,22435,34945,21407,25588,36757,22253,21592,22278,29503,28304,32536,36828,33489,24895,24616,38498,26352,32422,36234,36291,38053,23731,31908,26376,24742,38405,32792,20113,37095,21248,38504,20801,36816,34164,37213,26197,38901,23381,21277,30776,26434,26685,21705,28798,23472,36733,20877,22312,21681,25874,26242,36190,36163,33039,33900,36973,31967,20991,34299,26531,26089,28577,34468,36481,22122,36896,30338,28790,29157,36131,25321,21017,27901,36156,24590,22686,24974,26366,36192,25166,21939,28195,26413,36711,35457,35458,35459,35460,35461,35462,35463,35464,35467,35468,35469,35470,35471,35472,35473,35474,35476,35477,35478,35479,35480,35481,35482,35483,35484,35485,35486,35487,35488,35489,35490,35491,35492,35493,35494,35495,35496,35497,35498,35499,35500,35501,35502,35503,35504,35505,35506,35507,35508,35509,35510,35511,35512,35513,35514,35515,35516,35517,35518,35519,35520,35521,35522,35523,35524,35525,35526,35527,35528,35529,35530,35531,35532,35533,35534,35535,35536,35537,35538,35539,35540,35541,35542,35543,35544,35545,35546,35547,35548,35549,35550,35551,35552,35553,35554,35555,38113,38392,30504,26629,27048,21643,20045,28856,35784,25688,25995,23429,31364,20538,23528,30651,27617,35449,31896,27838,30415,26025,36759,23853,23637,34360,26632,21344,25112,31449,28251,32509,27167,31456,24432,28467,24352,25484,28072,26454,19976,24080,36134,20183,32960,30260,38556,25307,26157,25214,27836,36213,29031,32617,20806,32903,21484,36974,25240,21746,34544,36761,32773,38167,34071,36825,27993,29645,26015,30495,29956,30759,33275,36126,38024,20390,26517,30137,35786,38663,25391,38215,38453,33976,25379,30529,24449,29424,20105,24596,25972,25327,27491,25919,35556,35557,35558,35559,35560,35561,35562,35563,35564,35565,35566,35567,35568,35569,35570,35571,35572,35573,35574,35575,35576,35577,35578,35579,35580,35581,35582,35583,35584,35585,35586,35587,35588,35589,35590,35592,35593,35594,35595,35596,35597,35598,35599,35600,35601,35602,35603,35604,35605,35606,35607,35608,35609,35610,35611,35612,35613,35614,35615,35616,35617,35618,35619,35620,35621,35623,35624,35625,35626,35627,35628,35629,35630,35631,35632,35633,35634,35635,35636,35637,35638,35639,35640,35641,35642,35643,35644,35645,35646,35647,35648,35649,35650,35651,35652,35653,24103,30151,37073,35777,33437,26525,25903,21553,34584,30693,32930,33026,27713,20043,32455,32844,30452,26893,27542,25191,20540,20356,22336,25351,27490,36286,21482,26088,32440,24535,25370,25527,33267,33268,32622,24092,23769,21046,26234,31209,31258,36136,28825,30164,28382,27835,31378,20013,30405,24544,38047,34935,32456,31181,32959,37325,20210,20247,33311,21608,24030,27954,35788,31909,36724,32920,24090,21650,30385,23449,26172,39588,29664,26666,34523,26417,29482,35832,35803,36880,31481,28891,29038,25284,30633,22065,20027,33879,26609,21161,34496,36142,38136,31569,35654,35655,35656,35657,35658,35659,35660,35661,35662,35663,35664,35665,35666,35667,35668,35669,35670,35671,35672,35673,35674,35675,35676,35677,35678,35679,35680,35681,35682,35683,35684,35685,35687,35688,35689,35690,35691,35693,35694,35695,35696,35697,35698,35699,35700,35701,35702,35703,35704,35705,35706,35707,35708,35709,35710,35711,35712,35713,35714,35715,35716,35717,35718,35719,35720,35721,35722,35723,35724,35725,35726,35727,35728,35729,35730,35731,35732,35733,35734,35735,35736,35737,35738,35739,35740,35741,35742,35743,35756,35761,35771,35783,35792,35818,35849,35870,20303,27880,31069,39547,25235,29226,25341,19987,30742,36716,25776,36186,31686,26729,24196,35013,22918,25758,22766,29366,26894,38181,36861,36184,22368,32512,35846,20934,25417,25305,21331,26700,29730,33537,37196,21828,30528,28796,27978,20857,21672,36164,23039,28363,28100,23388,32043,20180,31869,28371,23376,33258,28173,23383,39683,26837,36394,23447,32508,24635,32437,37049,36208,22863,25549,31199,36275,21330,26063,31062,35781,38459,32452,38075,32386,22068,37257,26368,32618,23562,36981,26152,24038,20304,26590,20570,20316,22352,24231,59408,59409,59410,59411,59412,35896,35897,35898,35899,35900,35901,35902,35903,35904,35906,35907,35908,35909,35912,35914,35915,35917,35918,35919,35920,35921,35922,35923,35924,35926,35927,35928,35929,35931,35932,35933,35934,35935,35936,35939,35940,35941,35942,35943,35944,35945,35948,35949,35950,35951,35952,35953,35954,35956,35957,35958,35959,35963,35964,35965,35966,35967,35968,35969,35971,35972,35974,35975,35976,35979,35981,35982,35983,35984,35985,35986,35987,35989,35990,35991,35993,35994,35995,35996,35997,35998,35999,36e3,36001,36002,36003,36004,36005,36006,36007,36008,36009,36010,36011,36012,36013,20109,19980,20800,19984,24319,21317,19989,20120,19998,39730,23404,22121,20008,31162,20031,21269,20039,22829,29243,21358,27664,22239,32996,39319,27603,30590,40727,20022,20127,40720,20060,20073,20115,33416,23387,21868,22031,20164,21389,21405,21411,21413,21422,38757,36189,21274,21493,21286,21294,21310,36188,21350,21347,20994,21e3,21006,21037,21043,21055,21056,21068,21086,21089,21084,33967,21117,21122,21121,21136,21139,20866,32596,20155,20163,20169,20162,20200,20193,20203,20190,20251,20211,20258,20324,20213,20261,20263,20233,20267,20318,20327,25912,20314,20317,36014,36015,36016,36017,36018,36019,36020,36021,36022,36023,36024,36025,36026,36027,36028,36029,36030,36031,36032,36033,36034,36035,36036,36037,36038,36039,36040,36041,36042,36043,36044,36045,36046,36047,36048,36049,36050,36051,36052,36053,36054,36055,36056,36057,36058,36059,36060,36061,36062,36063,36064,36065,36066,36067,36068,36069,36070,36071,36072,36073,36074,36075,36076,36077,36078,36079,36080,36081,36082,36083,36084,36085,36086,36087,36088,36089,36090,36091,36092,36093,36094,36095,36096,36097,36098,36099,36100,36101,36102,36103,36104,36105,36106,36107,36108,36109,20319,20311,20274,20285,20342,20340,20369,20361,20355,20367,20350,20347,20394,20348,20396,20372,20454,20456,20458,20421,20442,20451,20444,20433,20447,20472,20521,20556,20467,20524,20495,20526,20525,20478,20508,20492,20517,20520,20606,20547,20565,20552,20558,20588,20603,20645,20647,20649,20666,20694,20742,20717,20716,20710,20718,20743,20747,20189,27709,20312,20325,20430,40864,27718,31860,20846,24061,40649,39320,20865,22804,21241,21261,35335,21264,20971,22809,20821,20128,20822,20147,34926,34980,20149,33044,35026,31104,23348,34819,32696,20907,20913,20925,20924,36110,36111,36112,36113,36114,36115,36116,36117,36118,36119,36120,36121,36122,36123,36124,36128,36177,36178,36183,36191,36197,36200,36201,36202,36204,36206,36207,36209,36210,36216,36217,36218,36219,36220,36221,36222,36223,36224,36226,36227,36230,36231,36232,36233,36236,36237,36238,36239,36240,36242,36243,36245,36246,36247,36248,36249,36250,36251,36252,36253,36254,36256,36257,36258,36260,36261,36262,36263,36264,36265,36266,36267,36268,36269,36270,36271,36272,36274,36278,36279,36281,36283,36285,36288,36289,36290,36293,36295,36296,36297,36298,36301,36304,36306,36307,36308,20935,20886,20898,20901,35744,35750,35751,35754,35764,35765,35767,35778,35779,35787,35791,35790,35794,35795,35796,35798,35800,35801,35804,35807,35808,35812,35816,35817,35822,35824,35827,35830,35833,35836,35839,35840,35842,35844,35847,35852,35855,35857,35858,35860,35861,35862,35865,35867,35864,35869,35871,35872,35873,35877,35879,35882,35883,35886,35887,35890,35891,35893,35894,21353,21370,38429,38434,38433,38449,38442,38461,38460,38466,38473,38484,38495,38503,38508,38514,38516,38536,38541,38551,38576,37015,37019,37021,37017,37036,37025,37044,37043,37046,37050,36309,36312,36313,36316,36320,36321,36322,36325,36326,36327,36329,36333,36334,36336,36337,36338,36340,36342,36348,36350,36351,36352,36353,36354,36355,36356,36358,36359,36360,36363,36365,36366,36368,36369,36370,36371,36373,36374,36375,36376,36377,36378,36379,36380,36384,36385,36388,36389,36390,36391,36392,36395,36397,36400,36402,36403,36404,36406,36407,36408,36411,36412,36414,36415,36419,36421,36422,36428,36429,36430,36431,36432,36435,36436,36437,36438,36439,36440,36442,36443,36444,36445,36446,36447,36448,36449,36450,36451,36452,36453,36455,36456,36458,36459,36462,36465,37048,37040,37071,37061,37054,37072,37060,37063,37075,37094,37090,37084,37079,37083,37099,37103,37118,37124,37154,37150,37155,37169,37167,37177,37187,37190,21005,22850,21154,21164,21165,21182,21759,21200,21206,21232,21471,29166,30669,24308,20981,20988,39727,21430,24321,30042,24047,22348,22441,22433,22654,22716,22725,22737,22313,22316,22314,22323,22329,22318,22319,22364,22331,22338,22377,22405,22379,22406,22396,22395,22376,22381,22390,22387,22445,22436,22412,22450,22479,22439,22452,22419,22432,22485,22488,22490,22489,22482,22456,22516,22511,22520,22500,22493,36467,36469,36471,36472,36473,36474,36475,36477,36478,36480,36482,36483,36484,36486,36488,36489,36490,36491,36492,36493,36494,36497,36498,36499,36501,36502,36503,36504,36505,36506,36507,36509,36511,36512,36513,36514,36515,36516,36517,36518,36519,36520,36521,36522,36525,36526,36528,36529,36531,36532,36533,36534,36535,36536,36537,36539,36540,36541,36542,36543,36544,36545,36546,36547,36548,36549,36550,36551,36552,36553,36554,36555,36556,36557,36559,36560,36561,36562,36563,36564,36565,36566,36567,36568,36569,36570,36571,36572,36573,36574,36575,36576,36577,36578,36579,36580,22539,22541,22525,22509,22528,22558,22553,22596,22560,22629,22636,22657,22665,22682,22656,39336,40729,25087,33401,33405,33407,33423,33418,33448,33412,33422,33425,33431,33433,33451,33464,33470,33456,33480,33482,33507,33432,33463,33454,33483,33484,33473,33449,33460,33441,33450,33439,33476,33486,33444,33505,33545,33527,33508,33551,33543,33500,33524,33490,33496,33548,33531,33491,33553,33562,33542,33556,33557,33504,33493,33564,33617,33627,33628,33544,33682,33596,33588,33585,33691,33630,33583,33615,33607,33603,33631,33600,33559,33632,33581,33594,33587,33638,33637,36581,36582,36583,36584,36585,36586,36587,36588,36589,36590,36591,36592,36593,36594,36595,36596,36597,36598,36599,36600,36601,36602,36603,36604,36605,36606,36607,36608,36609,36610,36611,36612,36613,36614,36615,36616,36617,36618,36619,36620,36621,36622,36623,36624,36625,36626,36627,36628,36629,36630,36631,36632,36633,36634,36635,36636,36637,36638,36639,36640,36641,36642,36643,36644,36645,36646,36647,36648,36649,36650,36651,36652,36653,36654,36655,36656,36657,36658,36659,36660,36661,36662,36663,36664,36665,36666,36667,36668,36669,36670,36671,36672,36673,36674,36675,36676,33640,33563,33641,33644,33642,33645,33646,33712,33656,33715,33716,33696,33706,33683,33692,33669,33660,33718,33705,33661,33720,33659,33688,33694,33704,33722,33724,33729,33793,33765,33752,22535,33816,33803,33757,33789,33750,33820,33848,33809,33798,33748,33759,33807,33795,33784,33785,33770,33733,33728,33830,33776,33761,33884,33873,33882,33881,33907,33927,33928,33914,33929,33912,33852,33862,33897,33910,33932,33934,33841,33901,33985,33997,34e3,34022,33981,34003,33994,33983,33978,34016,33953,33977,33972,33943,34021,34019,34060,29965,34104,34032,34105,34079,34106,36677,36678,36679,36680,36681,36682,36683,36684,36685,36686,36687,36688,36689,36690,36691,36692,36693,36694,36695,36696,36697,36698,36699,36700,36701,36702,36703,36704,36705,36706,36707,36708,36709,36714,36736,36748,36754,36765,36768,36769,36770,36772,36773,36774,36775,36778,36780,36781,36782,36783,36786,36787,36788,36789,36791,36792,36794,36795,36796,36799,36800,36803,36806,36809,36810,36811,36812,36813,36815,36818,36822,36823,36826,36832,36833,36835,36839,36844,36847,36849,36850,36852,36853,36854,36858,36859,36860,36862,36863,36871,36872,36876,36878,36883,36885,36888,34134,34107,34047,34044,34137,34120,34152,34148,34142,34170,30626,34115,34162,34171,34212,34216,34183,34191,34169,34222,34204,34181,34233,34231,34224,34259,34241,34268,34303,34343,34309,34345,34326,34364,24318,24328,22844,22849,32823,22869,22874,22872,21263,23586,23589,23596,23604,25164,25194,25247,25275,25290,25306,25303,25326,25378,25334,25401,25419,25411,25517,25590,25457,25466,25486,25524,25453,25516,25482,25449,25518,25532,25586,25592,25568,25599,25540,25566,25550,25682,25542,25534,25669,25665,25611,25627,25632,25612,25638,25633,25694,25732,25709,25750,36889,36892,36899,36900,36901,36903,36904,36905,36906,36907,36908,36912,36913,36914,36915,36916,36919,36921,36922,36925,36927,36928,36931,36933,36934,36936,36937,36938,36939,36940,36942,36948,36949,36950,36953,36954,36956,36957,36958,36959,36960,36961,36964,36966,36967,36969,36970,36971,36972,36975,36976,36977,36978,36979,36982,36983,36984,36985,36986,36987,36988,36990,36993,36996,36997,36998,36999,37001,37002,37004,37005,37006,37007,37008,37010,37012,37014,37016,37018,37020,37022,37023,37024,37028,37029,37031,37032,37033,37035,37037,37042,37047,37052,37053,37055,37056,25722,25783,25784,25753,25786,25792,25808,25815,25828,25826,25865,25893,25902,24331,24530,29977,24337,21343,21489,21501,21481,21480,21499,21522,21526,21510,21579,21586,21587,21588,21590,21571,21537,21591,21593,21539,21554,21634,21652,21623,21617,21604,21658,21659,21636,21622,21606,21661,21712,21677,21698,21684,21714,21671,21670,21715,21716,21618,21667,21717,21691,21695,21708,21721,21722,21724,21673,21674,21668,21725,21711,21726,21787,21735,21792,21757,21780,21747,21794,21795,21775,21777,21799,21802,21863,21903,21941,21833,21869,21825,21845,21823,21840,21820,37058,37059,37062,37064,37065,37067,37068,37069,37074,37076,37077,37078,37080,37081,37082,37086,37087,37088,37091,37092,37093,37097,37098,37100,37102,37104,37105,37106,37107,37109,37110,37111,37113,37114,37115,37116,37119,37120,37121,37123,37125,37126,37127,37128,37129,37130,37131,37132,37133,37134,37135,37136,37137,37138,37139,37140,37141,37142,37143,37144,37146,37147,37148,37149,37151,37152,37153,37156,37157,37158,37159,37160,37161,37162,37163,37164,37165,37166,37168,37170,37171,37172,37173,37174,37175,37176,37178,37179,37180,37181,37182,37183,37184,37185,37186,37188,21815,21846,21877,21878,21879,21811,21808,21852,21899,21970,21891,21937,21945,21896,21889,21919,21886,21974,21905,21883,21983,21949,21950,21908,21913,21994,22007,21961,22047,21969,21995,21996,21972,21990,21981,21956,21999,21989,22002,22003,21964,21965,21992,22005,21988,36756,22046,22024,22028,22017,22052,22051,22014,22016,22055,22061,22104,22073,22103,22060,22093,22114,22105,22108,22092,22100,22150,22116,22129,22123,22139,22140,22149,22163,22191,22228,22231,22237,22241,22261,22251,22265,22271,22276,22282,22281,22300,24079,24089,24084,24081,24113,24123,24124,37189,37191,37192,37201,37203,37204,37205,37206,37208,37209,37211,37212,37215,37216,37222,37223,37224,37227,37229,37235,37242,37243,37244,37248,37249,37250,37251,37252,37254,37256,37258,37262,37263,37267,37268,37269,37270,37271,37272,37273,37276,37277,37278,37279,37280,37281,37284,37285,37286,37287,37288,37289,37291,37292,37296,37297,37298,37299,37302,37303,37304,37305,37307,37308,37309,37310,37311,37312,37313,37314,37315,37316,37317,37318,37320,37323,37328,37330,37331,37332,37333,37334,37335,37336,37337,37338,37339,37341,37342,37343,37344,37345,37346,37347,37348,37349,24119,24132,24148,24155,24158,24161,23692,23674,23693,23696,23702,23688,23704,23705,23697,23706,23708,23733,23714,23741,23724,23723,23729,23715,23745,23735,23748,23762,23780,23755,23781,23810,23811,23847,23846,23854,23844,23838,23814,23835,23896,23870,23860,23869,23916,23899,23919,23901,23915,23883,23882,23913,23924,23938,23961,23965,35955,23991,24005,24435,24439,24450,24455,24457,24460,24469,24473,24476,24488,24493,24501,24508,34914,24417,29357,29360,29364,29367,29368,29379,29377,29390,29389,29394,29416,29423,29417,29426,29428,29431,29441,29427,29443,29434,37350,37351,37352,37353,37354,37355,37356,37357,37358,37359,37360,37361,37362,37363,37364,37365,37366,37367,37368,37369,37370,37371,37372,37373,37374,37375,37376,37377,37378,37379,37380,37381,37382,37383,37384,37385,37386,37387,37388,37389,37390,37391,37392,37393,37394,37395,37396,37397,37398,37399,37400,37401,37402,37403,37404,37405,37406,37407,37408,37409,37410,37411,37412,37413,37414,37415,37416,37417,37418,37419,37420,37421,37422,37423,37424,37425,37426,37427,37428,37429,37430,37431,37432,37433,37434,37435,37436,37437,37438,37439,37440,37441,37442,37443,37444,37445,29435,29463,29459,29473,29450,29470,29469,29461,29474,29497,29477,29484,29496,29489,29520,29517,29527,29536,29548,29551,29566,33307,22821,39143,22820,22786,39267,39271,39272,39273,39274,39275,39276,39284,39287,39293,39296,39300,39303,39306,39309,39312,39313,39315,39316,39317,24192,24209,24203,24214,24229,24224,24249,24245,24254,24243,36179,24274,24273,24283,24296,24298,33210,24516,24521,24534,24527,24579,24558,24580,24545,24548,24574,24581,24582,24554,24557,24568,24601,24629,24614,24603,24591,24589,24617,24619,24586,24639,24609,24696,24697,24699,24698,24642,37446,37447,37448,37449,37450,37451,37452,37453,37454,37455,37456,37457,37458,37459,37460,37461,37462,37463,37464,37465,37466,37467,37468,37469,37470,37471,37472,37473,37474,37475,37476,37477,37478,37479,37480,37481,37482,37483,37484,37485,37486,37487,37488,37489,37490,37491,37493,37494,37495,37496,37497,37498,37499,37500,37501,37502,37503,37504,37505,37506,37507,37508,37509,37510,37511,37512,37513,37514,37515,37516,37517,37519,37520,37521,37522,37523,37524,37525,37526,37527,37528,37529,37530,37531,37532,37533,37534,37535,37536,37537,37538,37539,37540,37541,37542,37543,24682,24701,24726,24730,24749,24733,24707,24722,24716,24731,24812,24763,24753,24797,24792,24774,24794,24756,24864,24870,24853,24867,24820,24832,24846,24875,24906,24949,25004,24980,24999,25015,25044,25077,24541,38579,38377,38379,38385,38387,38389,38390,38396,38398,38403,38404,38406,38408,38410,38411,38412,38413,38415,38418,38421,38422,38423,38425,38426,20012,29247,25109,27701,27732,27740,27722,27811,27781,27792,27796,27788,27752,27753,27764,27766,27782,27817,27856,27860,27821,27895,27896,27889,27863,27826,27872,27862,27898,27883,27886,27825,27859,27887,27902,37544,37545,37546,37547,37548,37549,37551,37552,37553,37554,37555,37556,37557,37558,37559,37560,37561,37562,37563,37564,37565,37566,37567,37568,37569,37570,37571,37572,37573,37574,37575,37577,37578,37579,37580,37581,37582,37583,37584,37585,37586,37587,37588,37589,37590,37591,37592,37593,37594,37595,37596,37597,37598,37599,37600,37601,37602,37603,37604,37605,37606,37607,37608,37609,37610,37611,37612,37613,37614,37615,37616,37617,37618,37619,37620,37621,37622,37623,37624,37625,37626,37627,37628,37629,37630,37631,37632,37633,37634,37635,37636,37637,37638,37639,37640,37641,27961,27943,27916,27971,27976,27911,27908,27929,27918,27947,27981,27950,27957,27930,27983,27986,27988,27955,28049,28015,28062,28064,27998,28051,28052,27996,28e3,28028,28003,28186,28103,28101,28126,28174,28095,28128,28177,28134,28125,28121,28182,28075,28172,28078,28203,28270,28238,28267,28338,28255,28294,28243,28244,28210,28197,28228,28383,28337,28312,28384,28461,28386,28325,28327,28349,28347,28343,28375,28340,28367,28303,28354,28319,28514,28486,28487,28452,28437,28409,28463,28470,28491,28532,28458,28425,28457,28553,28557,28556,28536,28530,28540,28538,28625,37642,37643,37644,37645,37646,37647,37648,37649,37650,37651,37652,37653,37654,37655,37656,37657,37658,37659,37660,37661,37662,37663,37664,37665,37666,37667,37668,37669,37670,37671,37672,37673,37674,37675,37676,37677,37678,37679,37680,37681,37682,37683,37684,37685,37686,37687,37688,37689,37690,37691,37692,37693,37695,37696,37697,37698,37699,37700,37701,37702,37703,37704,37705,37706,37707,37708,37709,37710,37711,37712,37713,37714,37715,37716,37717,37718,37719,37720,37721,37722,37723,37724,37725,37726,37727,37728,37729,37730,37731,37732,37733,37734,37735,37736,37737,37739,28617,28583,28601,28598,28610,28641,28654,28638,28640,28655,28698,28707,28699,28729,28725,28751,28766,23424,23428,23445,23443,23461,23480,29999,39582,25652,23524,23534,35120,23536,36423,35591,36790,36819,36821,36837,36846,36836,36841,36838,36851,36840,36869,36868,36875,36902,36881,36877,36886,36897,36917,36918,36909,36911,36932,36945,36946,36944,36968,36952,36962,36955,26297,36980,36989,36994,37e3,36995,37003,24400,24407,24406,24408,23611,21675,23632,23641,23409,23651,23654,32700,24362,24361,24365,33396,24380,39739,23662,22913,22915,22925,22953,22954,22947,37740,37741,37742,37743,37744,37745,37746,37747,37748,37749,37750,37751,37752,37753,37754,37755,37756,37757,37758,37759,37760,37761,37762,37763,37764,37765,37766,37767,37768,37769,37770,37771,37772,37773,37774,37776,37777,37778,37779,37780,37781,37782,37783,37784,37785,37786,37787,37788,37789,37790,37791,37792,37793,37794,37795,37796,37797,37798,37799,37800,37801,37802,37803,37804,37805,37806,37807,37808,37809,37810,37811,37812,37813,37814,37815,37816,37817,37818,37819,37820,37821,37822,37823,37824,37825,37826,37827,37828,37829,37830,37831,37832,37833,37835,37836,37837,22935,22986,22955,22942,22948,22994,22962,22959,22999,22974,23045,23046,23005,23048,23011,23e3,23033,23052,23049,23090,23092,23057,23075,23059,23104,23143,23114,23125,23100,23138,23157,33004,23210,23195,23159,23162,23230,23275,23218,23250,23252,23224,23264,23267,23281,23254,23270,23256,23260,23305,23319,23318,23346,23351,23360,23573,23580,23386,23397,23411,23377,23379,23394,39541,39543,39544,39546,39551,39549,39552,39553,39557,39560,39562,39568,39570,39571,39574,39576,39579,39580,39581,39583,39584,39586,39587,39589,39591,32415,32417,32419,32421,32424,32425,37838,37839,37840,37841,37842,37843,37844,37845,37847,37848,37849,37850,37851,37852,37853,37854,37855,37856,37857,37858,37859,37860,37861,37862,37863,37864,37865,37866,37867,37868,37869,37870,37871,37872,37873,37874,37875,37876,37877,37878,37879,37880,37881,37882,37883,37884,37885,37886,37887,37888,37889,37890,37891,37892,37893,37894,37895,37896,37897,37898,37899,37900,37901,37902,37903,37904,37905,37906,37907,37908,37909,37910,37911,37912,37913,37914,37915,37916,37917,37918,37919,37920,37921,37922,37923,37924,37925,37926,37927,37928,37929,37930,37931,37932,37933,37934,32429,32432,32446,32448,32449,32450,32457,32459,32460,32464,32468,32471,32475,32480,32481,32488,32491,32494,32495,32497,32498,32525,32502,32506,32507,32510,32513,32514,32515,32519,32520,32523,32524,32527,32529,32530,32535,32537,32540,32539,32543,32545,32546,32547,32548,32549,32550,32551,32554,32555,32556,32557,32559,32560,32561,32562,32563,32565,24186,30079,24027,30014,37013,29582,29585,29614,29602,29599,29647,29634,29649,29623,29619,29632,29641,29640,29669,29657,39036,29706,29673,29671,29662,29626,29682,29711,29738,29787,29734,29733,29736,29744,29742,29740,37935,37936,37937,37938,37939,37940,37941,37942,37943,37944,37945,37946,37947,37948,37949,37951,37952,37953,37954,37955,37956,37957,37958,37959,37960,37961,37962,37963,37964,37965,37966,37967,37968,37969,37970,37971,37972,37973,37974,37975,37976,37977,37978,37979,37980,37981,37982,37983,37984,37985,37986,37987,37988,37989,37990,37991,37992,37993,37994,37996,37997,37998,37999,38e3,38001,38002,38003,38004,38005,38006,38007,38008,38009,38010,38011,38012,38013,38014,38015,38016,38017,38018,38019,38020,38033,38038,38040,38087,38095,38099,38100,38106,38118,38139,38172,38176,29723,29722,29761,29788,29783,29781,29785,29815,29805,29822,29852,29838,29824,29825,29831,29835,29854,29864,29865,29840,29863,29906,29882,38890,38891,38892,26444,26451,26462,26440,26473,26533,26503,26474,26483,26520,26535,26485,26536,26526,26541,26507,26487,26492,26608,26633,26584,26634,26601,26544,26636,26585,26549,26586,26547,26589,26624,26563,26552,26594,26638,26561,26621,26674,26675,26720,26721,26702,26722,26692,26724,26755,26653,26709,26726,26689,26727,26688,26686,26698,26697,26665,26805,26767,26740,26743,26771,26731,26818,26990,26876,26911,26912,26873,38183,38195,38205,38211,38216,38219,38229,38234,38240,38254,38260,38261,38263,38264,38265,38266,38267,38268,38269,38270,38272,38273,38274,38275,38276,38277,38278,38279,38280,38281,38282,38283,38284,38285,38286,38287,38288,38289,38290,38291,38292,38293,38294,38295,38296,38297,38298,38299,38300,38301,38302,38303,38304,38305,38306,38307,38308,38309,38310,38311,38312,38313,38314,38315,38316,38317,38318,38319,38320,38321,38322,38323,38324,38325,38326,38327,38328,38329,38330,38331,38332,38333,38334,38335,38336,38337,38338,38339,38340,38341,38342,38343,38344,38345,38346,38347,26916,26864,26891,26881,26967,26851,26896,26993,26937,26976,26946,26973,27012,26987,27008,27032,27e3,26932,27084,27015,27016,27086,27017,26982,26979,27001,27035,27047,27067,27051,27053,27092,27057,27073,27082,27103,27029,27104,27021,27135,27183,27117,27159,27160,27237,27122,27204,27198,27296,27216,27227,27189,27278,27257,27197,27176,27224,27260,27281,27280,27305,27287,27307,29495,29522,27521,27522,27527,27524,27538,27539,27533,27546,27547,27553,27562,36715,36717,36721,36722,36723,36725,36726,36728,36727,36729,36730,36732,36734,36737,36738,36740,36743,36747,38348,38349,38350,38351,38352,38353,38354,38355,38356,38357,38358,38359,38360,38361,38362,38363,38364,38365,38366,38367,38368,38369,38370,38371,38372,38373,38374,38375,38380,38399,38407,38419,38424,38427,38430,38432,38435,38436,38437,38438,38439,38440,38441,38443,38444,38445,38447,38448,38455,38456,38457,38458,38462,38465,38467,38474,38478,38479,38481,38482,38483,38486,38487,38488,38489,38490,38492,38493,38494,38496,38499,38501,38502,38507,38509,38510,38511,38512,38513,38515,38520,38521,38522,38523,38524,38525,38526,38527,38528,38529,38530,38531,38532,38535,38537,38538,36749,36750,36751,36760,36762,36558,25099,25111,25115,25119,25122,25121,25125,25124,25132,33255,29935,29940,29951,29967,29969,29971,25908,26094,26095,26096,26122,26137,26482,26115,26133,26112,28805,26359,26141,26164,26161,26166,26165,32774,26207,26196,26177,26191,26198,26209,26199,26231,26244,26252,26279,26269,26302,26331,26332,26342,26345,36146,36147,36150,36155,36157,36160,36165,36166,36168,36169,36167,36173,36181,36185,35271,35274,35275,35276,35278,35279,35280,35281,29294,29343,29277,29286,29295,29310,29311,29316,29323,29325,29327,29330,25352,25394,25520,38540,38542,38545,38546,38547,38549,38550,38554,38555,38557,38558,38559,38560,38561,38562,38563,38564,38565,38566,38568,38569,38570,38571,38572,38573,38574,38575,38577,38578,38580,38581,38583,38584,38586,38587,38591,38594,38595,38600,38602,38603,38608,38609,38611,38612,38614,38615,38616,38617,38618,38619,38620,38621,38622,38623,38625,38626,38627,38628,38629,38630,38631,38635,38636,38637,38638,38640,38641,38642,38644,38645,38648,38650,38651,38652,38653,38655,38658,38659,38661,38666,38667,38668,38672,38673,38674,38676,38677,38679,38680,38681,38682,38683,38685,38687,38688,25663,25816,32772,27626,27635,27645,27637,27641,27653,27655,27654,27661,27669,27672,27673,27674,27681,27689,27684,27690,27698,25909,25941,25963,29261,29266,29270,29232,34402,21014,32927,32924,32915,32956,26378,32957,32945,32939,32941,32948,32951,32999,33e3,33001,33002,32987,32962,32964,32985,32973,32983,26384,32989,33003,33009,33012,33005,33037,33038,33010,33020,26389,33042,35930,33078,33054,33068,33048,33074,33096,33100,33107,33140,33113,33114,33137,33120,33129,33148,33149,33133,33127,22605,23221,33160,33154,33169,28373,33187,33194,33228,26406,33226,33211,38689,38690,38691,38692,38693,38694,38695,38696,38697,38699,38700,38702,38703,38705,38707,38708,38709,38710,38711,38714,38715,38716,38717,38719,38720,38721,38722,38723,38724,38725,38726,38727,38728,38729,38730,38731,38732,38733,38734,38735,38736,38737,38740,38741,38743,38744,38746,38748,38749,38751,38755,38756,38758,38759,38760,38762,38763,38764,38765,38766,38767,38768,38769,38770,38773,38775,38776,38777,38778,38779,38781,38782,38783,38784,38785,38786,38787,38788,38790,38791,38792,38793,38794,38796,38798,38799,38800,38803,38805,38806,38807,38809,38810,38811,38812,38813,33217,33190,27428,27447,27449,27459,27462,27481,39121,39122,39123,39125,39129,39130,27571,24384,27586,35315,26e3,40785,26003,26044,26054,26052,26051,26060,26062,26066,26070,28800,28828,28822,28829,28859,28864,28855,28843,28849,28904,28874,28944,28947,28950,28975,28977,29043,29020,29032,28997,29042,29002,29048,29050,29080,29107,29109,29096,29088,29152,29140,29159,29177,29213,29224,28780,28952,29030,29113,25150,25149,25155,25160,25161,31035,31040,31046,31049,31067,31068,31059,31066,31074,31063,31072,31087,31079,31098,31109,31114,31130,31143,31155,24529,24528,38814,38815,38817,38818,38820,38821,38822,38823,38824,38825,38826,38828,38830,38832,38833,38835,38837,38838,38839,38840,38841,38842,38843,38844,38845,38846,38847,38848,38849,38850,38851,38852,38853,38854,38855,38856,38857,38858,38859,38860,38861,38862,38863,38864,38865,38866,38867,38868,38869,38870,38871,38872,38873,38874,38875,38876,38877,38878,38879,38880,38881,38882,38883,38884,38885,38888,38894,38895,38896,38897,38898,38900,38903,38904,38905,38906,38907,38908,38909,38910,38911,38912,38913,38914,38915,38916,38917,38918,38919,38920,38921,38922,38923,38924,38925,38926,24636,24669,24666,24679,24641,24665,24675,24747,24838,24845,24925,25001,24989,25035,25041,25094,32896,32895,27795,27894,28156,30710,30712,30720,30729,30743,30744,30737,26027,30765,30748,30749,30777,30778,30779,30751,30780,30757,30764,30755,30761,30798,30829,30806,30807,30758,30800,30791,30796,30826,30875,30867,30874,30855,30876,30881,30883,30898,30905,30885,30932,30937,30921,30956,30962,30981,30964,30995,31012,31006,31028,40859,40697,40699,40700,30449,30468,30477,30457,30471,30472,30490,30498,30489,30509,30502,30517,30520,30544,30545,30535,30531,30554,30568,38927,38928,38929,38930,38931,38932,38933,38934,38935,38936,38937,38938,38939,38940,38941,38942,38943,38944,38945,38946,38947,38948,38949,38950,38951,38952,38953,38954,38955,38956,38957,38958,38959,38960,38961,38962,38963,38964,38965,38966,38967,38968,38969,38970,38971,38972,38973,38974,38975,38976,38977,38978,38979,38980,38981,38982,38983,38984,38985,38986,38987,38988,38989,38990,38991,38992,38993,38994,38995,38996,38997,38998,38999,39e3,39001,39002,39003,39004,39005,39006,39007,39008,39009,39010,39011,39012,39013,39014,39015,39016,39017,39018,39019,39020,39021,39022,30562,30565,30591,30605,30589,30592,30604,30609,30623,30624,30640,30645,30653,30010,30016,30030,30027,30024,30043,30066,30073,30083,32600,32609,32607,35400,32616,32628,32625,32633,32641,32638,30413,30437,34866,38021,38022,38023,38027,38026,38028,38029,38031,38032,38036,38039,38037,38042,38043,38044,38051,38052,38059,38058,38061,38060,38063,38064,38066,38068,38070,38071,38072,38073,38074,38076,38077,38079,38084,38088,38089,38090,38091,38092,38093,38094,38096,38097,38098,38101,38102,38103,38105,38104,38107,38110,38111,38112,38114,38116,38117,38119,38120,38122,39023,39024,39025,39026,39027,39028,39051,39054,39058,39061,39065,39075,39080,39081,39082,39083,39084,39085,39086,39087,39088,39089,39090,39091,39092,39093,39094,39095,39096,39097,39098,39099,39100,39101,39102,39103,39104,39105,39106,39107,39108,39109,39110,39111,39112,39113,39114,39115,39116,39117,39119,39120,39124,39126,39127,39131,39132,39133,39136,39137,39138,39139,39140,39141,39142,39145,39146,39147,39148,39149,39150,39151,39152,39153,39154,39155,39156,39157,39158,39159,39160,39161,39162,39163,39164,39165,39166,39167,39168,39169,39170,39171,39172,39173,39174,39175,38121,38123,38126,38127,38131,38132,38133,38135,38137,38140,38141,38143,38147,38146,38150,38151,38153,38154,38157,38158,38159,38162,38163,38164,38165,38166,38168,38171,38173,38174,38175,38178,38186,38187,38185,38188,38193,38194,38196,38198,38199,38200,38204,38206,38207,38210,38197,38212,38213,38214,38217,38220,38222,38223,38226,38227,38228,38230,38231,38232,38233,38235,38238,38239,38237,38241,38242,38244,38245,38246,38247,38248,38249,38250,38251,38252,38255,38257,38258,38259,38202,30695,30700,38601,31189,31213,31203,31211,31238,23879,31235,31234,31262,31252,39176,39177,39178,39179,39180,39182,39183,39185,39186,39187,39188,39189,39190,39191,39192,39193,39194,39195,39196,39197,39198,39199,39200,39201,39202,39203,39204,39205,39206,39207,39208,39209,39210,39211,39212,39213,39215,39216,39217,39218,39219,39220,39221,39222,39223,39224,39225,39226,39227,39228,39229,39230,39231,39232,39233,39234,39235,39236,39237,39238,39239,39240,39241,39242,39243,39244,39245,39246,39247,39248,39249,39250,39251,39254,39255,39256,39257,39258,39259,39260,39261,39262,39263,39264,39265,39266,39268,39270,39283,39288,39289,39291,39294,39298,39299,39305,31289,31287,31313,40655,39333,31344,30344,30350,30355,30361,30372,29918,29920,29996,40480,40482,40488,40489,40490,40491,40492,40498,40497,40502,40504,40503,40505,40506,40510,40513,40514,40516,40518,40519,40520,40521,40523,40524,40526,40529,40533,40535,40538,40539,40540,40542,40547,40550,40551,40552,40553,40554,40555,40556,40561,40557,40563,30098,30100,30102,30112,30109,30124,30115,30131,30132,30136,30148,30129,30128,30147,30146,30166,30157,30179,30184,30182,30180,30187,30183,30211,30193,30204,30207,30224,30208,30213,30220,30231,30218,30245,30232,30229,30233,39308,39310,39322,39323,39324,39325,39326,39327,39328,39329,39330,39331,39332,39334,39335,39337,39338,39339,39340,39341,39342,39343,39344,39345,39346,39347,39348,39349,39350,39351,39352,39353,39354,39355,39356,39357,39358,39359,39360,39361,39362,39363,39364,39365,39366,39367,39368,39369,39370,39371,39372,39373,39374,39375,39376,39377,39378,39379,39380,39381,39382,39383,39384,39385,39386,39387,39388,39389,39390,39391,39392,39393,39394,39395,39396,39397,39398,39399,39400,39401,39402,39403,39404,39405,39406,39407,39408,39409,39410,39411,39412,39413,39414,39415,39416,39417,30235,30268,30242,30240,30272,30253,30256,30271,30261,30275,30270,30259,30285,30302,30292,30300,30294,30315,30319,32714,31462,31352,31353,31360,31366,31368,31381,31398,31392,31404,31400,31405,31411,34916,34921,34930,34941,34943,34946,34978,35014,34999,35004,35017,35042,35022,35043,35045,35057,35098,35068,35048,35070,35056,35105,35097,35091,35099,35082,35124,35115,35126,35137,35174,35195,30091,32997,30386,30388,30684,32786,32788,32790,32796,32800,32802,32805,32806,32807,32809,32808,32817,32779,32821,32835,32838,32845,32850,32873,32881,35203,39032,39040,39043,39418,39419,39420,39421,39422,39423,39424,39425,39426,39427,39428,39429,39430,39431,39432,39433,39434,39435,39436,39437,39438,39439,39440,39441,39442,39443,39444,39445,39446,39447,39448,39449,39450,39451,39452,39453,39454,39455,39456,39457,39458,39459,39460,39461,39462,39463,39464,39465,39466,39467,39468,39469,39470,39471,39472,39473,39474,39475,39476,39477,39478,39479,39480,39481,39482,39483,39484,39485,39486,39487,39488,39489,39490,39491,39492,39493,39494,39495,39496,39497,39498,39499,39500,39501,39502,39503,39504,39505,39506,39507,39508,39509,39510,39511,39512,39513,39049,39052,39053,39055,39060,39066,39067,39070,39071,39073,39074,39077,39078,34381,34388,34412,34414,34431,34426,34428,34427,34472,34445,34443,34476,34461,34471,34467,34474,34451,34473,34486,34500,34485,34510,34480,34490,34481,34479,34505,34511,34484,34537,34545,34546,34541,34547,34512,34579,34526,34548,34527,34520,34513,34563,34567,34552,34568,34570,34573,34569,34595,34619,34590,34597,34606,34586,34622,34632,34612,34609,34601,34615,34623,34690,34594,34685,34686,34683,34656,34672,34636,34670,34699,34643,34659,34684,34660,34649,34661,34707,34735,34728,34770,39514,39515,39516,39517,39518,39519,39520,39521,39522,39523,39524,39525,39526,39527,39528,39529,39530,39531,39538,39555,39561,39565,39566,39572,39573,39577,39590,39593,39594,39595,39596,39597,39598,39599,39602,39603,39604,39605,39609,39611,39613,39614,39615,39619,39620,39622,39623,39624,39625,39626,39629,39630,39631,39632,39634,39636,39637,39638,39639,39641,39642,39643,39644,39645,39646,39648,39650,39651,39652,39653,39655,39656,39657,39658,39660,39662,39664,39665,39666,39667,39668,39669,39670,39671,39672,39674,39676,39677,39678,39679,39680,39681,39682,39684,39685,39686,34758,34696,34693,34733,34711,34691,34731,34789,34732,34741,34739,34763,34771,34749,34769,34752,34762,34779,34794,34784,34798,34838,34835,34814,34826,34843,34849,34873,34876,32566,32578,32580,32581,33296,31482,31485,31496,31491,31492,31509,31498,31531,31503,31559,31544,31530,31513,31534,31537,31520,31525,31524,31539,31550,31518,31576,31578,31557,31605,31564,31581,31584,31598,31611,31586,31602,31601,31632,31654,31655,31672,31660,31645,31656,31621,31658,31644,31650,31659,31668,31697,31681,31692,31709,31706,31717,31718,31722,31756,31742,31740,31759,31766,31755,39687,39689,39690,39691,39692,39693,39694,39696,39697,39698,39700,39701,39702,39703,39704,39705,39706,39707,39708,39709,39710,39712,39713,39714,39716,39717,39718,39719,39720,39721,39722,39723,39724,39725,39726,39728,39729,39731,39732,39733,39734,39735,39736,39737,39738,39741,39742,39743,39744,39750,39754,39755,39756,39758,39760,39762,39763,39765,39766,39767,39768,39769,39770,39771,39772,39773,39774,39775,39776,39777,39778,39779,39780,39781,39782,39783,39784,39785,39786,39787,39788,39789,39790,39791,39792,39793,39794,39795,39796,39797,39798,39799,39800,39801,39802,39803,31775,31786,31782,31800,31809,31808,33278,33281,33282,33284,33260,34884,33313,33314,33315,33325,33327,33320,33323,33336,33339,33331,33332,33342,33348,33353,33355,33359,33370,33375,33384,34942,34949,34952,35032,35039,35166,32669,32671,32679,32687,32688,32690,31868,25929,31889,31901,31900,31902,31906,31922,31932,31933,31937,31943,31948,31949,31944,31941,31959,31976,33390,26280,32703,32718,32725,32741,32737,32742,32745,32750,32755,31992,32119,32166,32174,32327,32411,40632,40628,36211,36228,36244,36241,36273,36199,36205,35911,35913,37194,37200,37198,37199,37220,39804,39805,39806,39807,39808,39809,39810,39811,39812,39813,39814,39815,39816,39817,39818,39819,39820,39821,39822,39823,39824,39825,39826,39827,39828,39829,39830,39831,39832,39833,39834,39835,39836,39837,39838,39839,39840,39841,39842,39843,39844,39845,39846,39847,39848,39849,39850,39851,39852,39853,39854,39855,39856,39857,39858,39859,39860,39861,39862,39863,39864,39865,39866,39867,39868,39869,39870,39871,39872,39873,39874,39875,39876,39877,39878,39879,39880,39881,39882,39883,39884,39885,39886,39887,39888,39889,39890,39891,39892,39893,39894,39895,39896,39897,39898,39899,37218,37217,37232,37225,37231,37245,37246,37234,37236,37241,37260,37253,37264,37261,37265,37282,37283,37290,37293,37294,37295,37301,37300,37306,35925,40574,36280,36331,36357,36441,36457,36277,36287,36284,36282,36292,36310,36311,36314,36318,36302,36303,36315,36294,36332,36343,36344,36323,36345,36347,36324,36361,36349,36372,36381,36383,36396,36398,36387,36399,36410,36416,36409,36405,36413,36401,36425,36417,36418,36433,36434,36426,36464,36470,36476,36463,36468,36485,36495,36500,36496,36508,36510,35960,35970,35978,35973,35992,35988,26011,35286,35294,35290,35292,39900,39901,39902,39903,39904,39905,39906,39907,39908,39909,39910,39911,39912,39913,39914,39915,39916,39917,39918,39919,39920,39921,39922,39923,39924,39925,39926,39927,39928,39929,39930,39931,39932,39933,39934,39935,39936,39937,39938,39939,39940,39941,39942,39943,39944,39945,39946,39947,39948,39949,39950,39951,39952,39953,39954,39955,39956,39957,39958,39959,39960,39961,39962,39963,39964,39965,39966,39967,39968,39969,39970,39971,39972,39973,39974,39975,39976,39977,39978,39979,39980,39981,39982,39983,39984,39985,39986,39987,39988,39989,39990,39991,39992,39993,39994,39995,35301,35307,35311,35390,35622,38739,38633,38643,38639,38662,38657,38664,38671,38670,38698,38701,38704,38718,40832,40835,40837,40838,40839,40840,40841,40842,40844,40702,40715,40717,38585,38588,38589,38606,38610,30655,38624,37518,37550,37576,37694,37738,37834,37775,37950,37995,40063,40066,40069,40070,40071,40072,31267,40075,40078,40080,40081,40082,40084,40085,40090,40091,40094,40095,40096,40097,40098,40099,40101,40102,40103,40104,40105,40107,40109,40110,40112,40113,40114,40115,40116,40117,40118,40119,40122,40123,40124,40125,40132,40133,40134,40135,40138,40139,39996,39997,39998,39999,4e4,40001,40002,40003,40004,40005,40006,40007,40008,40009,40010,40011,40012,40013,40014,40015,40016,40017,40018,40019,40020,40021,40022,40023,40024,40025,40026,40027,40028,40029,40030,40031,40032,40033,40034,40035,40036,40037,40038,40039,40040,40041,40042,40043,40044,40045,40046,40047,40048,40049,40050,40051,40052,40053,40054,40055,40056,40057,40058,40059,40061,40062,40064,40067,40068,40073,40074,40076,40079,40083,40086,40087,40088,40089,40093,40106,40108,40111,40121,40126,40127,40128,40129,40130,40136,40137,40145,40146,40154,40155,40160,40161,40140,40141,40142,40143,40144,40147,40148,40149,40151,40152,40153,40156,40157,40159,40162,38780,38789,38801,38802,38804,38831,38827,38819,38834,38836,39601,39600,39607,40536,39606,39610,39612,39617,39616,39621,39618,39627,39628,39633,39749,39747,39751,39753,39752,39757,39761,39144,39181,39214,39253,39252,39647,39649,39654,39663,39659,39675,39661,39673,39688,39695,39699,39711,39715,40637,40638,32315,40578,40583,40584,40587,40594,37846,40605,40607,40667,40668,40669,40672,40671,40674,40681,40679,40677,40682,40687,40738,40748,40751,40761,40759,40765,40766,40772,40163,40164,40165,40166,40167,40168,40169,40170,40171,40172,40173,40174,40175,40176,40177,40178,40179,40180,40181,40182,40183,40184,40185,40186,40187,40188,40189,40190,40191,40192,40193,40194,40195,40196,40197,40198,40199,40200,40201,40202,40203,40204,40205,40206,40207,40208,40209,40210,40211,40212,40213,40214,40215,40216,40217,40218,40219,40220,40221,40222,40223,40224,40225,40226,40227,40228,40229,40230,40231,40232,40233,40234,40235,40236,40237,40238,40239,40240,40241,40242,40243,40244,40245,40246,40247,40248,40249,40250,40251,40252,40253,40254,40255,40256,40257,40258,57908,57909,57910,57911,57912,57913,57914,57915,57916,57917,57918,57919,57920,57921,57922,57923,57924,57925,57926,57927,57928,57929,57930,57931,57932,57933,57934,57935,57936,57937,57938,57939,57940,57941,57942,57943,57944,57945,57946,57947,57948,57949,57950,57951,57952,57953,57954,57955,57956,57957,57958,57959,57960,57961,57962,57963,57964,57965,57966,57967,57968,57969,57970,57971,57972,57973,57974,57975,57976,57977,57978,57979,57980,57981,57982,57983,57984,57985,57986,57987,57988,57989,57990,57991,57992,57993,57994,57995,57996,57997,57998,57999,58e3,58001,40259,40260,40261,40262,40263,40264,40265,40266,40267,40268,40269,40270,40271,40272,40273,40274,40275,40276,40277,40278,40279,40280,40281,40282,40283,40284,40285,40286,40287,40288,40289,40290,40291,40292,40293,40294,40295,40296,40297,40298,40299,40300,40301,40302,40303,40304,40305,40306,40307,40308,40309,40310,40311,40312,40313,40314,40315,40316,40317,40318,40319,40320,40321,40322,40323,40324,40325,40326,40327,40328,40329,40330,40331,40332,40333,40334,40335,40336,40337,40338,40339,40340,40341,40342,40343,40344,40345,40346,40347,40348,40349,40350,40351,40352,40353,40354,58002,58003,58004,58005,58006,58007,58008,58009,58010,58011,58012,58013,58014,58015,58016,58017,58018,58019,58020,58021,58022,58023,58024,58025,58026,58027,58028,58029,58030,58031,58032,58033,58034,58035,58036,58037,58038,58039,58040,58041,58042,58043,58044,58045,58046,58047,58048,58049,58050,58051,58052,58053,58054,58055,58056,58057,58058,58059,58060,58061,58062,58063,58064,58065,58066,58067,58068,58069,58070,58071,58072,58073,58074,58075,58076,58077,58078,58079,58080,58081,58082,58083,58084,58085,58086,58087,58088,58089,58090,58091,58092,58093,58094,58095,40355,40356,40357,40358,40359,40360,40361,40362,40363,40364,40365,40366,40367,40368,40369,40370,40371,40372,40373,40374,40375,40376,40377,40378,40379,40380,40381,40382,40383,40384,40385,40386,40387,40388,40389,40390,40391,40392,40393,40394,40395,40396,40397,40398,40399,40400,40401,40402,40403,40404,40405,40406,40407,40408,40409,40410,40411,40412,40413,40414,40415,40416,40417,40418,40419,40420,40421,40422,40423,40424,40425,40426,40427,40428,40429,40430,40431,40432,40433,40434,40435,40436,40437,40438,40439,40440,40441,40442,40443,40444,40445,40446,40447,40448,40449,40450,58096,58097,58098,58099,58100,58101,58102,58103,58104,58105,58106,58107,58108,58109,58110,58111,58112,58113,58114,58115,58116,58117,58118,58119,58120,58121,58122,58123,58124,58125,58126,58127,58128,58129,58130,58131,58132,58133,58134,58135,58136,58137,58138,58139,58140,58141,58142,58143,58144,58145,58146,58147,58148,58149,58150,58151,58152,58153,58154,58155,58156,58157,58158,58159,58160,58161,58162,58163,58164,58165,58166,58167,58168,58169,58170,58171,58172,58173,58174,58175,58176,58177,58178,58179,58180,58181,58182,58183,58184,58185,58186,58187,58188,58189,40451,40452,40453,40454,40455,40456,40457,40458,40459,40460,40461,40462,40463,40464,40465,40466,40467,40468,40469,40470,40471,40472,40473,40474,40475,40476,40477,40478,40484,40487,40494,40496,40500,40507,40508,40512,40525,40528,40530,40531,40532,40534,40537,40541,40543,40544,40545,40546,40549,40558,40559,40562,40564,40565,40566,40567,40568,40569,40570,40571,40572,40573,40576,40577,40579,40580,40581,40582,40585,40586,40588,40589,40590,40591,40592,40593,40596,40597,40598,40599,40600,40601,40602,40603,40604,40606,40608,40609,40610,40611,40612,40613,40615,40616,40617,40618,58190,58191,58192,58193,58194,58195,58196,58197,58198,58199,58200,58201,58202,58203,58204,58205,58206,58207,58208,58209,58210,58211,58212,58213,58214,58215,58216,58217,58218,58219,58220,58221,58222,58223,58224,58225,58226,58227,58228,58229,58230,58231,58232,58233,58234,58235,58236,58237,58238,58239,58240,58241,58242,58243,58244,58245,58246,58247,58248,58249,58250,58251,58252,58253,58254,58255,58256,58257,58258,58259,58260,58261,58262,58263,58264,58265,58266,58267,58268,58269,58270,58271,58272,58273,58274,58275,58276,58277,58278,58279,58280,58281,58282,58283,40619,40620,40621,40622,40623,40624,40625,40626,40627,40629,40630,40631,40633,40634,40636,40639,40640,40641,40642,40643,40645,40646,40647,40648,40650,40651,40652,40656,40658,40659,40661,40662,40663,40665,40666,40670,40673,40675,40676,40678,40680,40683,40684,40685,40686,40688,40689,40690,40691,40692,40693,40694,40695,40696,40698,40701,40703,40704,40705,40706,40707,40708,40709,40710,40711,40712,40713,40714,40716,40719,40721,40722,40724,40725,40726,40728,40730,40731,40732,40733,40734,40735,40737,40739,40740,40741,40742,40743,40744,40745,40746,40747,40749,40750,40752,40753,58284,58285,58286,58287,58288,58289,58290,58291,58292,58293,58294,58295,58296,58297,58298,58299,58300,58301,58302,58303,58304,58305,58306,58307,58308,58309,58310,58311,58312,58313,58314,58315,58316,58317,58318,58319,58320,58321,58322,58323,58324,58325,58326,58327,58328,58329,58330,58331,58332,58333,58334,58335,58336,58337,58338,58339,58340,58341,58342,58343,58344,58345,58346,58347,58348,58349,58350,58351,58352,58353,58354,58355,58356,58357,58358,58359,58360,58361,58362,58363,58364,58365,58366,58367,58368,58369,58370,58371,58372,58373,58374,58375,58376,58377,40754,40755,40756,40757,40758,40760,40762,40764,40767,40768,40769,40770,40771,40773,40774,40775,40776,40777,40778,40779,40780,40781,40782,40783,40786,40787,40788,40789,40790,40791,40792,40793,40794,40795,40796,40797,40798,40799,40800,40801,40802,40803,40804,40805,40806,40807,40808,40809,40810,40811,40812,40813,40814,40815,40816,40817,40818,40819,40820,40821,40822,40823,40824,40825,40826,40827,40828,40829,40830,40833,40834,40845,40846,40847,40848,40849,40850,40851,40852,40853,40854,40855,40856,40860,40861,40862,40865,40866,40867,40868,40869,63788,63865,63893,63975,63985,58378,58379,58380,58381,58382,58383,58384,58385,58386,58387,58388,58389,58390,58391,58392,58393,58394,58395,58396,58397,58398,58399,58400,58401,58402,58403,58404,58405,58406,58407,58408,58409,58410,58411,58412,58413,58414,58415,58416,58417,58418,58419,58420,58421,58422,58423,58424,58425,58426,58427,58428,58429,58430,58431,58432,58433,58434,58435,58436,58437,58438,58439,58440,58441,58442,58443,58444,58445,58446,58447,58448,58449,58450,58451,58452,58453,58454,58455,58456,58457,58458,58459,58460,58461,58462,58463,58464,58465,58466,58467,58468,58469,58470,58471,64012,64013,64014,64015,64017,64019,64020,64024,64031,64032,64033,64035,64036,64039,64040,64041,11905,59414,59415,59416,11908,13427,13383,11912,11915,59422,13726,13850,13838,11916,11927,14702,14616,59430,14799,14815,14963,14800,59435,59436,15182,15470,15584,11943,59441,59442,11946,16470,16735,11950,17207,11955,11958,11959,59451,17329,17324,11963,17373,17622,18017,17996,59459,18211,18217,18300,18317,11978,18759,18810,18813,18818,18819,18821,18822,18847,18843,18871,18870,59476,59477,19619,19615,19616,19617,19575,19618,19731,19732,19733,19734,19735,19736,19737,19886,59492,58472,58473,58474,58475,58476,58477,58478,58479,58480,58481,58482,58483,58484,58485,58486,58487,58488,58489,58490,58491,58492,58493,58494,58495,58496,58497,58498,58499,58500,58501,58502,58503,58504,58505,58506,58507,58508,58509,58510,58511,58512,58513,58514,58515,58516,58517,58518,58519,58520,58521,58522,58523,58524,58525,58526,58527,58528,58529,58530,58531,58532,58533,58534,58535,58536,58537,58538,58539,58540,58541,58542,58543,58544,58545,58546,58547,58548,58549,58550,58551,58552,58553,58554,58555,58556,58557,58558,58559,58560,58561,58562,58563,58564,58565],"gb18030-ranges":[[0,128],[36,165],[38,169],[45,178],[50,184],[81,216],[89,226],[95,235],[96,238],[100,244],[103,248],[104,251],[105,253],[109,258],[126,276],[133,284],[148,300],[172,325],[175,329],[179,334],[208,364],[306,463],[307,465],[308,467],[309,469],[310,471],[311,473],[312,475],[313,477],[341,506],[428,594],[443,610],[544,712],[545,716],[558,730],[741,930],[742,938],[749,962],[750,970],[805,1026],[819,1104],[820,1106],[7922,8209],[7924,8215],[7925,8218],[7927,8222],[7934,8231],[7943,8241],[7944,8244],[7945,8246],[7950,8252],[8062,8365],[8148,8452],[8149,8454],[8152,8458],[8164,8471],[8174,8482],[8236,8556],[8240,8570],[8262,8596],[8264,8602],[8374,8713],[8380,8720],[8381,8722],[8384,8726],[8388,8731],[8390,8737],[8392,8740],[8393,8742],[8394,8748],[8396,8751],[8401,8760],[8406,8766],[8416,8777],[8419,8781],[8424,8787],[8437,8802],[8439,8808],[8445,8816],[8482,8854],[8485,8858],[8496,8870],[8521,8896],[8603,8979],[8936,9322],[8946,9372],[9046,9548],[9050,9588],[9063,9616],[9066,9622],[9076,9634],[9092,9652],[9100,9662],[9108,9672],[9111,9676],[9113,9680],[9131,9702],[9162,9735],[9164,9738],[9218,9793],[9219,9795],[11329,11906],[11331,11909],[11334,11913],[11336,11917],[11346,11928],[11361,11944],[11363,11947],[11366,11951],[11370,11956],[11372,11960],[11375,11964],[11389,11979],[11682,12284],[11686,12292],[11687,12312],[11692,12319],[11694,12330],[11714,12351],[11716,12436],[11723,12447],[11725,12535],[11730,12543],[11736,12586],[11982,12842],[11989,12850],[12102,12964],[12336,13200],[12348,13215],[12350,13218],[12384,13253],[12393,13263],[12395,13267],[12397,13270],[12510,13384],[12553,13428],[12851,13727],[12962,13839],[12973,13851],[13738,14617],[13823,14703],[13919,14801],[13933,14816],[14080,14964],[14298,15183],[14585,15471],[14698,15585],[15583,16471],[15847,16736],[16318,17208],[16434,17325],[16438,17330],[16481,17374],[16729,17623],[17102,17997],[17122,18018],[17315,18212],[17320,18218],[17402,18301],[17418,18318],[17859,18760],[17909,18811],[17911,18814],[17915,18820],[17916,18823],[17936,18844],[17939,18848],[17961,18872],[18664,19576],[18703,19620],[18814,19738],[18962,19887],[19043,40870],[33469,59244],[33470,59336],[33471,59367],[33484,59413],[33485,59417],[33490,59423],[33497,59431],[33501,59437],[33505,59443],[33513,59452],[33520,59460],[33536,59478],[33550,59493],[37845,63789],[37921,63866],[37948,63894],[38029,63976],[38038,63986],[38064,64016],[38065,64018],[38066,64021],[38069,64025],[38075,64034],[38076,64037],[38078,64042],[39108,65074],[39109,65093],[39113,65107],[39114,65112],[39115,65127],[39116,65132],[39265,65375],[39394,65510],[189e3,65536]],jis0208:[12288,12289,12290,65292,65294,12539,65306,65307,65311,65281,12443,12444,180,65344,168,65342,65507,65343,12541,12542,12445,12446,12291,20189,12293,12294,12295,12540,8213,8208,65295,65340,65374,8741,65372,8230,8229,8216,8217,8220,8221,65288,65289,12308,12309,65339,65341,65371,65373,12296,12297,12298,12299,12300,12301,12302,12303,12304,12305,65291,65293,177,215,247,65309,8800,65308,65310,8806,8807,8734,8756,9794,9792,176,8242,8243,8451,65509,65284,65504,65505,65285,65283,65286,65290,65312,167,9734,9733,9675,9679,9678,9671,9670,9633,9632,9651,9650,9661,9660,8251,12306,8594,8592,8593,8595,12307,null,null,null,null,null,null,null,null,null,null,null,8712,8715,8838,8839,8834,8835,8746,8745,null,null,null,null,null,null,null,null,8743,8744,65506,8658,8660,8704,8707,null,null,null,null,null,null,null,null,null,null,null,8736,8869,8978,8706,8711,8801,8786,8810,8811,8730,8765,8733,8757,8747,8748,null,null,null,null,null,null,null,8491,8240,9839,9837,9834,8224,8225,182,null,null,null,null,9711,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,65296,65297,65298,65299,65300,65301,65302,65303,65304,65305,null,null,null,null,null,null,null,65313,65314,65315,65316,65317,65318,65319,65320,65321,65322,65323,65324,65325,65326,65327,65328,65329,65330,65331,65332,65333,65334,65335,65336,65337,65338,null,null,null,null,null,null,65345,65346,65347,65348,65349,65350,65351,65352,65353,65354,65355,65356,65357,65358,65359,65360,65361,65362,65363,65364,65365,65366,65367,65368,65369,65370,null,null,null,null,12353,12354,12355,12356,12357,12358,12359,12360,12361,12362,12363,12364,12365,12366,12367,12368,12369,12370,12371,12372,12373,12374,12375,12376,12377,12378,12379,12380,12381,12382,12383,12384,12385,12386,12387,12388,12389,12390,12391,12392,12393,12394,12395,12396,12397,12398,12399,12400,12401,12402,12403,12404,12405,12406,12407,12408,12409,12410,12411,12412,12413,12414,12415,12416,12417,12418,12419,12420,12421,12422,12423,12424,12425,12426,12427,12428,12429,12430,12431,12432,12433,12434,12435,null,null,null,null,null,null,null,null,null,null,null,12449,12450,12451,12452,12453,12454,12455,12456,12457,12458,12459,12460,12461,12462,12463,12464,12465,12466,12467,12468,12469,12470,12471,12472,12473,12474,12475,12476,12477,12478,12479,12480,12481,12482,12483,12484,12485,12486,12487,12488,12489,12490,12491,12492,12493,12494,12495,12496,12497,12498,12499,12500,12501,12502,12503,12504,12505,12506,12507,12508,12509,12510,12511,12512,12513,12514,12515,12516,12517,12518,12519,12520,12521,12522,12523,12524,12525,12526,12527,12528,12529,12530,12531,12532,12533,12534,null,null,null,null,null,null,null,null,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,931,932,933,934,935,936,937,null,null,null,null,null,null,null,null,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,963,964,965,966,967,968,969,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1040,1041,1042,1043,1044,1045,1025,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1072,1073,1074,1075,1076,1077,1105,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,null,null,null,null,null,null,null,null,null,null,null,null,null,9472,9474,9484,9488,9496,9492,9500,9516,9508,9524,9532,9473,9475,9487,9491,9499,9495,9507,9523,9515,9531,9547,9504,9519,9512,9527,9535,9501,9520,9509,9528,9538,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,9312,9313,9314,9315,9316,9317,9318,9319,9320,9321,9322,9323,9324,9325,9326,9327,9328,9329,9330,9331,8544,8545,8546,8547,8548,8549,8550,8551,8552,8553,null,13129,13076,13090,13133,13080,13095,13059,13110,13137,13143,13069,13094,13091,13099,13130,13115,13212,13213,13214,13198,13199,13252,13217,null,null,null,null,null,null,null,null,13179,12317,12319,8470,13261,8481,12964,12965,12966,12967,12968,12849,12850,12857,13182,13181,13180,8786,8801,8747,8750,8721,8730,8869,8736,8735,8895,8757,8745,8746,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,20124,21782,23043,38463,21696,24859,25384,23030,36898,33909,33564,31312,24746,25569,28197,26093,33894,33446,39925,26771,22311,26017,25201,23451,22992,34427,39156,32098,32190,39822,25110,31903,34999,23433,24245,25353,26263,26696,38343,38797,26447,20197,20234,20301,20381,20553,22258,22839,22996,23041,23561,24799,24847,24944,26131,26885,28858,30031,30064,31227,32173,32239,32963,33806,34915,35586,36949,36986,21307,20117,20133,22495,32946,37057,30959,19968,22769,28322,36920,31282,33576,33419,39983,20801,21360,21693,21729,22240,23035,24341,39154,28139,32996,34093,38498,38512,38560,38907,21515,21491,23431,28879,32701,36802,38632,21359,40284,31418,19985,30867,33276,28198,22040,21764,27421,34074,39995,23013,21417,28006,29916,38287,22082,20113,36939,38642,33615,39180,21473,21942,23344,24433,26144,26355,26628,27704,27891,27945,29787,30408,31310,38964,33521,34907,35424,37613,28082,30123,30410,39365,24742,35585,36234,38322,27022,21421,20870,22290,22576,22852,23476,24310,24616,25513,25588,27839,28436,28814,28948,29017,29141,29503,32257,33398,33489,34199,36960,37467,40219,22633,26044,27738,29989,20985,22830,22885,24448,24540,25276,26106,27178,27431,27572,29579,32705,35158,40236,40206,40644,23713,27798,33659,20740,23627,25014,33222,26742,29281,20057,20474,21368,24681,28201,31311,38899,19979,21270,20206,20309,20285,20385,20339,21152,21487,22025,22799,23233,23478,23521,31185,26247,26524,26550,27468,27827,28779,29634,31117,31166,31292,31623,33457,33499,33540,33655,33775,33747,34662,35506,22057,36008,36838,36942,38686,34442,20420,23784,25105,29273,30011,33253,33469,34558,36032,38597,39187,39381,20171,20250,35299,22238,22602,22730,24315,24555,24618,24724,24674,25040,25106,25296,25913,39745,26214,26800,28023,28784,30028,30342,32117,33445,34809,38283,38542,35997,20977,21182,22806,21683,23475,23830,24936,27010,28079,30861,33995,34903,35442,37799,39608,28012,39336,34521,22435,26623,34510,37390,21123,22151,21508,24275,25313,25785,26684,26680,27579,29554,30906,31339,35226,35282,36203,36611,37101,38307,38548,38761,23398,23731,27005,38989,38990,25499,31520,27179,27263,26806,39949,28511,21106,21917,24688,25324,27963,28167,28369,33883,35088,36676,19988,39993,21494,26907,27194,38788,26666,20828,31427,33970,37340,37772,22107,40232,26658,33541,33841,31909,21e3,33477,29926,20094,20355,20896,23506,21002,21208,21223,24059,21914,22570,23014,23436,23448,23515,24178,24185,24739,24863,24931,25022,25563,25954,26577,26707,26874,27454,27475,27735,28450,28567,28485,29872,29976,30435,30475,31487,31649,31777,32233,32566,32752,32925,33382,33694,35251,35532,36011,36996,37969,38291,38289,38306,38501,38867,39208,33304,20024,21547,23736,24012,29609,30284,30524,23721,32747,36107,38593,38929,38996,39e3,20225,20238,21361,21916,22120,22522,22855,23305,23492,23696,24076,24190,24524,25582,26426,26071,26082,26399,26827,26820,27231,24112,27589,27671,27773,30079,31048,23395,31232,32e3,24509,35215,35352,36020,36215,36556,36637,39138,39438,39740,20096,20605,20736,22931,23452,25135,25216,25836,27450,29344,30097,31047,32681,34811,35516,35696,25516,33738,38816,21513,21507,21931,26708,27224,35440,30759,26485,40653,21364,23458,33050,34384,36870,19992,20037,20167,20241,21450,21560,23470,24339,24613,25937,26429,27714,27762,27875,28792,29699,31350,31406,31496,32026,31998,32102,26087,29275,21435,23621,24040,25298,25312,25369,28192,34394,35377,36317,37624,28417,31142,39770,20136,20139,20140,20379,20384,20689,20807,31478,20849,20982,21332,21281,21375,21483,21932,22659,23777,24375,24394,24623,24656,24685,25375,25945,27211,27841,29378,29421,30703,33016,33029,33288,34126,37111,37857,38911,39255,39514,20208,20957,23597,26241,26989,23616,26354,26997,29577,26704,31873,20677,21220,22343,24062,37670,26020,27427,27453,29748,31105,31165,31563,32202,33465,33740,34943,35167,35641,36817,37329,21535,37504,20061,20534,21477,21306,29399,29590,30697,33510,36527,39366,39368,39378,20855,24858,34398,21936,31354,20598,23507,36935,38533,20018,27355,37351,23633,23624,25496,31391,27795,38772,36705,31402,29066,38536,31874,26647,32368,26705,37740,21234,21531,34219,35347,32676,36557,37089,21350,34952,31041,20418,20670,21009,20804,21843,22317,29674,22411,22865,24418,24452,24693,24950,24935,25001,25522,25658,25964,26223,26690,28179,30054,31293,31995,32076,32153,32331,32619,33550,33610,34509,35336,35427,35686,36605,38938,40335,33464,36814,39912,21127,25119,25731,28608,38553,26689,20625,27424,27770,28500,31348,32080,34880,35363,26376,20214,20537,20518,20581,20860,21048,21091,21927,22287,22533,23244,24314,25010,25080,25331,25458,26908,27177,29309,29356,29486,30740,30831,32121,30476,32937,35211,35609,36066,36562,36963,37749,38522,38997,39443,40568,20803,21407,21427,24187,24358,28187,28304,29572,29694,32067,33335,35328,35578,38480,20046,20491,21476,21628,22266,22993,23396,24049,24235,24359,25144,25925,26543,28246,29392,31946,34996,32929,32993,33776,34382,35463,36328,37431,38599,39015,40723,20116,20114,20237,21320,21577,21566,23087,24460,24481,24735,26791,27278,29786,30849,35486,35492,35703,37264,20062,39881,20132,20348,20399,20505,20502,20809,20844,21151,21177,21246,21402,21475,21521,21518,21897,22353,22434,22909,23380,23389,23439,24037,24039,24055,24184,24195,24218,24247,24344,24658,24908,25239,25304,25511,25915,26114,26179,26356,26477,26657,26775,27083,27743,27946,28009,28207,28317,30002,30343,30828,31295,31968,32005,32024,32094,32177,32789,32771,32943,32945,33108,33167,33322,33618,34892,34913,35611,36002,36092,37066,37237,37489,30783,37628,38308,38477,38917,39321,39640,40251,21083,21163,21495,21512,22741,25335,28640,35946,36703,40633,20811,21051,21578,22269,31296,37239,40288,40658,29508,28425,33136,29969,24573,24794,39592,29403,36796,27492,38915,20170,22256,22372,22718,23130,24680,25031,26127,26118,26681,26801,28151,30165,32058,33390,39746,20123,20304,21449,21766,23919,24038,24046,26619,27801,29811,30722,35408,37782,35039,22352,24231,25387,20661,20652,20877,26368,21705,22622,22971,23472,24425,25165,25505,26685,27507,28168,28797,37319,29312,30741,30758,31085,25998,32048,33756,35009,36617,38555,21092,22312,26448,32618,36001,20916,22338,38442,22586,27018,32948,21682,23822,22524,30869,40442,20316,21066,21643,25662,26152,26388,26613,31364,31574,32034,37679,26716,39853,31545,21273,20874,21047,23519,25334,25774,25830,26413,27578,34217,38609,30352,39894,25420,37638,39851,30399,26194,19977,20632,21442,23665,24808,25746,25955,26719,29158,29642,29987,31639,32386,34453,35715,36059,37240,39184,26028,26283,27531,20181,20180,20282,20351,21050,21496,21490,21987,22235,22763,22987,22985,23039,23376,23629,24066,24107,24535,24605,25351,25903,23388,26031,26045,26088,26525,27490,27515,27663,29509,31049,31169,31992,32025,32043,32930,33026,33267,35222,35422,35433,35430,35468,35566,36039,36060,38604,39164,27503,20107,20284,20365,20816,23383,23546,24904,25345,26178,27425,28363,27835,29246,29885,30164,30913,31034,32780,32819,33258,33940,36766,27728,40575,24335,35672,40235,31482,36600,23437,38635,19971,21489,22519,22833,23241,23460,24713,28287,28422,30142,36074,23455,34048,31712,20594,26612,33437,23649,34122,32286,33294,20889,23556,25448,36198,26012,29038,31038,32023,32773,35613,36554,36974,34503,37034,20511,21242,23610,26451,28796,29237,37196,37320,37675,33509,23490,24369,24825,20027,21462,23432,25163,26417,27530,29417,29664,31278,33131,36259,37202,39318,20754,21463,21610,23551,25480,27193,32172,38656,22234,21454,21608,23447,23601,24030,20462,24833,25342,27954,31168,31179,32066,32333,32722,33261,33311,33936,34886,35186,35728,36468,36655,36913,37195,37228,38598,37276,20160,20303,20805,21313,24467,25102,26580,27713,28171,29539,32294,37325,37507,21460,22809,23487,28113,31069,32302,31899,22654,29087,20986,34899,36848,20426,23803,26149,30636,31459,33308,39423,20934,24490,26092,26991,27529,28147,28310,28516,30462,32020,24033,36981,37255,38918,20966,21021,25152,26257,26329,28186,24246,32210,32626,26360,34223,34295,35576,21161,21465,22899,24207,24464,24661,37604,38500,20663,20767,21213,21280,21319,21484,21736,21830,21809,22039,22888,22974,23100,23477,23558,23567,23569,23578,24196,24202,24288,24432,25215,25220,25307,25484,25463,26119,26124,26157,26230,26494,26786,27167,27189,27836,28040,28169,28248,28988,28966,29031,30151,30465,30813,30977,31077,31216,31456,31505,31911,32057,32918,33750,33931,34121,34909,35059,35359,35388,35412,35443,35937,36062,37284,37478,37758,37912,38556,38808,19978,19976,19998,20055,20887,21104,22478,22580,22732,23330,24120,24773,25854,26465,26454,27972,29366,30067,31331,33976,35698,37304,37664,22065,22516,39166,25325,26893,27542,29165,32340,32887,33394,35302,39135,34645,36785,23611,20280,20449,20405,21767,23072,23517,23529,24515,24910,25391,26032,26187,26862,27035,28024,28145,30003,30137,30495,31070,31206,32051,33251,33455,34218,35242,35386,36523,36763,36914,37341,38663,20154,20161,20995,22645,22764,23563,29978,23613,33102,35338,36805,38499,38765,31525,35535,38920,37218,22259,21416,36887,21561,22402,24101,25512,27700,28810,30561,31883,32736,34928,36930,37204,37648,37656,38543,29790,39620,23815,23913,25968,26530,36264,38619,25454,26441,26905,33733,38935,38592,35070,28548,25722,23544,19990,28716,30045,26159,20932,21046,21218,22995,24449,24615,25104,25919,25972,26143,26228,26866,26646,27491,28165,29298,29983,30427,31934,32854,22768,35069,35199,35488,35475,35531,36893,37266,38738,38745,25993,31246,33030,38587,24109,24796,25114,26021,26132,26512,30707,31309,31821,32318,33034,36012,36196,36321,36447,30889,20999,25305,25509,25666,25240,35373,31363,31680,35500,38634,32118,33292,34633,20185,20808,21315,21344,23459,23554,23574,24029,25126,25159,25776,26643,26676,27849,27973,27927,26579,28508,29006,29053,26059,31359,31661,32218,32330,32680,33146,33307,33337,34214,35438,36046,36341,36984,36983,37549,37521,38275,39854,21069,21892,28472,28982,20840,31109,32341,33203,31950,22092,22609,23720,25514,26366,26365,26970,29401,30095,30094,30990,31062,31199,31895,32032,32068,34311,35380,38459,36961,40736,20711,21109,21452,21474,20489,21930,22766,22863,29245,23435,23652,21277,24803,24819,25436,25475,25407,25531,25805,26089,26361,24035,27085,27133,28437,29157,20105,30185,30456,31379,31967,32207,32156,32865,33609,33624,33900,33980,34299,35013,36208,36865,36973,37783,38684,39442,20687,22679,24974,33235,34101,36104,36896,20419,20596,21063,21363,24687,25417,26463,28204,36275,36895,20439,23646,36042,26063,32154,21330,34966,20854,25539,23384,23403,23562,25613,26449,36956,20182,22810,22826,27760,35409,21822,22549,22949,24816,25171,26561,33333,26965,38464,39364,39464,20307,22534,23550,32784,23729,24111,24453,24608,24907,25140,26367,27888,28382,32974,33151,33492,34955,36024,36864,36910,38538,40667,39899,20195,21488,22823,31532,37261,38988,40441,28381,28711,21331,21828,23429,25176,25246,25299,27810,28655,29730,35351,37944,28609,35582,33592,20967,34552,21482,21481,20294,36948,36784,22890,33073,24061,31466,36799,26842,35895,29432,40008,27197,35504,20025,21336,22022,22374,25285,25506,26086,27470,28129,28251,28845,30701,31471,31658,32187,32829,32966,34507,35477,37723,22243,22727,24382,26029,26262,27264,27573,30007,35527,20516,30693,22320,24347,24677,26234,27744,30196,31258,32622,33268,34584,36933,39347,31689,30044,31481,31569,33988,36880,31209,31378,33590,23265,30528,20013,20210,23449,24544,25277,26172,26609,27880,34411,34935,35387,37198,37619,39376,27159,28710,29482,33511,33879,36015,19969,20806,20939,21899,23541,24086,24115,24193,24340,24373,24427,24500,25074,25361,26274,26397,28526,29266,30010,30522,32884,33081,33144,34678,35519,35548,36229,36339,37530,38263,38914,40165,21189,25431,30452,26389,27784,29645,36035,37806,38515,27941,22684,26894,27084,36861,37786,30171,36890,22618,26626,25524,27131,20291,28460,26584,36795,34086,32180,37716,26943,28528,22378,22775,23340,32044,29226,21514,37347,40372,20141,20302,20572,20597,21059,35998,21576,22564,23450,24093,24213,24237,24311,24351,24716,25269,25402,25552,26799,27712,30855,31118,31243,32224,33351,35330,35558,36420,36883,37048,37165,37336,40718,27877,25688,25826,25973,28404,30340,31515,36969,37841,28346,21746,24505,25764,36685,36845,37444,20856,22635,22825,23637,24215,28155,32399,29980,36028,36578,39003,28857,20253,27583,28593,3e4,38651,20814,21520,22581,22615,22956,23648,24466,26007,26460,28193,30331,33759,36077,36884,37117,37709,30757,30778,21162,24230,22303,22900,24594,20498,20826,20908,20941,20992,21776,22612,22616,22871,23445,23798,23947,24764,25237,25645,26481,26691,26812,26847,30423,28120,28271,28059,28783,29128,24403,30168,31095,31561,31572,31570,31958,32113,21040,33891,34153,34276,35342,35588,35910,36367,36867,36879,37913,38518,38957,39472,38360,20685,21205,21516,22530,23566,24999,25758,27934,30643,31461,33012,33796,36947,37509,23776,40199,21311,24471,24499,28060,29305,30563,31167,31716,27602,29420,35501,26627,27233,20984,31361,26932,23626,40182,33515,23493,37193,28702,22136,23663,24775,25958,27788,35930,36929,38931,21585,26311,37389,22856,37027,20869,20045,20970,34201,35598,28760,25466,37707,26978,39348,32260,30071,21335,26976,36575,38627,27741,20108,23612,24336,36841,21250,36049,32905,34425,24319,26085,20083,20837,22914,23615,38894,20219,22922,24525,35469,28641,31152,31074,23527,33905,29483,29105,24180,24565,25467,25754,29123,31896,20035,24316,20043,22492,22178,24745,28611,32013,33021,33075,33215,36786,35223,34468,24052,25226,25773,35207,26487,27874,27966,29750,30772,23110,32629,33453,39340,20467,24259,25309,25490,25943,26479,30403,29260,32972,32954,36649,37197,20493,22521,23186,26757,26995,29028,29437,36023,22770,36064,38506,36889,34687,31204,30695,33833,20271,21093,21338,25293,26575,27850,30333,31636,31893,33334,34180,36843,26333,28448,29190,32283,33707,39361,40614,20989,31665,30834,31672,32903,31560,27368,24161,32908,30033,30048,20843,37474,28300,30330,37271,39658,20240,32624,25244,31567,38309,40169,22138,22617,34532,38588,20276,21028,21322,21453,21467,24070,25644,26001,26495,27710,27726,29256,29359,29677,30036,32321,33324,34281,36009,31684,37318,29033,38930,39151,25405,26217,30058,30436,30928,34115,34542,21290,21329,21542,22915,24199,24444,24754,25161,25209,25259,26e3,27604,27852,30130,30382,30865,31192,32203,32631,32933,34987,35513,36027,36991,38750,39131,27147,31800,20633,23614,24494,26503,27608,29749,30473,32654,40763,26570,31255,21305,30091,39661,24422,33181,33777,32920,24380,24517,30050,31558,36924,26727,23019,23195,32016,30334,35628,20469,24426,27161,27703,28418,29922,31080,34920,35413,35961,24287,25551,30149,31186,33495,37672,37618,33948,34541,39981,21697,24428,25996,27996,28693,36007,36051,38971,25935,29942,19981,20184,22496,22827,23142,23500,20904,24067,24220,24598,25206,25975,26023,26222,28014,29238,31526,33104,33178,33433,35676,36e3,36070,36212,38428,38468,20398,25771,27494,33310,33889,34154,37096,23553,26963,39080,33914,34135,20239,21103,24489,24133,26381,31119,33145,35079,35206,28149,24343,25173,27832,20175,29289,39826,20998,21563,22132,22707,24996,25198,28954,22894,31881,31966,32027,38640,25991,32862,19993,20341,20853,22592,24163,24179,24330,26564,20006,34109,38281,38491,31859,38913,20731,22721,30294,30887,21029,30629,34065,31622,20559,22793,29255,31687,32232,36794,36820,36941,20415,21193,23081,24321,38829,20445,33303,37610,22275,25429,27497,29995,35036,36628,31298,21215,22675,24917,25098,26286,27597,31807,33769,20515,20472,21253,21574,22577,22857,23453,23792,23791,23849,24214,25265,25447,25918,26041,26379,27861,27873,28921,30770,32299,32990,33459,33804,34028,34562,35090,35370,35914,37030,37586,39165,40179,40300,20047,20129,20621,21078,22346,22952,24125,24536,24537,25151,26292,26395,26576,26834,20882,32033,32938,33192,35584,35980,36031,37502,38450,21536,38956,21271,20693,21340,22696,25778,26420,29287,30566,31302,37350,21187,27809,27526,22528,24140,22868,26412,32763,20961,30406,25705,30952,39764,40635,22475,22969,26151,26522,27598,21737,27097,24149,33180,26517,39850,26622,40018,26717,20134,20451,21448,25273,26411,27819,36804,20397,32365,40639,19975,24930,28288,28459,34067,21619,26410,39749,24051,31637,23724,23494,34588,28234,34001,31252,33032,22937,31885,27665,30496,21209,22818,28961,29279,30683,38695,40289,26891,23167,23064,20901,21517,21629,26126,30431,36855,37528,40180,23018,29277,28357,20813,26825,32191,32236,38754,40634,25720,27169,33538,22916,23391,27611,29467,30450,32178,32791,33945,20786,26408,40665,30446,26466,21247,39173,23588,25147,31870,36016,21839,24758,32011,38272,21249,20063,20918,22812,29242,32822,37326,24357,30690,21380,24441,32004,34220,35379,36493,38742,26611,34222,37971,24841,24840,27833,30290,35565,36664,21807,20305,20778,21191,21451,23461,24189,24736,24962,25558,26377,26586,28263,28044,29494,29495,30001,31056,35029,35480,36938,37009,37109,38596,34701,22805,20104,20313,19982,35465,36671,38928,20653,24188,22934,23481,24248,25562,25594,25793,26332,26954,27096,27915,28342,29076,29992,31407,32650,32768,33865,33993,35201,35617,36362,36965,38525,39178,24958,25233,27442,27779,28020,32716,32764,28096,32645,34746,35064,26469,33713,38972,38647,27931,32097,33853,37226,20081,21365,23888,27396,28651,34253,34349,35239,21033,21519,23653,26446,26792,29702,29827,30178,35023,35041,37324,38626,38520,24459,29575,31435,33870,25504,30053,21129,27969,28316,29705,30041,30827,31890,38534,31452,40845,20406,24942,26053,34396,20102,20142,20698,20001,20940,23534,26009,26753,28092,29471,30274,30637,31260,31975,33391,35538,36988,37327,38517,38936,21147,32209,20523,21400,26519,28107,29136,29747,33256,36650,38563,40023,40607,29792,22593,28057,32047,39006,20196,20278,20363,20919,21169,23994,24604,29618,31036,33491,37428,38583,38646,38666,40599,40802,26278,27508,21015,21155,28872,35010,24265,24651,24976,28451,29001,31806,32244,32879,34030,36899,37676,21570,39791,27347,28809,36034,36335,38706,21172,23105,24266,24324,26391,27004,27028,28010,28431,29282,29436,31725,32769,32894,34635,37070,20845,40595,31108,32907,37682,35542,20525,21644,35441,27498,36036,33031,24785,26528,40434,20121,20120,39952,35435,34241,34152,26880,28286,30871,33109,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,24332,19984,19989,20010,20017,20022,20028,20031,20034,20054,20056,20098,20101,35947,20106,33298,24333,20110,20126,20127,20128,20130,20144,20147,20150,20174,20173,20164,20166,20162,20183,20190,20205,20191,20215,20233,20314,20272,20315,20317,20311,20295,20342,20360,20367,20376,20347,20329,20336,20369,20335,20358,20374,20760,20436,20447,20430,20440,20443,20433,20442,20432,20452,20453,20506,20520,20500,20522,20517,20485,20252,20470,20513,20521,20524,20478,20463,20497,20486,20547,20551,26371,20565,20560,20552,20570,20566,20588,20600,20608,20634,20613,20660,20658,20681,20682,20659,20674,20694,20702,20709,20717,20707,20718,20729,20725,20745,20737,20738,20758,20757,20756,20762,20769,20794,20791,20796,20795,20799,20800,20818,20812,20820,20834,31480,20841,20842,20846,20864,20866,22232,20876,20873,20879,20881,20883,20885,20886,20900,20902,20898,20905,20906,20907,20915,20913,20914,20912,20917,20925,20933,20937,20955,20960,34389,20969,20973,20976,20981,20990,20996,21003,21012,21006,21031,21034,21038,21043,21049,21071,21060,21067,21068,21086,21076,21098,21108,21097,21107,21119,21117,21133,21140,21138,21105,21128,21137,36776,36775,21164,21165,21180,21173,21185,21197,21207,21214,21219,21222,39149,21216,21235,21237,21240,21241,21254,21256,30008,21261,21264,21263,21269,21274,21283,21295,21297,21299,21304,21312,21318,21317,19991,21321,21325,20950,21342,21353,21358,22808,21371,21367,21378,21398,21408,21414,21413,21422,21424,21430,21443,31762,38617,21471,26364,29166,21486,21480,21485,21498,21505,21565,21568,21548,21549,21564,21550,21558,21545,21533,21582,21647,21621,21646,21599,21617,21623,21616,21650,21627,21632,21622,21636,21648,21638,21703,21666,21688,21669,21676,21700,21704,21672,21675,21698,21668,21694,21692,21720,21733,21734,21775,21780,21757,21742,21741,21754,21730,21817,21824,21859,21836,21806,21852,21829,21846,21847,21816,21811,21853,21913,21888,21679,21898,21919,21883,21886,21912,21918,21934,21884,21891,21929,21895,21928,21978,21957,21983,21956,21980,21988,21972,22036,22007,22038,22014,22013,22043,22009,22094,22096,29151,22068,22070,22066,22072,22123,22116,22063,22124,22122,22150,22144,22154,22176,22164,22159,22181,22190,22198,22196,22210,22204,22209,22211,22208,22216,22222,22225,22227,22231,22254,22265,22272,22271,22276,22281,22280,22283,22285,22291,22296,22294,21959,22300,22310,22327,22328,22350,22331,22336,22351,22377,22464,22408,22369,22399,22409,22419,22432,22451,22436,22442,22448,22467,22470,22484,22482,22483,22538,22486,22499,22539,22553,22557,22642,22561,22626,22603,22640,27584,22610,22589,22649,22661,22713,22687,22699,22714,22750,22715,22712,22702,22725,22739,22737,22743,22745,22744,22757,22748,22756,22751,22767,22778,22777,22779,22780,22781,22786,22794,22800,22811,26790,22821,22828,22829,22834,22840,22846,31442,22869,22864,22862,22874,22872,22882,22880,22887,22892,22889,22904,22913,22941,20318,20395,22947,22962,22982,23016,23004,22925,23001,23002,23077,23071,23057,23068,23049,23066,23104,23148,23113,23093,23094,23138,23146,23194,23228,23230,23243,23234,23229,23267,23255,23270,23273,23254,23290,23291,23308,23307,23318,23346,23248,23338,23350,23358,23363,23365,23360,23377,23381,23386,23387,23397,23401,23408,23411,23413,23416,25992,23418,23424,23427,23462,23480,23491,23495,23497,23508,23504,23524,23526,23522,23518,23525,23531,23536,23542,23539,23557,23559,23560,23565,23571,23584,23586,23592,23608,23609,23617,23622,23630,23635,23632,23631,23409,23660,23662,20066,23670,23673,23692,23697,23700,22939,23723,23739,23734,23740,23735,23749,23742,23751,23769,23785,23805,23802,23789,23948,23786,23819,23829,23831,23900,23839,23835,23825,23828,23842,23834,23833,23832,23884,23890,23886,23883,23916,23923,23926,23943,23940,23938,23970,23965,23980,23982,23997,23952,23991,23996,24009,24013,24019,24018,24022,24027,24043,24050,24053,24075,24090,24089,24081,24091,24118,24119,24132,24131,24128,24142,24151,24148,24159,24162,24164,24135,24181,24182,24186,40636,24191,24224,24257,24258,24264,24272,24271,24278,24291,24285,24282,24283,24290,24289,24296,24297,24300,24305,24307,24304,24308,24312,24318,24323,24329,24413,24412,24331,24337,24342,24361,24365,24376,24385,24392,24396,24398,24367,24401,24406,24407,24409,24417,24429,24435,24439,24451,24450,24447,24458,24456,24465,24455,24478,24473,24472,24480,24488,24493,24508,24534,24571,24548,24568,24561,24541,24755,24575,24609,24672,24601,24592,24617,24590,24625,24603,24597,24619,24614,24591,24634,24666,24641,24682,24695,24671,24650,24646,24653,24675,24643,24676,24642,24684,24683,24665,24705,24717,24807,24707,24730,24708,24731,24726,24727,24722,24743,24715,24801,24760,24800,24787,24756,24560,24765,24774,24757,24792,24909,24853,24838,24822,24823,24832,24820,24826,24835,24865,24827,24817,24845,24846,24903,24894,24872,24871,24906,24895,24892,24876,24884,24893,24898,24900,24947,24951,24920,24921,24922,24939,24948,24943,24933,24945,24927,24925,24915,24949,24985,24982,24967,25004,24980,24986,24970,24977,25003,25006,25036,25034,25033,25079,25032,25027,25030,25018,25035,32633,25037,25062,25059,25078,25082,25076,25087,25085,25084,25086,25088,25096,25097,25101,25100,25108,25115,25118,25121,25130,25134,25136,25138,25139,25153,25166,25182,25187,25179,25184,25192,25212,25218,25225,25214,25234,25235,25238,25300,25219,25236,25303,25297,25275,25295,25343,25286,25812,25288,25308,25292,25290,25282,25287,25243,25289,25356,25326,25329,25383,25346,25352,25327,25333,25424,25406,25421,25628,25423,25494,25486,25472,25515,25462,25507,25487,25481,25503,25525,25451,25449,25534,25577,25536,25542,25571,25545,25554,25590,25540,25622,25652,25606,25619,25638,25654,25885,25623,25640,25615,25703,25711,25718,25678,25898,25749,25747,25765,25769,25736,25788,25818,25810,25797,25799,25787,25816,25794,25841,25831,33289,25824,25825,25260,25827,25839,25900,25846,25844,25842,25850,25856,25853,25880,25884,25861,25892,25891,25899,25908,25909,25911,25910,25912,30027,25928,25942,25941,25933,25944,25950,25949,25970,25976,25986,25987,35722,26011,26015,26027,26039,26051,26054,26049,26052,26060,26066,26075,26073,26080,26081,26097,26482,26122,26115,26107,26483,26165,26166,26164,26140,26191,26180,26185,26177,26206,26205,26212,26215,26216,26207,26210,26224,26243,26248,26254,26249,26244,26264,26269,26305,26297,26313,26302,26300,26308,26296,26326,26330,26336,26175,26342,26345,26352,26357,26359,26383,26390,26398,26406,26407,38712,26414,26431,26422,26433,26424,26423,26438,26462,26464,26457,26467,26468,26505,26480,26537,26492,26474,26508,26507,26534,26529,26501,26551,26607,26548,26604,26547,26601,26552,26596,26590,26589,26594,26606,26553,26574,26566,26599,27292,26654,26694,26665,26688,26701,26674,26702,26803,26667,26713,26723,26743,26751,26783,26767,26797,26772,26781,26779,26755,27310,26809,26740,26805,26784,26810,26895,26765,26750,26881,26826,26888,26840,26914,26918,26849,26892,26829,26836,26855,26837,26934,26898,26884,26839,26851,26917,26873,26848,26863,26920,26922,26906,26915,26913,26822,27001,26999,26972,27e3,26987,26964,27006,26990,26937,26996,26941,26969,26928,26977,26974,26973,27009,26986,27058,27054,27088,27071,27073,27091,27070,27086,23528,27082,27101,27067,27075,27047,27182,27025,27040,27036,27029,27060,27102,27112,27138,27163,27135,27402,27129,27122,27111,27141,27057,27166,27117,27156,27115,27146,27154,27329,27171,27155,27204,27148,27250,27190,27256,27207,27234,27225,27238,27208,27192,27170,27280,27277,27296,27268,27298,27299,27287,34327,27323,27331,27330,27320,27315,27308,27358,27345,27359,27306,27354,27370,27387,27397,34326,27386,27410,27414,39729,27423,27448,27447,30428,27449,39150,27463,27459,27465,27472,27481,27476,27483,27487,27489,27512,27513,27519,27520,27524,27523,27533,27544,27541,27550,27556,27562,27563,27567,27570,27569,27571,27575,27580,27590,27595,27603,27615,27628,27627,27635,27631,40638,27656,27667,27668,27675,27684,27683,27742,27733,27746,27754,27778,27789,27802,27777,27803,27774,27752,27763,27794,27792,27844,27889,27859,27837,27863,27845,27869,27822,27825,27838,27834,27867,27887,27865,27882,27935,34893,27958,27947,27965,27960,27929,27957,27955,27922,27916,28003,28051,28004,27994,28025,27993,28046,28053,28644,28037,28153,28181,28170,28085,28103,28134,28088,28102,28140,28126,28108,28136,28114,28101,28154,28121,28132,28117,28138,28142,28205,28270,28206,28185,28274,28255,28222,28195,28267,28203,28278,28237,28191,28227,28218,28238,28196,28415,28189,28216,28290,28330,28312,28361,28343,28371,28349,28335,28356,28338,28372,28373,28303,28325,28354,28319,28481,28433,28748,28396,28408,28414,28479,28402,28465,28399,28466,28364,28478,28435,28407,28550,28538,28536,28545,28544,28527,28507,28659,28525,28546,28540,28504,28558,28561,28610,28518,28595,28579,28577,28580,28601,28614,28586,28639,28629,28652,28628,28632,28657,28654,28635,28681,28683,28666,28689,28673,28687,28670,28699,28698,28532,28701,28696,28703,28720,28734,28722,28753,28771,28825,28818,28847,28913,28844,28856,28851,28846,28895,28875,28893,28889,28937,28925,28956,28953,29029,29013,29064,29030,29026,29004,29014,29036,29071,29179,29060,29077,29096,29100,29143,29113,29118,29138,29129,29140,29134,29152,29164,29159,29173,29180,29177,29183,29197,29200,29211,29224,29229,29228,29232,29234,29243,29244,29247,29248,29254,29259,29272,29300,29310,29314,29313,29319,29330,29334,29346,29351,29369,29362,29379,29382,29380,29390,29394,29410,29408,29409,29433,29431,20495,29463,29450,29468,29462,29469,29492,29487,29481,29477,29502,29518,29519,40664,29527,29546,29544,29552,29560,29557,29563,29562,29640,29619,29646,29627,29632,29669,29678,29662,29858,29701,29807,29733,29688,29746,29754,29781,29759,29791,29785,29761,29788,29801,29808,29795,29802,29814,29822,29835,29854,29863,29898,29903,29908,29681,29920,29923,29927,29929,29934,29938,29936,29937,29944,29943,29956,29955,29957,29964,29966,29965,29973,29971,29982,29990,29996,30012,30020,30029,30026,30025,30043,30022,30042,30057,30052,30055,30059,30061,30072,30070,30086,30087,30068,30090,30089,30082,30100,30106,30109,30117,30115,30146,30131,30147,30133,30141,30136,30140,30129,30157,30154,30162,30169,30179,30174,30206,30207,30204,30209,30192,30202,30194,30195,30219,30221,30217,30239,30247,30240,30241,30242,30244,30260,30256,30267,30279,30280,30278,30300,30296,30305,30306,30312,30313,30314,30311,30316,30320,30322,30326,30328,30332,30336,30339,30344,30347,30350,30358,30355,30361,30362,30384,30388,30392,30393,30394,30402,30413,30422,30418,30430,30433,30437,30439,30442,34351,30459,30472,30471,30468,30505,30500,30494,30501,30502,30491,30519,30520,30535,30554,30568,30571,30555,30565,30591,30590,30585,30606,30603,30609,30624,30622,30640,30646,30649,30655,30652,30653,30651,30663,30669,30679,30682,30684,30691,30702,30716,30732,30738,31014,30752,31018,30789,30862,30836,30854,30844,30874,30860,30883,30901,30890,30895,30929,30918,30923,30932,30910,30908,30917,30922,30956,30951,30938,30973,30964,30983,30994,30993,31001,31020,31019,31040,31072,31063,31071,31066,31061,31059,31098,31103,31114,31133,31143,40779,31146,31150,31155,31161,31162,31177,31189,31207,31212,31201,31203,31240,31245,31256,31257,31264,31263,31104,31281,31291,31294,31287,31299,31319,31305,31329,31330,31337,40861,31344,31353,31357,31368,31383,31381,31384,31382,31401,31432,31408,31414,31429,31428,31423,36995,31431,31434,31437,31439,31445,31443,31449,31450,31453,31457,31458,31462,31469,31472,31490,31503,31498,31494,31539,31512,31513,31518,31541,31528,31542,31568,31610,31492,31565,31499,31564,31557,31605,31589,31604,31591,31600,31601,31596,31598,31645,31640,31647,31629,31644,31642,31627,31634,31631,31581,31641,31691,31681,31692,31695,31668,31686,31709,31721,31761,31764,31718,31717,31840,31744,31751,31763,31731,31735,31767,31757,31734,31779,31783,31786,31775,31799,31787,31805,31820,31811,31828,31823,31808,31824,31832,31839,31844,31830,31845,31852,31861,31875,31888,31908,31917,31906,31915,31905,31912,31923,31922,31921,31918,31929,31933,31936,31941,31938,31960,31954,31964,31970,39739,31983,31986,31988,31990,31994,32006,32002,32028,32021,32010,32069,32075,32046,32050,32063,32053,32070,32115,32086,32078,32114,32104,32110,32079,32099,32147,32137,32091,32143,32125,32155,32186,32174,32163,32181,32199,32189,32171,32317,32162,32175,32220,32184,32159,32176,32216,32221,32228,32222,32251,32242,32225,32261,32266,32291,32289,32274,32305,32287,32265,32267,32290,32326,32358,32315,32309,32313,32323,32311,32306,32314,32359,32349,32342,32350,32345,32346,32377,32362,32361,32380,32379,32387,32213,32381,36782,32383,32392,32393,32396,32402,32400,32403,32404,32406,32398,32411,32412,32568,32570,32581,32588,32589,32590,32592,32593,32597,32596,32600,32607,32608,32616,32617,32615,32632,32642,32646,32643,32648,32647,32652,32660,32670,32669,32666,32675,32687,32690,32697,32686,32694,32696,35697,32709,32710,32714,32725,32724,32737,32742,32745,32755,32761,39132,32774,32772,32779,32786,32792,32793,32796,32801,32808,32831,32827,32842,32838,32850,32856,32858,32863,32866,32872,32883,32882,32880,32886,32889,32893,32895,32900,32902,32901,32923,32915,32922,32941,20880,32940,32987,32997,32985,32989,32964,32986,32982,33033,33007,33009,33051,33065,33059,33071,33099,38539,33094,33086,33107,33105,33020,33137,33134,33125,33126,33140,33155,33160,33162,33152,33154,33184,33173,33188,33187,33119,33171,33193,33200,33205,33214,33208,33213,33216,33218,33210,33225,33229,33233,33241,33240,33224,33242,33247,33248,33255,33274,33275,33278,33281,33282,33285,33287,33290,33293,33296,33302,33321,33323,33336,33331,33344,33369,33368,33373,33370,33375,33380,33378,33384,33386,33387,33326,33393,33399,33400,33406,33421,33426,33451,33439,33467,33452,33505,33507,33503,33490,33524,33523,33530,33683,33539,33531,33529,33502,33542,33500,33545,33497,33589,33588,33558,33586,33585,33600,33593,33616,33605,33583,33579,33559,33560,33669,33690,33706,33695,33698,33686,33571,33678,33671,33674,33660,33717,33651,33653,33696,33673,33704,33780,33811,33771,33742,33789,33795,33752,33803,33729,33783,33799,33760,33778,33805,33826,33824,33725,33848,34054,33787,33901,33834,33852,34138,33924,33911,33899,33965,33902,33922,33897,33862,33836,33903,33913,33845,33994,33890,33977,33983,33951,34009,33997,33979,34010,34e3,33985,33990,34006,33953,34081,34047,34036,34071,34072,34092,34079,34069,34068,34044,34112,34147,34136,34120,34113,34306,34123,34133,34176,34212,34184,34193,34186,34216,34157,34196,34203,34282,34183,34204,34167,34174,34192,34249,34234,34255,34233,34256,34261,34269,34277,34268,34297,34314,34323,34315,34302,34298,34310,34338,34330,34352,34367,34381,20053,34388,34399,34407,34417,34451,34467,34473,34474,34443,34444,34486,34479,34500,34502,34480,34505,34851,34475,34516,34526,34537,34540,34527,34523,34543,34578,34566,34568,34560,34563,34555,34577,34569,34573,34553,34570,34612,34623,34615,34619,34597,34601,34586,34656,34655,34680,34636,34638,34676,34647,34664,34670,34649,34643,34659,34666,34821,34722,34719,34690,34735,34763,34749,34752,34768,38614,34731,34756,34739,34759,34758,34747,34799,34802,34784,34831,34829,34814,34806,34807,34830,34770,34833,34838,34837,34850,34849,34865,34870,34873,34855,34875,34884,34882,34898,34905,34910,34914,34923,34945,34942,34974,34933,34941,34997,34930,34946,34967,34962,34990,34969,34978,34957,34980,34992,35007,34993,35011,35012,35028,35032,35033,35037,35065,35074,35068,35060,35048,35058,35076,35084,35082,35091,35139,35102,35109,35114,35115,35137,35140,35131,35126,35128,35148,35101,35168,35166,35174,35172,35181,35178,35183,35188,35191,35198,35203,35208,35210,35219,35224,35233,35241,35238,35244,35247,35250,35258,35261,35263,35264,35290,35292,35293,35303,35316,35320,35331,35350,35344,35340,35355,35357,35365,35382,35393,35419,35410,35398,35400,35452,35437,35436,35426,35461,35458,35460,35496,35489,35473,35493,35494,35482,35491,35524,35533,35522,35546,35563,35571,35559,35556,35569,35604,35552,35554,35575,35550,35547,35596,35591,35610,35553,35606,35600,35607,35616,35635,38827,35622,35627,35646,35624,35649,35660,35663,35662,35657,35670,35675,35674,35691,35679,35692,35695,35700,35709,35712,35724,35726,35730,35731,35734,35737,35738,35898,35905,35903,35912,35916,35918,35920,35925,35938,35948,35960,35962,35970,35977,35973,35978,35981,35982,35988,35964,35992,25117,36013,36010,36029,36018,36019,36014,36022,36040,36033,36068,36067,36058,36093,36090,36091,36100,36101,36106,36103,36111,36109,36112,40782,36115,36045,36116,36118,36199,36205,36209,36211,36225,36249,36290,36286,36282,36303,36314,36310,36300,36315,36299,36330,36331,36319,36323,36348,36360,36361,36351,36381,36382,36368,36383,36418,36405,36400,36404,36426,36423,36425,36428,36432,36424,36441,36452,36448,36394,36451,36437,36470,36466,36476,36481,36487,36485,36484,36491,36490,36499,36497,36500,36505,36522,36513,36524,36528,36550,36529,36542,36549,36552,36555,36571,36579,36604,36603,36587,36606,36618,36613,36629,36626,36633,36627,36636,36639,36635,36620,36646,36659,36667,36665,36677,36674,36670,36684,36681,36678,36686,36695,36700,36706,36707,36708,36764,36767,36771,36781,36783,36791,36826,36837,36834,36842,36847,36999,36852,36869,36857,36858,36881,36885,36897,36877,36894,36886,36875,36903,36918,36917,36921,36856,36943,36944,36945,36946,36878,36937,36926,36950,36952,36958,36968,36975,36982,38568,36978,36994,36989,36993,36992,37002,37001,37007,37032,37039,37041,37045,37090,37092,25160,37083,37122,37138,37145,37170,37168,37194,37206,37208,37219,37221,37225,37235,37234,37259,37257,37250,37282,37291,37295,37290,37301,37300,37306,37312,37313,37321,37323,37328,37334,37343,37345,37339,37372,37365,37366,37406,37375,37396,37420,37397,37393,37470,37463,37445,37449,37476,37448,37525,37439,37451,37456,37532,37526,37523,37531,37466,37583,37561,37559,37609,37647,37626,37700,37678,37657,37666,37658,37667,37690,37685,37691,37724,37728,37756,37742,37718,37808,37804,37805,37780,37817,37846,37847,37864,37861,37848,37827,37853,37840,37832,37860,37914,37908,37907,37891,37895,37904,37942,37931,37941,37921,37946,37953,37970,37956,37979,37984,37986,37982,37994,37417,38e3,38005,38007,38013,37978,38012,38014,38017,38015,38274,38279,38282,38292,38294,38296,38297,38304,38312,38311,38317,38332,38331,38329,38334,38346,28662,38339,38349,38348,38357,38356,38358,38364,38369,38373,38370,38433,38440,38446,38447,38466,38476,38479,38475,38519,38492,38494,38493,38495,38502,38514,38508,38541,38552,38549,38551,38570,38567,38577,38578,38576,38580,38582,38584,38585,38606,38603,38601,38605,35149,38620,38669,38613,38649,38660,38662,38664,38675,38670,38673,38671,38678,38681,38692,38698,38704,38713,38717,38718,38724,38726,38728,38722,38729,38748,38752,38756,38758,38760,21202,38763,38769,38777,38789,38780,38785,38778,38790,38795,38799,38800,38812,38824,38822,38819,38835,38836,38851,38854,38856,38859,38876,38893,40783,38898,31455,38902,38901,38927,38924,38968,38948,38945,38967,38973,38982,38991,38987,39019,39023,39024,39025,39028,39027,39082,39087,39089,39094,39108,39107,39110,39145,39147,39171,39177,39186,39188,39192,39201,39197,39198,39204,39200,39212,39214,39229,39230,39234,39241,39237,39248,39243,39249,39250,39244,39253,39319,39320,39333,39341,39342,39356,39391,39387,39389,39384,39377,39405,39406,39409,39410,39419,39416,39425,39439,39429,39394,39449,39467,39479,39493,39490,39488,39491,39486,39509,39501,39515,39511,39519,39522,39525,39524,39529,39531,39530,39597,39600,39612,39616,39631,39633,39635,39636,39646,39647,39650,39651,39654,39663,39659,39662,39668,39665,39671,39675,39686,39704,39706,39711,39714,39715,39717,39719,39720,39721,39722,39726,39727,39730,39748,39747,39759,39757,39758,39761,39768,39796,39827,39811,39825,39830,39831,39839,39840,39848,39860,39872,39882,39865,39878,39887,39889,39890,39907,39906,39908,39892,39905,39994,39922,39921,39920,39957,39956,39945,39955,39948,39942,39944,39954,39946,39940,39982,39963,39973,39972,39969,39984,40007,39986,40006,39998,40026,40032,40039,40054,40056,40167,40172,40176,40201,40200,40171,40195,40198,40234,40230,40367,40227,40223,40260,40213,40210,40257,40255,40254,40262,40264,40285,40286,40292,40273,40272,40281,40306,40329,40327,40363,40303,40314,40346,40356,40361,40370,40388,40385,40379,40376,40378,40390,40399,40386,40409,40403,40440,40422,40429,40431,40445,40474,40475,40478,40565,40569,40573,40577,40584,40587,40588,40594,40597,40593,40605,40613,40617,40632,40618,40621,38753,40652,40654,40655,40656,40660,40668,40670,40669,40672,40677,40680,40687,40692,40694,40695,40697,40699,40700,40701,40711,40712,30391,40725,40737,40748,40766,40778,40786,40788,40803,40799,40800,40801,40806,40807,40812,40810,40823,40818,40822,40853,40860,40864,22575,27079,36953,29796,20956,29081,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,32394,35100,37704,37512,34012,20425,28859,26161,26824,37625,26363,24389,20008,20193,20220,20224,20227,20281,20310,20370,20362,20378,20372,20429,20544,20514,20479,20510,20550,20592,20546,20628,20724,20696,20810,20836,20893,20926,20972,21013,21148,21158,21184,21211,21248,21255,21284,21362,21395,21426,21469,64014,21660,21642,21673,21759,21894,22361,22373,22444,22472,22471,64015,64016,22686,22706,22795,22867,22875,22877,22883,22948,22970,23382,23488,29999,23512,23532,23582,23718,23738,23797,23847,23891,64017,23874,23917,23992,23993,24016,24353,24372,24423,24503,24542,24669,24709,24714,24798,24789,24864,24818,24849,24887,24880,24984,25107,25254,25589,25696,25757,25806,25934,26112,26133,26171,26121,26158,26142,26148,26213,26199,26201,64018,26227,26265,26272,26290,26303,26362,26382,63785,26470,26555,26706,26560,26625,26692,26831,64019,26984,64020,27032,27106,27184,27243,27206,27251,27262,27362,27364,27606,27711,27740,27782,27759,27866,27908,28039,28015,28054,28076,28111,28152,28146,28156,28217,28252,28199,28220,28351,28552,28597,28661,28677,28679,28712,28805,28843,28943,28932,29020,28998,28999,64021,29121,29182,29361,29374,29476,64022,29559,29629,29641,29654,29667,29650,29703,29685,29734,29738,29737,29742,29794,29833,29855,29953,30063,30338,30364,30366,30363,30374,64023,30534,21167,30753,30798,30820,30842,31024,64024,64025,64026,31124,64027,31131,31441,31463,64028,31467,31646,64029,32072,32092,32183,32160,32214,32338,32583,32673,64030,33537,33634,33663,33735,33782,33864,33972,34131,34137,34155,64031,34224,64032,64033,34823,35061,35346,35383,35449,35495,35518,35551,64034,35574,35667,35711,36080,36084,36114,36214,64035,36559,64036,64037,36967,37086,64038,37141,37159,37338,37335,37342,37357,37358,37348,37349,37382,37392,37386,37434,37440,37436,37454,37465,37457,37433,37479,37543,37495,37496,37607,37591,37593,37584,64039,37589,37600,37587,37669,37665,37627,64040,37662,37631,37661,37634,37744,37719,37796,37830,37854,37880,37937,37957,37960,38290,63964,64041,38557,38575,38707,38715,38723,38733,38735,38737,38741,38999,39013,64042,64043,39207,64044,39326,39502,39641,39644,39797,39794,39823,39857,39867,39936,40304,40299,64045,40473,40657,null,null,8560,8561,8562,8563,8564,8565,8566,8567,8568,8569,65506,65508,65287,65282,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,8560,8561,8562,8563,8564,8565,8566,8567,8568,8569,8544,8545,8546,8547,8548,8549,8550,8551,8552,8553,65506,65508,65287,65282,12849,8470,8481,8757,32394,35100,37704,37512,34012,20425,28859,26161,26824,37625,26363,24389,20008,20193,20220,20224,20227,20281,20310,20370,20362,20378,20372,20429,20544,20514,20479,20510,20550,20592,20546,20628,20724,20696,20810,20836,20893,20926,20972,21013,21148,21158,21184,21211,21248,21255,21284,21362,21395,21426,21469,64014,21660,21642,21673,21759,21894,22361,22373,22444,22472,22471,64015,64016,22686,22706,22795,22867,22875,22877,22883,22948,22970,23382,23488,29999,23512,23532,23582,23718,23738,23797,23847,23891,64017,23874,23917,23992,23993,24016,24353,24372,24423,24503,24542,24669,24709,24714,24798,24789,24864,24818,24849,24887,24880,24984,25107,25254,25589,25696,25757,25806,25934,26112,26133,26171,26121,26158,26142,26148,26213,26199,26201,64018,26227,26265,26272,26290,26303,26362,26382,63785,26470,26555,26706,26560,26625,26692,26831,64019,26984,64020,27032,27106,27184,27243,27206,27251,27262,27362,27364,27606,27711,27740,27782,27759,27866,27908,28039,28015,28054,28076,28111,28152,28146,28156,28217,28252,28199,28220,28351,28552,28597,28661,28677,28679,28712,28805,28843,28943,28932,29020,28998,28999,64021,29121,29182,29361,29374,29476,64022,29559,29629,29641,29654,29667,29650,29703,29685,29734,29738,29737,29742,29794,29833,29855,29953,30063,30338,30364,30366,30363,30374,64023,30534,21167,30753,30798,30820,30842,31024,64024,64025,64026,31124,64027,31131,31441,31463,64028,31467,31646,64029,32072,32092,32183,32160,32214,32338,32583,32673,64030,33537,33634,33663,33735,33782,33864,33972,34131,34137,34155,64031,34224,64032,64033,34823,35061,35346,35383,35449,35495,35518,35551,64034,35574,35667,35711,36080,36084,36114,36214,64035,36559,64036,64037,36967,37086,64038,37141,37159,37338,37335,37342,37357,37358,37348,37349,37382,37392,37386,37434,37440,37436,37454,37465,37457,37433,37479,37543,37495,37496,37607,37591,37593,37584,64039,37589,37600,37587,37669,37665,37627,64040,37662,37631,37661,37634,37744,37719,37796,37830,37854,37880,37937,37957,37960,38290,63964,64041,38557,38575,38707,38715,38723,38733,38735,38737,38741,38999,39013,64042,64043,39207,64044,39326,39502,39641,39644,39797,39794,39823,39857,39867,39936,40304,40299,64045,40473,40657,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],jis0212:[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,728,711,184,729,733,175,731,730,65374,900,901,null,null,null,null,null,null,null,null,161,166,191,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,186,170,169,174,8482,164,8470,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,902,904,905,906,938,null,908,null,910,939,null,911,null,null,null,null,940,941,942,943,970,912,972,962,973,971,944,974,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1038,1039,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,1118,1119,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,198,272,null,294,null,306,null,321,319,null,330,216,338,null,358,222,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,230,273,240,295,305,307,312,322,320,329,331,248,339,223,359,254,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,193,192,196,194,258,461,256,260,197,195,262,264,268,199,266,270,201,200,203,202,282,278,274,280,null,284,286,290,288,292,205,204,207,206,463,304,298,302,296,308,310,313,317,315,323,327,325,209,211,210,214,212,465,336,332,213,340,344,342,346,348,352,350,356,354,218,217,220,219,364,467,368,362,370,366,360,471,475,473,469,372,221,376,374,377,381,379,null,null,null,null,null,null,null,225,224,228,226,259,462,257,261,229,227,263,265,269,231,267,271,233,232,235,234,283,279,275,281,501,285,287,null,289,293,237,236,239,238,464,null,299,303,297,309,311,314,318,316,324,328,326,241,243,242,246,244,466,337,333,245,341,345,343,347,349,353,351,357,355,250,249,252,251,365,468,369,363,371,367,361,472,476,474,470,373,253,255,375,378,382,380,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,19970,19972,19973,19980,19986,19999,20003,20004,20008,20011,20014,20015,20016,20021,20032,20033,20036,20039,20049,20058,20060,20067,20072,20073,20084,20085,20089,20095,20109,20118,20119,20125,20143,20153,20163,20176,20186,20187,20192,20193,20194,20200,20207,20209,20211,20213,20221,20222,20223,20224,20226,20227,20232,20235,20236,20242,20245,20246,20247,20249,20270,20273,20320,20275,20277,20279,20281,20283,20286,20288,20290,20296,20297,20299,20300,20306,20308,20310,20312,20319,20323,20330,20332,20334,20337,20343,20344,20345,20346,20349,20350,20353,20354,20356,20357,20361,20362,20364,20366,20368,20370,20371,20372,20375,20377,20378,20382,20383,20402,20407,20409,20411,20412,20413,20414,20416,20417,20421,20422,20424,20425,20427,20428,20429,20431,20434,20444,20448,20450,20464,20466,20476,20477,20479,20480,20481,20484,20487,20490,20492,20494,20496,20499,20503,20504,20507,20508,20509,20510,20514,20519,20526,20528,20530,20531,20533,20544,20545,20546,20549,20550,20554,20556,20558,20561,20562,20563,20567,20569,20575,20576,20578,20579,20582,20583,20586,20589,20592,20593,20539,20609,20611,20612,20614,20618,20622,20623,20624,20626,20627,20628,20630,20635,20636,20638,20639,20640,20641,20642,20650,20655,20656,20665,20666,20669,20672,20675,20676,20679,20684,20686,20688,20691,20692,20696,20700,20701,20703,20706,20708,20710,20712,20713,20719,20721,20726,20730,20734,20739,20742,20743,20744,20747,20748,20749,20750,20722,20752,20759,20761,20763,20764,20765,20766,20771,20775,20776,20780,20781,20783,20785,20787,20788,20789,20792,20793,20802,20810,20815,20819,20821,20823,20824,20831,20836,20838,20862,20867,20868,20875,20878,20888,20893,20897,20899,20909,20920,20922,20924,20926,20927,20930,20936,20943,20945,20946,20947,20949,20952,20958,20962,20965,20974,20978,20979,20980,20983,20993,20994,20997,21010,21011,21013,21014,21016,21026,21032,21041,21042,21045,21052,21061,21065,21077,21079,21080,21082,21084,21087,21088,21089,21094,21102,21111,21112,21113,21120,21122,21125,21130,21132,21139,21141,21142,21143,21144,21146,21148,21156,21157,21158,21159,21167,21168,21174,21175,21176,21178,21179,21181,21184,21188,21190,21192,21196,21199,21201,21204,21206,21211,21212,21217,21221,21224,21225,21226,21228,21232,21233,21236,21238,21239,21248,21251,21258,21259,21260,21265,21267,21272,21275,21276,21278,21279,21285,21287,21288,21289,21291,21292,21293,21296,21298,21301,21308,21309,21310,21314,21324,21323,21337,21339,21345,21347,21349,21356,21357,21362,21369,21374,21379,21383,21384,21390,21395,21396,21401,21405,21409,21412,21418,21419,21423,21426,21428,21429,21431,21432,21434,21437,21440,21445,21455,21458,21459,21461,21466,21469,21470,21472,21478,21479,21493,21506,21523,21530,21537,21543,21544,21546,21551,21553,21556,21557,21571,21572,21575,21581,21583,21598,21602,21604,21606,21607,21609,21611,21613,21614,21620,21631,21633,21635,21637,21640,21641,21645,21649,21653,21654,21660,21663,21665,21670,21671,21673,21674,21677,21678,21681,21687,21689,21690,21691,21695,21702,21706,21709,21710,21728,21738,21740,21743,21750,21756,21758,21759,21760,21761,21765,21768,21769,21772,21773,21774,21781,21802,21803,21810,21813,21814,21819,21820,21821,21825,21831,21833,21834,21837,21840,21841,21848,21850,21851,21854,21856,21857,21860,21862,21887,21889,21890,21894,21896,21902,21903,21905,21906,21907,21908,21911,21923,21924,21933,21938,21951,21953,21955,21958,21961,21963,21964,21966,21969,21970,21971,21975,21976,21979,21982,21986,21993,22006,22015,22021,22024,22026,22029,22030,22031,22032,22033,22034,22041,22060,22064,22067,22069,22071,22073,22075,22076,22077,22079,22080,22081,22083,22084,22086,22089,22091,22093,22095,22100,22110,22112,22113,22114,22115,22118,22121,22125,22127,22129,22130,22133,22148,22149,22152,22155,22156,22165,22169,22170,22173,22174,22175,22182,22183,22184,22185,22187,22188,22189,22193,22195,22199,22206,22213,22217,22218,22219,22223,22224,22220,22221,22233,22236,22237,22239,22241,22244,22245,22246,22247,22248,22257,22251,22253,22262,22263,22273,22274,22279,22282,22284,22289,22293,22298,22299,22301,22304,22306,22307,22308,22309,22313,22314,22316,22318,22319,22323,22324,22333,22334,22335,22341,22342,22348,22349,22354,22370,22373,22375,22376,22379,22381,22382,22383,22384,22385,22387,22388,22389,22391,22393,22394,22395,22396,22398,22401,22403,22412,22420,22423,22425,22426,22428,22429,22430,22431,22433,22421,22439,22440,22441,22444,22456,22461,22471,22472,22476,22479,22485,22493,22494,22500,22502,22503,22505,22509,22512,22517,22518,22520,22525,22526,22527,22531,22532,22536,22537,22497,22540,22541,22555,22558,22559,22560,22566,22567,22573,22578,22585,22591,22601,22604,22605,22607,22608,22613,22623,22625,22628,22631,22632,22648,22652,22655,22656,22657,22663,22664,22665,22666,22668,22669,22671,22672,22676,22678,22685,22688,22689,22690,22694,22697,22705,22706,22724,22716,22722,22728,22733,22734,22736,22738,22740,22742,22746,22749,22753,22754,22761,22771,22789,22790,22795,22796,22802,22803,22804,34369,22813,22817,22819,22820,22824,22831,22832,22835,22837,22838,22847,22851,22854,22866,22867,22873,22875,22877,22878,22879,22881,22883,22891,22893,22895,22898,22901,22902,22905,22907,22908,22923,22924,22926,22930,22933,22935,22943,22948,22951,22957,22958,22959,22960,22963,22967,22970,22972,22977,22979,22980,22984,22986,22989,22994,23005,23006,23007,23011,23012,23015,23022,23023,23025,23026,23028,23031,23040,23044,23052,23053,23054,23058,23059,23070,23075,23076,23079,23080,23082,23085,23088,23108,23109,23111,23112,23116,23120,23125,23134,23139,23141,23143,23149,23159,23162,23163,23166,23179,23184,23187,23190,23193,23196,23198,23199,23200,23202,23207,23212,23217,23218,23219,23221,23224,23226,23227,23231,23236,23238,23240,23247,23258,23260,23264,23269,23274,23278,23285,23286,23293,23296,23297,23304,23319,23348,23321,23323,23325,23329,23333,23341,23352,23361,23371,23372,23378,23382,23390,23400,23406,23407,23420,23421,23422,23423,23425,23428,23430,23434,23438,23440,23441,23443,23444,23446,23464,23465,23468,23469,23471,23473,23474,23479,23482,23484,23488,23489,23501,23503,23510,23511,23512,23513,23514,23520,23535,23537,23540,23549,23564,23575,23582,23583,23587,23590,23593,23595,23596,23598,23600,23602,23605,23606,23641,23642,23644,23650,23651,23655,23656,23657,23661,23664,23668,23669,23674,23675,23676,23677,23687,23688,23690,23695,23698,23709,23711,23712,23714,23715,23718,23722,23730,23732,23733,23738,23753,23755,23762,23773,23767,23790,23793,23794,23796,23809,23814,23821,23826,23851,23843,23844,23846,23847,23857,23860,23865,23869,23871,23874,23875,23878,23880,23893,23889,23897,23882,23903,23904,23905,23906,23908,23914,23917,23920,23929,23930,23934,23935,23937,23939,23944,23946,23954,23955,23956,23957,23961,23963,23967,23968,23975,23979,23984,23988,23992,23993,24003,24007,24011,24016,24014,24024,24025,24032,24036,24041,24056,24057,24064,24071,24077,24082,24084,24085,24088,24095,24096,24110,24104,24114,24117,24126,24139,24144,24137,24145,24150,24152,24155,24156,24158,24168,24170,24171,24172,24173,24174,24176,24192,24203,24206,24226,24228,24229,24232,24234,24236,24241,24243,24253,24254,24255,24262,24268,24267,24270,24273,24274,24276,24277,24284,24286,24293,24299,24322,24326,24327,24328,24334,24345,24348,24349,24353,24354,24355,24356,24360,24363,24364,24366,24368,24372,24374,24379,24381,24383,24384,24388,24389,24391,24397,24400,24404,24408,24411,24416,24419,24420,24423,24431,24434,24436,24437,24440,24442,24445,24446,24457,24461,24463,24470,24476,24477,24482,24487,24491,24484,24492,24495,24496,24497,24504,24516,24519,24520,24521,24523,24528,24529,24530,24531,24532,24542,24545,24546,24552,24553,24554,24556,24557,24558,24559,24562,24563,24566,24570,24572,24583,24586,24589,24595,24596,24599,24600,24602,24607,24612,24621,24627,24629,24640,24647,24648,24649,24652,24657,24660,24662,24663,24669,24673,24679,24689,24702,24703,24706,24710,24712,24714,24718,24721,24723,24725,24728,24733,24734,24738,24740,24741,24744,24752,24753,24759,24763,24766,24770,24772,24776,24777,24778,24779,24782,24783,24788,24789,24793,24795,24797,24798,24802,24805,24818,24821,24824,24828,24829,24834,24839,24842,24844,24848,24849,24850,24851,24852,24854,24855,24857,24860,24862,24866,24874,24875,24880,24881,24885,24886,24887,24889,24897,24901,24902,24905,24926,24928,24940,24946,24952,24955,24956,24959,24960,24961,24963,24964,24971,24973,24978,24979,24983,24984,24988,24989,24991,24992,24997,25e3,25002,25005,25016,25017,25020,25024,25025,25026,25038,25039,25045,25052,25053,25054,25055,25057,25058,25063,25065,25061,25068,25069,25071,25089,25091,25092,25095,25107,25109,25116,25120,25122,25123,25127,25129,25131,25145,25149,25154,25155,25156,25158,25164,25168,25169,25170,25172,25174,25178,25180,25188,25197,25199,25203,25210,25213,25229,25230,25231,25232,25254,25256,25267,25270,25271,25274,25278,25279,25284,25294,25301,25302,25306,25322,25330,25332,25340,25341,25347,25348,25354,25355,25357,25360,25363,25366,25368,25385,25386,25389,25397,25398,25401,25404,25409,25410,25411,25412,25414,25418,25419,25422,25426,25427,25428,25432,25435,25445,25446,25452,25453,25457,25460,25461,25464,25468,25469,25471,25474,25476,25479,25482,25488,25492,25493,25497,25498,25502,25508,25510,25517,25518,25519,25533,25537,25541,25544,25550,25553,25555,25556,25557,25564,25568,25573,25578,25580,25586,25587,25589,25592,25593,25609,25610,25616,25618,25620,25624,25630,25632,25634,25636,25637,25641,25642,25647,25648,25653,25661,25663,25675,25679,25681,25682,25683,25684,25690,25691,25692,25693,25695,25696,25697,25699,25709,25715,25716,25723,25725,25733,25735,25743,25744,25745,25752,25753,25755,25757,25759,25761,25763,25766,25768,25772,25779,25789,25790,25791,25796,25801,25802,25803,25804,25806,25808,25809,25813,25815,25828,25829,25833,25834,25837,25840,25845,25847,25851,25855,25857,25860,25864,25865,25866,25871,25875,25876,25878,25881,25883,25886,25887,25890,25894,25897,25902,25905,25914,25916,25917,25923,25927,25929,25936,25938,25940,25951,25952,25959,25963,25978,25981,25985,25989,25994,26002,26005,26008,26013,26016,26019,26022,26030,26034,26035,26036,26047,26050,26056,26057,26062,26064,26068,26070,26072,26079,26096,26098,26100,26101,26105,26110,26111,26112,26116,26120,26121,26125,26129,26130,26133,26134,26141,26142,26145,26146,26147,26148,26150,26153,26154,26155,26156,26158,26160,26161,26163,26169,26167,26176,26181,26182,26186,26188,26193,26190,26199,26200,26201,26203,26204,26208,26209,26363,26218,26219,26220,26238,26227,26229,26239,26231,26232,26233,26235,26240,26236,26251,26252,26253,26256,26258,26265,26266,26267,26268,26271,26272,26276,26285,26289,26290,26293,26299,26303,26304,26306,26307,26312,26316,26318,26319,26324,26331,26335,26344,26347,26348,26350,26362,26373,26375,26382,26387,26393,26396,26400,26402,26419,26430,26437,26439,26440,26444,26452,26453,26461,26470,26476,26478,26484,26486,26491,26497,26500,26510,26511,26513,26515,26518,26520,26521,26523,26544,26545,26546,26549,26555,26556,26557,26617,26560,26562,26563,26565,26568,26569,26578,26583,26585,26588,26593,26598,26608,26610,26614,26615,26706,26644,26649,26653,26655,26664,26663,26668,26669,26671,26672,26673,26675,26683,26687,26692,26693,26698,26700,26709,26711,26712,26715,26731,26734,26735,26736,26737,26738,26741,26745,26746,26747,26748,26754,26756,26758,26760,26774,26776,26778,26780,26785,26787,26789,26793,26794,26798,26802,26811,26821,26824,26828,26831,26832,26833,26835,26838,26841,26844,26845,26853,26856,26858,26859,26860,26861,26864,26865,26869,26870,26875,26876,26877,26886,26889,26890,26896,26897,26899,26902,26903,26929,26931,26933,26936,26939,26946,26949,26953,26958,26967,26971,26979,26980,26981,26982,26984,26985,26988,26992,26993,26994,27002,27003,27007,27008,27021,27026,27030,27032,27041,27045,27046,27048,27051,27053,27055,27063,27064,27066,27068,27077,27080,27089,27094,27095,27106,27109,27118,27119,27121,27123,27125,27134,27136,27137,27139,27151,27153,27157,27162,27165,27168,27172,27176,27184,27186,27188,27191,27195,27198,27199,27205,27206,27209,27210,27214,27216,27217,27218,27221,27222,27227,27236,27239,27242,27249,27251,27262,27265,27267,27270,27271,27273,27275,27281,27291,27293,27294,27295,27301,27307,27311,27312,27313,27316,27325,27326,27327,27334,27337,27336,27340,27344,27348,27349,27350,27356,27357,27364,27367,27372,27376,27377,27378,27388,27389,27394,27395,27398,27399,27401,27407,27408,27409,27415,27419,27422,27428,27432,27435,27436,27439,27445,27446,27451,27455,27462,27466,27469,27474,27478,27480,27485,27488,27495,27499,27502,27504,27509,27517,27518,27522,27525,27543,27547,27551,27552,27554,27555,27560,27561,27564,27565,27566,27568,27576,27577,27581,27582,27587,27588,27593,27596,27606,27610,27617,27619,27622,27623,27630,27633,27639,27641,27647,27650,27652,27653,27657,27661,27662,27664,27666,27673,27679,27686,27687,27688,27692,27694,27699,27701,27702,27706,27707,27711,27722,27723,27725,27727,27730,27732,27737,27739,27740,27755,27757,27759,27764,27766,27768,27769,27771,27781,27782,27783,27785,27796,27797,27799,27800,27804,27807,27824,27826,27828,27842,27846,27853,27855,27856,27857,27858,27860,27862,27866,27868,27872,27879,27881,27883,27884,27886,27890,27892,27908,27911,27914,27918,27919,27921,27923,27930,27942,27943,27944,27751,27950,27951,27953,27961,27964,27967,27991,27998,27999,28001,28005,28007,28015,28016,28028,28034,28039,28049,28050,28052,28054,28055,28056,28074,28076,28084,28087,28089,28093,28095,28100,28104,28106,28110,28111,28118,28123,28125,28127,28128,28130,28133,28137,28143,28144,28148,28150,28156,28160,28164,28190,28194,28199,28210,28214,28217,28219,28220,28228,28229,28232,28233,28235,28239,28241,28242,28243,28244,28247,28252,28253,28254,28258,28259,28264,28275,28283,28285,28301,28307,28313,28320,28327,28333,28334,28337,28339,28347,28351,28352,28353,28355,28359,28360,28362,28365,28366,28367,28395,28397,28398,28409,28411,28413,28420,28424,28426,28428,28429,28438,28440,28442,28443,28454,28457,28458,28463,28464,28467,28470,28475,28476,28461,28495,28497,28498,28499,28503,28505,28506,28509,28510,28513,28514,28520,28524,28541,28542,28547,28551,28552,28555,28556,28557,28560,28562,28563,28564,28566,28570,28575,28576,28581,28582,28583,28584,28590,28591,28592,28597,28598,28604,28613,28615,28616,28618,28634,28638,28648,28649,28656,28661,28665,28668,28669,28672,28677,28678,28679,28685,28695,28704,28707,28719,28724,28727,28729,28732,28739,28740,28744,28745,28746,28747,28756,28757,28765,28766,28750,28772,28773,28780,28782,28789,28790,28798,28801,28805,28806,28820,28821,28822,28823,28824,28827,28836,28843,28848,28849,28852,28855,28874,28881,28883,28884,28885,28886,28888,28892,28900,28922,28931,28932,28933,28934,28935,28939,28940,28943,28958,28960,28971,28973,28975,28976,28977,28984,28993,28997,28998,28999,29002,29003,29008,29010,29015,29018,29020,29022,29024,29032,29049,29056,29061,29063,29068,29074,29082,29083,29088,29090,29103,29104,29106,29107,29114,29119,29120,29121,29124,29131,29132,29139,29142,29145,29146,29148,29176,29182,29184,29191,29192,29193,29203,29207,29210,29213,29215,29220,29227,29231,29236,29240,29241,29249,29250,29251,29253,29262,29263,29264,29267,29269,29270,29274,29276,29278,29280,29283,29288,29291,29294,29295,29297,29303,29304,29307,29308,29311,29316,29321,29325,29326,29331,29339,29352,29357,29358,29361,29364,29374,29377,29383,29385,29388,29397,29398,29400,29407,29413,29427,29428,29434,29435,29438,29442,29444,29445,29447,29451,29453,29458,29459,29464,29465,29470,29474,29476,29479,29480,29484,29489,29490,29493,29498,29499,29501,29507,29517,29520,29522,29526,29528,29533,29534,29535,29536,29542,29543,29545,29547,29548,29550,29551,29553,29559,29561,29564,29568,29569,29571,29573,29574,29582,29584,29587,29589,29591,29592,29596,29598,29599,29600,29602,29605,29606,29610,29611,29613,29621,29623,29625,29628,29629,29631,29637,29638,29641,29643,29644,29647,29650,29651,29654,29657,29661,29665,29667,29670,29671,29673,29684,29685,29687,29689,29690,29691,29693,29695,29696,29697,29700,29703,29706,29713,29722,29723,29732,29734,29736,29737,29738,29739,29740,29741,29742,29743,29744,29745,29753,29760,29763,29764,29766,29767,29771,29773,29777,29778,29783,29789,29794,29798,29799,29800,29803,29805,29806,29809,29810,29824,29825,29829,29830,29831,29833,29839,29840,29841,29842,29848,29849,29850,29852,29855,29856,29857,29859,29862,29864,29865,29866,29867,29870,29871,29873,29874,29877,29881,29883,29887,29896,29897,29900,29904,29907,29912,29914,29915,29918,29919,29924,29928,29930,29931,29935,29940,29946,29947,29948,29951,29958,29970,29974,29975,29984,29985,29988,29991,29993,29994,29999,30006,30009,30013,30014,30015,30016,30019,30023,30024,30030,30032,30034,30039,30046,30047,30049,30063,30065,30073,30074,30075,30076,30077,30078,30081,30085,30096,30098,30099,30101,30105,30108,30114,30116,30132,30138,30143,30144,30145,30148,30150,30156,30158,30159,30167,30172,30175,30176,30177,30180,30183,30188,30190,30191,30193,30201,30208,30210,30211,30212,30215,30216,30218,30220,30223,30226,30227,30229,30230,30233,30235,30236,30237,30238,30243,30245,30246,30249,30253,30258,30259,30261,30264,30265,30266,30268,30282,30272,30273,30275,30276,30277,30281,30283,30293,30297,30303,30308,30309,30317,30318,30319,30321,30324,30337,30341,30348,30349,30357,30363,30364,30365,30367,30368,30370,30371,30372,30373,30374,30375,30376,30378,30381,30397,30401,30405,30409,30411,30412,30414,30420,30425,30432,30438,30440,30444,30448,30449,30454,30457,30460,30464,30470,30474,30478,30482,30484,30485,30487,30489,30490,30492,30498,30504,30509,30510,30511,30516,30517,30518,30521,30525,30526,30530,30533,30534,30538,30541,30542,30543,30546,30550,30551,30556,30558,30559,30560,30562,30564,30567,30570,30572,30576,30578,30579,30580,30586,30589,30592,30596,30604,30605,30612,30613,30614,30618,30623,30626,30631,30634,30638,30639,30641,30645,30654,30659,30665,30673,30674,30677,30681,30686,30687,30688,30692,30694,30698,30700,30704,30705,30708,30712,30715,30725,30726,30729,30733,30734,30737,30749,30753,30754,30755,30765,30766,30768,30773,30775,30787,30788,30791,30792,30796,30798,30802,30812,30814,30816,30817,30819,30820,30824,30826,30830,30842,30846,30858,30863,30868,30872,30881,30877,30878,30879,30884,30888,30892,30893,30896,30897,30898,30899,30907,30909,30911,30919,30920,30921,30924,30926,30930,30931,30933,30934,30948,30939,30943,30944,30945,30950,30954,30962,30963,30976,30966,30967,30970,30971,30975,30982,30988,30992,31002,31004,31006,31007,31008,31013,31015,31017,31021,31025,31028,31029,31035,31037,31039,31044,31045,31046,31050,31051,31055,31057,31060,31064,31067,31068,31079,31081,31083,31090,31097,31099,31100,31102,31115,31116,31121,31123,31124,31125,31126,31128,31131,31132,31137,31144,31145,31147,31151,31153,31156,31160,31163,31170,31172,31175,31176,31178,31183,31188,31190,31194,31197,31198,31200,31202,31205,31210,31211,31213,31217,31224,31228,31234,31235,31239,31241,31242,31244,31249,31253,31259,31262,31265,31271,31275,31277,31279,31280,31284,31285,31288,31289,31290,31300,31301,31303,31304,31308,31317,31318,31321,31324,31325,31327,31328,31333,31335,31338,31341,31349,31352,31358,31360,31362,31365,31366,31370,31371,31376,31377,31380,31390,31392,31395,31404,31411,31413,31417,31419,31420,31430,31433,31436,31438,31441,31451,31464,31465,31467,31468,31473,31476,31483,31485,31486,31495,31508,31519,31523,31527,31529,31530,31531,31533,31534,31535,31536,31537,31540,31549,31551,31552,31553,31559,31566,31573,31584,31588,31590,31593,31594,31597,31599,31602,31603,31607,31620,31625,31630,31632,31633,31638,31643,31646,31648,31653,31660,31663,31664,31666,31669,31670,31674,31675,31676,31677,31682,31685,31688,31690,31700,31702,31703,31705,31706,31707,31720,31722,31730,31732,31733,31736,31737,31738,31740,31742,31745,31746,31747,31748,31750,31753,31755,31756,31758,31759,31769,31771,31776,31781,31782,31784,31788,31793,31795,31796,31798,31801,31802,31814,31818,31829,31825,31826,31827,31833,31834,31835,31836,31837,31838,31841,31843,31847,31849,31853,31854,31856,31858,31865,31868,31869,31878,31879,31887,31892,31902,31904,31910,31920,31926,31927,31930,31931,31932,31935,31940,31943,31944,31945,31949,31951,31955,31956,31957,31959,31961,31962,31965,31974,31977,31979,31989,32003,32007,32008,32009,32015,32017,32018,32019,32022,32029,32030,32035,32038,32042,32045,32049,32060,32061,32062,32064,32065,32071,32072,32077,32081,32083,32087,32089,32090,32092,32093,32101,32103,32106,32112,32120,32122,32123,32127,32129,32130,32131,32133,32134,32136,32139,32140,32141,32145,32150,32151,32157,32158,32166,32167,32170,32179,32182,32183,32185,32194,32195,32196,32197,32198,32204,32205,32206,32215,32217,32256,32226,32229,32230,32234,32235,32237,32241,32245,32246,32249,32250,32264,32272,32273,32277,32279,32284,32285,32288,32295,32296,32300,32301,32303,32307,32310,32319,32324,32325,32327,32334,32336,32338,32344,32351,32353,32354,32357,32363,32366,32367,32371,32376,32382,32385,32390,32391,32394,32397,32401,32405,32408,32410,32413,32414,32572,32571,32573,32574,32575,32579,32580,32583,32591,32594,32595,32603,32604,32605,32609,32611,32612,32613,32614,32621,32625,32637,32638,32639,32640,32651,32653,32655,32656,32657,32662,32663,32668,32673,32674,32678,32682,32685,32692,32700,32703,32704,32707,32712,32718,32719,32731,32735,32739,32741,32744,32748,32750,32751,32754,32762,32765,32766,32767,32775,32776,32778,32781,32782,32783,32785,32787,32788,32790,32797,32798,32799,32800,32804,32806,32812,32814,32816,32820,32821,32823,32825,32826,32828,32830,32832,32836,32864,32868,32870,32877,32881,32885,32897,32904,32910,32924,32926,32934,32935,32939,32952,32953,32968,32973,32975,32978,32980,32981,32983,32984,32992,33005,33006,33008,33010,33011,33014,33017,33018,33022,33027,33035,33046,33047,33048,33052,33054,33056,33060,33063,33068,33072,33077,33082,33084,33093,33095,33098,33100,33106,33111,33120,33121,33127,33128,33129,33133,33135,33143,33153,33168,33156,33157,33158,33163,33166,33174,33176,33179,33182,33186,33198,33202,33204,33211,33227,33219,33221,33226,33230,33231,33237,33239,33243,33245,33246,33249,33252,33259,33260,33264,33265,33266,33269,33270,33272,33273,33277,33279,33280,33283,33295,33299,33300,33305,33306,33309,33313,33314,33320,33330,33332,33338,33347,33348,33349,33350,33355,33358,33359,33361,33366,33372,33376,33379,33383,33389,33396,33403,33405,33407,33408,33409,33411,33412,33415,33417,33418,33422,33425,33428,33430,33432,33434,33435,33440,33441,33443,33444,33447,33448,33449,33450,33454,33456,33458,33460,33463,33466,33468,33470,33471,33478,33488,33493,33498,33504,33506,33508,33512,33514,33517,33519,33526,33527,33533,33534,33536,33537,33543,33544,33546,33547,33620,33563,33565,33566,33567,33569,33570,33580,33581,33582,33584,33587,33591,33594,33596,33597,33602,33603,33604,33607,33613,33614,33617,33621,33622,33623,33648,33656,33661,33663,33664,33666,33668,33670,33677,33682,33684,33685,33688,33689,33691,33692,33693,33702,33703,33705,33708,33726,33727,33728,33735,33737,33743,33744,33745,33748,33757,33619,33768,33770,33782,33784,33785,33788,33793,33798,33802,33807,33809,33813,33817,33709,33839,33849,33861,33863,33864,33866,33869,33871,33873,33874,33878,33880,33881,33882,33884,33888,33892,33893,33895,33898,33904,33907,33908,33910,33912,33916,33917,33921,33925,33938,33939,33941,33950,33958,33960,33961,33962,33967,33969,33972,33978,33981,33982,33984,33986,33991,33992,33996,33999,34003,34012,34023,34026,34031,34032,34033,34034,34039,34098,34042,34043,34045,34050,34051,34055,34060,34062,34064,34076,34078,34082,34083,34084,34085,34087,34090,34091,34095,34099,34100,34102,34111,34118,34127,34128,34129,34130,34131,34134,34137,34140,34141,34142,34143,34144,34145,34146,34148,34155,34159,34169,34170,34171,34173,34175,34177,34181,34182,34185,34187,34188,34191,34195,34200,34205,34207,34208,34210,34213,34215,34228,34230,34231,34232,34236,34237,34238,34239,34242,34247,34250,34251,34254,34221,34264,34266,34271,34272,34278,34280,34285,34291,34294,34300,34303,34304,34308,34309,34317,34318,34320,34321,34322,34328,34329,34331,34334,34337,34343,34345,34358,34360,34362,34364,34365,34368,34370,34374,34386,34387,34390,34391,34392,34393,34397,34400,34401,34402,34403,34404,34409,34412,34415,34421,34422,34423,34426,34445,34449,34454,34456,34458,34460,34465,34470,34471,34472,34477,34481,34483,34484,34485,34487,34488,34489,34495,34496,34497,34499,34501,34513,34514,34517,34519,34522,34524,34528,34531,34533,34535,34440,34554,34556,34557,34564,34565,34567,34571,34574,34575,34576,34579,34580,34585,34590,34591,34593,34595,34600,34606,34607,34609,34610,34617,34618,34620,34621,34622,34624,34627,34629,34637,34648,34653,34657,34660,34661,34671,34673,34674,34683,34691,34692,34693,34694,34695,34696,34697,34699,34700,34704,34707,34709,34711,34712,34713,34718,34720,34723,34727,34732,34733,34734,34737,34741,34750,34751,34753,34760,34761,34762,34766,34773,34774,34777,34778,34780,34783,34786,34787,34788,34794,34795,34797,34801,34803,34808,34810,34815,34817,34819,34822,34825,34826,34827,34832,34841,34834,34835,34836,34840,34842,34843,34844,34846,34847,34856,34861,34862,34864,34866,34869,34874,34876,34881,34883,34885,34888,34889,34890,34891,34894,34897,34901,34902,34904,34906,34908,34911,34912,34916,34921,34929,34937,34939,34944,34968,34970,34971,34972,34975,34976,34984,34986,35002,35005,35006,35008,35018,35019,35020,35021,35022,35025,35026,35027,35035,35038,35047,35055,35056,35057,35061,35063,35073,35078,35085,35086,35087,35093,35094,35096,35097,35098,35100,35104,35110,35111,35112,35120,35121,35122,35125,35129,35130,35134,35136,35138,35141,35142,35145,35151,35154,35159,35162,35163,35164,35169,35170,35171,35179,35182,35184,35187,35189,35194,35195,35196,35197,35209,35213,35216,35220,35221,35227,35228,35231,35232,35237,35248,35252,35253,35254,35255,35260,35284,35285,35286,35287,35288,35301,35305,35307,35309,35313,35315,35318,35321,35325,35327,35332,35333,35335,35343,35345,35346,35348,35349,35358,35360,35362,35364,35366,35371,35372,35375,35381,35383,35389,35390,35392,35395,35397,35399,35401,35405,35406,35411,35414,35415,35416,35420,35421,35425,35429,35431,35445,35446,35447,35449,35450,35451,35454,35455,35456,35459,35462,35467,35471,35472,35474,35478,35479,35481,35487,35495,35497,35502,35503,35507,35510,35511,35515,35518,35523,35526,35528,35529,35530,35537,35539,35540,35541,35543,35549,35551,35564,35568,35572,35573,35574,35580,35583,35589,35590,35595,35601,35612,35614,35615,35594,35629,35632,35639,35644,35650,35651,35652,35653,35654,35656,35666,35667,35668,35673,35661,35678,35683,35693,35702,35704,35705,35708,35710,35713,35716,35717,35723,35725,35727,35732,35733,35740,35742,35743,35896,35897,35901,35902,35909,35911,35913,35915,35919,35921,35923,35924,35927,35928,35931,35933,35929,35939,35940,35942,35944,35945,35949,35955,35957,35958,35963,35966,35974,35975,35979,35984,35986,35987,35993,35995,35996,36004,36025,36026,36037,36038,36041,36043,36047,36054,36053,36057,36061,36065,36072,36076,36079,36080,36082,36085,36087,36088,36094,36095,36097,36099,36105,36114,36119,36123,36197,36201,36204,36206,36223,36226,36228,36232,36237,36240,36241,36245,36254,36255,36256,36262,36267,36268,36271,36274,36277,36279,36281,36283,36288,36293,36294,36295,36296,36298,36302,36305,36308,36309,36311,36313,36324,36325,36327,36332,36336,36284,36337,36338,36340,36349,36353,36356,36357,36358,36363,36369,36372,36374,36384,36385,36386,36387,36390,36391,36401,36403,36406,36407,36408,36409,36413,36416,36417,36427,36429,36430,36431,36436,36443,36444,36445,36446,36449,36450,36457,36460,36461,36463,36464,36465,36473,36474,36475,36482,36483,36489,36496,36498,36501,36506,36507,36509,36510,36514,36519,36521,36525,36526,36531,36533,36538,36539,36544,36545,36547,36548,36551,36559,36561,36564,36572,36584,36590,36592,36593,36599,36601,36602,36589,36608,36610,36615,36616,36623,36624,36630,36631,36632,36638,36640,36641,36643,36645,36647,36648,36652,36653,36654,36660,36661,36662,36663,36666,36672,36673,36675,36679,36687,36689,36690,36691,36692,36693,36696,36701,36702,36709,36765,36768,36769,36772,36773,36774,36789,36790,36792,36798,36800,36801,36806,36810,36811,36813,36816,36818,36819,36821,36832,36835,36836,36840,36846,36849,36853,36854,36859,36862,36866,36868,36872,36876,36888,36891,36904,36905,36911,36906,36908,36909,36915,36916,36919,36927,36931,36932,36940,36955,36957,36962,36966,36967,36972,36976,36980,36985,36997,37e3,37003,37004,37006,37008,37013,37015,37016,37017,37019,37024,37025,37026,37029,37040,37042,37043,37044,37046,37053,37068,37054,37059,37060,37061,37063,37064,37077,37079,37080,37081,37084,37085,37087,37093,37074,37110,37099,37103,37104,37108,37118,37119,37120,37124,37125,37126,37128,37133,37136,37140,37142,37143,37144,37146,37148,37150,37152,37157,37154,37155,37159,37161,37166,37167,37169,37172,37174,37175,37177,37178,37180,37181,37187,37191,37192,37199,37203,37207,37209,37210,37211,37217,37220,37223,37229,37236,37241,37242,37243,37249,37251,37253,37254,37258,37262,37265,37267,37268,37269,37272,37278,37281,37286,37288,37292,37293,37294,37296,37297,37298,37299,37302,37307,37308,37309,37311,37314,37315,37317,37331,37332,37335,37337,37338,37342,37348,37349,37353,37354,37356,37357,37358,37359,37360,37361,37367,37369,37371,37373,37376,37377,37380,37381,37382,37383,37385,37386,37388,37392,37394,37395,37398,37400,37404,37405,37411,37412,37413,37414,37416,37422,37423,37424,37427,37429,37430,37432,37433,37434,37436,37438,37440,37442,37443,37446,37447,37450,37453,37454,37455,37457,37464,37465,37468,37469,37472,37473,37477,37479,37480,37481,37486,37487,37488,37493,37494,37495,37496,37497,37499,37500,37501,37503,37512,37513,37514,37517,37518,37522,37527,37529,37535,37536,37540,37541,37543,37544,37547,37551,37554,37558,37560,37562,37563,37564,37565,37567,37568,37569,37570,37571,37573,37574,37575,37576,37579,37580,37581,37582,37584,37587,37589,37591,37592,37593,37596,37597,37599,37600,37601,37603,37605,37607,37608,37612,37614,37616,37625,37627,37631,37632,37634,37640,37645,37649,37652,37653,37660,37661,37662,37663,37665,37668,37669,37671,37673,37674,37683,37684,37686,37687,37703,37704,37705,37712,37713,37714,37717,37719,37720,37722,37726,37732,37733,37735,37737,37738,37741,37743,37744,37745,37747,37748,37750,37754,37757,37759,37760,37761,37762,37768,37770,37771,37773,37775,37778,37781,37784,37787,37790,37793,37795,37796,37798,37800,37803,37812,37813,37814,37818,37801,37825,37828,37829,37830,37831,37833,37834,37835,37836,37837,37843,37849,37852,37854,37855,37858,37862,37863,37881,37879,37880,37882,37883,37885,37889,37890,37892,37896,37897,37901,37902,37903,37909,37910,37911,37919,37934,37935,37937,37938,37939,37940,37947,37951,37949,37955,37957,37960,37962,37964,37973,37977,37980,37983,37985,37987,37992,37995,37997,37998,37999,38001,38002,38020,38019,38264,38265,38270,38276,38280,38284,38285,38286,38301,38302,38303,38305,38310,38313,38315,38316,38324,38326,38330,38333,38335,38342,38344,38345,38347,38352,38353,38354,38355,38361,38362,38365,38366,38367,38368,38372,38374,38429,38430,38434,38436,38437,38438,38444,38449,38451,38455,38456,38457,38458,38460,38461,38465,38482,38484,38486,38487,38488,38497,38510,38516,38523,38524,38526,38527,38529,38530,38531,38532,38537,38545,38550,38554,38557,38559,38564,38565,38566,38569,38574,38575,38579,38586,38602,38610,23986,38616,38618,38621,38622,38623,38633,38639,38641,38650,38658,38659,38661,38665,38682,38683,38685,38689,38690,38691,38696,38705,38707,38721,38723,38730,38734,38735,38741,38743,38744,38746,38747,38755,38759,38762,38766,38771,38774,38775,38776,38779,38781,38783,38784,38793,38805,38806,38807,38809,38810,38814,38815,38818,38828,38830,38833,38834,38837,38838,38840,38841,38842,38844,38846,38847,38849,38852,38853,38855,38857,38858,38860,38861,38862,38864,38865,38868,38871,38872,38873,38877,38878,38880,38875,38881,38884,38895,38897,38900,38903,38904,38906,38919,38922,38937,38925,38926,38932,38934,38940,38942,38944,38947,38950,38955,38958,38959,38960,38962,38963,38965,38949,38974,38980,38983,38986,38993,38994,38995,38998,38999,39001,39002,39010,39011,39013,39014,39018,39020,39083,39085,39086,39088,39092,39095,39096,39098,39099,39103,39106,39109,39112,39116,39137,39139,39141,39142,39143,39146,39155,39158,39170,39175,39176,39185,39189,39190,39191,39194,39195,39196,39199,39202,39206,39207,39211,39217,39218,39219,39220,39221,39225,39226,39227,39228,39232,39233,39238,39239,39240,39245,39246,39252,39256,39257,39259,39260,39262,39263,39264,39323,39325,39327,39334,39344,39345,39346,39349,39353,39354,39357,39359,39363,39369,39379,39380,39385,39386,39388,39390,39399,39402,39403,39404,39408,39412,39413,39417,39421,39422,39426,39427,39428,39435,39436,39440,39441,39446,39454,39456,39458,39459,39460,39463,39469,39470,39475,39477,39478,39480,39495,39489,39492,39498,39499,39500,39502,39505,39508,39510,39517,39594,39596,39598,39599,39602,39604,39605,39606,39609,39611,39614,39615,39617,39619,39622,39624,39630,39632,39634,39637,39638,39639,39643,39644,39648,39652,39653,39655,39657,39660,39666,39667,39669,39673,39674,39677,39679,39680,39681,39682,39683,39684,39685,39688,39689,39691,39692,39693,39694,39696,39698,39702,39705,39707,39708,39712,39718,39723,39725,39731,39732,39733,39735,39737,39738,39741,39752,39755,39756,39765,39766,39767,39771,39774,39777,39779,39781,39782,39784,39786,39787,39788,39789,39790,39795,39797,39799,39800,39801,39807,39808,39812,39813,39814,39815,39817,39818,39819,39821,39823,39824,39828,39834,39837,39838,39846,39847,39849,39852,39856,39857,39858,39863,39864,39867,39868,39870,39871,39873,39879,39880,39886,39888,39895,39896,39901,39903,39909,39911,39914,39915,39919,39923,39927,39928,39929,39930,39933,39935,39936,39938,39947,39951,39953,39958,39960,39961,39962,39964,39966,39970,39971,39974,39975,39976,39977,39978,39985,39989,39990,39991,39997,40001,40003,40004,40005,40009,40010,40014,40015,40016,40019,40020,40022,40024,40027,40029,40030,40031,40035,40041,40042,40028,40043,40040,40046,40048,40050,40053,40055,40059,40166,40178,40183,40185,40203,40194,40209,40215,40216,40220,40221,40222,40239,40240,40242,40243,40244,40250,40252,40261,40253,40258,40259,40263,40266,40275,40276,40287,40291,40290,40293,40297,40298,40299,40304,40310,40311,40315,40316,40318,40323,40324,40326,40330,40333,40334,40338,40339,40341,40342,40343,40344,40353,40362,40364,40366,40369,40373,40377,40380,40383,40387,40391,40393,40394,40404,40405,40406,40407,40410,40414,40415,40416,40421,40423,40425,40427,40430,40432,40435,40436,40446,40458,40450,40455,40462,40464,40465,40466,40469,40470,40473,40476,40477,40570,40571,40572,40576,40578,40579,40580,40581,40583,40590,40591,40598,40600,40603,40606,40612,40616,40620,40622,40623,40624,40627,40628,40629,40646,40648,40651,40661,40671,40676,40679,40684,40685,40686,40688,40689,40690,40693,40696,40703,40706,40707,40713,40719,40720,40721,40722,40724,40726,40727,40729,40730,40731,40735,40738,40742,40746,40747,40751,40753,40754,40756,40759,40761,40762,40764,40765,40767,40769,40771,40772,40773,40774,40775,40787,40789,40790,40791,40792,40794,40797,40798,40808,40809,40813,40814,40815,40816,40817,40819,40821,40826,40829,40847,40848,40849,40850,40852,40854,40855,40862,40865,40866,40867,40869,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],ibm866:[1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,9617,9618,9619,9474,9508,9569,9570,9558,9557,9571,9553,9559,9565,9564,9563,9488,9492,9524,9516,9500,9472,9532,9566,9567,9562,9556,9577,9574,9568,9552,9580,9575,9576,9572,9573,9561,9560,9554,9555,9579,9578,9496,9484,9608,9604,9612,9616,9600,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1025,1105,1028,1108,1031,1111,1038,1118,176,8729,183,8730,8470,164,9632,160],"iso-8859-2":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,260,728,321,164,317,346,167,168,352,350,356,377,173,381,379,176,261,731,322,180,318,347,711,184,353,351,357,378,733,382,380,340,193,194,258,196,313,262,199,268,201,280,203,282,205,206,270,272,323,327,211,212,336,214,215,344,366,218,368,220,221,354,223,341,225,226,259,228,314,263,231,269,233,281,235,283,237,238,271,273,324,328,243,244,337,246,247,345,367,250,369,252,253,355,729],"iso-8859-3":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,294,728,163,164,null,292,167,168,304,350,286,308,173,null,379,176,295,178,179,180,181,293,183,184,305,351,287,309,189,null,380,192,193,194,null,196,266,264,199,200,201,202,203,204,205,206,207,null,209,210,211,212,288,214,215,284,217,218,219,220,364,348,223,224,225,226,null,228,267,265,231,232,233,234,235,236,237,238,239,null,241,242,243,244,289,246,247,285,249,250,251,252,365,349,729],"iso-8859-4":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,260,312,342,164,296,315,167,168,352,274,290,358,173,381,175,176,261,731,343,180,297,316,711,184,353,275,291,359,330,382,331,256,193,194,195,196,197,198,302,268,201,280,203,278,205,206,298,272,325,332,310,212,213,214,215,216,370,218,219,220,360,362,223,257,225,226,227,228,229,230,303,269,233,281,235,279,237,238,299,273,326,333,311,244,245,246,247,248,371,250,251,252,361,363,729],"iso-8859-5":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,173,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,8470,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,167,1118,1119],"iso-8859-6":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,null,null,null,164,null,null,null,null,null,null,null,1548,173,null,null,null,null,null,null,null,null,null,null,null,null,null,1563,null,null,null,1567,null,1569,1570,1571,1572,1573,1574,1575,1576,1577,1578,1579,1580,1581,1582,1583,1584,1585,1586,1587,1588,1589,1590,1591,1592,1593,1594,null,null,null,null,null,1600,1601,1602,1603,1604,1605,1606,1607,1608,1609,1610,1611,1612,1613,1614,1615,1616,1617,1618,null,null,null,null,null,null,null,null,null,null,null,null,null],"iso-8859-7":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,8216,8217,163,8364,8367,166,167,168,169,890,171,172,173,null,8213,176,177,178,179,900,901,902,183,904,905,906,187,908,189,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,null,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,null],"iso-8859-8":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,null,162,163,164,165,166,167,168,169,215,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,247,187,188,189,190,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,8215,1488,1489,1490,1491,1492,1493,1494,1495,1496,1497,1498,1499,1500,1501,1502,1503,1504,1505,1506,1507,1508,1509,1510,1511,1512,1513,1514,null,null,8206,8207,null],"iso-8859-10":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,260,274,290,298,296,310,167,315,272,352,358,381,173,362,330,176,261,275,291,299,297,311,183,316,273,353,359,382,8213,363,331,256,193,194,195,196,197,198,302,268,201,280,203,278,205,206,207,208,325,332,211,212,213,214,360,216,370,218,219,220,221,222,223,257,225,226,227,228,229,230,303,269,233,281,235,279,237,238,239,240,326,333,243,244,245,246,361,248,371,250,251,252,253,254,312],"iso-8859-13":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,8221,162,163,164,8222,166,167,216,169,342,171,172,173,174,198,176,177,178,179,8220,181,182,183,248,185,343,187,188,189,190,230,260,302,256,262,196,197,280,274,268,201,377,278,290,310,298,315,352,323,325,211,332,213,214,215,370,321,346,362,220,379,381,223,261,303,257,263,228,229,281,275,269,233,378,279,291,311,299,316,353,324,326,243,333,245,246,247,371,322,347,363,252,380,382,8217],"iso-8859-14":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,7682,7683,163,266,267,7690,167,7808,169,7810,7691,7922,173,174,376,7710,7711,288,289,7744,7745,182,7766,7809,7767,7811,7776,7923,7812,7813,7777,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,372,209,210,211,212,213,214,7786,216,217,218,219,220,221,374,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,373,241,242,243,244,245,246,7787,248,249,250,251,252,253,375,255],"iso-8859-15":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,8364,165,352,167,353,169,170,171,172,173,174,175,176,177,178,179,381,181,182,183,382,185,186,187,338,339,376,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255],"iso-8859-16":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,260,261,321,8364,8222,352,167,353,169,536,171,377,173,378,379,176,177,268,322,381,8221,182,183,382,269,537,187,338,339,376,380,192,193,194,258,196,262,198,199,200,201,202,203,204,205,206,207,272,323,210,211,212,336,214,346,368,217,218,219,220,280,538,223,224,225,226,259,228,263,230,231,232,233,234,235,236,237,238,239,273,324,242,243,244,337,246,347,369,249,250,251,252,281,539,255],"koi8-r":[9472,9474,9484,9488,9492,9496,9500,9508,9516,9524,9532,9600,9604,9608,9612,9616,9617,9618,9619,8992,9632,8729,8730,8776,8804,8805,160,8993,176,178,183,247,9552,9553,9554,1105,9555,9556,9557,9558,9559,9560,9561,9562,9563,9564,9565,9566,9567,9568,9569,1025,9570,9571,9572,9573,9574,9575,9576,9577,9578,9579,9580,169,1102,1072,1073,1094,1076,1077,1092,1075,1093,1080,1081,1082,1083,1084,1085,1086,1087,1103,1088,1089,1090,1091,1078,1074,1100,1099,1079,1096,1101,1097,1095,1098,1070,1040,1041,1062,1044,1045,1060,1043,1061,1048,1049,1050,1051,1052,1053,1054,1055,1071,1056,1057,1058,1059,1046,1042,1068,1067,1047,1064,1069,1065,1063,1066],"koi8-u":[9472,9474,9484,9488,9492,9496,9500,9508,9516,9524,9532,9600,9604,9608,9612,9616,9617,9618,9619,8992,9632,8729,8730,8776,8804,8805,160,8993,176,178,183,247,9552,9553,9554,1105,1108,9556,1110,1111,9559,9560,9561,9562,9563,1169,1118,9566,9567,9568,9569,1025,1028,9571,1030,1031,9574,9575,9576,9577,9578,1168,1038,169,1102,1072,1073,1094,1076,1077,1092,1075,1093,1080,1081,1082,1083,1084,1085,1086,1087,1103,1088,1089,1090,1091,1078,1074,1100,1099,1079,1096,1101,1097,1095,1098,1070,1040,1041,1062,1044,1045,1060,1043,1061,1048,1049,1050,1051,1052,1053,1054,1055,1071,1056,1057,1058,1059,1046,1042,1068,1067,1047,1064,1069,1065,1063,1066],macintosh:[196,197,199,201,209,214,220,225,224,226,228,227,229,231,233,232,234,235,237,236,238,239,241,243,242,244,246,245,250,249,251,252,8224,176,162,163,167,8226,182,223,174,169,8482,180,168,8800,198,216,8734,177,8804,8805,165,181,8706,8721,8719,960,8747,170,186,937,230,248,191,161,172,8730,402,8776,8710,171,187,8230,160,192,195,213,338,339,8211,8212,8220,8221,8216,8217,247,9674,255,376,8260,8364,8249,8250,64257,64258,8225,183,8218,8222,8240,194,202,193,203,200,205,206,207,204,211,212,63743,210,218,219,217,305,710,732,175,728,729,730,184,733,731,711],"windows-874":[8364,129,130,131,132,8230,134,135,136,137,138,139,140,141,142,143,144,8216,8217,8220,8221,8226,8211,8212,152,153,154,155,156,157,158,159,160,3585,3586,3587,3588,3589,3590,3591,3592,3593,3594,3595,3596,3597,3598,3599,3600,3601,3602,3603,3604,3605,3606,3607,3608,3609,3610,3611,3612,3613,3614,3615,3616,3617,3618,3619,3620,3621,3622,3623,3624,3625,3626,3627,3628,3629,3630,3631,3632,3633,3634,3635,3636,3637,3638,3639,3640,3641,3642,null,null,null,null,3647,3648,3649,3650,3651,3652,3653,3654,3655,3656,3657,3658,3659,3660,3661,3662,3663,3664,3665,3666,3667,3668,3669,3670,3671,3672,3673,3674,3675,null,null,null,null],"windows-1250":[8364,129,8218,131,8222,8230,8224,8225,136,8240,352,8249,346,356,381,377,144,8216,8217,8220,8221,8226,8211,8212,152,8482,353,8250,347,357,382,378,160,711,728,321,164,260,166,167,168,169,350,171,172,173,174,379,176,177,731,322,180,181,182,183,184,261,351,187,317,733,318,380,340,193,194,258,196,313,262,199,268,201,280,203,282,205,206,270,272,323,327,211,212,336,214,215,344,366,218,368,220,221,354,223,341,225,226,259,228,314,263,231,269,233,281,235,283,237,238,271,273,324,328,243,244,337,246,247,345,367,250,369,252,253,355,729],"windows-1251":[1026,1027,8218,1107,8222,8230,8224,8225,8364,8240,1033,8249,1034,1036,1035,1039,1106,8216,8217,8220,8221,8226,8211,8212,152,8482,1113,8250,1114,1116,1115,1119,160,1038,1118,1032,164,1168,166,167,1025,169,1028,171,172,173,174,1031,176,177,1030,1110,1169,181,182,183,1105,8470,1108,187,1112,1029,1109,1111,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103],"windows-1252":[8364,129,8218,402,8222,8230,8224,8225,710,8240,352,8249,338,141,381,143,144,8216,8217,8220,8221,8226,8211,8212,732,8482,353,8250,339,157,382,376,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255],"windows-1253":[8364,129,8218,402,8222,8230,8224,8225,136,8240,138,8249,140,141,142,143,144,8216,8217,8220,8221,8226,8211,8212,152,8482,154,8250,156,157,158,159,160,901,902,163,164,165,166,167,168,169,null,171,172,173,174,8213,176,177,178,179,900,181,182,183,904,905,906,187,908,189,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,null,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,null],"windows-1254":[8364,129,8218,402,8222,8230,8224,8225,710,8240,352,8249,338,141,142,143,144,8216,8217,8220,8221,8226,8211,8212,732,8482,353,8250,339,157,158,376,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,286,209,210,211,212,213,214,215,216,217,218,219,220,304,350,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,287,241,242,243,244,245,246,247,248,249,250,251,252,305,351,255],"windows-1255":[8364,129,8218,402,8222,8230,8224,8225,710,8240,138,8249,140,141,142,143,144,8216,8217,8220,8221,8226,8211,8212,732,8482,154,8250,156,157,158,159,160,161,162,163,8362,165,166,167,168,169,215,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,247,187,188,189,190,191,1456,1457,1458,1459,1460,1461,1462,1463,1464,1465,1466,1467,1468,1469,1470,1471,1472,1473,1474,1475,1520,1521,1522,1523,1524,null,null,null,null,null,null,null,1488,1489,1490,1491,1492,1493,1494,1495,1496,1497,1498,1499,1500,1501,1502,1503,1504,1505,1506,1507,1508,1509,1510,1511,1512,1513,1514,null,null,8206,8207,null],"windows-1256":[8364,1662,8218,402,8222,8230,8224,8225,710,8240,1657,8249,338,1670,1688,1672,1711,8216,8217,8220,8221,8226,8211,8212,1705,8482,1681,8250,339,8204,8205,1722,160,1548,162,163,164,165,166,167,168,169,1726,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,1563,187,188,189,190,1567,1729,1569,1570,1571,1572,1573,1574,1575,1576,1577,1578,1579,1580,1581,1582,1583,1584,1585,1586,1587,1588,1589,1590,215,1591,1592,1593,1594,1600,1601,1602,1603,224,1604,226,1605,1606,1607,1608,231,232,233,234,235,1609,1610,238,239,1611,1612,1613,1614,244,1615,1616,247,1617,249,1618,251,252,8206,8207,1746],"windows-1257":[8364,129,8218,131,8222,8230,8224,8225,136,8240,138,8249,140,168,711,184,144,8216,8217,8220,8221,8226,8211,8212,152,8482,154,8250,156,175,731,159,160,null,162,163,164,null,166,167,216,169,342,171,172,173,174,198,176,177,178,179,180,181,182,183,248,185,343,187,188,189,190,230,260,302,256,262,196,197,280,274,268,201,377,278,290,310,298,315,352,323,325,211,332,213,214,215,370,321,346,362,220,379,381,223,261,303,257,263,228,229,281,275,269,233,378,279,291,311,299,316,353,324,326,243,333,245,246,247,371,322,347,363,252,380,382,729],"windows-1258":[8364,129,8218,402,8222,8230,8224,8225,710,8240,138,8249,338,141,142,143,144,8216,8217,8220,8221,8226,8211,8212,732,8482,154,8250,339,157,158,376,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,258,196,197,198,199,200,201,202,203,768,205,206,207,272,209,777,211,212,416,214,215,216,217,218,219,220,431,771,223,224,225,226,259,228,229,230,231,232,233,234,235,769,237,238,239,273,241,803,243,244,417,246,247,248,249,250,251,252,432,8363,255],"x-mac-cyrillic":[1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,8224,176,1168,163,167,8226,182,1030,174,169,8482,1026,1106,8800,1027,1107,8734,177,8804,8805,1110,181,1169,1032,1028,1108,1031,1111,1033,1113,1034,1114,1112,1029,172,8730,402,8776,8710,171,187,8230,160,1035,1115,1036,1116,1109,8211,8212,8220,8221,8216,8217,247,8222,1038,1118,1039,1119,8470,1025,1105,1103,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,8364]}}(this||{})},{}],86:[function(n,l,e){!function(e){function t(n,l,e){return l<=n&&n<=e}void 0!==l&&l.exports&&!e["encoding-indexes"]&&(e["encoding-indexes"]=n("./encoding-indexes.js")["encoding-indexes"]);var u=Math.floor;function r(n){if(void 0===n)return{};if(n===Object(n))return n;throw TypeError("Could not convert argument to dictionary")}function o(n){return 0<=n&&n<=127}var i=o,s=-1;function a(n){this.tokens=[].slice.call(n),this.tokens.reverse()}a.prototype={endOfStream:function(){return!this.tokens.length},read:function(){return this.tokens.length?this.tokens.pop():s},prepend:function(n){if(Array.isArray(n))for(var l=n;l.length;)this.tokens.push(l.pop());else this.tokens.push(n)},push:function(n){if(Array.isArray(n))for(var l=n;l.length;)this.tokens.unshift(l.shift());else this.tokens.unshift(n)}};var c=-1;function d(n,l){if(n)throw TypeError("Decoder error");return l||65533}function h(n){throw TypeError("The code point "+n+" could not be encoded.")}function f(n){return n=String(n).trim().toLowerCase(),Object.prototype.hasOwnProperty.call(m,n)?m[n]:null}var p=[{encodings:[{labels:["unicode-1-1-utf-8","utf-8","utf8"],name:"UTF-8"}],heading:"The Encoding"},{encodings:[{labels:["866","cp866","csibm866","ibm866"],name:"IBM866"},{labels:["csisolatin2","iso-8859-2","iso-ir-101","iso8859-2","iso88592","iso_8859-2","iso_8859-2:1987","l2","latin2"],name:"ISO-8859-2"},{labels:["csisolatin3","iso-8859-3","iso-ir-109","iso8859-3","iso88593","iso_8859-3","iso_8859-3:1988","l3","latin3"],name:"ISO-8859-3"},{labels:["csisolatin4","iso-8859-4","iso-ir-110","iso8859-4","iso88594","iso_8859-4","iso_8859-4:1988","l4","latin4"],name:"ISO-8859-4"},{labels:["csisolatincyrillic","cyrillic","iso-8859-5","iso-ir-144","iso8859-5","iso88595","iso_8859-5","iso_8859-5:1988"],name:"ISO-8859-5"},{labels:["arabic","asmo-708","csiso88596e","csiso88596i","csisolatinarabic","ecma-114","iso-8859-6","iso-8859-6-e","iso-8859-6-i","iso-ir-127","iso8859-6","iso88596","iso_8859-6","iso_8859-6:1987"],name:"ISO-8859-6"},{labels:["csisolatingreek","ecma-118","elot_928","greek","greek8","iso-8859-7","iso-ir-126","iso8859-7","iso88597","iso_8859-7","iso_8859-7:1987","sun_eu_greek"],name:"ISO-8859-7"},{labels:["csiso88598e","csisolatinhebrew","hebrew","iso-8859-8","iso-8859-8-e","iso-ir-138","iso8859-8","iso88598","iso_8859-8","iso_8859-8:1988","visual"],name:"ISO-8859-8"},{labels:["csiso88598i","iso-8859-8-i","logical"],name:"ISO-8859-8-I"},{labels:["csisolatin6","iso-8859-10","iso-ir-157","iso8859-10","iso885910","l6","latin6"],name:"ISO-8859-10"},{labels:["iso-8859-13","iso8859-13","iso885913"],name:"ISO-8859-13"},{labels:["iso-8859-14","iso8859-14","iso885914"],name:"ISO-8859-14"},{labels:["csisolatin9","iso-8859-15","iso8859-15","iso885915","iso_8859-15","l9"],name:"ISO-8859-15"},{labels:["iso-8859-16"],name:"ISO-8859-16"},{labels:["cskoi8r","koi","koi8","koi8-r","koi8_r"],name:"KOI8-R"},{labels:["koi8-ru","koi8-u"],name:"KOI8-U"},{labels:["csmacintosh","mac","macintosh","x-mac-roman"],name:"macintosh"},{labels:["dos-874","iso-8859-11","iso8859-11","iso885911","tis-620","windows-874"],name:"windows-874"},{labels:["cp1250","windows-1250","x-cp1250"],name:"windows-1250"},{labels:["cp1251","windows-1251","x-cp1251"],name:"windows-1251"},{labels:["ansi_x3.4-1968","ascii","cp1252","cp819","csisolatin1","ibm819","iso-8859-1","iso-ir-100","iso8859-1","iso88591","iso_8859-1","iso_8859-1:1987","l1","latin1","us-ascii","windows-1252","x-cp1252"],name:"windows-1252"},{labels:["cp1253","windows-1253","x-cp1253"],name:"windows-1253"},{labels:["cp1254","csisolatin5","iso-8859-9","iso-ir-148","iso8859-9","iso88599","iso_8859-9","iso_8859-9:1989","l5","latin5","windows-1254","x-cp1254"],name:"windows-1254"},{labels:["cp1255","windows-1255","x-cp1255"],name:"windows-1255"},{labels:["cp1256","windows-1256","x-cp1256"],name:"windows-1256"},{labels:["cp1257","windows-1257","x-cp1257"],name:"windows-1257"},{labels:["cp1258","windows-1258","x-cp1258"],name:"windows-1258"},{labels:["x-mac-cyrillic","x-mac-ukrainian"],name:"x-mac-cyrillic"}],heading:"Legacy single-byte encodings"},{encodings:[{labels:["chinese","csgb2312","csiso58gb231280","gb2312","gb_2312","gb_2312-80","gbk","iso-ir-58","x-gbk"],name:"GBK"},{labels:["gb18030"],name:"gb18030"}],heading:"Legacy multi-byte Chinese (simplified) encodings"},{encodings:[{labels:["big5","big5-hkscs","cn-big5","csbig5","x-x-big5"],name:"Big5"}],heading:"Legacy multi-byte Chinese (traditional) encodings"},{encodings:[{labels:["cseucpkdfmtjapanese","euc-jp","x-euc-jp"],name:"EUC-JP"},{labels:["csiso2022jp","iso-2022-jp"],name:"ISO-2022-JP"},{labels:["csshiftjis","ms932","ms_kanji","shift-jis","shift_jis","sjis","windows-31j","x-sjis"],name:"Shift_JIS"}],heading:"Legacy multi-byte Japanese encodings"},{encodings:[{labels:["cseuckr","csksc56011987","euc-kr","iso-ir-149","korean","ks_c_5601-1987","ks_c_5601-1989","ksc5601","ksc_5601","windows-949"],name:"EUC-KR"}],heading:"Legacy multi-byte Korean encodings"},{encodings:[{labels:["csiso2022kr","hz-gb-2312","iso-2022-cn","iso-2022-cn-ext","iso-2022-kr"],name:"replacement"},{labels:["utf-16be"],name:"UTF-16BE"},{labels:["utf-16","utf-16le"],name:"UTF-16LE"},{labels:["x-user-defined"],name:"x-user-defined"}],heading:"Legacy miscellaneous encodings"}],m={};p.forEach((function(n){n.encodings.forEach((function(n){n.labels.forEach((function(l){m[l]=n}))}))}));var g,y,v={},w={};function b(n,l){return l&&l[n]||null}function S(n,l){var e=l.indexOf(n);return-1===e?null:e}function C(n){if(!("encoding-indexes"in e))throw Error("Indexes missing. Did you forget to include encoding-indexes.js first?");return e["encoding-indexes"][n]}var D="utf-8";function E(n,l){if(!(this instanceof E))throw TypeError("Called as a function. Did you forget 'new'?");n=void 0!==n?String(n):D,l=r(l),this._encoding=null,this._decoder=null,this._ignoreBOM=!1,this._BOMseen=!1,this._error_mode="replacement",this._do_not_flush=!1;var e=f(n);if(null===e||"replacement"===e.name)throw RangeError("Unknown encoding: "+n);if(!w[e.name])throw Error("Decoder not present. Did you forget to include encoding-indexes.js first?");var t=this;return t._encoding=e,Boolean(l.fatal)&&(t._error_mode="fatal"),Boolean(l.ignoreBOM)&&(t._ignoreBOM=!0),Object.defineProperty||(this.encoding=t._encoding.name.toLowerCase(),this.fatal="fatal"===t._error_mode,this.ignoreBOM=t._ignoreBOM),t}function _(n,l){if(!(this instanceof _))throw TypeError("Called as a function. Did you forget 'new'?");l=r(l),this._encoding=null,this._encoder=null,this._do_not_flush=!1,this._fatal=Boolean(l.fatal)?"fatal":"replacement";var t=this;if(Boolean(l.NONSTANDARD_allowLegacyEncoding)){var u=f(n=void 0!==n?String(n):D);if(null===u||"replacement"===u.name)throw RangeError("Unknown encoding: "+n);if(!v[u.name])throw Error("Encoder not present. Did you forget to include encoding-indexes.js first?");t._encoding=u}else t._encoding=f("utf-8"),void 0!==n&&"console"in e&&console.warn("TextEncoder constructor called with encoding label, which is ignored.");return Object.defineProperty||(this.encoding=t._encoding.name.toLowerCase()),t}function k(n){var l=n.fatal,e=0,u=0,r=0,o=128,i=191;this.handler=function(n,a){if(a===s&&0!==r)return r=0,d(l);if(a===s)return c;if(0===r){if(t(a,0,127))return a;if(t(a,194,223))r=1,e=31&a;else if(t(a,224,239))224===a&&(o=160),237===a&&(i=159),r=2,e=15&a;else{if(!t(a,240,244))return d(l);240===a&&(o=144),244===a&&(i=143),r=3,e=7&a}return null}if(!t(a,o,i))return e=r=u=0,o=128,i=191,n.prepend(a),d(l);if(o=128,i=191,e=e<<6|63&a,(u+=1)!==r)return null;var h=e;return e=r=u=0,h}}function x(n){n.fatal,this.handler=function(n,l){if(l===s)return c;if(i(l))return l;var e,u;t(l,128,2047)?(e=1,u=192):t(l,2048,65535)?(e=2,u=224):t(l,65536,1114111)&&(e=3,u=240);for(var r=[(l>>6*e)+u];e>0;){var o=l>>6*(e-1);r.push(128|63&o),e-=1}return r}}function T(n,l){var e=l.fatal;this.handler=function(l,t){if(t===s)return c;if(o(t))return t;var u=n[t-128];return null===u?d(e):u}}function P(n,l){l.fatal,this.handler=function(l,e){if(e===s)return c;if(i(e))return e;var t=S(e,n);return null===t&&h(e),t+128}}function I(n){var l=n.fatal,e=0,u=0,r=0;this.handler=function(n,i){if(i===s&&0===e&&0===u&&0===r)return c;var a;if(i!==s||0===e&&0===u&&0===r||(e=0,u=0,r=0,d(l)),0!==r){a=null,t(i,48,57)&&(a=function(n){if(n>39419&&n<189e3||n>1237575)return null;if(7457===n)return 59335;var l,e=0,t=0,u=C("gb18030-ranges");for(l=0;l<u.length;++l){var r=u[l];if(!(r[0]<=n))break;e=r[0],t=r[1]}return t+n-e}(10*(126*(10*(e-129)+u-48)+r-129)+i-48));var h=[u,r,i];return e=0,u=0,r=0,null===a?(n.prepend(h),d(l)):a}if(0!==u)return t(i,129,254)?(r=i,null):(n.prepend([u,i]),e=0,u=0,d(l));if(0!==e){if(t(i,48,57))return u=i,null;var f=e,p=null;e=0;var m=i<127?64:65;return(t(i,64,126)||t(i,128,254))&&(p=190*(f-129)+(i-m)),null===(a=null===p?null:b(p,C("gb18030")))&&o(i)&&n.prepend(i),null===a?d(l):a}return o(i)?i:128===i?8364:t(i,129,254)?(e=i,null):d(l)}}function A(n,l){n.fatal,this.handler=function(n,e){if(e===s)return c;if(i(e))return e;if(58853===e)return h(e);if(l&&8364===e)return 128;var t=S(e,C("gb18030"));if(null!==t){var r=t%190;return[u(t/190)+129,r+(r<63?64:65)]}if(l)return h(e);t=function(n){if(59335===n)return 7457;var l,e=0,t=0,u=C("gb18030-ranges");for(l=0;l<u.length;++l){var r=u[l];if(!(r[1]<=n))break;e=r[1],t=r[0]}return t+n-e}(e);var o=u(t/10/126/10),a=u((t-=10*o*126*10)/10/126),d=u((t-=10*a*126)/10);return[o+129,a+48,d+129,t-10*d+48]}}function O(n){var l=n.fatal,e=0;this.handler=function(n,u){if(u===s&&0!==e)return e=0,d(l);if(u===s&&0===e)return c;if(0!==e){var r=e,i=null;e=0;var a=u<127?64:98;switch((t(u,64,126)||t(u,161,254))&&(i=157*(r-129)+(u-a)),i){case 1133:return[202,772];case 1135:return[202,780];case 1164:return[234,772];case 1166:return[234,780]}var h=null===i?null:b(i,C("big5"));return null===h&&o(u)&&n.prepend(u),null===h?d(l):h}return o(u)?u:t(u,129,254)?(e=u,null):d(l)}}function R(n){n.fatal,this.handler=function(n,l){if(l===s)return c;if(i(l))return l;var e=function(n){y=y||C("big5").map((function(n,l){return l<5024?null:n}));var l=y;return 9552===n||9566===n||9569===n||9578===n||21313===n||21317===n?l.lastIndexOf(n):S(n,l)}(l);if(null===e)return h(l);var t=u(e/157)+129;if(t<161)return h(l);var r=e%157;return[t,r+(r<63?64:98)]}}function F(n){var l=n.fatal,e=!1,u=0;this.handler=function(n,r){if(r===s&&0!==u)return u=0,d(l);if(r===s&&0===u)return c;if(142===u&&t(r,161,223))return u=0,65216+r;if(143===u&&t(r,161,254))return e=!0,u=r,null;if(0!==u){var i=u;u=0;var a=null;return t(i,161,254)&&t(r,161,254)&&(a=b(94*(i-161)+(r-161),C(e?"jis0212":"jis0208"))),e=!1,t(r,161,254)||n.prepend(r),null===a?d(l):a}return o(r)?r:142===r||143===r||t(r,161,254)?(u=r,null):d(l)}}function L(n){n.fatal,this.handler=function(n,l){if(l===s)return c;if(i(l))return l;if(165===l)return 92;if(8254===l)return 126;if(t(l,65377,65439))return[142,l-65377+161];8722===l&&(l=65293);var e=S(l,C("jis0208"));return null===e?h(l):[u(e/94)+161,e%94+161]}}function $(n){var l=n.fatal,e=0,u=0,r=!1;this.handler=function(n,o){switch(e){default:case 0:return 27===o?(e=5,null):t(o,0,127)&&14!==o&&15!==o&&27!==o?(r=!1,o):o===s?c:(r=!1,d(l));case 1:return 27===o?(e=5,null):92===o?(r=!1,165):126===o?(r=!1,8254):t(o,0,127)&&14!==o&&15!==o&&27!==o&&92!==o&&126!==o?(r=!1,o):o===s?c:(r=!1,d(l));case 2:return 27===o?(e=5,null):t(o,33,95)?(r=!1,65344+o):o===s?c:(r=!1,d(l));case 3:return 27===o?(e=5,null):t(o,33,126)?(r=!1,u=o,e=4,null):o===s?c:(r=!1,d(l));case 4:if(27===o)return e=5,d(l);if(t(o,33,126)){e=3;var i=b(94*(u-33)+o-33,C("jis0208"));return null===i?d(l):i}return o===s?(e=3,n.prepend(o),d(l)):(e=3,d(l));case 5:return 36===o||40===o?(u=o,e=6,null):(n.prepend(o),r=!1,e=0,d(l));case 6:var a=u;u=0;var h=null;if(40===a&&66===o&&(h=0),40===a&&74===o&&(h=1),40===a&&73===o&&(h=2),36!==a||64!==o&&66!==o||(h=3),null!==h){e=e=h;var f=r;return r=!0,f?d(l):null}return n.prepend([a,o]),r=!1,e=0,d(l)}}}function j(n){n.fatal;var l=0;this.handler=function(n,e){if(e===s&&0!==l)return n.prepend(e),l=0,[27,40,66];if(e===s&&0===l)return c;if(!(0!==l&&1!==l||14!==e&&15!==e&&27!==e))return h(65533);if(0===l&&i(e))return e;if(1===l&&(i(e)&&92!==e&&126!==e||165==e||8254==e)){if(i(e))return e;if(165===e)return 92;if(8254===e)return 126}if(i(e)&&0!==l)return n.prepend(e),l=0,[27,40,66];if((165===e||8254===e)&&1!==l)return n.prepend(e),l=1,[27,40,74];8722===e&&(e=65293);var t=S(e,C("jis0208"));return null===t?h(e):2!==l?(n.prepend(e),l=2,[27,36,66]):[u(t/94)+33,t%94+33]}}function M(n){var l=n.fatal,e=0;this.handler=function(n,u){if(u===s&&0!==e)return e=0,d(l);if(u===s&&0===e)return c;if(0!==e){var r=e,i=null;e=0;var a=u<127?64:65,h=r<160?129:193;if((t(u,64,126)||t(u,128,252))&&(i=188*(r-h)+u-a),t(i,8836,10715))return 48508+i;var f=null===i?null:b(i,C("jis0208"));return null===f&&o(u)&&n.prepend(u),null===f?d(l):f}return o(u)||128===u?u:t(u,161,223)?65216+u:t(u,129,159)||t(u,224,252)?(e=u,null):d(l)}}function N(n){n.fatal,this.handler=function(n,l){if(l===s)return c;if(i(l)||128===l)return l;if(165===l)return 92;if(8254===l)return 126;if(t(l,65377,65439))return l-65377+161;8722===l&&(l=65293);var e=function(n){return g=g||C("jis0208").map((function(n,l){return t(l,8272,8835)?null:n})),g.indexOf(n)}(l);if(null===e)return h(l);var r=u(e/188),o=e%188;return[r+(r<31?129:193),o+(o<63?64:65)]}}function B(n){var l=n.fatal,e=0;this.handler=function(n,u){if(u===s&&0!==e)return e=0,d(l);if(u===s&&0===e)return c;if(0!==e){var r=e,i=null;e=0,t(u,65,254)&&(i=190*(r-129)+(u-65));var a=null===i?null:b(i,C("euc-kr"));return null===i&&o(u)&&n.prepend(u),null===a?d(l):a}return o(u)?u:t(u,129,254)?(e=u,null):d(l)}}function H(n){n.fatal,this.handler=function(n,l){if(l===s)return c;if(i(l))return l;var e=S(l,C("euc-kr"));return null===e?h(l):[u(e/190)+129,e%190+65]}}function U(n,l){var e=n>>8,t=255&n;return l?[e,t]:[t,e]}function q(n,l){var e=l.fatal,u=null,r=null;this.handler=function(l,o){if(o===s&&(null!==u||null!==r))return d(e);if(o===s&&null===u&&null===r)return c;if(null===u)return u=o,null;var i;if(i=n?(u<<8)+o:(o<<8)+u,u=null,null!==r){var a=r;return r=null,t(i,56320,57343)?65536+1024*(a-55296)+(i-56320):(l.prepend(U(i,n)),d(e))}return t(i,55296,56319)?(r=i,null):t(i,56320,57343)?d(e):i}}function W(n,l){l.fatal,this.handler=function(l,e){if(e===s)return c;if(t(e,0,65535))return U(e,n);var u=U(55296+(e-65536>>10),n),r=U(56320+(e-65536&1023),n);return u.concat(r)}}function z(n){n.fatal,this.handler=function(n,l){return l===s?c:o(l)?l:63360+l-128}}function V(n){n.fatal,this.handler=function(n,l){return l===s?c:i(l)?l:t(l,63360,63487)?l-63360+128:h(l)}}Object.defineProperty&&(Object.defineProperty(E.prototype,"encoding",{get:function(){return this._encoding.name.toLowerCase()}}),Object.defineProperty(E.prototype,"fatal",{get:function(){return"fatal"===this._error_mode}}),Object.defineProperty(E.prototype,"ignoreBOM",{get:function(){return this._ignoreBOM}})),E.prototype.decode=function(n,l){var e;e="object"==typeof n&&n instanceof ArrayBuffer?new Uint8Array(n):"object"==typeof n&&"buffer"in n&&n.buffer instanceof ArrayBuffer?new Uint8Array(n.buffer,n.byteOffset,n.byteLength):new Uint8Array(0),l=r(l),this._do_not_flush||(this._decoder=w[this._encoding.name]({fatal:"fatal"===this._error_mode}),this._BOMseen=!1),this._do_not_flush=Boolean(l.stream);for(var t,u=new a(e),o=[];;){var i=u.read();if(i===s)break;if((t=this._decoder.handler(u,i))===c)break;null!==t&&(Array.isArray(t)?o.push.apply(o,t):o.push(t))}if(!this._do_not_flush){do{if((t=this._decoder.handler(u,u.read()))===c)break;null!==t&&(Array.isArray(t)?o.push.apply(o,t):o.push(t))}while(!u.endOfStream());this._decoder=null}return function(n){var l,e;return l=["UTF-8","UTF-16LE","UTF-16BE"],e=this._encoding.name,-1===l.indexOf(e)||this._ignoreBOM||this._BOMseen||(n.length>0&&65279===n[0]?(this._BOMseen=!0,n.shift()):n.length>0&&(this._BOMseen=!0)),function(n){for(var l="",e=0;e<n.length;++e){var t=n[e];t<=65535?l+=String.fromCharCode(t):(t-=65536,l+=String.fromCharCode(55296+(t>>10),56320+(1023&t)))}return l}(n)}.call(this,o)},Object.defineProperty&&Object.defineProperty(_.prototype,"encoding",{get:function(){return this._encoding.name.toLowerCase()}}),_.prototype.encode=function(n,l){n=void 0===n?"":String(n),l=r(l),this._do_not_flush||(this._encoder=v[this._encoding.name]({fatal:"fatal"===this._fatal})),this._do_not_flush=Boolean(l.stream);for(var e,t=new a(function(n){for(var l=String(n),e=l.length,t=0,u=[];t<e;){var r=l.charCodeAt(t);if(r<55296||r>57343)u.push(r);else if(56320<=r&&r<=57343)u.push(65533);else if(55296<=r&&r<=56319)if(t===e-1)u.push(65533);else{var o=l.charCodeAt(t+1);if(56320<=o&&o<=57343){var i=1023&r,s=1023&o;u.push(65536+(i<<10)+s),t+=1}else u.push(65533)}t+=1}return u}(n)),u=[];;){var o=t.read();if(o===s)break;if((e=this._encoder.handler(t,o))===c)break;Array.isArray(e)?u.push.apply(u,e):u.push(e)}if(!this._do_not_flush){for(;(e=this._encoder.handler(t,t.read()))!==c;)Array.isArray(e)?u.push.apply(u,e):u.push(e);this._encoder=null}return new Uint8Array(u)},v["UTF-8"]=function(n){return new x(n)},w["UTF-8"]=function(n){return new k(n)},"encoding-indexes"in e&&p.forEach((function(n){"Legacy single-byte encodings"===n.heading&&n.encodings.forEach((function(n){var l=n.name,e=C(l.toLowerCase());w[l]=function(n){return new T(e,n)},v[l]=function(n){return new P(e,n)}}))})),w.GBK=function(n){return new I(n)},v.GBK=function(n){return new A(n,!0)},v.gb18030=function(n){return new A(n)},w.gb18030=function(n){return new I(n)},v.Big5=function(n){return new R(n)},w.Big5=function(n){return new O(n)},v["EUC-JP"]=function(n){return new L(n)},w["EUC-JP"]=function(n){return new F(n)},v["ISO-2022-JP"]=function(n){return new j(n)},w["ISO-2022-JP"]=function(n){return new $(n)},v.Shift_JIS=function(n){return new N(n)},w.Shift_JIS=function(n){return new M(n)},v["EUC-KR"]=function(n){return new H(n)},w["EUC-KR"]=function(n){return new B(n)},v["UTF-16BE"]=function(n){return new W(!0,n)},w["UTF-16BE"]=function(n){return new q(!0,n)},v["UTF-16LE"]=function(n){return new W(!1,n)},w["UTF-16LE"]=function(n){return new q(!1,n)},v["x-user-defined"]=function(n){return new V(n)},w["x-user-defined"]=function(n){return new z(n)},e.TextEncoder||(e.TextEncoder=_),e.TextDecoder||(e.TextDecoder=E),void 0!==l&&l.exports&&(l.exports={TextEncoder:e.TextEncoder,TextDecoder:e.TextDecoder,EncodingIndexes:e["encoding-indexes"]})}(this||{})},{"./encoding-indexes.js":85}],87:[function(n,l,e){!function(n,t){"object"==typeof e&&void 0!==l?t(e):"function"==typeof define&&__webpack_require__.amdO?define(["exports"],t):t((n=n||self).Diff={})}(this,(function(n){function l(){}function e(n,l,e,t,u){for(var r=0,o=l.length,i=0,s=0;r<o;r++){var a=l[r];if(a.removed){if(a.value=n.join(t.slice(s,s+a.count)),s+=a.count,r&&l[r-1].added){var c=l[r-1];l[r-1]=l[r],l[r]=c}}else{if(!a.added&&u){var d=e.slice(i,i+a.count);d=d.map((function(n,l){var e=t[s+l];return e.length>n.length?e:n})),a.value=n.join(d)}else a.value=n.join(e.slice(i,i+a.count));i+=a.count,a.added||(s+=a.count)}}var h=l[o-1];return o>1&&"string"==typeof h.value&&(h.added||h.removed)&&n.equals("",h.value)&&(l[o-2].value+=h.value,l.pop()),l}l.prototype={diff:function(n,l){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},u=t.callback;"function"==typeof t&&(u=t,t={}),this.options=t;var r=this;function o(n){return u?(setTimeout((function(){u(void 0,n)}),0),!0):n}n=this.castInput(n),l=this.castInput(l),n=this.removeEmpty(this.tokenize(n));var i=(l=this.removeEmpty(this.tokenize(l))).length,s=n.length,a=1,c=i+s,d=[{newPos:-1,components:[]}],h=this.extractCommon(d[0],l,n,0);if(d[0].newPos+1>=i&&h+1>=s)return o([{value:this.join(l),count:l.length}]);function f(){for(var t=-1*a;t<=a;t+=2){var u=void 0,c=d[t-1],h=d[t+1],f=(h?h.newPos:0)-t;c&&(d[t-1]=void 0);var p=c&&c.newPos+1<i,m=h&&0<=f&&f<s;if(p||m){if(!p||m&&c.newPos<h.newPos?(u={newPos:(g=h).newPos,components:g.components.slice(0)},r.pushComponent(u.components,void 0,!0)):((u=c).newPos++,r.pushComponent(u.components,!0,void 0)),f=r.extractCommon(u,l,n,t),u.newPos+1>=i&&f+1>=s)return o(e(r,u.components,l,n,r.useLongestToken));d[t]=u}else d[t]=void 0}var g;a++}if(u)!function n(){setTimeout((function(){if(a>c)return u();f()||n()}),0)}();else for(;a<=c;){var p=f();if(p)return p}},pushComponent:function(n,l,e){var t=n[n.length-1];t&&t.added===l&&t.removed===e?n[n.length-1]={count:t.count+1,added:l,removed:e}:n.push({count:1,added:l,removed:e})},extractCommon:function(n,l,e,t){for(var u=l.length,r=e.length,o=n.newPos,i=o-t,s=0;o+1<u&&i+1<r&&this.equals(l[o+1],e[i+1]);)o++,i++,s++;return s&&n.components.push({count:s}),n.newPos=o,i},equals:function(n,l){return this.options.comparator?this.options.comparator(n,l):n===l||this.options.ignoreCase&&n.toLowerCase()===l.toLowerCase()},removeEmpty:function(n){for(var l=[],e=0;e<n.length;e++)n[e]&&l.push(n[e]);return l},castInput:function(n){return n},tokenize:function(n){return n.split("")},join:function(n){return n.join("")}};var t=new l;function u(n,l){if("function"==typeof n)l.callback=n;else if(n)for(var e in n)n.hasOwnProperty(e)&&(l[e]=n[e]);return l}var r=/^[A-Za-z\xC0-\u02C6\u02C8-\u02D7\u02DE-\u02FF\u1E00-\u1EFF]+$/,o=/\S/,i=new l;i.equals=function(n,l){return this.options.ignoreCase&&(n=n.toLowerCase(),l=l.toLowerCase()),n===l||this.options.ignoreWhitespace&&!o.test(n)&&!o.test(l)},i.tokenize=function(n){for(var l=n.split(/(\s+|[()[\]{}'"]|\b)/),e=0;e<l.length-1;e++)!l[e+1]&&l[e+2]&&r.test(l[e])&&r.test(l[e+2])&&(l[e]+=l[e+2],l.splice(e+1,2),e--);return l};var s=new l;function a(n,l,e){return s.diff(n,l,e)}s.tokenize=function(n){var l=[],e=n.split(/(\n|\r\n)/);e[e.length-1]||e.pop();for(var t=0;t<e.length;t++){var u=e[t];t%2&&!this.options.newlineIsToken?l[l.length-1]+=u:(this.options.ignoreWhitespace&&(u=u.trim()),l.push(u))}return l};var c=new l;c.tokenize=function(n){return n.split(/(\S.+?[.!?])(?=\s+|$)/)};var d=new l;function h(n){return h="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},h(n)}function f(n){return function(n){if(Array.isArray(n)){for(var l=0,e=new Array(n.length);l<n.length;l++)e[l]=n[l];return e}}(n)||function(n){if(Symbol.iterator in Object(n)||"[object Arguments]"===Object.prototype.toString.call(n))return Array.from(n)}(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}d.tokenize=function(n){return n.split(/([{}:;,]|\s+)/)};var p=Object.prototype.toString,m=new l;function g(n,l,e,t,u){var r,o;for(l=l||[],e=e||[],t&&(n=t(u,n)),r=0;r<l.length;r+=1)if(l[r]===n)return e[r];if("[object Array]"===p.call(n)){for(l.push(n),o=new Array(n.length),e.push(o),r=0;r<n.length;r+=1)o[r]=g(n[r],l,e,t,u);return l.pop(),e.pop(),o}if(n&&n.toJSON&&(n=n.toJSON()),"object"===h(n)&&null!==n){l.push(n),o={},e.push(o);var i,s=[];for(i in n)n.hasOwnProperty(i)&&s.push(i);for(s.sort(),r=0;r<s.length;r+=1)o[i=s[r]]=g(n[i],l,e,t,i);l.pop(),e.pop()}else o=n;return o}m.useLongestToken=!0,m.tokenize=s.tokenize,m.castInput=function(n){var l=this.options,e=l.undefinedReplacement,t=l.stringifyReplacer,u=void 0===t?function(n,l){return void 0===l?e:l}:t;return"string"==typeof n?n:JSON.stringify(g(n,null,null,u),u,"  ")},m.equals=function(n,e){return l.prototype.equals.call(m,n.replace(/,([\r\n])/g,"$1"),e.replace(/,([\r\n])/g,"$1"))};var y=new l;function v(n){var l=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},e=n.split(/\r\n|[\n\v\f\r\x85]/),t=n.match(/\r\n|[\n\v\f\r\x85]/g)||[],u=[],r=0;function o(){var n={};for(u.push(n);r<e.length;){var t=e[r];if(/^(\-\-\-|\+\+\+|@@)\s/.test(t))break;var o=/^(?:Index:|diff(?: -r \w+)+)\s+(.+?)\s*$/.exec(t);o&&(n.index=o[1]),r++}for(i(n),i(n),n.hunks=[];r<e.length;){var a=e[r];if(/^(Index:|diff|\-\-\-|\+\+\+)\s/.test(a))break;if(/^@@/.test(a))n.hunks.push(s());else{if(a&&l.strict)throw new Error("Unknown line "+(r+1)+" "+JSON.stringify(a));r++}}}function i(n){var l=/^(---|\+\+\+)\s+(.*)$/.exec(e[r]);if(l){var t="---"===l[1]?"old":"new",u=l[2].split("\t",2),o=u[0].replace(/\\\\/g,"\\");/^".*"$/.test(o)&&(o=o.substr(1,o.length-2)),n[t+"FileName"]=o,n[t+"Header"]=(u[1]||"").trim(),r++}}function s(){for(var n=r,u=e[r++].split(/@@ -(\d+)(?:,(\d+))? \+(\d+)(?:,(\d+))? @@/),o={oldStart:+u[1],oldLines:+u[2]||1,newStart:+u[3],newLines:+u[4]||1,lines:[],linedelimiters:[]},i=0,s=0;r<e.length&&!(0===e[r].indexOf("--- ")&&r+2<e.length&&0===e[r+1].indexOf("+++ ")&&0===e[r+2].indexOf("@@"));r++){var a=0==e[r].length&&r!=e.length-1?" ":e[r][0];if("+"!==a&&"-"!==a&&" "!==a&&"\\"!==a)break;o.lines.push(e[r]),o.linedelimiters.push(t[r]||"\n"),"+"===a?i++:"-"===a?s++:" "===a&&(i++,s++)}if(i||1!==o.newLines||(o.newLines=0),s||1!==o.oldLines||(o.oldLines=0),l.strict){if(i!==o.newLines)throw new Error("Added line count did not match for hunk at line "+(n+1));if(s!==o.oldLines)throw new Error("Removed line count did not match for hunk at line "+(n+1))}return o}for(;r<e.length;)o();return u}function w(n,l,e){var t=!0,u=!1,r=!1,o=1;return function i(){if(t&&!r){if(u?o++:t=!1,n+o<=e)return o;r=!0}if(!u)return r||(t=!0),l<=n-o?-o++:(u=!0,i())}}function b(n,l){var e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if("string"==typeof l&&(l=v(l)),Array.isArray(l)){if(l.length>1)throw new Error("applyPatch only works with a single input.");l=l[0]}var t,u,r=n.split(/\r\n|[\n\v\f\r\x85]/),o=n.match(/\r\n|[\n\v\f\r\x85]/g)||[],i=l.hunks,s=e.compareLine||function(n,l,e,t){return l===t},a=0,c=e.fuzzFactor||0,d=0,h=0;function f(n,l){for(var e=0;e<n.lines.length;e++){var t=n.lines[e],u=t.length>0?t[0]:" ",o=t.length>0?t.substr(1):t;if(" "===u||"-"===u){if(!s(l+1,r[l],u,o)&&++a>c)return!1;l++}}return!0}for(var p=0;p<i.length;p++){for(var m=i[p],g=r.length-m.oldLines,y=0,b=h+m.oldStart-1,S=w(b,d,g);void 0!==y;y=S())if(f(m,b+y)){m.offset=h+=y;break}if(void 0===y)return!1;d=m.offset+m.oldStart+m.oldLines}for(var C=0,D=0;D<i.length;D++){var E=i[D],_=E.oldStart+E.offset+C-1;C+=E.newLines-E.oldLines,_<0&&(_=0);for(var k=0;k<E.lines.length;k++){var x=E.lines[k],T=x.length>0?x[0]:" ",P=x.length>0?x.substr(1):x,I=E.linedelimiters[k];if(" "===T)_++;else if("-"===T)r.splice(_,1),o.splice(_,1);else if("+"===T)r.splice(_,0,P),o.splice(_,0,I),_++;else if("\\"===T){var A=E.lines[k-1]?E.lines[k-1][0]:null;"+"===A?t=!0:"-"===A&&(u=!0)}}}if(t)for(;!r[r.length-1];)r.pop(),o.pop();else u&&(r.push(""),o.push("\n"));for(var O=0;O<r.length-1;O++)r[O]=r[O]+o[O];return r.join("")}function S(n,l,e,t,u,r,o){o||(o={}),void 0===o.context&&(o.context=4);var i=a(e,t,o);function s(n){return n.map((function(n){return" "+n}))}i.push({value:"",lines:[]});for(var c=[],d=0,h=0,p=[],m=1,g=1,y=function(n){var l=i[n],u=l.lines||l.value.replace(/\n$/,"").split("\n");if(l.lines=u,l.added||l.removed){var r;if(!d){var a=i[n-1];d=m,h=g,a&&(p=o.context>0?s(a.lines.slice(-o.context)):[],d-=p.length,h-=p.length)}(r=p).push.apply(r,f(u.map((function(n){return(l.added?"+":"-")+n})))),l.added?g+=u.length:m+=u.length}else{if(d)if(u.length<=2*o.context&&n<i.length-2){var y;(y=p).push.apply(y,f(s(u)))}else{var v,w=Math.min(u.length,o.context);(v=p).push.apply(v,f(s(u.slice(0,w))));var b={oldStart:d,oldLines:m-d+w,newStart:h,newLines:g-h+w,lines:p};if(n>=i.length-2&&u.length<=o.context){var S=/\n$/.test(e),C=/\n$/.test(t),D=0==u.length&&p.length>b.oldLines;!S&&D&&p.splice(b.oldLines,0,"\\ No newline at end of file"),(S||D)&&C||p.push("\\ No newline at end of file")}c.push(b),d=0,h=0,p=[]}m+=u.length,g+=u.length}},v=0;v<i.length;v++)y(v);return{oldFileName:n,newFileName:l,oldHeader:u,newHeader:r,hunks:c}}function C(n,l,e,t,u,r,o){var i=S(n,l,e,t,u,r,o),s=[];n==l&&s.push("Index: "+n),s.push("==================================================================="),s.push("--- "+i.oldFileName+(void 0===i.oldHeader?"":"\t"+i.oldHeader)),s.push("+++ "+i.newFileName+(void 0===i.newHeader?"":"\t"+i.newHeader));for(var a=0;a<i.hunks.length;a++){var c=i.hunks[a];s.push("@@ -"+c.oldStart+","+c.oldLines+" +"+c.newStart+","+c.newLines+" @@"),s.push.apply(s,c.lines)}return s.join("\n")+"\n"}function D(n,l){if(l.length>n.length)return!1;for(var e=0;e<l.length;e++)if(l[e]!==n[e])return!1;return!0}function E(n){var l=N(n.lines),e=l.oldLines,t=l.newLines;void 0!==e?n.oldLines=e:delete n.oldLines,void 0!==t?n.newLines=t:delete n.newLines}function _(n,l){if("string"==typeof n){if(/^@@/m.test(n)||/^Index:/m.test(n))return v(n)[0];if(!l)throw new Error("Must provide a base reference or pass in a patch");return S(void 0,void 0,l,n)}return n}function k(n){return n.newFileName&&n.newFileName!==n.oldFileName}function x(n,l,e){return l===e?l:(n.conflict=!0,{mine:l,theirs:e})}function T(n,l){return n.oldStart<l.oldStart&&n.oldStart+n.oldLines<l.oldStart}function P(n,l){return{oldStart:n.oldStart,oldLines:n.oldLines,newStart:n.newStart+l,newLines:n.newLines,lines:n.lines}}function I(n,l,e,t,u){var r={offset:l,lines:e,index:0},o={offset:t,lines:u,index:0};for(F(n,r,o),F(n,o,r);r.index<r.lines.length&&o.index<o.lines.length;){var i=r.lines[r.index],s=o.lines[o.index];if("-"!==i[0]&&"+"!==i[0]||"-"!==s[0]&&"+"!==s[0])if("+"===i[0]&&" "===s[0]){var a;(a=n.lines).push.apply(a,f($(r)))}else if("+"===s[0]&&" "===i[0]){var c;(c=n.lines).push.apply(c,f($(o)))}else"-"===i[0]&&" "===s[0]?O(n,r,o):"-"===s[0]&&" "===i[0]?O(n,o,r,!0):i===s?(n.lines.push(i),r.index++,o.index++):R(n,$(r),$(o));else A(n,r,o)}L(n,r),L(n,o),E(n)}function A(n,l,e){var t,u,r=$(l),o=$(e);if(j(r)&&j(o)){var i,s;if(D(r,o)&&M(e,r,r.length-o.length))return void(i=n.lines).push.apply(i,f(r));if(D(o,r)&&M(l,o,o.length-r.length))return void(s=n.lines).push.apply(s,f(o))}else if(u=o,(t=r).length===u.length&&D(t,u)){var a;return void(a=n.lines).push.apply(a,f(r))}R(n,r,o)}function O(n,l,e,t){var u,r=$(l),o=function(n,l){for(var e=[],t=[],u=0,r=!1,o=!1;u<l.length&&n.index<n.lines.length;){var i=n.lines[n.index],s=l[u];if("+"===s[0])break;if(r=r||" "!==i[0],t.push(s),u++,"+"===i[0])for(o=!0;"+"===i[0];)e.push(i),i=n.lines[++n.index];s.substr(1)===i.substr(1)?(e.push(i),n.index++):o=!0}if("+"===(l[u]||"")[0]&&r&&(o=!0),o)return e;for(;u<l.length;)t.push(l[u++]);return{merged:t,changes:e}}(e,r);o.merged?(u=n.lines).push.apply(u,f(o.merged)):R(n,t?o:r,t?r:o)}function R(n,l,e){n.conflict=!0,n.lines.push({conflict:!0,mine:l,theirs:e})}function F(n,l,e){for(;l.offset<e.offset&&l.index<l.lines.length;){var t=l.lines[l.index++];n.lines.push(t),l.offset++}}function L(n,l){for(;l.index<l.lines.length;){var e=l.lines[l.index++];n.lines.push(e)}}function $(n){for(var l=[],e=n.lines[n.index][0];n.index<n.lines.length;){var t=n.lines[n.index];if("-"===e&&"+"===t[0]&&(e="+"),e!==t[0])break;l.push(t),n.index++}return l}function j(n){return n.reduce((function(n,l){return n&&"-"===l[0]}),!0)}function M(n,l,e){for(var t=0;t<e;t++){var u=l[l.length-e+t].substr(1);if(n.lines[n.index+t]!==" "+u)return!1}return n.index+=e,!0}function N(n){var l=0,e=0;return n.forEach((function(n){if("string"!=typeof n){var t=N(n.mine),u=N(n.theirs);void 0!==l&&(t.oldLines===u.oldLines?l+=t.oldLines:l=void 0),void 0!==e&&(t.newLines===u.newLines?e+=t.newLines:e=void 0)}else void 0===e||"+"!==n[0]&&" "!==n[0]||e++,void 0===l||"-"!==n[0]&&" "!==n[0]||l++})),{oldLines:l,newLines:e}}y.tokenize=function(n){return n.slice()},y.join=y.removeEmpty=function(n){return n},n.Diff=l,n.diffChars=function(n,l,e){return t.diff(n,l,e)},n.diffWords=function(n,l,e){return e=u(e,{ignoreWhitespace:!0}),i.diff(n,l,e)},n.diffWordsWithSpace=function(n,l,e){return i.diff(n,l,e)},n.diffLines=a,n.diffTrimmedLines=function(n,l,e){var t=u(e,{ignoreWhitespace:!0});return s.diff(n,l,t)},n.diffSentences=function(n,l,e){return c.diff(n,l,e)},n.diffCss=function(n,l,e){return d.diff(n,l,e)},n.diffJson=function(n,l,e){return m.diff(n,l,e)},n.diffArrays=function(n,l,e){return y.diff(n,l,e)},n.structuredPatch=S,n.createTwoFilesPatch=C,n.createPatch=function(n,l,e,t,u,r){return C(n,n,l,e,t,u,r)},n.applyPatch=b,n.applyPatches=function(n,l){"string"==typeof n&&(n=v(n));var e=0;!function t(){var u=n[e++];if(!u)return l.complete();l.loadFile(u,(function(n,e){if(n)return l.complete(n);var r=b(e,u,l);l.patched(u,r,(function(n){if(n)return l.complete(n);t()}))}))}()},n.parsePatch=v,n.merge=function(n,l,e){n=_(n,e),l=_(l,e);var t={};(n.index||l.index)&&(t.index=n.index||l.index),(n.newFileName||l.newFileName)&&(k(n)?k(l)?(t.oldFileName=x(t,n.oldFileName,l.oldFileName),t.newFileName=x(t,n.newFileName,l.newFileName),t.oldHeader=x(t,n.oldHeader,l.oldHeader),t.newHeader=x(t,n.newHeader,l.newHeader)):(t.oldFileName=n.oldFileName,t.newFileName=n.newFileName,t.oldHeader=n.oldHeader,t.newHeader=n.newHeader):(t.oldFileName=l.oldFileName||n.oldFileName,t.newFileName=l.newFileName||n.newFileName,t.oldHeader=l.oldHeader||n.oldHeader,t.newHeader=l.newHeader||n.newHeader)),t.hunks=[];for(var u=0,r=0,o=0,i=0;u<n.hunks.length||r<l.hunks.length;){var s=n.hunks[u]||{oldStart:1/0},a=l.hunks[r]||{oldStart:1/0};if(T(s,a))t.hunks.push(P(s,o)),u++,i+=s.newLines-s.oldLines;else if(T(a,s))t.hunks.push(P(a,i)),r++,o+=a.newLines-a.oldLines;else{var c={oldStart:Math.min(s.oldStart,a.oldStart),oldLines:0,newStart:Math.min(s.newStart+o,a.oldStart+i),newLines:0,lines:[]};I(c,s.oldStart,s.lines,a.oldStart,a.lines),r++,u++,t.hunks.push(c)}}return t},n.convertChangesToDMP=function(n){for(var l,e,t=[],u=0;u<n.length;u++)e=(l=n[u]).added?1:l.removed?-1:0,t.push([e,l.value]);return t},n.convertChangesToXML=function(n){for(var l=[],e=0;e<n.length;e++){var t=n[e];t.added?l.push("<ins>"):t.removed&&l.push("<del>"),l.push((u=t.value,u.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;"))),t.added?l.push("</ins>"):t.removed&&l.push("</del>")}var u;return l.join("")},n.canonicalize=g,Object.defineProperty(n,"__esModule",{value:!0})}))},{}],88:[function(n,l,e){l.exports=Array.isArray||function(n){return"[object Array]"==Object.prototype.toString.call(n)}},{}],89:[function(n,l,e){function t(n){return!n||"object"!=typeof n&&"function"!=typeof n}l.exports=function n(){var l=[].slice.call(arguments),e=!1;"boolean"==typeof l[0]&&(e=l.shift());var u,r=l[0];if(t(r))throw new Error("extendee must be an object");for(var o=l.slice(1),i=o.length,s=0;s<i;s++){var a=o[s];for(var c in a)if(a.hasOwnProperty(c)){var d=a[c];if(e&&(u=d,Array.isArray(u)||"[object Object]"=={}.toString.call(u))){var h=Array.isArray(d)?[]:{};r[c]=n(!0,r.hasOwnProperty(c)&&!t(r[c])?r[c]:h,d)}else r[c]=d}}return r}},{}],90:[function(n,l,e){var t,u="__lodash_hash_undefined__",r=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,o=/^\w*$/,i=/^\./,s=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,a=/\\(\\)?/g,c=/^\[object .+?Constructor\]$/,d="object"==typeof global&&global&&global.Object===Object&&global,h="object"==typeof self&&self&&self.Object===Object&&self,f=d||h||Function("return this")(),p=Array.prototype,m=Function.prototype,g=Object.prototype,y=f["__core-js_shared__"],v=(t=/[^.]+$/.exec(y&&y.keys&&y.keys.IE_PROTO||""))?"Symbol(src)_1."+t:"",w=m.toString,b=g.hasOwnProperty,S=g.toString,C=RegExp("^"+w.call(b).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),D=f.Symbol,E=p.splice,_=F(f,"Map"),k=F(Object,"create"),x=D?D.prototype:void 0,T=x?x.toString:void 0;function P(n){var l=-1,e=n?n.length:0;for(this.clear();++l<e;){var t=n[l];this.set(t[0],t[1])}}function I(n){var l=-1,e=n?n.length:0;for(this.clear();++l<e;){var t=n[l];this.set(t[0],t[1])}}function A(n){var l=-1,e=n?n.length:0;for(this.clear();++l<e;){var t=n[l];this.set(t[0],t[1])}}function O(n,l){for(var e,t,u=n.length;u--;)if((e=n[u][0])===(t=l)||e!=e&&t!=t)return u;return-1}function R(n,l){var e,t,u=n.__data__;return("string"==(t=typeof(e=l))||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e)?u["string"==typeof l?"string":"hash"]:u.map}function F(n,l){var e=function(n,l){return null==n?void 0:n[l]}(n,l);return function(n){if(!N(n)||v&&v in n)return!1;var l=function(n){var l=N(n)?S.call(n):"";return"[object Function]"==l||"[object GeneratorFunction]"==l}(n)||function(n){var l=!1;if(null!=n&&"function"!=typeof n.toString)try{l=!!(n+"")}catch(n){}return l}(n)?C:c;return l.test(function(n){if(null!=n){try{return w.call(n)}catch(n){}try{return n+""}catch(n){}}return""}(n))}(e)?e:void 0}P.prototype.clear=function(){this.__data__=k?k(null):{}},P.prototype.delete=function(n){return this.has(n)&&delete this.__data__[n]},P.prototype.get=function(n){var l=this.__data__;if(k){var e=l[n];return e===u?void 0:e}return b.call(l,n)?l[n]:void 0},P.prototype.has=function(n){var l=this.__data__;return k?void 0!==l[n]:b.call(l,n)},P.prototype.set=function(n,l){return this.__data__[n]=k&&void 0===l?u:l,this},I.prototype.clear=function(){this.__data__=[]},I.prototype.delete=function(n){var l=this.__data__,e=O(l,n);return!(e<0||(e==l.length-1?l.pop():E.call(l,e,1),0))},I.prototype.get=function(n){var l=this.__data__,e=O(l,n);return e<0?void 0:l[e][1]},I.prototype.has=function(n){return O(this.__data__,n)>-1},I.prototype.set=function(n,l){var e=this.__data__,t=O(e,n);return t<0?e.push([n,l]):e[t][1]=l,this},A.prototype.clear=function(){this.__data__={hash:new P,map:new(_||I),string:new P}},A.prototype.delete=function(n){return R(this,n).delete(n)},A.prototype.get=function(n){return R(this,n).get(n)},A.prototype.has=function(n){return R(this,n).has(n)},A.prototype.set=function(n,l){return R(this,n).set(n,l),this};var L=j((function(n){var l;n=null==(l=n)?"":function(n){if("string"==typeof n)return n;if(B(n))return T?T.call(n):"";var l=n+"";return"0"==l&&1/n==-1/0?"-0":l}(l);var e=[];return i.test(n)&&e.push(""),n.replace(s,(function(n,l,t,u){e.push(t?u.replace(a,"$1"):l||n)})),e}));function $(n){if("string"==typeof n||B(n))return n;var l=n+"";return"0"==l&&1/n==-1/0?"-0":l}function j(n,l){if("function"!=typeof n||l&&"function"!=typeof l)throw new TypeError("Expected a function");var e=function(){var t=arguments,u=l?l.apply(this,t):t[0],r=e.cache;if(r.has(u))return r.get(u);var o=n.apply(this,t);return e.cache=r.set(u,o),o};return e.cache=new(j.Cache||A),e}j.Cache=A;var M=Array.isArray;function N(n){var l=typeof n;return!!n&&("object"==l||"function"==l)}function B(n){return"symbol"==typeof n||function(n){return!!n&&"object"==typeof n}(n)&&"[object Symbol]"==S.call(n)}l.exports=function(n,l,e){var t=null==n?void 0:function(n,l){var e;l=function(n,l){if(M(n))return!1;var e=typeof n;return!("number"!=e&&"symbol"!=e&&"boolean"!=e&&null!=n&&!B(n))||o.test(n)||!r.test(n)||null!=l&&n in Object(l)}(l,n)?[l]:M(e=l)?e:L(e);for(var t=0,u=l.length;null!=n&&t<u;)n=n[$(l[t++])];return t&&t==u?n:void 0}(n,l);return void 0===t?e:t}},{}],91:[function(n,l,e){var t=setTimeout;l.exports=function(n){return(n=n||{}).hasOwnProperty("logger")||(n.logger=function(){}),n.hasOwnProperty("useImmediateExceptions")||(n.useImmediateExceptions=!0),n.hasOwnProperty("setTimeout")||(n.setTimeout=t),function(l,e){var t=l+" threw exception: ",u={name:e.name||l,message:e.message||e.toString(),stack:e.stack};function r(){throw u.message=t+u.message,u}n.logger(t+"["+u.name+"] "+u.message),u.stack&&n.logger(u.stack),n.useImmediateExceptions?r():n.setTimeout(r,0)}}},{}],92:[function(n,l,e){var t=n("./event");function u(n,l,e){this.initEvent(n,!1,!1,e),this.detail=l.detail||null}u.prototype=new t,u.prototype.constructor=u,l.exports=u},{"./event":94}],93:[function(n,l,e){function t(n){return n!==Object(n)?{capture:Boolean(n),once:!1,passive:!1}:{capture:Boolean(n.capture),once:Boolean(n.once),passive:Boolean(n.passive)}}function u(n,l){return function(e){return e.capture===l&&e.listener===n}}var r={addEventListener:function(n,l,e){var r=t(e);null!=l&&(this.eventListeners=this.eventListeners||{},this.eventListeners[n]=this.eventListeners[n]||[],this.eventListeners[n].some(u(l,r.capture))||this.eventListeners[n].push({listener:l,capture:r.capture,once:r.once}))},removeEventListener:function(n,l,e){if(this.eventListeners&&this.eventListeners[n]){var r,o=t(e);this.eventListeners[n]=this.eventListeners[n].filter((r=u(l,o.capture),function(){return!r.apply(this,arguments)}))}},dispatchEvent:function(n){if(!this.eventListeners||!this.eventListeners[n.type])return Boolean(n.defaultPrevented);var l=this,e=n.type,t=l.eventListeners[e];return l.eventListeners[e]=t.filter((function(n){return!n.once})),t.forEach((function(e){var t=e.listener;"function"==typeof t?t.call(l,n):t.handleEvent(n)})),Boolean(n.defaultPrevented)}};l.exports=r},{}],94:[function(n,l,e){function t(n,l,e,t){this.initEvent(n,l,e,t)}t.prototype={initEvent:function(n,l,e,t){this.type=n,this.bubbles=l,this.cancelable=e,this.target=t,this.currentTarget=t},stopPropagation:function(){},preventDefault:function(){this.defaultPrevented=!0}},l.exports=t},{}],95:[function(n,l,e){l.exports={Event:n("./event"),ProgressEvent:n("./progress-event"),CustomEvent:n("./custom-event"),EventTarget:n("./event-target")}},{"./custom-event":92,"./event":94,"./event-target":93,"./progress-event":96}],96:[function(n,l,e){var t=n("./event");function u(n,l,e){this.initEvent(n,!1,!1,e),this.loaded="number"==typeof l.loaded?l.loaded:null,this.total="number"==typeof l.total?l.total:null,this.lengthComputable=Boolean(l.total)}u.prototype=new t,u.prototype.constructor=u,l.exports=u},{"./event":94}],97:[function(n,l,e){var t=n("@sinonjs/fake-timers"),u=n("./index");function r(){}r.prototype=u;var o=new r;o.addRequest=function(n){if(n.async&&("object"==typeof setTimeout.clock?this.clock=setTimeout.clock:(this.clock=t.install(),this.resetClock=!0),!this.longestTimeout)){var l=this.clock.setTimeout,e=this.clock.setInterval,r=this;this.clock.setTimeout=function(n,e){return r.longestTimeout=Math.max(e,r.longestTimeout||0),l.apply(this,arguments)},this.clock.setInterval=function(n,l){return r.longestTimeout=Math.max(l,r.longestTimeout||0),e.apply(this,arguments)}}return u.addRequest.call(this,n)},o.respond=function(){var n=u.respond.apply(this,arguments);return this.clock&&(this.clock.tick(this.longestTimeout||0),this.longestTimeout=0,this.resetClock&&(this.clock.uninstall(),this.resetClock=!1)),n},o.restore=function(){return this.clock&&this.clock.uninstall(),u.restore.apply(this,arguments)},l.exports=o},{"./index":98,"@sinonjs/fake-timers":57}],98:[function(n,l,e){var t=n("../fake-xhr"),u=[].push,r=n("./log"),o=n("../configure-logger"),i=n("path-to-regexp"),s="undefined"!=typeof ArrayBuffer;function a(n){var l=n;if("[object Array]"!==Object.prototype.toString.call(n)&&(l=[200,{},n]),"string"!=typeof l[2]){if(!s)throw new TypeError("Fake server response body should be a string, but was "+typeof l[2]);if(!(l[2]instanceof ArrayBuffer))throw new TypeError("Fake server response body should be a string or ArrayBuffer, but was "+typeof l[2])}return l}function c(){var n={hostname:"localhost",port:process.env.PORT||80,protocol:"http:"};return n.host=n.hostname+("80"===String(n.port)?"":":"+n.port),n}function d(n,l){var e="undefined"==typeof window?c():void 0!==window.location?window.location:void 0!==window.window&&void 0!==window.window.location?window.window.location:c(),t=new RegExp("^"+e.protocol+"//"+e.host+"/"),u=l.url;if(/^https?:\/\//.test(u)&&!t.test(u)||(u=u.replace(t,"/")),function(n,l,e){var t=n.method,u=!t||t.toLowerCase()===l.toLowerCase(),r=n.url,o=!r||r===e||"function"==typeof r.test&&r.test(e);return u&&o}(n,this.getHTTPMethod(l),u)){if("function"==typeof n.response){var r=n.url,o=[l].concat(r&&"function"==typeof r.exec?r.exec(u).slice(1):[]);return n.response.apply(n,o)}return!0}return!1}function h(){var n=++this.requestCount;this.requested=!0,this.requestedOnce=1===n,this.requestedTwice=2===n,this.requestedThrice=3===n,this.firstRequest=this.getRequest(0),this.secondRequest=this.getRequest(1),this.thirdRequest=this.getRequest(2),this.lastRequest=this.getRequest(n-1)}var f={create:function(n){var l=Object.create(this);return l.configure(n),this.xhr=t.useFakeXMLHttpRequest(),l.requests=[],l.requestCount=0,l.queue=[],l.responses=[],this.xhr.onCreate=function(n){n.unsafeHeadersEnabled=function(){return!(!1===l.unsafeHeadersEnabled)},l.addRequest(n)},l},configure:function(n){var l=this,e={autoRespond:!0,autoRespondAfter:!0,respondImmediately:!0,fakeHTTPMethods:!0,logger:!0,unsafeHeadersEnabled:!0};n=n||{},Object.keys(n).forEach((function(t){t in e&&(l[t]=n[t])})),l.logError=o(n)},addRequest:function(n){var l=this;u.call(this.requests,n),h.call(this),n.onSend=function(){l.handleRequest(this),l.respondImmediately?l.respond():l.autoRespond&&!l.responding&&(setTimeout((function(){l.responding=!1,l.respond()}),l.autoRespondAfter||10),l.responding=!0)}},getHTTPMethod:function(n){if(this.fakeHTTPMethods&&/post/i.test(n.method)){var l=(n.requestBody||"").match(/_method=([^\b;]+)/);return l?l[1]:n.method}return n.method},handleRequest:function(n){n.async?u.call(this.queue,n):this.processRequest(n)},logger:function(){},logError:o({}),log:r,respondWith:function(n,l,e){if(1!==arguments.length||"function"==typeof n){if(1===arguments.length&&(e=n,l=n=null),2===arguments.length&&(e=l,l=n,n=null),"string"==typeof l&&""!==l&&/:[0-9]+\//.test(l)){var t=l.match(/^(https?:\/\/.*?):([0-9]+\/.*)$/);l=t[1]+"\\:"+t[2]}u.call(this.responses,{method:n,url:"string"==typeof l&&""!==l?i(l):l,response:"function"==typeof e?e:a(e)})}else this.response=a(n)},respond:function(){arguments.length>0&&this.respondWith.apply(this,arguments);var n=this.queue||[],l=n.splice(0,n.length),e=this;l.forEach((function(n){e.processRequest(n)}))},respondAll:function(){var n;if(!this.respondImmediately)for(this.queue=this.requests.slice(0);n=this.queue.shift();)this.processRequest(n)},processRequest:function(n){try{if(n.aborted)return;var l=this.response||[404,{},""];if(this.responses)for(var e=this.responses.length-1;e>=0;e--)if(d.call(this,this.responses[e],n)){l=this.responses[e].response;break}4!==n.readyState&&(this.log(l,n),n.respond(l[0],l[1],l[2]))}catch(n){this.logError("Fake server request processing",n)}},restore:function(){return this.xhr.restore&&this.xhr.restore.apply(this.xhr,arguments)},getRequest:function(n){return this.requests[n]||null},reset:function(){this.resetBehavior(),this.resetHistory()},resetBehavior:function(){this.responses.length=this.queue.length=0},resetHistory:function(){this.requests.length=this.requestCount=0,this.requestedOnce=this.requestedTwice=this.requestedThrice=this.requested=!1,this.firstRequest=this.secondRequest=this.thirdRequest=this.lastRequest=null}};l.exports=f},{"../configure-logger":91,"../fake-xhr":101,"./log":99,"path-to-regexp":103}],99:[function(n,l,e){var t=n("util").inspect;l.exports=function(n,l){var e;e="Request:\n"+t(l)+"\n\n",e+="Response:\n"+t(n)+"\n\n","function"==typeof this.logger&&this.logger(e)}},{util:108}],100:[function(n,l,e){e.isSupported=function(){try{return Boolean(new Blob)}catch(n){return!1}}()},{}],101:[function(n,l,e){var t="undefined"!=typeof TextEncoder?TextEncoder:n("@sinonjs/text-encoding").TextEncoder,u=n("@sinonjs/commons").global,r=n("../configure-logger"),o=n("../event"),i=n("just-extend"),s="undefined"!=typeof ProgressEvent,a="undefined"!=typeof CustomEvent,c="undefined"!=typeof FormData,d="undefined"!=typeof ArrayBuffer,h=n("./blob").isSupported,f={"Accept-Charset":!0,"Access-Control-Request-Headers":!0,"Access-Control-Request-Method":!0,"Accept-Encoding":!0,Connection:!0,"Content-Length":!0,Cookie:!0,Cookie2:!0,"Content-Transfer-Encoding":!0,Date:!0,DNT:!0,Expect:!0,Host:!0,"Keep-Alive":!0,Origin:!0,Referer:!0,TE:!0,Trailer:!0,"Transfer-Encoding":!0,Upgrade:!0,"User-Agent":!0,Via:!0};function p(){var n=this;["loadstart","progress","abort","error","load","timeout","loadend"].forEach((function(l){n.addEventListener(l,(function(e){var t=n["on"+l];t&&"function"==typeof t&&t.call(this,e)}))}))}function m(n,l){return Object.keys(n).filter((function(n){return n.toLowerCase()===l.toLowerCase()}))[0]||null}function g(n){return!/^Set-Cookie2?$/i.test(n)}function y(n,l){return n instanceof ArrayBuffer?n:new t(l||"utf-8").encode(n).buffer}function v(n){return!n||/(text\/xml)|(application\/xml)|(\+xml)/.test(n)}function w(n){""===n.responseType||"text"===n.responseType?n.response=n.responseText="":n.response=n.responseText=null,n.responseXML=null}function b(n){var l=n.navigator&&"ReactNative"===n.navigator.product,e={XMLHttpRequest:n.XMLHttpRequest};function t(n){p.call(this),this.readyState=t.UNSENT,this.requestHeaders={},this.requestBody=null,this.status=0,this.statusText="",this.upload=new p,this.responseType="",this.response="",this.logError=r(n),e.supportsTimeout&&(this.timeout=0),e.supportsCORS&&(this.withCredentials=!1),"function"==typeof t.onCreate&&t.onCreate(this)}function u(n){if(n.readyState!==t.OPENED)throw new Error("INVALID_STATE_ERR");if(n.sendFlag)throw new Error("INVALID_STATE_ERR")}e.GlobalXMLHttpRequest=n.XMLHttpRequest,e.GlobalActiveXObject=n.ActiveXObject,e.supportsActiveX=void 0!==e.GlobalActiveXObject,e.supportsXHR=void 0!==e.GlobalXMLHttpRequest,e.workingXHR=function(n){return void 0!==n.XMLHttpRequest?n.XMLHttpRequest:!(void 0===n.ActiveXObject)&&function(){return new n.ActiveXObject("MSXML2.XMLHTTP.3.0")}}(n),e.supportsTimeout=e.supportsXHR&&"timeout"in new e.GlobalXMLHttpRequest,e.supportsCORS=l||e.supportsXHR&&"withCredentials"in new e.GlobalXMLHttpRequest;var b=function(n,l,e){switch(e.length){case 0:return n[l]();case 1:return n[l](e[0]);case 2:return n[l](e[0],e[1]);case 3:return n[l](e[0],e[1],e[2]);case 4:return n[l](e[0],e[1],e[2],e[3]);case 5:return n[l](e[0],e[1],e[2],e[3],e[4]);default:throw new Error("Unhandled case")}};function S(n){if(n.readyState!==t.OPENED)throw new Error("INVALID_STATE_ERR - "+n.readyState)}function C(n){w(n),n.errorFlag=!0,n.requestHeaders={},n.responseHeaders={},n.readyState!==t.UNSENT&&n.sendFlag&&n.readyState!==t.DONE&&(n.readyStateChange(t.DONE),n.sendFlag=!1)}t.filters=[],t.addFilter=function(n){this.filters.push(n)},t.defake=function(n,l){var u=new e.workingXHR;["open","setRequestHeader","abort","getResponseHeader","getAllResponseHeaders","addEventListener","overrideMimeType","removeEventListener"].forEach((function(l){n[l]=function(){return b(u,l,arguments)}})),n.send=function(){return u.responseType!==n.responseType&&(u.responseType=n.responseType),b(u,"send",arguments)};var r=function(l){l.forEach((function(l){n[l]=u[l]}))},o=function(){n.readyState=u.readyState,u.readyState>=t.HEADERS_RECEIVED&&r(["status","statusText"]),u.readyState>=t.LOADING&&(r(["response"]),""!==u.responseType&&"text"!==u.responseType||r(["responseText"])),u.readyState!==t.DONE||""!==u.responseType&&"document"!==u.responseType||r(["responseXML"])},i=function(){n.onreadystatechange&&n.onreadystatechange.call(n,{target:n,currentTarget:n})};u.addEventListener?(u.addEventListener("readystatechange",o),Object.keys(n.eventListeners).forEach((function(l){n.eventListeners[l].forEach((function(n){u.addEventListener(l,n.listener,{capture:n.capture,once:n.once})}))})),u.addEventListener("readystatechange",i)):u.onreadystatechange=function(){o(),i()},b(u,"open",l)},t.useFilters=!1,t.parseXML=function(n){if(""!==n)try{if("undefined"!=typeof DOMParser){var l,e=new DOMParser,t="";try{var u=e.parseFromString("INVALID","text/xml").getElementsByTagName("parsererror");u.length&&(t=u[0].namespaceURI)}catch(n){}try{l=e.parseFromString(n,"text/xml")}catch(n){return null}return l.getElementsByTagNameNS(t,"parsererror").length?null:l}var r=new window.ActiveXObject("Microsoft.XMLDOM");return r.async="false",r.loadXML(n),0!==r.parseError.errorCode?null:r}catch(n){}return null},t.statusCodes={100:"Continue",101:"Switching Protocols",200:"OK",201:"Created",202:"Accepted",203:"Non-Authoritative Information",204:"No Content",205:"Reset Content",206:"Partial Content",207:"Multi-Status",300:"Multiple Choice",301:"Moved Permanently",302:"Found",303:"See Other",304:"Not Modified",305:"Use Proxy",307:"Temporary Redirect",400:"Bad Request",401:"Unauthorized",402:"Payment Required",403:"Forbidden",404:"Not Found",405:"Method Not Allowed",406:"Not Acceptable",407:"Proxy Authentication Required",408:"Request Timeout",409:"Conflict",410:"Gone",411:"Length Required",412:"Precondition Failed",413:"Request Entity Too Large",414:"Request-URI Too Long",415:"Unsupported Media Type",416:"Requested Range Not Satisfiable",417:"Expectation Failed",422:"Unprocessable Entity",500:"Internal Server Error",501:"Not Implemented",502:"Bad Gateway",503:"Service Unavailable",504:"Gateway Timeout",505:"HTTP Version Not Supported"},i(t.prototype,o.EventTarget,{async:!0,open:function(n,l,e,u,r){if(this.method=n,this.url=l,this.async="boolean"!=typeof e||e,this.username=u,this.password=r,w(this),this.requestHeaders={},this.sendFlag=!1,!0===t.useFilters){var o=arguments;if(t.filters.some((function(n){return n.apply(this,o)})))return void t.defake(this,arguments)}this.readyStateChange(t.OPENED)},readyStateChange:function(n){this.readyState=n;var l,e,u=new o.Event("readystatechange",!1,!1,this);if("function"==typeof this.onreadystatechange)try{this.onreadystatechange(u)}catch(n){this.logError("Fake XHR onreadystatechange handler",n)}this.readyState===t.DONE&&(this.timedOut||this.aborted||0===this.status?(e={loaded:0,total:0},l=(this.timedOut?"timeout":this.aborted&&"abort")||"error"):(e={loaded:100,total:100},l="load"),s&&(this.upload.dispatchEvent(new o.ProgressEvent("progress",e,this)),this.upload.dispatchEvent(new o.ProgressEvent(l,e,this)),this.upload.dispatchEvent(new o.ProgressEvent("loadend",e,this))),this.dispatchEvent(new o.ProgressEvent("progress",e,this)),this.dispatchEvent(new o.ProgressEvent(l,e,this)),this.dispatchEvent(new o.ProgressEvent("loadend",e,this))),this.dispatchEvent(u)},setRequestHeader:function(n,l){if("string"!=typeof l)throw new TypeError("By RFC7230, section 3.2.4, header values should be strings. Got "+typeof l);u(this);var e=!0;if("function"==typeof this.unsafeHeadersEnabled&&(e=this.unsafeHeadersEnabled()),e&&(null!==m(f,n)||/^(Sec-|Proxy-)/i.test(n)))throw new Error('Refused to set unsafe header "'+n+'"');l=function(n){return n.replace(/^[\x09\x0A\x0D\x20]+|[\x09\x0A\x0D\x20]+$/g,"")}(l);var t=m(this.requestHeaders,n);t?this.requestHeaders[t]+=", "+l:this.requestHeaders[n]=l},setStatus:function(n){var l="number"==typeof n?n:200;S(this),this.status=l,this.statusText=t.statusCodes[l]},setResponseHeaders:function(n){S(this);var l=this.responseHeaders={};Object.keys(n).forEach((function(e){l[e]=n[e]})),this.async?this.readyStateChange(t.HEADERS_RECEIVED):this.readyState=t.HEADERS_RECEIVED},send:function(n){if(u(this),!/^(head)$/i.test(this.method)){var l=m(this.requestHeaders,"Content-Type");if(this.requestHeaders[l]){var r=this.requestHeaders[l].split(";");this.requestHeaders[l]=r[0]+";charset=utf-8"}else!c||n instanceof FormData||(this.requestHeaders["Content-Type"]="text/plain;charset=utf-8");this.requestBody=n}if(this.errorFlag=!1,this.sendFlag=this.async,w(this),"function"==typeof this.onSend&&this.onSend(this),e.supportsTimeout&&"object"==typeof setInterval.clock&&"object"==typeof Date.clock)var i=Date.now(),s=this,a=setInterval((function(){s.readyState===t.UNSENT||s.readyState===t.DONE?clearInterval(a):"number"==typeof s.timeout&&s.timeout>0&&Date.now()>=i+s.timeout&&(s.triggerTimeout(),clearInterval(a))}),1);this.dispatchEvent(new o.Event("loadstart",!1,!1,this))},abort:function(){this.aborted=!0,C(this),this.readyState=t.UNSENT},error:function(){w(this),this.errorFlag=!0,this.requestHeaders={},this.responseHeaders={},this.readyStateChange(t.DONE)},triggerTimeout:function(){e.supportsTimeout&&(this.timedOut=!0,C(this))},getResponseHeader:function(n){return this.readyState<t.HEADERS_RECEIVED||/^Set-Cookie2?$/i.test(n)?null:(n=m(this.responseHeaders,n),this.responseHeaders[n]||null)},getAllResponseHeaders:function(){if(this.readyState<t.HEADERS_RECEIVED)return"";var n=this.responseHeaders;return Object.keys(n).filter(g).reduce((function(l,e){return l+(e+": ")+n[e]+"\r\n"}),"")},setResponseBody:function(n){!function(n){if(n.readyState===t.DONE)throw new Error("Request done")}(this),function(n){if(n.async&&n.readyState!==t.HEADERS_RECEIVED)throw new Error("No headers received")}(this),function(n,l){var e=null,t="string"==typeof n;if("arraybuffer"===l?t||n instanceof ArrayBuffer||((e=new Error("Attempted to respond to fake XMLHttpRequest with "+n+", which is not a string or ArrayBuffer.")).name="InvalidBodyException"):t||((e=new Error("Attempted to respond to fake XMLHttpRequest with "+n+", which is not a string.")).name="InvalidBodyException"),e)throw e}(n,this.responseType);var l=this.overriddenMimeType||this.getResponseHeader("Content-Type"),e=""===this.responseType||"text"===this.responseType;if(w(this),this.async){var u=this.chunkSize||10,r=0;do{this.readyStateChange(t.LOADING),e&&(this.responseText=this.response+=n.substring(r,r+u)),r+=u}while(r<n.length)}this.response=function(n,l,e){if(""===n||"text"===n)return e;if(d&&"arraybuffer"===n)return y(e);if("json"===n)try{return JSON.parse(e)}catch(n){return null}else{if(h&&"blob"===n){var u={};return l&&(u.type=l),new Blob([y(e)],u)}if("document"===n)return v(l)?t.parseXML(e):null}throw new Error("Invalid responseType "+n)}(this.responseType,l,n),e&&(this.responseText=this.response),"document"===this.responseType?this.responseXML=this.response:""===this.responseType&&v(l)&&(this.responseXML=t.parseXML(this.responseText)),this.readyStateChange(t.DONE)},respond:function(n,l,e){this.setStatus(n),this.setResponseHeaders(l||{}),this.setResponseBody(e||"")},uploadProgress:function(n){s&&this.upload.dispatchEvent(new o.ProgressEvent("progress",n,this.upload))},downloadProgress:function(n){s&&this.dispatchEvent(new o.ProgressEvent("progress",n,this))},uploadError:function(n){a&&this.upload.dispatchEvent(new o.CustomEvent("error",{detail:n}))},overrideMimeType:function(n){if(this.readyState>=t.LOADING)throw new Error("INVALID_STATE_ERR");this.overriddenMimeType=n}});var D={UNSENT:0,OPENED:1,HEADERS_RECEIVED:2,LOADING:3,DONE:4};return i(t,D),i(t.prototype,D),{xhr:e,FakeXMLHttpRequest:t,useFakeXMLHttpRequest:function(){return t.restore=function(l){e.supportsXHR&&(n.XMLHttpRequest=e.GlobalXMLHttpRequest),e.supportsActiveX&&(n.ActiveXObject=e.GlobalActiveXObject),delete t.restore,!0!==l&&delete t.onCreate},e.supportsXHR&&(n.XMLHttpRequest=t),e.supportsActiveX&&(n.ActiveXObject=function(n){return"Microsoft.XMLHTTP"===n||/^Msxml2\.XMLHTTP/i.test(n)?new t:new e.GlobalActiveXObject(n)}),t}}}p.prototype=o.EventTarget,l.exports=i(b(u),{fakeXMLHttpRequestFor:b})},{"../configure-logger":91,"../event":95,"./blob":100,"@sinonjs/commons":45,"@sinonjs/text-encoding":84,"just-extend":89}],102:[function(n,l,e){l.exports={fakeServer:n("./fake-server"),fakeServerWithClock:n("./fake-server/fake-server-with-clock"),fakeXhr:n("./fake-xhr")}},{"./fake-server":98,"./fake-server/fake-server-with-clock":97,"./fake-xhr":101}],103:[function(n,l,e){var t=n("isarray");l.exports=function n(l,e,u){return t(e)||(u=e||u,e=[]),u=u||{},l instanceof RegExp?function(n,l){var e=n.source.match(/\((?!\?)/g);if(e)for(var t=0;t<e.length;t++)l.push({name:t,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return c(n,l)}(l,e):t(l)?function(l,e,t){for(var u=[],r=0;r<l.length;r++)u.push(n(l[r],e,t).source);return c(new RegExp("(?:"+u.join("|")+")",d(t)),e)}(l,e,u):function(n,l,e){return h(r(n,e),l,e)}(l,e,u)},l.exports.parse=r,l.exports.compile=function(n,l){return i(r(n,l),l)},l.exports.tokensToFunction=i,l.exports.tokensToRegExp=h;var u=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function r(n,l){for(var e,t=[],r=0,o=0,i="",c=l&&l.delimiter||"/";null!=(e=u.exec(n));){var d=e[0],h=e[1],f=e.index;if(i+=n.slice(o,f),o=f+d.length,h)i+=h[1];else{var p=n[o],m=e[2],g=e[3],y=e[4],v=e[5],w=e[6],b=e[7];i&&(t.push(i),i="");var S=null!=m&&null!=p&&p!==m,C="+"===w||"*"===w,D="?"===w||"*"===w,E=e[2]||c,_=y||v;t.push({name:g||r++,prefix:m||"",delimiter:E,optional:D,repeat:C,partial:S,asterisk:!!b,pattern:_?a(_):b?".*":"[^"+s(E)+"]+?"})}}return o<n.length&&(i+=n.substr(o)),i&&t.push(i),t}function o(n){return encodeURI(n).replace(/[\/?#]/g,(function(n){return"%"+n.charCodeAt(0).toString(16).toUpperCase()}))}function i(n,l){for(var e=new Array(n.length),u=0;u<n.length;u++)"object"==typeof n[u]&&(e[u]=new RegExp("^(?:"+n[u].pattern+")$",d(l)));return function(l,u){for(var r="",i=l||{},s=(u||{}).pretty?o:encodeURIComponent,a=0;a<n.length;a++){var c=n[a];if("string"!=typeof c){var d,h=i[c.name];if(null==h){if(c.optional){c.partial&&(r+=c.prefix);continue}throw new TypeError('Expected "'+c.name+'" to be defined')}if(t(h)){if(!c.repeat)throw new TypeError('Expected "'+c.name+'" to not repeat, but received `'+JSON.stringify(h)+"`");if(0===h.length){if(c.optional)continue;throw new TypeError('Expected "'+c.name+'" to not be empty')}for(var f=0;f<h.length;f++){if(d=s(h[f]),!e[a].test(d))throw new TypeError('Expected all "'+c.name+'" to match "'+c.pattern+'", but received `'+JSON.stringify(d)+"`");r+=(0===f?c.prefix:c.delimiter)+d}}else{if(d=c.asterisk?encodeURI(h).replace(/[?#]/g,(function(n){return"%"+n.charCodeAt(0).toString(16).toUpperCase()})):s(h),!e[a].test(d))throw new TypeError('Expected "'+c.name+'" to match "'+c.pattern+'", but received "'+d+'"');r+=c.prefix+d}}else r+=c}return r}}function s(n){return n.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function a(n){return n.replace(/([=!:$\/()])/g,"\\$1")}function c(n,l){return n.keys=l,n}function d(n){return n&&n.sensitive?"":"i"}function h(n,l,e){t(l)||(e=l||e,l=[]);for(var u=(e=e||{}).strict,r=!1!==e.end,o="",i=0;i<n.length;i++){var a=n[i];if("string"==typeof a)o+=s(a);else{var h=s(a.prefix),f="(?:"+a.pattern+")";l.push(a),a.repeat&&(f+="(?:"+h+f+")*"),o+=f=a.optional?a.partial?h+"("+f+")?":"(?:"+h+"("+f+"))?":h+"("+f+")"}}var p=s(e.delimiter||"/"),m=o.slice(-p.length)===p;return u||(o=(m?o.slice(0,-p.length):o)+"(?:"+p+"(?=$))?"),o+=r?"$":u&&m?"":"(?="+p+"|$)",c(new RegExp("^"+o,d(e)),l)}},{isarray:88}],104:[function(n,l,e){l.exports={stdout:!1,stderr:!1}},{}],105:[function(n,l,e){!function(n,t){"object"==typeof e&&void 0!==l?l.exports=t():"function"==typeof define&&__webpack_require__.amdO?define(t):n.typeDetect=t()}(this,(function(){var n="function"==typeof Promise,l="object"==typeof self?self:global,e="undefined"!=typeof Symbol,t="undefined"!=typeof Map,u="undefined"!=typeof Set,r="undefined"!=typeof WeakMap,o="undefined"!=typeof WeakSet,i="undefined"!=typeof DataView,s=e&&void 0!==Symbol.iterator,a=e&&void 0!==Symbol.toStringTag,c=u&&"function"==typeof Set.prototype.entries,d=t&&"function"==typeof Map.prototype.entries,h=c&&Object.getPrototypeOf((new Set).entries()),f=d&&Object.getPrototypeOf((new Map).entries()),p=s&&"function"==typeof Array.prototype[Symbol.iterator],m=p&&Object.getPrototypeOf([][Symbol.iterator]()),g=s&&"function"==typeof String.prototype[Symbol.iterator],y=g&&Object.getPrototypeOf(""[Symbol.iterator]());return function(e){var s=typeof e;if("object"!==s)return s;if(null===e)return"null";if(e===l)return"global";if(Array.isArray(e)&&(!1===a||!(Symbol.toStringTag in e)))return"Array";if("object"==typeof window&&null!==window){if("object"==typeof window.location&&e===window.location)return"Location";if("object"==typeof window.document&&e===window.document)return"Document";if("object"==typeof window.navigator){if("object"==typeof window.navigator.mimeTypes&&e===window.navigator.mimeTypes)return"MimeTypeArray";if("object"==typeof window.navigator.plugins&&e===window.navigator.plugins)return"PluginArray"}if(("function"==typeof window.HTMLElement||"object"==typeof window.HTMLElement)&&e instanceof window.HTMLElement){if("BLOCKQUOTE"===e.tagName)return"HTMLQuoteElement";if("TD"===e.tagName)return"HTMLTableDataCellElement";if("TH"===e.tagName)return"HTMLTableHeaderCellElement"}}var c=a&&e[Symbol.toStringTag];if("string"==typeof c)return c;var d=Object.getPrototypeOf(e);return d===RegExp.prototype?"RegExp":d===Date.prototype?"Date":n&&d===Promise.prototype?"Promise":u&&d===Set.prototype?"Set":t&&d===Map.prototype?"Map":o&&d===WeakSet.prototype?"WeakSet":r&&d===WeakMap.prototype?"WeakMap":i&&d===DataView.prototype?"DataView":t&&d===f?"Map Iterator":u&&d===h?"Set Iterator":p&&d===m?"Array Iterator":g&&d===y?"String Iterator":null===d?"Object":Object.prototype.toString.call(e).slice(8,-1)}}))},{}],106:[function(n,l,e){"function"==typeof Object.create?l.exports=function(n,l){n.super_=l,n.prototype=Object.create(l.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}})}:l.exports=function(n,l){n.super_=l;var e=function(){};e.prototype=l.prototype,n.prototype=new e,n.prototype.constructor=n}},{}],107:[function(n,l,e){l.exports=function(n){return n&&"object"==typeof n&&"function"==typeof n.copy&&"function"==typeof n.fill&&"function"==typeof n.readUInt8}},{}],108:[function(n,l,e){var t=/%[sdj%]/g;e.format=function(n){if(!g(n)){for(var l=[],e=0;e<arguments.length;e++)l.push(o(arguments[e]));return l.join(" ")}e=1;for(var u=arguments,r=u.length,i=String(n).replace(t,(function(n){if("%%"===n)return"%";if(e>=r)return n;switch(n){case"%s":return String(u[e++]);case"%d":return Number(u[e++]);case"%j":try{return JSON.stringify(u[e++])}catch(n){return"[Circular]"}default:return n}})),s=u[e];e<r;s=u[++e])p(s)||!w(s)?i+=" "+s:i+=" "+o(s);return i},e.deprecate=function(n,l){if(y(global.process))return function(){return e.deprecate(n,l).apply(this,arguments)};if(!0===process.noDeprecation)return n;var t=!1;return function(){if(!t){if(process.throwDeprecation)throw new Error(l);process.traceDeprecation?console.trace(l):console.error(l),t=!0}return n.apply(this,arguments)}};var u,r={};function o(n,l){var t={seen:[],stylize:s};return arguments.length>=3&&(t.depth=arguments[2]),arguments.length>=4&&(t.colors=arguments[3]),f(l)?t.showHidden=l:l&&e._extend(t,l),y(t.showHidden)&&(t.showHidden=!1),y(t.depth)&&(t.depth=2),y(t.colors)&&(t.colors=!1),y(t.customInspect)&&(t.customInspect=!0),t.colors&&(t.stylize=i),a(t,n,t.depth)}function i(n,l){var e=o.styles[l];return e?"["+o.colors[e][0]+"m"+n+"["+o.colors[e][1]+"m":n}function s(n,l){return n}function a(n,l,t){if(n.customInspect&&l&&C(l.inspect)&&l.inspect!==e.inspect&&(!l.constructor||l.constructor.prototype!==l)){var u=l.inspect(t,n);return g(u)||(u=a(n,u,t)),u}var r=function(n,l){if(y(l))return n.stylize("undefined","undefined");if(g(l)){var e="'"+JSON.stringify(l).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return n.stylize(e,"string")}return m(l)?n.stylize(""+l,"number"):f(l)?n.stylize(""+l,"boolean"):p(l)?n.stylize("null","null"):void 0}(n,l);if(r)return r;var o=Object.keys(l),i=function(n){var l={};return n.forEach((function(n,e){l[n]=!0})),l}(o);if(n.showHidden&&(o=Object.getOwnPropertyNames(l)),S(l)&&(o.indexOf("message")>=0||o.indexOf("description")>=0))return c(l);if(0===o.length){if(C(l)){var s=l.name?": "+l.name:"";return n.stylize("[Function"+s+"]","special")}if(v(l))return n.stylize(RegExp.prototype.toString.call(l),"regexp");if(b(l))return n.stylize(Date.prototype.toString.call(l),"date");if(S(l))return c(l)}var w,D="",E=!1,_=["{","}"];return h(l)&&(E=!0,_=["[","]"]),C(l)&&(D=" [Function"+(l.name?": "+l.name:"")+"]"),v(l)&&(D=" "+RegExp.prototype.toString.call(l)),b(l)&&(D=" "+Date.prototype.toUTCString.call(l)),S(l)&&(D=" "+c(l)),0!==o.length||E&&0!=l.length?t<0?v(l)?n.stylize(RegExp.prototype.toString.call(l),"regexp"):n.stylize("[Object]","special"):(n.seen.push(l),w=E?function(n,l,e,t,u){for(var r=[],o=0,i=l.length;o<i;++o)k(l,String(o))?r.push(d(n,l,e,t,String(o),!0)):r.push("");return u.forEach((function(u){u.match(/^\d+$/)||r.push(d(n,l,e,t,u,!0))})),r}(n,l,t,i,o):o.map((function(e){return d(n,l,t,i,e,E)})),n.seen.pop(),function(n,l,e){return n.reduce((function(n,l){return l.indexOf("\n"),n+l.replace(/\u001b\[\d\d?m/g,"").length+1}),0)>60?e[0]+(""===l?"":l+"\n ")+" "+n.join(",\n  ")+" "+e[1]:e[0]+l+" "+n.join(", ")+" "+e[1]}(w,D,_)):_[0]+D+_[1]}function c(n){return"["+Error.prototype.toString.call(n)+"]"}function d(n,l,e,t,u,r){var o,i,s;if((s=Object.getOwnPropertyDescriptor(l,u)||{value:l[u]}).get?i=s.set?n.stylize("[Getter/Setter]","special"):n.stylize("[Getter]","special"):s.set&&(i=n.stylize("[Setter]","special")),k(t,u)||(o="["+u+"]"),i||(n.seen.indexOf(s.value)<0?(i=p(e)?a(n,s.value,null):a(n,s.value,e-1)).indexOf("\n")>-1&&(i=r?i.split("\n").map((function(n){return"  "+n})).join("\n").substr(2):"\n"+i.split("\n").map((function(n){return"   "+n})).join("\n")):i=n.stylize("[Circular]","special")),y(o)){if(r&&u.match(/^\d+$/))return i;(o=JSON.stringify(""+u)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(o=o.substr(1,o.length-2),o=n.stylize(o,"name")):(o=o.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),o=n.stylize(o,"string"))}return o+": "+i}function h(n){return Array.isArray(n)}function f(n){return"boolean"==typeof n}function p(n){return null===n}function m(n){return"number"==typeof n}function g(n){return"string"==typeof n}function y(n){return void 0===n}function v(n){return w(n)&&"[object RegExp]"===D(n)}function w(n){return"object"==typeof n&&null!==n}function b(n){return w(n)&&"[object Date]"===D(n)}function S(n){return w(n)&&("[object Error]"===D(n)||n instanceof Error)}function C(n){return"function"==typeof n}function D(n){return Object.prototype.toString.call(n)}function E(n){return n<10?"0"+n.toString(10):n.toString(10)}e.debuglog=function(n){if(y(u)&&(u=process.env.NODE_DEBUG||""),n=n.toUpperCase(),!r[n])if(new RegExp("\\b"+n+"\\b","i").test(u)){var l=process.pid;r[n]=function(){var t=e.format.apply(e,arguments);console.error("%s %d: %s",n,l,t)}}else r[n]=function(){};return r[n]},e.inspect=o,o.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},o.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},e.isArray=h,e.isBoolean=f,e.isNull=p,e.isNullOrUndefined=function(n){return null==n},e.isNumber=m,e.isString=g,e.isSymbol=function(n){return"symbol"==typeof n},e.isUndefined=y,e.isRegExp=v,e.isObject=w,e.isDate=b,e.isError=S,e.isFunction=C,e.isPrimitive=function(n){return null===n||"boolean"==typeof n||"number"==typeof n||"string"==typeof n||"symbol"==typeof n||void 0===n},e.isBuffer=n("./support/isBuffer");var _=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function k(n,l){return Object.prototype.hasOwnProperty.call(n,l)}e.log=function(){var n,l;console.log("%s - %s",(l=[E((n=new Date).getHours()),E(n.getMinutes()),E(n.getSeconds())].join(":"),[n.getDate(),_[n.getMonth()],l].join(" ")),e.format.apply(e,arguments))},e.inherits=n("inherits"),e._extend=function(n,l){if(!l||!w(l))return n;for(var e=Object.keys(l),t=e.length;t--;)n[e[t]]=l[e[t]];return n}},{"./support/isBuffer":107,inherits:106}]},{},[1]);const __WEBPACK_DEFAULT_EXPORT__=sinon,_assert=sinon.assert,_serverPrototype=sinon.serverPrototype,_getFakes=sinon.getFakes,_getRestorers=sinon.getRestorers,_createStubInstance=sinon.createStubInstance,_inject=sinon.inject,_mock=sinon.mock,_reset=sinon.reset,_resetBehavior=sinon.resetBehavior,_resetHistory=sinon.resetHistory,_restore=sinon.restore,_restoreContext=sinon.restoreContext,_replace=sinon.replace,_replaceGetter=sinon.replaceGetter,_replaceSetter=sinon.replaceSetter,_spy=sinon.spy,_stub=sinon.stub,_fake=sinon.fake,_useFakeTimers=sinon.useFakeTimers,_verify=sinon.verify,_verifyAndRestore=sinon.verifyAndRestore,_useFakeServer=sinon.useFakeServer,_useFakeXMLHttpRequest=sinon.useFakeXMLHttpRequest,_usingPromise=sinon.usingPromise,_createSandbox=sinon.createSandbox,_match=sinon.match,_restoreObject=sinon.restoreObject,_expectation=sinon.expectation,_defaultConfig=sinon.defaultConfig,_setFormatter=sinon.setFormatter,_timers=sinon.timers,_xhr=sinon.xhr,_FakeXMLHttpRequest=sinon.FakeXMLHttpRequest,_fakeServer=sinon.fakeServer,_fakeServerWithClock=sinon.fakeServerWithClock,_createFakeServer=sinon.createFakeServer,_createFakeServerWithClock=sinon.createFakeServerWithClock,_addBehavior=sinon.addBehavior},1395:n=>{function l(n){var l=new Error("Cannot find module '"+n+"'");throw l.code="MODULE_NOT_FOUND",l}l.keys=()=>[],l.resolve=l,l.id=1395,n.exports=l},5855:function(n){var l;l=function(){"use strict";var n="function"==typeof Promise,l="object"==typeof self?self:global,e="undefined"!=typeof Symbol,t="undefined"!=typeof Map,u="undefined"!=typeof Set,r="undefined"!=typeof WeakMap,o="undefined"!=typeof WeakSet,i="undefined"!=typeof DataView,s=e&&void 0!==Symbol.iterator,a=e&&void 0!==Symbol.toStringTag,c=u&&"function"==typeof Set.prototype.entries,d=t&&"function"==typeof Map.prototype.entries,h=c&&Object.getPrototypeOf((new Set).entries()),f=d&&Object.getPrototypeOf((new Map).entries()),p=s&&"function"==typeof Array.prototype[Symbol.iterator],m=p&&Object.getPrototypeOf([][Symbol.iterator]()),g=s&&"function"==typeof String.prototype[Symbol.iterator],y=g&&Object.getPrototypeOf(""[Symbol.iterator]());return function(e){var s=typeof e;if("object"!==s)return s;if(null===e)return"null";if(e===l)return"global";if(Array.isArray(e)&&(!1===a||!(Symbol.toStringTag in e)))return"Array";if("object"==typeof window&&null!==window){if("object"==typeof window.location&&e===window.location)return"Location";if("object"==typeof window.document&&e===window.document)return"Document";if("object"==typeof window.navigator){if("object"==typeof window.navigator.mimeTypes&&e===window.navigator.mimeTypes)return"MimeTypeArray";if("object"==typeof window.navigator.plugins&&e===window.navigator.plugins)return"PluginArray"}if(("function"==typeof window.HTMLElement||"object"==typeof window.HTMLElement)&&e instanceof window.HTMLElement){if("BLOCKQUOTE"===e.tagName)return"HTMLQuoteElement";if("TD"===e.tagName)return"HTMLTableDataCellElement";if("TH"===e.tagName)return"HTMLTableHeaderCellElement"}}var c=a&&e[Symbol.toStringTag];if("string"==typeof c)return c;var d=Object.getPrototypeOf(e);return d===RegExp.prototype?"RegExp":d===Date.prototype?"Date":n&&d===Promise.prototype?"Promise":u&&d===Set.prototype?"Set":t&&d===Map.prototype?"Map":o&&d===WeakSet.prototype?"WeakSet":r&&d===WeakMap.prototype?"WeakMap":i&&d===DataView.prototype?"DataView":t&&d===f?"Map Iterator":u&&d===h?"Set Iterator":p&&d===m?"Array Iterator":g&&d===y?"String Iterator":null===d?"Object":Object.prototype.toString.call(e).slice(8,-1)}},n.exports=l()},5010:function(n,l){var e;e=function(n){"use strict";const l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?Symbol:n=>`Symbol(${n})`;function e(){}const t="undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:void 0;function u(n){return"object"==typeof n&&null!==n||"function"==typeof n}const r=e,o=Promise,i=Promise.prototype.then,s=Promise.resolve.bind(o),a=Promise.reject.bind(o);function c(n){return new o(n)}function d(n){return s(n)}function h(n){return a(n)}function f(n,l,e){return i.call(n,l,e)}function p(n,l,e){f(f(n,l,e),void 0,r)}function m(n,l){p(n,l)}function g(n,l){p(n,void 0,l)}function y(n,l,e){return f(n,l,e)}function v(n){f(n,void 0,r)}const w=(()=>{const n=t&&t.queueMicrotask;if("function"==typeof n)return n;const l=d(void 0);return n=>f(l,n)})();function b(n,l,e){if("function"!=typeof n)throw new TypeError("Argument is not a function");return Function.prototype.apply.call(n,l,e)}function S(n,l,e){try{return d(b(n,l,e))}catch(n){return h(n)}}class C{constructor(){this._cursor=0,this._size=0,this._front={_elements:[],_next:void 0},this._back=this._front,this._cursor=0,this._size=0}get length(){return this._size}push(n){const l=this._back;let e=l;16383===l._elements.length&&(e={_elements:[],_next:void 0}),l._elements.push(n),e!==l&&(this._back=e,l._next=e),++this._size}shift(){const n=this._front;let l=n;const e=this._cursor;let t=e+1;const u=n._elements,r=u[e];return 16384===t&&(l=n._next,t=0),--this._size,this._cursor=t,n!==l&&(this._front=l),u[e]=void 0,r}forEach(n){let l=this._cursor,e=this._front,t=e._elements;for(;!(l===t.length&&void 0===e._next||l===t.length&&(e=e._next,t=e._elements,l=0,0===t.length));)n(t[l]),++l}peek(){const n=this._front,l=this._cursor;return n._elements[l]}}function D(n,l){n._ownerReadableStream=l,l._reader=n,"readable"===l._state?x(n):"closed"===l._state?function(n){x(n),I(n)}(n):T(n,l._storedError)}function E(n,l){return Se(n._ownerReadableStream,l)}function _(n){"readable"===n._ownerReadableStream._state?P(n,new TypeError("Reader was released and can no longer be used to monitor the stream's closedness")):function(n){T(n,new TypeError("Reader was released and can no longer be used to monitor the stream's closedness"))}(n),n._ownerReadableStream._reader=void 0,n._ownerReadableStream=void 0}function k(n){return new TypeError("Cannot "+n+" a stream using a released reader")}function x(n){n._closedPromise=c(((l,e)=>{n._closedPromise_resolve=l,n._closedPromise_reject=e}))}function T(n,l){x(n),P(n,l)}function P(n,l){void 0!==n._closedPromise_reject&&(v(n._closedPromise),n._closedPromise_reject(l),n._closedPromise_resolve=void 0,n._closedPromise_reject=void 0)}function I(n){void 0!==n._closedPromise_resolve&&(n._closedPromise_resolve(void 0),n._closedPromise_resolve=void 0,n._closedPromise_reject=void 0)}const A=l("[[AbortSteps]]"),O=l("[[ErrorSteps]]"),R=l("[[CancelSteps]]"),F=l("[[PullSteps]]"),L=Number.isFinite||function(n){return"number"==typeof n&&isFinite(n)},$=Math.trunc||function(n){return n<0?Math.ceil(n):Math.floor(n)};function j(n,l){if(void 0!==n&&"object"!=typeof(e=n)&&"function"!=typeof e)throw new TypeError(`${l} is not an object.`);var e}function M(n,l){if("function"!=typeof n)throw new TypeError(`${l} is not a function.`)}function N(n,l){if(!function(n){return"object"==typeof n&&null!==n||"function"==typeof n}(n))throw new TypeError(`${l} is not an object.`)}function B(n,l,e){if(void 0===n)throw new TypeError(`Parameter ${l} is required in '${e}'.`)}function H(n,l,e){if(void 0===n)throw new TypeError(`${l} is required in '${e}'.`)}function U(n){return Number(n)}function q(n){return 0===n?0:n}function W(n,l){const e=Number.MAX_SAFE_INTEGER;let t=Number(n);if(t=q(t),!L(t))throw new TypeError(`${l} is not a finite number`);if(t=function(n){return q($(n))}(t),t<0||t>e)throw new TypeError(`${l} is outside the accepted range of 0 to ${e}, inclusive`);return L(t)&&0!==t?t:0}function z(n,l){if(!we(n))throw new TypeError(`${l} is not a ReadableStream.`)}function V(n){return new Z(n)}function G(n,l){n._reader._readRequests.push(l)}function K(n,l,e){const t=n._reader._readRequests.shift();e?t._closeSteps():t._chunkSteps(l)}function X(n){return n._reader._readRequests.length}function J(n){const l=n._reader;return void 0!==l&&!!Y(l)}class Z{constructor(n){if(B(n,1,"ReadableStreamDefaultReader"),z(n,"First parameter"),be(n))throw new TypeError("This stream has already been locked for exclusive reading by another reader");D(this,n),this._readRequests=new C}get closed(){return Y(this)?this._closedPromise:h(nn("closed"))}cancel(n=void 0){return Y(this)?void 0===this._ownerReadableStream?h(k("cancel")):E(this,n):h(nn("cancel"))}read(){if(!Y(this))return h(nn("read"));if(void 0===this._ownerReadableStream)return h(k("read from"));let n,l;const e=c(((e,t)=>{n=e,l=t}));return Q(this,{_chunkSteps:l=>n({value:l,done:!1}),_closeSteps:()=>n({value:void 0,done:!0}),_errorSteps:n=>l(n)}),e}releaseLock(){if(!Y(this))throw nn("releaseLock");if(void 0!==this._ownerReadableStream){if(this._readRequests.length>0)throw new TypeError("Tried to release a reader lock when that reader has pending read() calls un-settled");_(this)}}}function Y(n){return!!u(n)&&!!Object.prototype.hasOwnProperty.call(n,"_readRequests")&&n instanceof Z}function Q(n,l){const e=n._ownerReadableStream;e._disturbed=!0,"closed"===e._state?l._closeSteps():"errored"===e._state?l._errorSteps(e._storedError):e._readableStreamController[F](l)}function nn(n){return new TypeError(`ReadableStreamDefaultReader.prototype.${n} can only be used on a ReadableStreamDefaultReader`)}Object.defineProperties(Z.prototype,{cancel:{enumerable:!0},read:{enumerable:!0},releaseLock:{enumerable:!0},closed:{enumerable:!0}}),"symbol"==typeof l.toStringTag&&Object.defineProperty(Z.prototype,l.toStringTag,{value:"ReadableStreamDefaultReader",configurable:!0});const ln=Object.getPrototypeOf(Object.getPrototypeOf((async function*(){})).prototype);class en{constructor(n,l){this._ongoingPromise=void 0,this._isFinished=!1,this._reader=n,this._preventCancel=l}next(){const n=()=>this._nextSteps();return this._ongoingPromise=this._ongoingPromise?y(this._ongoingPromise,n,n):n(),this._ongoingPromise}return(n){const l=()=>this._returnSteps(n);return this._ongoingPromise?y(this._ongoingPromise,l,l):l()}_nextSteps(){if(this._isFinished)return Promise.resolve({value:void 0,done:!0});const n=this._reader;if(void 0===n._ownerReadableStream)return h(k("iterate"));let l,e;const t=c(((n,t)=>{l=n,e=t}));return Q(n,{_chunkSteps:n=>{this._ongoingPromise=void 0,w((()=>l({value:n,done:!1})))},_closeSteps:()=>{this._ongoingPromise=void 0,this._isFinished=!0,_(n),l({value:void 0,done:!0})},_errorSteps:l=>{this._ongoingPromise=void 0,this._isFinished=!0,_(n),e(l)}}),t}_returnSteps(n){if(this._isFinished)return Promise.resolve({value:n,done:!0});this._isFinished=!0;const l=this._reader;if(void 0===l._ownerReadableStream)return h(k("finish iterating"));if(!this._preventCancel){const e=E(l,n);return _(l),y(e,(()=>({value:n,done:!0})))}return _(l),d({value:n,done:!0})}}const tn={next(){return un(this)?this._asyncIteratorImpl.next():h(rn("next"))},return(n){return un(this)?this._asyncIteratorImpl.return(n):h(rn("return"))}};function un(n){if(!u(n))return!1;if(!Object.prototype.hasOwnProperty.call(n,"_asyncIteratorImpl"))return!1;try{return n._asyncIteratorImpl instanceof en}catch(n){return!1}}function rn(n){return new TypeError(`ReadableStreamAsyncIterator.${n} can only be used on a ReadableSteamAsyncIterator`)}void 0!==ln&&Object.setPrototypeOf(tn,ln);const on=Number.isNaN||function(n){return n!=n};function sn(n){return n.slice()}function an(n,l,e,t,u){new Uint8Array(n).set(new Uint8Array(e,t,u),l)}function cn(n,l,e){if(n.slice)return n.slice(l,e);const t=e-l,u=new ArrayBuffer(t);return an(u,0,n,l,t),u}function dn(n){const l=cn(n.buffer,n.byteOffset,n.byteOffset+n.byteLength);return new Uint8Array(l)}function hn(n){const l=n._queue.shift();return n._queueTotalSize-=l.size,n._queueTotalSize<0&&(n._queueTotalSize=0),l.value}function fn(n,l,e){if("number"!=typeof(t=e)||on(t)||t<0||e===1/0)throw new RangeError("Size must be a finite, non-NaN, non-negative number.");var t;n._queue.push({value:l,size:e}),n._queueTotalSize+=e}function pn(n){n._queue=new C,n._queueTotalSize=0}class mn{constructor(){throw new TypeError("Illegal constructor")}get view(){if(!vn(this))throw Bn("view");return this._view}respond(n){if(!vn(this))throw Bn("respond");if(B(n,1,"respond"),n=W(n,"First parameter"),void 0===this._associatedReadableByteStreamController)throw new TypeError("This BYOB request has been invalidated");this._view.buffer,jn(this._associatedReadableByteStreamController,n)}respondWithNewView(n){if(!vn(this))throw Bn("respondWithNewView");if(B(n,1,"respondWithNewView"),!ArrayBuffer.isView(n))throw new TypeError("You can only respond with array buffer views");if(void 0===this._associatedReadableByteStreamController)throw new TypeError("This BYOB request has been invalidated");n.buffer,Mn(this._associatedReadableByteStreamController,n)}}Object.defineProperties(mn.prototype,{respond:{enumerable:!0},respondWithNewView:{enumerable:!0},view:{enumerable:!0}}),"symbol"==typeof l.toStringTag&&Object.defineProperty(mn.prototype,l.toStringTag,{value:"ReadableStreamBYOBRequest",configurable:!0});class gn{constructor(){throw new TypeError("Illegal constructor")}get byobRequest(){if(!yn(this))throw Hn("byobRequest");return Ln(this)}get desiredSize(){if(!yn(this))throw Hn("desiredSize");return $n(this)}close(){if(!yn(this))throw Hn("close");if(this._closeRequested)throw new TypeError("The stream has already been closed; do not close it again!");const n=this._controlledReadableByteStream._state;if("readable"!==n)throw new TypeError(`The stream (in ${n} state) is not in the readable state and cannot be closed`);On(this)}enqueue(n){if(!yn(this))throw Hn("enqueue");if(B(n,1,"enqueue"),!ArrayBuffer.isView(n))throw new TypeError("chunk must be an array buffer view");if(0===n.byteLength)throw new TypeError("chunk must have non-zero byteLength");if(0===n.buffer.byteLength)throw new TypeError("chunk's buffer must have non-zero byteLength");if(this._closeRequested)throw new TypeError("stream is closed or draining");const l=this._controlledReadableByteStream._state;if("readable"!==l)throw new TypeError(`The stream (in ${l} state) is not in the readable state and cannot be enqueued to`);Rn(this,n)}error(n=void 0){if(!yn(this))throw Hn("error");Fn(this,n)}[R](n){bn(this),pn(this);const l=this._cancelAlgorithm(n);return An(this),l}[F](n){const l=this._controlledReadableByteStream;if(this._queueTotalSize>0){const l=this._queue.shift();this._queueTotalSize-=l.byteLength,kn(this);const e=new Uint8Array(l.buffer,l.byteOffset,l.byteLength);return void n._chunkSteps(e)}const e=this._autoAllocateChunkSize;if(void 0!==e){let l;try{l=new ArrayBuffer(e)}catch(l){return void n._errorSteps(l)}const t={buffer:l,bufferByteLength:e,byteOffset:0,byteLength:e,bytesFilled:0,elementSize:1,viewConstructor:Uint8Array,readerType:"default"};this._pendingPullIntos.push(t)}G(l,n),wn(this)}}function yn(n){return!!u(n)&&!!Object.prototype.hasOwnProperty.call(n,"_controlledReadableByteStream")&&n instanceof gn}function vn(n){return!!u(n)&&!!Object.prototype.hasOwnProperty.call(n,"_associatedReadableByteStreamController")&&n instanceof mn}function wn(n){const l=function(n){const l=n._controlledReadableByteStream;if("readable"!==l._state)return!1;if(n._closeRequested)return!1;if(!n._started)return!1;if(J(l)&&X(l)>0)return!0;if(zn(l)&&Wn(l)>0)return!0;return $n(n)>0}(n);l&&(n._pulling?n._pullAgain=!0:(n._pulling=!0,p(n._pullAlgorithm(),(()=>{n._pulling=!1,n._pullAgain&&(n._pullAgain=!1,wn(n))}),(l=>{Fn(n,l)}))))}function bn(n){xn(n),n._pendingPullIntos=new C}function Sn(n,l){let e=!1;"closed"===n._state&&(e=!0);const t=Cn(l);"default"===l.readerType?K(n,t,e):function(n,l,e){const t=n._reader._readIntoRequests.shift();e?t._closeSteps(l):t._chunkSteps(l)}(n,t,e)}function Cn(n){const l=n.bytesFilled,e=n.elementSize;return new n.viewConstructor(n.buffer,n.byteOffset,l/e)}function Dn(n,l,e,t){n._queue.push({buffer:l,byteOffset:e,byteLength:t}),n._queueTotalSize+=t}function En(n,l){const e=l.elementSize,t=l.bytesFilled-l.bytesFilled%e,u=Math.min(n._queueTotalSize,l.byteLength-l.bytesFilled),r=l.bytesFilled+u,o=r-r%e;let i=u,s=!1;o>t&&(i=o-l.bytesFilled,s=!0);const a=n._queue;for(;i>0;){const e=a.peek(),t=Math.min(i,e.byteLength),u=l.byteOffset+l.bytesFilled;an(l.buffer,u,e.buffer,e.byteOffset,t),e.byteLength===t?a.shift():(e.byteOffset+=t,e.byteLength-=t),n._queueTotalSize-=t,_n(0,t,l),i-=t}return s}function _n(n,l,e){e.bytesFilled+=l}function kn(n){0===n._queueTotalSize&&n._closeRequested?(An(n),Ce(n._controlledReadableByteStream)):wn(n)}function xn(n){null!==n._byobRequest&&(n._byobRequest._associatedReadableByteStreamController=void 0,n._byobRequest._view=null,n._byobRequest=null)}function Tn(n){for(;n._pendingPullIntos.length>0;){if(0===n._queueTotalSize)return;const l=n._pendingPullIntos.peek();En(n,l)&&(In(n),Sn(n._controlledReadableByteStream,l))}}function Pn(n,l){const e=n._pendingPullIntos.peek();xn(n),"closed"===n._controlledReadableByteStream._state?function(n){const l=n._controlledReadableByteStream;if(zn(l))for(;Wn(l)>0;)Sn(l,In(n))}(n):function(n,l,e){if(_n(0,l,e),e.bytesFilled<e.elementSize)return;In(n);const t=e.bytesFilled%e.elementSize;if(t>0){const l=e.byteOffset+e.bytesFilled,u=cn(e.buffer,l-t,l);Dn(n,u,0,u.byteLength)}e.bytesFilled-=t,Sn(n._controlledReadableByteStream,e),Tn(n)}(n,l,e),wn(n)}function In(n){return n._pendingPullIntos.shift()}function An(n){n._pullAlgorithm=void 0,n._cancelAlgorithm=void 0}function On(n){const l=n._controlledReadableByteStream;if(!n._closeRequested&&"readable"===l._state)if(n._queueTotalSize>0)n._closeRequested=!0;else{if(n._pendingPullIntos.length>0&&n._pendingPullIntos.peek().bytesFilled>0){const l=new TypeError("Insufficient bytes to fill elements in the given buffer");throw Fn(n,l),l}An(n),Ce(l)}}function Rn(n,l){const e=n._controlledReadableByteStream;if(n._closeRequested||"readable"!==e._state)return;const t=l.buffer,u=l.byteOffset,r=l.byteLength,o=t;if(n._pendingPullIntos.length>0){const l=n._pendingPullIntos.peek();l.buffer,l.buffer=l.buffer}xn(n),J(e)?0===X(e)?Dn(n,o,u,r):(n._pendingPullIntos.length>0&&In(n),K(e,new Uint8Array(o,u,r),!1)):zn(e)?(Dn(n,o,u,r),Tn(n)):Dn(n,o,u,r),wn(n)}function Fn(n,l){const e=n._controlledReadableByteStream;"readable"===e._state&&(bn(n),pn(n),An(n),De(e,l))}function Ln(n){if(null===n._byobRequest&&n._pendingPullIntos.length>0){const l=n._pendingPullIntos.peek(),e=new Uint8Array(l.buffer,l.byteOffset+l.bytesFilled,l.byteLength-l.bytesFilled),t=Object.create(mn.prototype);!function(n,l,e){n._associatedReadableByteStreamController=l,n._view=e}(t,n,e),n._byobRequest=t}return n._byobRequest}function $n(n){const l=n._controlledReadableByteStream._state;return"errored"===l?null:"closed"===l?0:n._strategyHWM-n._queueTotalSize}function jn(n,l){const e=n._pendingPullIntos.peek();if("closed"===n._controlledReadableByteStream._state){if(0!==l)throw new TypeError("bytesWritten must be 0 when calling respond() on a closed stream")}else{if(0===l)throw new TypeError("bytesWritten must be greater than 0 when calling respond() on a readable stream");if(e.bytesFilled+l>e.byteLength)throw new RangeError("bytesWritten out of range")}e.buffer=e.buffer,Pn(n,l)}function Mn(n,l){const e=n._pendingPullIntos.peek();if("closed"===n._controlledReadableByteStream._state){if(0!==l.byteLength)throw new TypeError("The view's length must be 0 when calling respondWithNewView() on a closed stream")}else if(0===l.byteLength)throw new TypeError("The view's length must be greater than 0 when calling respondWithNewView() on a readable stream");if(e.byteOffset+e.bytesFilled!==l.byteOffset)throw new RangeError("The region specified by view does not match byobRequest");if(e.bufferByteLength!==l.buffer.byteLength)throw new RangeError("The buffer of view has different capacity than byobRequest");if(e.bytesFilled+l.byteLength>e.byteLength)throw new RangeError("The region specified by view is larger than byobRequest");const t=l.byteLength;e.buffer=l.buffer,Pn(n,t)}function Nn(n,l,e,t,u,r,o){l._controlledReadableByteStream=n,l._pullAgain=!1,l._pulling=!1,l._byobRequest=null,l._queue=l._queueTotalSize=void 0,pn(l),l._closeRequested=!1,l._started=!1,l._strategyHWM=r,l._pullAlgorithm=t,l._cancelAlgorithm=u,l._autoAllocateChunkSize=o,l._pendingPullIntos=new C,n._readableStreamController=l,p(d(e()),(()=>{l._started=!0,wn(l)}),(n=>{Fn(l,n)}))}function Bn(n){return new TypeError(`ReadableStreamBYOBRequest.prototype.${n} can only be used on a ReadableStreamBYOBRequest`)}function Hn(n){return new TypeError(`ReadableByteStreamController.prototype.${n} can only be used on a ReadableByteStreamController`)}function Un(n){return new Vn(n)}function qn(n,l){n._reader._readIntoRequests.push(l)}function Wn(n){return n._reader._readIntoRequests.length}function zn(n){const l=n._reader;return void 0!==l&&!!Gn(l)}Object.defineProperties(gn.prototype,{close:{enumerable:!0},enqueue:{enumerable:!0},error:{enumerable:!0},byobRequest:{enumerable:!0},desiredSize:{enumerable:!0}}),"symbol"==typeof l.toStringTag&&Object.defineProperty(gn.prototype,l.toStringTag,{value:"ReadableByteStreamController",configurable:!0});class Vn{constructor(n){if(B(n,1,"ReadableStreamBYOBReader"),z(n,"First parameter"),be(n))throw new TypeError("This stream has already been locked for exclusive reading by another reader");if(!yn(n._readableStreamController))throw new TypeError("Cannot construct a ReadableStreamBYOBReader for a stream not constructed with a byte source");D(this,n),this._readIntoRequests=new C}get closed(){return Gn(this)?this._closedPromise:h(Xn("closed"))}cancel(n=void 0){return Gn(this)?void 0===this._ownerReadableStream?h(k("cancel")):E(this,n):h(Xn("cancel"))}read(n){if(!Gn(this))return h(Xn("read"));if(!ArrayBuffer.isView(n))return h(new TypeError("view must be an array buffer view"));if(0===n.byteLength)return h(new TypeError("view must have non-zero byteLength"));if(0===n.buffer.byteLength)return h(new TypeError("view's buffer must have non-zero byteLength"));if(n.buffer,void 0===this._ownerReadableStream)return h(k("read from"));let l,e;const t=c(((n,t)=>{l=n,e=t}));return Kn(this,n,{_chunkSteps:n=>l({value:n,done:!1}),_closeSteps:n=>l({value:n,done:!0}),_errorSteps:n=>e(n)}),t}releaseLock(){if(!Gn(this))throw Xn("releaseLock");if(void 0!==this._ownerReadableStream){if(this._readIntoRequests.length>0)throw new TypeError("Tried to release a reader lock when that reader has pending read() calls un-settled");_(this)}}}function Gn(n){return!!u(n)&&!!Object.prototype.hasOwnProperty.call(n,"_readIntoRequests")&&n instanceof Vn}function Kn(n,l,e){const t=n._ownerReadableStream;t._disturbed=!0,"errored"===t._state?e._errorSteps(t._storedError):function(n,l,e){const t=n._controlledReadableByteStream;let u=1;l.constructor!==DataView&&(u=l.constructor.BYTES_PER_ELEMENT);const r=l.constructor,o=l.buffer,i={buffer:o,bufferByteLength:o.byteLength,byteOffset:l.byteOffset,byteLength:l.byteLength,bytesFilled:0,elementSize:u,viewConstructor:r,readerType:"byob"};if(n._pendingPullIntos.length>0)return n._pendingPullIntos.push(i),void qn(t,e);if("closed"!==t._state){if(n._queueTotalSize>0){if(En(n,i)){const l=Cn(i);return kn(n),void e._chunkSteps(l)}if(n._closeRequested){const l=new TypeError("Insufficient bytes to fill elements in the given buffer");return Fn(n,l),void e._errorSteps(l)}}n._pendingPullIntos.push(i),qn(t,e),wn(n)}else{const n=new r(i.buffer,i.byteOffset,0);e._closeSteps(n)}}(t._readableStreamController,l,e)}function Xn(n){return new TypeError(`ReadableStreamBYOBReader.prototype.${n} can only be used on a ReadableStreamBYOBReader`)}function Jn(n,l){const{highWaterMark:e}=n;if(void 0===e)return l;if(on(e)||e<0)throw new RangeError("Invalid highWaterMark");return e}function Zn(n){const{size:l}=n;return l||(()=>1)}function Yn(n,l){j(n,l);const e=null==n?void 0:n.highWaterMark,t=null==n?void 0:n.size;return{highWaterMark:void 0===e?void 0:U(e),size:void 0===t?void 0:Qn(t,`${l} has member 'size' that`)}}function Qn(n,l){return M(n,l),l=>U(n(l))}function nl(n,l,e){return M(n,e),e=>S(n,l,[e])}function ll(n,l,e){return M(n,e),()=>S(n,l,[])}function el(n,l,e){return M(n,e),e=>b(n,l,[e])}function tl(n,l,e){return M(n,e),(e,t)=>S(n,l,[e,t])}function ul(n,l){if(!al(n))throw new TypeError(`${l} is not a WritableStream.`)}Object.defineProperties(Vn.prototype,{cancel:{enumerable:!0},read:{enumerable:!0},releaseLock:{enumerable:!0},closed:{enumerable:!0}}),"symbol"==typeof l.toStringTag&&Object.defineProperty(Vn.prototype,l.toStringTag,{value:"ReadableStreamBYOBReader",configurable:!0});const rl="function"==typeof AbortController;class ol{constructor(n={},l={}){void 0===n?n=null:N(n,"First parameter");const e=Yn(l,"Second parameter"),t=function(n,l){j(n,l);const e=null==n?void 0:n.abort,t=null==n?void 0:n.close,u=null==n?void 0:n.start,r=null==n?void 0:n.type,o=null==n?void 0:n.write;return{abort:void 0===e?void 0:nl(e,n,`${l} has member 'abort' that`),close:void 0===t?void 0:ll(t,n,`${l} has member 'close' that`),start:void 0===u?void 0:el(u,n,`${l} has member 'start' that`),write:void 0===o?void 0:tl(o,n,`${l} has member 'write' that`),type:r}}(n,"First parameter");if(sl(this),void 0!==t.type)throw new RangeError("Invalid type is specified");const u=Zn(e);!function(n,l,e,t){const u=Object.create(kl.prototype);let r=()=>{},o=()=>d(void 0),i=()=>d(void 0),s=()=>d(void 0);void 0!==l.start&&(r=()=>l.start(u)),void 0!==l.write&&(o=n=>l.write(n,u)),void 0!==l.close&&(i=()=>l.close()),void 0!==l.abort&&(s=n=>l.abort(n)),Tl(n,u,r,o,i,s,e,t)}(this,t,Jn(e,1),u)}get locked(){if(!al(this))throw Ll("locked");return cl(this)}abort(n=void 0){return al(this)?cl(this)?h(new TypeError("Cannot abort a stream that already has a writer")):dl(this,n):h(Ll("abort"))}close(){return al(this)?cl(this)?h(new TypeError("Cannot close a stream that already has a writer")):gl(this)?h(new TypeError("Cannot close an already-closing stream")):hl(this):h(Ll("close"))}getWriter(){if(!al(this))throw Ll("getWriter");return il(this)}}function il(n){return new wl(n)}function sl(n){n._state="writable",n._storedError=void 0,n._writer=void 0,n._writableStreamController=void 0,n._writeRequests=new C,n._inFlightWriteRequest=void 0,n._closeRequest=void 0,n._inFlightCloseRequest=void 0,n._pendingAbortRequest=void 0,n._backpressure=!1}function al(n){return!!u(n)&&!!Object.prototype.hasOwnProperty.call(n,"_writableStreamController")&&n instanceof ol}function cl(n){return void 0!==n._writer}function dl(n,l){var e;if("closed"===n._state||"errored"===n._state)return d(void 0);n._writableStreamController._abortReason=l,null===(e=n._writableStreamController._abortController)||void 0===e||e.abort();const t=n._state;if("closed"===t||"errored"===t)return d(void 0);if(void 0!==n._pendingAbortRequest)return n._pendingAbortRequest._promise;let u=!1;"erroring"===t&&(u=!0,l=void 0);const r=c(((e,t)=>{n._pendingAbortRequest={_promise:void 0,_resolve:e,_reject:t,_reason:l,_wasAlreadyErroring:u}}));return n._pendingAbortRequest._promise=r,u||pl(n,l),r}function hl(n){const l=n._state;if("closed"===l||"errored"===l)return h(new TypeError(`The stream (in ${l} state) is not in the writable state and cannot be closed`));const e=c(((l,e)=>{const t={_resolve:l,_reject:e};n._closeRequest=t})),t=n._writer;var u;return void 0!==t&&n._backpressure&&"writable"===l&&Gl(t),fn(u=n._writableStreamController,_l,0),Al(u),e}function fl(n,l){"writable"!==n._state?ml(n):pl(n,l)}function pl(n,l){const e=n._writableStreamController;n._state="erroring",n._storedError=l;const t=n._writer;void 0!==t&&Cl(t,l),!function(n){return void 0!==n._inFlightWriteRequest||void 0!==n._inFlightCloseRequest}(n)&&e._started&&ml(n)}function ml(n){n._state="errored",n._writableStreamController[O]();const l=n._storedError;if(n._writeRequests.forEach((n=>{n._reject(l)})),n._writeRequests=new C,void 0===n._pendingAbortRequest)return void yl(n);const e=n._pendingAbortRequest;if(n._pendingAbortRequest=void 0,e._wasAlreadyErroring)return e._reject(l),void yl(n);p(n._writableStreamController[A](e._reason),(()=>{e._resolve(),yl(n)}),(l=>{e._reject(l),yl(n)}))}function gl(n){return void 0!==n._closeRequest||void 0!==n._inFlightCloseRequest}function yl(n){void 0!==n._closeRequest&&(n._closeRequest._reject(n._storedError),n._closeRequest=void 0);const l=n._writer;void 0!==l&&Hl(l,n._storedError)}function vl(n,l){const e=n._writer;void 0!==e&&l!==n._backpressure&&(l?function(n){ql(n)}(e):Gl(e)),n._backpressure=l}Object.defineProperties(ol.prototype,{abort:{enumerable:!0},close:{enumerable:!0},getWriter:{enumerable:!0},locked:{enumerable:!0}}),"symbol"==typeof l.toStringTag&&Object.defineProperty(ol.prototype,l.toStringTag,{value:"WritableStream",configurable:!0});class wl{constructor(n){if(B(n,1,"WritableStreamDefaultWriter"),ul(n,"First parameter"),cl(n))throw new TypeError("This stream has already been locked for exclusive writing by another writer");this._ownerWritableStream=n,n._writer=this;const l=n._state;if("writable"===l)!gl(n)&&n._backpressure?ql(this):zl(this),Nl(this);else if("erroring"===l)Wl(this,n._storedError),Nl(this);else if("closed"===l)zl(this),Nl(this),Ul(this);else{const l=n._storedError;Wl(this,l),Bl(this,l)}}get closed(){return bl(this)?this._closedPromise:h(jl("closed"))}get desiredSize(){if(!bl(this))throw jl("desiredSize");if(void 0===this._ownerWritableStream)throw Ml("desiredSize");return function(n){const l=n._ownerWritableStream,e=l._state;return"errored"===e||"erroring"===e?null:"closed"===e?0:Il(l._writableStreamController)}(this)}get ready(){return bl(this)?this._readyPromise:h(jl("ready"))}abort(n=void 0){return bl(this)?void 0===this._ownerWritableStream?h(Ml("abort")):function(n,l){return dl(n._ownerWritableStream,l)}(this,n):h(jl("abort"))}close(){if(!bl(this))return h(jl("close"));const n=this._ownerWritableStream;return void 0===n?h(Ml("close")):gl(n)?h(new TypeError("Cannot close an already-closing stream")):Sl(this)}releaseLock(){if(!bl(this))throw jl("releaseLock");void 0!==this._ownerWritableStream&&Dl(this)}write(n=void 0){return bl(this)?void 0===this._ownerWritableStream?h(Ml("write to")):El(this,n):h(jl("write"))}}function bl(n){return!!u(n)&&!!Object.prototype.hasOwnProperty.call(n,"_ownerWritableStream")&&n instanceof wl}function Sl(n){return hl(n._ownerWritableStream)}function Cl(n,l){"pending"===n._readyPromiseState?Vl(n,l):function(n,l){Wl(n,l)}(n,l)}function Dl(n){const l=n._ownerWritableStream,e=new TypeError("Writer was released and can no longer be used to monitor the stream's closedness");Cl(n,e),function(n,l){"pending"===n._closedPromiseState?Hl(n,l):function(n,l){Bl(n,l)}(n,l)}(n,e),l._writer=void 0,n._ownerWritableStream=void 0}function El(n,l){const e=n._ownerWritableStream,t=e._writableStreamController,u=function(n,l){try{return n._strategySizeAlgorithm(l)}catch(l){return Ol(n,l),1}}(t,l);if(e!==n._ownerWritableStream)return h(Ml("write to"));const r=e._state;if("errored"===r)return h(e._storedError);if(gl(e)||"closed"===r)return h(new TypeError("The stream is closing or closed and cannot be written to"));if("erroring"===r)return h(e._storedError);const o=function(n){return c(((l,e)=>{const t={_resolve:l,_reject:e};n._writeRequests.push(t)}))}(e);return function(n,l,e){try{fn(n,l,e)}catch(l){return void Ol(n,l)}const t=n._controlledWritableStream;gl(t)||"writable"!==t._state||vl(t,Rl(n)),Al(n)}(t,l,u),o}Object.defineProperties(wl.prototype,{abort:{enumerable:!0},close:{enumerable:!0},releaseLock:{enumerable:!0},write:{enumerable:!0},closed:{enumerable:!0},desiredSize:{enumerable:!0},ready:{enumerable:!0}}),"symbol"==typeof l.toStringTag&&Object.defineProperty(wl.prototype,l.toStringTag,{value:"WritableStreamDefaultWriter",configurable:!0});const _l={};class kl{constructor(){throw new TypeError("Illegal constructor")}get abortReason(){if(!xl(this))throw $l("abortReason");return this._abortReason}get signal(){if(!xl(this))throw $l("signal");if(void 0===this._abortController)throw new TypeError("WritableStreamDefaultController.prototype.signal is not supported");return this._abortController.signal}error(n=void 0){if(!xl(this))throw $l("error");"writable"===this._controlledWritableStream._state&&Fl(this,n)}[A](n){const l=this._abortAlgorithm(n);return Pl(this),l}[O](){pn(this)}}function xl(n){return!!u(n)&&!!Object.prototype.hasOwnProperty.call(n,"_controlledWritableStream")&&n instanceof kl}function Tl(n,l,e,t,u,r,o,i){l._controlledWritableStream=n,n._writableStreamController=l,l._queue=void 0,l._queueTotalSize=void 0,pn(l),l._abortReason=void 0,l._abortController=function(){if(rl)return new AbortController}(),l._started=!1,l._strategySizeAlgorithm=i,l._strategyHWM=o,l._writeAlgorithm=t,l._closeAlgorithm=u,l._abortAlgorithm=r;const s=Rl(l);vl(n,s),p(d(e()),(()=>{l._started=!0,Al(l)}),(e=>{l._started=!0,fl(n,e)}))}function Pl(n){n._writeAlgorithm=void 0,n._closeAlgorithm=void 0,n._abortAlgorithm=void 0,n._strategySizeAlgorithm=void 0}function Il(n){return n._strategyHWM-n._queueTotalSize}function Al(n){const l=n._controlledWritableStream;if(!n._started)return;if(void 0!==l._inFlightWriteRequest)return;if("erroring"===l._state)return void ml(l);if(0===n._queue.length)return;const e=n._queue.peek().value;e===_l?function(n){const l=n._controlledWritableStream;(function(n){n._inFlightCloseRequest=n._closeRequest,n._closeRequest=void 0})(l),hn(n);const e=n._closeAlgorithm();Pl(n),p(e,(()=>{!function(n){n._inFlightCloseRequest._resolve(void 0),n._inFlightCloseRequest=void 0,"erroring"===n._state&&(n._storedError=void 0,void 0!==n._pendingAbortRequest&&(n._pendingAbortRequest._resolve(),n._pendingAbortRequest=void 0)),n._state="closed";const l=n._writer;void 0!==l&&Ul(l)}(l)}),(n=>{!function(n,l){n._inFlightCloseRequest._reject(l),n._inFlightCloseRequest=void 0,void 0!==n._pendingAbortRequest&&(n._pendingAbortRequest._reject(l),n._pendingAbortRequest=void 0),fl(n,l)}(l,n)}))}(n):function(n,l){const e=n._controlledWritableStream;!function(n){n._inFlightWriteRequest=n._writeRequests.shift()}(e);p(n._writeAlgorithm(l),(()=>{!function(n){n._inFlightWriteRequest._resolve(void 0),n._inFlightWriteRequest=void 0}(e);const l=e._state;if(hn(n),!gl(e)&&"writable"===l){const l=Rl(n);vl(e,l)}Al(n)}),(l=>{"writable"===e._state&&Pl(n),function(n,l){n._inFlightWriteRequest._reject(l),n._inFlightWriteRequest=void 0,fl(n,l)}(e,l)}))}(n,e)}function Ol(n,l){"writable"===n._controlledWritableStream._state&&Fl(n,l)}function Rl(n){return Il(n)<=0}function Fl(n,l){const e=n._controlledWritableStream;Pl(n),pl(e,l)}function Ll(n){return new TypeError(`WritableStream.prototype.${n} can only be used on a WritableStream`)}function $l(n){return new TypeError(`WritableStreamDefaultController.prototype.${n} can only be used on a WritableStreamDefaultController`)}function jl(n){return new TypeError(`WritableStreamDefaultWriter.prototype.${n} can only be used on a WritableStreamDefaultWriter`)}function Ml(n){return new TypeError("Cannot "+n+" a stream using a released writer")}function Nl(n){n._closedPromise=c(((l,e)=>{n._closedPromise_resolve=l,n._closedPromise_reject=e,n._closedPromiseState="pending"}))}function Bl(n,l){Nl(n),Hl(n,l)}function Hl(n,l){void 0!==n._closedPromise_reject&&(v(n._closedPromise),n._closedPromise_reject(l),n._closedPromise_resolve=void 0,n._closedPromise_reject=void 0,n._closedPromiseState="rejected")}function Ul(n){void 0!==n._closedPromise_resolve&&(n._closedPromise_resolve(void 0),n._closedPromise_resolve=void 0,n._closedPromise_reject=void 0,n._closedPromiseState="resolved")}function ql(n){n._readyPromise=c(((l,e)=>{n._readyPromise_resolve=l,n._readyPromise_reject=e})),n._readyPromiseState="pending"}function Wl(n,l){ql(n),Vl(n,l)}function zl(n){ql(n),Gl(n)}function Vl(n,l){void 0!==n._readyPromise_reject&&(v(n._readyPromise),n._readyPromise_reject(l),n._readyPromise_resolve=void 0,n._readyPromise_reject=void 0,n._readyPromiseState="rejected")}function Gl(n){void 0!==n._readyPromise_resolve&&(n._readyPromise_resolve(void 0),n._readyPromise_resolve=void 0,n._readyPromise_reject=void 0,n._readyPromiseState="fulfilled")}Object.defineProperties(kl.prototype,{abortReason:{enumerable:!0},signal:{enumerable:!0},error:{enumerable:!0}}),"symbol"==typeof l.toStringTag&&Object.defineProperty(kl.prototype,l.toStringTag,{value:"WritableStreamDefaultController",configurable:!0});const Kl="undefined"!=typeof DOMException?DOMException:void 0,Xl=function(n){if("function"!=typeof n&&"object"!=typeof n)return!1;try{return new n,!0}catch(n){return!1}}(Kl)?Kl:function(){const n=function(n,l){this.message=n||"",this.name=l||"Error",Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)};return n.prototype=Object.create(Error.prototype),Object.defineProperty(n.prototype,"constructor",{value:n,writable:!0,configurable:!0}),n}();function Jl(n,l,t,u,r,o){const i=V(n),s=il(l);n._disturbed=!0;let a=!1,y=d(void 0);return c(((w,b)=>{let S;if(void 0!==o){if(S=()=>{const e=new Xl("Aborted","AbortError"),t=[];u||t.push((()=>"writable"===l._state?dl(l,e):d(void 0))),r||t.push((()=>"readable"===n._state?Se(n,e):d(void 0))),T((()=>Promise.all(t.map((n=>n())))),!0,e)},o.aborted)return void S();o.addEventListener("abort",S)}var C,D,E;if(x(n,i._closedPromise,(n=>{u?P(!0,n):T((()=>dl(l,n)),!0,n)})),x(l,s._closedPromise,(l=>{r?P(!0,l):T((()=>Se(n,l)),!0,l)})),C=n,D=i._closedPromise,E=()=>{t?P():T((()=>function(n){const l=n._ownerWritableStream,e=l._state;return gl(l)||"closed"===e?d(void 0):"errored"===e?h(l._storedError):Sl(n)}(s)))},"closed"===C._state?E():m(D,E),gl(l)||"closed"===l._state){const l=new TypeError("the destination writable stream closed before all data could be piped to it");r?P(!0,l):T((()=>Se(n,l)),!0,l)}function k(){const n=y;return f(y,(()=>n!==y?k():void 0))}function x(n,l,e){"errored"===n._state?e(n._storedError):g(l,e)}function T(n,e,t){function u(){p(n(),(()=>I(e,t)),(n=>I(!0,n)))}a||(a=!0,"writable"!==l._state||gl(l)?u():m(k(),u))}function P(n,e){a||(a=!0,"writable"!==l._state||gl(l)?I(n,e):m(k(),(()=>I(n,e))))}function I(n,l){Dl(s),_(i),void 0!==o&&o.removeEventListener("abort",S),n?b(l):w(void 0)}v(c(((n,l)=>{!function t(u){u?n():f(a?d(!0):f(s._readyPromise,(()=>c(((n,l)=>{Q(i,{_chunkSteps:l=>{y=f(El(s,l),void 0,e),n(!1)},_closeSteps:()=>n(!0),_errorSteps:l})})))),t,l)}(!1)})))}))}class Zl{constructor(){throw new TypeError("Illegal constructor")}get desiredSize(){if(!Yl(this))throw se("desiredSize");return re(this)}close(){if(!Yl(this))throw se("close");if(!oe(this))throw new TypeError("The stream is not in a state that permits close");ee(this)}enqueue(n=void 0){if(!Yl(this))throw se("enqueue");if(!oe(this))throw new TypeError("The stream is not in a state that permits enqueue");return te(this,n)}error(n=void 0){if(!Yl(this))throw se("error");ue(this,n)}[R](n){pn(this);const l=this._cancelAlgorithm(n);return le(this),l}[F](n){const l=this._controlledReadableStream;if(this._queue.length>0){const e=hn(this);this._closeRequested&&0===this._queue.length?(le(this),Ce(l)):Ql(this),n._chunkSteps(e)}else G(l,n),Ql(this)}}function Yl(n){return!!u(n)&&!!Object.prototype.hasOwnProperty.call(n,"_controlledReadableStream")&&n instanceof Zl}function Ql(n){ne(n)&&(n._pulling?n._pullAgain=!0:(n._pulling=!0,p(n._pullAlgorithm(),(()=>{n._pulling=!1,n._pullAgain&&(n._pullAgain=!1,Ql(n))}),(l=>{ue(n,l)}))))}function ne(n){const l=n._controlledReadableStream;return!!oe(n)&&!!n._started&&(!!(be(l)&&X(l)>0)||re(n)>0)}function le(n){n._pullAlgorithm=void 0,n._cancelAlgorithm=void 0,n._strategySizeAlgorithm=void 0}function ee(n){if(!oe(n))return;const l=n._controlledReadableStream;n._closeRequested=!0,0===n._queue.length&&(le(n),Ce(l))}function te(n,l){if(!oe(n))return;const e=n._controlledReadableStream;if(be(e)&&X(e)>0)K(e,l,!1);else{let e;try{e=n._strategySizeAlgorithm(l)}catch(l){throw ue(n,l),l}try{fn(n,l,e)}catch(l){throw ue(n,l),l}}Ql(n)}function ue(n,l){const e=n._controlledReadableStream;"readable"===e._state&&(pn(n),le(n),De(e,l))}function re(n){const l=n._controlledReadableStream._state;return"errored"===l?null:"closed"===l?0:n._strategyHWM-n._queueTotalSize}function oe(n){const l=n._controlledReadableStream._state;return!n._closeRequested&&"readable"===l}function ie(n,l,e,t,u,r,o){l._controlledReadableStream=n,l._queue=void 0,l._queueTotalSize=void 0,pn(l),l._started=!1,l._closeRequested=!1,l._pullAgain=!1,l._pulling=!1,l._strategySizeAlgorithm=o,l._strategyHWM=r,l._pullAlgorithm=t,l._cancelAlgorithm=u,n._readableStreamController=l,p(d(e()),(()=>{l._started=!0,Ql(l)}),(n=>{ue(l,n)}))}function se(n){return new TypeError(`ReadableStreamDefaultController.prototype.${n} can only be used on a ReadableStreamDefaultController`)}function ae(n,l,e){return M(n,e),e=>S(n,l,[e])}function ce(n,l,e){return M(n,e),e=>S(n,l,[e])}function de(n,l,e){return M(n,e),e=>b(n,l,[e])}function he(n,l){if("bytes"!=(n=`${n}`))throw new TypeError(`${l} '${n}' is not a valid enumeration value for ReadableStreamType`);return n}function fe(n,l){if("byob"!=(n=`${n}`))throw new TypeError(`${l} '${n}' is not a valid enumeration value for ReadableStreamReaderMode`);return n}function pe(n,l){j(n,l);const e=null==n?void 0:n.preventAbort,t=null==n?void 0:n.preventCancel,u=null==n?void 0:n.preventClose,r=null==n?void 0:n.signal;return void 0!==r&&function(n,l){if(!function(n){if("object"!=typeof n||null===n)return!1;try{return"boolean"==typeof n.aborted}catch(n){return!1}}(n))throw new TypeError(`${l} is not an AbortSignal.`)}(r,`${l} has member 'signal' that`),{preventAbort:Boolean(e),preventCancel:Boolean(t),preventClose:Boolean(u),signal:r}}Object.defineProperties(Zl.prototype,{close:{enumerable:!0},enqueue:{enumerable:!0},error:{enumerable:!0},desiredSize:{enumerable:!0}}),"symbol"==typeof l.toStringTag&&Object.defineProperty(Zl.prototype,l.toStringTag,{value:"ReadableStreamDefaultController",configurable:!0});class me{constructor(n={},l={}){void 0===n?n=null:N(n,"First parameter");const e=Yn(l,"Second parameter"),t=function(n,l){j(n,l);const e=n,t=null==e?void 0:e.autoAllocateChunkSize,u=null==e?void 0:e.cancel,r=null==e?void 0:e.pull,o=null==e?void 0:e.start,i=null==e?void 0:e.type;return{autoAllocateChunkSize:void 0===t?void 0:W(t,`${l} has member 'autoAllocateChunkSize' that`),cancel:void 0===u?void 0:ae(u,e,`${l} has member 'cancel' that`),pull:void 0===r?void 0:ce(r,e,`${l} has member 'pull' that`),start:void 0===o?void 0:de(o,e,`${l} has member 'start' that`),type:void 0===i?void 0:he(i,`${l} has member 'type' that`)}}(n,"First parameter");if(ve(this),"bytes"===t.type){if(void 0!==e.size)throw new RangeError("The strategy for a byte stream cannot have a size function");!function(n,l,e){const t=Object.create(gn.prototype);let u=()=>{},r=()=>d(void 0),o=()=>d(void 0);void 0!==l.start&&(u=()=>l.start(t)),void 0!==l.pull&&(r=()=>l.pull(t)),void 0!==l.cancel&&(o=n=>l.cancel(n));const i=l.autoAllocateChunkSize;if(0===i)throw new TypeError("autoAllocateChunkSize must be greater than 0");Nn(n,t,u,r,o,e,i)}(this,t,Jn(e,0))}else{const n=Zn(e);!function(n,l,e,t){const u=Object.create(Zl.prototype);let r=()=>{},o=()=>d(void 0),i=()=>d(void 0);void 0!==l.start&&(r=()=>l.start(u)),void 0!==l.pull&&(o=()=>l.pull(u)),void 0!==l.cancel&&(i=n=>l.cancel(n)),ie(n,u,r,o,i,e,t)}(this,t,Jn(e,1),n)}}get locked(){if(!we(this))throw Ee("locked");return be(this)}cancel(n=void 0){return we(this)?be(this)?h(new TypeError("Cannot cancel a stream that already has a reader")):Se(this,n):h(Ee("cancel"))}getReader(n=void 0){if(!we(this))throw Ee("getReader");return void 0===function(n,l){j(n,l);const e=null==n?void 0:n.mode;return{mode:void 0===e?void 0:fe(e,`${l} has member 'mode' that`)}}(n,"First parameter").mode?V(this):Un(this)}pipeThrough(n,l={}){if(!we(this))throw Ee("pipeThrough");B(n,1,"pipeThrough");const e=function(n,l){j(n,l);const e=null==n?void 0:n.readable;H(e,"readable","ReadableWritablePair"),z(e,`${l} has member 'readable' that`);const t=null==n?void 0:n.writable;return H(t,"writable","ReadableWritablePair"),ul(t,`${l} has member 'writable' that`),{readable:e,writable:t}}(n,"First parameter"),t=pe(l,"Second parameter");if(be(this))throw new TypeError("ReadableStream.prototype.pipeThrough cannot be used on a locked ReadableStream");if(cl(e.writable))throw new TypeError("ReadableStream.prototype.pipeThrough cannot be used on a locked WritableStream");return v(Jl(this,e.writable,t.preventClose,t.preventAbort,t.preventCancel,t.signal)),e.readable}pipeTo(n,l={}){if(!we(this))return h(Ee("pipeTo"));if(void 0===n)return h("Parameter 1 is required in 'pipeTo'.");if(!al(n))return h(new TypeError("ReadableStream.prototype.pipeTo's first argument must be a WritableStream"));let e;try{e=pe(l,"Second parameter")}catch(n){return h(n)}return be(this)?h(new TypeError("ReadableStream.prototype.pipeTo cannot be used on a locked ReadableStream")):cl(n)?h(new TypeError("ReadableStream.prototype.pipeTo cannot be used on a locked WritableStream")):Jl(this,n,e.preventClose,e.preventAbort,e.preventCancel,e.signal)}tee(){if(!we(this))throw Ee("tee");return sn(yn((n=this)._readableStreamController)?function(n){let l,e,t,u,r,o=V(n),i=!1,s=!1,a=!1,h=!1,f=!1;const p=c((n=>{r=n}));function m(n){g(n._closedPromise,(l=>{n===o&&(Fn(t._readableStreamController,l),Fn(u._readableStreamController,l),h&&f||r(void 0))}))}function y(){Gn(o)&&(_(o),o=V(n),m(o)),Q(o,{_chunkSteps:l=>{w((()=>{s=!1,a=!1;const e=l;let o=l;if(!h&&!f)try{o=dn(l)}catch(l){return Fn(t._readableStreamController,l),Fn(u._readableStreamController,l),void r(Se(n,l))}h||Rn(t._readableStreamController,e),f||Rn(u._readableStreamController,o),i=!1,s?b():a&&S()}))},_closeSteps:()=>{i=!1,h||On(t._readableStreamController),f||On(u._readableStreamController),t._readableStreamController._pendingPullIntos.length>0&&jn(t._readableStreamController,0),u._readableStreamController._pendingPullIntos.length>0&&jn(u._readableStreamController,0),h&&f||r(void 0)},_errorSteps:()=>{i=!1}})}function v(l,e){Y(o)&&(_(o),o=Un(n),m(o));const c=e?u:t,d=e?t:u;Kn(o,l,{_chunkSteps:l=>{w((()=>{s=!1,a=!1;const t=e?f:h;if(e?h:f)t||Mn(c._readableStreamController,l);else{let e;try{e=dn(l)}catch(l){return Fn(c._readableStreamController,l),Fn(d._readableStreamController,l),void r(Se(n,l))}t||Mn(c._readableStreamController,l),Rn(d._readableStreamController,e)}i=!1,s?b():a&&S()}))},_closeSteps:n=>{i=!1;const l=e?f:h,t=e?h:f;l||On(c._readableStreamController),t||On(d._readableStreamController),void 0!==n&&(l||Mn(c._readableStreamController,n),!t&&d._readableStreamController._pendingPullIntos.length>0&&jn(d._readableStreamController,0)),l&&t||r(void 0)},_errorSteps:()=>{i=!1}})}function b(){if(i)return s=!0,d(void 0);i=!0;const n=Ln(t._readableStreamController);return null===n?y():v(n._view,!1),d(void 0)}function S(){if(i)return a=!0,d(void 0);i=!0;const n=Ln(u._readableStreamController);return null===n?y():v(n._view,!0),d(void 0)}function C(){}return t=ye(C,b,(function(t){if(h=!0,l=t,f){const t=sn([l,e]),u=Se(n,t);r(u)}return p})),u=ye(C,S,(function(t){if(f=!0,e=t,h){const t=sn([l,e]),u=Se(n,t);r(u)}return p})),m(o),[t,u]}(n):function(n){const l=V(n);let e,t,u,r,o,i=!1,s=!1,a=!1,h=!1;const f=c((n=>{o=n}));function p(){return i?(s=!0,d(void 0)):(i=!0,Q(l,{_chunkSteps:n=>{w((()=>{s=!1;const l=n,e=n;a||te(u._readableStreamController,l),h||te(r._readableStreamController,e),i=!1,s&&p()}))},_closeSteps:()=>{i=!1,a||ee(u._readableStreamController),h||ee(r._readableStreamController),a&&h||o(void 0)},_errorSteps:()=>{i=!1}}),d(void 0))}function m(){}return u=ge(m,p,(function(l){if(a=!0,e=l,h){const l=sn([e,t]),u=Se(n,l);o(u)}return f})),r=ge(m,p,(function(l){if(h=!0,t=l,a){const l=sn([e,t]),u=Se(n,l);o(u)}return f})),g(l._closedPromise,(n=>{ue(u._readableStreamController,n),ue(r._readableStreamController,n),a&&h||o(void 0)})),[u,r]}(n));var n}values(n=void 0){if(!we(this))throw Ee("values");return function(n,l){const e=V(n),t=new en(e,l),u=Object.create(tn);return u._asyncIteratorImpl=t,u}(this,function(n){j(n,"First parameter");const l=null==n?void 0:n.preventCancel;return{preventCancel:Boolean(l)}}(n).preventCancel)}}function ge(n,l,e,t=1,u=()=>1){const r=Object.create(me.prototype);return ve(r),ie(r,Object.create(Zl.prototype),n,l,e,t,u),r}function ye(n,l,e){const t=Object.create(me.prototype);return ve(t),Nn(t,Object.create(gn.prototype),n,l,e,0,void 0),t}function ve(n){n._state="readable",n._reader=void 0,n._storedError=void 0,n._disturbed=!1}function we(n){return!!u(n)&&!!Object.prototype.hasOwnProperty.call(n,"_readableStreamController")&&n instanceof me}function be(n){return void 0!==n._reader}function Se(n,l){if(n._disturbed=!0,"closed"===n._state)return d(void 0);if("errored"===n._state)return h(n._storedError);Ce(n);const t=n._reader;return void 0!==t&&Gn(t)&&(t._readIntoRequests.forEach((n=>{n._closeSteps(void 0)})),t._readIntoRequests=new C),y(n._readableStreamController[R](l),e)}function Ce(n){n._state="closed";const l=n._reader;void 0!==l&&(I(l),Y(l)&&(l._readRequests.forEach((n=>{n._closeSteps()})),l._readRequests=new C))}function De(n,l){n._state="errored",n._storedError=l;const e=n._reader;void 0!==e&&(P(e,l),Y(e)?(e._readRequests.forEach((n=>{n._errorSteps(l)})),e._readRequests=new C):(e._readIntoRequests.forEach((n=>{n._errorSteps(l)})),e._readIntoRequests=new C))}function Ee(n){return new TypeError(`ReadableStream.prototype.${n} can only be used on a ReadableStream`)}function _e(n,l){j(n,l);const e=null==n?void 0:n.highWaterMark;return H(e,"highWaterMark","QueuingStrategyInit"),{highWaterMark:U(e)}}Object.defineProperties(me.prototype,{cancel:{enumerable:!0},getReader:{enumerable:!0},pipeThrough:{enumerable:!0},pipeTo:{enumerable:!0},tee:{enumerable:!0},values:{enumerable:!0},locked:{enumerable:!0}}),"symbol"==typeof l.toStringTag&&Object.defineProperty(me.prototype,l.toStringTag,{value:"ReadableStream",configurable:!0}),"symbol"==typeof l.asyncIterator&&Object.defineProperty(me.prototype,l.asyncIterator,{value:me.prototype.values,writable:!0,configurable:!0});const ke=n=>n.byteLength;try{Object.defineProperty(ke,"name",{value:"size",configurable:!0})}catch(n){}class xe{constructor(n){B(n,1,"ByteLengthQueuingStrategy"),n=_e(n,"First parameter"),this._byteLengthQueuingStrategyHighWaterMark=n.highWaterMark}get highWaterMark(){if(!Pe(this))throw Te("highWaterMark");return this._byteLengthQueuingStrategyHighWaterMark}get size(){if(!Pe(this))throw Te("size");return ke}}function Te(n){return new TypeError(`ByteLengthQueuingStrategy.prototype.${n} can only be used on a ByteLengthQueuingStrategy`)}function Pe(n){return!!u(n)&&!!Object.prototype.hasOwnProperty.call(n,"_byteLengthQueuingStrategyHighWaterMark")&&n instanceof xe}Object.defineProperties(xe.prototype,{highWaterMark:{enumerable:!0},size:{enumerable:!0}}),"symbol"==typeof l.toStringTag&&Object.defineProperty(xe.prototype,l.toStringTag,{value:"ByteLengthQueuingStrategy",configurable:!0});const Ie=()=>1;try{Object.defineProperty(Ie,"name",{value:"size",configurable:!0})}catch(n){}class Ae{constructor(n){B(n,1,"CountQueuingStrategy"),n=_e(n,"First parameter"),this._countQueuingStrategyHighWaterMark=n.highWaterMark}get highWaterMark(){if(!Re(this))throw Oe("highWaterMark");return this._countQueuingStrategyHighWaterMark}get size(){if(!Re(this))throw Oe("size");return Ie}}function Oe(n){return new TypeError(`CountQueuingStrategy.prototype.${n} can only be used on a CountQueuingStrategy`)}function Re(n){return!!u(n)&&!!Object.prototype.hasOwnProperty.call(n,"_countQueuingStrategyHighWaterMark")&&n instanceof Ae}function Fe(n,l,e){return M(n,e),e=>S(n,l,[e])}function Le(n,l,e){return M(n,e),e=>b(n,l,[e])}function $e(n,l,e){return M(n,e),(e,t)=>S(n,l,[e,t])}Object.defineProperties(Ae.prototype,{highWaterMark:{enumerable:!0},size:{enumerable:!0}}),"symbol"==typeof l.toStringTag&&Object.defineProperty(Ae.prototype,l.toStringTag,{value:"CountQueuingStrategy",configurable:!0});class je{constructor(n={},l={},e={}){void 0===n&&(n=null);const t=Yn(l,"Second parameter"),u=Yn(e,"Third parameter"),r=function(n,l){j(n,l);const e=null==n?void 0:n.flush,t=null==n?void 0:n.readableType,u=null==n?void 0:n.start,r=null==n?void 0:n.transform,o=null==n?void 0:n.writableType;return{flush:void 0===e?void 0:Fe(e,n,`${l} has member 'flush' that`),readableType:t,start:void 0===u?void 0:Le(u,n,`${l} has member 'start' that`),transform:void 0===r?void 0:$e(r,n,`${l} has member 'transform' that`),writableType:o}}(n,"First parameter");if(void 0!==r.readableType)throw new RangeError("Invalid readableType specified");if(void 0!==r.writableType)throw new RangeError("Invalid writableType specified");const o=Jn(u,0),i=Zn(u),s=Jn(t,1),a=Zn(t);let f;!function(n,l,e,t,u,r){function o(){return l}n._writable=function(n,l,e,t,u=1,r=()=>1){const o=Object.create(ol.prototype);return sl(o),Tl(o,Object.create(kl.prototype),n,l,e,t,u,r),o}(o,(function(l){return function(n,l){const e=n._transformStreamController;return n._backpressure?y(n._backpressureChangePromise,(()=>{const t=n._writable;if("erroring"===t._state)throw t._storedError;return Ve(e,l)})):Ve(e,l)}(n,l)}),(function(){return function(n){const l=n._readable,e=n._transformStreamController,t=e._flushAlgorithm();return We(e),y(t,(()=>{if("errored"===l._state)throw l._storedError;ee(l._readableStreamController)}),(e=>{throw Ne(n,e),l._storedError}))}(n)}),(function(l){return function(n,l){return Ne(n,l),d(void 0)}(n,l)}),e,t),n._readable=ge(o,(function(){return function(n){return He(n,!1),n._backpressureChangePromise}(n)}),(function(l){return Be(n,l),d(void 0)}),u,r),n._backpressure=void 0,n._backpressureChangePromise=void 0,n._backpressureChangePromise_resolve=void 0,He(n,!0),n._transformStreamController=void 0}(this,c((n=>{f=n})),s,a,o,i),function(n,l){const e=Object.create(Ue.prototype);let t=n=>{try{return ze(e,n),d(void 0)}catch(n){return h(n)}},u=()=>d(void 0);void 0!==l.transform&&(t=n=>l.transform(n,e)),void 0!==l.flush&&(u=()=>l.flush(e)),function(n,l,e,t){l._controlledTransformStream=n,n._transformStreamController=l,l._transformAlgorithm=e,l._flushAlgorithm=t}(n,e,t,u)}(this,r),void 0!==r.start?f(r.start(this._transformStreamController)):f(void 0)}get readable(){if(!Me(this))throw Ke("readable");return this._readable}get writable(){if(!Me(this))throw Ke("writable");return this._writable}}function Me(n){return!!u(n)&&!!Object.prototype.hasOwnProperty.call(n,"_transformStreamController")&&n instanceof je}function Ne(n,l){ue(n._readable._readableStreamController,l),Be(n,l)}function Be(n,l){We(n._transformStreamController),Ol(n._writable._writableStreamController,l),n._backpressure&&He(n,!1)}function He(n,l){void 0!==n._backpressureChangePromise&&n._backpressureChangePromise_resolve(),n._backpressureChangePromise=c((l=>{n._backpressureChangePromise_resolve=l})),n._backpressure=l}Object.defineProperties(je.prototype,{readable:{enumerable:!0},writable:{enumerable:!0}}),"symbol"==typeof l.toStringTag&&Object.defineProperty(je.prototype,l.toStringTag,{value:"TransformStream",configurable:!0});class Ue{constructor(){throw new TypeError("Illegal constructor")}get desiredSize(){if(!qe(this))throw Ge("desiredSize");return re(this._controlledTransformStream._readable._readableStreamController)}enqueue(n=void 0){if(!qe(this))throw Ge("enqueue");ze(this,n)}error(n=void 0){if(!qe(this))throw Ge("error");var l;l=n,Ne(this._controlledTransformStream,l)}terminate(){if(!qe(this))throw Ge("terminate");!function(n){const l=n._controlledTransformStream;ee(l._readable._readableStreamController);Be(l,new TypeError("TransformStream terminated"))}(this)}}function qe(n){return!!u(n)&&!!Object.prototype.hasOwnProperty.call(n,"_controlledTransformStream")&&n instanceof Ue}function We(n){n._transformAlgorithm=void 0,n._flushAlgorithm=void 0}function ze(n,l){const e=n._controlledTransformStream,t=e._readable._readableStreamController;if(!oe(t))throw new TypeError("Readable side is not in a state that permits enqueue");try{te(t,l)}catch(n){throw Be(e,n),e._readable._storedError}const u=function(n){return!ne(n)}(t);u!==e._backpressure&&He(e,!0)}function Ve(n,l){return y(n._transformAlgorithm(l),void 0,(l=>{throw Ne(n._controlledTransformStream,l),l}))}function Ge(n){return new TypeError(`TransformStreamDefaultController.prototype.${n} can only be used on a TransformStreamDefaultController`)}function Ke(n){return new TypeError(`TransformStream.prototype.${n} can only be used on a TransformStream`)}Object.defineProperties(Ue.prototype,{enqueue:{enumerable:!0},error:{enumerable:!0},terminate:{enumerable:!0},desiredSize:{enumerable:!0}}),"symbol"==typeof l.toStringTag&&Object.defineProperty(Ue.prototype,l.toStringTag,{value:"TransformStreamDefaultController",configurable:!0}),n.ByteLengthQueuingStrategy=xe,n.CountQueuingStrategy=Ae,n.ReadableByteStreamController=gn,n.ReadableStream=me,n.ReadableStreamBYOBReader=Vn,n.ReadableStreamBYOBRequest=mn,n.ReadableStreamDefaultController=Zl,n.ReadableStreamDefaultReader=Z,n.TransformStream=je,n.TransformStreamDefaultController=Ue,n.WritableStream=ol,n.WritableStreamDefaultController=kl,n.WritableStreamDefaultWriter=wl,Object.defineProperty(n,"__esModule",{value:!0})},e(l)},4403:n=>{function l(n){var l=new Error("Cannot find module '"+n+"'");throw l.code="MODULE_NOT_FOUND",l}l.keys=()=>[],l.resolve=l,l.id=4403,n.exports=l},7878:n=>{"use strict";n.exports=require("mocha")},1398:n=>{"use strict";n.exports=require("vscode")},2613:n=>{"use strict";n.exports=require("assert")},181:n=>{"use strict";n.exports=require("buffer")},5317:n=>{"use strict";n.exports=require("child_process")},9140:n=>{"use strict";n.exports=require("constants")},6982:n=>{"use strict";n.exports=require("crypto")},4434:n=>{"use strict";n.exports=require("events")},9896:n=>{"use strict";n.exports=require("fs")},1943:n=>{"use strict";n.exports=require("fs/promises")},8611:n=>{"use strict";n.exports=require("http")},5692:n=>{"use strict";n.exports=require("https")},9278:n=>{"use strict";n.exports=require("net")},1708:n=>{"use strict";n.exports=require("node:process")},7830:n=>{"use strict";n.exports=require("node:stream/web")},857:n=>{"use strict";n.exports=require("os")},6928:n=>{"use strict";n.exports=require("path")},2203:n=>{"use strict";n.exports=require("stream")},3193:n=>{"use strict";n.exports=require("string_decoder")},3557:n=>{"use strict";n.exports=require("timers")},4756:n=>{"use strict";n.exports=require("tls")},2018:n=>{"use strict";n.exports=require("tty")},7016:n=>{"use strict";n.exports=require("url")},9023:n=>{"use strict";n.exports=require("util")},8167:n=>{"use strict";n.exports=require("worker_threads")},3106:n=>{"use strict";n.exports=require("zlib")},3328:(n,l,e)=>{if(!globalThis.ReadableStream)try{const n=e(1708),{emitWarning:l}=n;try{n.emitWarning=()=>{},Object.assign(globalThis,e(7830)),n.emitWarning=l}catch(e){throw n.emitWarning=l,e}}catch(n){Object.assign(globalThis,e(5010))}try{const{Blob:n}=e(181);n&&!n.prototype.stream&&(n.prototype.stream=function(n){let l=0;const e=this;return new ReadableStream({type:"bytes",async pull(n){const t=e.slice(l,Math.min(e.size,l+65536)),u=await t.arrayBuffer();l+=u.byteLength,n.enqueue(new Uint8Array(u)),l===e.size&&n.close()}})})}catch(n){}},3876:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.Glob=void 0;const t=e(2608),u=e(9432),r=e(7016),o=e(4478),i=e(3984),s="object"==typeof process&&process&&"string"==typeof process.platform?process.platform:"linux";class a{absolute;cwd;root;dot;dotRelative;follow;ignore;magicalBraces;mark;matchBase;maxDepth;nobrace;nocase;nodir;noext;noglobstar;pattern;platform;realpath;scurry;stat;signal;windowsPathsNoEscape;withFileTypes;opts;patterns;constructor(n,l){if(!l)throw new TypeError("glob options required");if(this.withFileTypes=!!l.withFileTypes,this.signal=l.signal,this.follow=!!l.follow,this.dot=!!l.dot,this.dotRelative=!!l.dotRelative,this.nodir=!!l.nodir,this.mark=!!l.mark,l.cwd?(l.cwd instanceof URL||l.cwd.startsWith("file://"))&&(l.cwd=(0,r.fileURLToPath)(l.cwd)):this.cwd="",this.cwd=l.cwd||"",this.root=l.root,this.magicalBraces=!!l.magicalBraces,this.nobrace=!!l.nobrace,this.noext=!!l.noext,this.realpath=!!l.realpath,this.absolute=l.absolute,this.noglobstar=!!l.noglobstar,this.matchBase=!!l.matchBase,this.maxDepth="number"==typeof l.maxDepth?l.maxDepth:1/0,this.stat=!!l.stat,this.ignore=l.ignore,this.withFileTypes&&void 0!==this.absolute)throw new Error("cannot set absolute and withFileTypes:true");if("string"==typeof n&&(n=[n]),this.windowsPathsNoEscape=!!l.windowsPathsNoEscape||!1===l.allowWindowsEscape,this.windowsPathsNoEscape&&(n=n.map((n=>n.replace(/\\/g,"/")))),this.matchBase){if(l.noglobstar)throw new TypeError("base matching requires globstar");n=n.map((n=>n.includes("/")?n:`./**/${n}`))}if(this.pattern=n,this.platform=l.platform||s,this.opts={...l,platform:this.platform},l.scurry){if(this.scurry=l.scurry,void 0!==l.nocase&&l.nocase!==l.scurry.nocase)throw new Error("nocase option contradicts provided scurry option")}else{const n="win32"===l.platform?u.PathScurryWin32:"darwin"===l.platform?u.PathScurryDarwin:l.platform?u.PathScurryPosix:u.PathScurry;this.scurry=new n(this.cwd,{nocase:l.nocase,fs:l.fs})}this.nocase=this.scurry.nocase;const e="darwin"===this.platform||"win32"===this.platform,i={...l,dot:this.dot,matchBase:this.matchBase,nobrace:this.nobrace,nocase:this.nocase,nocaseMagicOnly:e,nocomment:!0,noext:this.noext,nonegate:!0,optimizationLevel:2,platform:this.platform,windowsPathsNoEscape:this.windowsPathsNoEscape,debug:!!this.opts.debug},a=this.pattern.map((n=>new t.Minimatch(n,i))),[c,d]=a.reduce(((n,l)=>(n[0].push(...l.set),n[1].push(...l.globParts),n)),[[],[]]);this.patterns=c.map(((n,l)=>{const e=d[l];if(!e)throw new Error("invalid pattern object");return new o.Pattern(n,e,0,this.platform)}))}async walk(){return[...await new i.GlobWalker(this.patterns,this.scurry.cwd,{...this.opts,maxDepth:this.maxDepth!==1/0?this.maxDepth+this.scurry.cwd.depth():1/0,platform:this.platform,nocase:this.nocase}).walk()]}walkSync(){return[...new i.GlobWalker(this.patterns,this.scurry.cwd,{...this.opts,maxDepth:this.maxDepth!==1/0?this.maxDepth+this.scurry.cwd.depth():1/0,platform:this.platform,nocase:this.nocase}).walkSync()]}stream(){return new i.GlobStream(this.patterns,this.scurry.cwd,{...this.opts,maxDepth:this.maxDepth!==1/0?this.maxDepth+this.scurry.cwd.depth():1/0,platform:this.platform,nocase:this.nocase}).stream()}streamSync(){return new i.GlobStream(this.patterns,this.scurry.cwd,{...this.opts,maxDepth:this.maxDepth!==1/0?this.maxDepth+this.scurry.cwd.depth():1/0,platform:this.platform,nocase:this.nocase}).streamSync()}iterateSync(){return this.streamSync()[Symbol.iterator]()}[Symbol.iterator](){return this.iterateSync()}iterate(){return this.stream()[Symbol.asyncIterator]()}[Symbol.asyncIterator](){return this.iterate()}}l.Glob=a},3046:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.hasMagic=void 0;const t=e(2608);l.hasMagic=(n,l={})=>{Array.isArray(n)||(n=[n]);for(const e of n)if(new t.Minimatch(e,l).hasMagic())return!0;return!1}},7972:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.Ignore=void 0;const t=e(2608),u=e(4478),r="object"==typeof process&&process&&"string"==typeof process.platform?process.platform:"linux";l.Ignore=class{relative;relativeChildren;absolute;absoluteChildren;constructor(n,{nobrace:l,nocase:e,noext:o,noglobstar:i,platform:s=r}){this.relative=[],this.absolute=[],this.relativeChildren=[],this.absoluteChildren=[];const a={dot:!0,nobrace:l,nocase:e,noext:o,noglobstar:i,optimizationLevel:2,platform:s,nocomment:!0,nonegate:!0};for(const l of n){const n=new t.Minimatch(l,a);for(let l=0;l<n.set.length;l++){const e=n.set[l],r=n.globParts[l];if(!e||!r)throw new Error("invalid pattern object");const o=new u.Pattern(e,r,0,s),i=new t.Minimatch(o.globString(),a),c="**"===r[r.length-1],d=o.isAbsolute();d?this.absolute.push(i):this.relative.push(i),c&&(d?this.absoluteChildren.push(i):this.relativeChildren.push(i))}}}ignored(n){const l=n.fullpath(),e=`${l}/`,t=n.relative()||".",u=`${t}/`;for(const n of this.relative)if(n.match(t)||n.match(u))return!0;for(const n of this.absolute)if(n.match(l)||n.match(e))return!0;return!1}childrenIgnored(n){const l=n.fullpath()+"/",e=(n.relative()||".")+"/";for(const n of this.relativeChildren)if(n.match(e))return!0;for(const n of this.absoluteChildren)if(n.match(l))return!0;return!1}}},1756:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.glob=l.hasMagic=l.Glob=l.unescape=l.escape=l.sync=l.iterate=l.iterateSync=l.stream=l.streamSync=l.globIterate=l.globIterateSync=l.globSync=l.globStream=l.globStreamSync=void 0;const t=e(2608),u=e(3876),r=e(3046);function o(n,l={}){return new u.Glob(n,l).streamSync()}function i(n,l={}){return new u.Glob(n,l).stream()}function s(n,l={}){return new u.Glob(n,l).walkSync()}async function a(n,l={}){return new u.Glob(n,l).walk()}function c(n,l={}){return new u.Glob(n,l).iterateSync()}function d(n,l={}){return new u.Glob(n,l).iterate()}l.globStreamSync=o,l.globStream=i,l.globSync=s,l.globIterateSync=c,l.globIterate=d,l.streamSync=o,l.stream=Object.assign(i,{sync:o}),l.iterateSync=c,l.iterate=Object.assign(d,{sync:c}),l.sync=Object.assign(s,{stream:o,iterate:c});var h=e(2608);Object.defineProperty(l,"escape",{enumerable:!0,get:function(){return h.escape}}),Object.defineProperty(l,"unescape",{enumerable:!0,get:function(){return h.unescape}});var f=e(3876);Object.defineProperty(l,"Glob",{enumerable:!0,get:function(){return f.Glob}});var p=e(3046);Object.defineProperty(l,"hasMagic",{enumerable:!0,get:function(){return p.hasMagic}}),l.glob=Object.assign(a,{glob:a,globSync:s,sync:l.sync,globStream:i,stream:l.stream,globStreamSync:o,streamSync:l.streamSync,globIterate:d,iterate:l.iterate,globIterateSync:c,iterateSync:l.iterateSync,Glob:u.Glob,hasMagic:r.hasMagic,escape:t.escape,unescape:t.unescape}),l.glob.glob=l.glob},4478:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.Pattern=void 0;const t=e(2608);class u{#n;#l;#e;length;#t;#u;#r;#o;#i;#s;#a=!0;constructor(n,l,e,t){if(!(n.length>=1))throw new TypeError("empty pattern list");if(!(l.length>=1))throw new TypeError("empty glob list");if(l.length!==n.length)throw new TypeError("mismatched pattern list and glob list lengths");if(this.length=n.length,e<0||e>=this.length)throw new TypeError("index out of range");if(this.#n=n,this.#l=l,this.#e=e,this.#t=t,0===this.#e)if(this.isUNC()){const[n,l,e,t,...u]=this.#n,[r,o,i,s,...a]=this.#l;""===u[0]&&(u.shift(),a.shift());const c=[n,l,e,t,""].join("/"),d=[r,o,i,s,""].join("/");this.#n=[c,...u],this.#l=[d,...a],this.length=this.#n.length}else if(this.isDrive()||this.isAbsolute()){const[n,...l]=this.#n,[e,...t]=this.#l;""===l[0]&&(l.shift(),t.shift());const u=n+"/",r=e+"/";this.#n=[u,...l],this.#l=[r,...t],this.length=this.#n.length}}pattern(){return this.#n[this.#e]}isString(){return"string"==typeof this.#n[this.#e]}isGlobstar(){return this.#n[this.#e]===t.GLOBSTAR}isRegExp(){return this.#n[this.#e]instanceof RegExp}globString(){return this.#r=this.#r||(0===this.#e?this.isAbsolute()?this.#l[0]+this.#l.slice(1).join("/"):this.#l.join("/"):this.#l.slice(this.#e).join("/"))}hasMore(){return this.length>this.#e+1}rest(){return void 0!==this.#u?this.#u:this.hasMore()?(this.#u=new u(this.#n,this.#l,this.#e+1,this.#t),this.#u.#s=this.#s,this.#u.#i=this.#i,this.#u.#o=this.#o,this.#u):this.#u=null}isUNC(){const n=this.#n;return void 0!==this.#i?this.#i:this.#i="win32"===this.#t&&0===this.#e&&""===n[0]&&""===n[1]&&"string"==typeof n[2]&&!!n[2]&&"string"==typeof n[3]&&!!n[3]}isDrive(){const n=this.#n;return void 0!==this.#o?this.#o:this.#o="win32"===this.#t&&0===this.#e&&this.length>1&&"string"==typeof n[0]&&/^[a-z]:$/i.test(n[0])}isAbsolute(){const n=this.#n;return void 0!==this.#s?this.#s:this.#s=""===n[0]&&n.length>1||this.isDrive()||this.isUNC()}root(){const n=this.#n[0];return"string"==typeof n&&this.isAbsolute()&&0===this.#e?n:""}checkFollowGlobstar(){return!(0===this.#e||!this.isGlobstar()||!this.#a)}markFollowGlobstar(){return!(0===this.#e||!this.isGlobstar()||!this.#a||(this.#a=!1,0))}}l.Pattern=u},800:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.Processor=l.SubWalks=l.MatchRecord=l.HasWalkedCache=void 0;const t=e(2608);class u{store;constructor(n=new Map){this.store=n}copy(){return new u(new Map(this.store))}hasWalked(n,l){return this.store.get(n.fullpath())?.has(l.globString())}storeWalked(n,l){const e=n.fullpath(),t=this.store.get(e);t?t.add(l.globString()):this.store.set(e,new Set([l.globString()]))}}l.HasWalkedCache=u;class r{store=new Map;add(n,l,e){const t=(l?2:0)|(e?1:0),u=this.store.get(n);this.store.set(n,void 0===u?t:t&u)}entries(){return[...this.store.entries()].map((([n,l])=>[n,!!(2&l),!!(1&l)]))}}l.MatchRecord=r;class o{store=new Map;add(n,l){if(!n.canReaddir())return;const e=this.store.get(n);e?e.find((n=>n.globString()===l.globString()))||e.push(l):this.store.set(n,[l])}get(n){const l=this.store.get(n);if(!l)throw new Error("attempting to walk unknown path");return l}entries(){return this.keys().map((n=>[n,this.store.get(n)]))}keys(){return[...this.store.keys()].filter((n=>n.canReaddir()))}}l.SubWalks=o;class i{hasWalkedCache;matches=new r;subwalks=new o;patterns;follow;dot;opts;constructor(n,l){this.opts=n,this.follow=!!n.follow,this.dot=!!n.dot,this.hasWalkedCache=l?l.copy():new u}processPatterns(n,l){this.patterns=l;const e=l.map((l=>[n,l]));for(let[n,l]of e){this.hasWalkedCache.storeWalked(n,l);const e=l.root(),u=l.isAbsolute()&&!1!==this.opts.absolute;if(e){n=n.resolve("/"===e&&void 0!==this.opts.root?this.opts.root:e);const t=l.rest();if(!t){this.matches.add(n,!0,!1);continue}l=t}if(n.isENOENT())continue;let r,o,i=!1;for(;"string"==typeof(r=l.pattern())&&(o=l.rest());){const e=n.resolve(r);n=e,l=o,i=!0}if(r=l.pattern(),o=l.rest(),i){if(this.hasWalkedCache.hasWalked(n,l))continue;this.hasWalkedCache.storeWalked(n,l)}if("string"!=typeof r)if(r===t.GLOBSTAR){(!n.isSymbolicLink()||this.follow||l.checkFollowGlobstar())&&this.subwalks.add(n,l);const e=o?.pattern(),t=o?.rest();if(o&&(""!==e&&"."!==e||t)){if(".."===e){const l=n.parent||n;t?this.hasWalkedCache.hasWalked(l,t)||this.subwalks.add(l,t):this.matches.add(l,u,!0)}}else this.matches.add(n,u,""===e||"."===e)}else r instanceof RegExp&&this.subwalks.add(n,l);else{const l=".."===r||""===r||"."===r;this.matches.add(n.resolve(r),u,l)}}return this}subwalkTargets(){return this.subwalks.keys()}child(){return new i(this.opts,this.hasWalkedCache)}filterEntries(n,l){const e=this.subwalks.get(n),u=this.child();for(const n of l)for(const l of e){const e=l.isAbsolute(),r=l.pattern(),o=l.rest();r===t.GLOBSTAR?u.testGlobstar(n,l,o,e):r instanceof RegExp?u.testRegExp(n,r,o,e):u.testString(n,r,o,e)}return u}testGlobstar(n,l,e,t){if(!this.dot&&n.name.startsWith(".")||(l.hasMore()||this.matches.add(n,t,!1),n.canReaddir()&&(this.follow||!n.isSymbolicLink()?this.subwalks.add(n,l):n.isSymbolicLink()&&(e&&l.checkFollowGlobstar()?this.subwalks.add(n,e):l.markFollowGlobstar()&&this.subwalks.add(n,l)))),e){const l=e.pattern();if("string"==typeof l&&".."!==l&&""!==l&&"."!==l)this.testString(n,l,e.rest(),t);else if(".."===l){const l=n.parent||n;this.subwalks.add(l,e)}else l instanceof RegExp&&this.testRegExp(n,l,e.rest(),t)}}testRegExp(n,l,e,t){l.test(n.name)&&(e?this.subwalks.add(n,e):this.matches.add(n,t,!1))}testString(n,l,e,t){n.isNamed(l)&&(e?this.subwalks.add(n,e):this.matches.add(n,t,!1))}}l.Processor=i},3984:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.GlobStream=l.GlobWalker=l.GlobUtil=void 0;const t=e(5420),u=e(7972),r=e(800);class o{path;patterns;opts;seen=new Set;paused=!1;aborted=!1;#c=[];#d;#h;signal;maxDepth;constructor(n,l,e){this.patterns=n,this.path=l,this.opts=e,this.#h=e.posix||"win32"!==e.platform?"/":"\\",e.ignore&&(this.#d=((n,l)=>"string"==typeof n?new u.Ignore([n],l):Array.isArray(n)?new u.Ignore(n,l):n)(e.ignore,e)),this.maxDepth=e.maxDepth||1/0,e.signal&&(this.signal=e.signal,this.signal.addEventListener("abort",(()=>{this.#c.length=0})))}#f(n){return this.seen.has(n)||!!this.#d?.ignored?.(n)}#p(n){return!!this.#d?.childrenIgnored?.(n)}pause(){this.paused=!0}resume(){if(this.signal?.aborted)return;let n;for(this.paused=!1;!this.paused&&(n=this.#c.shift());)n()}onResume(n){this.signal?.aborted||(this.paused?this.#c.push(n):n())}async matchCheck(n,l){if(l&&this.opts.nodir)return;let e;if(this.opts.realpath){if(e=n.realpathCached()||await n.realpath(),!e)return;n=e}const t=n.isUnknown()||this.opts.stat;return this.matchCheckTest(t?await n.lstat():n,l)}matchCheckTest(n,l){return!n||!(this.maxDepth===1/0||n.depth()<=this.maxDepth)||l&&!n.canReaddir()||this.opts.nodir&&n.isDirectory()||this.#f(n)?void 0:n}matchCheckSync(n,l){if(l&&this.opts.nodir)return;let e;if(this.opts.realpath){if(e=n.realpathCached()||n.realpathSync(),!e)return;n=e}const t=n.isUnknown()||this.opts.stat;return this.matchCheckTest(t?n.lstatSync():n,l)}matchFinish(n,l){if(this.#f(n))return;const e=void 0===this.opts.absolute?l:this.opts.absolute;this.seen.add(n);const t=this.opts.mark&&n.isDirectory()?this.#h:"";if(this.opts.withFileTypes)this.matchEmit(n);else if(e){const l=this.opts.posix?n.fullpathPosix():n.fullpath();this.matchEmit(l+t)}else{const l=this.opts.posix?n.relativePosix():n.relative(),e=this.opts.dotRelative&&!l.startsWith(".."+this.#h)?"."+this.#h:"";this.matchEmit(l?e+l+t:"."+t)}}async match(n,l,e){const t=await this.matchCheck(n,e);t&&this.matchFinish(t,l)}matchSync(n,l,e){const t=this.matchCheckSync(n,e);t&&this.matchFinish(t,l)}walkCB(n,l,e){this.signal?.aborted&&e(),this.walkCB2(n,l,new r.Processor(this.opts),e)}walkCB2(n,l,e,t){if(this.#p(n))return t();if(this.signal?.aborted&&t(),this.paused)return void this.onResume((()=>this.walkCB2(n,l,e,t)));e.processPatterns(n,l);let u=1;const r=()=>{0==--u&&t()};for(const[n,l,t]of e.matches.entries())this.#f(n)||(u++,this.match(n,l,t).then((()=>r())));for(const n of e.subwalkTargets()){if(this.maxDepth!==1/0&&n.depth()>=this.maxDepth)continue;u++;const l=n.readdirCached();n.calledReaddir()?this.walkCB3(n,l,e,r):n.readdirCB(((l,t)=>this.walkCB3(n,t,e,r)),!0)}r()}walkCB3(n,l,e,t){e=e.filterEntries(n,l);let u=1;const r=()=>{0==--u&&t()};for(const[n,l,t]of e.matches.entries())this.#f(n)||(u++,this.match(n,l,t).then((()=>r())));for(const[n,l]of e.subwalks.entries())u++,this.walkCB2(n,l,e.child(),r);r()}walkCBSync(n,l,e){this.signal?.aborted&&e(),this.walkCB2Sync(n,l,new r.Processor(this.opts),e)}walkCB2Sync(n,l,e,t){if(this.#p(n))return t();if(this.signal?.aborted&&t(),this.paused)return void this.onResume((()=>this.walkCB2Sync(n,l,e,t)));e.processPatterns(n,l);let u=1;const r=()=>{0==--u&&t()};for(const[n,l,t]of e.matches.entries())this.#f(n)||this.matchSync(n,l,t);for(const n of e.subwalkTargets()){if(this.maxDepth!==1/0&&n.depth()>=this.maxDepth)continue;u++;const l=n.readdirSync();this.walkCB3Sync(n,l,e,r)}r()}walkCB3Sync(n,l,e,t){e=e.filterEntries(n,l);let u=1;const r=()=>{0==--u&&t()};for(const[n,l,t]of e.matches.entries())this.#f(n)||this.matchSync(n,l,t);for(const[n,l]of e.subwalks.entries())u++,this.walkCB2Sync(n,l,e.child(),r);r()}}l.GlobUtil=o,l.GlobWalker=class extends o{matches;constructor(n,l,e){super(n,l,e),this.matches=new Set}matchEmit(n){this.matches.add(n)}async walk(){if(this.signal?.aborted)throw this.signal.reason;return this.path.isUnknown()&&await this.path.lstat(),await new Promise(((n,l)=>{this.walkCB(this.path,this.patterns,(()=>{this.signal?.aborted?l(this.signal.reason):n(this.matches)}))})),this.matches}walkSync(){if(this.signal?.aborted)throw this.signal.reason;return this.path.isUnknown()&&this.path.lstatSync(),this.walkCBSync(this.path,this.patterns,(()=>{if(this.signal?.aborted)throw this.signal.reason})),this.matches}},l.GlobStream=class extends o{results;constructor(n,l,e){super(n,l,e),this.results=new t.Minipass({signal:this.signal,objectMode:!0}),this.results.on("drain",(()=>this.resume())),this.results.on("resume",(()=>this.resume()))}matchEmit(n){this.results.write(n),this.results.flowing||this.pause()}stream(){const n=this.path;return n.isUnknown()?n.lstat().then((()=>{this.walkCB(n,this.patterns,(()=>this.results.end()))})):this.walkCB(n,this.patterns,(()=>this.results.end())),this.results}streamSync(){return this.path.isUnknown()&&this.path.lstatSync(),this.walkCBSync(this.path,this.patterns,(()=>this.results.end())),this.results}}},7184:(n,l)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.assertValidPattern=void 0,l.assertValidPattern=n=>{if("string"!=typeof n)throw new TypeError("invalid pattern");if(n.length>65536)throw new TypeError("pattern is too long")}},2032:(n,l,e)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.AST=void 0;const t=e(2585),u=e(1118),r=new Set(["!","?","+","*","@"]),o=n=>r.has(n),i="(?!\\.)",s=new Set(["[","."]),a=new Set(["..","."]),c=new Set("().*{}+?[]^$\\!"),d="[^/]",h=d+"*?",f=d+"+?";class p{type;#m;#g;#y=!1;#v=[];#w;#b;#S;#C=!1;#D;#E;#_=!1;constructor(n,l,e={}){this.type=n,n&&(this.#g=!0),this.#w=l,this.#m=this.#w?this.#w.#m:this,this.#D=this.#m===this?e:this.#m.#D,this.#S=this.#m===this?[]:this.#m.#S,"!"!==n||this.#m.#C||this.#S.push(this),this.#b=this.#w?this.#w.#v.length:0}get hasMagic(){if(void 0!==this.#g)return this.#g;for(const n of this.#v)if("string"!=typeof n&&(n.type||n.hasMagic))return this.#g=!0;return this.#g}toString(){return void 0!==this.#E?this.#E:this.type?this.#E=this.type+"("+this.#v.map((n=>String(n))).join("|")+")":this.#E=this.#v.map((n=>String(n))).join("")}#k(){if(this!==this.#m)throw new Error("should only call on root");if(this.#C)return this;let n;for(this.toString(),this.#C=!0;n=this.#S.pop();){if("!"!==n.type)continue;let l=n,e=l.#w;for(;e;){for(let t=l.#b+1;!e.type&&t<e.#v.length;t++)for(const l of n.#v){if("string"==typeof l)throw new Error("string part in extglob AST??");l.copyIn(e.#v[t])}l=e,e=l.#w}}return this}push(...n){for(const l of n)if(""!==l){if("string"!=typeof l&&!(l instanceof p&&l.#w===this))throw new Error("invalid part: "+l);this.#v.push(l)}}toJSON(){const n=null===this.type?this.#v.slice().map((n=>"string"==typeof n?n:n.toJSON())):[this.type,...this.#v.map((n=>n.toJSON()))];return this.isStart()&&!this.type&&n.unshift([]),this.isEnd()&&(this===this.#m||this.#m.#C&&"!"===this.#w?.type)&&n.push({}),n}isStart(){if(this.#m===this)return!0;if(!this.#w?.isStart())return!1;if(0===this.#b)return!0;const n=this.#w;for(let l=0;l<this.#b;l++){const e=n.#v[l];if(!(e instanceof p&&"!"===e.type))return!1}return!0}isEnd(){if(this.#m===this)return!0;if("!"===this.#w?.type)return!0;if(!this.#w?.isEnd())return!1;if(!this.type)return this.#w?.isEnd();const n=this.#w?this.#w.#v.length:0;return this.#b===n-1}copyIn(n){"string"==typeof n?this.push(n):this.push(n.clone(this))}clone(n){const l=new p(this.type,n);for(const n of this.#v)l.copyIn(n);return l}static#x(n,l,e,t){let u=!1,r=!1,i=-1,s=!1;if(null===l.type){let a=e,c="";for(;a<n.length;){const e=n.charAt(a++);if(u||"\\"===e)u=!u,c+=e;else if(r)a===i+1?"^"!==e&&"!"!==e||(s=!0):"]"!==e||a===i+2&&s||(r=!1),c+=e;else if("["!==e)if(t.noext||!o(e)||"("!==n.charAt(a))c+=e;else{l.push(c),c="";const u=new p(e,l);a=p.#x(n,u,a,t),l.push(u)}else r=!0,i=a,s=!1,c+=e}return l.push(c),a}let a=e+1,c=new p(null,l);const d=[];let h="";for(;a<n.length;){const e=n.charAt(a++);if(u||"\\"===e)u=!u,h+=e;else if(r)a===i+1?"^"!==e&&"!"!==e||(s=!0):"]"!==e||a===i+2&&s||(r=!1),h+=e;else if("["!==e)if(o(e)&&"("===n.charAt(a)){c.push(h),h="";const l=new p(e,c);c.push(l),a=p.#x(n,l,a,t)}else if("|"!==e){if(")"===e)return""===h&&0===l.#v.length&&(l.#_=!0),c.push(h),h="",l.push(...d,c),a;h+=e}else c.push(h),h="",d.push(c),c=new p(null,l);else r=!0,i=a,s=!1,h+=e}return l.type=null,l.#g=void 0,l.#v=[n.substring(e-1)],a}static fromGlob(n,l={}){const e=new p(null,void 0,l);return p.#x(n,e,0,l),e}toMMPattern(){if(this!==this.#m)return this.#m.toMMPattern();const n=this.toString(),[l,e,t,u]=this.toRegExpSource();if(!(t||this.#g||this.#D.nocase&&!this.#D.nocaseMagicOnly&&n.toUpperCase()!==n.toLowerCase()))return e;const r=(this.#D.nocase?"i":"")+(u?"u":"");return Object.assign(new RegExp(`^${l}$`,r),{_src:l,_glob:n})}toRegExpSource(n){const l=n??!!this.#D.dot;if(this.#m===this&&this.#k(),!this.type){const e=this.isStart()&&this.isEnd(),t=this.#v.map((l=>{const[t,u,r,o]="string"==typeof l?p.#T(l,this.#g,e):l.toRegExpSource(n);return this.#g=this.#g||r,this.#y=this.#y||o,t})).join("");let r="";if(this.isStart()&&"string"==typeof this.#v[0]&&(1!==this.#v.length||!a.has(this.#v[0]))){const e=s,u=l&&e.has(t.charAt(0))||t.startsWith("\\.")&&e.has(t.charAt(2))||t.startsWith("\\.\\.")&&e.has(t.charAt(4)),o=!l&&!n&&e.has(t.charAt(0));r=u?"(?!(?:^|/)\\.\\.?(?:$|/))":o?i:""}let o="";return this.isEnd()&&this.#m.#C&&"!"===this.#w?.type&&(o="(?:$|\\/)"),[r+t+o,(0,u.unescape)(t),this.#g=!!this.#g,this.#y]}const e="*"===this.type||"+"===this.type,t="!"===this.type?"(?:(?!(?:":"(?:";let r=this.#P(l);if(this.isStart()&&this.isEnd()&&!r&&"!"!==this.type){const n=this.toString();return this.#v=[n],this.type=null,this.#g=void 0,[n,(0,u.unescape)(this.toString()),!1,!1]}let o=!e||n||l?"":this.#P(!0);o===r&&(o=""),o&&(r=`(?:${r})(?:${o})*?`);let c="";return c="!"===this.type&&this.#_?(this.isStart()&&!l?i:"")+f:t+r+("!"===this.type?"))"+(!this.isStart()||l||n?"":i)+h+")":"@"===this.type?")":"?"===this.type?")?":"+"===this.type&&o?")":"*"===this.type&&o?")?":`)${this.type}`),[c,(0,u.unescape)(r),this.#g=!!this.#g,this.#y]}#P(n){return this.#v.map((l=>{if("string"==typeof l)throw new Error("string type in extglob ast??");const[e,t,u,r]=l.toRegExpSource(n);return this.#y=this.#y||r,e})).filter((n=>!(this.isStart()&&this.isEnd()&&!n))).join("|")}static#T(n,l,e=!1){let r=!1,o="",i=!1;for(let u=0;u<n.length;u++){const s=n.charAt(u);if(r)r=!1,o+=(c.has(s)?"\\":"")+s;else if("\\"!==s){if("["===s){const[e,r,s,a]=(0,t.parseClass)(n,u);if(s){o+=e,i=i||r,u+=s-1,l=l||a;continue}}"*"!==s?"?"!==s?o+=s.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&"):(o+=d,l=!0):(o+=e&&"*"===n?f:h,l=!0)}else u===n.length-1?o+="\\\\":r=!0}return[o,(0,u.unescape)(n),!!l,i]}}l.AST=p},2585:(n,l)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.parseClass=void 0;const e={"[:alnum:]":["\\p{L}\\p{Nl}\\p{Nd}",!0],"[:alpha:]":["\\p{L}\\p{Nl}",!0],"[:ascii:]":["\\x00-\\x7f",!1],"[:blank:]":["\\p{Zs}\\t",!0],"[:cntrl:]":["\\p{Cc}",!0],"[:digit:]":["\\p{Nd}",!0],"[:graph:]":["\\p{Z}\\p{C}",!0,!0],"[:lower:]":["\\p{Ll}",!0],"[:print:]":["\\p{C}",!0],"[:punct:]":["\\p{P}",!0],"[:space:]":["\\p{Z}\\t\\r\\n\\v\\f",!0],"[:upper:]":["\\p{Lu}",!0],"[:word:]":["\\p{L}\\p{Nl}\\p{Nd}\\p{Pc}",!0],"[:xdigit:]":["A-Fa-f0-9",!1]},t=n=>n.replace(/[[\]\\-]/g,"\\$&"),u=n=>n.join("");l.parseClass=(n,l)=>{const r=l;if("["!==n.charAt(r))throw new Error("not in a brace expression");const o=[],i=[];let s=r+1,a=!1,c=!1,d=!1,h=!1,f=r,p="";n:for(;s<n.length;){const l=n.charAt(s);if("!"!==l&&"^"!==l||s!==r+1){if("]"===l&&a&&!d){f=s+1;break}if(a=!0,"\\"!==l||d){if("["===l&&!d)for(const[l,[t,u,a]]of Object.entries(e))if(n.startsWith(l,s)){if(p)return["$.",!1,n.length-r,!0];s+=l.length,a?i.push(t):o.push(t),c=c||u;continue n}d=!1,p?(l>p?o.push(t(p)+"-"+t(l)):l===p&&o.push(t(l)),p="",s++):n.startsWith("-]",s+1)?(o.push(t(l+"-")),s+=2):n.startsWith("-",s+1)?(p=l,s+=2):(o.push(t(l)),s++)}else d=!0,s++}else h=!0,s++}if(f<s)return["",!1,0,!1];if(!o.length&&!i.length)return["$.",!1,n.length-r,!0];if(0===i.length&&1===o.length&&/^\\?.$/.test(o[0])&&!h){return[(m=2===o[0].length?o[0].slice(-1):o[0],m.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&")),!1,f-r,!1]}var m;const g="["+(h?"^":"")+u(o)+"]",y="["+(h?"":"^")+u(i)+"]";return[o.length&&i.length?"("+g+"|"+y+")":o.length?g:y,c,f-r,!0]}},8641:(n,l)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.escape=void 0,l.escape=(n,{windowsPathsNoEscape:l=!1}={})=>l?n.replace(/[?*()[\]]/g,"[$&]"):n.replace(/[?*()[\]\\]/g,"\\$&")},2608:function(n,l,e){"use strict";var t=this&&this.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(l,"__esModule",{value:!0}),l.unescape=l.escape=l.AST=l.Minimatch=l.match=l.makeRe=l.braceExpand=l.defaults=l.filter=l.GLOBSTAR=l.sep=l.minimatch=void 0;const u=t(e(8928)),r=e(7184),o=e(2032),i=e(8641),s=e(1118);l.minimatch=(n,l,e={})=>((0,r.assertValidPattern)(l),!(!e.nocomment&&"#"===l.charAt(0))&&new O(l,e).match(n));const a=/^\*+([^+@!?\*\[\(]*)$/,c=n=>l=>!l.startsWith(".")&&l.endsWith(n),d=n=>l=>l.endsWith(n),h=n=>(n=n.toLowerCase(),l=>!l.startsWith(".")&&l.toLowerCase().endsWith(n)),f=n=>(n=n.toLowerCase(),l=>l.toLowerCase().endsWith(n)),p=/^\*+\.\*+$/,m=n=>!n.startsWith(".")&&n.includes("."),g=n=>"."!==n&&".."!==n&&n.includes("."),y=/^\.\*+$/,v=n=>"."!==n&&".."!==n&&n.startsWith("."),w=/^\*+$/,b=n=>0!==n.length&&!n.startsWith("."),S=n=>0!==n.length&&"."!==n&&".."!==n,C=/^\?+([^+@!?\*\[\(]*)?$/,D=([n,l=""])=>{const e=x([n]);return l?(l=l.toLowerCase(),n=>e(n)&&n.toLowerCase().endsWith(l)):e},E=([n,l=""])=>{const e=T([n]);return l?(l=l.toLowerCase(),n=>e(n)&&n.toLowerCase().endsWith(l)):e},_=([n,l=""])=>{const e=T([n]);return l?n=>e(n)&&n.endsWith(l):e},k=([n,l=""])=>{const e=x([n]);return l?n=>e(n)&&n.endsWith(l):e},x=([n])=>{const l=n.length;return n=>n.length===l&&!n.startsWith(".")},T=([n])=>{const l=n.length;return n=>n.length===l&&"."!==n&&".."!==n},P="object"==typeof process&&process?"object"==typeof process.env&&process.env&&process.env.__MINIMATCH_TESTING_PLATFORM__||process.platform:"posix";l.sep="win32"===P?"\\":"/",l.minimatch.sep=l.sep,l.GLOBSTAR=Symbol("globstar **"),l.minimatch.GLOBSTAR=l.GLOBSTAR,l.filter=(n,e={})=>t=>(0,l.minimatch)(t,n,e),l.minimatch.filter=l.filter;const I=(n,l={})=>Object.assign({},n,l);l.defaults=n=>{if(!n||"object"!=typeof n||!Object.keys(n).length)return l.minimatch;const e=l.minimatch;return Object.assign(((l,t,u={})=>e(l,t,I(n,u))),{Minimatch:class extends e.Minimatch{constructor(l,e={}){super(l,I(n,e))}static defaults(l){return e.defaults(I(n,l)).Minimatch}},AST:class extends e.AST{constructor(l,e,t={}){super(l,e,I(n,t))}static fromGlob(l,t={}){return e.AST.fromGlob(l,I(n,t))}},unescape:(l,t={})=>e.unescape(l,I(n,t)),escape:(l,t={})=>e.escape(l,I(n,t)),filter:(l,t={})=>e.filter(l,I(n,t)),defaults:l=>e.defaults(I(n,l)),makeRe:(l,t={})=>e.makeRe(l,I(n,t)),braceExpand:(l,t={})=>e.braceExpand(l,I(n,t)),match:(l,t,u={})=>e.match(l,t,I(n,u)),sep:e.sep,GLOBSTAR:l.GLOBSTAR})},l.minimatch.defaults=l.defaults,l.braceExpand=(n,l={})=>((0,r.assertValidPattern)(n),l.nobrace||!/\{(?:(?!\{).)*\}/.test(n)?[n]:(0,u.default)(n)),l.minimatch.braceExpand=l.braceExpand,l.makeRe=(n,l={})=>new O(n,l).makeRe(),l.minimatch.makeRe=l.makeRe,l.match=(n,l,e={})=>{const t=new O(l,e);return n=n.filter((n=>t.match(n))),t.options.nonull&&!n.length&&n.push(l),n},l.minimatch.match=l.match;const A=/[?*]|[+@!]\(.*?\)|\[|\]/;class O{options;set;pattern;windowsPathsNoEscape;nonegate;negate;comment;empty;preserveMultipleSlashes;partial;globSet;globParts;nocase;isWindows;platform;windowsNoMagicRoot;regexp;constructor(n,l={}){(0,r.assertValidPattern)(n),l=l||{},this.options=l,this.pattern=n,this.platform=l.platform||P,this.isWindows="win32"===this.platform,this.windowsPathsNoEscape=!!l.windowsPathsNoEscape||!1===l.allowWindowsEscape,this.windowsPathsNoEscape&&(this.pattern=this.pattern.replace(/\\/g,"/")),this.preserveMultipleSlashes=!!l.preserveMultipleSlashes,this.regexp=null,this.negate=!1,this.nonegate=!!l.nonegate,this.comment=!1,this.empty=!1,this.partial=!!l.partial,this.nocase=!!this.options.nocase,this.windowsNoMagicRoot=void 0!==l.windowsNoMagicRoot?l.windowsNoMagicRoot:!(!this.isWindows||!this.nocase),this.globSet=[],this.globParts=[],this.set=[],this.make()}hasMagic(){if(this.options.magicalBraces&&this.set.length>1)return!0;for(const n of this.set)for(const l of n)if("string"!=typeof l)return!0;return!1}debug(...n){}make(){const n=this.pattern,l=this.options;if(!l.nocomment&&"#"===n.charAt(0))return void(this.comment=!0);if(!n)return void(this.empty=!0);this.parseNegate(),this.globSet=[...new Set(this.braceExpand())],l.debug&&(this.debug=(...n)=>console.error(...n)),this.debug(this.pattern,this.globSet);const e=this.globSet.map((n=>this.slashSplit(n)));this.globParts=this.preprocess(e),this.debug(this.pattern,this.globParts);let t=this.globParts.map(((n,l,e)=>{if(this.isWindows&&this.windowsNoMagicRoot){const l=!(""!==n[0]||""!==n[1]||"?"!==n[2]&&A.test(n[2])||A.test(n[3])),e=/^[a-z]:/i.test(n[0]);if(l)return[...n.slice(0,4),...n.slice(4).map((n=>this.parse(n)))];if(e)return[n[0],...n.slice(1).map((n=>this.parse(n)))]}return n.map((n=>this.parse(n)))}));if(this.debug(this.pattern,t),this.set=t.filter((n=>-1===n.indexOf(!1))),this.isWindows)for(let n=0;n<this.set.length;n++){const l=this.set[n];""===l[0]&&""===l[1]&&"?"===this.globParts[n][2]&&"string"==typeof l[3]&&/^[a-z]:$/i.test(l[3])&&(l[2]="?")}this.debug(this.pattern,this.set)}preprocess(n){if(this.options.noglobstar)for(let l=0;l<n.length;l++)for(let e=0;e<n[l].length;e++)"**"===n[l][e]&&(n[l][e]="*");const{optimizationLevel:l=1}=this.options;return l>=2?(n=this.firstPhasePreProcess(n),n=this.secondPhasePreProcess(n)):n=l>=1?this.levelOneOptimize(n):this.adjascentGlobstarOptimize(n),n}adjascentGlobstarOptimize(n){return n.map((n=>{let l=-1;for(;-1!==(l=n.indexOf("**",l+1));){let e=l;for(;"**"===n[e+1];)e++;e!==l&&n.splice(l,e-l)}return n}))}levelOneOptimize(n){return n.map((n=>0===(n=n.reduce(((n,l)=>{const e=n[n.length-1];return"**"===l&&"**"===e?n:".."===l&&e&&".."!==e&&"."!==e&&"**"!==e?(n.pop(),n):(n.push(l),n)}),[])).length?[""]:n))}levelTwoFileOptimize(n){Array.isArray(n)||(n=this.slashSplit(n));let l=!1;do{if(l=!1,!this.preserveMultipleSlashes){for(let e=1;e<n.length-1;e++){const t=n[e];1===e&&""===t&&""===n[0]||"."!==t&&""!==t||(l=!0,n.splice(e,1),e--)}"."!==n[0]||2!==n.length||"."!==n[1]&&""!==n[1]||(l=!0,n.pop())}let e=0;for(;-1!==(e=n.indexOf("..",e+1));){const t=n[e-1];t&&"."!==t&&".."!==t&&"**"!==t&&(l=!0,n.splice(e-1,2),e-=2)}}while(l);return 0===n.length?[""]:n}firstPhasePreProcess(n){let l=!1;do{l=!1;for(let e of n){let t=-1;for(;-1!==(t=e.indexOf("**",t+1));){let u=t;for(;"**"===e[u+1];)u++;u>t&&e.splice(t+1,u-t);let r=e[t+1];const o=e[t+2],i=e[t+3];if(".."!==r)continue;if(!o||"."===o||".."===o||!i||"."===i||".."===i)continue;l=!0,e.splice(t,1);const s=e.slice(0);s[t]="**",n.push(s),t--}if(!this.preserveMultipleSlashes){for(let n=1;n<e.length-1;n++){const t=e[n];1===n&&""===t&&""===e[0]||"."!==t&&""!==t||(l=!0,e.splice(n,1),n--)}"."!==e[0]||2!==e.length||"."!==e[1]&&""!==e[1]||(l=!0,e.pop())}let u=0;for(;-1!==(u=e.indexOf("..",u+1));){const n=e[u-1];if(n&&"."!==n&&".."!==n&&"**"!==n){l=!0;const n=1===u&&"**"===e[u+1]?["."]:[];e.splice(u-1,2,...n),0===e.length&&e.push(""),u-=2}}}}while(l);return n}secondPhasePreProcess(n){for(let l=0;l<n.length-1;l++)for(let e=l+1;e<n.length;e++){const t=this.partsMatch(n[l],n[e],!this.preserveMultipleSlashes);t&&(n[l]=t,n[e]=[])}return n.filter((n=>n.length))}partsMatch(n,l,e=!1){let t=0,u=0,r=[],o="";for(;t<n.length&&u<l.length;)if(n[t]===l[u])r.push("b"===o?l[u]:n[t]),t++,u++;else if(e&&"**"===n[t]&&l[u]===n[t+1])r.push(n[t]),t++;else if(e&&"**"===l[u]&&n[t]===l[u+1])r.push(l[u]),u++;else if("*"!==n[t]||!l[u]||!this.options.dot&&l[u].startsWith(".")||"**"===l[u]){if("*"!==l[u]||!n[t]||!this.options.dot&&n[t].startsWith(".")||"**"===n[t])return!1;if("a"===o)return!1;o="b",r.push(l[u]),t++,u++}else{if("b"===o)return!1;o="a",r.push(n[t]),t++,u++}return n.length===l.length&&r}parseNegate(){if(this.nonegate)return;const n=this.pattern;let l=!1,e=0;for(let t=0;t<n.length&&"!"===n.charAt(t);t++)l=!l,e++;e&&(this.pattern=n.slice(e)),this.negate=l}matchOne(n,e,t=!1){const u=this.options;if(this.isWindows){const l="string"==typeof n[0]&&/^[a-z]:$/i.test(n[0]),t=!l&&""===n[0]&&""===n[1]&&"?"===n[2]&&/^[a-z]:$/i.test(n[3]),u="string"==typeof e[0]&&/^[a-z]:$/i.test(e[0]),r=t?3:l?0:void 0,o=!u&&""===e[0]&&""===e[1]&&"?"===e[2]&&"string"==typeof e[3]&&/^[a-z]:$/i.test(e[3])?3:u?0:void 0;if("number"==typeof r&&"number"==typeof o){const[l,t]=[n[r],e[o]];l.toLowerCase()===t.toLowerCase()&&(e[o]=l,o>r?e=e.slice(o):r>o&&(n=n.slice(r)))}}const{optimizationLevel:r=1}=this.options;r>=2&&(n=this.levelTwoFileOptimize(n)),this.debug("matchOne",this,{file:n,pattern:e}),this.debug("matchOne",n.length,e.length);for(var o=0,i=0,s=n.length,a=e.length;o<s&&i<a;o++,i++){this.debug("matchOne loop");var c=e[i],d=n[o];if(this.debug(e,c,d),!1===c)return!1;if(c===l.GLOBSTAR){this.debug("GLOBSTAR",[e,c,d]);var h=o,f=i+1;if(f===a){for(this.debug("** at the end");o<s;o++)if("."===n[o]||".."===n[o]||!u.dot&&"."===n[o].charAt(0))return!1;return!0}for(;h<s;){var p=n[h];if(this.debug("\nglobstar while",n,h,e,f,p),this.matchOne(n.slice(h),e.slice(f),t))return this.debug("globstar found match!",h,s,p),!0;if("."===p||".."===p||!u.dot&&"."===p.charAt(0)){this.debug("dot detected!",n,h,e,f);break}this.debug("globstar swallow a segment, and continue"),h++}return!(!t||(this.debug("\n>>> no match, partial?",n,h,e,f),h!==s))}let r;if("string"==typeof c?(r=d===c,this.debug("string match",c,d,r)):(r=c.test(d),this.debug("pattern match",c,d,r)),!r)return!1}if(o===s&&i===a)return!0;if(o===s)return t;if(i===a)return o===s-1&&""===n[o];throw new Error("wtf?")}braceExpand(){return(0,l.braceExpand)(this.pattern,this.options)}parse(n){(0,r.assertValidPattern)(n);const e=this.options;if("**"===n)return l.GLOBSTAR;if(""===n)return"";let t,u=null;(t=n.match(w))?u=e.dot?S:b:(t=n.match(a))?u=(e.nocase?e.dot?f:h:e.dot?d:c)(t[1]):(t=n.match(C))?u=(e.nocase?e.dot?E:D:e.dot?_:k)(t):(t=n.match(p))?u=e.dot?g:m:(t=n.match(y))&&(u=v);const i=o.AST.fromGlob(n,this.options).toMMPattern();return u?Object.assign(i,{test:u}):i}makeRe(){if(this.regexp||!1===this.regexp)return this.regexp;const n=this.set;if(!n.length)return this.regexp=!1,this.regexp;const e=this.options,t=e.noglobstar?"[^/]*?":e.dot?"(?:(?!(?:\\/|^)(?:\\.{1,2})($|\\/)).)*?":"(?:(?!(?:\\/|^)\\.).)*?",u=new Set(e.nocase?["i"]:[]);let r=n.map((n=>{const e=n.map((n=>{if(n instanceof RegExp)for(const l of n.flags.split(""))u.add(l);return"string"==typeof n?n.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&"):n===l.GLOBSTAR?l.GLOBSTAR:n._src}));return e.forEach(((n,u)=>{const r=e[u+1],o=e[u-1];n===l.GLOBSTAR&&o!==l.GLOBSTAR&&(void 0===o?void 0!==r&&r!==l.GLOBSTAR?e[u+1]="(?:\\/|"+t+"\\/)?"+r:e[u]=t:void 0===r?e[u-1]=o+"(?:\\/|"+t+")?":r!==l.GLOBSTAR&&(e[u-1]=o+"(?:\\/|\\/"+t+"\\/)"+r,e[u+1]=l.GLOBSTAR))})),e.filter((n=>n!==l.GLOBSTAR)).join("/")})).join("|");const[o,i]=n.length>1?["(?:",")"]:["",""];r="^"+o+r+i+"$",this.negate&&(r="^(?!"+r+").+$");try{this.regexp=new RegExp(r,[...u].join(""))}catch(n){this.regexp=!1}return this.regexp}slashSplit(n){return this.preserveMultipleSlashes?n.split("/"):this.isWindows&&/^\/\/[^\/]+/.test(n)?["",...n.split(/\/+/)]:n.split(/\/+/)}match(n,l=this.partial){if(this.debug("match",n,this.pattern),this.comment)return!1;if(this.empty)return""===n;if("/"===n&&l)return!0;const e=this.options;this.isWindows&&(n=n.split("\\").join("/"));const t=this.slashSplit(n);this.debug(this.pattern,"split",t);const u=this.set;this.debug(this.pattern,"set",u);let r=t[t.length-1];if(!r)for(let n=t.length-2;!r&&n>=0;n--)r=t[n];for(let n=0;n<u.length;n++){const o=u[n];let i=t;if(e.matchBase&&1===o.length&&(i=[r]),this.matchOne(i,o,l))return!!e.flipNegate||!this.negate}return!e.flipNegate&&this.negate}static defaults(n){return l.minimatch.defaults(n).Minimatch}}l.Minimatch=O;var R=e(2032);Object.defineProperty(l,"AST",{enumerable:!0,get:function(){return R.AST}});var F=e(8641);Object.defineProperty(l,"escape",{enumerable:!0,get:function(){return F.escape}});var L=e(1118);Object.defineProperty(l,"unescape",{enumerable:!0,get:function(){return L.unescape}}),l.minimatch.AST=o.AST,l.minimatch.Minimatch=O,l.minimatch.escape=i.escape,l.minimatch.unescape=s.unescape},1118:(n,l)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.unescape=void 0,l.unescape=(n,{windowsPathsNoEscape:l=!1}={})=>l?n.replace(/\[([^\/\\])\]/g,"$1"):n.replace(/((?!\\).|^)\[([^\/\\])\]/g,"$1$2").replace(/\\([^\/])/g,"$1")},5420:function(n,l,e){"use strict";var t=this&&this.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(l,"__esModule",{value:!0}),l.Minipass=l.isWritable=l.isReadable=l.isStream=void 0;const u="object"==typeof process&&process?process:{stdout:null,stderr:null},r=e(4434),o=t(e(2203)),i=e(3193);l.isStream=n=>!!n&&"object"==typeof n&&(n instanceof q||n instanceof o.default||(0,l.isReadable)(n)||(0,l.isWritable)(n)),l.isReadable=n=>!!n&&"object"==typeof n&&n instanceof r.EventEmitter&&"function"==typeof n.pipe&&n.pipe!==o.default.Writable.prototype.pipe,l.isWritable=n=>!!n&&"object"==typeof n&&n instanceof r.EventEmitter&&"function"==typeof n.write&&"function"==typeof n.end;const s=Symbol("EOF"),a=Symbol("maybeEmitEnd"),c=Symbol("emittedEnd"),d=Symbol("emittingEnd"),h=Symbol("emittedError"),f=Symbol("closed"),p=Symbol("read"),m=Symbol("flush"),g=Symbol("flushChunk"),y=Symbol("encoding"),v=Symbol("decoder"),w=Symbol("flowing"),b=Symbol("paused"),S=Symbol("resume"),C=Symbol("buffer"),D=Symbol("pipes"),E=Symbol("bufferLength"),_=Symbol("bufferPush"),k=Symbol("bufferShift"),x=Symbol("objectMode"),T=Symbol("destroyed"),P=Symbol("error"),I=Symbol("emitData"),A=Symbol("emitEnd"),O=Symbol("emitEnd2"),R=Symbol("async"),F=Symbol("abort"),L=Symbol("aborted"),$=Symbol("signal"),j=Symbol("dataListeners"),M=Symbol("discarded"),N=n=>Promise.resolve().then(n),B=n=>n();class H{src;dest;opts;ondrain;constructor(n,l,e){this.src=n,this.dest=l,this.opts=e,this.ondrain=()=>n[S](),this.dest.on("drain",this.ondrain)}unpipe(){this.dest.removeListener("drain",this.ondrain)}proxyErrors(n){}end(){this.unpipe(),this.opts.end&&this.dest.end()}}class U extends H{unpipe(){this.src.removeListener("error",this.proxyErrors),super.unpipe()}constructor(n,l,e){super(n,l,e),this.proxyErrors=n=>l.emit("error",n),n.on("error",this.proxyErrors)}}class q extends r.EventEmitter{[w]=!1;[b]=!1;[D]=[];[C]=[];[x];[y];[R];[v];[s]=!1;[c]=!1;[d]=!1;[f]=!1;[h]=null;[E]=0;[T]=!1;[$];[L]=!1;[j]=0;[M]=!1;writable=!0;readable=!0;constructor(...n){const l=n[0]||{};if(super(),l.objectMode&&"string"==typeof l.encoding)throw new TypeError("Encoding and objectMode may not be used together");var e;l.objectMode?(this[x]=!0,this[y]=null):!(e=l).objectMode&&e.encoding&&"buffer"!==e.encoding?(this[y]=l.encoding,this[x]=!1):(this[x]=!1,this[y]=null),this[R]=!!l.async,this[v]=this[y]?new i.StringDecoder(this[y]):null,l&&!0===l.debugExposeBuffer&&Object.defineProperty(this,"buffer",{get:()=>this[C]}),l&&!0===l.debugExposePipes&&Object.defineProperty(this,"pipes",{get:()=>this[D]});const{signal:t}=l;t&&(this[$]=t,t.aborted?this[F]():t.addEventListener("abort",(()=>this[F]())))}get bufferLength(){return this[E]}get encoding(){return this[y]}set encoding(n){throw new Error("Encoding must be set at instantiation time")}setEncoding(n){throw new Error("Encoding must be set at instantiation time")}get objectMode(){return this[x]}set objectMode(n){throw new Error("objectMode must be set at instantiation time")}get async(){return this[R]}set async(n){this[R]=this[R]||!!n}[F](){this[L]=!0,this.emit("abort",this[$]?.reason),this.destroy(this[$]?.reason)}get aborted(){return this[L]}set aborted(n){}write(n,l,e){if(this[L])return!1;if(this[s])throw new Error("write after end");if(this[T])return this.emit("error",Object.assign(new Error("Cannot call write after a stream was destroyed"),{code:"ERR_STREAM_DESTROYED"})),!0;"function"==typeof l&&(e=l,l="utf8"),l||(l="utf8");const t=this[R]?N:B;if(!this[x]&&!Buffer.isBuffer(n))if(u=n,!Buffer.isBuffer(u)&&ArrayBuffer.isView(u))n=Buffer.from(n.buffer,n.byteOffset,n.byteLength);else if((n=>n instanceof ArrayBuffer||!!n&&"object"==typeof n&&n.constructor&&"ArrayBuffer"===n.constructor.name&&n.byteLength>=0)(n))n=Buffer.from(n);else if("string"!=typeof n)throw new Error("Non-contiguous data written to non-objectMode stream");var u;return this[x]?(this[w]&&0!==this[E]&&this[m](!0),this[w]?this.emit("data",n):this[_](n),0!==this[E]&&this.emit("readable"),e&&t(e),this[w]):n.length?("string"!=typeof n||l===this[y]&&!this[v]?.lastNeed||(n=Buffer.from(n,l)),Buffer.isBuffer(n)&&this[y]&&(n=this[v].write(n)),this[w]&&0!==this[E]&&this[m](!0),this[w]?this.emit("data",n):this[_](n),0!==this[E]&&this.emit("readable"),e&&t(e),this[w]):(0!==this[E]&&this.emit("readable"),e&&t(e),this[w])}read(n){if(this[T])return null;if(this[M]=!1,0===this[E]||0===n||n&&n>this[E])return this[a](),null;this[x]&&(n=null),this[C].length>1&&!this[x]&&(this[C]=[this[y]?this[C].join(""):Buffer.concat(this[C],this[E])]);const l=this[p](n||null,this[C][0]);return this[a](),l}[p](n,l){if(this[x])this[k]();else{const e=l;n===e.length||null===n?this[k]():"string"==typeof e?(this[C][0]=e.slice(n),l=e.slice(0,n),this[E]-=n):(this[C][0]=e.subarray(n),l=e.subarray(0,n),this[E]-=n)}return this.emit("data",l),this[C].length||this[s]||this.emit("drain"),l}end(n,l,e){return"function"==typeof n&&(e=n,n=void 0),"function"==typeof l&&(e=l,l="utf8"),void 0!==n&&this.write(n,l),e&&this.once("end",e),this[s]=!0,this.writable=!1,!this[w]&&this[b]||this[a](),this}[S](){this[T]||(this[j]||this[D].length||(this[M]=!0),this[b]=!1,this[w]=!0,this.emit("resume"),this[C].length?this[m]():this[s]?this[a]():this.emit("drain"))}resume(){return this[S]()}pause(){this[w]=!1,this[b]=!0,this[M]=!1}get destroyed(){return this[T]}get flowing(){return this[w]}get paused(){return this[b]}[_](n){this[x]?this[E]+=1:this[E]+=n.length,this[C].push(n)}[k](){return this[x]?this[E]-=1:this[E]-=this[C][0].length,this[C].shift()}[m](n=!1){do{}while(this[g](this[k]())&&this[C].length);n||this[C].length||this[s]||this.emit("drain")}[g](n){return this.emit("data",n),this[w]}pipe(n,l){if(this[T])return n;this[M]=!1;const e=this[c];return l=l||{},n===u.stdout||n===u.stderr?l.end=!1:l.end=!1!==l.end,l.proxyErrors=!!l.proxyErrors,e?l.end&&n.end():(this[D].push(l.proxyErrors?new U(this,n,l):new H(this,n,l)),this[R]?N((()=>this[S]())):this[S]()),n}unpipe(n){const l=this[D].find((l=>l.dest===n));l&&(1===this[D].length?(this[w]&&0===this[j]&&(this[w]=!1),this[D]=[]):this[D].splice(this[D].indexOf(l),1),l.unpipe())}addListener(n,l){return this.on(n,l)}on(n,l){const e=super.on(n,l);if("data"===n)this[M]=!1,this[j]++,this[D].length||this[w]||this[S]();else if("readable"===n&&0!==this[E])super.emit("readable");else if((n=>"end"===n||"finish"===n||"prefinish"===n)(n)&&this[c])super.emit(n),this.removeAllListeners(n);else if("error"===n&&this[h]){const n=l;this[R]?N((()=>n.call(this,this[h]))):n.call(this,this[h])}return e}removeListener(n,l){return this.off(n,l)}off(n,l){const e=super.off(n,l);return"data"===n&&(this[j]=this.listeners("data").length,0!==this[j]||this[M]||this[D].length||(this[w]=!1)),e}removeAllListeners(n){const l=super.removeAllListeners(n);return"data"!==n&&void 0!==n||(this[j]=0,this[M]||this[D].length||(this[w]=!1)),l}get emittedEnd(){return this[c]}[a](){this[d]||this[c]||this[T]||0!==this[C].length||!this[s]||(this[d]=!0,this.emit("end"),this.emit("prefinish"),this.emit("finish"),this[f]&&this.emit("close"),this[d]=!1)}emit(n,...l){const e=l[0];if("error"!==n&&"close"!==n&&n!==T&&this[T])return!1;if("data"===n)return!(!this[x]&&!e)&&(this[R]?(N((()=>this[I](e))),!0):this[I](e));if("end"===n)return this[A]();if("close"===n){if(this[f]=!0,!this[c]&&!this[T])return!1;const n=super.emit("close");return this.removeAllListeners("close"),n}if("error"===n){this[h]=e,super.emit(P,e);const n=!(this[$]&&!this.listeners("error").length)&&super.emit("error",e);return this[a](),n}if("resume"===n){const n=super.emit("resume");return this[a](),n}if("finish"===n||"prefinish"===n){const l=super.emit(n);return this.removeAllListeners(n),l}const t=super.emit(n,...l);return this[a](),t}[I](n){for(const l of this[D])!1===l.dest.write(n)&&this.pause();const l=!this[M]&&super.emit("data",n);return this[a](),l}[A](){return!this[c]&&(this[c]=!0,this.readable=!1,this[R]?(N((()=>this[O]())),!0):this[O]())}[O](){if(this[v]){const n=this[v].end();if(n){for(const l of this[D])l.dest.write(n);this[M]||super.emit("data",n)}}for(const n of this[D])n.end();const n=super.emit("end");return this.removeAllListeners("end"),n}async collect(){const n=Object.assign([],{dataLength:0});this[x]||(n.dataLength=0);const l=this.promise();return this.on("data",(l=>{n.push(l),this[x]||(n.dataLength+=l.length)})),await l,n}async concat(){if(this[x])throw new Error("cannot concat in objectMode");const n=await this.collect();return this[y]?n.join(""):Buffer.concat(n,n.dataLength)}async promise(){return new Promise(((n,l)=>{this.on(T,(()=>l(new Error("stream destroyed")))),this.on("error",(n=>l(n))),this.on("end",(()=>n()))}))}[Symbol.asyncIterator](){this[M]=!1;let n=!1;const l=async()=>(this.pause(),n=!0,{value:void 0,done:!0});return{next:()=>{if(n)return l();const e=this.read();if(null!==e)return Promise.resolve({done:!1,value:e});if(this[s])return l();let t,u;const r=n=>{this.off("data",o),this.off("end",i),this.off(T,a),l(),u(n)},o=n=>{this.off("error",r),this.off("end",i),this.off(T,a),this.pause(),t({value:n,done:!!this[s]})},i=()=>{this.off("error",r),this.off("data",o),this.off(T,a),l(),t({done:!0,value:void 0})},a=()=>r(new Error("stream destroyed"));return new Promise(((n,l)=>{u=l,t=n,this.once(T,a),this.once("error",r),this.once("end",i),this.once("data",o)}))},throw:l,return:l,[Symbol.asyncIterator](){return this}}}[Symbol.iterator](){this[M]=!1;let n=!1;const l=()=>(this.pause(),this.off(P,l),this.off(T,l),this.off("end",l),n=!0,{done:!0,value:void 0});return this.once("end",l),this.once(P,l),this.once(T,l),{next:()=>{if(n)return l();const e=this.read();return null===e?l():{done:!1,value:e}},throw:l,return:l,[Symbol.iterator](){return this}}}destroy(n){return this[T]?(n?this.emit("error",n):this.emit(T),this):(this[T]=!0,this[M]=!0,this[C].length=0,this[E]=0,"function"!=typeof this.close||this[f]||this.close(),n?this.emit("error",n):this.emit(T),this)}static get isStream(){return l.isStream}}l.Minipass=q},9432:function(n,l,e){"use strict";var t=this&&this.__createBinding||(Object.create?function(n,l,e,t){void 0===t&&(t=e);var u=Object.getOwnPropertyDescriptor(l,e);u&&!("get"in u?!l.__esModule:u.writable||u.configurable)||(u={enumerable:!0,get:function(){return l[e]}}),Object.defineProperty(n,t,u)}:function(n,l,e,t){void 0===t&&(t=e),n[t]=l[e]}),u=this&&this.__setModuleDefault||(Object.create?function(n,l){Object.defineProperty(n,"default",{enumerable:!0,value:l})}:function(n,l){n.default=l}),r=this&&this.__importStar||function(n){if(n&&n.__esModule)return n;var l={};if(null!=n)for(var e in n)"default"!==e&&Object.prototype.hasOwnProperty.call(n,e)&&t(l,n,e);return u(l,n),l};Object.defineProperty(l,"__esModule",{value:!0}),l.PathScurry=l.Path=l.PathScurryDarwin=l.PathScurryPosix=l.PathScurryWin32=l.PathScurryBase=l.PathPosix=l.PathWin32=l.PathBase=l.ChildrenCache=l.ResolveCache=void 0;const o=e(9950),i=e(6928),s=e(7016),a=r(e(9896)),c=e(9896),d=c.realpathSync.native,h=e(1943),f=e(5420),p={lstatSync:c.lstatSync,readdir:c.readdir,readdirSync:c.readdirSync,readlinkSync:c.readlinkSync,realpathSync:d,promises:{lstat:h.lstat,readdir:h.readdir,readlink:h.readlink,realpath:h.realpath}},m=n=>n&&n!==p&&n!==a?{...p,...n,promises:{...p.promises,...n.promises||{}}}:p,g=/^\\\\\?\\([a-z]:)\\?$/i,y=/[\\\/]/,v=10,w=15,b=-16,S=128,C=n=>n.isFile()?8:n.isDirectory()?4:n.isSymbolicLink()?v:n.isCharacterDevice()?2:n.isBlockDevice()?6:n.isSocket()?12:n.isFIFO()?1:0,D=new Map,E=n=>{const l=D.get(n);if(l)return l;const e=n.normalize("NFKD");return D.set(n,e),e},_=new Map,k=n=>{const l=_.get(n);if(l)return l;const e=E(n.toLowerCase());return _.set(n,e),e};class x extends o.LRUCache{constructor(){super({max:256})}}l.ResolveCache=x;class T extends o.LRUCache{constructor(n=16384){super({maxSize:n,sizeCalculation:n=>n.length+1})}}l.ChildrenCache=T;const P=Symbol("PathScurry setAsCwd");class I{name;root;roots;parent;nocase;#I;#A;get dev(){return this.#A}#O;get mode(){return this.#O}#R;get nlink(){return this.#R}#F;get uid(){return this.#F}#L;get gid(){return this.#L}#$;get rdev(){return this.#$}#j;get blksize(){return this.#j}#M;get ino(){return this.#M}#N;get size(){return this.#N}#B;get blocks(){return this.#B}#H;get atimeMs(){return this.#H}#U;get mtimeMs(){return this.#U}#q;get ctimeMs(){return this.#q}#W;get birthtimeMs(){return this.#W}#z;get atime(){return this.#z}#V;get mtime(){return this.#V}#G;get ctime(){return this.#G}#K;get birthtime(){return this.#K}#X;#J;#Z;#Y;#Q;#nn;#ln;#en;#tn;#un;get path(){return(this.parent||this).fullpath()}constructor(n,l=0,e,t,u,r,o){this.name=n,this.#X=u?k(n):E(n),this.#ln=1023&l,this.nocase=u,this.roots=t,this.root=e||this,this.#en=r,this.#Z=o.fullpath,this.#Q=o.relative,this.#nn=o.relativePosix,this.parent=o.parent,this.parent?this.#I=this.parent.#I:this.#I=m(o.fs)}depth(){return void 0!==this.#J?this.#J:this.parent?this.#J=this.parent.depth()+1:this.#J=0}childrenCache(){return this.#en}resolve(n){if(!n)return this;const l=this.getRootString(n),e=n.substring(l.length).split(this.splitSep);return l?this.getRoot(l).#rn(e):this.#rn(e)}#rn(n){let l=this;for(const e of n)l=l.child(e);return l}children(){const n=this.#en.get(this);if(n)return n;const l=Object.assign([],{provisional:0});return this.#en.set(this,l),this.#ln&=-17,l}child(n,l){if(""===n||"."===n)return this;if(".."===n)return this.parent||this;const e=this.children(),t=this.nocase?k(n):E(n);for(const n of e)if(n.#X===t)return n;const u=this.parent?this.sep:"",r=this.#Z?this.#Z+u+n:void 0,o=this.newChild(n,0,{...l,parent:this,fullpath:r});return this.canReaddir()||(o.#ln|=S),e.push(o),o}relative(){if(void 0!==this.#Q)return this.#Q;const n=this.name,l=this.parent;if(!l)return this.#Q=this.name;const e=l.relative();return e+(e&&l.parent?this.sep:"")+n}relativePosix(){if("/"===this.sep)return this.relative();if(void 0!==this.#nn)return this.#nn;const n=this.name,l=this.parent;if(!l)return this.#nn=this.fullpathPosix();const e=l.relativePosix();return e+(e&&l.parent?"/":"")+n}fullpath(){if(void 0!==this.#Z)return this.#Z;const n=this.name,l=this.parent;if(!l)return this.#Z=this.name;const e=l.fullpath()+(l.parent?this.sep:"")+n;return this.#Z=e}fullpathPosix(){if(void 0!==this.#Y)return this.#Y;if("/"===this.sep)return this.#Y=this.fullpath();if(!this.parent){const n=this.fullpath().replace(/\\/g,"/");return/^[a-z]:\//i.test(n)?this.#Y=`//?/${n}`:this.#Y=n}const n=this.parent,l=n.fullpathPosix(),e=l+(l&&n.parent?"/":"")+this.name;return this.#Y=e}isUnknown(){return!(this.#ln&w)}isType(n){return this[`is${n}`]()}getType(){return this.isUnknown()?"Unknown":this.isDirectory()?"Directory":this.isFile()?"File":this.isSymbolicLink()?"SymbolicLink":this.isFIFO()?"FIFO":this.isCharacterDevice()?"CharacterDevice":this.isBlockDevice()?"BlockDevice":this.isSocket()?"Socket":"Unknown"}isFile(){return 8==(this.#ln&w)}isDirectory(){return 4==(this.#ln&w)}isCharacterDevice(){return 2==(this.#ln&w)}isBlockDevice(){return 6==(this.#ln&w)}isFIFO(){return 1==(this.#ln&w)}isSocket(){return 12==(this.#ln&w)}isSymbolicLink(){return(this.#ln&v)===v}lstatCached(){return 32&this.#ln?this:void 0}readlinkCached(){return this.#tn}realpathCached(){return this.#un}readdirCached(){const n=this.children();return n.slice(0,n.provisional)}canReadlink(){if(this.#tn)return!0;if(!this.parent)return!1;const n=this.#ln&w;return!(0!==n&&n!==v||256&this.#ln||this.#ln&S)}calledReaddir(){return!!(16&this.#ln)}isENOENT(){return!!(this.#ln&S)}isNamed(n){return this.nocase?this.#X===k(n):this.#X===E(n)}async readlink(){const n=this.#tn;if(n)return n;if(this.canReadlink()&&this.parent)try{const n=await this.#I.promises.readlink(this.fullpath()),l=this.parent.resolve(n);if(l)return this.#tn=l}catch(n){return void this.#on(n.code)}}readlinkSync(){const n=this.#tn;if(n)return n;if(this.canReadlink()&&this.parent)try{const n=this.#I.readlinkSync(this.fullpath()),l=this.parent.resolve(n);if(l)return this.#tn=l}catch(n){return void this.#on(n.code)}}#in(n){this.#ln|=16;for(let l=n.provisional;l<n.length;l++)n[l].#sn()}#sn(){this.#ln&S||(this.#ln=(this.#ln|S)&b,this.#an())}#an(){const n=this.children();n.provisional=0;for(const l of n)l.#sn()}#cn(){this.#ln|=512,this.#dn()}#dn(){if(64&this.#ln)return;let n=this.#ln;4==(n&w)&&(n&=b),this.#ln=64|n,this.#an()}#hn(n=""){"ENOTDIR"===n||"EPERM"===n?this.#dn():"ENOENT"===n?this.#sn():this.children().provisional=0}#fn(n=""){"ENOTDIR"===n?this.parent.#dn():"ENOENT"===n&&this.#sn()}#on(n=""){let l=this.#ln;l|=256,"ENOENT"===n&&(l|=S),"EINVAL"!==n&&"UNKNOWN"!==n||(l&=b),this.#ln=l,"ENOTDIR"===n&&this.parent&&this.parent.#dn()}#pn(n,l){return this.#mn(n,l)||this.#gn(n,l)}#gn(n,l){const e=C(n),t=this.newChild(n.name,e,{parent:this}),u=t.#ln&w;return 4!==u&&u!==v&&0!==u&&(t.#ln|=64),l.unshift(t),l.provisional++,t}#mn(n,l){for(let e=l.provisional;e<l.length;e++){const t=l[e];if((this.nocase?k(n.name):E(n.name))===t.#X)return this.#yn(n,t,e,l)}}#yn(n,l,e,t){const u=l.name;return l.#ln=l.#ln&b|C(n),u!==n.name&&(l.name=n.name),e!==t.provisional&&(e===t.length-1?t.pop():t.splice(e,1),t.unshift(l)),t.provisional++,l}async lstat(){if(!(this.#ln&S))try{return this.#vn(await this.#I.promises.lstat(this.fullpath())),this}catch(n){this.#fn(n.code)}}lstatSync(){if(!(this.#ln&S))try{return this.#vn(this.#I.lstatSync(this.fullpath())),this}catch(n){this.#fn(n.code)}}#vn(n){const{atime:l,atimeMs:e,birthtime:t,birthtimeMs:u,blksize:r,blocks:o,ctime:i,ctimeMs:s,dev:a,gid:c,ino:d,mode:h,mtime:f,mtimeMs:p,nlink:m,rdev:g,size:y,uid:w}=n;this.#z=l,this.#H=e,this.#K=t,this.#W=u,this.#j=r,this.#B=o,this.#G=i,this.#q=s,this.#A=a,this.#L=c,this.#M=d,this.#O=h,this.#V=f,this.#U=p,this.#R=m,this.#$=g,this.#N=y,this.#F=w;const S=C(n);this.#ln=this.#ln&b|S|32,0!==S&&4!==S&&S!==v&&(this.#ln|=64)}#wn=[];#bn=!1;#Sn(n){this.#bn=!1;const l=this.#wn.slice();this.#wn.length=0,l.forEach((l=>l(null,n)))}readdirCB(n,l=!1){if(!this.canReaddir())return void(l?n(null,[]):queueMicrotask((()=>n(null,[]))));const e=this.children();if(this.calledReaddir()){const t=e.slice(0,e.provisional);return void(l?n(null,t):queueMicrotask((()=>n(null,t))))}if(this.#wn.push(n),this.#bn)return;this.#bn=!0;const t=this.fullpath();this.#I.readdir(t,{withFileTypes:!0},((n,l)=>{if(n)this.#hn(n.code),e.provisional=0;else{for(const n of l)this.#pn(n,e);this.#in(e)}this.#Sn(e.slice(0,e.provisional))}))}#Cn;async readdir(){if(!this.canReaddir())return[];const n=this.children();if(this.calledReaddir())return n.slice(0,n.provisional);const l=this.fullpath();if(this.#Cn)await this.#Cn;else{let e=()=>{};this.#Cn=new Promise((n=>e=n));try{for(const e of await this.#I.promises.readdir(l,{withFileTypes:!0}))this.#pn(e,n);this.#in(n)}catch(l){this.#hn(l.code),n.provisional=0}this.#Cn=void 0,e()}return n.slice(0,n.provisional)}readdirSync(){if(!this.canReaddir())return[];const n=this.children();if(this.calledReaddir())return n.slice(0,n.provisional);const l=this.fullpath();try{for(const e of this.#I.readdirSync(l,{withFileTypes:!0}))this.#pn(e,n);this.#in(n)}catch(l){this.#hn(l.code),n.provisional=0}return n.slice(0,n.provisional)}canReaddir(){if(704&this.#ln)return!1;const n=w&this.#ln;return 0===n||4===n||n===v}shouldWalk(n,l){return!(4&~this.#ln)&&!(704&this.#ln)&&!n.has(this)&&(!l||l(this))}async realpath(){if(this.#un)return this.#un;if(!(896&this.#ln))try{const n=await this.#I.promises.realpath(this.fullpath());return this.#un=this.resolve(n)}catch(n){this.#cn()}}realpathSync(){if(this.#un)return this.#un;if(!(896&this.#ln))try{const n=this.#I.realpathSync(this.fullpath());return this.#un=this.resolve(n)}catch(n){this.#cn()}}[P](n){if(n===this)return;const l=new Set([]);let e=[],t=this;for(;t&&t.parent;)l.add(t),t.#Q=e.join(this.sep),t.#nn=e.join("/"),t=t.parent,e.push("..");for(t=n;t&&t.parent&&!l.has(t);)t.#Q=void 0,t.#nn=void 0,t=t.parent}}l.PathBase=I;class A extends I{sep="\\";splitSep=y;constructor(n,l=0,e,t,u,r,o){super(n,l,e,t,u,r,o)}newChild(n,l=0,e={}){return new A(n,l,this.root,this.roots,this.nocase,this.childrenCache(),e)}getRootString(n){return i.win32.parse(n).root}getRoot(n){if((n=(n=>n.replace(/\//g,"\\").replace(g,"$1\\"))(n.toUpperCase()))===this.root.name)return this.root;for(const[l,e]of Object.entries(this.roots))if(this.sameRoot(n,l))return this.roots[n]=e;return this.roots[n]=new F(n,this).root}sameRoot(n,l=this.root.name){return(n=n.toUpperCase().replace(/\//g,"\\").replace(g,"$1\\"))===l}}l.PathWin32=A;class O extends I{splitSep="/";sep="/";constructor(n,l=0,e,t,u,r,o){super(n,l,e,t,u,r,o)}getRootString(n){return n.startsWith("/")?"/":""}getRoot(n){return this.root}newChild(n,l=0,e={}){return new O(n,l,this.root,this.roots,this.nocase,this.childrenCache(),e)}}l.PathPosix=O;class R{root;rootPath;roots;cwd;#Dn;#En;#en;nocase;#I;constructor(n=process.cwd(),l,e,{nocase:t,childrenCacheSize:u=16384,fs:r=p}={}){this.#I=m(r),(n instanceof URL||n.startsWith("file://"))&&(n=(0,s.fileURLToPath)(n));const o=l.resolve(n);this.roots=Object.create(null),this.rootPath=this.parseRootPath(o),this.#Dn=new x,this.#En=new x,this.#en=new T(u);const i=o.substring(this.rootPath.length).split(e);if(1!==i.length||i[0]||i.pop(),void 0===t)throw new TypeError("must provide nocase setting to PathScurryBase ctor");this.nocase=t,this.root=this.newRoot(this.#I),this.roots[this.rootPath]=this.root;let a=this.root,c=i.length-1;const d=l.sep;let h=this.rootPath,f=!1;for(const n of i){const l=c--;a=a.child(n,{relative:new Array(l).fill("..").join(d),relativePosix:new Array(l).fill("..").join("/"),fullpath:h+=(f?"":d)+n}),f=!0}this.cwd=a}depth(n=this.cwd){return"string"==typeof n&&(n=this.cwd.resolve(n)),n.depth()}childrenCache(){return this.#en}resolve(...n){let l="";for(let e=n.length-1;e>=0;e--){const t=n[e];if(t&&"."!==t&&(l=l?`${t}/${l}`:t,this.isAbsolute(t)))break}const e=this.#Dn.get(l);if(void 0!==e)return e;const t=this.cwd.resolve(l).fullpath();return this.#Dn.set(l,t),t}resolvePosix(...n){let l="";for(let e=n.length-1;e>=0;e--){const t=n[e];if(t&&"."!==t&&(l=l?`${t}/${l}`:t,this.isAbsolute(t)))break}const e=this.#En.get(l);if(void 0!==e)return e;const t=this.cwd.resolve(l).fullpathPosix();return this.#En.set(l,t),t}relative(n=this.cwd){return"string"==typeof n&&(n=this.cwd.resolve(n)),n.relative()}relativePosix(n=this.cwd){return"string"==typeof n&&(n=this.cwd.resolve(n)),n.relativePosix()}basename(n=this.cwd){return"string"==typeof n&&(n=this.cwd.resolve(n)),n.name}dirname(n=this.cwd){return"string"==typeof n&&(n=this.cwd.resolve(n)),(n.parent||n).fullpath()}async readdir(n=this.cwd,l={withFileTypes:!0}){"string"==typeof n?n=this.cwd.resolve(n):n instanceof I||(l=n,n=this.cwd);const{withFileTypes:e}=l;if(n.canReaddir()){const l=await n.readdir();return e?l:l.map((n=>n.name))}return[]}readdirSync(n=this.cwd,l={withFileTypes:!0}){"string"==typeof n?n=this.cwd.resolve(n):n instanceof I||(l=n,n=this.cwd);const{withFileTypes:e=!0}=l;return n.canReaddir()?e?n.readdirSync():n.readdirSync().map((n=>n.name)):[]}async lstat(n=this.cwd){return"string"==typeof n&&(n=this.cwd.resolve(n)),n.lstat()}lstatSync(n=this.cwd){return"string"==typeof n&&(n=this.cwd.resolve(n)),n.lstatSync()}async readlink(n=this.cwd,{withFileTypes:l}={withFileTypes:!1}){"string"==typeof n?n=this.cwd.resolve(n):n instanceof I||(l=n.withFileTypes,n=this.cwd);const e=await n.readlink();return l?e:e?.fullpath()}readlinkSync(n=this.cwd,{withFileTypes:l}={withFileTypes:!1}){"string"==typeof n?n=this.cwd.resolve(n):n instanceof I||(l=n.withFileTypes,n=this.cwd);const e=n.readlinkSync();return l?e:e?.fullpath()}async realpath(n=this.cwd,{withFileTypes:l}={withFileTypes:!1}){"string"==typeof n?n=this.cwd.resolve(n):n instanceof I||(l=n.withFileTypes,n=this.cwd);const e=await n.realpath();return l?e:e?.fullpath()}realpathSync(n=this.cwd,{withFileTypes:l}={withFileTypes:!1}){"string"==typeof n?n=this.cwd.resolve(n):n instanceof I||(l=n.withFileTypes,n=this.cwd);const e=n.realpathSync();return l?e:e?.fullpath()}async walk(n=this.cwd,l={}){"string"==typeof n?n=this.cwd.resolve(n):n instanceof I||(l=n,n=this.cwd);const{withFileTypes:e=!0,follow:t=!1,filter:u,walkFilter:r}=l,o=[];u&&!u(n)||o.push(e?n:n.fullpath());const i=new Set,s=(n,l)=>{i.add(n),n.readdirCB(((n,a)=>{if(n)return l(n);let c=a.length;if(!c)return l();const d=()=>{0==--c&&l()};for(const n of a)u&&!u(n)||o.push(e?n:n.fullpath()),t&&n.isSymbolicLink()?n.realpath().then((n=>n?.isUnknown()?n.lstat():n)).then((n=>n?.shouldWalk(i,r)?s(n,d):d())):n.shouldWalk(i,r)?s(n,d):d()}),!0)},a=n;return new Promise(((n,l)=>{s(a,(e=>{if(e)return l(e);n(o)}))}))}walkSync(n=this.cwd,l={}){"string"==typeof n?n=this.cwd.resolve(n):n instanceof I||(l=n,n=this.cwd);const{withFileTypes:e=!0,follow:t=!1,filter:u,walkFilter:r}=l,o=[];u&&!u(n)||o.push(e?n:n.fullpath());const i=new Set([n]);for(const n of i){const l=n.readdirSync();for(const n of l){u&&!u(n)||o.push(e?n:n.fullpath());let l=n;if(n.isSymbolicLink()){if(!t||!(l=n.realpathSync()))continue;l.isUnknown()&&l.lstatSync()}l.shouldWalk(i,r)&&i.add(l)}}return o}[Symbol.asyncIterator](){return this.iterate()}iterate(n=this.cwd,l={}){return"string"==typeof n?n=this.cwd.resolve(n):n instanceof I||(l=n,n=this.cwd),this.stream(n,l)[Symbol.asyncIterator]()}[Symbol.iterator](){return this.iterateSync()}*iterateSync(n=this.cwd,l={}){"string"==typeof n?n=this.cwd.resolve(n):n instanceof I||(l=n,n=this.cwd);const{withFileTypes:e=!0,follow:t=!1,filter:u,walkFilter:r}=l;u&&!u(n)||(yield e?n:n.fullpath());const o=new Set([n]);for(const n of o){const l=n.readdirSync();for(const n of l){u&&!u(n)||(yield e?n:n.fullpath());let l=n;if(n.isSymbolicLink()){if(!t||!(l=n.realpathSync()))continue;l.isUnknown()&&l.lstatSync()}l.shouldWalk(o,r)&&o.add(l)}}}stream(n=this.cwd,l={}){"string"==typeof n?n=this.cwd.resolve(n):n instanceof I||(l=n,n=this.cwd);const{withFileTypes:e=!0,follow:t=!1,filter:u,walkFilter:r}=l,o=new f.Minipass({objectMode:!0});u&&!u(n)||o.write(e?n:n.fullpath());const i=new Set,s=[n];let a=0;const c=()=>{let n=!1;for(;!n;){const l=s.shift();if(!l)return void(0===a&&o.end());a++,i.add(l);const d=(l,f,p=!1)=>{if(l)return o.emit("error",l);if(t&&!p){const n=[];for(const l of f)l.isSymbolicLink()&&n.push(l.realpath().then((n=>n?.isUnknown()?n.lstat():n)));if(n.length)return void Promise.all(n).then((()=>d(null,f,!0)))}for(const l of f)!l||u&&!u(l)||o.write(e?l:l.fullpath())||(n=!0);a--;for(const n of f){const l=n.realpathCached()||n;l.shouldWalk(i,r)&&s.push(l)}n&&!o.flowing?o.once("drain",c):h||c()};let h=!0;l.readdirCB(d,!0),h=!1}};return c(),o}streamSync(n=this.cwd,l={}){"string"==typeof n?n=this.cwd.resolve(n):n instanceof I||(l=n,n=this.cwd);const{withFileTypes:e=!0,follow:t=!1,filter:u,walkFilter:r}=l,o=new f.Minipass({objectMode:!0}),i=new Set;u&&!u(n)||o.write(e?n:n.fullpath());const s=[n];let a=0;const c=()=>{let n=!1;for(;!n;){const l=s.shift();if(!l)return void(0===a&&o.end());a++,i.add(l);const c=l.readdirSync();for(const l of c)u&&!u(l)||o.write(e?l:l.fullpath())||(n=!0);a--;for(const n of c){let l=n;if(n.isSymbolicLink()){if(!t||!(l=n.realpathSync()))continue;l.isUnknown()&&l.lstatSync()}l.shouldWalk(i,r)&&s.push(l)}}n&&!o.flowing&&o.once("drain",c)};return c(),o}chdir(n=this.cwd){const l=this.cwd;this.cwd="string"==typeof n?this.cwd.resolve(n):n,this.cwd[P](l)}}l.PathScurryBase=R;class F extends R{sep="\\";constructor(n=process.cwd(),l={}){const{nocase:e=!0}=l;super(n,i.win32,"\\",{...l,nocase:e}),this.nocase=e;for(let n=this.cwd;n;n=n.parent)n.nocase=this.nocase}parseRootPath(n){return i.win32.parse(n).root.toUpperCase()}newRoot(n){return new A(this.rootPath,4,void 0,this.roots,this.nocase,this.childrenCache(),{fs:n})}isAbsolute(n){return n.startsWith("/")||n.startsWith("\\")||/^[a-z]:(\/|\\)/i.test(n)}}l.PathScurryWin32=F;class L extends R{sep="/";constructor(n=process.cwd(),l={}){const{nocase:e=!1}=l;super(n,i.posix,"/",{...l,nocase:e}),this.nocase=e}parseRootPath(n){return"/"}newRoot(n){return new O(this.rootPath,4,void 0,this.roots,this.nocase,this.childrenCache(),{fs:n})}isAbsolute(n){return n.startsWith("/")}}l.PathScurryPosix=L;class $ extends L{constructor(n=process.cwd(),l={}){const{nocase:e=!0}=l;super(n,{...l,nocase:e})}}l.PathScurryDarwin=$,l.Path="win32"===process.platform?A:O,l.PathScurry="win32"===process.platform?F:"darwin"===process.platform?$:L},9950:(n,l)=>{"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.LRUCache=void 0;const e="object"==typeof performance&&performance&&"function"==typeof performance.now?performance:Date,t=new Set,u="object"==typeof process&&process?process:{},r=(n,l,e,t)=>{"function"==typeof u.emitWarning?u.emitWarning(n,l,e,t):console.error(`[${e}] ${l}: ${n}`)};let o=globalThis.AbortController,i=globalThis.AbortSignal;if(void 0===o){i=class{onabort;_onabort=[];reason;aborted=!1;addEventListener(n,l){this._onabort.push(l)}},o=class{constructor(){l()}signal=new i;abort(n){if(!this.signal.aborted){this.signal.reason=n,this.signal.aborted=!0;for(const l of this.signal._onabort)l(n);this.signal.onabort?.(n)}}};let n="1"!==u.env?.LRU_CACHE_IGNORE_AC_WARNING;const l=()=>{n&&(n=!1,r("AbortController is not defined. If using lru-cache in node 14, load an AbortController polyfill from the `node-abort-controller` package. A minimal polyfill is provided for use by LRUCache.fetch(), but it should not be relied upon in other contexts (eg, passing it to other APIs that use AbortController/AbortSignal might have undesirable effects). You may disable this with LRU_CACHE_IGNORE_AC_WARNING=1 in the env.","NO_ABORT_CONTROLLER","ENOTSUP",l))}}Symbol("type");const s=n=>n&&n===Math.floor(n)&&n>0&&isFinite(n),a=n=>s(n)?n<=Math.pow(2,8)?Uint8Array:n<=Math.pow(2,16)?Uint16Array:n<=Math.pow(2,32)?Uint32Array:n<=Number.MAX_SAFE_INTEGER?c:null:null;class c extends Array{constructor(n){super(n),this.fill(0)}}class d{heap;length;static#_n=!1;static create(n){const l=a(n);if(!l)return[];d.#_n=!0;const e=new d(n,l);return d.#_n=!1,e}constructor(n,l){if(!d.#_n)throw new TypeError("instantiate Stack using Stack.create(n)");this.heap=new l(n),this.length=0}push(n){this.heap[this.length++]=n}pop(){return this.heap[--this.length]}}class h{#kn;#xn;#Tn;#Pn;#In;ttl;ttlResolution;ttlAutopurge;updateAgeOnGet;updateAgeOnHas;allowStale;noDisposeOnSet;noUpdateTTL;maxEntrySize;sizeCalculation;noDeleteOnFetchRejection;noDeleteOnStaleGet;allowStaleOnFetchAbort;allowStaleOnFetchRejection;ignoreFetchAbort;#N;#An;#On;#Rn;#Fn;#Ln;#$n;#jn;#Mn;#Nn;#Bn;#Hn;#Un;#qn;#Wn;#zn;#Vn;static unsafeExposeInternals(n){return{starts:n.#Un,ttls:n.#qn,sizes:n.#Hn,keyMap:n.#On,keyList:n.#Rn,valList:n.#Fn,next:n.#Ln,prev:n.#$n,get head(){return n.#jn},get tail(){return n.#Mn},free:n.#Nn,isBackgroundFetch:l=>n.#Gn(l),backgroundFetch:(l,e,t,u)=>n.#Kn(l,e,t,u),moveToTail:l=>n.#Xn(l),indexes:l=>n.#Jn(l),rindexes:l=>n.#Zn(l),isStale:l=>n.#Yn(l)}}get max(){return this.#kn}get maxSize(){return this.#xn}get calculatedSize(){return this.#An}get size(){return this.#N}get fetchMethod(){return this.#In}get dispose(){return this.#Tn}get disposeAfter(){return this.#Pn}constructor(n){const{max:l=0,ttl:e,ttlResolution:u=1,ttlAutopurge:o,updateAgeOnGet:i,updateAgeOnHas:c,allowStale:f,dispose:p,disposeAfter:m,noDisposeOnSet:g,noUpdateTTL:y,maxSize:v=0,maxEntrySize:w=0,sizeCalculation:b,fetchMethod:S,noDeleteOnFetchRejection:C,noDeleteOnStaleGet:D,allowStaleOnFetchRejection:E,allowStaleOnFetchAbort:_,ignoreFetchAbort:k}=n;if(0!==l&&!s(l))throw new TypeError("max option must be a nonnegative integer");const x=l?a(l):Array;if(!x)throw new Error("invalid max value: "+l);if(this.#kn=l,this.#xn=v,this.maxEntrySize=w||this.#xn,this.sizeCalculation=b,this.sizeCalculation){if(!this.#xn&&!this.maxEntrySize)throw new TypeError("cannot set sizeCalculation without setting maxSize or maxEntrySize");if("function"!=typeof this.sizeCalculation)throw new TypeError("sizeCalculation set to non-function")}if(void 0!==S&&"function"!=typeof S)throw new TypeError("fetchMethod must be a function if specified");if(this.#In=S,this.#zn=!!S,this.#On=new Map,this.#Rn=new Array(l).fill(void 0),this.#Fn=new Array(l).fill(void 0),this.#Ln=new x(l),this.#$n=new x(l),this.#jn=0,this.#Mn=0,this.#Nn=d.create(l),this.#N=0,this.#An=0,"function"==typeof p&&(this.#Tn=p),"function"==typeof m?(this.#Pn=m,this.#Bn=[]):(this.#Pn=void 0,this.#Bn=void 0),this.#Wn=!!this.#Tn,this.#Vn=!!this.#Pn,this.noDisposeOnSet=!!g,this.noUpdateTTL=!!y,this.noDeleteOnFetchRejection=!!C,this.allowStaleOnFetchRejection=!!E,this.allowStaleOnFetchAbort=!!_,this.ignoreFetchAbort=!!k,0!==this.maxEntrySize){if(0!==this.#xn&&!s(this.#xn))throw new TypeError("maxSize must be a positive integer if specified");if(!s(this.maxEntrySize))throw new TypeError("maxEntrySize must be a positive integer if specified");this.#Qn()}if(this.allowStale=!!f,this.noDeleteOnStaleGet=!!D,this.updateAgeOnGet=!!i,this.updateAgeOnHas=!!c,this.ttlResolution=s(u)||0===u?u:1,this.ttlAutopurge=!!o,this.ttl=e||0,this.ttl){if(!s(this.ttl))throw new TypeError("ttl must be a positive integer if specified");this.#nl()}if(0===this.#kn&&0===this.ttl&&0===this.#xn)throw new TypeError("At least one of max, maxSize, or ttl is required");if(!this.ttlAutopurge&&!this.#kn&&!this.#xn){const n="LRU_CACHE_UNBOUNDED";(n=>!t.has(n))(n)&&(t.add(n),r("TTL caching without ttlAutopurge, max, or maxSize can result in unbounded memory consumption.","UnboundedCacheWarning",n,h))}}getRemainingTTL(n){return this.#On.has(n)?1/0:0}#nl(){const n=new c(this.#kn),l=new c(this.#kn);this.#qn=n,this.#Un=l,this.#ll=(t,u,r=e.now())=>{if(l[t]=0!==u?r:0,n[t]=u,0!==u&&this.ttlAutopurge){const n=setTimeout((()=>{this.#Yn(t)&&this.delete(this.#Rn[t])}),u+1);n.unref&&n.unref()}},this.#el=t=>{l[t]=0!==n[t]?e.now():0},this.#tl=(e,r)=>{if(n[r]){const o=n[r],i=l[r];if(!o||!i)return;e.ttl=o,e.start=i,e.now=t||u();const s=e.now-i;e.remainingTTL=o-s}};let t=0;const u=()=>{const n=e.now();if(this.ttlResolution>0){t=n;const l=setTimeout((()=>t=0),this.ttlResolution);l.unref&&l.unref()}return n};this.getRemainingTTL=e=>{const r=this.#On.get(e);if(void 0===r)return 0;const o=n[r],i=l[r];return o&&i?o-((t||u())-i):1/0},this.#Yn=e=>{const r=l[e],o=n[e];return!!o&&!!r&&(t||u())-r>o}}#el=()=>{};#tl=()=>{};#ll=()=>{};#Yn=()=>!1;#Qn(){const n=new c(this.#kn);this.#An=0,this.#Hn=n,this.#ul=l=>{this.#An-=n[l],n[l]=0},this.#rl=(n,l,e,t)=>{if(this.#Gn(l))return 0;if(!s(e)){if(!t)throw new TypeError("invalid size value (must be positive integer). When maxSize or maxEntrySize is used, sizeCalculation or size must be set.");if("function"!=typeof t)throw new TypeError("sizeCalculation must be a function");if(e=t(l,n),!s(e))throw new TypeError("sizeCalculation return invalid (expect positive integer)")}return e},this.#ol=(l,e,t)=>{if(n[l]=e,this.#xn){const e=this.#xn-n[l];for(;this.#An>e;)this.#il(!0)}this.#An+=n[l],t&&(t.entrySize=e,t.totalCalculatedSize=this.#An)}}#ul=n=>{};#ol=(n,l,e)=>{};#rl=(n,l,e,t)=>{if(e||t)throw new TypeError("cannot set size without setting maxSize or maxEntrySize on cache");return 0};*#Jn({allowStale:n=this.allowStale}={}){if(this.#N)for(let l=this.#Mn;this.#sl(l)&&(!n&&this.#Yn(l)||(yield l),l!==this.#jn);)l=this.#$n[l]}*#Zn({allowStale:n=this.allowStale}={}){if(this.#N)for(let l=this.#jn;this.#sl(l)&&(!n&&this.#Yn(l)||(yield l),l!==this.#Mn);)l=this.#Ln[l]}#sl(n){return void 0!==n&&this.#On.get(this.#Rn[n])===n}*entries(){for(const n of this.#Jn())void 0===this.#Fn[n]||void 0===this.#Rn[n]||this.#Gn(this.#Fn[n])||(yield[this.#Rn[n],this.#Fn[n]])}*rentries(){for(const n of this.#Zn())void 0===this.#Fn[n]||void 0===this.#Rn[n]||this.#Gn(this.#Fn[n])||(yield[this.#Rn[n],this.#Fn[n]])}*keys(){for(const n of this.#Jn()){const l=this.#Rn[n];void 0===l||this.#Gn(this.#Fn[n])||(yield l)}}*rkeys(){for(const n of this.#Zn()){const l=this.#Rn[n];void 0===l||this.#Gn(this.#Fn[n])||(yield l)}}*values(){for(const n of this.#Jn())void 0===this.#Fn[n]||this.#Gn(this.#Fn[n])||(yield this.#Fn[n])}*rvalues(){for(const n of this.#Zn())void 0===this.#Fn[n]||this.#Gn(this.#Fn[n])||(yield this.#Fn[n])}[Symbol.iterator](){return this.entries()}find(n,l={}){for(const e of this.#Jn()){const t=this.#Fn[e],u=this.#Gn(t)?t.__staleWhileFetching:t;if(void 0!==u&&n(u,this.#Rn[e],this))return this.get(this.#Rn[e],l)}}forEach(n,l=this){for(const e of this.#Jn()){const t=this.#Fn[e],u=this.#Gn(t)?t.__staleWhileFetching:t;void 0!==u&&n.call(l,u,this.#Rn[e],this)}}rforEach(n,l=this){for(const e of this.#Zn()){const t=this.#Fn[e],u=this.#Gn(t)?t.__staleWhileFetching:t;void 0!==u&&n.call(l,u,this.#Rn[e],this)}}purgeStale(){let n=!1;for(const l of this.#Zn({allowStale:!0}))this.#Yn(l)&&(this.delete(this.#Rn[l]),n=!0);return n}info(n){const l=this.#On.get(n);if(void 0===l)return;const t=this.#Fn[l],u=this.#Gn(t)?t.__staleWhileFetching:t;if(void 0===u)return;const r={value:u};if(this.#qn&&this.#Un){const n=this.#qn[l],t=this.#Un[l];if(n&&t){const l=n-(e.now()-t);r.ttl=l,r.start=Date.now()}}return this.#Hn&&(r.size=this.#Hn[l]),r}dump(){const n=[];for(const l of this.#Jn({allowStale:!0})){const t=this.#Rn[l],u=this.#Fn[l],r=this.#Gn(u)?u.__staleWhileFetching:u;if(void 0===r||void 0===t)continue;const o={value:r};if(this.#qn&&this.#Un){o.ttl=this.#qn[l];const n=e.now()-this.#Un[l];o.start=Math.floor(Date.now()-n)}this.#Hn&&(o.size=this.#Hn[l]),n.unshift([t,o])}return n}load(n){this.clear();for(const[l,t]of n){if(t.start){const n=Date.now()-t.start;t.start=e.now()-n}this.set(l,t.value,t)}}set(n,l,e={}){if(void 0===l)return this.delete(n),this;const{ttl:t=this.ttl,start:u,noDisposeOnSet:r=this.noDisposeOnSet,sizeCalculation:o=this.sizeCalculation,status:i}=e;let{noUpdateTTL:s=this.noUpdateTTL}=e;const a=this.#rl(n,l,e.size||0,o);if(this.maxEntrySize&&a>this.maxEntrySize)return i&&(i.set="miss",i.maxEntrySizeExceeded=!0),this.delete(n),this;let c=0===this.#N?void 0:this.#On.get(n);if(void 0===c)c=0===this.#N?this.#Mn:0!==this.#Nn.length?this.#Nn.pop():this.#N===this.#kn?this.#il(!1):this.#N,this.#Rn[c]=n,this.#Fn[c]=l,this.#On.set(n,c),this.#Ln[this.#Mn]=c,this.#$n[c]=this.#Mn,this.#Mn=c,this.#N++,this.#ol(c,a,i),i&&(i.set="add"),s=!1;else{this.#Xn(c);const e=this.#Fn[c];if(l!==e){if(this.#zn&&this.#Gn(e)){e.__abortController.abort(new Error("replaced"));const{__staleWhileFetching:l}=e;void 0===l||r||(this.#Wn&&this.#Tn?.(l,n,"set"),this.#Vn&&this.#Bn?.push([l,n,"set"]))}else r||(this.#Wn&&this.#Tn?.(e,n,"set"),this.#Vn&&this.#Bn?.push([e,n,"set"]));if(this.#ul(c),this.#ol(c,a,i),this.#Fn[c]=l,i){i.set="replace";const n=e&&this.#Gn(e)?e.__staleWhileFetching:e;void 0!==n&&(i.oldValue=n)}}else i&&(i.set="update")}if(0===t||this.#qn||this.#nl(),this.#qn&&(s||this.#ll(c,t,u),i&&this.#tl(i,c)),!r&&this.#Vn&&this.#Bn){const n=this.#Bn;let l;for(;l=n?.shift();)this.#Pn?.(...l)}return this}pop(){try{for(;this.#N;){const n=this.#Fn[this.#jn];if(this.#il(!0),this.#Gn(n)){if(n.__staleWhileFetching)return n.__staleWhileFetching}else if(void 0!==n)return n}}finally{if(this.#Vn&&this.#Bn){const n=this.#Bn;let l;for(;l=n?.shift();)this.#Pn?.(...l)}}}#il(n){const l=this.#jn,e=this.#Rn[l],t=this.#Fn[l];return this.#zn&&this.#Gn(t)?t.__abortController.abort(new Error("evicted")):(this.#Wn||this.#Vn)&&(this.#Wn&&this.#Tn?.(t,e,"evict"),this.#Vn&&this.#Bn?.push([t,e,"evict"])),this.#ul(l),n&&(this.#Rn[l]=void 0,this.#Fn[l]=void 0,this.#Nn.push(l)),1===this.#N?(this.#jn=this.#Mn=0,this.#Nn.length=0):this.#jn=this.#Ln[l],this.#On.delete(e),this.#N--,l}has(n,l={}){const{updateAgeOnHas:e=this.updateAgeOnHas,status:t}=l,u=this.#On.get(n);if(void 0!==u){const n=this.#Fn[u];if(this.#Gn(n)&&void 0===n.__staleWhileFetching)return!1;if(!this.#Yn(u))return e&&this.#el(u),t&&(t.has="hit",this.#tl(t,u)),!0;t&&(t.has="stale",this.#tl(t,u))}else t&&(t.has="miss");return!1}peek(n,l={}){const{allowStale:e=this.allowStale}=l,t=this.#On.get(n);if(void 0===t||!e&&this.#Yn(t))return;const u=this.#Fn[t];return this.#Gn(u)?u.__staleWhileFetching:u}#Kn(n,l,e,t){const u=void 0===l?void 0:this.#Fn[l];if(this.#Gn(u))return u;const r=new o,{signal:i}=e;i?.addEventListener("abort",(()=>r.abort(i.reason)),{signal:r.signal});const s={signal:r.signal,options:e,context:t},a=(t,u=!1)=>{const{aborted:o}=r.signal,i=e.ignoreFetchAbort&&void 0!==t;if(e.status&&(o&&!u?(e.status.fetchAborted=!0,e.status.fetchError=r.signal.reason,i&&(e.status.fetchAbortIgnored=!0)):e.status.fetchResolved=!0),o&&!i&&!u)return c(r.signal.reason);const a=d;return this.#Fn[l]===d&&(void 0===t?a.__staleWhileFetching?this.#Fn[l]=a.__staleWhileFetching:this.delete(n):(e.status&&(e.status.fetchUpdated=!0),this.set(n,t,s.options))),t},c=t=>{const{aborted:u}=r.signal,o=u&&e.allowStaleOnFetchAbort,i=o||e.allowStaleOnFetchRejection,s=i||e.noDeleteOnFetchRejection,a=d;if(this.#Fn[l]===d&&(s&&void 0!==a.__staleWhileFetching?o||(this.#Fn[l]=a.__staleWhileFetching):this.delete(n)),i)return e.status&&void 0!==a.__staleWhileFetching&&(e.status.returnedStale=!0),a.__staleWhileFetching;if(a.__returned===a)throw t};e.status&&(e.status.fetchDispatched=!0);const d=new Promise(((l,t)=>{const o=this.#In?.(n,u,s);o&&o instanceof Promise&&o.then((n=>l(void 0===n?void 0:n)),t),r.signal.addEventListener("abort",(()=>{e.ignoreFetchAbort&&!e.allowStaleOnFetchAbort||(l(void 0),e.allowStaleOnFetchAbort&&(l=n=>a(n,!0)))}))})).then(a,(n=>(e.status&&(e.status.fetchRejected=!0,e.status.fetchError=n),c(n)))),h=Object.assign(d,{__abortController:r,__staleWhileFetching:u,__returned:void 0});return void 0===l?(this.set(n,h,{...s.options,status:void 0}),l=this.#On.get(n)):this.#Fn[l]=h,h}#Gn(n){if(!this.#zn)return!1;const l=n;return!!l&&l instanceof Promise&&l.hasOwnProperty("__staleWhileFetching")&&l.__abortController instanceof o}async fetch(n,l={}){const{allowStale:e=this.allowStale,updateAgeOnGet:t=this.updateAgeOnGet,noDeleteOnStaleGet:u=this.noDeleteOnStaleGet,ttl:r=this.ttl,noDisposeOnSet:o=this.noDisposeOnSet,size:i=0,sizeCalculation:s=this.sizeCalculation,noUpdateTTL:a=this.noUpdateTTL,noDeleteOnFetchRejection:c=this.noDeleteOnFetchRejection,allowStaleOnFetchRejection:d=this.allowStaleOnFetchRejection,ignoreFetchAbort:h=this.ignoreFetchAbort,allowStaleOnFetchAbort:f=this.allowStaleOnFetchAbort,context:p,forceRefresh:m=!1,status:g,signal:y}=l;if(!this.#zn)return g&&(g.fetch="get"),this.get(n,{allowStale:e,updateAgeOnGet:t,noDeleteOnStaleGet:u,status:g});const v={allowStale:e,updateAgeOnGet:t,noDeleteOnStaleGet:u,ttl:r,noDisposeOnSet:o,size:i,sizeCalculation:s,noUpdateTTL:a,noDeleteOnFetchRejection:c,allowStaleOnFetchRejection:d,allowStaleOnFetchAbort:f,ignoreFetchAbort:h,status:g,signal:y};let w=this.#On.get(n);if(void 0===w){g&&(g.fetch="miss");const l=this.#Kn(n,w,v,p);return l.__returned=l}{const l=this.#Fn[w];if(this.#Gn(l)){const n=e&&void 0!==l.__staleWhileFetching;return g&&(g.fetch="inflight",n&&(g.returnedStale=!0)),n?l.__staleWhileFetching:l.__returned=l}const u=this.#Yn(w);if(!m&&!u)return g&&(g.fetch="hit"),this.#Xn(w),t&&this.#el(w),g&&this.#tl(g,w),l;const r=this.#Kn(n,w,v,p),o=void 0!==r.__staleWhileFetching&&e;return g&&(g.fetch=u?"stale":"refresh",o&&u&&(g.returnedStale=!0)),o?r.__staleWhileFetching:r.__returned=r}}get(n,l={}){const{allowStale:e=this.allowStale,updateAgeOnGet:t=this.updateAgeOnGet,noDeleteOnStaleGet:u=this.noDeleteOnStaleGet,status:r}=l,o=this.#On.get(n);if(void 0!==o){const l=this.#Fn[o],i=this.#Gn(l);return r&&this.#tl(r,o),this.#Yn(o)?(r&&(r.get="stale"),i?(r&&e&&void 0!==l.__staleWhileFetching&&(r.returnedStale=!0),e?l.__staleWhileFetching:void 0):(u||this.delete(n),r&&e&&(r.returnedStale=!0),e?l:void 0)):(r&&(r.get="hit"),i?l.__staleWhileFetching:(this.#Xn(o),t&&this.#el(o),l))}r&&(r.get="miss")}#al(n,l){this.#$n[l]=n,this.#Ln[n]=l}#Xn(n){n!==this.#Mn&&(n===this.#jn?this.#jn=this.#Ln[n]:this.#al(this.#$n[n],this.#Ln[n]),this.#al(this.#Mn,n),this.#Mn=n)}delete(n){let l=!1;if(0!==this.#N){const e=this.#On.get(n);if(void 0!==e)if(l=!0,1===this.#N)this.clear();else{this.#ul(e);const l=this.#Fn[e];if(this.#Gn(l)?l.__abortController.abort(new Error("deleted")):(this.#Wn||this.#Vn)&&(this.#Wn&&this.#Tn?.(l,n,"delete"),this.#Vn&&this.#Bn?.push([l,n,"delete"])),this.#On.delete(n),this.#Rn[e]=void 0,this.#Fn[e]=void 0,e===this.#Mn)this.#Mn=this.#$n[e];else if(e===this.#jn)this.#jn=this.#Ln[e];else{const n=this.#$n[e];this.#Ln[n]=this.#Ln[e];const l=this.#Ln[e];this.#$n[l]=this.#$n[e]}this.#N--,this.#Nn.push(e)}}if(this.#Vn&&this.#Bn?.length){const n=this.#Bn;let l;for(;l=n?.shift();)this.#Pn?.(...l)}return l}clear(){for(const n of this.#Zn({allowStale:!0})){const l=this.#Fn[n];if(this.#Gn(l))l.__abortController.abort(new Error("deleted"));else{const e=this.#Rn[n];this.#Wn&&this.#Tn?.(l,e,"delete"),this.#Vn&&this.#Bn?.push([l,e,"delete"])}}if(this.#On.clear(),this.#Fn.fill(void 0),this.#Rn.fill(void 0),this.#qn&&this.#Un&&(this.#qn.fill(0),this.#Un.fill(0)),this.#Hn&&this.#Hn.fill(0),this.#jn=0,this.#Mn=0,this.#Nn.length=0,this.#An=0,this.#N=0,this.#Vn&&this.#Bn){const n=this.#Bn;let l;for(;l=n?.shift();)this.#Pn?.(...l)}}}l.LRUCache=h},1878:(n,l,e)=>{"use strict";const t=e(9567),u=e(6819),r=e(4942),o=e(6220),i=e(5922),s=e(7157),a=e(1148),c=e(9191),d=e(2613);n.exports=function(n={sinonXhrLib:c}){d(n?.sinonXhrLib,"No XHR lib passed in");const{sinonXhrLib:l}=n,h={createSandbox:u,match:e(3584).createMatcher,restoreObject:e(5383),expectation:e(7076),defaultConfig:e(5836),timers:o.timers,xhr:l.fakeXhr.xhr,FakeXMLHttpRequest:l.fakeXhr.FakeXMLHttpRequest,fakeServer:l.fakeServer,fakeServerWithClock:l.fakeServerWithClock,createFakeServer:l.fakeServer.create.bind(l.fakeServer),createFakeServerWithClock:l.fakeServerWithClock.create.bind(l.fakeServerWithClock),addBehavior:function(n,l){t.addBehavior(s,n,l)},promise:a},f=new i;return r(f,h)}},9510:(n,l,e)=>{"use strict";const t=e(1878);n.exports=t()},2427:(n,l,e)=>{"use strict";const t=e(8953).prototypes.array,u=e(8953).calledInOrder,r=e(3584).createMatcher,o=e(8953).orderByFirstCall,i=e(3164),s=e(9023).inspect,a=e(8953).prototypes.string.slice,c=e(8953).global,d=t.slice,h=t.concat,f=t.forEach,p=t.join,m=t.splice;function g(n){const l=n||{};!function(n,l){for(const e of Object.keys(l))null==n[e]&&(n[e]=l[e])}(l,{shouldLimitAssertionLogs:!1,assertionLogLimit:1e4});const e={failException:"AssertError",fail:function(n){let t=n;l.shouldLimitAssertionLogs&&(t=n.substring(0,l.assertionLogLimit));const u=new Error(t);throw u.name=this.failException||e.failException,u},pass:function(){},callOrder:function(){t.apply(null,arguments);let n="",l="";if(u(arguments))e.pass("callOrder");else{try{n=p(arguments,", ");const e=d(arguments);let t=e.length;for(;t;)e[--t].called||m(e,t,1);l=p(o(e),", ")}catch(n){}g(this,`expected ${n} to be called in order but were called as ${l}`)}},callCount:function(n,l){let u;t(n),"number"!=typeof l?(u=`expected ${s(l)} to be a number but was of type `+typeof l,g(this,u)):n.callCount!==l?(u=`expected %n to be called ${i(l)} but was called %c%C`,g(this,n.printf(u))):e.pass("callCount")},expose:function(n,l){if(!n)throw new TypeError("target is null or undefined");const e=l||{},t=void 0===e.prefix?"assert":e.prefix,u=void 0===e.includeFail||Boolean(e.includeFail),r=this;return f(Object.keys(r),(function(l){"expose"===l||!u&&/^(fail)/.test(l)||(n[function(n,l){return!n||/^fail/.test(l)?l:n+a(l,0,1).toUpperCase()+a(l,1)}(t,l)]=r[l])})),n},match:function(n,l){if(r(l).test(n))e.pass("match");else{const e=["expected value to match",`    expected = ${s(l)}`,`    actual = ${s(n)}`];g(this,p(e,"\n"))}}};function t(){const n=d(arguments);f(n,(function(n){n||e.fail("fake is not a spy"),n.proxy&&n.proxy.isSinonProxy?t(n.proxy):("function"!=typeof n&&e.fail(`${n} is not a function`),"function"!=typeof n.getCall&&e.fail(`${n} is not stubbed`))}))}function g(n,l){const t=n||c;(t.fail||e.fail).call(t,l)}function y(n,l,u){let r=u,o=l;2===arguments.length&&(r=l,o=n),e[n]=function(l){t(l);const u=d(arguments,1);let i=!1;!function(n,l){switch(n){case"notCalled":case"called":case"calledOnce":case"calledTwice":case"calledThrice":0!==l.length&&e.fail(`${n} takes 1 argument but was called with ${l.length+1} arguments`)}}(n,u),i="function"==typeof o?!o(l):"function"==typeof l[o]?!l[o].apply(l,u):!l[o],i?g(this,(l.printf||l.proxy.printf).apply(l,h([r],u))):e.pass(n)}}return y("called","expected %n to have been called at least once but was never called"),y("notCalled",(function(n){return!n.called}),"expected %n to not have been called but was called %c%C"),y("calledOnce","expected %n to be called once but was called %c%C"),y("calledTwice","expected %n to be called twice but was called %c%C"),y("calledThrice","expected %n to be called thrice but was called %c%C"),y("calledOn","expected %n to be called with %1 as this but was called with %t"),y("alwaysCalledOn","expected %n to always be called with %1 as this but was called with %t"),y("calledWithNew","expected %n to be called with new"),y("alwaysCalledWithNew","expected %n to always be called with new"),y("calledWith","expected %n to be called with arguments %D"),y("calledWithMatch","expected %n to be called with match %D"),y("alwaysCalledWith","expected %n to always be called with arguments %D"),y("alwaysCalledWithMatch","expected %n to always be called with match %D"),y("calledWithExactly","expected %n to be called with exact arguments %D"),y("calledOnceWithExactly","expected %n to be called once and with exact arguments %D"),y("calledOnceWithMatch","expected %n to be called once and with match %D"),y("alwaysCalledWithExactly","expected %n to always be called with exact arguments %D"),y("neverCalledWith","expected %n to never be called with arguments %*%C"),y("neverCalledWithMatch","expected %n to never be called with match %*%C"),y("threw","%n did not throw exception%C"),y("alwaysThrew","%n did not always throw exception%C"),e}n.exports=g(),n.exports.createAssertObject=g},9567:(n,l,e)=>{"use strict";const t=e(8953).prototypes.array,u=e(4942),r=e(8953).functionName,o=e(7109),i=e(8953).valueToString,s=e(8843),a=t.concat,c=t.join,d=t.reverse,h=t.slice;function f(n,l,e){const t=l[n.replace(/sArg/,"ArgAt")];if(t>=e.length)throw new TypeError(`${n} failed: ${t+1} arguments required but only ${e.length} present`)}const p={create:function(n){const l=u({},p);return delete l.create,delete l.addBehavior,delete l.createBehavior,l.stub=n,n.defaultBehavior&&n.defaultBehavior.promiseLibrary&&(l.promiseLibrary=n.defaultBehavior.promiseLibrary),l},isPresent:function(){return"number"==typeof this.callArgAt||this.exception||this.exceptionCreator||"number"==typeof this.returnArgAt||this.returnThis||"number"==typeof this.resolveArgAt||this.resolveThis||"number"==typeof this.throwArgAt||this.fakeFn||this.returnValueDefined},invoke:function(n,l){const e=function(n,l){if("number"==typeof n.callArgAt){f("callsArg",n,l);const e=function(n,l){const e=n.callArgAt;if(e>=0)return l[e];let t;-1===e&&(t=l),-2===e&&(t=d(h(l)));const u=n.callArgProp;for(let n=0,l=t.length;n<l;++n){if(!u&&"function"==typeof t[n])return t[n];if(u&&t[n]&&"function"==typeof t[n][u])return t[n][u]}return null}(n,l);if("function"!=typeof e)throw new TypeError(function(n,l,e){if(n.callArgAt<0){let l;return l=n.callArgProp?`${r(n.stub)} expected to yield to '${i(n.callArgProp)}', but no object with such a property was passed.`:`${r(n.stub)} expected to yield, but no callback was passed.`,e.length>0&&(l+=` Received [${c(e,", ")}]`),l}return`argument at index ${n.callArgAt} is not a function: ${l}`}(n,e,l));if(!n.callbackAsync)return e.apply(n.callbackContext,n.callbackArguments);o((function(){e.apply(n.callbackContext,n.callbackArguments)}))}}(this,l);if(this.exception)throw this.exception;if(this.exceptionCreator)throw this.exception=this.exceptionCreator(),this.exceptionCreator=void 0,this.exception;if("number"==typeof this.returnArgAt)return f("returnsArg",this,l),l[this.returnArgAt];if(this.returnThis)return n;if("number"==typeof this.throwArgAt)throw f("throwsArg",this,l),l[this.throwArgAt];if(this.fakeFn)return this.fakeFn.apply(n,l);if("number"==typeof this.resolveArgAt)return f("resolvesArg",this,l),(this.promiseLibrary||Promise).resolve(l[this.resolveArgAt]);if(this.resolveThis)return(this.promiseLibrary||Promise).resolve(n);if(this.resolve)return(this.promiseLibrary||Promise).resolve(this.returnValue);if(this.reject)return(this.promiseLibrary||Promise).reject(this.returnValue);if(this.callsThrough)return this.effectiveWrappedMethod().apply(n,l);if(this.callsThroughWithNew){const n=this.effectiveWrappedMethod(),e=h(l);return new(n.bind.apply(n,a([null],e)))}return void 0!==this.returnValue?this.returnValue:"number"==typeof this.callArgAt?e:this.returnValue},effectiveWrappedMethod:function(){for(let n=this.stub;n;n=n.parent)if(n.wrappedMethod)return n.wrappedMethod;throw new Error("Unable to find wrapped method")},onCall:function(n){return this.stub.onCall(n)},onFirstCall:function(){return this.stub.onFirstCall()},onSecondCall:function(){return this.stub.onSecondCall()},onThirdCall:function(){return this.stub.onThirdCall()},withArgs:function(){throw new Error('Defining a stub by invoking "stub.onCall(...).withArgs(...)" is not supported. Use "stub.withArgs(...).onCall(...)" to define sequential behavior for calls with certain arguments.')}};function m(n){return function(){return this.defaultBehavior=this.defaultBehavior||p.create(this),this.defaultBehavior[n].apply(this.defaultBehavior,arguments),this}}p.addBehavior=function(n,l,e){p[l]=function(){return e.apply(this,a([this],h(arguments))),this.stub||this},n[l]=m(l)},p.createBehavior=m;const g=s(p);n.exports=u.nonEnum({},p,g)},3317:(n,l,e)=>{"use strict";const t=e(539),u=e(3040),r=e(8953).prototypes.object.hasOwnProperty,o=e(8953).prototypes.array.push;function i(n,l,e,t){"function"==typeof u(t,e).value&&r(l,e)&&o(n,l[e])}n.exports=function(n){const l=[];return t(n,i.bind(null,l,n)),l}},1410:(n,l,e)=>{"use strict";n.exports=class{constructor(n=e(7687)){this.supportsColor=n}colorize(n,l){return!1===this.supportsColor.stdout?n:`[${l}m${n}[0m`}red(n){return this.colorize(n,31)}green(n){return this.colorize(n,32)}cyan(n){return this.colorize(n,96)}white(n){return this.colorize(n,39)}bold(n){return this.colorize(n,1)}}},6819:(n,l,e)=>{"use strict";const t=e(8953).prototypes.array,u=e(5922),r=t.forEach,o=t.push;function i(n,l,e,t){t&&(l.injectInto&&!(e in l.injectInto)?(l.injectInto[e]=t,o(n.injectedKeys,e)):o(n.args,t))}n.exports=function(n){if(!n)return new u;const l=function(n){const l=new u({assertOptions:n.assertOptions});return n.useFakeServer&&("object"==typeof n.useFakeServer&&(l.serverPrototype=n.useFakeServer),l.useFakeServer()),n.useFakeTimers&&("object"==typeof n.useFakeTimers?l.useFakeTimers(n.useFakeTimers):l.useFakeTimers()),l}(n);l.args=l.args||[],l.injectedKeys=[],l.injectInto=n.injectInto;const e=l.inject({});return n.properties?r(n.properties,(function(t){const u=e[t]||"sandbox"===t&&l;i(l,n,t,u)})):i(l,n,"sandbox"),l}},912:(n,l,e)=>{"use strict";const t=e(7157),u=e(7632),r=e(8953).prototypes.array.forEach;n.exports=function(n,l){if("function"!=typeof n)throw new TypeError("The constructor should be a function.");const e=Object.create(n.prototype);u.set(e,"stub-instance");const o=t(e);return r(Object.keys(l||{}),(function(n){if(!(n in o))throw new Error(`Cannot stub ${n}. Property does not exist!`);{const e=l[n];!function(n){return"stub"===u.get(n)}(e)?o[n].returns(e):o[n]=e}})),o}},4022:(n,l,e)=>{"use strict";const t=e(8953).prototypes.array,u=e(2098),r=e(8843),o=e(4942),i=t.slice;function s(n,l,e){"function"==typeof l?n.exceptionCreator=l:"string"==typeof l?n.exceptionCreator=function(){const n=new Error(e||`Sinon-provided ${l}`);return n.name=l,n}:l?n.exception=l:n.exceptionCreator=function(){return new Error("Error")}}const a={skipReturn:!0,skipThrows:!0};function c(n,l){n.fakeFn=void 0,n.callsThrough=void 0,n.callsThroughWithNew=void 0,l&&l.skipThrows||(n.exception=void 0,n.exceptionCreator=void 0,n.throwArgAt=void 0),n.callArgAt=void 0,n.callbackArguments=void 0,n.callbackContext=void 0,n.callArgProp=void 0,n.callbackAsync=void 0,l&&l.skipReturn||(n.returnValue=void 0,n.returnValueDefined=void 0,n.returnArgAt=void 0,n.returnThis=void 0),n.resolve=void 0,n.resolveThis=void 0,n.resolveArgAt=void 0,n.reject=void 0}const d={callsFake:function(n,l){c(n),n.fakeFn=l},callsArg:function(n,l){if("number"!=typeof l)throw new TypeError("argument index is not number");c(n),n.callArgAt=l,n.callbackArguments=[]},callsArgOn:function(n,l,e){if("number"!=typeof l)throw new TypeError("argument index is not number");c(n),n.callArgAt=l,n.callbackArguments=[],n.callbackContext=e},callsArgWith:function(n,l){if("number"!=typeof l)throw new TypeError("argument index is not number");c(n),n.callArgAt=l,n.callbackArguments=i(arguments,2)},callsArgOnWith:function(n,l,e){if("number"!=typeof l)throw new TypeError("argument index is not number");c(n),n.callArgAt=l,n.callbackArguments=i(arguments,3),n.callbackContext=e},usingPromise:function(n,l){n.promiseLibrary=l},yields:function(n){c(n,a),n.callArgAt=-1,n.callbackArguments=i(arguments,1)},yieldsRight:function(n){c(n,a),n.callArgAt=-2,n.callbackArguments=i(arguments,1)},yieldsOn:function(n,l){c(n,a),n.callArgAt=-1,n.callbackArguments=i(arguments,2),n.callbackContext=l},yieldsTo:function(n,l){c(n,a),n.callArgAt=-1,n.callbackArguments=i(arguments,2),n.callArgProp=l},yieldsToOn:function(n,l,e){c(n,a),n.callArgAt=-1,n.callbackArguments=i(arguments,3),n.callbackContext=e,n.callArgProp=l},throws:s,throwsException:s,returns:function(n,l){c(n),n.returnValue=l,n.returnValueDefined=!0},returnsArg:function(n,l){if("number"!=typeof l)throw new TypeError("argument index is not number");c(n),n.returnArgAt=l},throwsArg:function(n,l){if("number"!=typeof l)throw new TypeError("argument index is not number");c(n),n.throwArgAt=l},returnsThis:function(n){c(n),n.returnThis=!0},resolves:function(n,l){c(n),n.returnValue=l,n.resolve=!0,n.returnValueDefined=!0},resolvesArg:function(n,l){if("number"!=typeof l)throw new TypeError("argument index is not number");c(n),n.resolveArgAt=l,n.resolve=!0},rejects:function(n,l,e){let t;return"string"==typeof l?(t=new Error(e||""),t.name=l):t=l||new Error("Error"),c(n),n.returnValue=t,n.reject=!0,n.returnValueDefined=!0,n},resolvesThis:function(n){c(n),n.resolveThis=!0},callThrough:function(n){c(n),n.callsThrough=!0},callThroughWithNew:function(n){c(n),n.callsThroughWithNew=!0},get:function(n,l){const e=n.stub||n;return Object.defineProperty(e.rootObj,e.propName,{get:l,configurable:u(e.rootObj,e.propName)}),n},set:function(n,l){const e=n.stub||n;return Object.defineProperty(e.rootObj,e.propName,{set:l,configurable:u(e.rootObj,e.propName)}),n},value:function(n,l){const e=n.stub||n;return Object.defineProperty(e.rootObj,e.propName,{value:l,enumerable:!0,writable:!0,configurable:e.shadowsPropOnPrototype||u(e.rootObj,e.propName)}),n}},h=r(d);n.exports=o({},d,h)},6268:(n,l,e)=>{"use strict";const t=e(8953).prototypes.array,u=e(8909),r=e(7109),o=t.slice;let i=Promise;function s(n){if(arguments.length>0&&"function"!=typeof n)throw new TypeError("Expected f argument to be a Function");return c(n)}n.exports=s,s.returns=function(n){return c((function(){return n}))},s.throws=function(n){return c((function(){throw d(n)}))},s.resolves=function(n){return c((function(){return i.resolve(n)}))},s.rejects=function(n){return c((function(){return i.reject(d(n))}))},s.usingPromise=function(n){return i=n,s},s.yields=function(){const n=o(arguments);return c((function(){const l=arguments[arguments.length-1];if("function"!=typeof l)throw new TypeError("Expected last argument to be a function");l.apply(null,n)}))},s.yieldsAsync=function(){const n=o(arguments);return c((function(){const l=arguments[arguments.length-1];if("function"!=typeof l)throw new TypeError("Expected last argument to be a function");r((function(){l.apply(null,n)}))}))};let a=0;function c(n){const l=function(){let l,t;arguments.length>0&&(l=arguments[0],t=arguments[arguments.length-1]);const u=t&&"function"==typeof t?t:void 0;return e.firstArg=l,e.lastArg=t,e.callback=u,n&&n.apply(this,arguments)},e=u(l,n||l);return e.displayName="fake",e.id="fake#"+a++,e}function d(n){return n instanceof Error?n:new Error(n)}},7076:(n,l,e)=>{"use strict";const t=e(8953).prototypes.array,u=e(6958),r=e(8114).toString,o=e(3164),i=e(4942),s=e(3584).createMatcher,a=e(7157),c=e(2427),d=e(3584).deepEqual,h=e(9023).inspect,f=e(8953).valueToString,p=t.every,m=t.forEach,g=t.push,y=t.slice;function v(n){return"number"==typeof n.maxCalls&&n.callCount===n.maxCalls}function w(n,l){return s.isMatcher(n)&&n.test(l)||!0}const b={minCalls:1,maxCalls:1,create:function(n){const l=i.nonEnum(a(),b);return delete l.create,l.method=n,l},invoke:function(n,l,e){return this.verifyCallAllowed(l,e),u.apply(this,arguments)},atLeast:function(n){if("number"!=typeof n)throw new TypeError(`'${f(n)}' is not number`);return this.limitsSet||(this.maxCalls=null,this.limitsSet=!0),this.minCalls=n,this},atMost:function(n){if("number"!=typeof n)throw new TypeError(`'${f(n)}' is not number`);return this.limitsSet||(this.minCalls=null,this.limitsSet=!0),this.maxCalls=n,this},never:function(){return this.exactly(0)},once:function(){return this.exactly(1)},twice:function(){return this.exactly(2)},thrice:function(){return this.exactly(3)},exactly:function(n){if("number"!=typeof n)throw new TypeError(`'${f(n)}' is not a number`);return this.atLeast(n),this.atMost(n)},met:function(){return!this.failed&&(!("number"==typeof this.minCalls)||this.callCount>=this.minCalls)},verifyCallAllowed:function(n,l){const e=this.expectedArguments;v(this)&&(this.failed=!0,b.fail(`${this.method} already called ${o(this.maxCalls)}`)),"expectedThis"in this&&this.expectedThis!==n&&b.fail(`${this.method} called with ${f(n)} as thisValue, expected ${f(this.expectedThis)}`),"expectedArguments"in this&&(l||b.fail(`${this.method} received no arguments, expected ${h(e)}`),l.length<e.length&&b.fail(`${this.method} received too few arguments (${h(l)}), expected ${h(e)}`),this.expectsExactArgCount&&l.length!==e.length&&b.fail(`${this.method} received too many arguments (${h(l)}), expected ${h(e)}`),m(e,(function(n,t){w(n,l[t])||b.fail(`${this.method} received wrong arguments ${h(l)}, didn't match ${String(e)}`),d(l[t],n)||b.fail(`${this.method} received wrong arguments ${h(l)}, expected ${h(e)}`)}),this))},allowsCall:function(n,l){const e=this.expectedArguments;if(this.met()&&v(this))return!1;if("expectedThis"in this&&this.expectedThis!==n)return!1;if(!("expectedArguments"in this))return!0;const t=l||[];return!(t.length<e.length)&&(!this.expectsExactArgCount||t.length===e.length)&&p(e,(function(n,l){return!!w(n,t[l])&&!!d(t[l],n)}))},withArgs:function(){return this.expectedArguments=y(arguments),this},withExactArgs:function(){return this.withArgs.apply(this,arguments),this.expectsExactArgCount=!0,this},on:function(n){return this.expectedThis=n,this},toString:function(){const n=y(this.expectedArguments||[]);this.expectsExactArgCount||g(n,"[...]");const l=`${r.call({proxy:this.method||"anonymous mock expectation",args:n}).replace(", [...","[, ...")} ${function(n){const l=n.minCalls,e=n.maxCalls;if("number"==typeof l&&"number"==typeof e){let n=o(l);return l!==e&&(n=`at least ${n} and at most ${o(e)}`),n}return"number"==typeof l?`at least ${o(l)}`:`at most ${o(e)}`}(this)}`;return this.met()?`Expectation met: ${l}`:`Expected ${l} (${e=this.callCount,0===e?"never called":`called ${o(e)}`})`;var e},verify:function(){return this.met()?b.pass(String(this)):b.fail(String(this)),!0},pass:function(n){c.pass(n)},fail:function(n){const l=new Error(n);throw l.name="ExpectationError",l}};n.exports=b},8740:(n,l,e)=>{"use strict";const t=e(8953).prototypes.array,u=e(7076),r=e(8114).toString,o=e(4942),i=e(3584).deepEqual,s=e(5102),a=e(9601),c=t.concat,d=t.filter,h=t.forEach,f=t.every,p=t.join,m=t.push,g=t.slice,y=t.unshift;function v(n){return n&&"string"!=typeof n?v.create(n):u.create(n||"Anonymous mock")}function w(n,l){h(n||[],l)}o(v,{create:function(n){if(!n)throw new TypeError("object is null");const l=o.nonEnum({},v,{object:n});return delete l.create,l},expects:function(n){if(!n)throw new TypeError("method is falsy");if(this.expectations||(this.expectations={},this.proxies=[],this.failures=[]),!this.expectations[n]){this.expectations[n]=[];const l=this;s(this.object,n,(function(){return l.invokeMethod(n,this,arguments)})),m(this.proxies,n)}const l=u.create(n);return l.wrappedMethod=this.object[n].wrappedMethod,m(this.expectations[n],l),a(this.promiseLibrary,l),l},restore:function(){const n=this.object;w(this.proxies,(function(l){"function"==typeof n[l].restore&&n[l].restore()}))},verify:function(){const n=this.expectations||{},l=this.failures?g(this.failures):[],e=[];return w(this.proxies,(function(t){w(n[t],(function(n){n.met()?m(e,String(n)):m(l,String(n))}))})),this.restore(),l.length>0?u.fail(p(c(l,e),"\n")):e.length>0&&u.pass(p(c(l,e),"\n")),!0},usingPromise:function(n){return this.promiseLibrary=n,this},invokeMethod:function(n,l,e){const t=this.expectations&&this.expectations[n]?this.expectations[n]:[],o=e||[];let s;const a=d(t,(function(n){return l=n.expectedArguments||[],e=o,(!n.expectsExactArgCount||l.length===e.length)&&f(l,(function(n,l){return i(e[l],n)}));var l,e})),c=d(a,(function(n){return!n.met()&&n.allowsCall(l,e)}));if(c.length>0)return c[0].apply(l,e);const g=[];let v=0;if(h(a,(function(n){n.allowsCall(l,e)?s=s||n:v+=1})),s&&0===v)return s.apply(l,e);h(t,(function(n){m(g,`    ${String(n)}`)})),y(g,`Unexpected call: ${r.call({proxy:n,args:e})}`);const w=new Error;if(!w.stack)try{throw w}catch(n){}m(this.failures,`Unexpected call: ${r.call({proxy:n,args:e,stack:w.stack})}`),u.fail(p(g,"\n"))}}),n.exports=v},1148:(n,l,e)=>{"use strict";const t=e(6268),u=e(9600),r="pending",o="resolved",i="rejected";n.exports=function(n){const l=function(n){return u(n)?n:n?t(n):t()}(n),e=new Promise(l);function s(n,l,t){if(e.status!==r)throw new Error(`Promise already ${e.status}`);e.status=n,t(l)}return e.status=r,e.then((function(n){e.status=o,e.resolvedValue=n})).catch((function(n){e.status=i,e.rejectedValue=n})),e.resolve=function(n){return s(o,n,l.firstCall.args[0]),e},e.reject=function(n){return s(i,n,l.firstCall.args[1]),new Promise((function(n){e.catch((()=>n()))}))},e}},5607:(n,l,e)=>{"use strict";const t=e(8953).prototypes.array.push;l.incrementCallCount=function(n){n.called=!0,n.callCount+=1,n.notCalled=!1,n.calledOnce=1===n.callCount,n.calledTwice=2===n.callCount,n.calledThrice=3===n.callCount},l.createCallProperties=function(n){n.firstCall=n.getCall(0),n.secondCall=n.getCall(1),n.thirdCall=n.getCall(2),n.lastCall=n.getCall(n.callCount-1)},l.delegateToCalls=function(n,l,e,u,r,o,i){n[l]=function(){if(!this.called)return!!o&&o.apply(this,arguments);if(void 0!==i&&this.callCount!==i)return!1;let n,s=0;const a=[];for(let r=0,o=this.callCount;r<o;r+=1){n=this.getCall(r);const o=n[u||l].apply(n,arguments);if(t(a,o),o&&(s+=1,e))return!0}return r?a:s===this.callCount}}},8114:(n,l,e)=>{"use strict";const t=e(8953).prototypes.array,u=e(3584).createMatcher,r=e(3584).deepEqual,o=e(8953).functionName,i=e(9023).inspect,s=e(8953).valueToString,a=t.concat,c=t.filter,d=t.join,h=t.map,f=t.reduce,p=t.slice;function m(n,l,e){let t=o(n)+l;throw e.length&&(t+=` Received [${d(p(e),", ")}]`),new Error(t)}const g={calledOn:function(n){return u.isMatcher(n)?n.test(this.thisValue):this.thisValue===n},calledWith:function(){const n=this,l=p(arguments);return!(l.length>n.args.length)&&f(l,(function(l,e,t){return l&&r(n.args[t],e)}),!0)},calledWithMatch:function(){const n=this,l=p(arguments);return!(l.length>n.args.length)&&f(l,(function(l,e,t){const r=n.args[t];return l&&u(e).test(r)}),!0)},calledWithExactly:function(){return arguments.length===this.args.length&&this.calledWith.apply(this,arguments)},notCalledWith:function(){return!this.calledWith.apply(this,arguments)},notCalledWithMatch:function(){return!this.calledWithMatch.apply(this,arguments)},returned:function(n){return r(this.returnValue,n)},threw:function(n){return void 0!==n&&this.exception?this.exception===n||this.exception.name===n:Boolean(this.exception)},calledWithNew:function(){return this.proxy.prototype&&this.thisValue instanceof this.proxy},calledBefore:function(n){return this.callId<n.callId},calledAfter:function(n){return this.callId>n.callId},calledImmediatelyBefore:function(n){return this.callId===n.callId-1},calledImmediatelyAfter:function(n){return this.callId===n.callId+1},callArg:function(n){return this.ensureArgIsAFunction(n),this.args[n]()},callArgOn:function(n,l){return this.ensureArgIsAFunction(n),this.args[n].apply(l)},callArgWith:function(n){return this.callArgOnWith.apply(this,a([n,null],p(arguments,1)))},callArgOnWith:function(n,l){this.ensureArgIsAFunction(n);const e=p(arguments,2);return this.args[n].apply(l,e)},throwArg:function(n){if(n>this.args.length)throw new TypeError(`Not enough arguments: ${n} required but only ${this.args.length} present`);throw this.args[n]},yield:function(){return this.yieldOn.apply(this,a([null],p(arguments,0)))},yieldOn:function(n){const l=p(this.args),e=c(l,(function(n){return"function"==typeof n}))[0];return e||m(this.proxy," cannot yield since no callback was passed.",l),e.apply(n,p(arguments,1))},yieldTo:function(n){return this.yieldToOn.apply(this,a([n,null],p(arguments,1)))},yieldToOn:function(n,l){const e=p(this.args),t=c(e,(function(l){return l&&"function"==typeof l[n]}))[0],u=t&&t[n];return u||m(this.proxy,` cannot yield to '${s(n)}' since no callback was passed.`,e),u.apply(l,p(arguments,2))},toString:function(){if(!this.args)return":(";let n=this.proxy?`${String(this.proxy)}(`:"";const l=h(this.args,(function(n){return i(n)}));return n=`${n+d(l,", ")})`,void 0!==this.returnValue&&(n+=` => ${i(this.returnValue)}`),this.exception&&(n+=` !${this.exception.name}`,this.exception.message&&(n+=`(${this.exception.message})`)),this.stack&&(n+=(this.stack.split("\n")[3]||"unknown").replace(/^\s*(?:at\s+|@)?/," at ")),n},ensureArgIsAFunction:function(n){if("function"!=typeof this.args[n])throw new TypeError(`Expected argument at position ${n} to be a Function, but was ${typeof this.args[n]}`)}};function y(n,l,e,t,u,r,o){if("number"!=typeof r)throw new TypeError("Call id is not a number");let i,s;e.length>0&&(i=e[0],s=e[e.length-1]);const a=Object.create(g),c=s&&"function"==typeof s?s:void 0;return a.proxy=n,a.thisValue=l,a.args=e,a.firstArg=i,a.lastArg=s,a.callback=c,a.returnValue=t,a.exception=u,a.callId=r,a.errorWithCallStack=o,a}Object.defineProperty(g,"stack",{enumerable:!0,configurable:!0,get:function(){return this.errorWithCallStack&&this.errorWithCallStack.stack||""}}),g.invokeCallback=g.yield,y.toString=g.toString,n.exports=y},6958:(n,l,e)=>{"use strict";const t=e(8953).prototypes.array,u=e(5607),r=t.push,o=t.forEach,i=t.concat,s=Error.prototype.constructor,a=Function.prototype.bind;let c=0;n.exports=function(n,l,e){const t=this.matchingFakes(e),d=c++;let h,f;u.incrementCallCount(this),r(this.thisValues,l),r(this.args,e),r(this.callIds,d),o(t,(function(n){u.incrementCallCount(n),r(n.thisValues,l),r(n.args,e),r(n.callIds,d)})),u.createCallProperties(this),o(t,u.createCallProperties);try{this.invoking=!0,this.getCall(this.callCount-1).calledWithNew()?(f=new(a.apply(this.func||n,i([l],e))),"object"!=typeof f&&"function"!=typeof f&&(f=l)):f=(this.func||n).apply(l,e)}catch(n){h=n}finally{delete this.invoking}r(this.exceptions,h),r(this.returnValues,f),o(t,(function(n){r(n.exceptions,h),r(n.returnValues,f)}));const p=new s;try{throw p}catch(n){}if(r(this.errorsWithCallStack,p),o(t,(function(n){r(n.errorsWithCallStack,p)})),u.createCallProperties(this),o(t,u.createCallProperties),void 0!==h)throw h;return f}},8909:(n,l,e)=>{"use strict";const t=e(8953).prototypes.array,u=e(4942),r=e(2150),o=e(8114),i=e(5607),s=e(6958),a=e(9023).inspect,c=t.push,d=t.forEach,h=t.slice,f=Object.freeze([]),p={toString:r,named:function(n){this.displayName=n;const l=Object.getOwnPropertyDescriptor(this,"name");return l&&l.configurable&&(l.value=n,Object.defineProperty(this,"name",l)),this},invoke:s,matchingFakes:function(){return f},getCall:function(n){let l=n;return l<0&&(l+=this.callCount),l<0||l>=this.callCount?null:o(this,this.thisValues[l],this.args[l],this.returnValues[l],this.exceptions[l],this.callIds[l],this.errorsWithCallStack[l])},getCalls:function(){const n=[];let l;for(l=0;l<this.callCount;l++)c(n,this.getCall(l));return n},calledBefore:function(n){return!!this.called&&(!n.called||this.callIds[0]<n.callIds[n.callIds.length-1])},calledAfter:function(n){return!(!this.called||!n.called)&&this.callIds[this.callCount-1]>n.callIds[0]},calledImmediatelyBefore:function(n){return!(!this.called||!n.called)&&this.callIds[this.callCount-1]===n.callIds[n.callCount-1]-1},calledImmediatelyAfter:function(n){return!(!this.called||!n.called)&&this.callIds[this.callCount-1]===n.callIds[n.callCount-1]+1},formatters:e(2139),printf:function(n){const l=this,e=h(arguments,1);let t;return(n||"").replace(/%(.)/g,(function(n,u){return t=p.formatters[u],"function"==typeof t?String(t(l,e)):isNaN(parseInt(u,10))?`%${u}`:a(e[u-1])}))},resetHistory:function(){if(this.invoking){const n=new Error("Cannot reset Sinon function while invoking it. Move the call to .resetHistory outside of the callback.");throw n.name="InvalidResetException",n}return this.called=!1,this.notCalled=!0,this.calledOnce=!1,this.calledTwice=!1,this.calledThrice=!1,this.callCount=0,this.firstCall=null,this.secondCall=null,this.thirdCall=null,this.lastCall=null,this.args=[],this.firstArg=null,this.lastArg=null,this.returnValues=[],this.thisValues=[],this.exceptions=[],this.callIds=[],this.errorsWithCallStack=[],this.fakes&&d(this.fakes,(function(n){n.resetHistory()})),this}},m=i.delegateToCalls;m(p,"calledOn",!0),m(p,"alwaysCalledOn",!1,"calledOn"),m(p,"calledWith",!0),m(p,"calledOnceWith",!0,"calledWith",!1,void 0,1),m(p,"calledWithMatch",!0),m(p,"alwaysCalledWith",!1,"calledWith"),m(p,"alwaysCalledWithMatch",!1,"calledWithMatch"),m(p,"calledWithExactly",!0),m(p,"calledOnceWithExactly",!0,"calledWithExactly",!1,void 0,1),m(p,"calledOnceWithMatch",!0,"calledWithMatch",!1,void 0,1),m(p,"alwaysCalledWithExactly",!1,"calledWithExactly"),m(p,"neverCalledWith",!1,"notCalledWith",!1,(function(){return!0})),m(p,"neverCalledWithMatch",!1,"notCalledWithMatch",!1,(function(){return!0})),m(p,"threw",!0),m(p,"alwaysThrew",!1,"threw"),m(p,"returned",!0),m(p,"alwaysReturned",!1,"returned"),m(p,"calledWithNew",!0),m(p,"alwaysCalledWithNew",!1,"calledWithNew"),n.exports=function(n,l){const e=function(n,l){let e;switch(l.length){case 0:default:e=function(){return e.invoke(n,this,h(arguments))};break;case 1:e=function(l){return e.invoke(n,this,h(arguments))};break;case 2:e=function(l,t){return e.invoke(n,this,h(arguments))};break;case 3:e=function(l,t,u){return e.invoke(n,this,h(arguments))};break;case 4:e=function(l,t,u,r){return e.invoke(n,this,h(arguments))};break;case 5:e=function(l,t,u,r,o){return e.invoke(n,this,h(arguments))};break;case 6:e=function(l,t,u,r,o,i){return e.invoke(n,this,h(arguments))};break;case 7:e=function(l,t,u,r,o,i,s){return e.invoke(n,this,h(arguments))};break;case 8:e=function(l,t,u,r,o,i,s,a){return e.invoke(n,this,h(arguments))};break;case 9:e=function(l,t,u,r,o,i,s,a,c){return e.invoke(n,this,h(arguments))};break;case 10:e=function(l,t,u,r,o,i,s,a,c,d){return e.invoke(n,this,h(arguments))};break;case 11:e=function(l,t,u,r,o,i,s,a,c,d,f){return e.invoke(n,this,h(arguments))};break;case 12:e=function(l,t,u,r,o,i,s,a,c,d,f,p){return e.invoke(n,this,h(arguments))}}const t=Object.getOwnPropertyDescriptor(l,"name");return t&&t.configurable&&Object.defineProperty(e,"name",t),u.nonEnum(e,{isSinonProxy:!0,called:!1,notCalled:!0,calledOnce:!1,calledTwice:!1,calledThrice:!1,callCount:0,firstCall:null,firstArg:null,secondCall:null,thirdCall:null,lastCall:null,lastArg:null,args:[],returnValues:[],thisValues:[],exceptions:[],callIds:[],errorsWithCallStack:[]}),e}(n,l);return u(e,n),e.prototype=n.prototype,u.nonEnum(e,p),e}},5383:(n,l,e)=>{"use strict";const t=e(5703);function u(n,l){return n[l].restore&&n[l].restore.sinon}function r(n,l){n[l].restore()}n.exports=function(n){return t(r,n,u)}},5922:(n,l,e)=>{"use strict";const t=e(8953).prototypes.array,u=e(8953).deprecated,r=e(3317),o=e(3040),i=e(2098),s=e(3584).createMatcher,a=e(2427),c=e(6220),d=e(8740),h=e(2915),f=e(7157),p=e(912),m=e(6268),g=e(8953).valueToString,y=e(9191).fakeServer,v=e(9191).fakeXhr,w=e(9601),b=t.filter,S=t.forEach,C=t.push,D=t.reverse;function E(n,l){const e=b(n,(function(n){return"function"==typeof n[l]}));S(e,(function(n){n[l]()}))}function _(n,l,e){if(typeof n[l]!=typeof e)throw new TypeError(`Cannot replace ${typeof n[l]} with ${typeof e}`)}function k(n,l,e){if(void 0===n)throw new TypeError(`Cannot replace non-existent property ${g(l)}. Perhaps you meant sandbox.define()?`);if(void 0===e)throw new TypeError("Expected replacement argument to be defined")}function x(n={}){const l=this,e=n.assertOptions||{};let t,b=[],x=[],T=!1;function P(n){C(x,n)>l.leakThreshold&&!T&&(u.printWarning("Potential memory leak detected; be sure to call restore() to clean up your sandbox. To suppress this warning, modify the leakThreshold property of your sandbox."),T=!0)}function I(n,l,e=!1){const t=o(n,l),u=n[l];function r(){e?n[l]=u:t?.isOwn?Object.defineProperty(n,l,t):delete n[l]}return r.object=n,r.property=l,r}function A(n,l){S(b,(function(e){if(e.object===n&&e.property===l)throw new TypeError(`Attempted to replace ${l} which is already replaced`)}))}function O(n,l){const[e,u,o]=n;if(void 0===u&&"object"==typeof e){const n=r(l);S(n,(function(n){P(n)})),w(t,n)}else if(Array.isArray(o))for(const n of o)P(l[n]),w(t,l[n]);else P(l),w(t,l);return l}l.leakThreshold=1e4,l.assert=a.createAssertObject(e),l.serverPrototype=y,l.getFakes=function(){return x},l.createStubInstance=function(){const n=p.apply(null,arguments),l=r(n);return S(l,(function(n){P(n)})),w(t,l),n},l.inject=function(n){return n.spy=function(){return l.spy.apply(null,arguments)},n.stub=function(){return l.stub.apply(null,arguments)},n.mock=function(){return l.mock.apply(null,arguments)},n.createStubInstance=function(){return l.createStubInstance.apply(l,arguments)},n.fake=function(){return l.fake.apply(null,arguments)},n.define=function(){return l.define.apply(null,arguments)},n.replace=function(){return l.replace.apply(null,arguments)},n.replaceSetter=function(){return l.replaceSetter.apply(null,arguments)},n.replaceGetter=function(){return l.replaceGetter.apply(null,arguments)},l.clock&&(n.clock=l.clock),l.server&&(n.server=l.server,n.requests=l.server.requests),n.match=s,n},l.mock=function(){const n=d.apply(null,arguments);return P(n),w(t,n),n},l.reset=function(){E(x,"reset"),E(x,"resetHistory")},l.resetBehavior=function(){E(x,"resetBehavior")},l.resetHistory=function(){S(x,(function(n){const l=n.resetHistory||n.reset;l&&l.call(n)}))},l.restore=function(){if(arguments.length)throw new Error("sandbox.restore() does not take any parameters. Perhaps you meant stub.restore()");D(x),E(x,"restore"),x=[],S(b,(function(n){n()})),b=[],l.restoreContext()},l.restoreContext=function(){l.injectedKeys&&(S(l.injectedKeys,(function(n){delete l.injectInto[n]})),l.injectedKeys.length=0)},l.replace=function(n,l,e){const t=o(n,l);return k(t,l,e),function(n){if("function"==typeof n.get)throw new Error("Use sandbox.replaceGetter for replacing getters");if("function"==typeof n.set)throw new Error("Use sandbox.replaceSetter for replacing setters")}(t),_(n,l,e),A(n,l),C(b,I(n,l)),n[l]=e,e},l.replace.usingAccessor=function(n,l,e){return k(o(n,l),l,e),_(n,l,e),A(n,l),C(b,I(n,l,!0)),n[l]=e,e},l.define=function(n,l,e){if(o(n,l))throw new TypeError(`Cannot define the already existing property ${g(l)}. Perhaps you meant sandbox.replace()?`);if(void 0===e)throw new TypeError("Expected value argument to be defined");return A(n,l),C(b,I(n,l)),n[l]=e,e},l.replaceGetter=function(n,l,e){const t=o(n,l);if(void 0===t)throw new TypeError(`Cannot replace non-existent property ${g(l)}`);if("function"!=typeof e)throw new TypeError("Expected replacement argument to be a function");if("function"!=typeof t.get)throw new Error("`object.property` is not a getter");return A(n,l),C(b,I(n,l)),Object.defineProperty(n,l,{get:e,configurable:i(n,l)}),e},l.replaceSetter=function(n,l,e){const t=o(n,l);if(void 0===t)throw new TypeError(`Cannot replace non-existent property ${g(l)}`);if("function"!=typeof e)throw new TypeError("Expected replacement argument to be a function");if("function"!=typeof t.set)throw new Error("`object.property` is not a setter");return A(n,l),C(b,I(n,l)),Object.defineProperty(n,l,{set:e,configurable:i(n,l)}),e},l.spy=function(){return O(arguments,h.apply(h,arguments))},l.stub=function(){return O(arguments,f.apply(f,arguments))},l.fake=function(n){const l=m.apply(m,arguments);return P(l),l},S(Object.keys(m),(function(n){const e=m[n];"function"==typeof e&&(l.fake[n]=function(){const n=e.apply(e,arguments);return P(n),n})})),l.useFakeTimers=function(n){const e=c.useFakeTimers.call(null,n);return l.clock=e,P(e),e},l.verify=function(){E(x,"verify")},l.verifyAndRestore=function(){let n;try{l.verify()}catch(l){n=l}if(l.restore(),n)throw n},l.useFakeServer=function(){const n=l.serverPrototype||y;return n&&n.create?(l.server=n.create(),P(l.server),l.server):null},l.useFakeXMLHttpRequest=function(){const n=v.useFakeXMLHttpRequest();return P(n),n},l.usingPromise=function(n){return t=n,x.promiseLibrary=n,l}}x.prototype.match=s,n.exports=x},2139:(n,l,e)=>{"use strict";const t=e(8953).prototypes.array,u=new(e(1410)),r=e(3584).createMatcher,o=e(3164),i=e(9023).inspect,s=e(583),a=t.join,c=t.map,d=t.push,h=t.slice;function f(n,l,e){let t=e,r=n.message;return n.test(l)||(r=u.red(n.message),t&&(t=u.green(t))),`${t} ${r}`}function p(n){const l=c(n,(function(l){let e=l.value;return l.added?e=u.green(e):l.removed&&(e=u.red(e)),2===n.length&&(e+=" "),e}));return a(l,"")}function m(n){return"string"==typeof n?JSON.stringify(n):n}n.exports={c:function(n){return o(n.callCount)},n:function(n){return n.toString()},D:function(n,l){let e="";for(let t=0,u=n.callCount;t<u;++t){u>1&&(e+=`\nCall ${t+1}:`);const o=n.getCall(t).args,a=h(l);for(let n=0;n<o.length||n<a.length;++n){let l=o[n],t=a[n];l&&(l=m(l)),t&&(t=m(t)),e+="\n";const u=n<o.length?i(l):"";if(r.isMatcher(t))e+=f(t,l,u);else{const l=n<a.length?i(t):"";e+=p(s.diffJson(u,l))}}}return e},C:function(n){const l=[];for(let e=0,t=n.callCount;e<t;++e){let t=`    ${n.getCall(e).toString()}`;/\n/.test(l[e-1])&&(t=`\n${t}`),d(l,t)}return l.length>0?`\n${a(l,"\n")}`:""},t:function(n){const l=[];for(let e=0,t=n.callCount;e<t;++e)d(l,i(n.thisValues[e]));return a(l,", ")},"*":function(n,l){return a(c(l,(function(n){return i(n)})),", ")}}},2915:(n,l,e)=>{"use strict";const t=e(8953).prototypes.array,u=e(8909),r=e(4942),o=e(8953).functionName,i=e(3040),s=e(3584).deepEqual,a=e(6456),c=e(5607),d=e(5703),h=e(5102),f=e(8953).valueToString,p=t.forEach,m=t.pop,g=t.push,y=t.slice,v=Array.prototype.filter;let w=0;function b(n,l,e){const t=n.matchingArguments;return!(!(t.length<=l.length&&s(y(l,0,t.length),t))||e&&t.length!==l.length)}const S={withArgs:function(){const n=y(arguments),l=m(this.matchingFakes(n,!0));if(l)return l;const e=this,t=this.instantiateFake();return t.matchingArguments=n,t.parent=this,g(this.fakes,t),t.withArgs=function(){return e.withArgs.apply(e,arguments)},p(e.args,(function(n,l){b(t,n)&&(c.incrementCallCount(t),g(t.thisValues,e.thisValues[l]),g(t.args,n),g(t.returnValues,e.returnValues[l]),g(t.exceptions,e.exceptions[l]),g(t.callIds,e.callIds[l]))})),c.createCallProperties(t),t},matchingFakes:function(n,l){return v.call(this.fakes,(function(e){return b(e,n,l)}))}},C=c.delegateToCalls;function D(n){let l,e=n;"function"!=typeof e?e=function(){}:l=o(e);const t=u(e,e);return r.nonEnum(t,S),r.nonEnum(t,{displayName:l||"spy",fakes:[],instantiateFake:D,id:"spy#"+w++}),t}function E(n,l,e){if(a(n))throw new TypeError("ES Modules cannot be spied");if(!l&&"function"==typeof n)return D(n);if(!l&&"object"==typeof n)return d(E,n);if(!n&&!l)return D((function(){}));if(!e)return h(n,l,D(n[l]));const t={},u=i(n,l);return p(e,(function(n){t[n]=D(u[n])})),h(n,l,t)}C(S,"callArg",!1,"callArgWith",!0,(function(){throw new Error(`${this.toString()} cannot call arg since it was not yet invoked.`)})),S.callArgWith=S.callArg,C(S,"callArgOn",!1,"callArgOnWith",!0,(function(){throw new Error(`${this.toString()} cannot call arg since it was not yet invoked.`)})),S.callArgOnWith=S.callArgOn,C(S,"throwArg",!1,"throwArg",!1,(function(){throw new Error(`${this.toString()} cannot throw arg since it was not yet invoked.`)})),C(S,"yield",!1,"yield",!0,(function(){throw new Error(`${this.toString()} cannot yield since it was not yet invoked.`)})),S.invokeCallback=S.yield,C(S,"yieldOn",!1,"yieldOn",!0,(function(){throw new Error(`${this.toString()} cannot yield since it was not yet invoked.`)})),C(S,"yieldTo",!1,"yieldTo",!0,(function(n){throw new Error(`${this.toString()} cannot yield to '${f(n)}' since it was not yet invoked.`)})),C(S,"yieldToOn",!1,"yieldToOn",!0,(function(n){throw new Error(`${this.toString()} cannot yield to '${f(n)}' since it was not yet invoked.`)})),r(E,S),n.exports=E},7157:(n,l,e)=>{"use strict";const t=e(8953).prototypes.array,u=e(9567),r=e(4022),o=e(8909),i=e(8953).functionName,s=e(8953).prototypes.object.hasOwnProperty,a=e(9035),c=e(2915),d=e(4942),h=e(3040),f=e(6456),p=e(7632),m=e(5102),g=e(2905),y=e(8953).valueToString,v=e(5703),w=t.forEach,b=t.pop,S=t.slice,C=t.sort;let D=0;function E(n){let l;function e(){const n=S(arguments),e=l.matchingFakes(n);return k(b(C(e,(function(n,l){return n.matchingArguments.length-l.matchingArguments.length})))||l).invoke(this,arguments)}l=o(e,n||e),d.nonEnum(l,c),d.nonEnum(l,_);const t=n?i(n):null;return d.nonEnum(l,{fakes:[],instantiateFake:E,displayName:t||"stub",defaultBehavior:null,behaviors:[],id:"stub#"+D++}),p.set(l,"stub"),l}function _(n,l){if(arguments.length>2)throw new TypeError("stub(obj, 'meth', fn) has been removed, see documentation");if(f(n))throw new TypeError("ES Modules cannot be stubbed");if(g.apply(null,arguments),a(n,l))throw new TypeError(`Cannot stub non-existent property ${y(l)}`);const e=h(n,l);!function(n,l){if(n&&l){if(n.isOwn&&!n.configurable&&!n.writable)throw new TypeError(`Descriptor for property ${l} is non-configurable and non-writable`);if((n.get||n.set)&&!n.configurable)throw new TypeError(`Descriptor for accessor property ${l} is non-configurable`);if(function(n){return!(n.value||n.writable||n.set||n.get)}(n)&&!n.writable)throw new TypeError(`Descriptor for data property ${l} is non-writable`)}}(e,l);const t="object"==typeof n||"function"==typeof n,u=void 0===l&&t,r=!n&&void 0===l,o=t&&void 0!==l&&(void 0===e||"function"!=typeof e.value);if(u)return v(_,n);if(r)return E();const i=E("function"==typeof e.value?e.value:null);return d.nonEnum(i,{rootObj:n,propName:l,shadowsPropOnPrototype:!e.isOwn,restore:function(){void 0!==e&&e.isOwn?Object.defineProperty(n,l,e):delete n[l]}}),o?i:m(n,l,i)}function k(n){const l=n.behaviors[n.callCount-1];return l&&l.isPresent()?l:function(n){return n.defaultBehavior||function(n){return n.parent&&k(n.parent)}(n)||u.create(n)}(n)}const x={resetBehavior:function(){this.defaultBehavior=null,this.behaviors=[],delete this.returnValue,delete this.returnArgAt,delete this.throwArgAt,delete this.resolveArgAt,delete this.fakeFn,this.returnThis=!1,this.resolveThis=!1,w(this.fakes,(function(n){n.resetBehavior()}))},reset:function(){this.resetHistory(),this.resetBehavior()},onCall:function(n){return this.behaviors[n]||(this.behaviors[n]=u.create(this)),this.behaviors[n]},onFirstCall:function(){return this.onCall(0)},onSecondCall:function(){return this.onCall(1)},onThirdCall:function(){return this.onCall(2)},withArgs:function(){const n=c.withArgs.apply(this,arguments);return this.defaultBehavior&&this.defaultBehavior.promiseLibrary&&(n.defaultBehavior=n.defaultBehavior||u.create(n),n.defaultBehavior.promiseLibrary=this.defaultBehavior.promiseLibrary),n}};w(Object.keys(u),(function(n){s(u,n)&&!s(x,n)&&"create"!==n&&"invoke"!==n&&(x[n]=u.createBehavior(n))})),w(Object.keys(r),(function(n){s(r,n)&&!s(x,n)&&u.addBehavior(_,n,r[n])})),d(_,x),n.exports=_},2905:(n,l,e)=>{"use strict";const t=e(8953).valueToString;n.exports=function(n,l){if(l&&!n){const e=null===n?"null":"undefined";throw new Error(`Trying to stub property '${t(l)}' of ${e}`)}}},5836:n=>{"use strict";n.exports={injectInto:null,properties:["spy","stub","mock","clock","server","requests","fake","define","replace","replaceSetter","replaceGetter","createStubInstance"],useFakeTimers:!0,useFakeServer:!0}},8843:(n,l,e)=>{"use strict";const t=e(8953).prototypes.array.reduce;n.exports=function(n){return t(Object.keys(n),(function(l,e){return e.match(/^(callsArg|yields)/)&&!e.match(/Async/)&&(l[`${e}Async`]=function(){const l=n[e].apply(this,arguments);return this.callbackAsync=!0,l}),l}),{})}},4942:(n,l,e)=>{"use strict";const t=e(8953).prototypes.array,u=e(8953).prototypes.object.hasOwnProperty,r=t.join,o=t.push,i=function(){const n={constructor:function(){return"0"},toString:function(){return"1"},valueOf:function(){return"2"},toLocaleString:function(){return"3"},prototype:function(){return"4"},isPrototypeOf:function(){return"5"},propertyIsEnumerable:function(){return"6"},hasOwnProperty:function(){return"7"},length:function(){return"8"},unique:function(){return"9"}},l=[];for(const e in n)u(n,e)&&o(l,n[e]());return"0123456789"!==r(l,"")}();function s(n,l,e){let t,r,o;for(r=0;r<l.length;r++){for(o in t=l[r],t)u(t,o)&&e(n,t,o);i&&u(t,"toString")&&t.toString!==n.toString&&(n.toString=t.toString)}return n}n.exports=function(n,...l){return s(n,l,(function(n,l,e){const t=Object.getOwnPropertyDescriptor(n,e),r=Object.getOwnPropertyDescriptor(l,e);if("name"===e&&!t.writable)return;const o={configurable:r.configurable,enumerable:r.enumerable};u(r,"writable")?(o.writable=r.writable,o.value=r.value):(r.get&&(o.get=r.get.bind(n)),r.set&&(o.set=r.set.bind(n))),Object.defineProperty(n,e,o)}))},n.exports.nonEnum=function(n,...l){return s(n,l,(function(n,l,e){Object.defineProperty(n,e,{value:l[e],enumerable:!1,configurable:!0,writable:!0})}))}},2150:n=>{"use strict";n.exports=function(){let n,l,e;if(this.getCall&&this.callCount)for(n=this.callCount;n--;)for(l in e=this.getCall(n).thisValue,e)try{if(e[l]===this)return l}catch(n){}return this.displayName||"sinon fake"}},3e3:n=>{"use strict";function l(n){setTimeout(n,0)}n.exports=function(n,e){return"object"==typeof n&&"function"==typeof n.nextTick?n.nextTick:"function"==typeof e?e:l}},3040:n=>{"use strict";n.exports=function(n,l){let e,t=n;const u=Boolean(n&&Object.getOwnPropertyDescriptor(n,l));for(;t&&!(e=Object.getOwnPropertyDescriptor(t,l));)t=Object.getPrototypeOf(t);return e&&(e.isOwn=u),e}},6456:n=>{"use strict";n.exports=function(n){return n&&"undefined"!=typeof Symbol&&"Module"===n[Symbol.toStringTag]&&Object.isSealed(n)}},9035:n=>{"use strict";n.exports=function(n,l){return Boolean(n&&void 0!==l&&!(l in n))}},2098:(n,l,e)=>{"use strict";const t=e(3040);n.exports=function(n,l){const e=t(n,l);return!e||e.configurable}},9600:n=>{"use strict";n.exports=function(n){return"function"==typeof n&&"function"==typeof n.restore&&n.restore.sinon}},7109:(n,l,e)=>{"use strict";const t=e(8953).global,u=e(3e3);n.exports=u(t.process,t.setImmediate)},7632:n=>{"use strict";const l=Symbol("SinonType");n.exports={set(n,e){Object.defineProperty(n,l,{value:e,configurable:!1,enumerable:!1})},get:n=>n&&n[l]}},3164:n=>{"use strict";const l=[null,"once","twice","thrice"];n.exports=function(n){return l[n]||`${n||0} times`}},9601:n=>{"use strict";const l=Array.prototype.forEach;n.exports=function n(e,t){void 0!==e&&(Array.isArray(t)?l.call(t,n.bind(null,e)):"function"==typeof t.usingPromise&&t.usingPromise(e))}},5703:(n,l,e)=>{"use strict";const t=e(8953).functionName,u=e(3040),r=e(539);n.exports=function(n,l,e){let o=!1;const i=t(n);if(!l)throw new Error(`Trying to ${i} object but received ${String(l)}`);if(r(l,(function(t,r){r!==Object.prototype&&"constructor"!==t&&"function"==typeof u(r,t).value&&(e?e(l,t)&&(o=!0,n(l,t)):(o=!0,n(l,t)))})),!o)throw new Error("Found no methods on object to which we could apply mutations");return l}},539:(n,l,e)=>{"use strict";const t=e(8953).prototypes.array.forEach;function u(n,l,e,r,o){let i;const s=Object.getPrototypeOf(n);if("function"==typeof Object.getOwnPropertyNames)t(Object.getOwnPropertyNames(n),(function(t){if(!0!==o[t]){o[t]=!0;const u="function"==typeof Object.getOwnPropertyDescriptor(n,t).get?r:n;l.call(e,t,u)}})),s&&u(s,l,e,r,o);else for(i in n)l.call(e,n[i],i,n)}n.exports=function(n,l,e){return u(n,l,e,n,{})}},5102:(n,l,e)=>{"use strict";const t=()=>{},u=e(3040),r=e(4942),o=e(7632),i=e(8953).prototypes.object.hasOwnProperty,s=e(8953).valueToString,a=e(8953).prototypes.array.push;function c(n,l){for(const e in l)i(n,e)||(n[e]=l[e])}function d(n,l,e){const t=["get","set"],r=u(n,l);for(let n=0;n<t.length;n++)if(r[t[n]]&&r[t[n]].name===e.name)return t[n];return null}const h="keys"in Object;n.exports=function(n,l,e){if(!n)throw new TypeError("Should wrap property of object");if("function"!=typeof e&&"object"!=typeof e)throw new TypeError("Method wrapper should be a function or a property descriptor");function f(n){let e;if("function"==typeof(t=n)||Boolean(t&&t.constructor&&t.call&&t.apply)){if(n.restore&&n.restore.sinon)e=new TypeError(`Attempted to wrap ${s(l)} which is already wrapped`);else if(n.calledBefore){const t=n.returns?"stubbed":"spied on";e=new TypeError(`Attempted to wrap ${s(l)} which is already ${t}`)}}else e=new TypeError(`Attempted to wrap ${typeof n} property ${s(l)} as function`);var t;if(e)throw n&&n.stackTraceError&&(e.stack+=`\n--------------\n${n.stackTraceError.stack}`),e}let p,m,g,y,v,w;const b=[];function S(){m=n[l],f(m),n[l]=e,e.displayName=l}const C=n.hasOwnProperty?n.hasOwnProperty(l):i(n,l);if(h){const t="function"==typeof e?{value:e}:e;if(y=u(n,l),y?y.restore&&y.restore.sinon&&(p=new TypeError(`Attempted to wrap ${l} which is already wrapped`)):p=new TypeError(`Attempted to wrap ${typeof m} property ${l} as function`),p)throw y&&y.stackTraceError&&(p.stack+=`\n--------------\n${y.stackTraceError.stack}`),p;const r=Object.keys(t);for(g=0;g<r.length;g++)m=y[r[g]],f(m),a(b,m);for(c(t,y),g=0;g<r.length;g++)c(t[r[g]],y[r[g]]);C||(t.configurable=!0),Object.defineProperty(n,l,t),"function"==typeof e&&n[l]!==e&&(delete n[l],S())}else S();function D(){let e;if(w=d(n,l,this.wrappedMethod),w){if(C)h&&(e=u(n,l),e[w]=y[w],Object.defineProperty(n,l,e));else try{delete n[l][w]}catch(n){}h?(e=u(n,l),e&&e.value===v&&(n[l][w]=this.wrappedMethod)):n[l][w]===v&&(n[l][w]=this.wrappedMethod)}else{if(C)h&&Object.defineProperty(n,l,y);else try{delete n[l]}catch(n){}h?(e=u(n,l),e&&e.value===v&&(n[l]=this.wrappedMethod)):n[l]===v&&(n[l]=this.wrappedMethod)}"stub-instance"===o.get(n)&&(n[l]=t)}return function(){for(g=0;g<b.length;g++)w=d(n,l,b[g]),v=w?e[w]:e,r.nonEnum(v,{displayName:l,wrappedMethod:b[g],stackTraceError:new Error("Stack Trace for original"),restore:D}),v.restore.sinon=!0,h||c(v,m)}(),e}},6220:(n,l,e)=>{"use strict";const t=e(4942),u=e(7073),r=e(8953).global;function o(n,l){let e=u;null!==l&&"object"==typeof l&&(e=u.withGlobal(l));const t=e.install(n);return t.restore=t.uninstall,t}function i(n,l){const e=r[l];void 0!==e&&(n[l]=e)}l.useFakeTimers=function(n){const l=("number"==typeof n||n instanceof Date)&&1===arguments.length,e=null!==n&&"object"==typeof n&&1===arguments.length;if(void 0===n)return o({now:0});if(l)return o({now:n});if(e){const l=t.nonEnum({},n),e=l.global;return delete l.global,o(l,e)}throw new TypeError("useFakeTimers expected epoch or config object. See https://github.com/sinonjs/sinon")},l.clock={create:function(n){return u.createClock(n)}};const s={setTimeout,clearTimeout,setInterval,clearInterval,Date};i(s,"setImmediate"),i(s,"clearImmediate"),l.timers=s},621:(n,l,e)=>{"use strict";function t(n,l){return l?l.aborted?Promise.resolve(void 0):new Promise((e=>{const t=u(n,(n=>{l.removeEventListener("abort",r),e(n)})),r=()=>{t.dispose(),l.removeEventListener("abort",r),e(void 0)};l.addEventListener("abort",r)})):new Promise((l=>u(n,l)))}e.r(l),e.d(l,{EventEmitter:()=>r,once:()=>u,toPromise:()=>t});const u=(n,l)=>{const e=n((n=>{l(n),e.dispose()}));return e};class r{constructor(){this.event=(n,l,e)=>{const t=this.add(l?n.bind(l):n);return e?.push(t),t}}get size(){return this.listeners?"function"==typeof this.listeners?1:this.listeners.length:0}fire(n){if(this.listeners)if("function"==typeof this.listeners)this.listeners(n);else for(const l of this.listeners)l(n)}dispose(){this.listeners=void 0}add(n){return this.listeners?"function"==typeof this.listeners?this.listeners=[this.listeners,n]:this.listeners.push(n):this.listeners=n,{dispose:()=>this.rm(n)}}rm(n){if(!this.listeners)return;if("function"==typeof this.listeners)return void(this.listeners===n&&(this.listeners=void 0));const l=this.listeners.indexOf(n);-1!==l&&(2===this.listeners.length?this.listeners=0===l?this.listeners[1]:this.listeners[0]:this.listeners=this.listeners.slice(0,l).concat(this.listeners.slice(l+1)))}}},3986:(n,l,e)=>{"use strict";e.r(l),e.d(l,{DataViewIndexOutOfBoundsError:()=>U,DecodeError:()=>b,Decoder:()=>z,EXT_TIMESTAMP:()=>S,Encoder:()=>O,ExtData:()=>v,ExtensionCodec:()=>I,decode:()=>G,decodeArrayStream:()=>en,decodeAsync:()=>ln,decodeMulti:()=>K,decodeMultiStream:()=>tn,decodeStream:()=>un,decodeTimestampExtension:()=>T,decodeTimestampToTimeSpec:()=>x,encode:()=>F,encodeDateToTimeSpec:()=>_,encodeTimeSpecToTimestamp:()=>E,encodeTimestampExtension:()=>k});var t,u,r,o=4294967295;function i(n,l,e){var t=Math.floor(e/4294967296),u=e;n.setUint32(l,t),n.setUint32(l+4,u)}function s(n,l){return 4294967296*n.getInt32(l)+n.getUint32(l+4)}var a=("undefined"==typeof process||"never"!==(null===(t=null===process||void 0===process?void 0:process.env)||void 0===t?void 0:t.TEXT_ENCODING))&&"undefined"!=typeof TextEncoder&&"undefined"!=typeof TextDecoder;function c(n){for(var l=n.length,e=0,t=0;t<l;){var u=n.charCodeAt(t++);if(4294967168&u)if(4294965248&u){if(u>=55296&&u<=56319&&t<l){var r=n.charCodeAt(t);56320==(64512&r)&&(++t,u=((1023&u)<<10)+(1023&r)+65536)}e+=4294901760&u?4:3}else e+=2;else e++}return e}var d=a?new TextEncoder:void 0,h=a?"undefined"!=typeof process&&"force"!==(null===(u=null===process||void 0===process?void 0:process.env)||void 0===u?void 0:u.TEXT_ENCODING)?200:0:o,f=(null==d?void 0:d.encodeInto)?function(n,l,e){d.encodeInto(n,l.subarray(e))}:function(n,l,e){l.set(d.encode(n),e)};function p(n,l,e){for(var t=l,u=t+e,r=[],o="";t<u;){var i=n[t++];if(128&i)if(192==(224&i)){var s=63&n[t++];r.push((31&i)<<6|s)}else if(224==(240&i)){s=63&n[t++];var a=63&n[t++];r.push((31&i)<<12|s<<6|a)}else if(240==(248&i)){var c=(7&i)<<18|(s=63&n[t++])<<12|(a=63&n[t++])<<6|63&n[t++];c>65535&&(c-=65536,r.push(c>>>10&1023|55296),c=56320|1023&c),r.push(c)}else r.push(i);else r.push(i);r.length>=4096&&(o+=String.fromCharCode.apply(String,r),r.length=0)}return r.length>0&&(o+=String.fromCharCode.apply(String,r)),o}var m,g=a?new TextDecoder:null,y=a?"undefined"!=typeof process&&"force"!==(null===(r=null===process||void 0===process?void 0:process.env)||void 0===r?void 0:r.TEXT_DECODER)?200:0:o,v=function(n,l){this.type=n,this.data=l},w=(m=function(n,l){return m=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,l){n.__proto__=l}||function(n,l){for(var e in l)Object.prototype.hasOwnProperty.call(l,e)&&(n[e]=l[e])},m(n,l)},function(n,l){if("function"!=typeof l&&null!==l)throw new TypeError("Class extends value "+String(l)+" is not a constructor or null");function e(){this.constructor=n}m(n,l),n.prototype=null===l?Object.create(l):(e.prototype=l.prototype,new e)}),b=function(n){function l(e){var t=n.call(this,e)||this,u=Object.create(l.prototype);return Object.setPrototypeOf(t,u),Object.defineProperty(t,"name",{configurable:!0,enumerable:!1,value:l.name}),t}return w(l,n),l}(Error),S=-1,C=4294967295,D=17179869183;function E(n){var l,e=n.sec,t=n.nsec;if(e>=0&&t>=0&&e<=D){if(0===t&&e<=C){var u=new Uint8Array(4);return(l=new DataView(u.buffer)).setUint32(0,e),u}var r=e/4294967296,o=4294967295&e;return u=new Uint8Array(8),(l=new DataView(u.buffer)).setUint32(0,t<<2|3&r),l.setUint32(4,o),u}return u=new Uint8Array(12),(l=new DataView(u.buffer)).setUint32(0,t),i(l,4,e),u}function _(n){var l=n.getTime(),e=Math.floor(l/1e3),t=1e6*(l-1e3*e),u=Math.floor(t/1e9);return{sec:e+u,nsec:t-1e9*u}}function k(n){return n instanceof Date?E(_(n)):null}function x(n){var l=new DataView(n.buffer,n.byteOffset,n.byteLength);switch(n.byteLength){case 4:return{sec:l.getUint32(0),nsec:0};case 8:var e=l.getUint32(0);return{sec:4294967296*(3&e)+l.getUint32(4),nsec:e>>>2};case 12:return{sec:s(l,4),nsec:l.getUint32(0)};default:throw new b("Unrecognized data size for timestamp (expected 4, 8, or 12): ".concat(n.length))}}function T(n){var l=x(n);return new Date(1e3*l.sec+l.nsec/1e6)}var P={type:S,encode:k,decode:T},I=function(){function n(){this.builtInEncoders=[],this.builtInDecoders=[],this.encoders=[],this.decoders=[],this.register(P)}return n.prototype.register=function(n){var l=n.type,e=n.encode,t=n.decode;if(l>=0)this.encoders[l]=e,this.decoders[l]=t;else{var u=1+l;this.builtInEncoders[u]=e,this.builtInDecoders[u]=t}},n.prototype.tryToEncode=function(n,l){for(var e=0;e<this.builtInEncoders.length;e++)if(null!=(t=this.builtInEncoders[e])&&null!=(u=t(n,l)))return new v(-1-e,u);for(e=0;e<this.encoders.length;e++){var t,u;if(null!=(t=this.encoders[e])&&null!=(u=t(n,l)))return new v(e,u)}return n instanceof v?n:null},n.prototype.decode=function(n,l,e){var t=l<0?this.builtInDecoders[-1-l]:this.decoders[l];return t?t(n,l,e):new v(l,n)},n.defaultCodec=new n,n}();function A(n){return n instanceof Uint8Array?n:ArrayBuffer.isView(n)?new Uint8Array(n.buffer,n.byteOffset,n.byteLength):n instanceof ArrayBuffer?new Uint8Array(n):Uint8Array.from(n)}var O=function(){function n(n,l,e,t,u,r,o,i){void 0===n&&(n=I.defaultCodec),void 0===l&&(l=void 0),void 0===e&&(e=100),void 0===t&&(t=2048),void 0===u&&(u=!1),void 0===r&&(r=!1),void 0===o&&(o=!1),void 0===i&&(i=!1),this.extensionCodec=n,this.context=l,this.maxDepth=e,this.initialBufferSize=t,this.sortKeys=u,this.forceFloat32=r,this.ignoreUndefined=o,this.forceIntegerToFloat=i,this.pos=0,this.view=new DataView(new ArrayBuffer(this.initialBufferSize)),this.bytes=new Uint8Array(this.view.buffer)}return n.prototype.reinitializeState=function(){this.pos=0},n.prototype.encodeSharedRef=function(n){return this.reinitializeState(),this.doEncode(n,1),this.bytes.subarray(0,this.pos)},n.prototype.encode=function(n){return this.reinitializeState(),this.doEncode(n,1),this.bytes.slice(0,this.pos)},n.prototype.doEncode=function(n,l){if(l>this.maxDepth)throw new Error("Too deep objects in depth ".concat(l));null==n?this.encodeNil():"boolean"==typeof n?this.encodeBoolean(n):"number"==typeof n?this.encodeNumber(n):"string"==typeof n?this.encodeString(n):this.encodeObject(n,l)},n.prototype.ensureBufferSizeToWrite=function(n){var l=this.pos+n;this.view.byteLength<l&&this.resizeBuffer(2*l)},n.prototype.resizeBuffer=function(n){var l=new ArrayBuffer(n),e=new Uint8Array(l),t=new DataView(l);e.set(this.bytes),this.view=t,this.bytes=e},n.prototype.encodeNil=function(){this.writeU8(192)},n.prototype.encodeBoolean=function(n){!1===n?this.writeU8(194):this.writeU8(195)},n.prototype.encodeNumber=function(n){Number.isSafeInteger(n)&&!this.forceIntegerToFloat?n>=0?n<128?this.writeU8(n):n<256?(this.writeU8(204),this.writeU8(n)):n<65536?(this.writeU8(205),this.writeU16(n)):n<4294967296?(this.writeU8(206),this.writeU32(n)):(this.writeU8(207),this.writeU64(n)):n>=-32?this.writeU8(224|n+32):n>=-128?(this.writeU8(208),this.writeI8(n)):n>=-32768?(this.writeU8(209),this.writeI16(n)):n>=-2147483648?(this.writeU8(210),this.writeI32(n)):(this.writeU8(211),this.writeI64(n)):this.forceFloat32?(this.writeU8(202),this.writeF32(n)):(this.writeU8(203),this.writeF64(n))},n.prototype.writeStringHeader=function(n){if(n<32)this.writeU8(160+n);else if(n<256)this.writeU8(217),this.writeU8(n);else if(n<65536)this.writeU8(218),this.writeU16(n);else{if(!(n<4294967296))throw new Error("Too long string: ".concat(n," bytes in UTF-8"));this.writeU8(219),this.writeU32(n)}},n.prototype.encodeString=function(n){if(n.length>h){var l=c(n);this.ensureBufferSizeToWrite(5+l),this.writeStringHeader(l),f(n,this.bytes,this.pos),this.pos+=l}else l=c(n),this.ensureBufferSizeToWrite(5+l),this.writeStringHeader(l),function(n,l,e){for(var t=n.length,u=e,r=0;r<t;){var o=n.charCodeAt(r++);if(4294967168&o){if(4294965248&o){if(o>=55296&&o<=56319&&r<t){var i=n.charCodeAt(r);56320==(64512&i)&&(++r,o=((1023&o)<<10)+(1023&i)+65536)}4294901760&o?(l[u++]=o>>18&7|240,l[u++]=o>>12&63|128,l[u++]=o>>6&63|128):(l[u++]=o>>12&15|224,l[u++]=o>>6&63|128)}else l[u++]=o>>6&31|192;l[u++]=63&o|128}else l[u++]=o}}(n,this.bytes,this.pos),this.pos+=l},n.prototype.encodeObject=function(n,l){var e=this.extensionCodec.tryToEncode(n,this.context);if(null!=e)this.encodeExtension(e);else if(Array.isArray(n))this.encodeArray(n,l);else if(ArrayBuffer.isView(n))this.encodeBinary(n);else{if("object"!=typeof n)throw new Error("Unrecognized object: ".concat(Object.prototype.toString.apply(n)));this.encodeMap(n,l)}},n.prototype.encodeBinary=function(n){var l=n.byteLength;if(l<256)this.writeU8(196),this.writeU8(l);else if(l<65536)this.writeU8(197),this.writeU16(l);else{if(!(l<4294967296))throw new Error("Too large binary: ".concat(l));this.writeU8(198),this.writeU32(l)}var e=A(n);this.writeU8a(e)},n.prototype.encodeArray=function(n,l){var e=n.length;if(e<16)this.writeU8(144+e);else if(e<65536)this.writeU8(220),this.writeU16(e);else{if(!(e<4294967296))throw new Error("Too large array: ".concat(e));this.writeU8(221),this.writeU32(e)}for(var t=0,u=n;t<u.length;t++){var r=u[t];this.doEncode(r,l+1)}},n.prototype.countWithoutUndefined=function(n,l){for(var e=0,t=0,u=l;t<u.length;t++)void 0!==n[u[t]]&&e++;return e},n.prototype.encodeMap=function(n,l){var e=Object.keys(n);this.sortKeys&&e.sort();var t=this.ignoreUndefined?this.countWithoutUndefined(n,e):e.length;if(t<16)this.writeU8(128+t);else if(t<65536)this.writeU8(222),this.writeU16(t);else{if(!(t<4294967296))throw new Error("Too large map object: ".concat(t));this.writeU8(223),this.writeU32(t)}for(var u=0,r=e;u<r.length;u++){var o=r[u],i=n[o];this.ignoreUndefined&&void 0===i||(this.encodeString(o),this.doEncode(i,l+1))}},n.prototype.encodeExtension=function(n){var l=n.data.length;if(1===l)this.writeU8(212);else if(2===l)this.writeU8(213);else if(4===l)this.writeU8(214);else if(8===l)this.writeU8(215);else if(16===l)this.writeU8(216);else if(l<256)this.writeU8(199),this.writeU8(l);else if(l<65536)this.writeU8(200),this.writeU16(l);else{if(!(l<4294967296))throw new Error("Too large extension object: ".concat(l));this.writeU8(201),this.writeU32(l)}this.writeI8(n.type),this.writeU8a(n.data)},n.prototype.writeU8=function(n){this.ensureBufferSizeToWrite(1),this.view.setUint8(this.pos,n),this.pos++},n.prototype.writeU8a=function(n){var l=n.length;this.ensureBufferSizeToWrite(l),this.bytes.set(n,this.pos),this.pos+=l},n.prototype.writeI8=function(n){this.ensureBufferSizeToWrite(1),this.view.setInt8(this.pos,n),this.pos++},n.prototype.writeU16=function(n){this.ensureBufferSizeToWrite(2),this.view.setUint16(this.pos,n),this.pos+=2},n.prototype.writeI16=function(n){this.ensureBufferSizeToWrite(2),this.view.setInt16(this.pos,n),this.pos+=2},n.prototype.writeU32=function(n){this.ensureBufferSizeToWrite(4),this.view.setUint32(this.pos,n),this.pos+=4},n.prototype.writeI32=function(n){this.ensureBufferSizeToWrite(4),this.view.setInt32(this.pos,n),this.pos+=4},n.prototype.writeF32=function(n){this.ensureBufferSizeToWrite(4),this.view.setFloat32(this.pos,n),this.pos+=4},n.prototype.writeF64=function(n){this.ensureBufferSizeToWrite(8),this.view.setFloat64(this.pos,n),this.pos+=8},n.prototype.writeU64=function(n){this.ensureBufferSizeToWrite(8),function(n,l,e){var t=e/4294967296,u=e;n.setUint32(l,t),n.setUint32(l+4,u)}(this.view,this.pos,n),this.pos+=8},n.prototype.writeI64=function(n){this.ensureBufferSizeToWrite(8),i(this.view,this.pos,n),this.pos+=8},n}(),R={};function F(n,l){return void 0===l&&(l=R),new O(l.extensionCodec,l.context,l.maxDepth,l.initialBufferSize,l.sortKeys,l.forceFloat32,l.ignoreUndefined,l.forceIntegerToFloat).encodeSharedRef(n)}function L(n){return"".concat(n<0?"-":"","0x").concat(Math.abs(n).toString(16).padStart(2,"0"))}var $=function(){function n(n,l){void 0===n&&(n=16),void 0===l&&(l=16),this.maxKeyLength=n,this.maxLengthPerKey=l,this.hit=0,this.miss=0,this.caches=[];for(var e=0;e<this.maxKeyLength;e++)this.caches.push([])}return n.prototype.canBeCached=function(n){return n>0&&n<=this.maxKeyLength},n.prototype.find=function(n,l,e){n:for(var t=0,u=this.caches[e-1];t<u.length;t++){for(var r=u[t],o=r.bytes,i=0;i<e;i++)if(o[i]!==n[l+i])continue n;return r.str}return null},n.prototype.store=function(n,l){var e=this.caches[n.length-1],t={bytes:n,str:l};e.length>=this.maxLengthPerKey?e[Math.random()*e.length|0]=t:e.push(t)},n.prototype.decode=function(n,l,e){var t=this.find(n,l,e);if(null!=t)return this.hit++,t;this.miss++;var u=p(n,l,e),r=Uint8Array.prototype.slice.call(n,l,l+e);return this.store(r,u),u},n}(),j=function(n,l){var e,t,u,r,o={label:0,sent:function(){if(1&u[0])throw u[1];return u[1]},trys:[],ops:[]};return r={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function i(r){return function(i){return function(r){if(e)throw new TypeError("Generator is already executing.");for(;o;)try{if(e=1,t&&(u=2&r[0]?t.return:r[0]?t.throw||((u=t.return)&&u.call(t),0):t.next)&&!(u=u.call(t,r[1])).done)return u;switch(t=0,u&&(r=[2&r[0],u.value]),r[0]){case 0:case 1:u=r;break;case 4:return o.label++,{value:r[1],done:!1};case 5:o.label++,t=r[1],r=[0];continue;case 7:r=o.ops.pop(),o.trys.pop();continue;default:if(!((u=(u=o.trys).length>0&&u[u.length-1])||6!==r[0]&&2!==r[0])){o=0;continue}if(3===r[0]&&(!u||r[1]>u[0]&&r[1]<u[3])){o.label=r[1];break}if(6===r[0]&&o.label<u[1]){o.label=u[1],u=r;break}if(u&&o.label<u[2]){o.label=u[2],o.ops.push(r);break}u[2]&&o.ops.pop(),o.trys.pop();continue}r=l.call(n,o)}catch(n){r=[6,n],t=0}finally{e=u=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,i])}}},M=function(n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var l,e=n[Symbol.asyncIterator];return e?e.call(n):(n="function"==typeof __values?__values(n):n[Symbol.iterator](),l={},t("next"),t("throw"),t("return"),l[Symbol.asyncIterator]=function(){return this},l);function t(e){l[e]=n[e]&&function(l){return new Promise((function(t,u){!function(n,l,e,t){Promise.resolve(t).then((function(l){n({value:l,done:e})}),l)}(t,u,(l=n[e](l)).done,l.value)}))}}},N=function(n){return this instanceof N?(this.v=n,this):new N(n)},B=new DataView(new ArrayBuffer(0)),H=new Uint8Array(B.buffer),U=function(){try{B.getInt8(0)}catch(n){return n.constructor}throw new Error("never reached")}(),q=new U("Insufficient data"),W=new $,z=function(){function n(n,l,e,t,u,r,i,s){void 0===n&&(n=I.defaultCodec),void 0===l&&(l=void 0),void 0===e&&(e=o),void 0===t&&(t=o),void 0===u&&(u=o),void 0===r&&(r=o),void 0===i&&(i=o),void 0===s&&(s=W),this.extensionCodec=n,this.context=l,this.maxStrLength=e,this.maxBinLength=t,this.maxArrayLength=u,this.maxMapLength=r,this.maxExtLength=i,this.keyDecoder=s,this.totalPos=0,this.pos=0,this.view=B,this.bytes=H,this.headByte=-1,this.stack=[]}return n.prototype.reinitializeState=function(){this.totalPos=0,this.headByte=-1,this.stack.length=0},n.prototype.setBuffer=function(n){this.bytes=A(n),this.view=function(n){if(n instanceof ArrayBuffer)return new DataView(n);var l=A(n);return new DataView(l.buffer,l.byteOffset,l.byteLength)}(this.bytes),this.pos=0},n.prototype.appendBuffer=function(n){if(-1!==this.headByte||this.hasRemaining(1)){var l=this.bytes.subarray(this.pos),e=A(n),t=new Uint8Array(l.length+e.length);t.set(l),t.set(e,l.length),this.setBuffer(t)}else this.setBuffer(n)},n.prototype.hasRemaining=function(n){return this.view.byteLength-this.pos>=n},n.prototype.createExtraByteError=function(n){var l=this.view,e=this.pos;return new RangeError("Extra ".concat(l.byteLength-e," of ").concat(l.byteLength," byte(s) found at buffer[").concat(n,"]"))},n.prototype.decode=function(n){this.reinitializeState(),this.setBuffer(n);var l=this.doDecodeSync();if(this.hasRemaining(1))throw this.createExtraByteError(this.pos);return l},n.prototype.decodeMulti=function(n){return j(this,(function(l){switch(l.label){case 0:this.reinitializeState(),this.setBuffer(n),l.label=1;case 1:return this.hasRemaining(1)?[4,this.doDecodeSync()]:[3,3];case 2:return l.sent(),[3,1];case 3:return[2]}}))},n.prototype.decodeAsync=function(n){var l,e,t,u,r,o,i,s;return r=this,o=void 0,s=function(){var r,o,i,s,a,c,d,h;return j(this,(function(f){switch(f.label){case 0:r=!1,f.label=1;case 1:f.trys.push([1,6,7,12]),l=M(n),f.label=2;case 2:return[4,l.next()];case 3:if((e=f.sent()).done)return[3,5];if(i=e.value,r)throw this.createExtraByteError(this.totalPos);this.appendBuffer(i);try{o=this.doDecodeSync(),r=!0}catch(n){if(!(n instanceof U))throw n}this.totalPos+=this.pos,f.label=4;case 4:return[3,2];case 5:return[3,12];case 6:return s=f.sent(),t={error:s},[3,12];case 7:return f.trys.push([7,,10,11]),e&&!e.done&&(u=l.return)?[4,u.call(l)]:[3,9];case 8:f.sent(),f.label=9;case 9:return[3,11];case 10:if(t)throw t.error;return[7];case 11:return[7];case 12:if(r){if(this.hasRemaining(1))throw this.createExtraByteError(this.totalPos);return[2,o]}throw c=(a=this).headByte,d=a.pos,h=a.totalPos,new RangeError("Insufficient data in parsing ".concat(L(c)," at ").concat(h," (").concat(d," in the current buffer)"))}}))},new((i=void 0)||(i=Promise))((function(n,l){function e(n){try{u(s.next(n))}catch(n){l(n)}}function t(n){try{u(s.throw(n))}catch(n){l(n)}}function u(l){var u;l.done?n(l.value):(u=l.value,u instanceof i?u:new i((function(n){n(u)}))).then(e,t)}u((s=s.apply(r,o||[])).next())}))},n.prototype.decodeArrayStream=function(n){return this.decodeMultiAsync(n,!0)},n.prototype.decodeStream=function(n){return this.decodeMultiAsync(n,!1)},n.prototype.decodeMultiAsync=function(n,l){return function(n,l,e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,u=e.apply(n,l||[]),r=[];return t={},o("next"),o("throw"),o("return"),t[Symbol.asyncIterator]=function(){return this},t;function o(n){u[n]&&(t[n]=function(l){return new Promise((function(e,t){r.push([n,l,e,t])>1||i(n,l)}))})}function i(n,l){try{(e=u[n](l)).value instanceof N?Promise.resolve(e.value.v).then(s,a):c(r[0][2],e)}catch(n){c(r[0][3],n)}var e}function s(n){i("next",n)}function a(n){i("throw",n)}function c(n,l){n(l),r.shift(),r.length&&i(r[0][0],r[0][1])}}(this,arguments,(function(){var e,t,u,r,o,i,s,a,c;return j(this,(function(d){switch(d.label){case 0:e=l,t=-1,d.label=1;case 1:d.trys.push([1,13,14,19]),u=M(n),d.label=2;case 2:return[4,N(u.next())];case 3:if((r=d.sent()).done)return[3,12];if(o=r.value,l&&0===t)throw this.createExtraByteError(this.totalPos);this.appendBuffer(o),e&&(t=this.readArraySize(),e=!1,this.complete()),d.label=4;case 4:d.trys.push([4,9,,10]),d.label=5;case 5:return[4,N(this.doDecodeSync())];case 6:return[4,d.sent()];case 7:return d.sent(),0==--t?[3,8]:[3,5];case 8:return[3,10];case 9:if(!((i=d.sent())instanceof U))throw i;return[3,10];case 10:this.totalPos+=this.pos,d.label=11;case 11:return[3,2];case 12:return[3,19];case 13:return s=d.sent(),a={error:s},[3,19];case 14:return d.trys.push([14,,17,18]),r&&!r.done&&(c=u.return)?[4,N(c.call(u))]:[3,16];case 15:d.sent(),d.label=16;case 16:return[3,18];case 17:if(a)throw a.error;return[7];case 18:return[7];case 19:return[2]}}))}))},n.prototype.doDecodeSync=function(){n:for(;;){var n=this.readHeadByte(),l=void 0;if(n>=224)l=n-256;else if(n<192)if(n<128)l=n;else if(n<144){if(0!=(t=n-128)){this.pushMapState(t),this.complete();continue n}l={}}else if(n<160){if(0!=(t=n-144)){this.pushArrayState(t),this.complete();continue n}l=[]}else{var e=n-160;l=this.decodeUtf8String(e,0)}else if(192===n)l=null;else if(194===n)l=!1;else if(195===n)l=!0;else if(202===n)l=this.readF32();else if(203===n)l=this.readF64();else if(204===n)l=this.readU8();else if(205===n)l=this.readU16();else if(206===n)l=this.readU32();else if(207===n)l=this.readU64();else if(208===n)l=this.readI8();else if(209===n)l=this.readI16();else if(210===n)l=this.readI32();else if(211===n)l=this.readI64();else if(217===n)e=this.lookU8(),l=this.decodeUtf8String(e,1);else if(218===n)e=this.lookU16(),l=this.decodeUtf8String(e,2);else if(219===n)e=this.lookU32(),l=this.decodeUtf8String(e,4);else if(220===n){if(0!==(t=this.readU16())){this.pushArrayState(t),this.complete();continue n}l=[]}else if(221===n){if(0!==(t=this.readU32())){this.pushArrayState(t),this.complete();continue n}l=[]}else if(222===n){if(0!==(t=this.readU16())){this.pushMapState(t),this.complete();continue n}l={}}else if(223===n){if(0!==(t=this.readU32())){this.pushMapState(t),this.complete();continue n}l={}}else if(196===n){var t=this.lookU8();l=this.decodeBinary(t,1)}else if(197===n)t=this.lookU16(),l=this.decodeBinary(t,2);else if(198===n)t=this.lookU32(),l=this.decodeBinary(t,4);else if(212===n)l=this.decodeExtension(1,0);else if(213===n)l=this.decodeExtension(2,0);else if(214===n)l=this.decodeExtension(4,0);else if(215===n)l=this.decodeExtension(8,0);else if(216===n)l=this.decodeExtension(16,0);else if(199===n)t=this.lookU8(),l=this.decodeExtension(t,1);else if(200===n)t=this.lookU16(),l=this.decodeExtension(t,2);else{if(201!==n)throw new b("Unrecognized type byte: ".concat(L(n)));t=this.lookU32(),l=this.decodeExtension(t,4)}this.complete();for(var u=this.stack;u.length>0;){var r=u[u.length-1];if(0===r.type){if(r.array[r.position]=l,r.position++,r.position!==r.size)continue n;u.pop(),l=r.array}else{if(1===r.type){if(void 0,"string"!=(o=typeof l)&&"number"!==o)throw new b("The type of key must be string or number but "+typeof l);if("__proto__"===l)throw new b("The key __proto__ is not allowed");r.key=l,r.type=2;continue n}if(r.map[r.key]=l,r.readCount++,r.readCount!==r.size){r.key=null,r.type=1;continue n}u.pop(),l=r.map}}return l}var o},n.prototype.readHeadByte=function(){return-1===this.headByte&&(this.headByte=this.readU8()),this.headByte},n.prototype.complete=function(){this.headByte=-1},n.prototype.readArraySize=function(){var n=this.readHeadByte();switch(n){case 220:return this.readU16();case 221:return this.readU32();default:if(n<160)return n-144;throw new b("Unrecognized array type byte: ".concat(L(n)))}},n.prototype.pushMapState=function(n){if(n>this.maxMapLength)throw new b("Max length exceeded: map length (".concat(n,") > maxMapLengthLength (").concat(this.maxMapLength,")"));this.stack.push({type:1,size:n,key:null,readCount:0,map:{}})},n.prototype.pushArrayState=function(n){if(n>this.maxArrayLength)throw new b("Max length exceeded: array length (".concat(n,") > maxArrayLength (").concat(this.maxArrayLength,")"));this.stack.push({type:0,size:n,array:new Array(n),position:0})},n.prototype.decodeUtf8String=function(n,l){var e;if(n>this.maxStrLength)throw new b("Max length exceeded: UTF-8 byte length (".concat(n,") > maxStrLength (").concat(this.maxStrLength,")"));if(this.bytes.byteLength<this.pos+l+n)throw q;var t,u=this.pos+l;return t=this.stateIsMapKey()&&(null===(e=this.keyDecoder)||void 0===e?void 0:e.canBeCached(n))?this.keyDecoder.decode(this.bytes,u,n):n>y?function(n,l,e){var t=n.subarray(l,l+e);return g.decode(t)}(this.bytes,u,n):p(this.bytes,u,n),this.pos+=l+n,t},n.prototype.stateIsMapKey=function(){return this.stack.length>0&&1===this.stack[this.stack.length-1].type},n.prototype.decodeBinary=function(n,l){if(n>this.maxBinLength)throw new b("Max length exceeded: bin length (".concat(n,") > maxBinLength (").concat(this.maxBinLength,")"));if(!this.hasRemaining(n+l))throw q;var e=this.pos+l,t=this.bytes.subarray(e,e+n);return this.pos+=l+n,t},n.prototype.decodeExtension=function(n,l){if(n>this.maxExtLength)throw new b("Max length exceeded: ext length (".concat(n,") > maxExtLength (").concat(this.maxExtLength,")"));var e=this.view.getInt8(this.pos+l),t=this.decodeBinary(n,l+1);return this.extensionCodec.decode(t,e,this.context)},n.prototype.lookU8=function(){return this.view.getUint8(this.pos)},n.prototype.lookU16=function(){return this.view.getUint16(this.pos)},n.prototype.lookU32=function(){return this.view.getUint32(this.pos)},n.prototype.readU8=function(){var n=this.view.getUint8(this.pos);return this.pos++,n},n.prototype.readI8=function(){var n=this.view.getInt8(this.pos);return this.pos++,n},n.prototype.readU16=function(){var n=this.view.getUint16(this.pos);return this.pos+=2,n},n.prototype.readI16=function(){var n=this.view.getInt16(this.pos);return this.pos+=2,n},n.prototype.readU32=function(){var n=this.view.getUint32(this.pos);return this.pos+=4,n},n.prototype.readI32=function(){var n=this.view.getInt32(this.pos);return this.pos+=4,n},n.prototype.readU64=function(){var n,l,e=(n=this.view,l=this.pos,4294967296*n.getUint32(l)+n.getUint32(l+4));return this.pos+=8,e},n.prototype.readI64=function(){var n=s(this.view,this.pos);return this.pos+=8,n},n.prototype.readF32=function(){var n=this.view.getFloat32(this.pos);return this.pos+=4,n},n.prototype.readF64=function(){var n=this.view.getFloat64(this.pos);return this.pos+=8,n},n}(),V={};function G(n,l){return void 0===l&&(l=V),new z(l.extensionCodec,l.context,l.maxStrLength,l.maxBinLength,l.maxArrayLength,l.maxMapLength,l.maxExtLength).decode(n)}function K(n,l){return void 0===l&&(l=V),new z(l.extensionCodec,l.context,l.maxStrLength,l.maxBinLength,l.maxArrayLength,l.maxMapLength,l.maxExtLength).decodeMulti(n)}var X=function(n,l){var e,t,u,r,o={label:0,sent:function(){if(1&u[0])throw u[1];return u[1]},trys:[],ops:[]};return r={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function i(r){return function(i){return function(r){if(e)throw new TypeError("Generator is already executing.");for(;o;)try{if(e=1,t&&(u=2&r[0]?t.return:r[0]?t.throw||((u=t.return)&&u.call(t),0):t.next)&&!(u=u.call(t,r[1])).done)return u;switch(t=0,u&&(r=[2&r[0],u.value]),r[0]){case 0:case 1:u=r;break;case 4:return o.label++,{value:r[1],done:!1};case 5:o.label++,t=r[1],r=[0];continue;case 7:r=o.ops.pop(),o.trys.pop();continue;default:if(!((u=(u=o.trys).length>0&&u[u.length-1])||6!==r[0]&&2!==r[0])){o=0;continue}if(3===r[0]&&(!u||r[1]>u[0]&&r[1]<u[3])){o.label=r[1];break}if(6===r[0]&&o.label<u[1]){o.label=u[1],u=r;break}if(u&&o.label<u[2]){o.label=u[2],o.ops.push(r);break}u[2]&&o.ops.pop(),o.trys.pop();continue}r=l.call(n,o)}catch(n){r=[6,n],t=0}finally{e=u=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,i])}}},J=function(n){return this instanceof J?(this.v=n,this):new J(n)},Z=function(n,l,e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,u=e.apply(n,l||[]),r=[];return t={},o("next"),o("throw"),o("return"),t[Symbol.asyncIterator]=function(){return this},t;function o(n){u[n]&&(t[n]=function(l){return new Promise((function(e,t){r.push([n,l,e,t])>1||i(n,l)}))})}function i(n,l){try{(e=u[n](l)).value instanceof J?Promise.resolve(e.value.v).then(s,a):c(r[0][2],e)}catch(n){c(r[0][3],n)}var e}function s(n){i("next",n)}function a(n){i("throw",n)}function c(n,l){n(l),r.shift(),r.length&&i(r[0][0],r[0][1])}};function Y(n){return null!=n[Symbol.asyncIterator]?n:function(n){return Z(this,arguments,(function(){var l,e,t,u;return X(this,(function(r){switch(r.label){case 0:l=n.getReader(),r.label=1;case 1:r.trys.push([1,,9,10]),r.label=2;case 2:return[4,J(l.read())];case 3:return e=r.sent(),t=e.done,u=e.value,t?[4,J(void 0)]:[3,5];case 4:return[2,r.sent()];case 5:return function(n){if(null==n)throw new Error("Assertion Failure: value must not be null nor undefined")}(u),[4,J(u)];case 6:return[4,r.sent()];case 7:return r.sent(),[3,2];case 8:return[3,10];case 9:return l.releaseLock(),[7];case 10:return[2]}}))}))}(n)}var Q=function(n,l,e,t){return new(e||(e=Promise))((function(u,r){function o(n){try{s(t.next(n))}catch(n){r(n)}}function i(n){try{s(t.throw(n))}catch(n){r(n)}}function s(n){var l;n.done?u(n.value):(l=n.value,l instanceof e?l:new e((function(n){n(l)}))).then(o,i)}s((t=t.apply(n,l||[])).next())}))},nn=function(n,l){var e,t,u,r,o={label:0,sent:function(){if(1&u[0])throw u[1];return u[1]},trys:[],ops:[]};return r={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function i(r){return function(i){return function(r){if(e)throw new TypeError("Generator is already executing.");for(;o;)try{if(e=1,t&&(u=2&r[0]?t.return:r[0]?t.throw||((u=t.return)&&u.call(t),0):t.next)&&!(u=u.call(t,r[1])).done)return u;switch(t=0,u&&(r=[2&r[0],u.value]),r[0]){case 0:case 1:u=r;break;case 4:return o.label++,{value:r[1],done:!1};case 5:o.label++,t=r[1],r=[0];continue;case 7:r=o.ops.pop(),o.trys.pop();continue;default:if(!((u=(u=o.trys).length>0&&u[u.length-1])||6!==r[0]&&2!==r[0])){o=0;continue}if(3===r[0]&&(!u||r[1]>u[0]&&r[1]<u[3])){o.label=r[1];break}if(6===r[0]&&o.label<u[1]){o.label=u[1],u=r;break}if(u&&o.label<u[2]){o.label=u[2],o.ops.push(r);break}u[2]&&o.ops.pop(),o.trys.pop();continue}r=l.call(n,o)}catch(n){r=[6,n],t=0}finally{e=u=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,i])}}};function ln(n,l){return void 0===l&&(l=V),Q(this,void 0,void 0,(function(){var e;return nn(this,(function(t){return e=Y(n),[2,new z(l.extensionCodec,l.context,l.maxStrLength,l.maxBinLength,l.maxArrayLength,l.maxMapLength,l.maxExtLength).decodeAsync(e)]}))}))}function en(n,l){void 0===l&&(l=V);var e=Y(n);return new z(l.extensionCodec,l.context,l.maxStrLength,l.maxBinLength,l.maxArrayLength,l.maxMapLength,l.maxExtLength).decodeArrayStream(e)}function tn(n,l){void 0===l&&(l=V);var e=Y(n);return new z(l.extensionCodec,l.context,l.maxStrLength,l.maxBinLength,l.maxArrayLength,l.maxMapLength,l.maxExtLength).decodeStream(e)}function un(n,l){return void 0===l&&(l=V),tn(n,l)}},7288:(n,l,e)=>{"use strict";e.d(l,{A:()=>u});var t=e(3720);const u=class extends t.A{#cl=0;#dl="";constructor(n,l,e={}){if(arguments.length<2)throw new TypeError(`Failed to construct 'File': 2 arguments required, but only ${arguments.length} present.`);super(n,e),null===e&&(e={});const t=void 0===e.lastModified?Date.now():Number(e.lastModified);Number.isNaN(t)||(this.#cl=t),this.#dl=String(l)}get name(){return this.#dl}get lastModified(){return this.#cl}get[Symbol.toStringTag](){return"File"}static[Symbol.hasInstance](n){return!!n&&n instanceof t.A&&/^(File)$/.test(n[Symbol.toStringTag])}}},9730:(n,l,e)=>{"use strict";e.d(l,{YQ:()=>i.A,ZH:()=>o.A,k4:()=>c,F8:()=>a,NX:()=>d,_M:()=>h});const t=require("node:fs"),u=require("node:path");var r=e(5157),o=e(7288),i=e(3720);const{stat:s}=t.promises,a=(n,l)=>f((0,t.statSync)(n),n,l),c=(n,l)=>s(n).then((e=>f(e,n,l))),d=(n,l)=>s(n).then((e=>p(e,n,l))),h=(n,l)=>p((0,t.statSync)(n),n,l),f=(n,l,e="")=>new i.A([new m({path:l,size:n.size,lastModified:n.mtimeMs,start:0})],{type:e}),p=(n,l,e="")=>new o.A([new m({path:l,size:n.size,lastModified:n.mtimeMs,start:0})],(0,u.basename)(l),{type:e,lastModified:n.mtimeMs});class m{#hl;#fl;constructor(n){this.#hl=n.path,this.#fl=n.start,this.size=n.size,this.lastModified=n.lastModified}slice(n,l){return new m({path:this.#hl,lastModified:this.lastModified,size:l-n,start:this.#fl+n})}async*stream(){const{mtimeMs:n}=await s(this.#hl);if(n>this.lastModified)throw new r("The requested file could not be read, typically due to permission problems that have occurred after a reference to a file was acquired.","NotReadableError");yield*(0,t.createReadStream)(this.#hl,{start:this.#fl,end:this.#fl+this.size-1})}get[Symbol.toStringTag](){return"Blob"}}},3720:(n,l,e)=>{"use strict";async function*t(n,l=!0){for(const e of n)if("stream"in e)yield*e.stream();else if(ArrayBuffer.isView(e))if(l){let n=e.byteOffset;const l=e.byteOffset+e.byteLength;for(;n!==l;){const t=Math.min(l-n,65536),u=e.buffer.slice(n,n+t);n+=u.byteLength,yield new Uint8Array(u)}}else yield e;else{let n=0,l=e;for(;n!==l.size;){const e=l.slice(n,Math.min(l.size,n+65536)),t=await e.arrayBuffer();n+=t.byteLength,yield new Uint8Array(t)}}}e.d(l,{A:()=>r}),e(3328);const u=class n{#v=[];#ln="";#N=0;#pl="transparent";constructor(l=[],e={}){if("object"!=typeof l||null===l)throw new TypeError("Failed to construct 'Blob': The provided value cannot be converted to a sequence.");if("function"!=typeof l[Symbol.iterator])throw new TypeError("Failed to construct 'Blob': The object must have a callable @@iterator property.");if("object"!=typeof e&&"function"!=typeof e)throw new TypeError("Failed to construct 'Blob': parameter 2 cannot convert to dictionary.");null===e&&(e={});const t=new TextEncoder;for(const e of l){let l;l=ArrayBuffer.isView(e)?new Uint8Array(e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength)):e instanceof ArrayBuffer?new Uint8Array(e.slice(0)):e instanceof n?e:t.encode(`${e}`),this.#N+=ArrayBuffer.isView(l)?l.byteLength:l.size,this.#v.push(l)}this.#pl=`${void 0===e.endings?"transparent":e.endings}`;const u=void 0===e.type?"":String(e.type);this.#ln=/^[\x20-\x7E]*$/.test(u)?u:""}get size(){return this.#N}get type(){return this.#ln}async text(){const n=new TextDecoder;let l="";for await(const e of t(this.#v,!1))l+=n.decode(e,{stream:!0});return l+=n.decode(),l}async arrayBuffer(){const n=new Uint8Array(this.size);let l=0;for await(const e of t(this.#v,!1))n.set(e,l),l+=e.length;return n.buffer}stream(){const n=t(this.#v,!0);return new globalThis.ReadableStream({type:"bytes",async pull(l){const e=await n.next();e.done?l.close():l.enqueue(e.value)},async cancel(){await n.return()}})}slice(l=0,e=this.size,t=""){const{size:u}=this;let r=l<0?Math.max(u+l,0):Math.min(l,u),o=e<0?Math.max(u+e,0):Math.min(e,u);const i=Math.max(o-r,0),s=this.#v,a=[];let c=0;for(const n of s){if(c>=i)break;const l=ArrayBuffer.isView(n)?n.byteLength:n.size;if(r&&l<=r)r-=l,o-=l;else{let e;ArrayBuffer.isView(n)?(e=n.subarray(r,Math.min(l,o)),c+=e.byteLength):(e=n.slice(r,Math.min(l,o)),c+=e.size),o-=l,a.push(e),r=0}}const d=new n([],{type:String(t).toLowerCase()});return d.#N=i,d.#v=a,d}get[Symbol.toStringTag](){return"Blob"}static[Symbol.hasInstance](n){return n&&"object"==typeof n&&"function"==typeof n.constructor&&("function"==typeof n.stream||"function"==typeof n.arrayBuffer)&&/^(Blob|File)$/.test(n[Symbol.toStringTag])}};Object.defineProperties(u.prototype,{size:{enumerable:!0},type:{enumerable:!0},slice:{enumerable:!0}});const r=u},8435:(n,l,e)=>{"use strict";e.d(l,{$n:()=>p,fS:()=>f});var t=e(3720),u=e(7288),{toStringTag:r,iterator:o,hasInstance:i}=Symbol,s=Math.random,a="append,set,get,getAll,delete,keys,values,entries,forEach,constructor".split(","),c=(n,l,e)=>(n+="",/^(Blob|File)$/.test(l&&l[r])?[(e=void 0!==e?e+"":"File"==l[r]?l.name:"blob",n),l.name!==e||"blob"==l[r]?new u.A([l],e,l):l]:[n,l+""]),d=(n,l)=>(l?n:n.replace(/\r?\n|\r/g,"\r\n")).replace(/\n/g,"%0A").replace(/\r/g,"%0D").replace(/"/g,"%22"),h=(n,l,e)=>{if(l.length<e)throw new TypeError(`Failed to execute '${n}' on 'FormData': ${e} arguments required, but only ${l.length} present.`)};const f=class{#ml=[];constructor(...n){if(n.length)throw new TypeError("Failed to construct 'FormData': parameter 1 is not of type 'HTMLFormElement'.")}get[r](){return"FormData"}[o](){return this.entries()}static[i](n){return n&&"object"==typeof n&&"FormData"===n[r]&&!a.some((l=>"function"!=typeof n[l]))}append(...n){h("append",arguments,2),this.#ml.push(c(...n))}delete(n){h("delete",arguments,1),n+="",this.#ml=this.#ml.filter((([l])=>l!==n))}get(n){h("get",arguments,1),n+="";for(var l=this.#ml,e=l.length,t=0;t<e;t++)if(l[t][0]===n)return l[t][1];return null}getAll(n,l){return h("getAll",arguments,1),l=[],n+="",this.#ml.forEach((e=>e[0]===n&&l.push(e[1]))),l}has(n){return h("has",arguments,1),n+="",this.#ml.some((l=>l[0]===n))}forEach(n,l){for(var[e,t]of(h("forEach",arguments,1),this))n.call(l,t,e,this)}set(...n){h("set",arguments,2);var l=[],e=!0;n=c(...n),this.#ml.forEach((t=>{t[0]===n[0]?e&&(e=!l.push(n)):l.push(t)})),e&&l.push(n),this.#ml=l}*entries(){yield*this.#ml}*keys(){for(var[n]of this)yield n}*values(){for(var[,n]of this)yield n}};function p(n,l=t.A){var e=`${s()}${s()}`.replace(/\./g,"").slice(-28).padStart(32,"-"),u=[],r=`--${e}\r\nContent-Disposition: form-data; name="`;return n.forEach(((n,l)=>"string"==typeof n?u.push(r+d(l)+`"\r\n\r\n${n.replace(/\r(?!\n)|(?<!\r)\n/g,"\r\n")}\r\n`):u.push(r+d(l)+`"; filename="${d(n.name,1)}"\r\nContent-Type: ${n.type||"application/octet-stream"}\r\n\r\n`,n,"\r\n"))),u.push(`--${e}--`),new l(u,{type:"multipart/form-data; boundary="+e})}},2065:(n,l,e)=>{"use strict";e.r(l),e.d(l,{AbortError:()=>W,Blob:()=>z.YQ,FetchError:()=>f,File:()=>z.ZH,FormData:()=>d.fS,Headers:()=>P,Request:()=>U,Response:()=>R,blobFrom:()=>z.k4,blobFromSync:()=>z.F8,default:()=>G,fileFrom:()=>z.NX,fileFromSync:()=>z._M,isRedirect:()=>A});const t=require("node:http"),u=require("node:https"),r=require("node:zlib"),o=require("node:stream"),i=require("node:buffer"),s=function(n){if(!/^data:/i.test(n))throw new TypeError('`uri` does not appear to be a Data URI (must begin with "data:")');const l=(n=n.replace(/\r?\n/g,"")).indexOf(",");if(-1===l||l<=4)throw new TypeError("malformed data: URI");const e=n.substring(5,l).split(";");let t="",u=!1;const r=e[0]||"text/plain";let o=r;for(let n=1;n<e.length;n++)"base64"===e[n]?u=!0:e[n]&&(o+=`;${e[n]}`,0===e[n].indexOf("charset=")&&(t=e[n].substring(8)));e[0]||t.length||(o+=";charset=US-ASCII",t="US-ASCII");const i=u?"base64":"ascii",s=unescape(n.substring(l+1)),a=Buffer.from(s,i);return a.type=r,a.typeFull=o,a.charset=t,a},a=require("node:util");var c=e(3720),d=e(8435);class h extends Error{constructor(n,l){super(n),Error.captureStackTrace(this,this.constructor),this.type=l}get name(){return this.constructor.name}get[Symbol.toStringTag](){return this.constructor.name}}class f extends h{constructor(n,l,e){super(n,l),e&&(this.code=this.errno=e.code,this.erroredSysCall=e.syscall)}}const p=Symbol.toStringTag,m=n=>"object"==typeof n&&"function"==typeof n.append&&"function"==typeof n.delete&&"function"==typeof n.get&&"function"==typeof n.getAll&&"function"==typeof n.has&&"function"==typeof n.set&&"function"==typeof n.sort&&"URLSearchParams"===n[p],g=n=>n&&"object"==typeof n&&"function"==typeof n.arrayBuffer&&"string"==typeof n.type&&"function"==typeof n.stream&&"function"==typeof n.constructor&&/^(Blob|File)$/.test(n[p]),y=(n,l)=>{const e=new URL(l).hostname,t=new URL(n).hostname;return e===t||e.endsWith(`.${t}`)},v=(n,l)=>new URL(l).protocol===new URL(n).protocol,w=(0,a.promisify)(o.pipeline),b=Symbol("Body internals");class S{constructor(n,{size:l=0}={}){let e=null;null===n?n=null:m(n)?n=i.Buffer.from(n.toString()):g(n)||i.Buffer.isBuffer(n)||(a.types.isAnyArrayBuffer(n)?n=i.Buffer.from(n):ArrayBuffer.isView(n)?n=i.Buffer.from(n.buffer,n.byteOffset,n.byteLength):n instanceof o||(n instanceof d.fS?e=(n=(0,d.$n)(n)).type.split("=")[1]:n=i.Buffer.from(String(n))));let t=n;i.Buffer.isBuffer(n)?t=o.Readable.from(n):g(n)&&(t=o.Readable.from(n.stream())),this[b]={body:n,stream:t,boundary:e,disturbed:!1,error:null},this.size=l,n instanceof o&&n.on("error",(n=>{const l=n instanceof h?n:new f(`Invalid response body while trying to fetch ${this.url}: ${n.message}`,"system",n);this[b].error=l}))}get body(){return this[b].stream}get bodyUsed(){return this[b].disturbed}async arrayBuffer(){const{buffer:n,byteOffset:l,byteLength:e}=await C(this);return n.slice(l,l+e)}async formData(){const n=this.headers.get("content-type");if(n.startsWith("application/x-www-form-urlencoded")){const n=new d.fS,l=new URLSearchParams(await this.text());for(const[e,t]of l)n.append(e,t);return n}const{toFormData:l}=await e.e(460).then(e.bind(e,5079));return l(this.body,n)}async blob(){const n=this.headers&&this.headers.get("content-type")||this[b].body&&this[b].body.type||"",l=await this.arrayBuffer();return new c.A([l],{type:n})}async json(){const n=await this.text();return JSON.parse(n)}async text(){const n=await C(this);return(new TextDecoder).decode(n)}buffer(){return C(this)}}async function C(n){if(n[b].disturbed)throw new TypeError(`body used already for: ${n.url}`);if(n[b].disturbed=!0,n[b].error)throw n[b].error;const{body:l}=n;if(null===l)return i.Buffer.alloc(0);if(!(l instanceof o))return i.Buffer.alloc(0);const e=[];let t=0;try{for await(const u of l){if(n.size>0&&t+u.length>n.size){const e=new f(`content size at ${n.url} over limit: ${n.size}`,"max-size");throw l.destroy(e),e}t+=u.length,e.push(u)}}catch(l){throw l instanceof h?l:new f(`Invalid response body while trying to fetch ${n.url}: ${l.message}`,"system",l)}if(!0!==l.readableEnded&&!0!==l._readableState.ended)throw new f(`Premature close of server response while trying to fetch ${n.url}`);try{return e.every((n=>"string"==typeof n))?i.Buffer.from(e.join("")):i.Buffer.concat(e,t)}catch(l){throw new f(`Could not create Buffer from response body for ${n.url}: ${l.message}`,"system",l)}}S.prototype.buffer=(0,a.deprecate)(S.prototype.buffer,"Please use 'response.arrayBuffer()' instead of 'response.buffer()'","node-fetch#buffer"),Object.defineProperties(S.prototype,{body:{enumerable:!0},bodyUsed:{enumerable:!0},arrayBuffer:{enumerable:!0},blob:{enumerable:!0},json:{enumerable:!0},text:{enumerable:!0},data:{get:(0,a.deprecate)((()=>{}),"data doesn't exist, use json(), text(), arrayBuffer(), or body instead","https://github.com/node-fetch/node-fetch/issues/1000 (response)")}});const D=(n,l)=>{let e,t,{body:u}=n[b];if(n.bodyUsed)throw new Error("cannot clone body after it is used");return u instanceof o&&"function"!=typeof u.getBoundary&&(e=new o.PassThrough({highWaterMark:l}),t=new o.PassThrough({highWaterMark:l}),u.pipe(e),u.pipe(t),n[b].stream=e,u=t),u},E=(0,a.deprecate)((n=>n.getBoundary()),"form-data doesn't follow the spec and requires special treatment. Use alternative package","https://github.com/node-fetch/node-fetch/issues/1167"),_=(n,l)=>null===n?null:"string"==typeof n?"text/plain;charset=UTF-8":m(n)?"application/x-www-form-urlencoded;charset=UTF-8":g(n)?n.type||null:i.Buffer.isBuffer(n)||a.types.isAnyArrayBuffer(n)||ArrayBuffer.isView(n)?null:n instanceof d.fS?`multipart/form-data; boundary=${l[b].boundary}`:n&&"function"==typeof n.getBoundary?`multipart/form-data;boundary=${E(n)}`:n instanceof o?null:"text/plain;charset=UTF-8",k=async(n,{body:l})=>{null===l?n.end():await w(l,n)},x="function"==typeof t.validateHeaderName?t.validateHeaderName:n=>{if(!/^[\^`\-\w!#$%&'*+.|~]+$/.test(n)){const l=new TypeError(`Header name must be a valid HTTP token [${n}]`);throw Object.defineProperty(l,"code",{value:"ERR_INVALID_HTTP_TOKEN"}),l}},T="function"==typeof t.validateHeaderValue?t.validateHeaderValue:(n,l)=>{if(/[^\t\u0020-\u007E\u0080-\u00FF]/.test(l)){const l=new TypeError(`Invalid character in header content ["${n}"]`);throw Object.defineProperty(l,"code",{value:"ERR_INVALID_CHAR"}),l}};class P extends URLSearchParams{constructor(n){let l=[];if(n instanceof P){const e=n.raw();for(const[n,t]of Object.entries(e))l.push(...t.map((l=>[n,l])))}else if(null==n);else{if("object"!=typeof n||a.types.isBoxedPrimitive(n))throw new TypeError("Failed to construct 'Headers': The provided value is not of type '(sequence<sequence<ByteString>> or record<ByteString, ByteString>)");{const e=n[Symbol.iterator];if(null==e)l.push(...Object.entries(n));else{if("function"!=typeof e)throw new TypeError("Header pairs must be iterable");l=[...n].map((n=>{if("object"!=typeof n||a.types.isBoxedPrimitive(n))throw new TypeError("Each header pair must be an iterable object");return[...n]})).map((n=>{if(2!==n.length)throw new TypeError("Each header pair must be a name/value tuple");return[...n]}))}}}return l=l.length>0?l.map((([n,l])=>(x(n),T(n,String(l)),[String(n).toLowerCase(),String(l)]))):void 0,super(l),new Proxy(this,{get(n,l,e){switch(l){case"append":case"set":return(e,t)=>(x(e),T(e,String(t)),URLSearchParams.prototype[l].call(n,String(e).toLowerCase(),String(t)));case"delete":case"has":case"getAll":return e=>(x(e),URLSearchParams.prototype[l].call(n,String(e).toLowerCase()));case"keys":return()=>(n.sort(),new Set(URLSearchParams.prototype.keys.call(n)).keys());default:return Reflect.get(n,l,e)}}})}get[Symbol.toStringTag](){return this.constructor.name}toString(){return Object.prototype.toString.call(this)}get(n){const l=this.getAll(n);if(0===l.length)return null;let e=l.join(", ");return/^content-encoding$/i.test(n)&&(e=e.toLowerCase()),e}forEach(n,l=void 0){for(const e of this.keys())Reflect.apply(n,l,[this.get(e),e,this])}*values(){for(const n of this.keys())yield this.get(n)}*entries(){for(const n of this.keys())yield[n,this.get(n)]}[Symbol.iterator](){return this.entries()}raw(){return[...this.keys()].reduce(((n,l)=>(n[l]=this.getAll(l),n)),{})}[Symbol.for("nodejs.util.inspect.custom")](){return[...this.keys()].reduce(((n,l)=>{const e=this.getAll(l);return n[l]="host"===l?e[0]:e.length>1?e:e[0],n}),{})}}Object.defineProperties(P.prototype,["get","entries","forEach","values"].reduce(((n,l)=>(n[l]={enumerable:!0},n)),{}));const I=new Set([301,302,303,307,308]),A=n=>I.has(n),O=Symbol("Response internals");class R extends S{constructor(n=null,l={}){super(n,l);const e=null!=l.status?l.status:200,t=new P(l.headers);if(null!==n&&!t.has("Content-Type")){const l=_(n,this);l&&t.append("Content-Type",l)}this[O]={type:"default",url:l.url,status:e,statusText:l.statusText||"",headers:t,counter:l.counter,highWaterMark:l.highWaterMark}}get type(){return this[O].type}get url(){return this[O].url||""}get status(){return this[O].status}get ok(){return this[O].status>=200&&this[O].status<300}get redirected(){return this[O].counter>0}get statusText(){return this[O].statusText}get headers(){return this[O].headers}get highWaterMark(){return this[O].highWaterMark}clone(){return new R(D(this,this.highWaterMark),{type:this.type,url:this.url,status:this.status,statusText:this.statusText,headers:this.headers,ok:this.ok,redirected:this.redirected,size:this.size,highWaterMark:this.highWaterMark})}static redirect(n,l=302){if(!A(l))throw new RangeError('Failed to execute "redirect" on "response": Invalid status code');return new R(null,{headers:{location:new URL(n).toString()},status:l})}static error(){const n=new R(null,{status:0,statusText:""});return n[O].type="error",n}static json(n=void 0,l={}){const e=JSON.stringify(n);if(void 0===e)throw new TypeError("data is not JSON serializable");const t=new P(l&&l.headers);return t.has("content-type")||t.set("content-type","application/json"),new R(e,{...l,headers:t})}get[Symbol.toStringTag](){return"Response"}}Object.defineProperties(R.prototype,{type:{enumerable:!0},url:{enumerable:!0},status:{enumerable:!0},ok:{enumerable:!0},redirected:{enumerable:!0},statusText:{enumerable:!0},headers:{enumerable:!0},clone:{enumerable:!0}});const F=require("node:url"),L=require("node:net");function $(n,l=!1){return null==n?"no-referrer":(n=new URL(n),/^(about|blob|data):$/.test(n.protocol)?"no-referrer":(n.username="",n.password="",n.hash="",l&&(n.pathname="",n.search=""),n))}const j=new Set(["","no-referrer","no-referrer-when-downgrade","same-origin","origin","strict-origin","origin-when-cross-origin","strict-origin-when-cross-origin","unsafe-url"]);function M(n){return!!/^about:(blank|srcdoc)$/.test(n)||"data:"===n.protocol||!!/^(blob|filesystem):$/.test(n.protocol)||function(n){if(/^(http|ws)s:$/.test(n.protocol))return!0;const l=n.host.replace(/(^\[)|(]$)/g,""),e=(0,L.isIP)(l);return!(4!==e||!/^127\./.test(l))||!(6!==e||!/^(((0+:){7})|(::(0+:){0,6}))0*1$/.test(l))||"localhost"!==n.host&&!n.host.endsWith(".localhost")&&"file:"===n.protocol}(n)}const N=Symbol("Request internals"),B=n=>"object"==typeof n&&"object"==typeof n[N],H=(0,a.deprecate)((()=>{}),".data is not a valid RequestInit property, use .body instead","https://github.com/node-fetch/node-fetch/issues/1000 (request)");class U extends S{constructor(n,l={}){let e;if(B(n)?e=new URL(n.url):(e=new URL(n),n={}),""!==e.username||""!==e.password)throw new TypeError(`${e} is an url with embedded credentials.`);let t=l.method||n.method||"GET";if(/^(delete|get|head|options|post|put)$/i.test(t)&&(t=t.toUpperCase()),!B(l)&&"data"in l&&H(),(null!=l.body||B(n)&&null!==n.body)&&("GET"===t||"HEAD"===t))throw new TypeError("Request with GET/HEAD method cannot have body");const u=l.body?l.body:B(n)&&null!==n.body?D(n):null;super(u,{size:l.size||n.size||0});const r=new P(l.headers||n.headers||{});if(null!==u&&!r.has("Content-Type")){const n=_(u,this);n&&r.set("Content-Type",n)}let o=B(n)?n.signal:null;if("signal"in l&&(o=l.signal),null!=o&&("object"!=typeof(i=o)||"AbortSignal"!==i[p]&&"EventTarget"!==i[p]))throw new TypeError("Expected signal to be an instanceof AbortSignal or EventTarget");var i;let s=null==l.referrer?n.referrer:l.referrer;if(""===s)s="no-referrer";else if(s){const n=new URL(s);s=/^about:(\/\/)?client$/.test(n)?"client":n}else s=void 0;this[N]={method:t,redirect:l.redirect||n.redirect||"follow",headers:r,parsedURL:e,signal:o,referrer:s},this.follow=void 0===l.follow?void 0===n.follow?20:n.follow:l.follow,this.compress=void 0===l.compress?void 0===n.compress||n.compress:l.compress,this.counter=l.counter||n.counter||0,this.agent=l.agent||n.agent,this.highWaterMark=l.highWaterMark||n.highWaterMark||16384,this.insecureHTTPParser=l.insecureHTTPParser||n.insecureHTTPParser||!1,this.referrerPolicy=l.referrerPolicy||n.referrerPolicy||""}get method(){return this[N].method}get url(){return(0,F.format)(this[N].parsedURL)}get headers(){return this[N].headers}get redirect(){return this[N].redirect}get signal(){return this[N].signal}get referrer(){return"no-referrer"===this[N].referrer?"":"client"===this[N].referrer?"about:client":this[N].referrer?this[N].referrer.toString():void 0}get referrerPolicy(){return this[N].referrerPolicy}set referrerPolicy(n){this[N].referrerPolicy=function(n){if(!j.has(n))throw new TypeError(`Invalid referrerPolicy: ${n}`);return n}(n)}clone(){return new U(this)}get[Symbol.toStringTag](){return"Request"}}Object.defineProperties(U.prototype,{method:{enumerable:!0},url:{enumerable:!0},headers:{enumerable:!0},redirect:{enumerable:!0},clone:{enumerable:!0},signal:{enumerable:!0},referrer:{enumerable:!0},referrerPolicy:{enumerable:!0}});const q=n=>{const{parsedURL:l}=n[N],e=new P(n[N].headers);e.has("Accept")||e.set("Accept","*/*");let t=null;if(null===n.body&&/^(post|put)$/i.test(n.method)&&(t="0"),null!==n.body){const l=(n=>{const{body:l}=n[b];return null===l?0:g(l)?l.size:i.Buffer.isBuffer(l)?l.length:l&&"function"==typeof l.getLengthSync&&l.hasKnownLength&&l.hasKnownLength()?l.getLengthSync():null})(n);"number"!=typeof l||Number.isNaN(l)||(t=String(l))}t&&e.set("Content-Length",t),""===n.referrerPolicy&&(n.referrerPolicy="strict-origin-when-cross-origin"),n.referrer&&"no-referrer"!==n.referrer?n[N].referrer=function(n,{referrerURLCallback:l,referrerOriginCallback:e}={}){if("no-referrer"===n.referrer||""===n.referrerPolicy)return null;const t=n.referrerPolicy;if("about:client"===n.referrer)return"no-referrer";const u=n.referrer;let r=$(u),o=$(u,!0);r.toString().length>4096&&(r=o),l&&(r=l(r)),e&&(o=e(o));const i=new URL(n.url);switch(t){case"no-referrer":return"no-referrer";case"origin":return o;case"unsafe-url":return r;case"strict-origin":return M(r)&&!M(i)?"no-referrer":o.toString();case"strict-origin-when-cross-origin":return r.origin===i.origin?r:M(r)&&!M(i)?"no-referrer":o;case"same-origin":return r.origin===i.origin?r:"no-referrer";case"origin-when-cross-origin":return r.origin===i.origin?r:o;case"no-referrer-when-downgrade":return M(r)&&!M(i)?"no-referrer":r;default:throw new TypeError(`Invalid referrerPolicy: ${t}`)}}(n):n[N].referrer="no-referrer",n[N].referrer instanceof URL&&e.set("Referer",n.referrer),e.has("User-Agent")||e.set("User-Agent","node-fetch"),n.compress&&!e.has("Accept-Encoding")&&e.set("Accept-Encoding","gzip, deflate, br");let{agent:u}=n;"function"==typeof u&&(u=u(l)),e.has("Connection")||u||e.set("Connection","close");const r=(n=>{if(n.search)return n.search;const l=n.href.length-1,e=n.hash||("#"===n.href[l]?"#":"");return"?"===n.href[l-e.length]?"?":""})(l);return{parsedURL:l,options:{path:l.pathname+r,method:n.method,headers:e[Symbol.for("nodejs.util.inspect.custom")](),insecureHTTPParser:n.insecureHTTPParser,agent:u}}};class W extends h{constructor(n,l="aborted"){super(n,l)}}var z=e(9730);const V=new Set(["data:","http:","https:"]);async function G(n,l){return new Promise(((e,a)=>{const c=new U(n,l),{parsedURL:d,options:h}=q(c);if(!V.has(d.protocol))throw new TypeError(`node-fetch cannot load ${n}. URL scheme "${d.protocol.replace(/:$/,"")}" is not supported.`);if("data:"===d.protocol){const n=s(c.url),l=new R(n,{headers:{"Content-Type":n.typeFull}});return void e(l)}const p=("https:"===d.protocol?u:t).request,{signal:m}=c;let g=null;const w=()=>{const n=new W("The operation was aborted.");a(n),c.body&&c.body instanceof o.Readable&&c.body.destroy(n),g&&g.body&&g.body.emit("error",n)};if(m&&m.aborted)return void w();const b=()=>{w(),C()},S=p(d.toString(),h);m&&m.addEventListener("abort",b);const C=()=>{S.abort(),m&&m.removeEventListener("abort",b)};S.on("error",(n=>{a(new f(`request to ${c.url} failed, reason: ${n.message}`,"system",n)),C()})),function(n){const l=i.Buffer.from("0\r\n\r\n");let e,t=!1,u=!1;n.on("response",(n=>{const{headers:l}=n;t="chunked"===l["transfer-encoding"]&&!l["content-length"]})),n.on("socket",(r=>{const o=()=>{if(t&&!u){const n=new Error("Premature close");n.code="ERR_STREAM_PREMATURE_CLOSE",(n=>{g&&g.body&&g.body.destroy(n)})(n)}},s=n=>{u=0===i.Buffer.compare(n.slice(-5),l),!u&&e&&(u=0===i.Buffer.compare(e.slice(-3),l.slice(0,3))&&0===i.Buffer.compare(n.slice(-2),l.slice(3))),e=n};r.prependListener("close",o),r.on("data",s),n.on("close",(()=>{r.removeListener("close",o),r.removeListener("data",s)}))}))}(S),process.version<"v14"&&S.on("socket",(n=>{let l;n.prependListener("end",(()=>{l=n._eventsCount})),n.prependListener("close",(e=>{if(g&&l<n._eventsCount&&!e){const n=new Error("Premature close");n.code="ERR_STREAM_PREMATURE_CLOSE",g.body.emit("error",n)}}))})),S.on("response",(n=>{S.setTimeout(0);const t=function(n=[]){return new P(n.reduce(((n,l,e,t)=>(e%2==0&&n.push(t.slice(e,e+2)),n)),[]).filter((([n,l])=>{try{return x(n),T(n,String(l)),!0}catch{return!1}})))}(n.rawHeaders);if(A(n.statusCode)){const u=t.get("Location");let r=null;try{r=null===u?null:new URL(u,c.url)}catch{if("manual"!==c.redirect)return a(new f(`uri requested responds with an invalid redirect URL: ${u}`,"invalid-redirect")),void C()}switch(c.redirect){case"error":return a(new f(`uri requested responds with a redirect, redirect mode is set to error: ${c.url}`,"no-redirect")),void C();case"manual":break;case"follow":{if(null===r)break;if(c.counter>=c.follow)return a(new f(`maximum redirect reached at: ${c.url}`,"max-redirect")),void C();const u={headers:new P(c.headers),follow:c.follow,counter:c.counter+1,agent:c.agent,compress:c.compress,method:c.method,body:D(c),signal:c.signal,size:c.size,referrer:c.referrer,referrerPolicy:c.referrerPolicy};if(!y(c.url,r)||!v(c.url,r))for(const n of["authorization","www-authenticate","cookie","cookie2"])u.headers.delete(n);if(303!==n.statusCode&&c.body&&l.body instanceof o.Readable)return a(new f("Cannot follow redirect with body being a readable stream","unsupported-redirect")),void C();303!==n.statusCode&&(301!==n.statusCode&&302!==n.statusCode||"POST"!==c.method)||(u.method="GET",u.body=void 0,u.headers.delete("content-length"));const i=function(n){const l=(n.get("referrer-policy")||"").split(/[,\s]+/);let e="";for(const n of l)n&&j.has(n)&&(e=n);return e}(t);return i&&(u.referrerPolicy=i),e(G(new U(r,u))),void C()}default:return a(new TypeError(`Redirect option '${c.redirect}' is not a valid value of RequestRedirect`))}}m&&n.once("end",(()=>{m.removeEventListener("abort",b)}));let u=(0,o.pipeline)(n,new o.PassThrough,(n=>{n&&a(n)}));process.version<"v12.10"&&n.on("aborted",b);const i={url:c.url,status:n.statusCode,statusText:n.statusMessage,headers:t,size:c.size,counter:c.counter,highWaterMark:c.highWaterMark},s=t.get("Content-Encoding");if(!c.compress||"HEAD"===c.method||null===s||204===n.statusCode||304===n.statusCode)return g=new R(u,i),void e(g);const d={flush:r.Z_SYNC_FLUSH,finishFlush:r.Z_SYNC_FLUSH};if("gzip"===s||"x-gzip"===s)return u=(0,o.pipeline)(u,r.createGunzip(d),(n=>{n&&a(n)})),g=new R(u,i),void e(g);if("deflate"===s||"x-deflate"===s){const l=(0,o.pipeline)(n,new o.PassThrough,(n=>{n&&a(n)}));return l.once("data",(n=>{u=8==(15&n[0])?(0,o.pipeline)(u,r.createInflate(),(n=>{n&&a(n)})):(0,o.pipeline)(u,r.createInflateRaw(),(n=>{n&&a(n)})),g=new R(u,i),e(g)})),void l.once("end",(()=>{g||(g=new R(u,i),e(g))}))}if("br"===s)return u=(0,o.pipeline)(u,r.createBrotliDecompress(),(n=>{n&&a(n)})),g=new R(u,i),void e(g);g=new R(u,i),e(g)})),k(S,c).catch(a)}))}},8330:n=>{"use strict";n.exports=JSON.parse('{"name":"remote-ssh","displayName":"Remote - SSH","description":"%description%","version":"0.118.0","publisher":"ms-vscode-remote","icon":"resources/remote-ssh.png","repository":{"type":"git","url":"https://github.com/Microsoft/vscode-remote-release.git"},"bugs":{"url":"https://github.com/Microsoft/vscode-remote-release/issues"},"license":"SEE LICENSE IN LICENSE.txt","engines":{"vscode":"^1.96.0"},"extensionKind":["ui"],"enabledApiProposals":["resolvers","tunnels","terminalDataWriteEvent","contribViewsRemote","telemetry","contribRemoteHelp"],"extensionPack":["ms-vscode-remote.remote-ssh-edit","ms-vscode.remote-explorer"],"categories":["Other"],"keywords":["remote development","remote","ssh"],"api":"none","activationEvents":["onCommand:remote-internal.getSshFoldersHistory","onCommand:remote-internal.deleteSshFolderFromHistory","onCommand:remote-internal.getActiveSshRemote","onCommand:remote-internal.getConfiguredHostnames","onCommand:remote-internal.openRemoteSshTarget","onResolveRemoteAuthority:ssh-remote","onUri"],"l10n":"./l10n","main":"./out/extension","aiKey":"0c6ae279ed8443289764825290e4f9e2-1a736e7c-1324-4338-be46-fc2a58ae4d14-7255","capabilities":{"untrustedWorkspaces":{"supported":true}},"contributes":{"chatParticipants":[{"name":"remote-ssh","fullName":"Remote - SSH","id":"remote-ssh","description":"%chatParticipants.description%","isSticky":true,"when":"config.remote.SSH.experimental.chat"}],"remoteHelp":{"getStarted":"https://aka.ms/vscode-remote/ssh/getting-started","feedback":"https://aka.ms/vscode-remote/ssh/provide-feedback","documentation":"https://aka.ms/vscode-remote/ssh","issues":"https://aka.ms/vscode-remote/ssh/issues","remoteName":["ssh-remote"]},"configuration":{"title":"Remote - SSH","properties":{"remote.SSH.configFile":{"type":"string","description":"%setting.configFile.description%","default":"","scope":"application"},"remote.SSH.showLoginTerminal":{"type":"boolean","description":"%setting.showLoginTerminal.description%","scope":"application","default":false},"remote.SSH.defaultForwardedPorts":{"type":"array","items":{"type":"object","required":["remotePort"],"properties":{"name":{"type":"string"},"remotePort":{"type":"number"},"localPort":{"type":"number"}}},"description":"%setting.defaultForwardedPorts.description%","default":[]},"remote.SSH.defaultExtensions":{"type":"array","items":{"type":"string"},"description":"%setting.defaultExtensions.description%","scope":"application"},"remote.SSH.defaultExtensionsIfInstalledLocally":{"type":"array","description":"%setting.defaultExtensionsIfInstalledLocally.description%","items":{"type":"string","pattern":"([a-z0-9A-Z][a-z0-9\\\\-A-Z]*)\\\\.([a-z0-9A-Z][a-z0-9\\\\-A-Z]*)","errorMessage":"%setting.defaultExtensionsIfInstalledLocally.errorMessage%"}},"remote.SSH.path":{"type":"string","description":"%setting.path.description%","default":"","scope":"application"},"remote.SSH.serverInstallPath":{"type":"object","description":"%setting.serverInstallPath.description%","scope":"application","additionalProperties":{"type":"string"}},"remote.SSH.lockfilesInTmp":{"type":"boolean","markdownDescription":"%setting.lockfilesInTmp.description%","scope":"application","default":false},"remote.SSH.useFlock":{"type":"boolean","markdownDescription":"%setting.useFlock.description%","scope":"application","default":true},"remote.SSH.enableDynamicForwarding":{"type":"boolean","description":"%setting.enableDynamicForwarding.description%","scope":"application","default":true},"remote.SSH.enableAgentForwarding":{"type":"boolean","markdownDescription":"%setting.enableAgentForwarding.description%","scope":"application","default":true},"remote.SSH.enableX11Forwarding":{"type":"boolean","markdownDescription":"%setting.enableX11Forwarding.description%","scope":"application","default":true},"remote.SSH.permitPtyAllocation":{"type":"boolean","markdownDescription":"%setting.permitPtyAllocation.description%","scope":"application","default":false},"remote.SSH.useCurlAndWgetConfigurationFiles":{"type":"boolean","markdownDescription":"%setting.useCurlAndWgetConfigurationFiles.description%","scope":"application","default":false},"remote.SSH.useExecServer":{"type":"boolean","markdownDescription":"%setting.useExecServer.description%","scope":"application","default":true},"remote.SSH.enableRemoteCommand":{"type":"boolean","markdownDescription":"%setting.enableRemoteCommand.description%","scope":"application","default":false},"remote.SSH.externalSSH_ASKPASS":{"type":"boolean","markdownDescription":"%setting.externalSSH_ASKPASS.description%","scope":"application","default":false},"remote.SSH.allowLocalServerDownload":{"type":"boolean","description":"%setting.allowLocalServerDownload.description%","markdownDeprecationMessage":"%setting.allowLocalServerDownload.deprecationMessage%","scope":"application","default":true},"remote.SSH.localServerDownload":{"type":"string","description":"%setting.localServerDownload.description%","enum":["auto","always","off"],"enumDescriptions":["%setting.localServerDownload.auto.description%","%setting.localServerDownload.always.description%","%setting.localServerDownload.off.description%"],"scope":"application","default":"auto"},"remote.SSH.windowsRemotes":{"type":"array","markdownDescription":"%setting.windowsRemotes.description%","deprecationMessage":"%setting.windowsRemotes.deprecationMessage%","default":[],"items":{"type":"string"},"scope":"application"},"remote.SSH.useLocalServer":{"type":"boolean","markdownDescription":"%setting.useLocalServer.description%","scope":"application","default":true},"remote.SSH.connectTimeout":{"type":"number","description":"%setting.connectTimeout.description%","default":15,"scope":"application","minimum":1},"remote.SSH.logLevel":{"type":"string","description":"%setting.logLevel.description%","default":"debug","scope":"application","enum":["debug","trace"]},"remote.SSH.maxReconnectionAttempts":{"type":["number","null"],"markdownDescription":"%setting.maxReconnectionAttempts.description%","default":null,"scope":"application","maximum":8,"minimum":0},"remote.SSH.suppressWindowsSshWarning":{"type":"boolean","description":"%setting.suppressWindowsSshWarning.description%","default":false,"scope":"application"},"remote.SSH.remotePlatform":{"type":"object","markdownDescription":"%setting.remotePlatform.description%","scope":"application","additionalProperties":{"type":"string","enum":["macOS","windows","linux"]}},"remote.SSH.remoteServerListenOnSocket":{"type":"boolean","default":false,"markdownDescription":"%setting.remoteServerListenOnSocket.description%"},"remote.SSH.serverPickPortsFromRange":{"type":"object","markdownDescription":"%setting.serverPickPortsFromRange.description%","scope":"application","additionalProperties":{"type":"string","pattern":"^\\\\d+-\\\\d+$"}},"remote.SSH.preferredLocalPortRange":{"type":"string","default":"","markdownDescription":"%setting.preferredLocalPortRange.description%","scope":"application","pattern":"^\\\\d+-\\\\d+$|^$"},"remote.SSH.bindHost":{"type":"object","markdownDescription":"%setting.bindHost.description%","scope":"application","examples":[{"example.com":"127.0.0.1"}],"additionalProperties":{"type":"string","default":"127.0.0.1"}},"remote.SSH.experimental.chat":{"type":"boolean","markdownDescription":"%setting.experimental.chat.description%","scope":"application","default":true,"tags":["experimental"]},"remote.SSH.experimental.enhancedSessionLogs":{"type":"boolean","markdownDescription":"%setting.experimental.enhancedSessionLogs.description%","scope":"application","default":true,"tags":["experimental"]},"remote.SSH.httpProxy":{"type":["string","object"],"markdownDescription":"%setting.httpProxy.description%","additionalProperties":{"type":"string"},"default":"","examples":[{"myhost":"http://proxy.example.com:8080","myhost2":"http://proxy2.example.com"},"http://proxy.example.com:8080"]},"remote.SSH.httpsProxy":{"type":["string","object"],"markdownDescription":"%setting.httpsProxy.description%","additionalProperties":{"type":"string"},"default":"","examples":[{"myhost":"https://proxy.example.com:8080","myhost2":"https://proxy2.example.com"},"https://proxy.example.com:8080"]}}},"commands":[{"command":"opensshremotes.openWebUI","title":"%commands.openWebUI.title%","category":"Remote-SSH"},{"command":"opensshremotes.openEmptyWindow","title":"%commands.openEmptyWindow,title%","category":"Remote-SSH"},{"command":"opensshremotes.openEmptyWindowOnCurrentHost","title":"%commands.openEmptyWindowOnCurrentHost.title%","category":"Remote-SSH"},{"command":"opensshremotes.openEmptyWindowInCurrentWindow","title":"%commands.openEmptyWindowInCurrentWindow.title%","category":"Remote-SSH"},{"command":"opensshremotes.openConfigFile","title":"%commands.openConfigFile.title%","category":"Remote-SSH"},{"command":"opensshremotes.addNewSshHost","title":"%commands.addNewSshHost.title%","category":"Remote-SSH"},{"command":"opensshremotes.cleanDevBox","title":"%commands.cleanDevBox.title%","category":"Remote-SSH"},{"command":"opensshremotes.cleanRemoteServer","title":"%commands.cleanRemoteServer.title%","category":"Remote-SSH"},{"command":"opensshremotes.cleanCurrentRemoteServer","title":"%commands.cleanCurrentRemoteServer.title%","category":"Remote-SSH"},{"command":"opensshremotes.cleanLocalServer","title":"%commands.cleanLocalServer.title%","category":"Remote-SSH"},{"command":"opensshremotes.getHelp","title":"%commands.getHelp.title%","category":"Remote-SSH"},{"command":"opensshremotes.getStarted","title":"%commands.getStarted.title%","category":"Remote-SSH"},{"command":"opensshremotes.reportIssue","title":"%commands.reportIssue.title%","category":"Remote-SSH"},{"command":"opensshremotes.settings","title":"%commands.settings.title%","category":"Remote-SSH"},{"command":"opensshremotes.provideFeedback","title":"%commands.provideFeedback.title%","category":"Remote-SSH"},{"command":"opensshremotes.showLog","title":"%commands.showLog.title%","category":"Remote-SSH"},{"command":"opensshremotes.clearAllSessionHints","title":"%commands.clearAllSessionHints.title%","category":"Remote-SSH","enablement":"config.remote.SSH.experimental.chat"}],"resourceLabelFormatters":[{"scheme":"vscode-remote","authority":"ssh-remote+*","formatting":{"label":"${path}","separator":"/","tildify":true,"workspaceSuffix":"SSH"}}],"menus":{"statusBar/remoteIndicator":[{"command":"opensshremotes.openEmptyWindow","group":"remote_20_ssh-remote_1general@1"},{"command":"opensshremotes.openEmptyWindowInCurrentWindow","group":"remote_20_ssh-remote_1general@2"}],"commandPalette":[{"command":"opensshremotes.getStarted","when":"!remoteName && !virtualWorkspace || remoteName =~ /^ssh-remote$/ && remoteConnectionState == disconnected"},{"command":"opensshremotes.openEmptyWindowOnCurrentHost","when":"remoteName =~ /^ssh-remote$/ && remoteConnectionState == connected"},{"command":"opensshremotes.provideFeedback","when":"remoteName =~ /^ssh-remote$/"},{"command":"opensshremotes.cleanCurrentRemoteServer","when":"remoteName =~ /^ssh-remote$/ && remoteConnectionState == connected"},{"command":"opensshremotes.cleanLocalServer","when":"config.remote.SSH.useLocalServer"},{"command":"opensshremotes.openWebUI","when":"remoteName =~ /^ssh-remote$/ && remoteConnectionState == connected && config.remote.SSH.enableWebAccess"}]}},"scripts":{"lint:eslint":"eslint \\"src/**/*.ts\\"","lint:shellcheck":"node scripts/shellcheck.js","lint":"npm-run-all lint:eslint lint:shellcheck","preinstall":"npm exec ado-npm-auth","postinstall":"npm run downloadapi","downloadapi":"vscode-dts dev","vscode:prepublish":"webpack --mode production","compile":"webpack --mode development","watch":"webpack --mode development --watch","package":"vsce package --yarn","pretest":"npm run compile","test":"vscode-test --label unit","test:baseline":"vscode-test --label baseline","baseline":"npm-run-all pretest test:baseline"},"devDependencies":{"@devcontainers/cli":"latest","@types/glob":"^8.1.0","@types/lockfile":"^1.0.4","@types/minimist":"^1.2.5","@types/mocha":"^10.0.6","@types/node":"^20.10.3","@types/shell-quote":"^1.7.5","@types/sinon":"^17.0.2","@types/vscode":"1.90.0","@types/webpack":"^5.28.5","@typescript-eslint/eslint-plugin":"^6.13.2","@typescript-eslint/parser":"^6.13.2","@vscode/test-cli":"^0.0.10","@vscode/test-electron":"^2.4.1","@vscode/vsce":"^2.22.0","ado-npm-auth":"^0.1.2","copy-webpack-plugin":"^11.0.0","copyfiles":"^2.4.1","eslint":"^8.55.0","mocha":"^10.2.0","npm-run-all2":"^7.0.1","raw-loader":"^4.0.2","shellcheck":"^3.0.0","sinon":"^17.0.1","ts-loader":"^9.5.1","ts-sinon":"^2.0.2","typescript":"^5.3.2","vscode-dts":"^0.3.3","webpack":"^5.94.0","webpack-cli":"^5.1.4"},"dependencies":{"@enonic/fnv-plus":"^1.3.0","@microsoft/dev-tunnels-contracts":"^1.0.7463","@vscode-internal/remote-web-rpc":"^2.1.9","@vscode/chat-extension-utils":"^0.0.0-alpha.4","@vscode/extension-telemetry":"^0.9.0","@vscode/prompt-tsx":"^0.3.0-alpha.13","glob":"^10.3.10","https-proxy-agent":"^7.0.2","lockfile":"^1.0.4","minimist":"^1.2.8","posix-getopt":"^1.2.1","shell-quote":"^1.8.1","socks":"^2.7.3","ssh-config":"^5.0.2","table":"^6.8.2"},"resolutions":{"strip-ansi":"6.0.1"}}')},9707:n=>{"use strict";n.exports=JSON.parse('{"description":"Open any folder on a remote machine using SSH and take advantage of VS Code\'s full feature set.","chatParticipants.description":"Learn about Remote - SSH and diagnose connection issues","setting.configFile.description":"The absolute file path to a custom SSH config file.","setting.showLoginTerminal.description":"Always reveal the SSH login terminal.","setting.defaultForwardedPorts.description":"A list of ports to forward when the connection is established.","setting.defaultExtensions.description":"List of extensions that should be installed automatically on all SSH hosts.","setting.defaultExtensionsIfInstalledLocally.description":"List of extensions that should be installed automatically on all SSH hosts if they are already installed locally.","setting.defaultExtensionsIfInstalledLocally.errorMessage":"Expected format \'${publisher}.${name}\'. Example: \'vscode.csharp\'.","setting.path.description":"An absolute path to the SSH executable. When empty, it will use \\"ssh\\" on the path or in common install locations.","setting.serverInstallPath.description":{"message":"A map of remote host to absolute path where the VS Code server will be installed. By default the server is installed in the home directory of every remote. **Note**: By changing this setting you may need to clean up other installations of `.vscode-server` on your remote that isn\'t in the path you\'ve configured.","comment":["{Locked=\'`.vscode-server`\'}","Do not translate .vscode-server. It is a specific folder name."]},"setting.lockfilesInTmp.description":"Whether to keep lockfiles in `/tmp` instead of in the server\'s install folder. Useful for connecting to hosts which have issues with locking, such as hosts with a home directory using NFS or another distributed filesystem.","setting.useFlock.description":"Whether to use `flock` for creating lockfiles on Linux remotes instead of `ln`. By default, we use `flock` on Linux remotes and `ln` on macOS.","setting.enableDynamicForwarding.description":"Whether to use SSH dynamic forwarding to allow setting up new port tunnels over an existing SSH connection. When this is used, a password only needs to be entered once for each remote window.","setting.enableAgentForwarding.description":"Enable fixing the remote environment so that the SSH config option `ForwardAgent` will take effect as expected from VS Code\'s remote extension host.","setting.enableX11Forwarding.description":"Enable fixing the remote environment so that the SSH config option `ForwardX11` will take effect as expected from VS Code\'s remote extension host.","setting.permitPtyAllocation.description":"Permits the system to allocate a pseudo-terminal for the SSH connection (by omitting the \'-T\' SSH connection flag). This setting is disabled by default and may be enabled to support specific use-cases.","setting.useCurlAndWgetConfigurationFiles.description":"Respect configuration from remote environment\'s \'curlrc\' and \'wgetrc\' files (placed in their respective default locations).  Enabling this setting may be useful in certain cases (i.e: proxy configuration) but can interfere with this extension\'s operation. Setting may be ignored on platforms that do not support the necessary flags (i.e: busybox).","setting.useExecServer.description":"Uses the a new bootstrapping mode when connecting to a server. Can be toggled off in the event of connection issues.","setting.bindHost.description":"Configures the host the VS Code server will bind to on the remote server. It defaults to IPv4 localhost and should only need modification in advanced cases.","setting.enableRemoteCommand.description":{"message":"**Experimental:** Enable using RemoteCommands from ssh config entries. This is only enabled if `#remote.SSH.useLocalServer#` is enabled as well and the remote you are trying to connect to is not listed under the `#remote.SSH.remotePlatform#` setting.","comment":["{Locked=\'`#remote.SSH.useLocalServer#`\'}","{Locked=\'`#remote.SSH.remotePlatform#`\'}","Do not translate what is in `#...#`. It\'s syntax needed by VS Code."]},"setting.externalSSH_ASKPASS.description":{"message":"**Experimental:** In local server mode (enabled with `#remote.SSH.useLocalServer#`) Remote - SSH uses SSH_ASKPASS to set VS Code as the application to handle authentication requests; this makes prompts for input show up inside VS Code. However, if you have an external application to handle authentication, such as an YubiKey, you may want to set SSH_ASKPASS to your application instead. If you enable this setting then Remote - SSH won\'t override your existing SSH_ASKPASS value if one exists.","comment":["{Locked=\'`#remote.SSH.useLocalServer#`\'}","Do not translate what is in `#...#`. It\'s syntax needed by VS Code."]},"setting.allowLocalServerDownload.description":"If downloading the VS Code server fails on the host, this allows the extension to fall back to downloading on the client and transferring it to the host with scp.","setting.allowLocalServerDownload.deprecationMessage":{"message":"Deprecated, please use `#remote.SSH.localServerDownload#`","comment":["{Locked=\'`#remote.SSH.localServerDownload#`\'}","Do not translate what is in `#...#`. It\'s syntax needed by VS Code."]},"setting.localServerDownload.description":"Whether the extension can download the VS Code Server on the client and transfer it to the host with scp, instead of downloading it on the host.","setting.localServerDownload.auto.description":"The server will first be downloaded on the host, and if that fails, will fall back to downloading locally","setting.localServerDownload.always.description":"The server will only be downloaded locally and transferred to the host","setting.localServerDownload.off.description":"The server will only be downloaded on the host","setting.windowsRemotes.description":"**Deprecated**: Enables experimental support for connecting to Windows remotes. Add the names of windows remotes to this list.","setting.windowsRemotes.deprecationMessage":{"message":"Deprecated: Please use `#remote.SSH.remotePlatorm#` instead","comment":["{Locked=\'`#remote.SSH.remotePlatorm#`\'}","Do not translate what is in `#...#`. It\'s syntax needed by VS Code."]},"setting.useLocalServer.description":"Enables a mode for connecting using a single connection shared between windows and across window reloads. This makes it faster to open new windows and reduces the number of times a password needs to be entered.","setting.connectTimeout.description":"Specifies the timeout in seconds used for the SSH command that connects to the remote.","setting.logLevel.description":"The log level for the extension.","setting.maxReconnectionAttempts.description":"The maximum number of times to attempt reconnection. Use 0 to disallow reconnection, and `null` to use the maximum of 8.","setting.suppressWindowsSshWarning.description":"Due to a bug with password handling in some versions of the SSH client bundled with Windows, the extension prefers a non-Windows SSH client, such as the one bundled with Git, and will show a warning when another one can\'t be found. This setting disables that warning.","setting.remotePlatform.description":{"message":"A map of the remote hostname to the platform for that remote. The hostname may include a star \'*\' to wildcard match. Valid values: `linux`, `macOS`, `windows`. Note - this setting will soon be required when `#remote.SSH.useLocalServer#` is disabled, so it is currently being autopopulated for successful connections, but is not currently used.","comment":["{Locked=\'`#remote.SSH.useLocalServer#`\'}","Do not translate what is in `#...#`. It\'s syntax needed by VS Code."]},"setting.remoteServerListenOnSocket.description":"When true, the remote VS Code server will listen on a socket path instead of opening a port. Only valid for Linux and macOS remotes. After toggling this setting, run the command \\"Kill VS Code Server on Host...\\" for it to take effect. Requires OpenSSH 6.7+. Disables the \\"local server\\" connection multiplexing mode. Requires `AllowStreamLocalForwarding` to be enabled for the SSH server.","setting.serverPickPortsFromRange.description":"A map of the remote hostname to a range of ports you\'d prefer the server to connect to on launch on the **remote** machine. If no free port is found in range, an error will be thrown. Valid ranges of the form `number-number` such as `4000-5000`; it\'s expected the first number will be lower than the next.","setting.preferredLocalPortRange.description":"A range of **local** ports preferred to utilize for the SSH tunnel connection. If no free port is found in range, an error will be thrown. Valid ranges of the form `number-number` such as `4000-5000`; it\'s expected the first number will be lower than the next.","setting.experimental.chat.description":"Enables an experimental Copilot Chat Participant.  Use natural language to learn about Remote - SSH and diagnose connection issues.  For the best experience, use VS Code Insiders and ensure you have the latest Copilot Chat extension installed.","setting.experimental.enhancedSessionLogs.description":"Generates a summarized table of issues detected from the previous session.","setting.httpProxy.description":"Set the \'http_proxy\' environment variable.  This will be set for install and launch of the remote VS Code Server. Provide a string to set for all hosts, or an object with per-host configuration. Kill existing server on the remote for this setting to take effect.","setting.httpsProxy.description":"Set the \'https_proxy\' environment variable.  This will be set for install and launch of the remote VS Code Server. Provide a string to set for all hosts, or an object with per-host configuration. Kill existing server on the remote for this setting to take effect.","commands.openWebUI.title":"Open Web UI","commands.openEmptyWindow,title":"Connect to Host...","commands.openEmptyWindowOnCurrentHost.title":"New Window on Active Host","commands.openEmptyWindowInCurrentWindow.title":"Connect Current Window to Host...","commands.openConfigFile.title":"Open SSH Configuration File...","commands.addNewSshHost.title":"Add New SSH Host...","commands.cleanDevBox.title":"Uninstall VS Code Server from Host...","commands.cleanRemoteServer.title":"Kill VS Code Server on Host...","commands.cleanCurrentRemoteServer.title":"Kill Current VS Code Server","commands.cleanLocalServer.title":"Kill Local Connection Server For Host...","commands.getHelp.title":"Help","commands.getStarted.title":"Get Started with SSH","commands.reportIssue.title":"Report Issue...","commands.settings.title":"Settings","commands.provideFeedback.title":"Provide Feedback","commands.showLog.title":"Show Log","commands.clearAllSessionHints.title":"Clear previous session metadata (used for enhanced error reporting)"}')}},__webpack_module_cache__={},installedChunks;function __webpack_require__(n){var l=__webpack_module_cache__[n];if(void 0!==l)return l.exports;var e=__webpack_module_cache__[n]={id:n,loaded:!1,exports:{}};return __webpack_modules__[n].call(e.exports,e,e.exports,__webpack_require__),e.loaded=!0,e.exports}__webpack_require__.m=__webpack_modules__,__webpack_require__.amdO={},__webpack_require__.d=(n,l)=>{for(var e in l)__webpack_require__.o(l,e)&&!__webpack_require__.o(n,e)&&Object.defineProperty(n,e,{enumerable:!0,get:l[e]})},__webpack_require__.f={},__webpack_require__.e=n=>Promise.all(Object.keys(__webpack_require__.f).reduce(((l,e)=>(__webpack_require__.f[e](n,l),l)),[])),__webpack_require__.u=n=>n+".js",__webpack_require__.o=(n,l)=>Object.prototype.hasOwnProperty.call(n,l),__webpack_require__.r=n=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},__webpack_require__.nmd=n=>(n.paths=[],n.children||(n.children=[]),n),installedChunks={705:1,921:1},__webpack_require__.f.require=(n,l)=>{installedChunks[n]||(n=>{var l=n.modules,e=n.ids,t=n.runtime;for(var u in l)__webpack_require__.o(l,u)&&(__webpack_require__.m[u]=l[u]);t&&t(__webpack_require__);for(var r=0;r<e.length;r++)installedChunks[e[r]]=1})(require("./"+__webpack_require__.u(n)))};var __webpack_exports__={};(()=>{"use strict";var n=__webpack_exports__;Object.defineProperty(n,"__esModule",{value:!0});const l=__webpack_require__(7878),e=__webpack_require__(9510),t=__webpack_require__(9679),u=__webpack_require__(9896),r=__webpack_require__(6928),o=__webpack_require__(857),i=__webpack_require__(2613),s=__webpack_require__(1398),a=__webpack_require__(8007),c=__webpack_require__(4111),d=__webpack_require__(7166),h=__webpack_require__(7361),f=__webpack_require__(7154),p=__webpack_require__(1990),m=__webpack_require__(3070),g=__webpack_require__(7247);suite("baseline",(()=>{const n=[],y={verbose:!1,cleanup:!0,fuzz:"true"===process.env.VSC_SSH_BASELINE_FUZZ,logBaseDir:(0,a.createTestLogDir)()};l.before((async()=>{console.log("📝 Logging will be streamed to",y.logBaseDir),(0,a.cleanupKnownHosts)(),e.stub(s.window,"showQuickPick").resolves({label:"Linux",platform:m.Platform.Linux}),e.stub(s.window,"createQuickPick").callsFake((()=>{const n=(0,t.stubInterface)();return n.onDidAccept.callsFake((l=>{if("Are you sure you want to continue?"===n.placeholder)return n.selectedItems=[n.items[0]],l();throw new Error(`Unhandled stub for createQuickPick() with placeholder '${n.placeholder}'`)})),n})),e.stub(s.window,"createInputBox").callsFake((()=>{const n=(0,t.stubInterface)();return n.onDidAccept.callsFake((l=>{if(n.placeholder?.startsWith("Enter password"))return n.value="foobar",l();throw new Error(`Unhandled stub for createInputBox() with placeholder '${n.placeholder}'`)})),n}))})),l.after((async()=>{console.log("██████╗  █████╗ ███████╗███████╗██╗     ██╗███╗   ██╗███████╗    ██████╗ ███████╗███████╗██╗   ██╗██╗  ████████╗███████╗\n██╔══██╗██╔══██╗██╔════╝██╔════╝██║     ██║████╗  ██║██╔════╝    ██╔══██╗██╔════╝██╔════╝██║   ██║██║  ╚══██╔══╝██╔════╝\n██████╔╝███████║███████╗█████╗  ██║     ██║██╔██╗ ██║█████╗      ██████╔╝█████╗  ███████╗██║   ██║██║     ██║   ███████╗\n██╔══██╗██╔══██║╚════██║██╔══╝  ██║     ██║██║╚██╗██║██╔══╝      ██╔══██╗██╔══╝  ╚════██║██║   ██║██║     ██║   ╚════██║\n██████╔╝██║  ██║███████║███████╗███████╗██║██║ ╚████║███████╗    ██║  ██║███████╗███████║╚██████╔╝███████╗██║   ███████║\n╚═════╝ ╚═╝  ╚═╝╚══════╝╚══════╝╚══════╝╚═╝╚═╝  ╚═══╝╚══════╝    ╚═╝  ╚═╝╚══════╝╚══════╝ ╚═════╝ ╚══════╝╚═╝   ╚══════╝\n                                                                                                                        ");const l=n.map((n=>{const{scenario:l}=n;return{Result:n.matchedExpectation?l.expectSuccess?"✅":"🙈":"❌",Scenario:n.scenario.id,...l.description&&{Description:l.description},Config:l.config,...l.overrideSettings&&{Settings:l.overrideSettings}}}));console.table(l),console.log("📝 For verbose logs see",y.logBaseDir)})),l.suite("scenarios",(()=>{(0,a.readBaselineConfig)().baselines.forEach((e=>{const{id:t}=e,{logBaseDir:m}=y;l.test(t,(async function(){this.timeout(6e5);const l=u.createWriteStream(r.join(m,e.id),{flags:"a"}),v=(0,a.createInMemoryMemento)();(0,a.logInfo)(y,l,`👋  [${t}] Hello at ${(new Date).toISOString()}`);const w={report:n=>{const{message:e}=n;e?.includes(")) ")?(0,a.logInfo)(y,l,`🏃 [${t}] ${e.split(")) ")[1]}`):(0,a.logInfo)(y,l,`🏃 [${t}] ${e}`)}};try{if(await(0,a.resetVSCodeSettings)(s.workspace.getConfiguration("remote.SSH")),y.fuzz){const n=(0,g.generateRandomizedSettings)(y,l);for(const[e,t]of Object.entries(n)){(0,a.logVerbose)(y,l,`🔧 Fuzzing VS Code configuration: ${e} = ${t} (value is a '${typeof t}')`);const n=e.replace("remote.SSH.","");await s.workspace.getConfiguration("remote.SSH").update(n,t,s.ConfigurationTarget.Global)}}if(e.overrideSettings)for(const[n,t]of Object.entries(e.overrideSettings))(0,a.logVerbose)(y,l,`🔧 Overriding VS Code configuration: ${n} = ${t} (value is a '${typeof t}')`),await s.workspace.getConfiguration("remote.SSH").update(n,t,s.ConfigurationTarget.Global);if(await s.workspace.getConfiguration("remote.SSH").update("useLocalServer",!1,s.ConfigurationTarget.Global),await s.workspace.getConfiguration("remote.SSH").update("logLevel","trace",s.ConfigurationTarget.Global),e.sshConfig){if(!s.workspace.workspaceFolders||!s.workspace.workspaceFolders[0])throw new Error("Missing ssh test-fixtures");const n=s.workspace.workspaceFolders[0].uri.fsPath,l=r.join(n,e.sshConfig);await s.workspace.getConfiguration("remote.SSH").update("configFile",l,s.ConfigurationTarget.Global)}(0,a.logVerbose)(y,l,"🔧 VS Code configuration: ",s.workspace.getConfiguration("remote.SSH"));const u=await(0,a.setupScenarioEnvironment)(y,l,e);i.strictEqual(u.outcome,"success");const m=s.workspace.getConfiguration("remote.SSH").get("useExecServer");(0,a.logInfo)(y,l,`🛠️ [${t}] useExecServer = ${m}`);const b=r.join(o.tmpdir(),`vsc-ssh-baseline-${t}-${Date.now()}`),S=new h.MockLogger(!0,l),C="string"==typeof e.authorityHostInfo?await p.HostInfo.parseWithConfig(S,e.authorityHostInfo):e.authorityHostInfo,D="string"==typeof e.authorityHostInfo?`${d.ResolverType}+${e.authorityHostInfo}`:`${d.ResolverType}+${p.HostInfo.toAuthorityString(C)}`,E={deps:{logger:S,telemetry:new h.MockTelemetry,progress:w,timer:new f.Timer,serverDataPath:b},host:C,useExecServer:m,isReconnection:!1},_=[],k=new a.MockExtensionContext(v),x=await(0,c.resolve)(E,D,k,_);(0,a.logInfo)(y,l,`👮 [${t}] Authority: ${D}`),(0,a.logVerbose)(y,l,JSON.stringify(x,void 0,2)),n.push({scenario:e,matchedExpectation:!0===e.expectSuccess}),i.ok(!0===e.expectSuccess)}catch(u){const r=!1===e.expectSuccess;console.error(`[${t}] caught (expected=${r}): ${u} `),(0,a.logInfo)(y,l,`[${t}] caught exception (expected=${r})`),(0,a.logInfo)(y,l,u),n.push({scenario:e,matchedExpectation:r}),i.ok(r)}finally{await(0,a.tryCleanupScenarioEnvironment)(y,l,e),(0,a.logVerbose)(y,l,`📦 [${t}] Global Storage:`),(0,a.logVerbose)(y,l,JSON.stringify(v.dump(),void 0,2)),(0,a.logInfo)(y,l,`👋  [${t}] Goodbye at ${(new Date).toISOString()}\n`),l&&l.close()}}))}))}))}))})();var __webpack_export_target__=exports;for(var i in __webpack_exports__)__webpack_export_target__[i]=__webpack_exports__[i];__webpack_exports__.__esModule&&Object.defineProperty(__webpack_export_target__,"__esModule",{value:!0})})();
//# sourceMappingURL=baselineTests.test.js.map